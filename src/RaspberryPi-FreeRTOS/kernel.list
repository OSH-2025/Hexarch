
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00010000 <_start>:
   10000:	e59ff018 	ldr	pc, [pc, #24]	@ 10020 <reset_handler>
   10004:	e59ff018 	ldr	pc, [pc, #24]	@ 10024 <undefined_handler>
   10008:	e59ff018 	ldr	pc, [pc, #24]	@ 10028 <swi_handler>
   1000c:	e59ff018 	ldr	pc, [pc, #24]	@ 1002c <prefetch_handler>
   10010:	e59ff018 	ldr	pc, [pc, #24]	@ 10030 <data_handler>
   10014:	e59ff018 	ldr	pc, [pc, #24]	@ 10034 <unused_handler>
   10018:	e59ff018 	ldr	pc, [pc, #24]	@ 10038 <irq_handler>
   1001c:	e59ff018 	ldr	pc, [pc, #24]	@ 1003c <fiq_handler>

00010020 <reset_handler>:
   10020:	00010040 	andeq	r0, r1, r0, asr #32

00010024 <undefined_handler>:
   10024:	000242f4 	strdeq	r4, [r2], -r4	@ <UNPREDICTABLE>

00010028 <swi_handler>:
   10028:	000203e0 	andeq	r0, r2, r0, ror #7

0001002c <prefetch_handler>:
   1002c:	000242f8 	strdeq	r4, [r2], -r8

00010030 <data_handler>:
   10030:	000242fc 	strdeq	r4, [r2], -ip

00010034 <unused_handler>:
   10034:	00024300 	andeq	r4, r2, r0, lsl #6

00010038 <irq_handler>:
   10038:	00020494 	muleq	r2, r4, r4

0001003c <fiq_handler>:
   1003c:	00024304 	andeq	r4, r2, r4, lsl #6

00010040 <reset>:
   10040:	e3a00801 	mov	r0, #65536	@ 0x10000
   10044:	e3a01000 	mov	r1, #0
   10048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
   1004c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10058:	e3a000d2 	mov	r0, #210	@ 0xd2
   1005c:	e121f000 	msr	CPSR_c, r0
   10060:	e3a0d902 	mov	sp, #32768	@ 0x8000
   10064:	e3a000d1 	mov	r0, #209	@ 0xd1
   10068:	e121f000 	msr	CPSR_c, r0
   1006c:	e3a0d901 	mov	sp, #16384	@ 0x4000
   10070:	e3a000d3 	mov	r0, #211	@ 0xd3
   10074:	e121f000 	msr	CPSR_c, r0
   10078:	e3a0d302 	mov	sp, #134217728	@ 0x8000000
   1007c:	e59f0018 	ldr	r0, [pc, #24]	@ 1009c <zero_loop+0x14>
   10080:	e59f1018 	ldr	r1, [pc, #24]	@ 100a0 <zero_loop+0x18>
   10084:	e3a02000 	mov	r2, #0

00010088 <zero_loop>:
   10088:	e1500001 	cmp	r0, r1
   1008c:	b4802004 	strlt	r2, [r0], #4
   10090:	bafffffc 	blt	10088 <zero_loop>
   10094:	eb004d68 	bl	2363c <irqBlock>
   10098:	ea0050f4 	b	24470 <main>
   1009c:	00024858 	andeq	r4, r2, r8, asr r8
   100a0:	00025c38 	andeq	r5, r2, r8, lsr ip

Disassembly of section .text:

00020000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   20000:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20004:	e28db000 	add	fp, sp, #0
   20008:	e24dd01c 	sub	sp, sp, #28
   2000c:	e50b0010 	str	r0, [fp, #-16]
   20010:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
   20014:	e50b2018 	str	r2, [fp, #-24]	@ 0xffffffe8
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   20018:	e51b3010 	ldr	r3, [fp, #-16]
   2001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   20020:	e51b3010 	ldr	r3, [fp, #-16]
   20024:	e2433004 	sub	r3, r3, #4
   20028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   2002c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20030:	e2832004 	add	r2, r3, #4
   20034:	e51b3010 	ldr	r3, [fp, #-16]
   20038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   2003c:	e51b3010 	ldr	r3, [fp, #-16]
   20040:	e2433004 	sub	r3, r3, #4
   20044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   20048:	e51b3010 	ldr	r3, [fp, #-16]
   2004c:	e59f21b8 	ldr	r2, [pc, #440]	@ 2020c <pxPortInitialiseStack+0x20c>
   20050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20054:	e51b3010 	ldr	r3, [fp, #-16]
   20058:	e2433004 	sub	r3, r3, #4
   2005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   20060:	e51b2008 	ldr	r2, [fp, #-8]
   20064:	e51b3010 	ldr	r3, [fp, #-16]
   20068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   2006c:	e51b3010 	ldr	r3, [fp, #-16]
   20070:	e2433004 	sub	r3, r3, #4
   20074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   20078:	e51b3010 	ldr	r3, [fp, #-16]
   2007c:	e59f218c 	ldr	r2, [pc, #396]	@ 20210 <pxPortInitialiseStack+0x210>
   20080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20084:	e51b3010 	ldr	r3, [fp, #-16]
   20088:	e2433004 	sub	r3, r3, #4
   2008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   20090:	e51b3010 	ldr	r3, [fp, #-16]
   20094:	e59f2178 	ldr	r2, [pc, #376]	@ 20214 <pxPortInitialiseStack+0x214>
   20098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2009c:	e51b3010 	ldr	r3, [fp, #-16]
   200a0:	e2433004 	sub	r3, r3, #4
   200a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   200a8:	e51b3010 	ldr	r3, [fp, #-16]
   200ac:	e59f2164 	ldr	r2, [pc, #356]	@ 20218 <pxPortInitialiseStack+0x218>
   200b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200b4:	e51b3010 	ldr	r3, [fp, #-16]
   200b8:	e2433004 	sub	r3, r3, #4
   200bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   200c0:	e51b3010 	ldr	r3, [fp, #-16]
   200c4:	e59f2150 	ldr	r2, [pc, #336]	@ 2021c <pxPortInitialiseStack+0x21c>
   200c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200cc:	e51b3010 	ldr	r3, [fp, #-16]
   200d0:	e2433004 	sub	r3, r3, #4
   200d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   200d8:	e51b3010 	ldr	r3, [fp, #-16]
   200dc:	e59f213c 	ldr	r2, [pc, #316]	@ 20220 <pxPortInitialiseStack+0x220>
   200e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200e4:	e51b3010 	ldr	r3, [fp, #-16]
   200e8:	e2433004 	sub	r3, r3, #4
   200ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   200f0:	e51b3010 	ldr	r3, [fp, #-16]
   200f4:	e59f2128 	ldr	r2, [pc, #296]	@ 20224 <pxPortInitialiseStack+0x224>
   200f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200fc:	e51b3010 	ldr	r3, [fp, #-16]
   20100:	e2433004 	sub	r3, r3, #4
   20104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   20108:	e51b3010 	ldr	r3, [fp, #-16]
   2010c:	e59f2114 	ldr	r2, [pc, #276]	@ 20228 <pxPortInitialiseStack+0x228>
   20110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20114:	e51b3010 	ldr	r3, [fp, #-16]
   20118:	e2433004 	sub	r3, r3, #4
   2011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   20120:	e51b3010 	ldr	r3, [fp, #-16]
   20124:	e59f2100 	ldr	r2, [pc, #256]	@ 2022c <pxPortInitialiseStack+0x22c>
   20128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2012c:	e51b3010 	ldr	r3, [fp, #-16]
   20130:	e2433004 	sub	r3, r3, #4
   20134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   20138:	e51b3010 	ldr	r3, [fp, #-16]
   2013c:	e59f20ec 	ldr	r2, [pc, #236]	@ 20230 <pxPortInitialiseStack+0x230>
   20140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20144:	e51b3010 	ldr	r3, [fp, #-16]
   20148:	e2433004 	sub	r3, r3, #4
   2014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   20150:	e51b3010 	ldr	r3, [fp, #-16]
   20154:	e59f20d8 	ldr	r2, [pc, #216]	@ 20234 <pxPortInitialiseStack+0x234>
   20158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2015c:	e51b3010 	ldr	r3, [fp, #-16]
   20160:	e2433004 	sub	r3, r3, #4
   20164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   20168:	e51b3010 	ldr	r3, [fp, #-16]
   2016c:	e59f20c4 	ldr	r2, [pc, #196]	@ 20238 <pxPortInitialiseStack+0x238>
   20170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20174:	e51b3010 	ldr	r3, [fp, #-16]
   20178:	e2433004 	sub	r3, r3, #4
   2017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   20180:	e51b3010 	ldr	r3, [fp, #-16]
   20184:	e59f20b0 	ldr	r2, [pc, #176]	@ 2023c <pxPortInitialiseStack+0x23c>
   20188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2018c:	e51b3010 	ldr	r3, [fp, #-16]
   20190:	e2433004 	sub	r3, r3, #4
   20194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   20198:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   2019c:	e51b3010 	ldr	r3, [fp, #-16]
   201a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   201a4:	e51b3010 	ldr	r3, [fp, #-16]
   201a8:	e2433004 	sub	r3, r3, #4
   201ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   201b0:	e51b3010 	ldr	r3, [fp, #-16]
   201b4:	e3a0201f 	mov	r2, #31
   201b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   201bc:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   201c0:	e2033001 	and	r3, r3, #1
   201c4:	e3530000 	cmp	r3, #0
   201c8:	0a000004 	beq	201e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   201cc:	e51b3010 	ldr	r3, [fp, #-16]
   201d0:	e5933000 	ldr	r3, [r3]
   201d4:	e3832020 	orr	r2, r3, #32
   201d8:	e51b3010 	ldr	r3, [fp, #-16]
   201dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   201e0:	e51b3010 	ldr	r3, [fp, #-16]
   201e4:	e2433004 	sub	r3, r3, #4
   201e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   201ec:	e51b3010 	ldr	r3, [fp, #-16]
   201f0:	e3a02000 	mov	r2, #0
   201f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   201f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   201fc:	e1a00003 	mov	r0, r3
   20200:	e28bd000 	add	sp, fp, #0
   20204:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20208:	e12fff1e 	bx	lr
   2020c:	aaaaaaaa 	bge	feacacbc <_estack+0xf6aaacbc>
   20210:	12121212 	andsne	r1, r2, #536870913	@ 0x20000001
   20214:	11111111 	tstne	r1, r1, lsl r1
   20218:	10101010 	andsne	r1, r0, r0, lsl r0
   2021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   20220:	08080808 	stmdaeq	r8, {r3, fp}
   20224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   20228:	06060606 	streq	r0, [r6], -r6, lsl #12
   2022c:	05050505 	streq	r0, [r5, #-1285]	@ 0xfffffafb
   20230:	04040404 	streq	r0, [r4], #-1028	@ 0xfffffbfc
   20234:	03030303 	movweq	r0, #13059	@ 0x3303
   20238:	02020202 	andeq	r0, r2, #536870912	@ 0x20000000
   2023c:	01010101 	tsteq	r1, r1, lsl #2

00020240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   20240:	e92d4800 	push	{fp, lr}
   20244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   20248:	eb000017 	bl	202ac <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   2024c:	eb00003d 	bl	20348 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   20250:	e3a03000 	mov	r3, #0
}
   20254:	e1a00003 	mov	r0, r3
   20258:	e8bd8800 	pop	{fp, pc}

0002025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   2025c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   20264:	e320f000 	nop	{0}
   20268:	e28bd000 	add	sp, fp, #0
   2026c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20270:	e12fff1e 	bx	lr

00020274 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR (unsigned int nIRQ, void *pParam)
{
   20274:	e92d4800 	push	{fp, lr}
   20278:	e28db004 	add	fp, sp, #4
   2027c:	e24dd008 	sub	sp, sp, #8
   20280:	e50b0008 	str	r0, [fp, #-8]
   20284:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   20288:	eb0009b1 	bl	22954 <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   2028c:	eb000a84 	bl	22ca4 <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   20290:	e59f3010 	ldr	r3, [pc, #16]	@ 202a8 <vTickISR+0x34>
   20294:	e3a02000 	mov	r2, #0
   20298:	e583200c 	str	r2, [r3, #12]
}
   2029c:	e320f000 	nop	{0}
   202a0:	e24bd004 	sub	sp, fp, #4
   202a4:	e8bd8800 	pop	{fp, pc}
   202a8:	2000b400 	andcs	fp, r0, r0, lsl #8

000202ac <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   202ac:	e92d4800 	push	{fp, lr}
   202b0:	e28db004 	add	fp, sp, #4
   202b4:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   202b8:	e3a03ffa 	mov	r3, #1000	@ 0x3e8
   202bc:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	irqBlock();
   202c0:	eb000cdd 	bl	2363c <irqBlock>

	pRegs->CTL = 0x003E0000;
   202c4:	e59f3070 	ldr	r3, [pc, #112]	@ 2033c <prvSetupTimerInterrupt+0x90>
   202c8:	e3a0283e 	mov	r2, #4063232	@ 0x3e0000
   202cc:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = ulCompareMatch - 1;
   202d0:	e59f2064 	ldr	r2, [pc, #100]	@ 2033c <prvSetupTimerInterrupt+0x90>
   202d4:	e51b3008 	ldr	r3, [fp, #-8]
   202d8:	e2433001 	sub	r3, r3, #1
   202dc:	e5823000 	str	r3, [r2]
	pRegs->RLD = ulCompareMatch - 1;
   202e0:	e59f2054 	ldr	r2, [pc, #84]	@ 2033c <prvSetupTimerInterrupt+0x90>
   202e4:	e51b3008 	ldr	r3, [fp, #-8]
   202e8:	e2433001 	sub	r3, r3, #1
   202ec:	e5823018 	str	r3, [r2, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   202f0:	e59f3044 	ldr	r3, [pc, #68]	@ 2033c <prvSetupTimerInterrupt+0x90>
   202f4:	e3a020f9 	mov	r2, #249	@ 0xf9
   202f8:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   202fc:	e59f3038 	ldr	r3, [pc, #56]	@ 2033c <prvSetupTimerInterrupt+0x90>
   20300:	e3a02000 	mov	r2, #0
   20304:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   20308:	e59f302c 	ldr	r3, [pc, #44]	@ 2033c <prvSetupTimerInterrupt+0x90>
   2030c:	e59f202c 	ldr	r2, [pc, #44]	@ 20340 <prvSetupTimerInterrupt+0x94>
   20310:	e5832008 	str	r2, [r3, #8]

	irqRegister(64, vTickISR, NULL);
   20314:	e3a02000 	mov	r2, #0
   20318:	e59f1024 	ldr	r1, [pc, #36]	@ 20344 <prvSetupTimerInterrupt+0x98>
   2031c:	e3a00040 	mov	r0, #64	@ 0x40
   20320:	eb000ccc 	bl	23658 <irqRegister>

	irqEnable(64);
   20324:	e3a00040 	mov	r0, #64	@ 0x40
   20328:	eb000ce3 	bl	236bc <irqEnable>

	irqUnblock();
   2032c:	eb000cbb 	bl	23620 <irqUnblock>
}
   20330:	e320f000 	nop	{0}
   20334:	e24bd004 	sub	sp, fp, #4
   20338:	e8bd8800 	pop	{fp, pc}
   2033c:	2000b400 	andcs	fp, r0, r0, lsl #8
   20340:	003e00a2 	eorseq	r0, lr, r2, lsr #1
   20344:	00020274 	andeq	r0, r2, r4, ror r2

00020348 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   20348:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   2034c:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   20350:	e59f307c 	ldr	r3, [pc, #124]	@ 203d4 <vPortISRStartFirstTask+0x8c>
   20354:	e5933000 	ldr	r3, [r3]
   20358:	e2833001 	add	r3, r3, #1
   2035c:	e59f2070 	ldr	r2, [pc, #112]	@ 203d4 <vPortISRStartFirstTask+0x8c>
   20360:	e5823000 	str	r3, [r2]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   20364:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   20368:	e3c00080 	bic	r0, r0, #128	@ 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   2036c:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   20370:	e59f0274 	ldr	r0, [pc, #628]	@ 205ec <vPortExitCritical+0x64>
   20374:	e5900000 	ldr	r0, [r0]
   20378:	e590e000 	ldr	lr, [r0]
   2037c:	e59f026c 	ldr	r0, [pc, #620]	@ 205f0 <vPortExitCritical+0x68>
   20380:	e8be0002 	ldm	lr!, {r1}
   20384:	e5801000 	str	r1, [r0]
   20388:	e8be0001 	ldm	lr!, {r0}
   2038c:	e16ff000 	msr	SPSR_fsxc, r0
   20390:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20394:	e320f000 	nop	{0}
   20398:	e59ee03c 	ldr	lr, [lr, #60]	@ 0x3c
   2039c:	e25ef004 	subs	pc, lr, #4
   203a0:	e320f000 	nop	{0}
   203a4:	e320f000 	nop	{0}
   203a8:	e59f3028 	ldr	r3, [pc, #40]	@ 203d8 <vPortISRStartFirstTask+0x90>
   203ac:	e5933000 	ldr	r3, [r3]
   203b0:	e59f3024 	ldr	r3, [pc, #36]	@ 203dc <vPortISRStartFirstTask+0x94>
   203b4:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   203b8:	e8bd4000 	ldmfd	sp!, {lr}
   203bc:	e24ee004 	sub	lr, lr, #4
   203c0:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   203c4:	e320f000 	nop	{0}
   203c8:	e28bd000 	add	sp, fp, #0
   203cc:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   203d0:	e12fff1e 	bx	lr
   203d4:	00024858 	andeq	r4, r2, r8, asr r8
   203d8:	00024848 	andeq	r4, r2, r8, asr #16
   203dc:	000248dc 	ldrdeq	r4, [r2], -ip

000203e0 <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   203e0:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   203e4:	e92d0001 	stmfd	sp!, {r0}
   203e8:	e94d2000 	stmdb	sp, {sp}^
   203ec:	e24dd004 	sub	sp, sp, #4
   203f0:	e8bd0001 	ldmfd	sp!, {r0}
   203f4:	e9204000 	stmdb	r0!, {lr}
   203f8:	e1a0e000 	mov	lr, r0
   203fc:	e8bd0001 	ldmfd	sp!, {r0}
   20400:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20404:	e320f000 	nop	{0}
   20408:	e24ee03c 	sub	lr, lr, #60	@ 0x3c
   2040c:	e14f0000 	mrs	r0, SPSR
   20410:	e92e0001 	stmdb	lr!, {r0}
   20414:	e59f01d4 	ldr	r0, [pc, #468]	@ 205f0 <vPortExitCritical+0x68>
   20418:	e5900000 	ldr	r0, [r0]
   2041c:	e92e0001 	stmdb	lr!, {r0}
   20420:	e59f01c4 	ldr	r0, [pc, #452]	@ 205ec <vPortExitCritical+0x64>
   20424:	e5900000 	ldr	r0, [r0]
   20428:	e580e000 	str	lr, [r0]
   2042c:	e59f3058 	ldr	r3, [pc, #88]	@ 2048c <vPortYieldProcessor+0xac>
   20430:	e5933000 	ldr	r3, [r3]
   20434:	e59f3054 	ldr	r3, [pc, #84]	@ 20490 <vPortYieldProcessor+0xb0>
   20438:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   2043c:	eb000a18 	bl	22ca4 <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   20440:	e59f01a4 	ldr	r0, [pc, #420]	@ 205ec <vPortExitCritical+0x64>
   20444:	e5900000 	ldr	r0, [r0]
   20448:	e590e000 	ldr	lr, [r0]
   2044c:	e59f019c 	ldr	r0, [pc, #412]	@ 205f0 <vPortExitCritical+0x68>
   20450:	e8be0002 	ldm	lr!, {r1}
   20454:	e5801000 	str	r1, [r0]
   20458:	e8be0001 	ldm	lr!, {r0}
   2045c:	e16ff000 	msr	SPSR_fsxc, r0
   20460:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20464:	e320f000 	nop	{0}
   20468:	e59ee03c 	ldr	lr, [lr, #60]	@ 0x3c
   2046c:	e25ef004 	subs	pc, lr, #4
   20470:	e320f000 	nop	{0}
   20474:	e320f000 	nop	{0}
   20478:	e59f300c 	ldr	r3, [pc, #12]	@ 2048c <vPortYieldProcessor+0xac>
   2047c:	e5933000 	ldr	r3, [r3]
   20480:	e59f3008 	ldr	r3, [pc, #8]	@ 20490 <vPortYieldProcessor+0xb0>
   20484:	e5933000 	ldr	r3, [r3]
}
   20488:	e320f000 	nop	{0}
   2048c:	00024848 	andeq	r4, r2, r8, asr #16
   20490:	000248dc 	ldrdeq	r4, [r2], -ip

00020494 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   20494:	e92d0001 	stmfd	sp!, {r0}
   20498:	e94d2000 	stmdb	sp, {sp}^
   2049c:	e24dd004 	sub	sp, sp, #4
   204a0:	e8bd0001 	ldmfd	sp!, {r0}
   204a4:	e9204000 	stmdb	r0!, {lr}
   204a8:	e1a0e000 	mov	lr, r0
   204ac:	e8bd0001 	ldmfd	sp!, {r0}
   204b0:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   204b4:	e320f000 	nop	{0}
   204b8:	e24ee03c 	sub	lr, lr, #60	@ 0x3c
   204bc:	e14f0000 	mrs	r0, SPSR
   204c0:	e92e0001 	stmdb	lr!, {r0}
   204c4:	e59f0124 	ldr	r0, [pc, #292]	@ 205f0 <vPortExitCritical+0x68>
   204c8:	e5900000 	ldr	r0, [r0]
   204cc:	e92e0001 	stmdb	lr!, {r0}
   204d0:	e59f0114 	ldr	r0, [pc, #276]	@ 205ec <vPortExitCritical+0x64>
   204d4:	e5900000 	ldr	r0, [r0]
   204d8:	e580e000 	str	lr, [r0]
   204dc:	e59f3058 	ldr	r3, [pc, #88]	@ 2053c <vFreeRTOS_ISR+0xa8>
   204e0:	e5933000 	ldr	r3, [r3]
   204e4:	e59f3054 	ldr	r3, [pc, #84]	@ 20540 <vFreeRTOS_ISR+0xac>
   204e8:	e5933000 	ldr	r3, [r3]
	irqHandler();
   204ec:	eb000c23 	bl	23580 <irqHandler>
	portRESTORE_CONTEXT();	
   204f0:	e59f00f4 	ldr	r0, [pc, #244]	@ 205ec <vPortExitCritical+0x64>
   204f4:	e5900000 	ldr	r0, [r0]
   204f8:	e590e000 	ldr	lr, [r0]
   204fc:	e59f00ec 	ldr	r0, [pc, #236]	@ 205f0 <vPortExitCritical+0x68>
   20500:	e8be0002 	ldm	lr!, {r1}
   20504:	e5801000 	str	r1, [r0]
   20508:	e8be0001 	ldm	lr!, {r0}
   2050c:	e16ff000 	msr	SPSR_fsxc, r0
   20510:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20514:	e320f000 	nop	{0}
   20518:	e59ee03c 	ldr	lr, [lr, #60]	@ 0x3c
   2051c:	e25ef004 	subs	pc, lr, #4
   20520:	e320f000 	nop	{0}
   20524:	e320f000 	nop	{0}
   20528:	e59f300c 	ldr	r3, [pc, #12]	@ 2053c <vFreeRTOS_ISR+0xa8>
   2052c:	e5933000 	ldr	r3, [r3]
   20530:	e59f3008 	ldr	r3, [pc, #8]	@ 20540 <vFreeRTOS_ISR+0xac>
   20534:	e5933000 	ldr	r3, [r3]
}
   20538:	e320f000 	nop	{0}
   2053c:	00024848 	andeq	r4, r2, r8, asr #16
   20540:	000248dc 	ldrdeq	r4, [r2], -ip

00020544 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   20544:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20548:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   2054c:	e92d0001 	stmfd	sp!, {r0}
   20550:	e10f0000 	mrs	r0, CPSR
   20554:	e38000c0 	orr	r0, r0, #192	@ 0xc0
   20558:	e129f000 	msr	CPSR_fc, r0
   2055c:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   20560:	e59f301c 	ldr	r3, [pc, #28]	@ 20584 <vPortEnterCritical+0x40>
   20564:	e5933000 	ldr	r3, [r3]
   20568:	e2833001 	add	r3, r3, #1
   2056c:	e59f2010 	ldr	r2, [pc, #16]	@ 20584 <vPortEnterCritical+0x40>
   20570:	e5823000 	str	r3, [r2]
}
   20574:	e320f000 	nop	{0}
   20578:	e28bd000 	add	sp, fp, #0
   2057c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20580:	e12fff1e 	bx	lr
   20584:	00024848 	andeq	r4, r2, r8, asr #16

00020588 <vPortExitCritical>:

void vPortExitCritical( void )
{
   20588:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   2058c:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   20590:	e59f3050 	ldr	r3, [pc, #80]	@ 205e8 <vPortExitCritical+0x60>
   20594:	e5933000 	ldr	r3, [r3]
   20598:	e3530000 	cmp	r3, #0
   2059c:	0a00000d 	beq	205d8 <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   205a0:	e59f3040 	ldr	r3, [pc, #64]	@ 205e8 <vPortExitCritical+0x60>
   205a4:	e5933000 	ldr	r3, [r3]
   205a8:	e2433001 	sub	r3, r3, #1
   205ac:	e59f2034 	ldr	r2, [pc, #52]	@ 205e8 <vPortExitCritical+0x60>
   205b0:	e5823000 	str	r3, [r2]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   205b4:	e59f302c 	ldr	r3, [pc, #44]	@ 205e8 <vPortExitCritical+0x60>
   205b8:	e5933000 	ldr	r3, [r3]
   205bc:	e3530000 	cmp	r3, #0
   205c0:	1a000004 	bne	205d8 <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   205c4:	e92d0001 	stmfd	sp!, {r0}
   205c8:	e10f0000 	mrs	r0, CPSR
   205cc:	e3c000c0 	bic	r0, r0, #192	@ 0xc0
   205d0:	e129f000 	msr	CPSR_fc, r0
   205d4:	e8bd0001 	ldmfd	sp!, {r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   205d8:	e320f000 	nop	{0}
   205dc:	e28bd000 	add	sp, fp, #0
   205e0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   205e4:	e12fff1e 	bx	lr
   205e8:	00024848 	andeq	r4, r2, r8, asr #16
   205ec:	000248dc 	ldrdeq	r4, [r2], -ip
   205f0:	00024848 	andeq	r4, r2, r8, asr #16

000205f4 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   205f4:	e92d4800 	push	{fp, lr}
   205f8:	e28db004 	add	fp, sp, #4
   205fc:	e24dd018 	sub	sp, sp, #24
   20600:	e50b0010 	str	r0, [fp, #-16]
   20604:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
   20608:	e50b2018 	str	r2, [fp, #-24]	@ 0xffffffe8
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   2060c:	e3a00038 	mov	r0, #56	@ 0x38
   20610:	eb000e0c 	bl	23e48 <pvPortMalloc>
   20614:	e50b000c 	str	r0, [fp, #-12]
	if( pxCoRoutine )
   20618:	e51b300c 	ldr	r3, [fp, #-12]
   2061c:	e3530000 	cmp	r3, #0
   20620:	0a000044 	beq	20738 <xCoRoutineCreate+0x144>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   20624:	e59f3124 	ldr	r3, [pc, #292]	@ 20750 <xCoRoutineCreate+0x15c>
   20628:	e5933000 	ldr	r3, [r3]
   2062c:	e3530000 	cmp	r3, #0
   20630:	1a000003 	bne	20644 <xCoRoutineCreate+0x50>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   20634:	e59f2114 	ldr	r2, [pc, #276]	@ 20750 <xCoRoutineCreate+0x15c>
   20638:	e51b300c 	ldr	r3, [fp, #-12]
   2063c:	e5823000 	str	r3, [r2]
			prvInitialiseCoRoutineLists();
   20640:	eb000178 	bl	20c28 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   20644:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20648:	e3530001 	cmp	r3, #1
   2064c:	9a000001 	bls	20658 <xCoRoutineCreate+0x64>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   20650:	e3a03001 	mov	r3, #1
   20654:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   20658:	e51b300c 	ldr	r3, [fp, #-12]
   2065c:	e3a02000 	mov	r2, #0
   20660:	e1c323b4 	strh	r2, [r3, #52]	@ 0x34
		pxCoRoutine->uxPriority = uxPriority;
   20664:	e51b300c 	ldr	r3, [fp, #-12]
   20668:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   2066c:	e583202c 	str	r2, [r3, #44]	@ 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   20670:	e51b300c 	ldr	r3, [fp, #-12]
   20674:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   20678:	e5832030 	str	r2, [r3, #48]	@ 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   2067c:	e51b300c 	ldr	r3, [fp, #-12]
   20680:	e51b2010 	ldr	r2, [fp, #-16]
   20684:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   20688:	e51b300c 	ldr	r3, [fp, #-12]
   2068c:	e2833004 	add	r3, r3, #4
   20690:	e1a00003 	mov	r0, r3
   20694:	eb0001ca 	bl	20dc4 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   20698:	e51b300c 	ldr	r3, [fp, #-12]
   2069c:	e2833018 	add	r3, r3, #24
   206a0:	e1a00003 	mov	r0, r3
   206a4:	eb0001c6 	bl	20dc4 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   206a8:	e51b300c 	ldr	r3, [fp, #-12]
   206ac:	e51b200c 	ldr	r2, [fp, #-12]
   206b0:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   206b4:	e51b300c 	ldr	r3, [fp, #-12]
   206b8:	e51b200c 	ldr	r2, [fp, #-12]
   206bc:	e5832024 	str	r2, [r3, #36]	@ 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   206c0:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   206c4:	e2632005 	rsb	r2, r3, #5
   206c8:	e51b300c 	ldr	r3, [fp, #-12]
   206cc:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   206d0:	e51b300c 	ldr	r3, [fp, #-12]
   206d4:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   206d8:	e59f3074 	ldr	r3, [pc, #116]	@ 20754 <xCoRoutineCreate+0x160>
   206dc:	e5933000 	ldr	r3, [r3]
   206e0:	e1520003 	cmp	r2, r3
   206e4:	9a000003 	bls	206f8 <xCoRoutineCreate+0x104>
   206e8:	e51b300c 	ldr	r3, [fp, #-12]
   206ec:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   206f0:	e59f205c 	ldr	r2, [pc, #92]	@ 20754 <xCoRoutineCreate+0x160>
   206f4:	e5823000 	str	r3, [r2]
   206f8:	e51b300c 	ldr	r3, [fp, #-12]
   206fc:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   20700:	e1a03002 	mov	r3, r2
   20704:	e1a03103 	lsl	r3, r3, #2
   20708:	e0833002 	add	r3, r3, r2
   2070c:	e1a03103 	lsl	r3, r3, #2
   20710:	e59f2040 	ldr	r2, [pc, #64]	@ 20758 <xCoRoutineCreate+0x164>
   20714:	e0832002 	add	r2, r3, r2
   20718:	e51b300c 	ldr	r3, [fp, #-12]
   2071c:	e2833004 	add	r3, r3, #4
   20720:	e1a01003 	mov	r1, r3
   20724:	e1a00002 	mov	r0, r2
   20728:	eb0001b0 	bl	20df0 <vListInsertEnd>

		xReturn = pdPASS;
   2072c:	e3a03001 	mov	r3, #1
   20730:	e50b3008 	str	r3, [fp, #-8]
   20734:	ea000001 	b	20740 <xCoRoutineCreate+0x14c>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   20738:	e3e03000 	mvn	r3, #0
   2073c:	e50b3008 	str	r3, [fp, #-8]
	}
	
	return xReturn;	
   20740:	e51b3008 	ldr	r3, [fp, #-8]
}
   20744:	e1a00003 	mov	r0, r3
   20748:	e24bd004 	sub	sp, fp, #4
   2074c:	e8bd8800 	pop	{fp, pc}
   20750:	000248c8 	andeq	r4, r2, r8, asr #17
   20754:	000248cc 	andeq	r4, r2, ip, asr #17
   20758:	0002485c 	andeq	r4, r2, ip, asr r8

0002075c <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   2075c:	e92d4800 	push	{fp, lr}
   20760:	e28db004 	add	fp, sp, #4
   20764:	e24dd010 	sub	sp, sp, #16
   20768:	e50b0010 	str	r0, [fp, #-16]
   2076c:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   20770:	e59f30b8 	ldr	r3, [pc, #184]	@ 20830 <vCoRoutineAddToDelayedList+0xd4>
   20774:	e5933000 	ldr	r3, [r3]
   20778:	e51b2010 	ldr	r2, [fp, #-16]
   2077c:	e0823003 	add	r3, r2, r3
   20780:	e50b3008 	str	r3, [fp, #-8]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   20784:	e59f30a8 	ldr	r3, [pc, #168]	@ 20834 <vCoRoutineAddToDelayedList+0xd8>
   20788:	e5933000 	ldr	r3, [r3]
   2078c:	e2833004 	add	r3, r3, #4
   20790:	e1a00003 	mov	r0, r3
   20794:	eb0001f1 	bl	20f60 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   20798:	e59f3094 	ldr	r3, [pc, #148]	@ 20834 <vCoRoutineAddToDelayedList+0xd8>
   2079c:	e5933000 	ldr	r3, [r3]
   207a0:	e51b2008 	ldr	r2, [fp, #-8]
   207a4:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   207a8:	e59f3080 	ldr	r3, [pc, #128]	@ 20830 <vCoRoutineAddToDelayedList+0xd4>
   207ac:	e5933000 	ldr	r3, [r3]
   207b0:	e51b2008 	ldr	r2, [fp, #-8]
   207b4:	e1520003 	cmp	r2, r3
   207b8:	2a000008 	bcs	207e0 <vCoRoutineAddToDelayedList+0x84>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   207bc:	e59f3074 	ldr	r3, [pc, #116]	@ 20838 <vCoRoutineAddToDelayedList+0xdc>
   207c0:	e5932000 	ldr	r2, [r3]
   207c4:	e59f3068 	ldr	r3, [pc, #104]	@ 20834 <vCoRoutineAddToDelayedList+0xd8>
   207c8:	e5933000 	ldr	r3, [r3]
   207cc:	e2833004 	add	r3, r3, #4
   207d0:	e1a01003 	mov	r1, r3
   207d4:	e1a00002 	mov	r0, r2
   207d8:	eb0001aa 	bl	20e88 <vListInsert>
   207dc:	ea000007 	b	20800 <vCoRoutineAddToDelayedList+0xa4>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   207e0:	e59f3054 	ldr	r3, [pc, #84]	@ 2083c <vCoRoutineAddToDelayedList+0xe0>
   207e4:	e5932000 	ldr	r2, [r3]
   207e8:	e59f3044 	ldr	r3, [pc, #68]	@ 20834 <vCoRoutineAddToDelayedList+0xd8>
   207ec:	e5933000 	ldr	r3, [r3]
   207f0:	e2833004 	add	r3, r3, #4
   207f4:	e1a01003 	mov	r1, r3
   207f8:	e1a00002 	mov	r0, r2
   207fc:	eb0001a1 	bl	20e88 <vListInsert>
	}

	if( pxEventList )
   20800:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20804:	e3530000 	cmp	r3, #0
   20808:	0a000005 	beq	20824 <vCoRoutineAddToDelayedList+0xc8>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   2080c:	e59f3020 	ldr	r3, [pc, #32]	@ 20834 <vCoRoutineAddToDelayedList+0xd8>
   20810:	e5933000 	ldr	r3, [r3]
   20814:	e2833018 	add	r3, r3, #24
   20818:	e1a01003 	mov	r1, r3
   2081c:	e51b0014 	ldr	r0, [fp, #-20]	@ 0xffffffec
   20820:	eb000198 	bl	20e88 <vListInsert>
	}
}
   20824:	e320f000 	nop	{0}
   20828:	e24bd004 	sub	sp, fp, #4
   2082c:	e8bd8800 	pop	{fp, pc}
   20830:	000248d0 	ldrdeq	r4, [r2], -r0
   20834:	000248c8 	andeq	r4, r2, r8, asr #17
   20838:	000248b0 			@ <UNDEFINED> instruction: 0x000248b0
   2083c:	000248ac 	andeq	r4, r2, ip, lsr #17

00020840 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   20840:	e92d4800 	push	{fp, lr}
   20844:	e28db004 	add	fp, sp, #4
   20848:	e24dd008 	sub	sp, sp, #8
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   2084c:	ea00002c 	b	20904 <prvCheckPendingReadyList+0xc4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   20850:	e92d0001 	stmfd	sp!, {r0}
   20854:	e10f0000 	mrs	r0, CPSR
   20858:	e38000c0 	orr	r0, r0, #192	@ 0xc0
   2085c:	e129f000 	msr	CPSR_fc, r0
   20860:	e8bd0001 	ldmfd	sp!, {r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   20864:	e59f30b8 	ldr	r3, [pc, #184]	@ 20924 <prvCheckPendingReadyList+0xe4>
   20868:	e593300c 	ldr	r3, [r3, #12]
   2086c:	e593300c 	ldr	r3, [r3, #12]
   20870:	e50b3008 	str	r3, [fp, #-8]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   20874:	e51b3008 	ldr	r3, [fp, #-8]
   20878:	e2833018 	add	r3, r3, #24
   2087c:	e1a00003 	mov	r0, r3
   20880:	eb0001b6 	bl	20f60 <vListRemove>
		}
		portENABLE_INTERRUPTS();
   20884:	e92d0001 	stmfd	sp!, {r0}
   20888:	e10f0000 	mrs	r0, CPSR
   2088c:	e3c000c0 	bic	r0, r0, #192	@ 0xc0
   20890:	e129f000 	msr	CPSR_fc, r0
   20894:	e8bd0001 	ldmfd	sp!, {r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   20898:	e51b3008 	ldr	r3, [fp, #-8]
   2089c:	e2833004 	add	r3, r3, #4
   208a0:	e1a00003 	mov	r0, r3
   208a4:	eb0001ad 	bl	20f60 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   208a8:	e51b3008 	ldr	r3, [fp, #-8]
   208ac:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   208b0:	e59f3070 	ldr	r3, [pc, #112]	@ 20928 <prvCheckPendingReadyList+0xe8>
   208b4:	e5933000 	ldr	r3, [r3]
   208b8:	e1520003 	cmp	r2, r3
   208bc:	9a000003 	bls	208d0 <prvCheckPendingReadyList+0x90>
   208c0:	e51b3008 	ldr	r3, [fp, #-8]
   208c4:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   208c8:	e59f2058 	ldr	r2, [pc, #88]	@ 20928 <prvCheckPendingReadyList+0xe8>
   208cc:	e5823000 	str	r3, [r2]
   208d0:	e51b3008 	ldr	r3, [fp, #-8]
   208d4:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   208d8:	e1a03002 	mov	r3, r2
   208dc:	e1a03103 	lsl	r3, r3, #2
   208e0:	e0833002 	add	r3, r3, r2
   208e4:	e1a03103 	lsl	r3, r3, #2
   208e8:	e59f203c 	ldr	r2, [pc, #60]	@ 2092c <prvCheckPendingReadyList+0xec>
   208ec:	e0832002 	add	r2, r3, r2
   208f0:	e51b3008 	ldr	r3, [fp, #-8]
   208f4:	e2833004 	add	r3, r3, #4
   208f8:	e1a01003 	mov	r1, r3
   208fc:	e1a00002 	mov	r0, r2
   20900:	eb00013a 	bl	20df0 <vListInsertEnd>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   20904:	e59f3018 	ldr	r3, [pc, #24]	@ 20924 <prvCheckPendingReadyList+0xe4>
   20908:	e5933000 	ldr	r3, [r3]
   2090c:	e3530000 	cmp	r3, #0
   20910:	1affffce 	bne	20850 <prvCheckPendingReadyList+0x10>
	}
}
   20914:	e320f000 	nop	{0}
   20918:	e320f000 	nop	{0}
   2091c:	e24bd004 	sub	sp, fp, #4
   20920:	e8bd8800 	pop	{fp, pc}
   20924:	000248b4 			@ <UNDEFINED> instruction: 0x000248b4
   20928:	000248cc 	andeq	r4, r2, ip, asr #17
   2092c:	0002485c 	andeq	r4, r2, ip, asr r8

00020930 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   20930:	e92d4800 	push	{fp, lr}
   20934:	e28db004 	add	fp, sp, #4
   20938:	e24dd008 	sub	sp, sp, #8
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   2093c:	eb0007e0 	bl	228c4 <xTaskGetTickCount>
   20940:	e1a02000 	mov	r2, r0
   20944:	e59f319c 	ldr	r3, [pc, #412]	@ 20ae8 <prvCheckDelayedList+0x1b8>
   20948:	e5933000 	ldr	r3, [r3]
   2094c:	e0423003 	sub	r3, r2, r3
   20950:	e59f2194 	ldr	r2, [pc, #404]	@ 20aec <prvCheckDelayedList+0x1bc>
   20954:	e5823000 	str	r3, [r2]
	while( xPassedTicks )
   20958:	ea000057 	b	20abc <prvCheckDelayedList+0x18c>
	{
		xCoRoutineTickCount++;
   2095c:	e59f318c 	ldr	r3, [pc, #396]	@ 20af0 <prvCheckDelayedList+0x1c0>
   20960:	e5933000 	ldr	r3, [r3]
   20964:	e2833001 	add	r3, r3, #1
   20968:	e59f2180 	ldr	r2, [pc, #384]	@ 20af0 <prvCheckDelayedList+0x1c0>
   2096c:	e5823000 	str	r3, [r2]
		xPassedTicks--;
   20970:	e59f3174 	ldr	r3, [pc, #372]	@ 20aec <prvCheckDelayedList+0x1bc>
   20974:	e5933000 	ldr	r3, [r3]
   20978:	e2433001 	sub	r3, r3, #1
   2097c:	e59f2168 	ldr	r2, [pc, #360]	@ 20aec <prvCheckDelayedList+0x1bc>
   20980:	e5823000 	str	r3, [r2]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   20984:	e59f3164 	ldr	r3, [pc, #356]	@ 20af0 <prvCheckDelayedList+0x1c0>
   20988:	e5933000 	ldr	r3, [r3]
   2098c:	e3530000 	cmp	r3, #0
   20990:	1a000042 	bne	20aa0 <prvCheckDelayedList+0x170>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   20994:	e59f3158 	ldr	r3, [pc, #344]	@ 20af4 <prvCheckDelayedList+0x1c4>
   20998:	e5933000 	ldr	r3, [r3]
   2099c:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   209a0:	e59f3150 	ldr	r3, [pc, #336]	@ 20af8 <prvCheckDelayedList+0x1c8>
   209a4:	e5933000 	ldr	r3, [r3]
   209a8:	e59f2144 	ldr	r2, [pc, #324]	@ 20af4 <prvCheckDelayedList+0x1c4>
   209ac:	e5823000 	str	r3, [r2]
			pxOverflowDelayedCoRoutineList = pxTemp;
   209b0:	e59f2140 	ldr	r2, [pc, #320]	@ 20af8 <prvCheckDelayedList+0x1c8>
   209b4:	e51b3008 	ldr	r3, [fp, #-8]
   209b8:	e5823000 	str	r3, [r2]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   209bc:	ea000037 	b	20aa0 <prvCheckDelayedList+0x170>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   209c0:	e59f312c 	ldr	r3, [pc, #300]	@ 20af4 <prvCheckDelayedList+0x1c4>
   209c4:	e5933000 	ldr	r3, [r3]
   209c8:	e593300c 	ldr	r3, [r3, #12]
   209cc:	e593300c 	ldr	r3, [r3, #12]
   209d0:	e50b300c 	str	r3, [fp, #-12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   209d4:	e51b300c 	ldr	r3, [fp, #-12]
   209d8:	e5932004 	ldr	r2, [r3, #4]
   209dc:	e59f310c 	ldr	r3, [pc, #268]	@ 20af0 <prvCheckDelayedList+0x1c0>
   209e0:	e5933000 	ldr	r3, [r3]
   209e4:	e1520003 	cmp	r2, r3
   209e8:	8a000032 	bhi	20ab8 <prvCheckDelayedList+0x188>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
   209ec:	e92d0001 	stmfd	sp!, {r0}
   209f0:	e10f0000 	mrs	r0, CPSR
   209f4:	e38000c0 	orr	r0, r0, #192	@ 0xc0
   209f8:	e129f000 	msr	CPSR_fc, r0
   209fc:	e8bd0001 	ldmfd	sp!, {r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   20a00:	e51b300c 	ldr	r3, [fp, #-12]
   20a04:	e2833004 	add	r3, r3, #4
   20a08:	e1a00003 	mov	r0, r3
   20a0c:	eb000153 	bl	20f60 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   20a10:	e51b300c 	ldr	r3, [fp, #-12]
   20a14:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   20a18:	e3530000 	cmp	r3, #0
   20a1c:	0a000003 	beq	20a30 <prvCheckDelayedList+0x100>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   20a20:	e51b300c 	ldr	r3, [fp, #-12]
   20a24:	e2833018 	add	r3, r3, #24
   20a28:	e1a00003 	mov	r0, r3
   20a2c:	eb00014b 	bl	20f60 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   20a30:	e92d0001 	stmfd	sp!, {r0}
   20a34:	e10f0000 	mrs	r0, CPSR
   20a38:	e3c000c0 	bic	r0, r0, #192	@ 0xc0
   20a3c:	e129f000 	msr	CPSR_fc, r0
   20a40:	e8bd0001 	ldmfd	sp!, {r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   20a44:	e51b300c 	ldr	r3, [fp, #-12]
   20a48:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   20a4c:	e59f30a8 	ldr	r3, [pc, #168]	@ 20afc <prvCheckDelayedList+0x1cc>
   20a50:	e5933000 	ldr	r3, [r3]
   20a54:	e1520003 	cmp	r2, r3
   20a58:	9a000003 	bls	20a6c <prvCheckDelayedList+0x13c>
   20a5c:	e51b300c 	ldr	r3, [fp, #-12]
   20a60:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   20a64:	e59f2090 	ldr	r2, [pc, #144]	@ 20afc <prvCheckDelayedList+0x1cc>
   20a68:	e5823000 	str	r3, [r2]
   20a6c:	e51b300c 	ldr	r3, [fp, #-12]
   20a70:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   20a74:	e1a03002 	mov	r3, r2
   20a78:	e1a03103 	lsl	r3, r3, #2
   20a7c:	e0833002 	add	r3, r3, r2
   20a80:	e1a03103 	lsl	r3, r3, #2
   20a84:	e59f2074 	ldr	r2, [pc, #116]	@ 20b00 <prvCheckDelayedList+0x1d0>
   20a88:	e0832002 	add	r2, r3, r2
   20a8c:	e51b300c 	ldr	r3, [fp, #-12]
   20a90:	e2833004 	add	r3, r3, #4
   20a94:	e1a01003 	mov	r1, r3
   20a98:	e1a00002 	mov	r0, r2
   20a9c:	eb0000d3 	bl	20df0 <vListInsertEnd>
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   20aa0:	e59f304c 	ldr	r3, [pc, #76]	@ 20af4 <prvCheckDelayedList+0x1c4>
   20aa4:	e5933000 	ldr	r3, [r3]
   20aa8:	e5933000 	ldr	r3, [r3]
   20aac:	e3530000 	cmp	r3, #0
   20ab0:	1affffc2 	bne	209c0 <prvCheckDelayedList+0x90>
   20ab4:	ea000000 	b	20abc <prvCheckDelayedList+0x18c>
				break;																				
   20ab8:	e320f000 	nop	{0}
	while( xPassedTicks )
   20abc:	e59f3028 	ldr	r3, [pc, #40]	@ 20aec <prvCheckDelayedList+0x1bc>
   20ac0:	e5933000 	ldr	r3, [r3]
   20ac4:	e3530000 	cmp	r3, #0
   20ac8:	1affffa3 	bne	2095c <prvCheckDelayedList+0x2c>
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   20acc:	e59f301c 	ldr	r3, [pc, #28]	@ 20af0 <prvCheckDelayedList+0x1c0>
   20ad0:	e5933000 	ldr	r3, [r3]
   20ad4:	e59f200c 	ldr	r2, [pc, #12]	@ 20ae8 <prvCheckDelayedList+0x1b8>
   20ad8:	e5823000 	str	r3, [r2]
}
   20adc:	e320f000 	nop	{0}
   20ae0:	e24bd004 	sub	sp, fp, #4
   20ae4:	e8bd8800 	pop	{fp, pc}
   20ae8:	000248d4 	ldrdeq	r4, [r2], -r4	@ <UNPREDICTABLE>
   20aec:	000248d8 	ldrdeq	r4, [r2], -r8
   20af0:	000248d0 	ldrdeq	r4, [r2], -r0
   20af4:	000248ac 	andeq	r4, r2, ip, lsr #17
   20af8:	000248b0 			@ <UNDEFINED> instruction: 0x000248b0
   20afc:	000248cc 	andeq	r4, r2, ip, asr #17
   20b00:	0002485c 	andeq	r4, r2, ip, asr r8

00020b04 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   20b04:	e92d4800 	push	{fp, lr}
   20b08:	e28db004 	add	fp, sp, #4
   20b0c:	e24dd008 	sub	sp, sp, #8
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   20b10:	ebffff4a 	bl	20840 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   20b14:	ebffff85 	bl	20930 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   20b18:	ea000008 	b	20b40 <vCoRoutineSchedule+0x3c>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   20b1c:	e59f30f8 	ldr	r3, [pc, #248]	@ 20c1c <vCoRoutineSchedule+0x118>
   20b20:	e5933000 	ldr	r3, [r3]
   20b24:	e3530000 	cmp	r3, #0
   20b28:	0a000038 	beq	20c10 <vCoRoutineSchedule+0x10c>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
   20b2c:	e59f30e8 	ldr	r3, [pc, #232]	@ 20c1c <vCoRoutineSchedule+0x118>
   20b30:	e5933000 	ldr	r3, [r3]
   20b34:	e2433001 	sub	r3, r3, #1
   20b38:	e59f20dc 	ldr	r2, [pc, #220]	@ 20c1c <vCoRoutineSchedule+0x118>
   20b3c:	e5823000 	str	r3, [r2]
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   20b40:	e59f30d4 	ldr	r3, [pc, #212]	@ 20c1c <vCoRoutineSchedule+0x118>
   20b44:	e5932000 	ldr	r2, [r3]
   20b48:	e59f10d0 	ldr	r1, [pc, #208]	@ 20c20 <vCoRoutineSchedule+0x11c>
   20b4c:	e1a03002 	mov	r3, r2
   20b50:	e1a03103 	lsl	r3, r3, #2
   20b54:	e0833002 	add	r3, r3, r2
   20b58:	e1a03103 	lsl	r3, r3, #2
   20b5c:	e0813003 	add	r3, r1, r3
   20b60:	e5933000 	ldr	r3, [r3]
   20b64:	e3530000 	cmp	r3, #0
   20b68:	0affffeb 	beq	20b1c <vCoRoutineSchedule+0x18>
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   20b6c:	e59f30a8 	ldr	r3, [pc, #168]	@ 20c1c <vCoRoutineSchedule+0x118>
   20b70:	e5932000 	ldr	r2, [r3]
   20b74:	e1a03002 	mov	r3, r2
   20b78:	e1a03103 	lsl	r3, r3, #2
   20b7c:	e0833002 	add	r3, r3, r2
   20b80:	e1a03103 	lsl	r3, r3, #2
   20b84:	e59f2094 	ldr	r2, [pc, #148]	@ 20c20 <vCoRoutineSchedule+0x11c>
   20b88:	e0833002 	add	r3, r3, r2
   20b8c:	e50b3008 	str	r3, [fp, #-8]
   20b90:	e51b3008 	ldr	r3, [fp, #-8]
   20b94:	e5933004 	ldr	r3, [r3, #4]
   20b98:	e5932004 	ldr	r2, [r3, #4]
   20b9c:	e51b3008 	ldr	r3, [fp, #-8]
   20ba0:	e5832004 	str	r2, [r3, #4]
   20ba4:	e51b3008 	ldr	r3, [fp, #-8]
   20ba8:	e5932004 	ldr	r2, [r3, #4]
   20bac:	e51b3008 	ldr	r3, [fp, #-8]
   20bb0:	e2833008 	add	r3, r3, #8
   20bb4:	e1520003 	cmp	r2, r3
   20bb8:	1a000004 	bne	20bd0 <vCoRoutineSchedule+0xcc>
   20bbc:	e51b3008 	ldr	r3, [fp, #-8]
   20bc0:	e5933004 	ldr	r3, [r3, #4]
   20bc4:	e5932004 	ldr	r2, [r3, #4]
   20bc8:	e51b3008 	ldr	r3, [fp, #-8]
   20bcc:	e5832004 	str	r2, [r3, #4]
   20bd0:	e51b3008 	ldr	r3, [fp, #-8]
   20bd4:	e5933004 	ldr	r3, [r3, #4]
   20bd8:	e593300c 	ldr	r3, [r3, #12]
   20bdc:	e59f2040 	ldr	r2, [pc, #64]	@ 20c24 <vCoRoutineSchedule+0x120>
   20be0:	e5823000 	str	r3, [r2]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   20be4:	e59f3038 	ldr	r3, [pc, #56]	@ 20c24 <vCoRoutineSchedule+0x120>
   20be8:	e5933000 	ldr	r3, [r3]
   20bec:	e5933000 	ldr	r3, [r3]
   20bf0:	e59f202c 	ldr	r2, [pc, #44]	@ 20c24 <vCoRoutineSchedule+0x120>
   20bf4:	e5920000 	ldr	r0, [r2]
   20bf8:	e59f2024 	ldr	r2, [pc, #36]	@ 20c24 <vCoRoutineSchedule+0x120>
   20bfc:	e5922000 	ldr	r2, [r2]
   20c00:	e5922030 	ldr	r2, [r2, #48]	@ 0x30
   20c04:	e1a01002 	mov	r1, r2
   20c08:	e12fff33 	blx	r3

	return;
   20c0c:	ea000000 	b	20c14 <vCoRoutineSchedule+0x110>
			return;
   20c10:	e320f000 	nop	{0}
}
   20c14:	e24bd004 	sub	sp, fp, #4
   20c18:	e8bd8800 	pop	{fp, pc}
   20c1c:	000248cc 	andeq	r4, r2, ip, asr #17
   20c20:	0002485c 	andeq	r4, r2, ip, asr r8
   20c24:	000248c8 	andeq	r4, r2, r8, asr #17

00020c28 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   20c28:	e92d4800 	push	{fp, lr}
   20c2c:	e28db004 	add	fp, sp, #4
   20c30:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   20c34:	e3a03000 	mov	r3, #0
   20c38:	e50b3008 	str	r3, [fp, #-8]
   20c3c:	ea00000b 	b	20c70 <prvInitialiseCoRoutineLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   20c40:	e51b2008 	ldr	r2, [fp, #-8]
   20c44:	e1a03002 	mov	r3, r2
   20c48:	e1a03103 	lsl	r3, r3, #2
   20c4c:	e0833002 	add	r3, r3, r2
   20c50:	e1a03103 	lsl	r3, r3, #2
   20c54:	e59f205c 	ldr	r2, [pc, #92]	@ 20cb8 <prvInitialiseCoRoutineLists+0x90>
   20c58:	e0833002 	add	r3, r3, r2
   20c5c:	e1a00003 	mov	r0, r3
   20c60:	eb00003d 	bl	20d5c <vListInitialise>
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   20c64:	e51b3008 	ldr	r3, [fp, #-8]
   20c68:	e2833001 	add	r3, r3, #1
   20c6c:	e50b3008 	str	r3, [fp, #-8]
   20c70:	e51b3008 	ldr	r3, [fp, #-8]
   20c74:	e3530001 	cmp	r3, #1
   20c78:	9afffff0 	bls	20c40 <prvInitialiseCoRoutineLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   20c7c:	e59f0038 	ldr	r0, [pc, #56]	@ 20cbc <prvInitialiseCoRoutineLists+0x94>
   20c80:	eb000035 	bl	20d5c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   20c84:	e59f0034 	ldr	r0, [pc, #52]	@ 20cc0 <prvInitialiseCoRoutineLists+0x98>
   20c88:	eb000033 	bl	20d5c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   20c8c:	e59f0030 	ldr	r0, [pc, #48]	@ 20cc4 <prvInitialiseCoRoutineLists+0x9c>
   20c90:	eb000031 	bl	20d5c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   20c94:	e59f302c 	ldr	r3, [pc, #44]	@ 20cc8 <prvInitialiseCoRoutineLists+0xa0>
   20c98:	e59f201c 	ldr	r2, [pc, #28]	@ 20cbc <prvInitialiseCoRoutineLists+0x94>
   20c9c:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   20ca0:	e59f3024 	ldr	r3, [pc, #36]	@ 20ccc <prvInitialiseCoRoutineLists+0xa4>
   20ca4:	e59f2014 	ldr	r2, [pc, #20]	@ 20cc0 <prvInitialiseCoRoutineLists+0x98>
   20ca8:	e5832000 	str	r2, [r3]
}
   20cac:	e320f000 	nop	{0}
   20cb0:	e24bd004 	sub	sp, fp, #4
   20cb4:	e8bd8800 	pop	{fp, pc}
   20cb8:	0002485c 	andeq	r4, r2, ip, asr r8
   20cbc:	00024884 	andeq	r4, r2, r4, lsl #17
   20cc0:	00024898 	muleq	r2, r8, r8
   20cc4:	000248b4 			@ <UNDEFINED> instruction: 0x000248b4
   20cc8:	000248ac 	andeq	r4, r2, ip, lsr #17
   20ccc:	000248b0 			@ <UNDEFINED> instruction: 0x000248b0

00020cd0 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   20cd0:	e92d4800 	push	{fp, lr}
   20cd4:	e28db004 	add	fp, sp, #4
   20cd8:	e24dd010 	sub	sp, sp, #16
   20cdc:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   20ce0:	e51b3010 	ldr	r3, [fp, #-16]
   20ce4:	e593300c 	ldr	r3, [r3, #12]
   20ce8:	e593300c 	ldr	r3, [r3, #12]
   20cec:	e50b300c 	str	r3, [fp, #-12]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   20cf0:	e51b300c 	ldr	r3, [fp, #-12]
   20cf4:	e2833018 	add	r3, r3, #24
   20cf8:	e1a00003 	mov	r0, r3
   20cfc:	eb000097 	bl	20f60 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   20d00:	e51b300c 	ldr	r3, [fp, #-12]
   20d04:	e2833018 	add	r3, r3, #24
   20d08:	e1a01003 	mov	r1, r3
   20d0c:	e59f0040 	ldr	r0, [pc, #64]	@ 20d54 <xCoRoutineRemoveFromEventList+0x84>
   20d10:	eb000036 	bl	20df0 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   20d14:	e51b300c 	ldr	r3, [fp, #-12]
   20d18:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   20d1c:	e59f3034 	ldr	r3, [pc, #52]	@ 20d58 <xCoRoutineRemoveFromEventList+0x88>
   20d20:	e5933000 	ldr	r3, [r3]
   20d24:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   20d28:	e1520003 	cmp	r2, r3
   20d2c:	3a000002 	bcc	20d3c <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
   20d30:	e3a03001 	mov	r3, #1
   20d34:	e50b3008 	str	r3, [fp, #-8]
   20d38:	ea000001 	b	20d44 <xCoRoutineRemoveFromEventList+0x74>
	}
	else
	{
		xReturn = pdFALSE;
   20d3c:	e3a03000 	mov	r3, #0
   20d40:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   20d44:	e51b3008 	ldr	r3, [fp, #-8]
}
   20d48:	e1a00003 	mov	r0, r3
   20d4c:	e24bd004 	sub	sp, fp, #4
   20d50:	e8bd8800 	pop	{fp, pc}
   20d54:	000248b4 			@ <UNDEFINED> instruction: 0x000248b4
   20d58:	000248c8 	andeq	r4, r2, r8, asr #17

00020d5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   20d5c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20d60:	e28db000 	add	fp, sp, #0
   20d64:	e24dd00c 	sub	sp, sp, #12
   20d68:	e50b0008 	str	r0, [fp, #-8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   20d6c:	e51b3008 	ldr	r3, [fp, #-8]
   20d70:	e2832008 	add	r2, r3, #8
   20d74:	e51b3008 	ldr	r3, [fp, #-8]
   20d78:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   20d7c:	e51b3008 	ldr	r3, [fp, #-8]
   20d80:	e3e02000 	mvn	r2, #0
   20d84:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   20d88:	e51b3008 	ldr	r3, [fp, #-8]
   20d8c:	e2832008 	add	r2, r3, #8
   20d90:	e51b3008 	ldr	r3, [fp, #-8]
   20d94:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   20d98:	e51b3008 	ldr	r3, [fp, #-8]
   20d9c:	e2832008 	add	r2, r3, #8
   20da0:	e51b3008 	ldr	r3, [fp, #-8]
   20da4:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   20da8:	e51b3008 	ldr	r3, [fp, #-8]
   20dac:	e3a02000 	mov	r2, #0
   20db0:	e5832000 	str	r2, [r3]
}
   20db4:	e320f000 	nop	{0}
   20db8:	e28bd000 	add	sp, fp, #0
   20dbc:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20dc0:	e12fff1e 	bx	lr

00020dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   20dc4:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20dc8:	e28db000 	add	fp, sp, #0
   20dcc:	e24dd00c 	sub	sp, sp, #12
   20dd0:	e50b0008 	str	r0, [fp, #-8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   20dd4:	e51b3008 	ldr	r3, [fp, #-8]
   20dd8:	e3a02000 	mov	r2, #0
   20ddc:	e5832010 	str	r2, [r3, #16]
}
   20de0:	e320f000 	nop	{0}
   20de4:	e28bd000 	add	sp, fp, #0
   20de8:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20dec:	e12fff1e 	bx	lr

00020df0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   20df0:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20df4:	e28db000 	add	fp, sp, #0
   20df8:	e24dd014 	sub	sp, sp, #20
   20dfc:	e50b0010 	str	r0, [fp, #-16]
   20e00:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   20e04:	e51b3010 	ldr	r3, [fp, #-16]
   20e08:	e5933004 	ldr	r3, [r3, #4]
   20e0c:	e50b3008 	str	r3, [fp, #-8]

	pxNewListItem->pxNext = pxIndex->pxNext;
   20e10:	e51b3008 	ldr	r3, [fp, #-8]
   20e14:	e5932004 	ldr	r2, [r3, #4]
   20e18:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20e1c:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   20e20:	e51b3010 	ldr	r3, [fp, #-16]
   20e24:	e5932004 	ldr	r2, [r3, #4]
   20e28:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20e2c:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   20e30:	e51b3008 	ldr	r3, [fp, #-8]
   20e34:	e5933004 	ldr	r3, [r3, #4]
   20e38:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20e3c:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   20e40:	e51b3008 	ldr	r3, [fp, #-8]
   20e44:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20e48:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   20e4c:	e51b3010 	ldr	r3, [fp, #-16]
   20e50:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20e54:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   20e58:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20e5c:	e51b2010 	ldr	r2, [fp, #-16]
   20e60:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   20e64:	e51b3010 	ldr	r3, [fp, #-16]
   20e68:	e5933000 	ldr	r3, [r3]
   20e6c:	e2832001 	add	r2, r3, #1
   20e70:	e51b3010 	ldr	r3, [fp, #-16]
   20e74:	e5832000 	str	r2, [r3]
}
   20e78:	e320f000 	nop	{0}
   20e7c:	e28bd000 	add	sp, fp, #0
   20e80:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20e84:	e12fff1e 	bx	lr

00020e88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   20e88:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20e8c:	e28db000 	add	fp, sp, #0
   20e90:	e24dd014 	sub	sp, sp, #20
   20e94:	e50b0010 	str	r0, [fp, #-16]
   20e98:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   20e9c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20ea0:	e5933000 	ldr	r3, [r3]
   20ea4:	e50b300c 	str	r3, [fp, #-12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   20ea8:	e51b300c 	ldr	r3, [fp, #-12]
   20eac:	e3730001 	cmn	r3, #1
   20eb0:	1a000003 	bne	20ec4 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   20eb4:	e51b3010 	ldr	r3, [fp, #-16]
   20eb8:	e5933010 	ldr	r3, [r3, #16]
   20ebc:	e50b3008 	str	r3, [fp, #-8]
   20ec0:	ea00000c 	b	20ef8 <vListInsert+0x70>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   20ec4:	e51b3010 	ldr	r3, [fp, #-16]
   20ec8:	e2833008 	add	r3, r3, #8
   20ecc:	e50b3008 	str	r3, [fp, #-8]
   20ed0:	ea000002 	b	20ee0 <vListInsert+0x58>
   20ed4:	e51b3008 	ldr	r3, [fp, #-8]
   20ed8:	e5933004 	ldr	r3, [r3, #4]
   20edc:	e50b3008 	str	r3, [fp, #-8]
   20ee0:	e51b3008 	ldr	r3, [fp, #-8]
   20ee4:	e5933004 	ldr	r3, [r3, #4]
   20ee8:	e5933000 	ldr	r3, [r3]
   20eec:	e51b200c 	ldr	r2, [fp, #-12]
   20ef0:	e1520003 	cmp	r2, r3
   20ef4:	2afffff6 	bcs	20ed4 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   20ef8:	e51b3008 	ldr	r3, [fp, #-8]
   20efc:	e5932004 	ldr	r2, [r3, #4]
   20f00:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20f04:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   20f08:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20f0c:	e5933004 	ldr	r3, [r3, #4]
   20f10:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20f14:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   20f18:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20f1c:	e51b2008 	ldr	r2, [fp, #-8]
   20f20:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   20f24:	e51b3008 	ldr	r3, [fp, #-8]
   20f28:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20f2c:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   20f30:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20f34:	e51b2010 	ldr	r2, [fp, #-16]
   20f38:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   20f3c:	e51b3010 	ldr	r3, [fp, #-16]
   20f40:	e5933000 	ldr	r3, [r3]
   20f44:	e2832001 	add	r2, r3, #1
   20f48:	e51b3010 	ldr	r3, [fp, #-16]
   20f4c:	e5832000 	str	r2, [r3]
}
   20f50:	e320f000 	nop	{0}
   20f54:	e28bd000 	add	sp, fp, #0
   20f58:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20f5c:	e12fff1e 	bx	lr

00020f60 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   20f60:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20f64:	e28db000 	add	fp, sp, #0
   20f68:	e24dd014 	sub	sp, sp, #20
   20f6c:	e50b0010 	str	r0, [fp, #-16]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   20f70:	e51b3010 	ldr	r3, [fp, #-16]
   20f74:	e5933004 	ldr	r3, [r3, #4]
   20f78:	e51b2010 	ldr	r2, [fp, #-16]
   20f7c:	e5922008 	ldr	r2, [r2, #8]
   20f80:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   20f84:	e51b3010 	ldr	r3, [fp, #-16]
   20f88:	e5933008 	ldr	r3, [r3, #8]
   20f8c:	e51b2010 	ldr	r2, [fp, #-16]
   20f90:	e5922004 	ldr	r2, [r2, #4]
   20f94:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   20f98:	e51b3010 	ldr	r3, [fp, #-16]
   20f9c:	e5933010 	ldr	r3, [r3, #16]
   20fa0:	e50b3008 	str	r3, [fp, #-8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   20fa4:	e51b3008 	ldr	r3, [fp, #-8]
   20fa8:	e5933004 	ldr	r3, [r3, #4]
   20fac:	e51b2010 	ldr	r2, [fp, #-16]
   20fb0:	e1520003 	cmp	r2, r3
   20fb4:	1a000003 	bne	20fc8 <vListRemove+0x68>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   20fb8:	e51b3010 	ldr	r3, [fp, #-16]
   20fbc:	e5932008 	ldr	r2, [r3, #8]
   20fc0:	e51b3008 	ldr	r3, [fp, #-8]
   20fc4:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   20fc8:	e51b3010 	ldr	r3, [fp, #-16]
   20fcc:	e3a02000 	mov	r2, #0
   20fd0:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   20fd4:	e51b3008 	ldr	r3, [fp, #-8]
   20fd8:	e5933000 	ldr	r3, [r3]
   20fdc:	e2432001 	sub	r2, r3, #1
   20fe0:	e51b3008 	ldr	r3, [fp, #-8]
   20fe4:	e5832000 	str	r2, [r3]
}
   20fe8:	e320f000 	nop	{0}
   20fec:	e28bd000 	add	sp, fp, #0
   20ff0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20ff4:	e12fff1e 	bx	lr

00020ff8 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   20ff8:	e92d4800 	push	{fp, lr}
   20ffc:	e28db004 	add	fp, sp, #4
   21000:	e24dd008 	sub	sp, sp, #8
   21004:	e50b0008 	str	r0, [fp, #-8]
   21008:	e50b100c 	str	r1, [fp, #-12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   2100c:	ebfffd4c 	bl	20544 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   21010:	e51b3008 	ldr	r3, [fp, #-8]
   21014:	e5932000 	ldr	r2, [r3]
   21018:	e51b3008 	ldr	r3, [fp, #-8]
   2101c:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   21020:	e51b1008 	ldr	r1, [fp, #-8]
   21024:	e5911040 	ldr	r1, [r1, #64]	@ 0x40
   21028:	e0030391 	mul	r3, r1, r3
   2102c:	e0822003 	add	r2, r2, r3
   21030:	e51b3008 	ldr	r3, [fp, #-8]
   21034:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   21038:	e51b3008 	ldr	r3, [fp, #-8]
   2103c:	e3a02000 	mov	r2, #0
   21040:	e5832038 	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   21044:	e51b3008 	ldr	r3, [fp, #-8]
   21048:	e5932000 	ldr	r2, [r3]
   2104c:	e51b3008 	ldr	r3, [fp, #-8]
   21050:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   21054:	e51b3008 	ldr	r3, [fp, #-8]
   21058:	e5932000 	ldr	r2, [r3]
   2105c:	e51b3008 	ldr	r3, [fp, #-8]
   21060:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   21064:	e2433001 	sub	r3, r3, #1
   21068:	e51b1008 	ldr	r1, [fp, #-8]
   2106c:	e5911040 	ldr	r1, [r1, #64]	@ 0x40
   21070:	e0030391 	mul	r3, r1, r3
   21074:	e0822003 	add	r2, r2, r3
   21078:	e51b3008 	ldr	r3, [fp, #-8]
   2107c:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   21080:	e51b3008 	ldr	r3, [fp, #-8]
   21084:	e3e02000 	mvn	r2, #0
   21088:	e5832044 	str	r2, [r3, #68]	@ 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   2108c:	e51b3008 	ldr	r3, [fp, #-8]
   21090:	e3e02000 	mvn	r2, #0
   21094:	e5832048 	str	r2, [r3, #72]	@ 0x48

		if( xNewQueue == pdFALSE )
   21098:	e51b300c 	ldr	r3, [fp, #-12]
   2109c:	e3530000 	cmp	r3, #0
   210a0:	1a00000c 	bne	210d8 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   210a4:	e51b3008 	ldr	r3, [fp, #-8]
   210a8:	e5933010 	ldr	r3, [r3, #16]
   210ac:	e3530000 	cmp	r3, #0
   210b0:	0a000010 	beq	210f8 <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   210b4:	e51b3008 	ldr	r3, [fp, #-8]
   210b8:	e2833010 	add	r3, r3, #16
   210bc:	e1a00003 	mov	r0, r3
   210c0:	eb000760 	bl	22e48 <xTaskRemoveFromEventList>
   210c4:	e1a03000 	mov	r3, r0
   210c8:	e3530001 	cmp	r3, #1
   210cc:	1a000009 	bne	210f8 <xQueueGenericReset+0x100>
				{
					portYIELD_WITHIN_API();
   210d0:	ef000000 	svc	0x00000000
   210d4:	ea000007 	b	210f8 <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   210d8:	e51b3008 	ldr	r3, [fp, #-8]
   210dc:	e2833010 	add	r3, r3, #16
   210e0:	e1a00003 	mov	r0, r3
   210e4:	ebffff1c 	bl	20d5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   210e8:	e51b3008 	ldr	r3, [fp, #-8]
   210ec:	e2833024 	add	r3, r3, #36	@ 0x24
   210f0:	e1a00003 	mov	r0, r3
   210f4:	ebffff18 	bl	20d5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   210f8:	ebfffd22 	bl	20588 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   210fc:	e3a03001 	mov	r3, #1
}
   21100:	e1a00003 	mov	r0, r3
   21104:	e24bd004 	sub	sp, fp, #4
   21108:	e8bd8800 	pop	{fp, pc}

0002110c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   2110c:	e92d4800 	push	{fp, lr}
   21110:	e28db004 	add	fp, sp, #4
   21114:	e24dd020 	sub	sp, sp, #32
   21118:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   2111c:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
   21120:	e1a03002 	mov	r3, r2
   21124:	e54b301d 	strb	r3, [fp, #-29]	@ 0xffffffe3
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   21128:	e3a03000 	mov	r3, #0
   2112c:	e50b3008 	str	r3, [fp, #-8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   21130:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21134:	e3530000 	cmp	r3, #0
   21138:	0a000021 	beq	211c4 <xQueueGenericCreate+0xb8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   2113c:	e3a0004c 	mov	r0, #76	@ 0x4c
   21140:	eb000b40 	bl	23e48 <pvPortMalloc>
   21144:	e50b000c 	str	r0, [fp, #-12]
		if( pxNewQueue != NULL )
   21148:	e51b300c 	ldr	r3, [fp, #-12]
   2114c:	e3530000 	cmp	r3, #0
   21150:	0a00001b 	beq	211c4 <xQueueGenericCreate+0xb8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   21154:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21158:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   2115c:	e0030392 	mul	r3, r2, r3
   21160:	e2833001 	add	r3, r3, #1
   21164:	e50b3010 	str	r3, [fp, #-16]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   21168:	e51b0010 	ldr	r0, [fp, #-16]
   2116c:	eb000b35 	bl	23e48 <pvPortMalloc>
   21170:	e1a02000 	mov	r2, r0
   21174:	e51b300c 	ldr	r3, [fp, #-12]
   21178:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   2117c:	e51b300c 	ldr	r3, [fp, #-12]
   21180:	e5933000 	ldr	r3, [r3]
   21184:	e3530000 	cmp	r3, #0
   21188:	0a00000b 	beq	211bc <xQueueGenericCreate+0xb0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   2118c:	e51b300c 	ldr	r3, [fp, #-12]
   21190:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   21194:	e583203c 	str	r2, [r3, #60]	@ 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   21198:	e51b300c 	ldr	r3, [fp, #-12]
   2119c:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   211a0:	e5832040 	str	r2, [r3, #64]	@ 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   211a4:	e3a01001 	mov	r1, #1
   211a8:	e51b000c 	ldr	r0, [fp, #-12]
   211ac:	ebffff91 	bl	20ff8 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   211b0:	e51b300c 	ldr	r3, [fp, #-12]
   211b4:	e50b3008 	str	r3, [fp, #-8]
   211b8:	ea000001 	b	211c4 <xQueueGenericCreate+0xb8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   211bc:	e51b000c 	ldr	r0, [fp, #-12]
   211c0:	eb000b92 	bl	24010 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   211c4:	e51b3008 	ldr	r3, [fp, #-8]
}
   211c8:	e1a00003 	mov	r0, r3
   211cc:	e24bd004 	sub	sp, fp, #4
   211d0:	e8bd8800 	pop	{fp, pc}

000211d4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   211d4:	e92d4800 	push	{fp, lr}
   211d8:	e28db004 	add	fp, sp, #4
   211dc:	e24dd020 	sub	sp, sp, #32
   211e0:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   211e4:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
   211e8:	e50b2020 	str	r2, [fp, #-32]	@ 0xffffffe0
   211ec:	e50b3024 	str	r3, [fp, #-36]	@ 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   211f0:	e3a03000 	mov	r3, #0
   211f4:	e50b3008 	str	r3, [fp, #-8]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   211f8:	ebfffcd1 	bl	20544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   211fc:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21200:	e5932038 	ldr	r2, [r3, #56]	@ 0x38
   21204:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21208:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   2120c:	e1520003 	cmp	r2, r3
   21210:	2a000012 	bcs	21260 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   21214:	e51b2024 	ldr	r2, [fp, #-36]	@ 0xffffffdc
   21218:	e51b101c 	ldr	r1, [fp, #-28]	@ 0xffffffe4
   2121c:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   21220:	eb00016a 	bl	217d0 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21224:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21228:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
   2122c:	e3530000 	cmp	r3, #0
   21230:	0a000007 	beq	21254 <xQueueGenericSend+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   21234:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21238:	e2833024 	add	r3, r3, #36	@ 0x24
   2123c:	e1a00003 	mov	r0, r3
   21240:	eb000700 	bl	22e48 <xTaskRemoveFromEventList>
   21244:	e1a03000 	mov	r3, r0
   21248:	e3530001 	cmp	r3, #1
   2124c:	1a000000 	bne	21254 <xQueueGenericSend+0x80>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   21250:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   21254:	ebfffccb 	bl	20588 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   21258:	e3a03001 	mov	r3, #1
   2125c:	ea000042 	b	2136c <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   21260:	e51b3020 	ldr	r3, [fp, #-32]	@ 0xffffffe0
   21264:	e3530000 	cmp	r3, #0
   21268:	1a000002 	bne	21278 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   2126c:	ebfffcc5 	bl	20588 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   21270:	e3a03000 	mov	r3, #0
   21274:	ea00003c 	b	2136c <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
   21278:	e51b3008 	ldr	r3, [fp, #-8]
   2127c:	e3530000 	cmp	r3, #0
   21280:	1a000004 	bne	21298 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   21284:	e24b3010 	sub	r3, fp, #16
   21288:	e1a00003 	mov	r0, r3
   2128c:	eb000733 	bl	22f60 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   21290:	e3a03001 	mov	r3, #1
   21294:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   21298:	ebfffcba 	bl	20588 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   2129c:	eb000513 	bl	226f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   212a0:	ebfffca7 	bl	20544 <vPortEnterCritical>
   212a4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   212a8:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   212ac:	e3730001 	cmn	r3, #1
   212b0:	1a000002 	bne	212c0 <xQueueGenericSend+0xec>
   212b4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   212b8:	e3a02000 	mov	r2, #0
   212bc:	e5832044 	str	r2, [r3, #68]	@ 0x44
   212c0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   212c4:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   212c8:	e3730001 	cmn	r3, #1
   212cc:	1a000002 	bne	212dc <xQueueGenericSend+0x108>
   212d0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   212d4:	e3a02000 	mov	r2, #0
   212d8:	e5832048 	str	r2, [r3, #72]	@ 0x48
   212dc:	ebfffca9 	bl	20588 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   212e0:	e24b2020 	sub	r2, fp, #32
   212e4:	e24b3010 	sub	r3, fp, #16
   212e8:	e1a01002 	mov	r1, r2
   212ec:	e1a00003 	mov	r0, r3
   212f0:	eb00072c 	bl	22fa8 <xTaskCheckForTimeOut>
   212f4:	e1a03000 	mov	r3, r0
   212f8:	e3530000 	cmp	r3, #0
   212fc:	1a000016 	bne	2135c <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   21300:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   21304:	eb000202 	bl	21b14 <prvIsQueueFull>
   21308:	e1a03000 	mov	r3, r0
   2130c:	e3530000 	cmp	r3, #0
   21310:	0a00000d 	beq	2134c <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   21314:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21318:	e2833010 	add	r3, r3, #16
   2131c:	e51b2020 	ldr	r2, [fp, #-32]	@ 0xffffffe0
   21320:	e1a01002 	mov	r1, r2
   21324:	e1a00003 	mov	r0, r3
   21328:	eb00069f 	bl	22dac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   2132c:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   21330:	eb000195 	bl	2198c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   21334:	eb0004f9 	bl	22720 <xTaskResumeAll>
   21338:	e1a03000 	mov	r3, r0
   2133c:	e3530000 	cmp	r3, #0
   21340:	1affffac 	bne	211f8 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
   21344:	ef000000 	svc	0x00000000
   21348:	eaffffaa 	b	211f8 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   2134c:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   21350:	eb00018d 	bl	2198c <prvUnlockQueue>
				( void ) xTaskResumeAll();
   21354:	eb0004f1 	bl	22720 <xTaskResumeAll>
   21358:	eaffffa6 	b	211f8 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   2135c:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   21360:	eb000189 	bl	2198c <prvUnlockQueue>
			( void ) xTaskResumeAll();
   21364:	eb0004ed 	bl	22720 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   21368:	e3a03000 	mov	r3, #0
		}
	}
}
   2136c:	e1a00003 	mov	r0, r3
   21370:	e24bd004 	sub	sp, fp, #4
   21374:	e8bd8800 	pop	{fp, pc}

00021378 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   21378:	e92d4800 	push	{fp, lr}
   2137c:	e28db004 	add	fp, sp, #4
   21380:	e24dd018 	sub	sp, sp, #24
   21384:	e50b0010 	str	r0, [fp, #-16]
   21388:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
   2138c:	e50b2018 	str	r2, [fp, #-24]	@ 0xffffffe8
   21390:	e50b301c 	str	r3, [fp, #-28]	@ 0xffffffe4
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   21394:	e3a03000 	mov	r3, #0
   21398:	e50b300c 	str	r3, [fp, #-12]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   2139c:	e51b3010 	ldr	r3, [fp, #-16]
   213a0:	e5932038 	ldr	r2, [r3, #56]	@ 0x38
   213a4:	e51b3010 	ldr	r3, [fp, #-16]
   213a8:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   213ac:	e1520003 	cmp	r2, r3
   213b0:	2a000021 	bcs	2143c <xQueueGenericSendFromISR+0xc4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   213b4:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   213b8:	e51b1014 	ldr	r1, [fp, #-20]	@ 0xffffffec
   213bc:	e51b0010 	ldr	r0, [fp, #-16]
   213c0:	eb000102 	bl	217d0 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   213c4:	e51b3010 	ldr	r3, [fp, #-16]
   213c8:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   213cc:	e3730001 	cmn	r3, #1
   213d0:	1a000011 	bne	2141c <xQueueGenericSendFromISR+0xa4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   213d4:	e51b3010 	ldr	r3, [fp, #-16]
   213d8:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
   213dc:	e3530000 	cmp	r3, #0
   213e0:	0a000012 	beq	21430 <xQueueGenericSendFromISR+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   213e4:	e51b3010 	ldr	r3, [fp, #-16]
   213e8:	e2833024 	add	r3, r3, #36	@ 0x24
   213ec:	e1a00003 	mov	r0, r3
   213f0:	eb000694 	bl	22e48 <xTaskRemoveFromEventList>
   213f4:	e1a03000 	mov	r3, r0
   213f8:	e3530000 	cmp	r3, #0
   213fc:	0a00000b 	beq	21430 <xQueueGenericSendFromISR+0xb8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   21400:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21404:	e3530000 	cmp	r3, #0
   21408:	0a000008 	beq	21430 <xQueueGenericSendFromISR+0xb8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   2140c:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21410:	e3a02001 	mov	r2, #1
   21414:	e5832000 	str	r2, [r3]
   21418:	ea000004 	b	21430 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   2141c:	e51b3010 	ldr	r3, [fp, #-16]
   21420:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   21424:	e2832001 	add	r2, r3, #1
   21428:	e51b3010 	ldr	r3, [fp, #-16]
   2142c:	e5832048 	str	r2, [r3, #72]	@ 0x48
			}

			xReturn = pdPASS;
   21430:	e3a03001 	mov	r3, #1
   21434:	e50b3008 	str	r3, [fp, #-8]
   21438:	ea000001 	b	21444 <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   2143c:	e3a03000 	mov	r3, #0
   21440:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   21444:	e51b3008 	ldr	r3, [fp, #-8]
}
   21448:	e1a00003 	mov	r0, r3
   2144c:	e24bd004 	sub	sp, fp, #4
   21450:	e8bd8800 	pop	{fp, pc}

00021454 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   21454:	e92d4800 	push	{fp, lr}
   21458:	e28db004 	add	fp, sp, #4
   2145c:	e24dd020 	sub	sp, sp, #32
   21460:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   21464:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
   21468:	e50b2020 	str	r2, [fp, #-32]	@ 0xffffffe0
   2146c:	e50b3024 	str	r3, [fp, #-36]	@ 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   21470:	e3a03000 	mov	r3, #0
   21474:	e50b3008 	str	r3, [fp, #-8]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   21478:	ebfffc31 	bl	20544 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   2147c:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21480:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21484:	e3530000 	cmp	r3, #0
   21488:	0a00002c 	beq	21540 <xQueueGenericReceive+0xec>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   2148c:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21490:	e593300c 	ldr	r3, [r3, #12]
   21494:	e50b300c 	str	r3, [fp, #-12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   21498:	e51b101c 	ldr	r1, [fp, #-28]	@ 0xffffffe4
   2149c:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   214a0:	eb000115 	bl	218fc <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   214a4:	e51b3024 	ldr	r3, [fp, #-36]	@ 0xffffffdc
   214a8:	e3530000 	cmp	r3, #0
   214ac:	1a000011 	bne	214f8 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   214b0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   214b4:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   214b8:	e2432001 	sub	r2, r3, #1
   214bc:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   214c0:	e5832038 	str	r2, [r3, #56]	@ 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   214c4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   214c8:	e5933010 	ldr	r3, [r3, #16]
   214cc:	e3530000 	cmp	r3, #0
   214d0:	0a000017 	beq	21534 <xQueueGenericReceive+0xe0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   214d4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   214d8:	e2833010 	add	r3, r3, #16
   214dc:	e1a00003 	mov	r0, r3
   214e0:	eb000658 	bl	22e48 <xTaskRemoveFromEventList>
   214e4:	e1a03000 	mov	r3, r0
   214e8:	e3530001 	cmp	r3, #1
   214ec:	1a000010 	bne	21534 <xQueueGenericReceive+0xe0>
						{
							portYIELD_WITHIN_API();
   214f0:	ef000000 	svc	0x00000000
   214f4:	ea00000e 	b	21534 <xQueueGenericReceive+0xe0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   214f8:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   214fc:	e51b200c 	ldr	r2, [fp, #-12]
   21500:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21504:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21508:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
   2150c:	e3530000 	cmp	r3, #0
   21510:	0a000007 	beq	21534 <xQueueGenericReceive+0xe0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21514:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21518:	e2833024 	add	r3, r3, #36	@ 0x24
   2151c:	e1a00003 	mov	r0, r3
   21520:	eb000648 	bl	22e48 <xTaskRemoveFromEventList>
   21524:	e1a03000 	mov	r3, r0
   21528:	e3530000 	cmp	r3, #0
   2152c:	0a000000 	beq	21534 <xQueueGenericReceive+0xe0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   21530:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   21534:	ebfffc13 	bl	20588 <vPortExitCritical>
				return pdPASS;
   21538:	e3a03001 	mov	r3, #1
   2153c:	ea000042 	b	2164c <xQueueGenericReceive+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   21540:	e51b3020 	ldr	r3, [fp, #-32]	@ 0xffffffe0
   21544:	e3530000 	cmp	r3, #0
   21548:	1a000002 	bne	21558 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   2154c:	ebfffc0d 	bl	20588 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   21550:	e3a03000 	mov	r3, #0
   21554:	ea00003c 	b	2164c <xQueueGenericReceive+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
   21558:	e51b3008 	ldr	r3, [fp, #-8]
   2155c:	e3530000 	cmp	r3, #0
   21560:	1a000004 	bne	21578 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   21564:	e24b3014 	sub	r3, fp, #20
   21568:	e1a00003 	mov	r0, r3
   2156c:	eb00067b 	bl	22f60 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   21570:	e3a03001 	mov	r3, #1
   21574:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   21578:	ebfffc02 	bl	20588 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   2157c:	eb00045b 	bl	226f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   21580:	ebfffbef 	bl	20544 <vPortEnterCritical>
   21584:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21588:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   2158c:	e3730001 	cmn	r3, #1
   21590:	1a000002 	bne	215a0 <xQueueGenericReceive+0x14c>
   21594:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21598:	e3a02000 	mov	r2, #0
   2159c:	e5832044 	str	r2, [r3, #68]	@ 0x44
   215a0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   215a4:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   215a8:	e3730001 	cmn	r3, #1
   215ac:	1a000002 	bne	215bc <xQueueGenericReceive+0x168>
   215b0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   215b4:	e3a02000 	mov	r2, #0
   215b8:	e5832048 	str	r2, [r3, #72]	@ 0x48
   215bc:	ebfffbf1 	bl	20588 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   215c0:	e24b2020 	sub	r2, fp, #32
   215c4:	e24b3014 	sub	r3, fp, #20
   215c8:	e1a01002 	mov	r1, r2
   215cc:	e1a00003 	mov	r0, r3
   215d0:	eb000674 	bl	22fa8 <xTaskCheckForTimeOut>
   215d4:	e1a03000 	mov	r3, r0
   215d8:	e3530000 	cmp	r3, #0
   215dc:	1a000016 	bne	2163c <xQueueGenericReceive+0x1e8>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   215e0:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   215e4:	eb000129 	bl	21a90 <prvIsQueueEmpty>
   215e8:	e1a03000 	mov	r3, r0
   215ec:	e3530000 	cmp	r3, #0
   215f0:	0a00000d 	beq	2162c <xQueueGenericReceive+0x1d8>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   215f4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   215f8:	e2833024 	add	r3, r3, #36	@ 0x24
   215fc:	e51b2020 	ldr	r2, [fp, #-32]	@ 0xffffffe0
   21600:	e1a01002 	mov	r1, r2
   21604:	e1a00003 	mov	r0, r3
   21608:	eb0005e7 	bl	22dac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   2160c:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   21610:	eb0000dd 	bl	2198c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   21614:	eb000441 	bl	22720 <xTaskResumeAll>
   21618:	e1a03000 	mov	r3, r0
   2161c:	e3530000 	cmp	r3, #0
   21620:	1affff94 	bne	21478 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
   21624:	ef000000 	svc	0x00000000
   21628:	eaffff92 	b	21478 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   2162c:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   21630:	eb0000d5 	bl	2198c <prvUnlockQueue>
				( void ) xTaskResumeAll();
   21634:	eb000439 	bl	22720 <xTaskResumeAll>
   21638:	eaffff8e 	b	21478 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   2163c:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   21640:	eb0000d1 	bl	2198c <prvUnlockQueue>
			( void ) xTaskResumeAll();
   21644:	eb000435 	bl	22720 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   21648:	e3a03000 	mov	r3, #0
		}
	}
}
   2164c:	e1a00003 	mov	r0, r3
   21650:	e24bd004 	sub	sp, fp, #4
   21654:	e8bd8800 	pop	{fp, pc}

00021658 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   21658:	e92d4800 	push	{fp, lr}
   2165c:	e28db004 	add	fp, sp, #4
   21660:	e24dd018 	sub	sp, sp, #24
   21664:	e50b0010 	str	r0, [fp, #-16]
   21668:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
   2166c:	e50b2018 	str	r2, [fp, #-24]	@ 0xffffffe8
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   21670:	e3a03000 	mov	r3, #0
   21674:	e50b300c 	str	r3, [fp, #-12]
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   21678:	e51b3010 	ldr	r3, [fp, #-16]
   2167c:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21680:	e3530000 	cmp	r3, #0
   21684:	0a000025 	beq	21720 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   21688:	e51b1014 	ldr	r1, [fp, #-20]	@ 0xffffffec
   2168c:	e51b0010 	ldr	r0, [fp, #-16]
   21690:	eb000099 	bl	218fc <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   21694:	e51b3010 	ldr	r3, [fp, #-16]
   21698:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   2169c:	e2432001 	sub	r2, r3, #1
   216a0:	e51b3010 	ldr	r3, [fp, #-16]
   216a4:	e5832038 	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   216a8:	e51b3010 	ldr	r3, [fp, #-16]
   216ac:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   216b0:	e3730001 	cmn	r3, #1
   216b4:	1a000011 	bne	21700 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   216b8:	e51b3010 	ldr	r3, [fp, #-16]
   216bc:	e5933010 	ldr	r3, [r3, #16]
   216c0:	e3530000 	cmp	r3, #0
   216c4:	0a000012 	beq	21714 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   216c8:	e51b3010 	ldr	r3, [fp, #-16]
   216cc:	e2833010 	add	r3, r3, #16
   216d0:	e1a00003 	mov	r0, r3
   216d4:	eb0005db 	bl	22e48 <xTaskRemoveFromEventList>
   216d8:	e1a03000 	mov	r3, r0
   216dc:	e3530000 	cmp	r3, #0
   216e0:	0a00000b 	beq	21714 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   216e4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   216e8:	e3530000 	cmp	r3, #0
   216ec:	0a000008 	beq	21714 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   216f0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   216f4:	e3a02001 	mov	r2, #1
   216f8:	e5832000 	str	r2, [r3]
   216fc:	ea000004 	b	21714 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   21700:	e51b3010 	ldr	r3, [fp, #-16]
   21704:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   21708:	e2832001 	add	r2, r3, #1
   2170c:	e51b3010 	ldr	r3, [fp, #-16]
   21710:	e5832044 	str	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
   21714:	e3a03001 	mov	r3, #1
   21718:	e50b3008 	str	r3, [fp, #-8]
   2171c:	ea000001 	b	21728 <xQueueReceiveFromISR+0xd0>
		}
		else
		{
			xReturn = pdFAIL;
   21720:	e3a03000 	mov	r3, #0
   21724:	e50b3008 	str	r3, [fp, #-8]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   21728:	e51b3008 	ldr	r3, [fp, #-8]
}
   2172c:	e1a00003 	mov	r0, r3
   21730:	e24bd004 	sub	sp, fp, #4
   21734:	e8bd8800 	pop	{fp, pc}

00021738 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   21738:	e92d4800 	push	{fp, lr}
   2173c:	e28db004 	add	fp, sp, #4
   21740:	e24dd010 	sub	sp, sp, #16
   21744:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   21748:	ebfffb7d 	bl	20544 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   2174c:	e51b3010 	ldr	r3, [fp, #-16]
   21750:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21754:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21758:	ebfffb8a 	bl	20588 <vPortExitCritical>

	return uxReturn;
   2175c:	e51b3008 	ldr	r3, [fp, #-8]
}
   21760:	e1a00003 	mov	r0, r3
   21764:	e24bd004 	sub	sp, fp, #4
   21768:	e8bd8800 	pop	{fp, pc}

0002176c <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   2176c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   21770:	e28db000 	add	fp, sp, #0
   21774:	e24dd014 	sub	sp, sp, #20
   21778:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   2177c:	e51b3010 	ldr	r3, [fp, #-16]
   21780:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21784:	e50b3008 	str	r3, [fp, #-8]

	return uxReturn;
   21788:	e51b3008 	ldr	r3, [fp, #-8]
}
   2178c:	e1a00003 	mov	r0, r3
   21790:	e28bd000 	add	sp, fp, #0
   21794:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   21798:	e12fff1e 	bx	lr

0002179c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   2179c:	e92d4800 	push	{fp, lr}
   217a0:	e28db004 	add	fp, sp, #4
   217a4:	e24dd008 	sub	sp, sp, #8
   217a8:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   217ac:	e51b3008 	ldr	r3, [fp, #-8]
   217b0:	e5933000 	ldr	r3, [r3]
   217b4:	e1a00003 	mov	r0, r3
   217b8:	eb000a14 	bl	24010 <vPortFree>
	vPortFree( pxQueue );
   217bc:	e51b0008 	ldr	r0, [fp, #-8]
   217c0:	eb000a12 	bl	24010 <vPortFree>
}
   217c4:	e320f000 	nop	{0}
   217c8:	e24bd004 	sub	sp, fp, #4
   217cc:	e8bd8800 	pop	{fp, pc}

000217d0 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   217d0:	e92d4800 	push	{fp, lr}
   217d4:	e28db004 	add	fp, sp, #4
   217d8:	e24dd010 	sub	sp, sp, #16
   217dc:	e50b0008 	str	r0, [fp, #-8]
   217e0:	e50b100c 	str	r1, [fp, #-12]
   217e4:	e50b2010 	str	r2, [fp, #-16]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   217e8:	e51b3008 	ldr	r3, [fp, #-8]
   217ec:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   217f0:	e3530000 	cmp	r3, #0
   217f4:	0a000038 	beq	218dc <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   217f8:	e51b3010 	ldr	r3, [fp, #-16]
   217fc:	e3530000 	cmp	r3, #0
   21800:	1a000018 	bne	21868 <prvCopyDataToQueue+0x98>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   21804:	e51b3008 	ldr	r3, [fp, #-8]
   21808:	e5930008 	ldr	r0, [r3, #8]
   2180c:	e51b3008 	ldr	r3, [fp, #-8]
   21810:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   21814:	e1a02003 	mov	r2, r3
   21818:	e51b100c 	ldr	r1, [fp, #-12]
   2181c:	eb000bb1 	bl	246e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   21820:	e51b3008 	ldr	r3, [fp, #-8]
   21824:	e5932008 	ldr	r2, [r3, #8]
   21828:	e51b3008 	ldr	r3, [fp, #-8]
   2182c:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   21830:	e0822003 	add	r2, r2, r3
   21834:	e51b3008 	ldr	r3, [fp, #-8]
   21838:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   2183c:	e51b3008 	ldr	r3, [fp, #-8]
   21840:	e5932008 	ldr	r2, [r3, #8]
   21844:	e51b3008 	ldr	r3, [fp, #-8]
   21848:	e5933004 	ldr	r3, [r3, #4]
   2184c:	e1520003 	cmp	r2, r3
   21850:	3a000021 	bcc	218dc <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   21854:	e51b3008 	ldr	r3, [fp, #-8]
   21858:	e5932000 	ldr	r2, [r3]
   2185c:	e51b3008 	ldr	r3, [fp, #-8]
   21860:	e5832008 	str	r2, [r3, #8]
   21864:	ea00001c 	b	218dc <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   21868:	e51b3008 	ldr	r3, [fp, #-8]
   2186c:	e593000c 	ldr	r0, [r3, #12]
   21870:	e51b3008 	ldr	r3, [fp, #-8]
   21874:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   21878:	e1a02003 	mov	r2, r3
   2187c:	e51b100c 	ldr	r1, [fp, #-12]
   21880:	eb000b98 	bl	246e8 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   21884:	e51b3008 	ldr	r3, [fp, #-8]
   21888:	e593200c 	ldr	r2, [r3, #12]
   2188c:	e51b3008 	ldr	r3, [fp, #-8]
   21890:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   21894:	e2633000 	rsb	r3, r3, #0
   21898:	e0822003 	add	r2, r2, r3
   2189c:	e51b3008 	ldr	r3, [fp, #-8]
   218a0:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   218a4:	e51b3008 	ldr	r3, [fp, #-8]
   218a8:	e593200c 	ldr	r2, [r3, #12]
   218ac:	e51b3008 	ldr	r3, [fp, #-8]
   218b0:	e5933000 	ldr	r3, [r3]
   218b4:	e1520003 	cmp	r2, r3
   218b8:	2a000007 	bcs	218dc <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   218bc:	e51b3008 	ldr	r3, [fp, #-8]
   218c0:	e5932004 	ldr	r2, [r3, #4]
   218c4:	e51b3008 	ldr	r3, [fp, #-8]
   218c8:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   218cc:	e2633000 	rsb	r3, r3, #0
   218d0:	e0822003 	add	r2, r2, r3
   218d4:	e51b3008 	ldr	r3, [fp, #-8]
   218d8:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   218dc:	e51b3008 	ldr	r3, [fp, #-8]
   218e0:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   218e4:	e2832001 	add	r2, r3, #1
   218e8:	e51b3008 	ldr	r3, [fp, #-8]
   218ec:	e5832038 	str	r2, [r3, #56]	@ 0x38
}
   218f0:	e320f000 	nop	{0}
   218f4:	e24bd004 	sub	sp, fp, #4
   218f8:	e8bd8800 	pop	{fp, pc}

000218fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   218fc:	e92d4800 	push	{fp, lr}
   21900:	e28db004 	add	fp, sp, #4
   21904:	e24dd008 	sub	sp, sp, #8
   21908:	e50b0008 	str	r0, [fp, #-8]
   2190c:	e50b100c 	str	r1, [fp, #-12]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   21910:	e51b3008 	ldr	r3, [fp, #-8]
   21914:	e5933000 	ldr	r3, [r3]
   21918:	e3530000 	cmp	r3, #0
   2191c:	0a000017 	beq	21980 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   21920:	e51b3008 	ldr	r3, [fp, #-8]
   21924:	e593200c 	ldr	r2, [r3, #12]
   21928:	e51b3008 	ldr	r3, [fp, #-8]
   2192c:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   21930:	e0822003 	add	r2, r2, r3
   21934:	e51b3008 	ldr	r3, [fp, #-8]
   21938:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   2193c:	e51b3008 	ldr	r3, [fp, #-8]
   21940:	e593200c 	ldr	r2, [r3, #12]
   21944:	e51b3008 	ldr	r3, [fp, #-8]
   21948:	e5933004 	ldr	r3, [r3, #4]
   2194c:	e1520003 	cmp	r2, r3
   21950:	3a000003 	bcc	21964 <prvCopyDataFromQueue+0x68>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   21954:	e51b3008 	ldr	r3, [fp, #-8]
   21958:	e5932000 	ldr	r2, [r3]
   2195c:	e51b3008 	ldr	r3, [fp, #-8]
   21960:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   21964:	e51b3008 	ldr	r3, [fp, #-8]
   21968:	e593100c 	ldr	r1, [r3, #12]
   2196c:	e51b3008 	ldr	r3, [fp, #-8]
   21970:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   21974:	e1a02003 	mov	r2, r3
   21978:	e51b000c 	ldr	r0, [fp, #-12]
   2197c:	eb000b59 	bl	246e8 <memcpy>
	}
}
   21980:	e320f000 	nop	{0}
   21984:	e24bd004 	sub	sp, fp, #4
   21988:	e8bd8800 	pop	{fp, pc}

0002198c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   2198c:	e92d4800 	push	{fp, lr}
   21990:	e28db004 	add	fp, sp, #4
   21994:	e24dd008 	sub	sp, sp, #8
   21998:	e50b0008 	str	r0, [fp, #-8]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   2199c:	ebfffae8 	bl	20544 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   219a0:	ea000010 	b	219e8 <prvUnlockQueue+0x5c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   219a4:	e51b3008 	ldr	r3, [fp, #-8]
   219a8:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
   219ac:	e3530000 	cmp	r3, #0
   219b0:	0a000011 	beq	219fc <prvUnlockQueue+0x70>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   219b4:	e51b3008 	ldr	r3, [fp, #-8]
   219b8:	e2833024 	add	r3, r3, #36	@ 0x24
   219bc:	e1a00003 	mov	r0, r3
   219c0:	eb000520 	bl	22e48 <xTaskRemoveFromEventList>
   219c4:	e1a03000 	mov	r3, r0
   219c8:	e3530000 	cmp	r3, #0
   219cc:	0a000000 	beq	219d4 <prvUnlockQueue+0x48>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   219d0:	eb0005b1 	bl	2309c <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   219d4:	e51b3008 	ldr	r3, [fp, #-8]
   219d8:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   219dc:	e2432001 	sub	r2, r3, #1
   219e0:	e51b3008 	ldr	r3, [fp, #-8]
   219e4:	e5832048 	str	r2, [r3, #72]	@ 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   219e8:	e51b3008 	ldr	r3, [fp, #-8]
   219ec:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   219f0:	e3530000 	cmp	r3, #0
   219f4:	caffffea 	bgt	219a4 <prvUnlockQueue+0x18>
   219f8:	ea000000 	b	21a00 <prvUnlockQueue+0x74>
			}
			else
			{
				break;
   219fc:	e320f000 	nop	{0}
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   21a00:	e51b3008 	ldr	r3, [fp, #-8]
   21a04:	e3e02000 	mvn	r2, #0
   21a08:	e5832048 	str	r2, [r3, #72]	@ 0x48
	}
	taskEXIT_CRITICAL();
   21a0c:	ebfffadd 	bl	20588 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   21a10:	ebfffacb 	bl	20544 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   21a14:	ea000010 	b	21a5c <prvUnlockQueue+0xd0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21a18:	e51b3008 	ldr	r3, [fp, #-8]
   21a1c:	e5933010 	ldr	r3, [r3, #16]
   21a20:	e3530000 	cmp	r3, #0
   21a24:	0a000011 	beq	21a70 <prvUnlockQueue+0xe4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21a28:	e51b3008 	ldr	r3, [fp, #-8]
   21a2c:	e2833010 	add	r3, r3, #16
   21a30:	e1a00003 	mov	r0, r3
   21a34:	eb000503 	bl	22e48 <xTaskRemoveFromEventList>
   21a38:	e1a03000 	mov	r3, r0
   21a3c:	e3530000 	cmp	r3, #0
   21a40:	0a000000 	beq	21a48 <prvUnlockQueue+0xbc>
				{
					vTaskMissedYield();
   21a44:	eb000594 	bl	2309c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   21a48:	e51b3008 	ldr	r3, [fp, #-8]
   21a4c:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   21a50:	e2432001 	sub	r2, r3, #1
   21a54:	e51b3008 	ldr	r3, [fp, #-8]
   21a58:	e5832044 	str	r2, [r3, #68]	@ 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   21a5c:	e51b3008 	ldr	r3, [fp, #-8]
   21a60:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   21a64:	e3530000 	cmp	r3, #0
   21a68:	caffffea 	bgt	21a18 <prvUnlockQueue+0x8c>
   21a6c:	ea000000 	b	21a74 <prvUnlockQueue+0xe8>
			}
			else
			{
				break;
   21a70:	e320f000 	nop	{0}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   21a74:	e51b3008 	ldr	r3, [fp, #-8]
   21a78:	e3e02000 	mvn	r2, #0
   21a7c:	e5832044 	str	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
   21a80:	ebfffac0 	bl	20588 <vPortExitCritical>
}
   21a84:	e320f000 	nop	{0}
   21a88:	e24bd004 	sub	sp, fp, #4
   21a8c:	e8bd8800 	pop	{fp, pc}

00021a90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   21a90:	e92d4800 	push	{fp, lr}
   21a94:	e28db004 	add	fp, sp, #4
   21a98:	e24dd010 	sub	sp, sp, #16
   21a9c:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   21aa0:	ebfffaa7 	bl	20544 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   21aa4:	e51b3010 	ldr	r3, [fp, #-16]
   21aa8:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21aac:	e3530000 	cmp	r3, #0
   21ab0:	03a03001 	moveq	r3, #1
   21ab4:	13a03000 	movne	r3, #0
   21ab8:	e6ef3073 	uxtb	r3, r3
   21abc:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21ac0:	ebfffab0 	bl	20588 <vPortExitCritical>

	return xReturn;
   21ac4:	e51b3008 	ldr	r3, [fp, #-8]
}
   21ac8:	e1a00003 	mov	r0, r3
   21acc:	e24bd004 	sub	sp, fp, #4
   21ad0:	e8bd8800 	pop	{fp, pc}

00021ad4 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   21ad4:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   21ad8:	e28db000 	add	fp, sp, #0
   21adc:	e24dd014 	sub	sp, sp, #20
   21ae0:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   21ae4:	e51b3010 	ldr	r3, [fp, #-16]
   21ae8:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21aec:	e3530000 	cmp	r3, #0
   21af0:	03a03001 	moveq	r3, #1
   21af4:	13a03000 	movne	r3, #0
   21af8:	e6ef3073 	uxtb	r3, r3
   21afc:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   21b00:	e51b3008 	ldr	r3, [fp, #-8]
}
   21b04:	e1a00003 	mov	r0, r3
   21b08:	e28bd000 	add	sp, fp, #0
   21b0c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   21b10:	e12fff1e 	bx	lr

00021b14 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   21b14:	e92d4800 	push	{fp, lr}
   21b18:	e28db004 	add	fp, sp, #4
   21b1c:	e24dd010 	sub	sp, sp, #16
   21b20:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   21b24:	ebfffa86 	bl	20544 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   21b28:	e51b3010 	ldr	r3, [fp, #-16]
   21b2c:	e5932038 	ldr	r2, [r3, #56]	@ 0x38
   21b30:	e51b3010 	ldr	r3, [fp, #-16]
   21b34:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   21b38:	e1520003 	cmp	r2, r3
   21b3c:	03a03001 	moveq	r3, #1
   21b40:	13a03000 	movne	r3, #0
   21b44:	e6ef3073 	uxtb	r3, r3
   21b48:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21b4c:	ebfffa8d 	bl	20588 <vPortExitCritical>

	return xReturn;
   21b50:	e51b3008 	ldr	r3, [fp, #-8]
}
   21b54:	e1a00003 	mov	r0, r3
   21b58:	e24bd004 	sub	sp, fp, #4
   21b5c:	e8bd8800 	pop	{fp, pc}

00021b60 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   21b60:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   21b64:	e28db000 	add	fp, sp, #0
   21b68:	e24dd014 	sub	sp, sp, #20
   21b6c:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   21b70:	e51b3010 	ldr	r3, [fp, #-16]
   21b74:	e5932038 	ldr	r2, [r3, #56]	@ 0x38
   21b78:	e51b3010 	ldr	r3, [fp, #-16]
   21b7c:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   21b80:	e1520003 	cmp	r2, r3
   21b84:	03a03001 	moveq	r3, #1
   21b88:	13a03000 	movne	r3, #0
   21b8c:	e6ef3073 	uxtb	r3, r3
   21b90:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   21b94:	e51b3008 	ldr	r3, [fp, #-8]
}
   21b98:	e1a00003 	mov	r0, r3
   21b9c:	e28bd000 	add	sp, fp, #0
   21ba0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   21ba4:	e12fff1e 	bx	lr

00021ba8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   21ba8:	e92d4800 	push	{fp, lr}
   21bac:	e28db004 	add	fp, sp, #4
   21bb0:	e24dd028 	sub	sp, sp, #40	@ 0x28
   21bb4:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   21bb8:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
   21bbc:	e50b3024 	str	r3, [fp, #-36]	@ 0xffffffdc
   21bc0:	e1a03002 	mov	r3, r2
   21bc4:	e14b31be 	strh	r3, [fp, #-30]	@ 0xffffffe2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   21bc8:	e15b31be 	ldrh	r3, [fp, #-30]	@ 0xffffffe2
   21bcc:	e59b100c 	ldr	r1, [fp, #12]
   21bd0:	e1a00003 	mov	r0, r3
   21bd4:	eb000603 	bl	233e8 <prvAllocateTCBAndStack>
   21bd8:	e50b000c 	str	r0, [fp, #-12]

	if( pxNewTCB != NULL )
   21bdc:	e51b300c 	ldr	r3, [fp, #-12]
   21be0:	e3530000 	cmp	r3, #0
   21be4:	0a000067 	beq	21d88 <xTaskGenericCreate+0x1e0>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   21be8:	e51b300c 	ldr	r3, [fp, #-12]
   21bec:	e5932030 	ldr	r2, [r3, #48]	@ 0x30
   21bf0:	e15b31be 	ldrh	r3, [fp, #-30]	@ 0xffffffe2
   21bf4:	e2433107 	sub	r3, r3, #-1073741823	@ 0xc0000001
   21bf8:	e1a03103 	lsl	r3, r3, #2
   21bfc:	e0823003 	add	r3, r2, r3
   21c00:	e50b3010 	str	r3, [fp, #-16]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   21c04:	e51b3010 	ldr	r3, [fp, #-16]
   21c08:	e3c33007 	bic	r3, r3, #7
   21c0c:	e50b3010 	str	r3, [fp, #-16]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   21c10:	e15b31be 	ldrh	r3, [fp, #-30]	@ 0xffffffe2
   21c14:	e58d3000 	str	r3, [sp]
   21c18:	e59b3010 	ldr	r3, [fp, #16]
   21c1c:	e59b2004 	ldr	r2, [fp, #4]
   21c20:	e51b101c 	ldr	r1, [fp, #-28]	@ 0xffffffe4
   21c24:	e51b000c 	ldr	r0, [fp, #-12]
   21c28:	eb000531 	bl	230f4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   21c2c:	e51b2024 	ldr	r2, [fp, #-36]	@ 0xffffffdc
   21c30:	e51b1018 	ldr	r1, [fp, #-24]	@ 0xffffffe8
   21c34:	e51b0010 	ldr	r0, [fp, #-16]
   21c38:	ebfff8f0 	bl	20000 <pxPortInitialiseStack>
   21c3c:	e1a02000 	mov	r2, r0
   21c40:	e51b300c 	ldr	r3, [fp, #-12]
   21c44:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   21c48:	e59b3008 	ldr	r3, [fp, #8]
   21c4c:	e3530000 	cmp	r3, #0
   21c50:	0a000002 	beq	21c60 <xTaskGenericCreate+0xb8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   21c54:	e59b3008 	ldr	r3, [fp, #8]
   21c58:	e51b200c 	ldr	r2, [fp, #-12]
   21c5c:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   21c60:	ebfffa37 	bl	20544 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   21c64:	e59f316c 	ldr	r3, [pc, #364]	@ 21dd8 <xTaskGenericCreate+0x230>
   21c68:	e5933000 	ldr	r3, [r3]
   21c6c:	e2833001 	add	r3, r3, #1
   21c70:	e59f2160 	ldr	r2, [pc, #352]	@ 21dd8 <xTaskGenericCreate+0x230>
   21c74:	e5823000 	str	r3, [r2]
			if( pxCurrentTCB == NULL )
   21c78:	e59f315c 	ldr	r3, [pc, #348]	@ 21ddc <xTaskGenericCreate+0x234>
   21c7c:	e5933000 	ldr	r3, [r3]
   21c80:	e3530000 	cmp	r3, #0
   21c84:	1a000008 	bne	21cac <xTaskGenericCreate+0x104>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   21c88:	e59f214c 	ldr	r2, [pc, #332]	@ 21ddc <xTaskGenericCreate+0x234>
   21c8c:	e51b300c 	ldr	r3, [fp, #-12]
   21c90:	e5823000 	str	r3, [r2]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   21c94:	e59f313c 	ldr	r3, [pc, #316]	@ 21dd8 <xTaskGenericCreate+0x230>
   21c98:	e5933000 	ldr	r3, [r3]
   21c9c:	e3530001 	cmp	r3, #1
   21ca0:	1a00000e 	bne	21ce0 <xTaskGenericCreate+0x138>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   21ca4:	eb000542 	bl	231b4 <prvInitialiseTaskLists>
   21ca8:	ea00000c 	b	21ce0 <xTaskGenericCreate+0x138>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   21cac:	e59f312c 	ldr	r3, [pc, #300]	@ 21de0 <xTaskGenericCreate+0x238>
   21cb0:	e5933000 	ldr	r3, [r3]
   21cb4:	e3530000 	cmp	r3, #0
   21cb8:	1a000008 	bne	21ce0 <xTaskGenericCreate+0x138>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   21cbc:	e59f3118 	ldr	r3, [pc, #280]	@ 21ddc <xTaskGenericCreate+0x234>
   21cc0:	e5933000 	ldr	r3, [r3]
   21cc4:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   21cc8:	e59b2004 	ldr	r2, [fp, #4]
   21ccc:	e1520003 	cmp	r2, r3
   21cd0:	3a000002 	bcc	21ce0 <xTaskGenericCreate+0x138>
					{
						pxCurrentTCB = pxNewTCB;
   21cd4:	e59f2100 	ldr	r2, [pc, #256]	@ 21ddc <xTaskGenericCreate+0x234>
   21cd8:	e51b300c 	ldr	r3, [fp, #-12]
   21cdc:	e5823000 	str	r3, [r2]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   21ce0:	e51b300c 	ldr	r3, [fp, #-12]
   21ce4:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   21ce8:	e59f30f4 	ldr	r3, [pc, #244]	@ 21de4 <xTaskGenericCreate+0x23c>
   21cec:	e5933000 	ldr	r3, [r3]
   21cf0:	e1520003 	cmp	r2, r3
   21cf4:	9a000003 	bls	21d08 <xTaskGenericCreate+0x160>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   21cf8:	e51b300c 	ldr	r3, [fp, #-12]
   21cfc:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   21d00:	e59f20dc 	ldr	r2, [pc, #220]	@ 21de4 <xTaskGenericCreate+0x23c>
   21d04:	e5823000 	str	r3, [r2]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   21d08:	e59f30d8 	ldr	r3, [pc, #216]	@ 21de8 <xTaskGenericCreate+0x240>
   21d0c:	e5933000 	ldr	r3, [r3]
   21d10:	e2833001 	add	r3, r3, #1
   21d14:	e59f20cc 	ldr	r2, [pc, #204]	@ 21de8 <xTaskGenericCreate+0x240>
   21d18:	e5823000 	str	r3, [r2]

			prvAddTaskToReadyQueue( pxNewTCB );
   21d1c:	e51b300c 	ldr	r3, [fp, #-12]
   21d20:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   21d24:	e59f30c0 	ldr	r3, [pc, #192]	@ 21dec <xTaskGenericCreate+0x244>
   21d28:	e5933000 	ldr	r3, [r3]
   21d2c:	e1520003 	cmp	r2, r3
   21d30:	9a000003 	bls	21d44 <xTaskGenericCreate+0x19c>
   21d34:	e51b300c 	ldr	r3, [fp, #-12]
   21d38:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   21d3c:	e59f20a8 	ldr	r2, [pc, #168]	@ 21dec <xTaskGenericCreate+0x244>
   21d40:	e5823000 	str	r3, [r2]
   21d44:	e51b300c 	ldr	r3, [fp, #-12]
   21d48:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   21d4c:	e1a03002 	mov	r3, r2
   21d50:	e1a03103 	lsl	r3, r3, #2
   21d54:	e0833002 	add	r3, r3, r2
   21d58:	e1a03103 	lsl	r3, r3, #2
   21d5c:	e59f208c 	ldr	r2, [pc, #140]	@ 21df0 <xTaskGenericCreate+0x248>
   21d60:	e0832002 	add	r2, r3, r2
   21d64:	e51b300c 	ldr	r3, [fp, #-12]
   21d68:	e2833004 	add	r3, r3, #4
   21d6c:	e1a01003 	mov	r1, r3
   21d70:	e1a00002 	mov	r0, r2
   21d74:	ebfffc1d 	bl	20df0 <vListInsertEnd>

			xReturn = pdPASS;
   21d78:	e3a03001 	mov	r3, #1
   21d7c:	e50b3008 	str	r3, [fp, #-8]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   21d80:	ebfffa00 	bl	20588 <vPortExitCritical>
   21d84:	ea000001 	b	21d90 <xTaskGenericCreate+0x1e8>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   21d88:	e3e03000 	mvn	r3, #0
   21d8c:	e50b3008 	str	r3, [fp, #-8]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   21d90:	e51b3008 	ldr	r3, [fp, #-8]
   21d94:	e3530001 	cmp	r3, #1
   21d98:	1a00000a 	bne	21dc8 <xTaskGenericCreate+0x220>
	{
		if( xSchedulerRunning != pdFALSE )
   21d9c:	e59f303c 	ldr	r3, [pc, #60]	@ 21de0 <xTaskGenericCreate+0x238>
   21da0:	e5933000 	ldr	r3, [r3]
   21da4:	e3530000 	cmp	r3, #0
   21da8:	0a000006 	beq	21dc8 <xTaskGenericCreate+0x220>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   21dac:	e59f3028 	ldr	r3, [pc, #40]	@ 21ddc <xTaskGenericCreate+0x234>
   21db0:	e5933000 	ldr	r3, [r3]
   21db4:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   21db8:	e59b2004 	ldr	r2, [fp, #4]
   21dbc:	e1520003 	cmp	r2, r3
   21dc0:	9a000000 	bls	21dc8 <xTaskGenericCreate+0x220>
			{
				portYIELD_WITHIN_API();
   21dc4:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   21dc8:	e51b3008 	ldr	r3, [fp, #-8]
}
   21dcc:	e1a00003 	mov	r0, r3
   21dd0:	e24bd004 	sub	sp, fp, #4
   21dd4:	e8bd8800 	pop	{fp, pc}
   21dd8:	000249b4 			@ <UNDEFINED> instruction: 0x000249b4
   21ddc:	000248dc 	ldrdeq	r4, [r2], -ip
   21de0:	000249c4 	andeq	r4, r2, r4, asr #19
   21de4:	000249bc 			@ <UNDEFINED> instruction: 0x000249bc
   21de8:	000249d8 	ldrdeq	r4, [r2], -r8
   21dec:	000249c0 	andeq	r4, r2, r0, asr #19
   21df0:	000248e0 	andeq	r4, r2, r0, ror #17

00021df4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   21df4:	e92d4800 	push	{fp, lr}
   21df8:	e28db004 	add	fp, sp, #4
   21dfc:	e24dd010 	sub	sp, sp, #16
   21e00:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   21e04:	ebfff9ce 	bl	20544 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   21e08:	e59f30d0 	ldr	r3, [pc, #208]	@ 21ee0 <vTaskDelete+0xec>
   21e0c:	e5933000 	ldr	r3, [r3]
   21e10:	e51b2010 	ldr	r2, [fp, #-16]
   21e14:	e1520003 	cmp	r2, r3
   21e18:	1a000001 	bne	21e24 <vTaskDelete+0x30>
			{
				pxTaskToDelete = NULL;
   21e1c:	e3a03000 	mov	r3, #0
   21e20:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   21e24:	e51b3010 	ldr	r3, [fp, #-16]
   21e28:	e3530000 	cmp	r3, #0
   21e2c:	1a000002 	bne	21e3c <vTaskDelete+0x48>
   21e30:	e59f30a8 	ldr	r3, [pc, #168]	@ 21ee0 <vTaskDelete+0xec>
   21e34:	e5933000 	ldr	r3, [r3]
   21e38:	ea000000 	b	21e40 <vTaskDelete+0x4c>
   21e3c:	e51b3010 	ldr	r3, [fp, #-16]
   21e40:	e50b3008 	str	r3, [fp, #-8]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   21e44:	e51b3008 	ldr	r3, [fp, #-8]
   21e48:	e2833004 	add	r3, r3, #4
   21e4c:	e1a00003 	mov	r0, r3
   21e50:	ebfffc42 	bl	20f60 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   21e54:	e51b3008 	ldr	r3, [fp, #-8]
   21e58:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   21e5c:	e3530000 	cmp	r3, #0
   21e60:	0a000003 	beq	21e74 <vTaskDelete+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   21e64:	e51b3008 	ldr	r3, [fp, #-8]
   21e68:	e2833018 	add	r3, r3, #24
   21e6c:	e1a00003 	mov	r0, r3
   21e70:	ebfffc3a 	bl	20f60 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   21e74:	e51b3008 	ldr	r3, [fp, #-8]
   21e78:	e2833004 	add	r3, r3, #4
   21e7c:	e1a01003 	mov	r1, r3
   21e80:	e59f005c 	ldr	r0, [pc, #92]	@ 21ee4 <vTaskDelete+0xf0>
   21e84:	ebfffbd9 	bl	20df0 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   21e88:	e59f3058 	ldr	r3, [pc, #88]	@ 21ee8 <vTaskDelete+0xf4>
   21e8c:	e5933000 	ldr	r3, [r3]
   21e90:	e2833001 	add	r3, r3, #1
   21e94:	e59f204c 	ldr	r2, [pc, #76]	@ 21ee8 <vTaskDelete+0xf4>
   21e98:	e5823000 	str	r3, [r2]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   21e9c:	e59f3048 	ldr	r3, [pc, #72]	@ 21eec <vTaskDelete+0xf8>
   21ea0:	e5933000 	ldr	r3, [r3]
   21ea4:	e2833001 	add	r3, r3, #1
   21ea8:	e59f203c 	ldr	r2, [pc, #60]	@ 21eec <vTaskDelete+0xf8>
   21eac:	e5823000 	str	r3, [r2]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   21eb0:	ebfff9b4 	bl	20588 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   21eb4:	e59f3034 	ldr	r3, [pc, #52]	@ 21ef0 <vTaskDelete+0xfc>
   21eb8:	e5933000 	ldr	r3, [r3]
   21ebc:	e3530000 	cmp	r3, #0
   21ec0:	0a000003 	beq	21ed4 <vTaskDelete+0xe0>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   21ec4:	e51b3010 	ldr	r3, [fp, #-16]
   21ec8:	e3530000 	cmp	r3, #0
   21ecc:	1a000000 	bne	21ed4 <vTaskDelete+0xe0>
			{
				portYIELD_WITHIN_API();
   21ed0:	ef000000 	svc	0x00000000
			}
		}
	}
   21ed4:	e320f000 	nop	{0}
   21ed8:	e24bd004 	sub	sp, fp, #4
   21edc:	e8bd8800 	pop	{fp, pc}
   21ee0:	000248dc 	ldrdeq	r4, [r2], -ip
   21ee4:	00024988 	andeq	r4, r2, r8, lsl #19
   21ee8:	0002499c 	muleq	r2, ip, r9
   21eec:	000249d8 	ldrdeq	r4, [r2], -r8
   21ef0:	000249c4 	andeq	r4, r2, r4, asr #19

00021ef4 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   21ef4:	e92d4800 	push	{fp, lr}
   21ef8:	e28db004 	add	fp, sp, #4
   21efc:	e24dd018 	sub	sp, sp, #24
   21f00:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   21f04:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   21f08:	e3a03000 	mov	r3, #0
   21f0c:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   21f10:	eb0001f6 	bl	226f0 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   21f14:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21f18:	e5933000 	ldr	r3, [r3]
   21f1c:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   21f20:	e0823003 	add	r3, r2, r3
   21f24:	e50b300c 	str	r3, [fp, #-12]

			if( xTickCount < *pxPreviousWakeTime )
   21f28:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21f2c:	e5932000 	ldr	r2, [r3]
   21f30:	e59f30c4 	ldr	r3, [pc, #196]	@ 21ffc <vTaskDelayUntil+0x108>
   21f34:	e5933000 	ldr	r3, [r3]
   21f38:	e1520003 	cmp	r2, r3
   21f3c:	9a00000c 	bls	21f74 <vTaskDelayUntil+0x80>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   21f40:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21f44:	e5933000 	ldr	r3, [r3]
   21f48:	e51b200c 	ldr	r2, [fp, #-12]
   21f4c:	e1520003 	cmp	r2, r3
   21f50:	2a000013 	bcs	21fa4 <vTaskDelayUntil+0xb0>
   21f54:	e59f30a0 	ldr	r3, [pc, #160]	@ 21ffc <vTaskDelayUntil+0x108>
   21f58:	e5933000 	ldr	r3, [r3]
   21f5c:	e51b200c 	ldr	r2, [fp, #-12]
   21f60:	e1520003 	cmp	r2, r3
   21f64:	9a00000e 	bls	21fa4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   21f68:	e3a03001 	mov	r3, #1
   21f6c:	e50b3008 	str	r3, [fp, #-8]
   21f70:	ea00000b 	b	21fa4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   21f74:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21f78:	e5933000 	ldr	r3, [r3]
   21f7c:	e51b200c 	ldr	r2, [fp, #-12]
   21f80:	e1520003 	cmp	r2, r3
   21f84:	3a000004 	bcc	21f9c <vTaskDelayUntil+0xa8>
   21f88:	e59f306c 	ldr	r3, [pc, #108]	@ 21ffc <vTaskDelayUntil+0x108>
   21f8c:	e5933000 	ldr	r3, [r3]
   21f90:	e51b200c 	ldr	r2, [fp, #-12]
   21f94:	e1520003 	cmp	r2, r3
   21f98:	9a000001 	bls	21fa4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   21f9c:	e3a03001 	mov	r3, #1
   21fa0:	e50b3008 	str	r3, [fp, #-8]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   21fa4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21fa8:	e51b200c 	ldr	r2, [fp, #-12]
   21fac:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   21fb0:	e51b3008 	ldr	r3, [fp, #-8]
   21fb4:	e3530000 	cmp	r3, #0
   21fb8:	0a000006 	beq	21fd8 <vTaskDelayUntil+0xe4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   21fbc:	e59f303c 	ldr	r3, [pc, #60]	@ 22000 <vTaskDelayUntil+0x10c>
   21fc0:	e5933000 	ldr	r3, [r3]
   21fc4:	e2833004 	add	r3, r3, #4
   21fc8:	e1a00003 	mov	r0, r3
   21fcc:	ebfffbe3 	bl	20f60 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   21fd0:	e51b000c 	ldr	r0, [fp, #-12]
   21fd4:	eb0004d5 	bl	23330 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   21fd8:	eb0001d0 	bl	22720 <xTaskResumeAll>
   21fdc:	e50b0010 	str	r0, [fp, #-16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   21fe0:	e51b3010 	ldr	r3, [fp, #-16]
   21fe4:	e3530000 	cmp	r3, #0
   21fe8:	1a000000 	bne	21ff0 <vTaskDelayUntil+0xfc>
		{
			portYIELD_WITHIN_API();
   21fec:	ef000000 	svc	0x00000000
		}
	}
   21ff0:	e320f000 	nop	{0}
   21ff4:	e24bd004 	sub	sp, fp, #4
   21ff8:	e8bd8800 	pop	{fp, pc}
   21ffc:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8
   22000:	000248dc 	ldrdeq	r4, [r2], -ip

00022004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   22004:	e92d4800 	push	{fp, lr}
   22008:	e28db004 	add	fp, sp, #4
   2200c:	e24dd010 	sub	sp, sp, #16
   22010:	e50b0010 	str	r0, [fp, #-16]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   22014:	e3a03000 	mov	r3, #0
   22018:	e50b3008 	str	r3, [fp, #-8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   2201c:	e51b3010 	ldr	r3, [fp, #-16]
   22020:	e3530000 	cmp	r3, #0
   22024:	0a00000e 	beq	22064 <vTaskDelay+0x60>
		{
			vTaskSuspendAll();
   22028:	eb0001b0 	bl	226f0 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   2202c:	e59f304c 	ldr	r3, [pc, #76]	@ 22080 <vTaskDelay+0x7c>
   22030:	e5933000 	ldr	r3, [r3]
   22034:	e51b2010 	ldr	r2, [fp, #-16]
   22038:	e0823003 	add	r3, r2, r3
   2203c:	e50b300c 	str	r3, [fp, #-12]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22040:	e59f303c 	ldr	r3, [pc, #60]	@ 22084 <vTaskDelay+0x80>
   22044:	e5933000 	ldr	r3, [r3]
   22048:	e2833004 	add	r3, r3, #4
   2204c:	e1a00003 	mov	r0, r3
   22050:	ebfffbc2 	bl	20f60 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   22054:	e51b000c 	ldr	r0, [fp, #-12]
   22058:	eb0004b4 	bl	23330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   2205c:	eb0001af 	bl	22720 <xTaskResumeAll>
   22060:	e50b0008 	str	r0, [fp, #-8]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   22064:	e51b3008 	ldr	r3, [fp, #-8]
   22068:	e3530000 	cmp	r3, #0
   2206c:	1a000000 	bne	22074 <vTaskDelay+0x70>
		{
			portYIELD_WITHIN_API();
   22070:	ef000000 	svc	0x00000000
		}
	}
   22074:	e320f000 	nop	{0}
   22078:	e24bd004 	sub	sp, fp, #4
   2207c:	e8bd8800 	pop	{fp, pc}
   22080:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8
   22084:	000248dc 	ldrdeq	r4, [r2], -ip

00022088 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   22088:	e92d4800 	push	{fp, lr}
   2208c:	e28db004 	add	fp, sp, #4
   22090:	e24dd010 	sub	sp, sp, #16
   22094:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   22098:	ebfff929 	bl	20544 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   2209c:	e51b3010 	ldr	r3, [fp, #-16]
   220a0:	e3530000 	cmp	r3, #0
   220a4:	1a000002 	bne	220b4 <uxTaskPriorityGet+0x2c>
   220a8:	e59f302c 	ldr	r3, [pc, #44]	@ 220dc <uxTaskPriorityGet+0x54>
   220ac:	e5933000 	ldr	r3, [r3]
   220b0:	ea000000 	b	220b8 <uxTaskPriorityGet+0x30>
   220b4:	e51b3010 	ldr	r3, [fp, #-16]
   220b8:	e50b3008 	str	r3, [fp, #-8]
			uxReturn = pxTCB->uxPriority;
   220bc:	e51b3008 	ldr	r3, [fp, #-8]
   220c0:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   220c4:	e50b300c 	str	r3, [fp, #-12]
		}
		taskEXIT_CRITICAL();
   220c8:	ebfff92e 	bl	20588 <vPortExitCritical>

		return uxReturn;
   220cc:	e51b300c 	ldr	r3, [fp, #-12]
	}
   220d0:	e1a00003 	mov	r0, r3
   220d4:	e24bd004 	sub	sp, fp, #4
   220d8:	e8bd8800 	pop	{fp, pc}
   220dc:	000248dc 	ldrdeq	r4, [r2], -ip

000220e0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   220e0:	e92d4800 	push	{fp, lr}
   220e4:	e28db004 	add	fp, sp, #4
   220e8:	e24dd018 	sub	sp, sp, #24
   220ec:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   220f0:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   220f4:	e3a03000 	mov	r3, #0
   220f8:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   220fc:	e51b301c 	ldr	r3, [fp, #-28]	@ 0xffffffe4
   22100:	e3530004 	cmp	r3, #4
   22104:	9a000001 	bls	22110 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   22108:	e3a03004 	mov	r3, #4
   2210c:	e50b301c 	str	r3, [fp, #-28]	@ 0xffffffe4
		}

		taskENTER_CRITICAL();
   22110:	ebfff90b 	bl	20544 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   22114:	e59f3160 	ldr	r3, [pc, #352]	@ 2227c <vTaskPrioritySet+0x19c>
   22118:	e5933000 	ldr	r3, [r3]
   2211c:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   22120:	e1520003 	cmp	r2, r3
   22124:	1a000001 	bne	22130 <vTaskPrioritySet+0x50>
			{
				pxTask = NULL;
   22128:	e3a03000 	mov	r3, #0
   2212c:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   22130:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   22134:	e3530000 	cmp	r3, #0
   22138:	1a000002 	bne	22148 <vTaskPrioritySet+0x68>
   2213c:	e59f3138 	ldr	r3, [pc, #312]	@ 2227c <vTaskPrioritySet+0x19c>
   22140:	e5933000 	ldr	r3, [r3]
   22144:	ea000000 	b	2214c <vTaskPrioritySet+0x6c>
   22148:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   2214c:	e50b300c 	str	r3, [fp, #-12]
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   22150:	e51b300c 	ldr	r3, [fp, #-12]
   22154:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22158:	e50b3010 	str	r3, [fp, #-16]
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   2215c:	e51b2010 	ldr	r2, [fp, #-16]
   22160:	e51b301c 	ldr	r3, [fp, #-28]	@ 0xffffffe4
   22164:	e1520003 	cmp	r2, r3
   22168:	0a00003f 	beq	2226c <vTaskPrioritySet+0x18c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   2216c:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   22170:	e51b3010 	ldr	r3, [fp, #-16]
   22174:	e1520003 	cmp	r2, r3
   22178:	9a000005 	bls	22194 <vTaskPrioritySet+0xb4>
				{
					if( pxTask != NULL )
   2217c:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   22180:	e3530000 	cmp	r3, #0
   22184:	0a000007 	beq	221a8 <vTaskPrioritySet+0xc8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   22188:	e3a03001 	mov	r3, #1
   2218c:	e50b3008 	str	r3, [fp, #-8]
   22190:	ea000004 	b	221a8 <vTaskPrioritySet+0xc8>
					}
				}
				else if( pxTask == NULL )
   22194:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   22198:	e3530000 	cmp	r3, #0
   2219c:	1a000001 	bne	221a8 <vTaskPrioritySet+0xc8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   221a0:	e3a03001 	mov	r3, #1
   221a4:	e50b3008 	str	r3, [fp, #-8]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   221a8:	e51b300c 	ldr	r3, [fp, #-12]
   221ac:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   221b0:	e583202c 	str	r2, [r3, #44]	@ 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   221b4:	e51b301c 	ldr	r3, [fp, #-28]	@ 0xffffffe4
   221b8:	e2632005 	rsb	r2, r3, #5
   221bc:	e51b300c 	ldr	r3, [fp, #-12]
   221c0:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   221c4:	e51b300c 	ldr	r3, [fp, #-12]
   221c8:	e5931014 	ldr	r1, [r3, #20]
   221cc:	e51b2010 	ldr	r2, [fp, #-16]
   221d0:	e1a03002 	mov	r3, r2
   221d4:	e1a03103 	lsl	r3, r3, #2
   221d8:	e0833002 	add	r3, r3, r2
   221dc:	e1a03103 	lsl	r3, r3, #2
   221e0:	e59f2098 	ldr	r2, [pc, #152]	@ 22280 <vTaskPrioritySet+0x1a0>
   221e4:	e0833002 	add	r3, r3, r2
   221e8:	e1510003 	cmp	r1, r3
   221ec:	1a00001a 	bne	2225c <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   221f0:	e51b300c 	ldr	r3, [fp, #-12]
   221f4:	e2833004 	add	r3, r3, #4
   221f8:	e1a00003 	mov	r0, r3
   221fc:	ebfffb57 	bl	20f60 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   22200:	e51b300c 	ldr	r3, [fp, #-12]
   22204:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22208:	e59f3074 	ldr	r3, [pc, #116]	@ 22284 <vTaskPrioritySet+0x1a4>
   2220c:	e5933000 	ldr	r3, [r3]
   22210:	e1520003 	cmp	r2, r3
   22214:	9a000003 	bls	22228 <vTaskPrioritySet+0x148>
   22218:	e51b300c 	ldr	r3, [fp, #-12]
   2221c:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22220:	e59f205c 	ldr	r2, [pc, #92]	@ 22284 <vTaskPrioritySet+0x1a4>
   22224:	e5823000 	str	r3, [r2]
   22228:	e51b300c 	ldr	r3, [fp, #-12]
   2222c:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22230:	e1a03002 	mov	r3, r2
   22234:	e1a03103 	lsl	r3, r3, #2
   22238:	e0833002 	add	r3, r3, r2
   2223c:	e1a03103 	lsl	r3, r3, #2
   22240:	e59f2038 	ldr	r2, [pc, #56]	@ 22280 <vTaskPrioritySet+0x1a0>
   22244:	e0832002 	add	r2, r3, r2
   22248:	e51b300c 	ldr	r3, [fp, #-12]
   2224c:	e2833004 	add	r3, r3, #4
   22250:	e1a01003 	mov	r1, r3
   22254:	e1a00002 	mov	r0, r2
   22258:	ebfffae4 	bl	20df0 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   2225c:	e51b3008 	ldr	r3, [fp, #-8]
   22260:	e3530001 	cmp	r3, #1
   22264:	1a000000 	bne	2226c <vTaskPrioritySet+0x18c>
				{
					portYIELD_WITHIN_API();
   22268:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   2226c:	ebfff8c5 	bl	20588 <vPortExitCritical>
	}
   22270:	e320f000 	nop	{0}
   22274:	e24bd004 	sub	sp, fp, #4
   22278:	e8bd8800 	pop	{fp, pc}
   2227c:	000248dc 	ldrdeq	r4, [r2], -ip
   22280:	000248e0 	andeq	r4, r2, r0, ror #17
   22284:	000249c0 	andeq	r4, r2, r0, asr #19

00022288 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   22288:	e92d4800 	push	{fp, lr}
   2228c:	e28db004 	add	fp, sp, #4
   22290:	e24dd010 	sub	sp, sp, #16
   22294:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   22298:	ebfff8a9 	bl	20544 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   2229c:	e59f30d8 	ldr	r3, [pc, #216]	@ 2237c <vTaskSuspend+0xf4>
   222a0:	e5933000 	ldr	r3, [r3]
   222a4:	e51b2010 	ldr	r2, [fp, #-16]
   222a8:	e1520003 	cmp	r2, r3
   222ac:	1a000001 	bne	222b8 <vTaskSuspend+0x30>
			{
				pxTaskToSuspend = NULL;
   222b0:	e3a03000 	mov	r3, #0
   222b4:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   222b8:	e51b3010 	ldr	r3, [fp, #-16]
   222bc:	e3530000 	cmp	r3, #0
   222c0:	1a000002 	bne	222d0 <vTaskSuspend+0x48>
   222c4:	e59f30b0 	ldr	r3, [pc, #176]	@ 2237c <vTaskSuspend+0xf4>
   222c8:	e5933000 	ldr	r3, [r3]
   222cc:	ea000000 	b	222d4 <vTaskSuspend+0x4c>
   222d0:	e51b3010 	ldr	r3, [fp, #-16]
   222d4:	e50b3008 	str	r3, [fp, #-8]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   222d8:	e51b3008 	ldr	r3, [fp, #-8]
   222dc:	e2833004 	add	r3, r3, #4
   222e0:	e1a00003 	mov	r0, r3
   222e4:	ebfffb1d 	bl	20f60 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   222e8:	e51b3008 	ldr	r3, [fp, #-8]
   222ec:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   222f0:	e3530000 	cmp	r3, #0
   222f4:	0a000003 	beq	22308 <vTaskSuspend+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   222f8:	e51b3008 	ldr	r3, [fp, #-8]
   222fc:	e2833018 	add	r3, r3, #24
   22300:	e1a00003 	mov	r0, r3
   22304:	ebfffb15 	bl	20f60 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   22308:	e51b3008 	ldr	r3, [fp, #-8]
   2230c:	e2833004 	add	r3, r3, #4
   22310:	e1a01003 	mov	r1, r3
   22314:	e59f0064 	ldr	r0, [pc, #100]	@ 22380 <vTaskSuspend+0xf8>
   22318:	ebfffab4 	bl	20df0 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   2231c:	ebfff899 	bl	20588 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   22320:	e51b3010 	ldr	r3, [fp, #-16]
   22324:	e3530000 	cmp	r3, #0
   22328:	1a000010 	bne	22370 <vTaskSuspend+0xe8>
		{
			if( xSchedulerRunning != pdFALSE )
   2232c:	e59f3050 	ldr	r3, [pc, #80]	@ 22384 <vTaskSuspend+0xfc>
   22330:	e5933000 	ldr	r3, [r3]
   22334:	e3530000 	cmp	r3, #0
   22338:	0a000001 	beq	22344 <vTaskSuspend+0xbc>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   2233c:	ef000000 	svc	0x00000000
				{
					vTaskSwitchContext();
				}
			}
		}
	}
   22340:	ea00000a 	b	22370 <vTaskSuspend+0xe8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   22344:	e59f3034 	ldr	r3, [pc, #52]	@ 22380 <vTaskSuspend+0xf8>
   22348:	e5932000 	ldr	r2, [r3]
   2234c:	e59f3034 	ldr	r3, [pc, #52]	@ 22388 <vTaskSuspend+0x100>
   22350:	e5933000 	ldr	r3, [r3]
   22354:	e1520003 	cmp	r2, r3
   22358:	1a000003 	bne	2236c <vTaskSuspend+0xe4>
					pxCurrentTCB = NULL;
   2235c:	e59f3018 	ldr	r3, [pc, #24]	@ 2237c <vTaskSuspend+0xf4>
   22360:	e3a02000 	mov	r2, #0
   22364:	e5832000 	str	r2, [r3]
	}
   22368:	ea000000 	b	22370 <vTaskSuspend+0xe8>
					vTaskSwitchContext();
   2236c:	eb00024c 	bl	22ca4 <vTaskSwitchContext>
	}
   22370:	e320f000 	nop	{0}
   22374:	e24bd004 	sub	sp, fp, #4
   22378:	e8bd8800 	pop	{fp, pc}
   2237c:	000248dc 	ldrdeq	r4, [r2], -ip
   22380:	000249a0 	andeq	r4, r2, r0, lsr #19
   22384:	000249c4 	andeq	r4, r2, r4, asr #19
   22388:	000249b4 			@ <UNDEFINED> instruction: 0x000249b4

0002238c <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   2238c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   22390:	e28db000 	add	fp, sp, #0
   22394:	e24dd014 	sub	sp, sp, #20
   22398:	e50b0010 	str	r0, [fp, #-16]
	portBASE_TYPE xReturn = pdFALSE;
   2239c:	e3a03000 	mov	r3, #0
   223a0:	e50b3008 	str	r3, [fp, #-8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   223a4:	e51b3010 	ldr	r3, [fp, #-16]
   223a8:	e50b300c 	str	r3, [fp, #-12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   223ac:	e51b300c 	ldr	r3, [fp, #-12]
   223b0:	e5933014 	ldr	r3, [r3, #20]
   223b4:	e59f2044 	ldr	r2, [pc, #68]	@ 22400 <xTaskIsTaskSuspended+0x74>
   223b8:	e1530002 	cmp	r3, r2
   223bc:	1a00000a 	bne	223ec <xTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   223c0:	e51b300c 	ldr	r3, [fp, #-12]
   223c4:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   223c8:	e59f2034 	ldr	r2, [pc, #52]	@ 22404 <xTaskIsTaskSuspended+0x78>
   223cc:	e1530002 	cmp	r3, r2
   223d0:	0a000005 	beq	223ec <xTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   223d4:	e51b300c 	ldr	r3, [fp, #-12]
   223d8:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   223dc:	e3530000 	cmp	r3, #0
   223e0:	1a000001 	bne	223ec <xTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
   223e4:	e3a03001 	mov	r3, #1
   223e8:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}

		return xReturn;
   223ec:	e51b3008 	ldr	r3, [fp, #-8]
	}
   223f0:	e1a00003 	mov	r0, r3
   223f4:	e28bd000 	add	sp, fp, #0
   223f8:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   223fc:	e12fff1e 	bx	lr
   22400:	000249a0 	andeq	r4, r2, r0, lsr #19
   22404:	00024974 	andeq	r4, r2, r4, ror r9

00022408 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   22408:	e92d4800 	push	{fp, lr}
   2240c:	e28db004 	add	fp, sp, #4
   22410:	e24dd010 	sub	sp, sp, #16
   22414:	e50b0010 	str	r0, [fp, #-16]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   22418:	e51b3010 	ldr	r3, [fp, #-16]
   2241c:	e50b3008 	str	r3, [fp, #-8]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   22420:	e51b3008 	ldr	r3, [fp, #-8]
   22424:	e3530000 	cmp	r3, #0
   22428:	0a00002e 	beq	224e8 <vTaskResume+0xe0>
   2242c:	e59f30c0 	ldr	r3, [pc, #192]	@ 224f4 <vTaskResume+0xec>
   22430:	e5933000 	ldr	r3, [r3]
   22434:	e51b2008 	ldr	r2, [fp, #-8]
   22438:	e1520003 	cmp	r2, r3
   2243c:	0a000029 	beq	224e8 <vTaskResume+0xe0>
		{
			taskENTER_CRITICAL();
   22440:	ebfff83f 	bl	20544 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   22444:	e51b0008 	ldr	r0, [fp, #-8]
   22448:	ebffffcf 	bl	2238c <xTaskIsTaskSuspended>
   2244c:	e1a03000 	mov	r3, r0
   22450:	e3530001 	cmp	r3, #1
   22454:	1a000022 	bne	224e4 <vTaskResume+0xdc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   22458:	e51b3008 	ldr	r3, [fp, #-8]
   2245c:	e2833004 	add	r3, r3, #4
   22460:	e1a00003 	mov	r0, r3
   22464:	ebfffabd 	bl	20f60 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   22468:	e51b3008 	ldr	r3, [fp, #-8]
   2246c:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22470:	e59f3080 	ldr	r3, [pc, #128]	@ 224f8 <vTaskResume+0xf0>
   22474:	e5933000 	ldr	r3, [r3]
   22478:	e1520003 	cmp	r2, r3
   2247c:	9a000003 	bls	22490 <vTaskResume+0x88>
   22480:	e51b3008 	ldr	r3, [fp, #-8]
   22484:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22488:	e59f2068 	ldr	r2, [pc, #104]	@ 224f8 <vTaskResume+0xf0>
   2248c:	e5823000 	str	r3, [r2]
   22490:	e51b3008 	ldr	r3, [fp, #-8]
   22494:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22498:	e1a03002 	mov	r3, r2
   2249c:	e1a03103 	lsl	r3, r3, #2
   224a0:	e0833002 	add	r3, r3, r2
   224a4:	e1a03103 	lsl	r3, r3, #2
   224a8:	e59f204c 	ldr	r2, [pc, #76]	@ 224fc <vTaskResume+0xf4>
   224ac:	e0832002 	add	r2, r3, r2
   224b0:	e51b3008 	ldr	r3, [fp, #-8]
   224b4:	e2833004 	add	r3, r3, #4
   224b8:	e1a01003 	mov	r1, r3
   224bc:	e1a00002 	mov	r0, r2
   224c0:	ebfffa4a 	bl	20df0 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   224c4:	e51b3008 	ldr	r3, [fp, #-8]
   224c8:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   224cc:	e59f3020 	ldr	r3, [pc, #32]	@ 224f4 <vTaskResume+0xec>
   224d0:	e5933000 	ldr	r3, [r3]
   224d4:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   224d8:	e1520003 	cmp	r2, r3
   224dc:	3a000000 	bcc	224e4 <vTaskResume+0xdc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   224e0:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   224e4:	ebfff827 	bl	20588 <vPortExitCritical>
		}
	}
   224e8:	e320f000 	nop	{0}
   224ec:	e24bd004 	sub	sp, fp, #4
   224f0:	e8bd8800 	pop	{fp, pc}
   224f4:	000248dc 	ldrdeq	r4, [r2], -ip
   224f8:	000249c0 	andeq	r4, r2, r0, asr #19
   224fc:	000248e0 	andeq	r4, r2, r0, ror #17

00022500 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   22500:	e92d4800 	push	{fp, lr}
   22504:	e28db004 	add	fp, sp, #4
   22508:	e24dd018 	sub	sp, sp, #24
   2250c:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
	portBASE_TYPE xYieldRequired = pdFALSE;
   22510:	e3a03000 	mov	r3, #0
   22514:	e50b3008 	str	r3, [fp, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   22518:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   2251c:	e50b300c 	str	r3, [fp, #-12]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   22520:	e3a03000 	mov	r3, #0
   22524:	e50b3010 	str	r3, [fp, #-16]
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   22528:	e51b000c 	ldr	r0, [fp, #-12]
   2252c:	ebffff96 	bl	2238c <xTaskIsTaskSuspended>
   22530:	e1a03000 	mov	r3, r0
   22534:	e3530001 	cmp	r3, #1
   22538:	1a00002e 	bne	225f8 <xTaskResumeFromISR+0xf8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   2253c:	e59f30c4 	ldr	r3, [pc, #196]	@ 22608 <xTaskResumeFromISR+0x108>
   22540:	e5933000 	ldr	r3, [r3]
   22544:	e3530000 	cmp	r3, #0
   22548:	1a000025 	bne	225e4 <xTaskResumeFromISR+0xe4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   2254c:	e51b300c 	ldr	r3, [fp, #-12]
   22550:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22554:	e59f30b0 	ldr	r3, [pc, #176]	@ 2260c <xTaskResumeFromISR+0x10c>
   22558:	e5933000 	ldr	r3, [r3]
   2255c:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22560:	e1520003 	cmp	r2, r3
   22564:	23a03001 	movcs	r3, #1
   22568:	33a03000 	movcc	r3, #0
   2256c:	e6ef3073 	uxtb	r3, r3
   22570:	e50b3008 	str	r3, [fp, #-8]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   22574:	e51b300c 	ldr	r3, [fp, #-12]
   22578:	e2833004 	add	r3, r3, #4
   2257c:	e1a00003 	mov	r0, r3
   22580:	ebfffa76 	bl	20f60 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   22584:	e51b300c 	ldr	r3, [fp, #-12]
   22588:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   2258c:	e59f307c 	ldr	r3, [pc, #124]	@ 22610 <xTaskResumeFromISR+0x110>
   22590:	e5933000 	ldr	r3, [r3]
   22594:	e1520003 	cmp	r2, r3
   22598:	9a000003 	bls	225ac <xTaskResumeFromISR+0xac>
   2259c:	e51b300c 	ldr	r3, [fp, #-12]
   225a0:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   225a4:	e59f2064 	ldr	r2, [pc, #100]	@ 22610 <xTaskResumeFromISR+0x110>
   225a8:	e5823000 	str	r3, [r2]
   225ac:	e51b300c 	ldr	r3, [fp, #-12]
   225b0:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   225b4:	e1a03002 	mov	r3, r2
   225b8:	e1a03103 	lsl	r3, r3, #2
   225bc:	e0833002 	add	r3, r3, r2
   225c0:	e1a03103 	lsl	r3, r3, #2
   225c4:	e59f2048 	ldr	r2, [pc, #72]	@ 22614 <xTaskResumeFromISR+0x114>
   225c8:	e0832002 	add	r2, r3, r2
   225cc:	e51b300c 	ldr	r3, [fp, #-12]
   225d0:	e2833004 	add	r3, r3, #4
   225d4:	e1a01003 	mov	r1, r3
   225d8:	e1a00002 	mov	r0, r2
   225dc:	ebfffa03 	bl	20df0 <vListInsertEnd>
   225e0:	ea000004 	b	225f8 <xTaskResumeFromISR+0xf8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   225e4:	e51b300c 	ldr	r3, [fp, #-12]
   225e8:	e2833018 	add	r3, r3, #24
   225ec:	e1a01003 	mov	r1, r3
   225f0:	e59f0020 	ldr	r0, [pc, #32]	@ 22618 <xTaskResumeFromISR+0x118>
   225f4:	ebfff9fd 	bl	20df0 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   225f8:	e51b3008 	ldr	r3, [fp, #-8]
	}
   225fc:	e1a00003 	mov	r0, r3
   22600:	e24bd004 	sub	sp, fp, #4
   22604:	e8bd8800 	pop	{fp, pc}
   22608:	000249c8 	andeq	r4, r2, r8, asr #19
   2260c:	000248dc 	ldrdeq	r4, [r2], -ip
   22610:	000249c0 	andeq	r4, r2, r0, asr #19
   22614:	000248e0 	andeq	r4, r2, r0, ror #17
   22618:	00024974 	andeq	r4, r2, r4, ror r9

0002261c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   2261c:	e92d4800 	push	{fp, lr}
   22620:	e28db004 	add	fp, sp, #4
   22624:	e24dd018 	sub	sp, sp, #24
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   22628:	e3a03000 	mov	r3, #0
   2262c:	e58d300c 	str	r3, [sp, #12]
   22630:	e3a03000 	mov	r3, #0
   22634:	e58d3008 	str	r3, [sp, #8]
   22638:	e3a03000 	mov	r3, #0
   2263c:	e58d3004 	str	r3, [sp, #4]
   22640:	e3a03000 	mov	r3, #0
   22644:	e58d3000 	str	r3, [sp]
   22648:	e3a03000 	mov	r3, #0
   2264c:	e3a02080 	mov	r2, #128	@ 0x80
   22650:	e59f1050 	ldr	r1, [pc, #80]	@ 226a8 <vTaskStartScheduler+0x8c>
   22654:	e59f0050 	ldr	r0, [pc, #80]	@ 226ac <vTaskStartScheduler+0x90>
   22658:	ebfffd52 	bl	21ba8 <xTaskGenericCreate>
   2265c:	e50b0008 	str	r0, [fp, #-8]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   22660:	e51b3008 	ldr	r3, [fp, #-8]
   22664:	e3530001 	cmp	r3, #1
   22668:	1a00000b 	bne	2269c <vTaskStartScheduler+0x80>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   2266c:	e92d0001 	stmfd	sp!, {r0}
   22670:	e10f0000 	mrs	r0, CPSR
   22674:	e38000c0 	orr	r0, r0, #192	@ 0xc0
   22678:	e129f000 	msr	CPSR_fc, r0
   2267c:	e8bd0001 	ldmfd	sp!, {r0}

		xSchedulerRunning = pdTRUE;
   22680:	e59f3028 	ldr	r3, [pc, #40]	@ 226b0 <vTaskStartScheduler+0x94>
   22684:	e3a02001 	mov	r2, #1
   22688:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   2268c:	e59f3020 	ldr	r3, [pc, #32]	@ 226b4 <vTaskStartScheduler+0x98>
   22690:	e3a02000 	mov	r2, #0
   22694:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   22698:	ebfff6e8 	bl	20240 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   2269c:	e320f000 	nop	{0}
   226a0:	e24bd004 	sub	sp, fp, #4
   226a4:	e8bd8800 	pop	{fp, pc}
   226a8:	00024800 	andeq	r4, r2, r0, lsl #16
   226ac:	000230c4 	andeq	r3, r2, r4, asr #1
   226b0:	000249c4 	andeq	r4, r2, r4, asr #19
   226b4:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8

000226b8 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   226b8:	e92d4800 	push	{fp, lr}
   226bc:	e28db004 	add	fp, sp, #4
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   226c0:	e92d0001 	stmfd	sp!, {r0}
   226c4:	e10f0000 	mrs	r0, CPSR
   226c8:	e38000c0 	orr	r0, r0, #192	@ 0xc0
   226cc:	e129f000 	msr	CPSR_fc, r0
   226d0:	e8bd0001 	ldmfd	sp!, {r0}
	xSchedulerRunning = pdFALSE;
   226d4:	e59f3010 	ldr	r3, [pc, #16]	@ 226ec <vTaskEndScheduler+0x34>
   226d8:	e3a02000 	mov	r2, #0
   226dc:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   226e0:	ebfff6dd 	bl	2025c <vPortEndScheduler>
}
   226e4:	e320f000 	nop	{0}
   226e8:	e8bd8800 	pop	{fp, pc}
   226ec:	000249c4 	andeq	r4, r2, r4, asr #19

000226f0 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   226f0:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   226f4:	e28db000 	add	fp, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   226f8:	e59f301c 	ldr	r3, [pc, #28]	@ 2271c <vTaskSuspendAll+0x2c>
   226fc:	e5933000 	ldr	r3, [r3]
   22700:	e2833001 	add	r3, r3, #1
   22704:	e59f2010 	ldr	r2, [pc, #16]	@ 2271c <vTaskSuspendAll+0x2c>
   22708:	e5823000 	str	r3, [r2]
}
   2270c:	e320f000 	nop	{0}
   22710:	e28bd000 	add	sp, fp, #0
   22714:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   22718:	e12fff1e 	bx	lr
   2271c:	000249c8 	andeq	r4, r2, r8, asr #19

00022720 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   22720:	e92d4810 	push	{r4, fp, lr}
   22724:	e28db008 	add	fp, sp, #8
   22728:	e24dd00c 	sub	sp, sp, #12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   2272c:	e3a03000 	mov	r3, #0
   22730:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   22734:	ebfff782 	bl	20544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   22738:	e59f3164 	ldr	r3, [pc, #356]	@ 228a4 <xTaskResumeAll+0x184>
   2273c:	e5933000 	ldr	r3, [r3]
   22740:	e2433001 	sub	r3, r3, #1
   22744:	e59f2158 	ldr	r2, [pc, #344]	@ 228a4 <xTaskResumeAll+0x184>
   22748:	e5823000 	str	r3, [r2]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   2274c:	e59f3150 	ldr	r3, [pc, #336]	@ 228a4 <xTaskResumeAll+0x184>
   22750:	e5933000 	ldr	r3, [r3]
   22754:	e3530000 	cmp	r3, #0
   22758:	1a00004c 	bne	22890 <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   2275c:	e59f3144 	ldr	r3, [pc, #324]	@ 228a8 <xTaskResumeAll+0x188>
   22760:	e5933000 	ldr	r3, [r3]
   22764:	e3530000 	cmp	r3, #0
   22768:	0a000048 	beq	22890 <xTaskResumeAll+0x170>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   2276c:	e3a03000 	mov	r3, #0
   22770:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   22774:	ea000023 	b	22808 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   22778:	e59f312c 	ldr	r3, [pc, #300]	@ 228ac <xTaskResumeAll+0x18c>
   2277c:	e593300c 	ldr	r3, [r3, #12]
   22780:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   22784:	e2843018 	add	r3, r4, #24
   22788:	e1a00003 	mov	r0, r3
   2278c:	ebfff9f3 	bl	20f60 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   22790:	e2843004 	add	r3, r4, #4
   22794:	e1a00003 	mov	r0, r3
   22798:	ebfff9f0 	bl	20f60 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   2279c:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   227a0:	e59f3108 	ldr	r3, [pc, #264]	@ 228b0 <xTaskResumeAll+0x190>
   227a4:	e5933000 	ldr	r3, [r3]
   227a8:	e1520003 	cmp	r2, r3
   227ac:	9a000002 	bls	227bc <xTaskResumeAll+0x9c>
   227b0:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
   227b4:	e59f20f4 	ldr	r2, [pc, #244]	@ 228b0 <xTaskResumeAll+0x190>
   227b8:	e5823000 	str	r3, [r2]
   227bc:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   227c0:	e1a03002 	mov	r3, r2
   227c4:	e1a03103 	lsl	r3, r3, #2
   227c8:	e0833002 	add	r3, r3, r2
   227cc:	e1a03103 	lsl	r3, r3, #2
   227d0:	e59f20dc 	ldr	r2, [pc, #220]	@ 228b4 <xTaskResumeAll+0x194>
   227d4:	e0833002 	add	r3, r3, r2
   227d8:	e2842004 	add	r2, r4, #4
   227dc:	e1a01002 	mov	r1, r2
   227e0:	e1a00003 	mov	r0, r3
   227e4:	ebfff981 	bl	20df0 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   227e8:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   227ec:	e59f30c4 	ldr	r3, [pc, #196]	@ 228b8 <xTaskResumeAll+0x198>
   227f0:	e5933000 	ldr	r3, [r3]
   227f4:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   227f8:	e1520003 	cmp	r2, r3
   227fc:	3a000001 	bcc	22808 <xTaskResumeAll+0xe8>
					{
						xYieldRequired = pdTRUE;
   22800:	e3a03001 	mov	r3, #1
   22804:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   22808:	e59f309c 	ldr	r3, [pc, #156]	@ 228ac <xTaskResumeAll+0x18c>
   2280c:	e5933000 	ldr	r3, [r3]
   22810:	e3530000 	cmp	r3, #0
   22814:	1affffd7 	bne	22778 <xTaskResumeAll+0x58>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   22818:	e59f309c 	ldr	r3, [pc, #156]	@ 228bc <xTaskResumeAll+0x19c>
   2281c:	e5933000 	ldr	r3, [r3]
   22820:	e3530000 	cmp	r3, #0
   22824:	0a00000c 	beq	2285c <xTaskResumeAll+0x13c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   22828:	ea000005 	b	22844 <xTaskResumeAll+0x124>
					{
						vTaskIncrementTick();
   2282c:	eb000048 	bl	22954 <vTaskIncrementTick>
						--uxMissedTicks;
   22830:	e59f3084 	ldr	r3, [pc, #132]	@ 228bc <xTaskResumeAll+0x19c>
   22834:	e5933000 	ldr	r3, [r3]
   22838:	e2433001 	sub	r3, r3, #1
   2283c:	e59f2078 	ldr	r2, [pc, #120]	@ 228bc <xTaskResumeAll+0x19c>
   22840:	e5823000 	str	r3, [r2]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   22844:	e59f3070 	ldr	r3, [pc, #112]	@ 228bc <xTaskResumeAll+0x19c>
   22848:	e5933000 	ldr	r3, [r3]
   2284c:	e3530000 	cmp	r3, #0
   22850:	1afffff5 	bne	2282c <xTaskResumeAll+0x10c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   22854:	e3a03001 	mov	r3, #1
   22858:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   2285c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   22860:	e3530001 	cmp	r3, #1
   22864:	0a000003 	beq	22878 <xTaskResumeAll+0x158>
   22868:	e59f3050 	ldr	r3, [pc, #80]	@ 228c0 <xTaskResumeAll+0x1a0>
   2286c:	e5933000 	ldr	r3, [r3]
   22870:	e3530001 	cmp	r3, #1
   22874:	1a000005 	bne	22890 <xTaskResumeAll+0x170>
				{
					xAlreadyYielded = pdTRUE;
   22878:	e3a03001 	mov	r3, #1
   2287c:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   22880:	e59f3038 	ldr	r3, [pc, #56]	@ 228c0 <xTaskResumeAll+0x1a0>
   22884:	e3a02000 	mov	r2, #0
   22888:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   2288c:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   22890:	ebfff73c 	bl	20588 <vPortExitCritical>

	return xAlreadyYielded;
   22894:	e51b3010 	ldr	r3, [fp, #-16]
}
   22898:	e1a00003 	mov	r0, r3
   2289c:	e24bd008 	sub	sp, fp, #8
   228a0:	e8bd8810 	pop	{r4, fp, pc}
   228a4:	000249c8 	andeq	r4, r2, r8, asr #19
   228a8:	000249b4 			@ <UNDEFINED> instruction: 0x000249b4
   228ac:	00024974 	andeq	r4, r2, r4, ror r9
   228b0:	000249c0 	andeq	r4, r2, r0, asr #19
   228b4:	000248e0 	andeq	r4, r2, r0, ror #17
   228b8:	000248dc 	ldrdeq	r4, [r2], -ip
   228bc:	000249cc 	andeq	r4, r2, ip, asr #19
   228c0:	000249d0 	ldrdeq	r4, [r2], -r0

000228c4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   228c4:	e92d4800 	push	{fp, lr}
   228c8:	e28db004 	add	fp, sp, #4
   228cc:	e24dd008 	sub	sp, sp, #8
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   228d0:	ebfff71b 	bl	20544 <vPortEnterCritical>
	{
		xTicks = xTickCount;
   228d4:	e59f3018 	ldr	r3, [pc, #24]	@ 228f4 <xTaskGetTickCount+0x30>
   228d8:	e5933000 	ldr	r3, [r3]
   228dc:	e50b3008 	str	r3, [fp, #-8]
	}
	taskEXIT_CRITICAL();
   228e0:	ebfff728 	bl	20588 <vPortExitCritical>

	return xTicks;
   228e4:	e51b3008 	ldr	r3, [fp, #-8]
}
   228e8:	e1a00003 	mov	r0, r3
   228ec:	e24bd004 	sub	sp, fp, #4
   228f0:	e8bd8800 	pop	{fp, pc}
   228f4:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8

000228f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   228f8:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   228fc:	e28db000 	add	fp, sp, #0
   22900:	e24dd00c 	sub	sp, sp, #12
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   22904:	e3a03000 	mov	r3, #0
   22908:	e50b3008 	str	r3, [fp, #-8]
	xReturn = xTickCount;
   2290c:	e59f3018 	ldr	r3, [pc, #24]	@ 2292c <xTaskGetTickCountFromISR+0x34>
   22910:	e5933000 	ldr	r3, [r3]
   22914:	e50b300c 	str	r3, [fp, #-12]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   22918:	e51b300c 	ldr	r3, [fp, #-12]
}
   2291c:	e1a00003 	mov	r0, r3
   22920:	e28bd000 	add	sp, fp, #0
   22924:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   22928:	e12fff1e 	bx	lr
   2292c:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8

00022930 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   22930:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   22934:	e28db000 	add	fp, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   22938:	e59f3010 	ldr	r3, [pc, #16]	@ 22950 <uxTaskGetNumberOfTasks+0x20>
   2293c:	e5933000 	ldr	r3, [r3]
}
   22940:	e1a00003 	mov	r0, r3
   22944:	e28bd000 	add	sp, fp, #0
   22948:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   2294c:	e12fff1e 	bx	lr
   22950:	000249b4 			@ <UNDEFINED> instruction: 0x000249b4

00022954 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   22954:	e92d4800 	push	{fp, lr}
   22958:	e28db004 	add	fp, sp, #4
   2295c:	e24dd010 	sub	sp, sp, #16
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22960:	e59f31e4 	ldr	r3, [pc, #484]	@ 22b4c <vTaskIncrementTick+0x1f8>
   22964:	e5933000 	ldr	r3, [r3]
   22968:	e3530000 	cmp	r3, #0
   2296c:	1a00006d 	bne	22b28 <vTaskIncrementTick+0x1d4>
	{
		++xTickCount;
   22970:	e59f31d8 	ldr	r3, [pc, #472]	@ 22b50 <vTaskIncrementTick+0x1fc>
   22974:	e5933000 	ldr	r3, [r3]
   22978:	e2833001 	add	r3, r3, #1
   2297c:	e59f21cc 	ldr	r2, [pc, #460]	@ 22b50 <vTaskIncrementTick+0x1fc>
   22980:	e5823000 	str	r3, [r2]
		if( xTickCount == ( portTickType ) 0U )
   22984:	e59f31c4 	ldr	r3, [pc, #452]	@ 22b50 <vTaskIncrementTick+0x1fc>
   22988:	e5933000 	ldr	r3, [r3]
   2298c:	e3530000 	cmp	r3, #0
   22990:	1a000020 	bne	22a18 <vTaskIncrementTick+0xc4>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   22994:	e59f31b8 	ldr	r3, [pc, #440]	@ 22b54 <vTaskIncrementTick+0x200>
   22998:	e5933000 	ldr	r3, [r3]
   2299c:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   229a0:	e59f31b0 	ldr	r3, [pc, #432]	@ 22b58 <vTaskIncrementTick+0x204>
   229a4:	e5933000 	ldr	r3, [r3]
   229a8:	e59f21a4 	ldr	r2, [pc, #420]	@ 22b54 <vTaskIncrementTick+0x200>
   229ac:	e5823000 	str	r3, [r2]
			pxOverflowDelayedTaskList = pxTemp;
   229b0:	e59f21a0 	ldr	r2, [pc, #416]	@ 22b58 <vTaskIncrementTick+0x204>
   229b4:	e51b3008 	ldr	r3, [fp, #-8]
   229b8:	e5823000 	str	r3, [r2]
			xNumOfOverflows++;
   229bc:	e59f3198 	ldr	r3, [pc, #408]	@ 22b5c <vTaskIncrementTick+0x208>
   229c0:	e5933000 	ldr	r3, [r3]
   229c4:	e2833001 	add	r3, r3, #1
   229c8:	e59f218c 	ldr	r2, [pc, #396]	@ 22b5c <vTaskIncrementTick+0x208>
   229cc:	e5823000 	str	r3, [r2]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   229d0:	e59f317c 	ldr	r3, [pc, #380]	@ 22b54 <vTaskIncrementTick+0x200>
   229d4:	e5933000 	ldr	r3, [r3]
   229d8:	e5933000 	ldr	r3, [r3]
   229dc:	e3530000 	cmp	r3, #0
   229e0:	1a000003 	bne	229f4 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   229e4:	e59f3174 	ldr	r3, [pc, #372]	@ 22b60 <vTaskIncrementTick+0x20c>
   229e8:	e3e02000 	mvn	r2, #0
   229ec:	e5832000 	str	r2, [r3]
   229f0:	ea000008 	b	22a18 <vTaskIncrementTick+0xc4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   229f4:	e59f3158 	ldr	r3, [pc, #344]	@ 22b54 <vTaskIncrementTick+0x200>
   229f8:	e5933000 	ldr	r3, [r3]
   229fc:	e593300c 	ldr	r3, [r3, #12]
   22a00:	e593300c 	ldr	r3, [r3, #12]
   22a04:	e50b300c 	str	r3, [fp, #-12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   22a08:	e51b300c 	ldr	r3, [fp, #-12]
   22a0c:	e5933004 	ldr	r3, [r3, #4]
   22a10:	e59f2148 	ldr	r2, [pc, #328]	@ 22b60 <vTaskIncrementTick+0x20c>
   22a14:	e5823000 	str	r3, [r2]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   22a18:	e59f3130 	ldr	r3, [pc, #304]	@ 22b50 <vTaskIncrementTick+0x1fc>
   22a1c:	e5932000 	ldr	r2, [r3]
   22a20:	e59f3138 	ldr	r3, [pc, #312]	@ 22b60 <vTaskIncrementTick+0x20c>
   22a24:	e5933000 	ldr	r3, [r3]
   22a28:	e1520003 	cmp	r2, r3
   22a2c:	3a000043 	bcc	22b40 <vTaskIncrementTick+0x1ec>
   22a30:	e59f311c 	ldr	r3, [pc, #284]	@ 22b54 <vTaskIncrementTick+0x200>
   22a34:	e5933000 	ldr	r3, [r3]
   22a38:	e5933000 	ldr	r3, [r3]
   22a3c:	e3530000 	cmp	r3, #0
   22a40:	1a000003 	bne	22a54 <vTaskIncrementTick+0x100>
   22a44:	e59f3114 	ldr	r3, [pc, #276]	@ 22b60 <vTaskIncrementTick+0x20c>
   22a48:	e3e02000 	mvn	r2, #0
   22a4c:	e5832000 	str	r2, [r3]
   22a50:	ea00003a 	b	22b40 <vTaskIncrementTick+0x1ec>
   22a54:	e59f30f8 	ldr	r3, [pc, #248]	@ 22b54 <vTaskIncrementTick+0x200>
   22a58:	e5933000 	ldr	r3, [r3]
   22a5c:	e593300c 	ldr	r3, [r3, #12]
   22a60:	e593300c 	ldr	r3, [r3, #12]
   22a64:	e50b300c 	str	r3, [fp, #-12]
   22a68:	e51b300c 	ldr	r3, [fp, #-12]
   22a6c:	e5933004 	ldr	r3, [r3, #4]
   22a70:	e50b3010 	str	r3, [fp, #-16]
   22a74:	e59f30d4 	ldr	r3, [pc, #212]	@ 22b50 <vTaskIncrementTick+0x1fc>
   22a78:	e5933000 	ldr	r3, [r3]
   22a7c:	e51b2010 	ldr	r2, [fp, #-16]
   22a80:	e1520003 	cmp	r2, r3
   22a84:	9a000003 	bls	22a98 <vTaskIncrementTick+0x144>
   22a88:	e59f20d0 	ldr	r2, [pc, #208]	@ 22b60 <vTaskIncrementTick+0x20c>
   22a8c:	e51b3010 	ldr	r3, [fp, #-16]
   22a90:	e5823000 	str	r3, [r2]
   22a94:	ea000029 	b	22b40 <vTaskIncrementTick+0x1ec>
   22a98:	e51b300c 	ldr	r3, [fp, #-12]
   22a9c:	e2833004 	add	r3, r3, #4
   22aa0:	e1a00003 	mov	r0, r3
   22aa4:	ebfff92d 	bl	20f60 <vListRemove>
   22aa8:	e51b300c 	ldr	r3, [fp, #-12]
   22aac:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   22ab0:	e3530000 	cmp	r3, #0
   22ab4:	0a000003 	beq	22ac8 <vTaskIncrementTick+0x174>
   22ab8:	e51b300c 	ldr	r3, [fp, #-12]
   22abc:	e2833018 	add	r3, r3, #24
   22ac0:	e1a00003 	mov	r0, r3
   22ac4:	ebfff925 	bl	20f60 <vListRemove>
   22ac8:	e51b300c 	ldr	r3, [fp, #-12]
   22acc:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22ad0:	e59f308c 	ldr	r3, [pc, #140]	@ 22b64 <vTaskIncrementTick+0x210>
   22ad4:	e5933000 	ldr	r3, [r3]
   22ad8:	e1520003 	cmp	r2, r3
   22adc:	9a000003 	bls	22af0 <vTaskIncrementTick+0x19c>
   22ae0:	e51b300c 	ldr	r3, [fp, #-12]
   22ae4:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22ae8:	e59f2074 	ldr	r2, [pc, #116]	@ 22b64 <vTaskIncrementTick+0x210>
   22aec:	e5823000 	str	r3, [r2]
   22af0:	e51b300c 	ldr	r3, [fp, #-12]
   22af4:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22af8:	e1a03002 	mov	r3, r2
   22afc:	e1a03103 	lsl	r3, r3, #2
   22b00:	e0833002 	add	r3, r3, r2
   22b04:	e1a03103 	lsl	r3, r3, #2
   22b08:	e59f2058 	ldr	r2, [pc, #88]	@ 22b68 <vTaskIncrementTick+0x214>
   22b0c:	e0832002 	add	r2, r3, r2
   22b10:	e51b300c 	ldr	r3, [fp, #-12]
   22b14:	e2833004 	add	r3, r3, #4
   22b18:	e1a01003 	mov	r1, r3
   22b1c:	e1a00002 	mov	r0, r2
   22b20:	ebfff8b2 	bl	20df0 <vListInsertEnd>
   22b24:	eaffffc1 	b	22a30 <vTaskIncrementTick+0xdc>
	}
	else
	{
		++uxMissedTicks;
   22b28:	e59f303c 	ldr	r3, [pc, #60]	@ 22b6c <vTaskIncrementTick+0x218>
   22b2c:	e5933000 	ldr	r3, [r3]
   22b30:	e2833001 	add	r3, r3, #1
   22b34:	e59f2030 	ldr	r2, [pc, #48]	@ 22b6c <vTaskIncrementTick+0x218>
   22b38:	e5823000 	str	r3, [r2]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   22b3c:	eaffffff 	b	22b40 <vTaskIncrementTick+0x1ec>
   22b40:	e320f000 	nop	{0}
   22b44:	e24bd004 	sub	sp, fp, #4
   22b48:	e8bd8800 	pop	{fp, pc}
   22b4c:	000249c8 	andeq	r4, r2, r8, asr #19
   22b50:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8
   22b54:	0002496c 	andeq	r4, r2, ip, ror #18
   22b58:	00024970 	andeq	r4, r2, r0, ror r9
   22b5c:	000249d4 	ldrdeq	r4, [r2], -r4	@ <UNPREDICTABLE>
   22b60:	0002484c 	andeq	r4, r2, ip, asr #16
   22b64:	000249c0 	andeq	r4, r2, r0, asr #19
   22b68:	000248e0 	andeq	r4, r2, r0, ror #17
   22b6c:	000249cc 	andeq	r4, r2, ip, asr #19

00022b70 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   22b70:	e92d4800 	push	{fp, lr}
   22b74:	e28db004 	add	fp, sp, #4
   22b78:	e24dd010 	sub	sp, sp, #16
   22b7c:	e50b0010 	str	r0, [fp, #-16]
   22b80:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   22b84:	e51b3010 	ldr	r3, [fp, #-16]
   22b88:	e3530000 	cmp	r3, #0
   22b8c:	1a000003 	bne	22ba0 <vTaskSetApplicationTaskTag+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22b90:	e59f3030 	ldr	r3, [pc, #48]	@ 22bc8 <vTaskSetApplicationTaskTag+0x58>
   22b94:	e5933000 	ldr	r3, [r3]
   22b98:	e50b3008 	str	r3, [fp, #-8]
   22b9c:	ea000001 	b	22ba8 <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22ba0:	e51b3010 	ldr	r3, [fp, #-16]
   22ba4:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   22ba8:	ebfff665 	bl	20544 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   22bac:	e51b3008 	ldr	r3, [fp, #-8]
   22bb0:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   22bb4:	e5832044 	str	r2, [r3, #68]	@ 0x44
		taskEXIT_CRITICAL();
   22bb8:	ebfff672 	bl	20588 <vPortExitCritical>
	}
   22bbc:	e320f000 	nop	{0}
   22bc0:	e24bd004 	sub	sp, fp, #4
   22bc4:	e8bd8800 	pop	{fp, pc}
   22bc8:	000248dc 	ldrdeq	r4, [r2], -ip

00022bcc <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   22bcc:	e92d4800 	push	{fp, lr}
   22bd0:	e28db004 	add	fp, sp, #4
   22bd4:	e24dd010 	sub	sp, sp, #16
   22bd8:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   22bdc:	e51b3010 	ldr	r3, [fp, #-16]
   22be0:	e3530000 	cmp	r3, #0
   22be4:	1a000003 	bne	22bf8 <xTaskGetApplicationTaskTag+0x2c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22be8:	e59f3034 	ldr	r3, [pc, #52]	@ 22c24 <xTaskGetApplicationTaskTag+0x58>
   22bec:	e5933000 	ldr	r3, [r3]
   22bf0:	e50b3008 	str	r3, [fp, #-8]
   22bf4:	ea000001 	b	22c00 <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22bf8:	e51b3010 	ldr	r3, [fp, #-16]
   22bfc:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   22c00:	ebfff64f 	bl	20544 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   22c04:	e51b3008 	ldr	r3, [fp, #-8]
   22c08:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   22c0c:	e50b300c 	str	r3, [fp, #-12]
		taskEXIT_CRITICAL();
   22c10:	ebfff65c 	bl	20588 <vPortExitCritical>

		return xReturn;
   22c14:	e51b300c 	ldr	r3, [fp, #-12]
	}
   22c18:	e1a00003 	mov	r0, r3
   22c1c:	e24bd004 	sub	sp, fp, #4
   22c20:	e8bd8800 	pop	{fp, pc}
   22c24:	000248dc 	ldrdeq	r4, [r2], -ip

00022c28 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   22c28:	e92d4800 	push	{fp, lr}
   22c2c:	e28db004 	add	fp, sp, #4
   22c30:	e24dd010 	sub	sp, sp, #16
   22c34:	e50b0010 	str	r0, [fp, #-16]
   22c38:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   22c3c:	e51b3010 	ldr	r3, [fp, #-16]
   22c40:	e3530000 	cmp	r3, #0
   22c44:	1a000003 	bne	22c58 <xTaskCallApplicationTaskHook+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22c48:	e59f3050 	ldr	r3, [pc, #80]	@ 22ca0 <xTaskCallApplicationTaskHook+0x78>
   22c4c:	e5933000 	ldr	r3, [r3]
   22c50:	e50b3008 	str	r3, [fp, #-8]
   22c54:	ea000001 	b	22c60 <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22c58:	e51b3010 	ldr	r3, [fp, #-16]
   22c5c:	e50b3008 	str	r3, [fp, #-8]
		}

		if( xTCB->pxTaskTag != NULL )
   22c60:	e51b3008 	ldr	r3, [fp, #-8]
   22c64:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   22c68:	e3530000 	cmp	r3, #0
   22c6c:	0a000005 	beq	22c88 <xTaskCallApplicationTaskHook+0x60>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   22c70:	e51b3008 	ldr	r3, [fp, #-8]
   22c74:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   22c78:	e51b0014 	ldr	r0, [fp, #-20]	@ 0xffffffec
   22c7c:	e12fff33 	blx	r3
   22c80:	e50b000c 	str	r0, [fp, #-12]
   22c84:	ea000001 	b	22c90 <xTaskCallApplicationTaskHook+0x68>
		}
		else
		{
			xReturn = pdFAIL;
   22c88:	e3a03000 	mov	r3, #0
   22c8c:	e50b300c 	str	r3, [fp, #-12]
		}

		return xReturn;
   22c90:	e51b300c 	ldr	r3, [fp, #-12]
	}
   22c94:	e1a00003 	mov	r0, r3
   22c98:	e24bd004 	sub	sp, fp, #4
   22c9c:	e8bd8800 	pop	{fp, pc}
   22ca0:	000248dc 	ldrdeq	r4, [r2], -ip

00022ca4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   22ca4:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   22ca8:	e28db000 	add	fp, sp, #0
   22cac:	e24dd00c 	sub	sp, sp, #12
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   22cb0:	e59f30e0 	ldr	r3, [pc, #224]	@ 22d98 <vTaskSwitchContext+0xf4>
   22cb4:	e5933000 	ldr	r3, [r3]
   22cb8:	e3530000 	cmp	r3, #0
   22cbc:	0a000008 	beq	22ce4 <vTaskSwitchContext+0x40>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   22cc0:	e59f30d4 	ldr	r3, [pc, #212]	@ 22d9c <vTaskSwitchContext+0xf8>
   22cc4:	e3a02001 	mov	r2, #1
   22cc8:	e5832000 	str	r2, [r3]
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   22ccc:	ea00002d 	b	22d88 <vTaskSwitchContext+0xe4>
			--uxTopReadyPriority;
   22cd0:	e59f30c8 	ldr	r3, [pc, #200]	@ 22da0 <vTaskSwitchContext+0xfc>
   22cd4:	e5933000 	ldr	r3, [r3]
   22cd8:	e2433001 	sub	r3, r3, #1
   22cdc:	e59f20bc 	ldr	r2, [pc, #188]	@ 22da0 <vTaskSwitchContext+0xfc>
   22ce0:	e5823000 	str	r3, [r2]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   22ce4:	e59f30b4 	ldr	r3, [pc, #180]	@ 22da0 <vTaskSwitchContext+0xfc>
   22ce8:	e5932000 	ldr	r2, [r3]
   22cec:	e59f10b0 	ldr	r1, [pc, #176]	@ 22da4 <vTaskSwitchContext+0x100>
   22cf0:	e1a03002 	mov	r3, r2
   22cf4:	e1a03103 	lsl	r3, r3, #2
   22cf8:	e0833002 	add	r3, r3, r2
   22cfc:	e1a03103 	lsl	r3, r3, #2
   22d00:	e0813003 	add	r3, r1, r3
   22d04:	e5933000 	ldr	r3, [r3]
   22d08:	e3530000 	cmp	r3, #0
   22d0c:	0affffef 	beq	22cd0 <vTaskSwitchContext+0x2c>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   22d10:	e59f3088 	ldr	r3, [pc, #136]	@ 22da0 <vTaskSwitchContext+0xfc>
   22d14:	e5932000 	ldr	r2, [r3]
   22d18:	e1a03002 	mov	r3, r2
   22d1c:	e1a03103 	lsl	r3, r3, #2
   22d20:	e0833002 	add	r3, r3, r2
   22d24:	e1a03103 	lsl	r3, r3, #2
   22d28:	e59f2074 	ldr	r2, [pc, #116]	@ 22da4 <vTaskSwitchContext+0x100>
   22d2c:	e0833002 	add	r3, r3, r2
   22d30:	e50b3008 	str	r3, [fp, #-8]
   22d34:	e51b3008 	ldr	r3, [fp, #-8]
   22d38:	e5933004 	ldr	r3, [r3, #4]
   22d3c:	e5932004 	ldr	r2, [r3, #4]
   22d40:	e51b3008 	ldr	r3, [fp, #-8]
   22d44:	e5832004 	str	r2, [r3, #4]
   22d48:	e51b3008 	ldr	r3, [fp, #-8]
   22d4c:	e5932004 	ldr	r2, [r3, #4]
   22d50:	e51b3008 	ldr	r3, [fp, #-8]
   22d54:	e2833008 	add	r3, r3, #8
   22d58:	e1520003 	cmp	r2, r3
   22d5c:	1a000004 	bne	22d74 <vTaskSwitchContext+0xd0>
   22d60:	e51b3008 	ldr	r3, [fp, #-8]
   22d64:	e5933004 	ldr	r3, [r3, #4]
   22d68:	e5932004 	ldr	r2, [r3, #4]
   22d6c:	e51b3008 	ldr	r3, [fp, #-8]
   22d70:	e5832004 	str	r2, [r3, #4]
   22d74:	e51b3008 	ldr	r3, [fp, #-8]
   22d78:	e5933004 	ldr	r3, [r3, #4]
   22d7c:	e593300c 	ldr	r3, [r3, #12]
   22d80:	e59f2020 	ldr	r2, [pc, #32]	@ 22da8 <vTaskSwitchContext+0x104>
   22d84:	e5823000 	str	r3, [r2]
}
   22d88:	e320f000 	nop	{0}
   22d8c:	e28bd000 	add	sp, fp, #0
   22d90:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   22d94:	e12fff1e 	bx	lr
   22d98:	000249c8 	andeq	r4, r2, r8, asr #19
   22d9c:	000249d0 	ldrdeq	r4, [r2], -r0
   22da0:	000249c0 	andeq	r4, r2, r0, asr #19
   22da4:	000248e0 	andeq	r4, r2, r0, ror #17
   22da8:	000248dc 	ldrdeq	r4, [r2], -ip

00022dac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   22dac:	e92d4800 	push	{fp, lr}
   22db0:	e28db004 	add	fp, sp, #4
   22db4:	e24dd010 	sub	sp, sp, #16
   22db8:	e50b0010 	str	r0, [fp, #-16]
   22dbc:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   22dc0:	e59f3074 	ldr	r3, [pc, #116]	@ 22e3c <vTaskPlaceOnEventList+0x90>
   22dc4:	e5933000 	ldr	r3, [r3]
   22dc8:	e2833018 	add	r3, r3, #24
   22dcc:	e1a01003 	mov	r1, r3
   22dd0:	e51b0010 	ldr	r0, [fp, #-16]
   22dd4:	ebfff82b 	bl	20e88 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22dd8:	e59f305c 	ldr	r3, [pc, #92]	@ 22e3c <vTaskPlaceOnEventList+0x90>
   22ddc:	e5933000 	ldr	r3, [r3]
   22de0:	e2833004 	add	r3, r3, #4
   22de4:	e1a00003 	mov	r0, r3
   22de8:	ebfff85c 	bl	20f60 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   22dec:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   22df0:	e3730001 	cmn	r3, #1
   22df4:	1a000006 	bne	22e14 <vTaskPlaceOnEventList+0x68>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22df8:	e59f303c 	ldr	r3, [pc, #60]	@ 22e3c <vTaskPlaceOnEventList+0x90>
   22dfc:	e5933000 	ldr	r3, [r3]
   22e00:	e2833004 	add	r3, r3, #4
   22e04:	e1a01003 	mov	r1, r3
   22e08:	e59f0030 	ldr	r0, [pc, #48]	@ 22e40 <vTaskPlaceOnEventList+0x94>
   22e0c:	ebfff7f7 	bl	20df0 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   22e10:	ea000006 	b	22e30 <vTaskPlaceOnEventList+0x84>
			xTimeToWake = xTickCount + xTicksToWait;
   22e14:	e59f3028 	ldr	r3, [pc, #40]	@ 22e44 <vTaskPlaceOnEventList+0x98>
   22e18:	e5933000 	ldr	r3, [r3]
   22e1c:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   22e20:	e0823003 	add	r3, r2, r3
   22e24:	e50b3008 	str	r3, [fp, #-8]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   22e28:	e51b0008 	ldr	r0, [fp, #-8]
   22e2c:	eb00013f 	bl	23330 <prvAddCurrentTaskToDelayedList>
}
   22e30:	e320f000 	nop	{0}
   22e34:	e24bd004 	sub	sp, fp, #4
   22e38:	e8bd8800 	pop	{fp, pc}
   22e3c:	000248dc 	ldrdeq	r4, [r2], -ip
   22e40:	000249a0 	andeq	r4, r2, r0, lsr #19
   22e44:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8

00022e48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   22e48:	e92d4800 	push	{fp, lr}
   22e4c:	e28db004 	add	fp, sp, #4
   22e50:	e24dd010 	sub	sp, sp, #16
   22e54:	e50b0010 	str	r0, [fp, #-16]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   22e58:	e51b3010 	ldr	r3, [fp, #-16]
   22e5c:	e593300c 	ldr	r3, [r3, #12]
   22e60:	e593300c 	ldr	r3, [r3, #12]
   22e64:	e50b300c 	str	r3, [fp, #-12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   22e68:	e51b300c 	ldr	r3, [fp, #-12]
   22e6c:	e2833018 	add	r3, r3, #24
   22e70:	e1a00003 	mov	r0, r3
   22e74:	ebfff839 	bl	20f60 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22e78:	e59f30cc 	ldr	r3, [pc, #204]	@ 22f4c <xTaskRemoveFromEventList+0x104>
   22e7c:	e5933000 	ldr	r3, [r3]
   22e80:	e3530000 	cmp	r3, #0
   22e84:	1a00001b 	bne	22ef8 <xTaskRemoveFromEventList+0xb0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   22e88:	e51b300c 	ldr	r3, [fp, #-12]
   22e8c:	e2833004 	add	r3, r3, #4
   22e90:	e1a00003 	mov	r0, r3
   22e94:	ebfff831 	bl	20f60 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   22e98:	e51b300c 	ldr	r3, [fp, #-12]
   22e9c:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22ea0:	e59f30a8 	ldr	r3, [pc, #168]	@ 22f50 <xTaskRemoveFromEventList+0x108>
   22ea4:	e5933000 	ldr	r3, [r3]
   22ea8:	e1520003 	cmp	r2, r3
   22eac:	9a000003 	bls	22ec0 <xTaskRemoveFromEventList+0x78>
   22eb0:	e51b300c 	ldr	r3, [fp, #-12]
   22eb4:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22eb8:	e59f2090 	ldr	r2, [pc, #144]	@ 22f50 <xTaskRemoveFromEventList+0x108>
   22ebc:	e5823000 	str	r3, [r2]
   22ec0:	e51b300c 	ldr	r3, [fp, #-12]
   22ec4:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22ec8:	e1a03002 	mov	r3, r2
   22ecc:	e1a03103 	lsl	r3, r3, #2
   22ed0:	e0833002 	add	r3, r3, r2
   22ed4:	e1a03103 	lsl	r3, r3, #2
   22ed8:	e59f2074 	ldr	r2, [pc, #116]	@ 22f54 <xTaskRemoveFromEventList+0x10c>
   22edc:	e0832002 	add	r2, r3, r2
   22ee0:	e51b300c 	ldr	r3, [fp, #-12]
   22ee4:	e2833004 	add	r3, r3, #4
   22ee8:	e1a01003 	mov	r1, r3
   22eec:	e1a00002 	mov	r0, r2
   22ef0:	ebfff7be 	bl	20df0 <vListInsertEnd>
   22ef4:	ea000004 	b	22f0c <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   22ef8:	e51b300c 	ldr	r3, [fp, #-12]
   22efc:	e2833018 	add	r3, r3, #24
   22f00:	e1a01003 	mov	r1, r3
   22f04:	e59f004c 	ldr	r0, [pc, #76]	@ 22f58 <xTaskRemoveFromEventList+0x110>
   22f08:	ebfff7b8 	bl	20df0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   22f0c:	e51b300c 	ldr	r3, [fp, #-12]
   22f10:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22f14:	e59f3040 	ldr	r3, [pc, #64]	@ 22f5c <xTaskRemoveFromEventList+0x114>
   22f18:	e5933000 	ldr	r3, [r3]
   22f1c:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22f20:	e1520003 	cmp	r2, r3
   22f24:	3a000002 	bcc	22f34 <xTaskRemoveFromEventList+0xec>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   22f28:	e3a03001 	mov	r3, #1
   22f2c:	e50b3008 	str	r3, [fp, #-8]
   22f30:	ea000001 	b	22f3c <xTaskRemoveFromEventList+0xf4>
	}
	else
	{
		xReturn = pdFALSE;
   22f34:	e3a03000 	mov	r3, #0
   22f38:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   22f3c:	e51b3008 	ldr	r3, [fp, #-8]
}
   22f40:	e1a00003 	mov	r0, r3
   22f44:	e24bd004 	sub	sp, fp, #4
   22f48:	e8bd8800 	pop	{fp, pc}
   22f4c:	000249c8 	andeq	r4, r2, r8, asr #19
   22f50:	000249c0 	andeq	r4, r2, r0, asr #19
   22f54:	000248e0 	andeq	r4, r2, r0, ror #17
   22f58:	00024974 	andeq	r4, r2, r4, ror r9
   22f5c:	000248dc 	ldrdeq	r4, [r2], -ip

00022f60 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   22f60:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   22f64:	e28db000 	add	fp, sp, #0
   22f68:	e24dd00c 	sub	sp, sp, #12
   22f6c:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   22f70:	e59f3028 	ldr	r3, [pc, #40]	@ 22fa0 <vTaskSetTimeOutState+0x40>
   22f74:	e5932000 	ldr	r2, [r3]
   22f78:	e51b3008 	ldr	r3, [fp, #-8]
   22f7c:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   22f80:	e59f301c 	ldr	r3, [pc, #28]	@ 22fa4 <vTaskSetTimeOutState+0x44>
   22f84:	e5932000 	ldr	r2, [r3]
   22f88:	e51b3008 	ldr	r3, [fp, #-8]
   22f8c:	e5832004 	str	r2, [r3, #4]
}
   22f90:	e320f000 	nop	{0}
   22f94:	e28bd000 	add	sp, fp, #0
   22f98:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   22f9c:	e12fff1e 	bx	lr
   22fa0:	000249d4 	ldrdeq	r4, [r2], -r4	@ <UNPREDICTABLE>
   22fa4:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8

00022fa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   22fa8:	e92d4800 	push	{fp, lr}
   22fac:	e28db004 	add	fp, sp, #4
   22fb0:	e24dd010 	sub	sp, sp, #16
   22fb4:	e50b0010 	str	r0, [fp, #-16]
   22fb8:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   22fbc:	ebfff560 	bl	20544 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   22fc0:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   22fc4:	e5933000 	ldr	r3, [r3]
   22fc8:	e3730001 	cmn	r3, #1
   22fcc:	1a000002 	bne	22fdc <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   22fd0:	e3a03000 	mov	r3, #0
   22fd4:	e50b3008 	str	r3, [fp, #-8]
   22fd8:	ea000028 	b	23080 <xTaskCheckForTimeOut+0xd8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   22fdc:	e51b3010 	ldr	r3, [fp, #-16]
   22fe0:	e5932000 	ldr	r2, [r3]
   22fe4:	e59f30a8 	ldr	r3, [pc, #168]	@ 23094 <xTaskCheckForTimeOut+0xec>
   22fe8:	e5933000 	ldr	r3, [r3]
   22fec:	e1520003 	cmp	r2, r3
   22ff0:	0a000008 	beq	23018 <xTaskCheckForTimeOut+0x70>
   22ff4:	e51b3010 	ldr	r3, [fp, #-16]
   22ff8:	e5932004 	ldr	r2, [r3, #4]
   22ffc:	e59f3094 	ldr	r3, [pc, #148]	@ 23098 <xTaskCheckForTimeOut+0xf0>
   23000:	e5933000 	ldr	r3, [r3]
   23004:	e1520003 	cmp	r2, r3
   23008:	8a000002 	bhi	23018 <xTaskCheckForTimeOut+0x70>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   2300c:	e3a03001 	mov	r3, #1
   23010:	e50b3008 	str	r3, [fp, #-8]
   23014:	ea000019 	b	23080 <xTaskCheckForTimeOut+0xd8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   23018:	e59f3078 	ldr	r3, [pc, #120]	@ 23098 <xTaskCheckForTimeOut+0xf0>
   2301c:	e5932000 	ldr	r2, [r3]
   23020:	e51b3010 	ldr	r3, [fp, #-16]
   23024:	e5933004 	ldr	r3, [r3, #4]
   23028:	e0422003 	sub	r2, r2, r3
   2302c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   23030:	e5933000 	ldr	r3, [r3]
   23034:	e1520003 	cmp	r2, r3
   23038:	2a00000e 	bcs	23078 <xTaskCheckForTimeOut+0xd0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   2303c:	e59f3054 	ldr	r3, [pc, #84]	@ 23098 <xTaskCheckForTimeOut+0xf0>
   23040:	e5932000 	ldr	r2, [r3]
   23044:	e51b3010 	ldr	r3, [fp, #-16]
   23048:	e5933004 	ldr	r3, [r3, #4]
   2304c:	e0423003 	sub	r3, r2, r3
   23050:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   23054:	e5922000 	ldr	r2, [r2]
   23058:	e0422003 	sub	r2, r2, r3
   2305c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   23060:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   23064:	e51b0010 	ldr	r0, [fp, #-16]
   23068:	ebffffbc 	bl	22f60 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   2306c:	e3a03000 	mov	r3, #0
   23070:	e50b3008 	str	r3, [fp, #-8]
   23074:	ea000001 	b	23080 <xTaskCheckForTimeOut+0xd8>
		}
		else
		{
			xReturn = pdTRUE;
   23078:	e3a03001 	mov	r3, #1
   2307c:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	taskEXIT_CRITICAL();
   23080:	ebfff540 	bl	20588 <vPortExitCritical>

	return xReturn;
   23084:	e51b3008 	ldr	r3, [fp, #-8]
}
   23088:	e1a00003 	mov	r0, r3
   2308c:	e24bd004 	sub	sp, fp, #4
   23090:	e8bd8800 	pop	{fp, pc}
   23094:	000249d4 	ldrdeq	r4, [r2], -r4	@ <UNPREDICTABLE>
   23098:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8

0002309c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   2309c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   230a0:	e28db000 	add	fp, sp, #0
	xMissedYield = pdTRUE;
   230a4:	e59f3014 	ldr	r3, [pc, #20]	@ 230c0 <vTaskMissedYield+0x24>
   230a8:	e3a02001 	mov	r2, #1
   230ac:	e5832000 	str	r2, [r3]
}
   230b0:	e320f000 	nop	{0}
   230b4:	e28bd000 	add	sp, fp, #0
   230b8:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   230bc:	e12fff1e 	bx	lr
   230c0:	000249d0 	ldrdeq	r4, [r2], -r0

000230c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   230c4:	e92d4800 	push	{fp, lr}
   230c8:	e28db004 	add	fp, sp, #4
   230cc:	e24dd008 	sub	sp, sp, #8
   230d0:	e50b0008 	str	r0, [fp, #-8]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   230d4:	eb000066 	bl	23274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   230d8:	e59f3010 	ldr	r3, [pc, #16]	@ 230f0 <prvIdleTask+0x2c>
   230dc:	e5933000 	ldr	r3, [r3]
   230e0:	e3530001 	cmp	r3, #1
   230e4:	9afffffa 	bls	230d4 <prvIdleTask+0x10>
			{
				taskYIELD();
   230e8:	ef000000 	svc	0x00000000
		prvCheckTasksWaitingTermination();
   230ec:	eafffff8 	b	230d4 <prvIdleTask+0x10>
   230f0:	000248e0 	andeq	r4, r2, r0, ror #17

000230f4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   230f4:	e92d4800 	push	{fp, lr}
   230f8:	e28db004 	add	fp, sp, #4
   230fc:	e24dd010 	sub	sp, sp, #16
   23100:	e50b0008 	str	r0, [fp, #-8]
   23104:	e50b100c 	str	r1, [fp, #-12]
   23108:	e50b2010 	str	r2, [fp, #-16]
   2310c:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   23110:	e51b3008 	ldr	r3, [fp, #-8]
   23114:	e2833034 	add	r3, r3, #52	@ 0x34
   23118:	e3a02010 	mov	r2, #16
   2311c:	e51b100c 	ldr	r1, [fp, #-12]
   23120:	e1a00003 	mov	r0, r3
   23124:	eb0004fc 	bl	2451c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   23128:	e51b3008 	ldr	r3, [fp, #-8]
   2312c:	e3a02000 	mov	r2, #0
   23130:	e5c32043 	strb	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   23134:	e51b3010 	ldr	r3, [fp, #-16]
   23138:	e3530004 	cmp	r3, #4
   2313c:	9a000001 	bls	23148 <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   23140:	e3a03004 	mov	r3, #4
   23144:	e50b3010 	str	r3, [fp, #-16]
	}

	pxTCB->uxPriority = uxPriority;
   23148:	e51b3008 	ldr	r3, [fp, #-8]
   2314c:	e51b2010 	ldr	r2, [fp, #-16]
   23150:	e583202c 	str	r2, [r3, #44]	@ 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   23154:	e51b3008 	ldr	r3, [fp, #-8]
   23158:	e2833004 	add	r3, r3, #4
   2315c:	e1a00003 	mov	r0, r3
   23160:	ebfff717 	bl	20dc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   23164:	e51b3008 	ldr	r3, [fp, #-8]
   23168:	e2833018 	add	r3, r3, #24
   2316c:	e1a00003 	mov	r0, r3
   23170:	ebfff713 	bl	20dc4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   23174:	e51b3008 	ldr	r3, [fp, #-8]
   23178:	e51b2008 	ldr	r2, [fp, #-8]
   2317c:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   23180:	e51b3010 	ldr	r3, [fp, #-16]
   23184:	e2632005 	rsb	r2, r3, #5
   23188:	e51b3008 	ldr	r3, [fp, #-8]
   2318c:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   23190:	e51b3008 	ldr	r3, [fp, #-8]
   23194:	e51b2008 	ldr	r2, [fp, #-8]
   23198:	e5832024 	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   2319c:	e51b3008 	ldr	r3, [fp, #-8]
   231a0:	e3a02000 	mov	r2, #0
   231a4:	e5832044 	str	r2, [r3, #68]	@ 0x44
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   231a8:	e320f000 	nop	{0}
   231ac:	e24bd004 	sub	sp, fp, #4
   231b0:	e8bd8800 	pop	{fp, pc}

000231b4 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   231b4:	e92d4800 	push	{fp, lr}
   231b8:	e28db004 	add	fp, sp, #4
   231bc:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   231c0:	e3a03000 	mov	r3, #0
   231c4:	e50b3008 	str	r3, [fp, #-8]
   231c8:	ea00000b 	b	231fc <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   231cc:	e51b2008 	ldr	r2, [fp, #-8]
   231d0:	e1a03002 	mov	r3, r2
   231d4:	e1a03103 	lsl	r3, r3, #2
   231d8:	e0833002 	add	r3, r3, r2
   231dc:	e1a03103 	lsl	r3, r3, #2
   231e0:	e59f206c 	ldr	r2, [pc, #108]	@ 23254 <prvInitialiseTaskLists+0xa0>
   231e4:	e0833002 	add	r3, r3, r2
   231e8:	e1a00003 	mov	r0, r3
   231ec:	ebfff6da 	bl	20d5c <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   231f0:	e51b3008 	ldr	r3, [fp, #-8]
   231f4:	e2833001 	add	r3, r3, #1
   231f8:	e50b3008 	str	r3, [fp, #-8]
   231fc:	e51b3008 	ldr	r3, [fp, #-8]
   23200:	e3530004 	cmp	r3, #4
   23204:	9afffff0 	bls	231cc <prvInitialiseTaskLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   23208:	e59f0048 	ldr	r0, [pc, #72]	@ 23258 <prvInitialiseTaskLists+0xa4>
   2320c:	ebfff6d2 	bl	20d5c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   23210:	e59f0044 	ldr	r0, [pc, #68]	@ 2325c <prvInitialiseTaskLists+0xa8>
   23214:	ebfff6d0 	bl	20d5c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   23218:	e59f0040 	ldr	r0, [pc, #64]	@ 23260 <prvInitialiseTaskLists+0xac>
   2321c:	ebfff6ce 	bl	20d5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   23220:	e59f003c 	ldr	r0, [pc, #60]	@ 23264 <prvInitialiseTaskLists+0xb0>
   23224:	ebfff6cc 	bl	20d5c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   23228:	e59f0038 	ldr	r0, [pc, #56]	@ 23268 <prvInitialiseTaskLists+0xb4>
   2322c:	ebfff6ca 	bl	20d5c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   23230:	e59f3034 	ldr	r3, [pc, #52]	@ 2326c <prvInitialiseTaskLists+0xb8>
   23234:	e59f201c 	ldr	r2, [pc, #28]	@ 23258 <prvInitialiseTaskLists+0xa4>
   23238:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   2323c:	e59f302c 	ldr	r3, [pc, #44]	@ 23270 <prvInitialiseTaskLists+0xbc>
   23240:	e59f2014 	ldr	r2, [pc, #20]	@ 2325c <prvInitialiseTaskLists+0xa8>
   23244:	e5832000 	str	r2, [r3]
}
   23248:	e320f000 	nop	{0}
   2324c:	e24bd004 	sub	sp, fp, #4
   23250:	e8bd8800 	pop	{fp, pc}
   23254:	000248e0 	andeq	r4, r2, r0, ror #17
   23258:	00024944 	andeq	r4, r2, r4, asr #18
   2325c:	00024958 	andeq	r4, r2, r8, asr r9
   23260:	00024974 	andeq	r4, r2, r4, ror r9
   23264:	00024988 	andeq	r4, r2, r8, lsl #19
   23268:	000249a0 	andeq	r4, r2, r0, lsr #19
   2326c:	0002496c 	andeq	r4, r2, ip, ror #18
   23270:	00024970 	andeq	r4, r2, r0, ror r9

00023274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   23274:	e92d4800 	push	{fp, lr}
   23278:	e28db004 	add	fp, sp, #4
   2327c:	e24dd008 	sub	sp, sp, #8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   23280:	e59f309c 	ldr	r3, [pc, #156]	@ 23324 <prvCheckTasksWaitingTermination+0xb0>
   23284:	e5933000 	ldr	r3, [r3]
   23288:	e3530000 	cmp	r3, #0
   2328c:	0a000021 	beq	23318 <prvCheckTasksWaitingTermination+0xa4>
		{
			vTaskSuspendAll();
   23290:	ebfffd16 	bl	226f0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   23294:	e59f308c 	ldr	r3, [pc, #140]	@ 23328 <prvCheckTasksWaitingTermination+0xb4>
   23298:	e5933000 	ldr	r3, [r3]
   2329c:	e3530000 	cmp	r3, #0
   232a0:	03a03001 	moveq	r3, #1
   232a4:	13a03000 	movne	r3, #0
   232a8:	e6ef3073 	uxtb	r3, r3
   232ac:	e50b3008 	str	r3, [fp, #-8]
			xTaskResumeAll();
   232b0:	ebfffd1a 	bl	22720 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   232b4:	e51b3008 	ldr	r3, [fp, #-8]
   232b8:	e3530000 	cmp	r3, #0
   232bc:	1a000015 	bne	23318 <prvCheckTasksWaitingTermination+0xa4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   232c0:	ebfff49f 	bl	20544 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   232c4:	e59f305c 	ldr	r3, [pc, #92]	@ 23328 <prvCheckTasksWaitingTermination+0xb4>
   232c8:	e593300c 	ldr	r3, [r3, #12]
   232cc:	e593300c 	ldr	r3, [r3, #12]
   232d0:	e50b300c 	str	r3, [fp, #-12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   232d4:	e51b300c 	ldr	r3, [fp, #-12]
   232d8:	e2833004 	add	r3, r3, #4
   232dc:	e1a00003 	mov	r0, r3
   232e0:	ebfff71e 	bl	20f60 <vListRemove>
					--uxCurrentNumberOfTasks;
   232e4:	e59f3040 	ldr	r3, [pc, #64]	@ 2332c <prvCheckTasksWaitingTermination+0xb8>
   232e8:	e5933000 	ldr	r3, [r3]
   232ec:	e2433001 	sub	r3, r3, #1
   232f0:	e59f2034 	ldr	r2, [pc, #52]	@ 2332c <prvCheckTasksWaitingTermination+0xb8>
   232f4:	e5823000 	str	r3, [r2]
					--uxTasksDeleted;
   232f8:	e59f3024 	ldr	r3, [pc, #36]	@ 23324 <prvCheckTasksWaitingTermination+0xb0>
   232fc:	e5933000 	ldr	r3, [r3]
   23300:	e2433001 	sub	r3, r3, #1
   23304:	e59f2018 	ldr	r2, [pc, #24]	@ 23324 <prvCheckTasksWaitingTermination+0xb0>
   23308:	e5823000 	str	r3, [r2]
				}
				taskEXIT_CRITICAL();
   2330c:	ebfff49d 	bl	20588 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   23310:	e51b000c 	ldr	r0, [fp, #-12]
   23314:	eb00005f 	bl	23498 <prvDeleteTCB>
			}
		}
	}
	#endif
}
   23318:	e320f000 	nop	{0}
   2331c:	e24bd004 	sub	sp, fp, #4
   23320:	e8bd8800 	pop	{fp, pc}
   23324:	0002499c 	muleq	r2, ip, r9
   23328:	00024988 	andeq	r4, r2, r8, lsl #19
   2332c:	000249b4 			@ <UNDEFINED> instruction: 0x000249b4

00023330 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   23330:	e92d4800 	push	{fp, lr}
   23334:	e28db004 	add	fp, sp, #4
   23338:	e24dd008 	sub	sp, sp, #8
   2333c:	e50b0008 	str	r0, [fp, #-8]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   23340:	e59f308c 	ldr	r3, [pc, #140]	@ 233d4 <prvAddCurrentTaskToDelayedList+0xa4>
   23344:	e5933000 	ldr	r3, [r3]
   23348:	e51b2008 	ldr	r2, [fp, #-8]
   2334c:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   23350:	e59f3080 	ldr	r3, [pc, #128]	@ 233d8 <prvAddCurrentTaskToDelayedList+0xa8>
   23354:	e5933000 	ldr	r3, [r3]
   23358:	e51b2008 	ldr	r2, [fp, #-8]
   2335c:	e1520003 	cmp	r2, r3
   23360:	2a000008 	bcs	23388 <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   23364:	e59f3070 	ldr	r3, [pc, #112]	@ 233dc <prvAddCurrentTaskToDelayedList+0xac>
   23368:	e5932000 	ldr	r2, [r3]
   2336c:	e59f3060 	ldr	r3, [pc, #96]	@ 233d4 <prvAddCurrentTaskToDelayedList+0xa4>
   23370:	e5933000 	ldr	r3, [r3]
   23374:	e2833004 	add	r3, r3, #4
   23378:	e1a01003 	mov	r1, r3
   2337c:	e1a00002 	mov	r0, r2
   23380:	ebfff6c0 	bl	20e88 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
   23384:	ea00000f 	b	233c8 <prvAddCurrentTaskToDelayedList+0x98>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   23388:	e59f3050 	ldr	r3, [pc, #80]	@ 233e0 <prvAddCurrentTaskToDelayedList+0xb0>
   2338c:	e5932000 	ldr	r2, [r3]
   23390:	e59f303c 	ldr	r3, [pc, #60]	@ 233d4 <prvAddCurrentTaskToDelayedList+0xa4>
   23394:	e5933000 	ldr	r3, [r3]
   23398:	e2833004 	add	r3, r3, #4
   2339c:	e1a01003 	mov	r1, r3
   233a0:	e1a00002 	mov	r0, r2
   233a4:	ebfff6b7 	bl	20e88 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
   233a8:	e59f3034 	ldr	r3, [pc, #52]	@ 233e4 <prvAddCurrentTaskToDelayedList+0xb4>
   233ac:	e5933000 	ldr	r3, [r3]
   233b0:	e51b2008 	ldr	r2, [fp, #-8]
   233b4:	e1520003 	cmp	r2, r3
   233b8:	2a000002 	bcs	233c8 <prvAddCurrentTaskToDelayedList+0x98>
			xNextTaskUnblockTime = xTimeToWake;
   233bc:	e59f2020 	ldr	r2, [pc, #32]	@ 233e4 <prvAddCurrentTaskToDelayedList+0xb4>
   233c0:	e51b3008 	ldr	r3, [fp, #-8]
   233c4:	e5823000 	str	r3, [r2]
}
   233c8:	e320f000 	nop	{0}
   233cc:	e24bd004 	sub	sp, fp, #4
   233d0:	e8bd8800 	pop	{fp, pc}
   233d4:	000248dc 	ldrdeq	r4, [r2], -ip
   233d8:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8
   233dc:	00024970 	andeq	r4, r2, r0, ror r9
   233e0:	0002496c 	andeq	r4, r2, ip, ror #18
   233e4:	0002484c 	andeq	r4, r2, ip, asr #16

000233e8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   233e8:	e92d4800 	push	{fp, lr}
   233ec:	e28db004 	add	fp, sp, #4
   233f0:	e24dd010 	sub	sp, sp, #16
   233f4:	e1a03000 	mov	r3, r0
   233f8:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
   233fc:	e14b30be 	strh	r3, [fp, #-14]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   23400:	e3a00048 	mov	r0, #72	@ 0x48
   23404:	eb00028f 	bl	23e48 <pvPortMalloc>
   23408:	e50b0008 	str	r0, [fp, #-8]

	if( pxNewTCB != NULL )
   2340c:	e51b3008 	ldr	r3, [fp, #-8]
   23410:	e3530000 	cmp	r3, #0
   23414:	0a00001b 	beq	23488 <prvAllocateTCBAndStack+0xa0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   23418:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2341c:	e3530000 	cmp	r3, #0
   23420:	1a000005 	bne	2343c <prvAllocateTCBAndStack+0x54>
   23424:	e15b30be 	ldrh	r3, [fp, #-14]
   23428:	e1a03103 	lsl	r3, r3, #2
   2342c:	e1a00003 	mov	r0, r3
   23430:	eb000284 	bl	23e48 <pvPortMalloc>
   23434:	e1a03000 	mov	r3, r0
   23438:	ea000000 	b	23440 <prvAllocateTCBAndStack+0x58>
   2343c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   23440:	e51b2008 	ldr	r2, [fp, #-8]
   23444:	e5823030 	str	r3, [r2, #48]	@ 0x30

		if( pxNewTCB->pxStack == NULL )
   23448:	e51b3008 	ldr	r3, [fp, #-8]
   2344c:	e5933030 	ldr	r3, [r3, #48]	@ 0x30
   23450:	e3530000 	cmp	r3, #0
   23454:	1a000004 	bne	2346c <prvAllocateTCBAndStack+0x84>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   23458:	e51b0008 	ldr	r0, [fp, #-8]
   2345c:	eb0002eb 	bl	24010 <vPortFree>
			pxNewTCB = NULL;
   23460:	e3a03000 	mov	r3, #0
   23464:	e50b3008 	str	r3, [fp, #-8]
   23468:	ea000006 	b	23488 <prvAllocateTCBAndStack+0xa0>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   2346c:	e51b3008 	ldr	r3, [fp, #-8]
   23470:	e5930030 	ldr	r0, [r3, #48]	@ 0x30
   23474:	e15b30be 	ldrh	r3, [fp, #-14]
   23478:	e1a03103 	lsl	r3, r3, #2
   2347c:	e1a02003 	mov	r2, r3
   23480:	e3a010a5 	mov	r1, #165	@ 0xa5
   23484:	eb000458 	bl	245ec <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   23488:	e51b3008 	ldr	r3, [fp, #-8]
}
   2348c:	e1a00003 	mov	r0, r3
   23490:	e24bd004 	sub	sp, fp, #4
   23494:	e8bd8800 	pop	{fp, pc}

00023498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   23498:	e92d4800 	push	{fp, lr}
   2349c:	e28db004 	add	fp, sp, #4
   234a0:	e24dd008 	sub	sp, sp, #8
   234a4:	e50b0008 	str	r0, [fp, #-8]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   234a8:	e51b3008 	ldr	r3, [fp, #-8]
   234ac:	e5933030 	ldr	r3, [r3, #48]	@ 0x30
   234b0:	e1a00003 	mov	r0, r3
   234b4:	eb0002d5 	bl	24010 <vPortFree>
		vPortFree( pxTCB );
   234b8:	e51b0008 	ldr	r0, [fp, #-8]
   234bc:	eb0002d3 	bl	24010 <vPortFree>
	}
   234c0:	e320f000 	nop	{0}
   234c4:	e24bd004 	sub	sp, fp, #4
   234c8:	e8bd8800 	pop	{fp, pc}

000234cc <handleRange>:

// Remember which interrupts have been enabled:
static unsigned long enabled[3];

static void handleRange (unsigned long pending, const unsigned int base)
{
   234cc:	e92d4800 	push	{fp, lr}
   234d0:	e28db004 	add	fp, sp, #4
   234d4:	e24dd010 	sub	sp, sp, #16
   234d8:	e50b0010 	str	r0, [fp, #-16]
   234dc:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
	while (pending)
   234e0:	ea00001e 	b	23560 <handleRange+0x94>
	{
		// Get index of first set bit:
		unsigned int bit = 31 - __builtin_clz(pending);
   234e4:	e51b3010 	ldr	r3, [fp, #-16]
   234e8:	e16f3f13 	clz	r3, r3
   234ec:	e263301f 	rsb	r3, r3, #31
   234f0:	e50b3008 	str	r3, [fp, #-8]

		// Map to IRQ number:
		unsigned int irq = base + bit;
   234f4:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   234f8:	e51b3008 	ldr	r3, [fp, #-8]
   234fc:	e0823003 	add	r3, r2, r3
   23500:	e50b300c 	str	r3, [fp, #-12]

		// Call interrupt handler, if enabled:
		if (g_VectorTable[irq].pfnHandler)
   23504:	e59f2070 	ldr	r2, [pc, #112]	@ 2357c <handleRange+0xb0>
   23508:	e51b300c 	ldr	r3, [fp, #-12]
   2350c:	e7923183 	ldr	r3, [r2, r3, lsl #3]
   23510:	e3530000 	cmp	r3, #0
   23514:	0a00000a 	beq	23544 <handleRange+0x78>
			g_VectorTable[irq].pfnHandler(irq, g_VectorTable[irq].pParam);
   23518:	e59f205c 	ldr	r2, [pc, #92]	@ 2357c <handleRange+0xb0>
   2351c:	e51b300c 	ldr	r3, [fp, #-12]
   23520:	e7922183 	ldr	r2, [r2, r3, lsl #3]
   23524:	e59f1050 	ldr	r1, [pc, #80]	@ 2357c <handleRange+0xb0>
   23528:	e51b300c 	ldr	r3, [fp, #-12]
   2352c:	e1a03183 	lsl	r3, r3, #3
   23530:	e0813003 	add	r3, r1, r3
   23534:	e5933004 	ldr	r3, [r3, #4]
   23538:	e1a01003 	mov	r1, r3
   2353c:	e51b000c 	ldr	r0, [fp, #-12]
   23540:	e12fff32 	blx	r2

		// Clear bit in bitfield:
		pending &= ~(1UL << bit);
   23544:	e3a02001 	mov	r2, #1
   23548:	e51b3008 	ldr	r3, [fp, #-8]
   2354c:	e1a03312 	lsl	r3, r2, r3
   23550:	e1e03003 	mvn	r3, r3
   23554:	e51b2010 	ldr	r2, [fp, #-16]
   23558:	e0033002 	and	r3, r3, r2
   2355c:	e50b3010 	str	r3, [fp, #-16]
	while (pending)
   23560:	e51b3010 	ldr	r3, [fp, #-16]
   23564:	e3530000 	cmp	r3, #0
   23568:	1affffdd 	bne	234e4 <handleRange+0x18>
	}
}
   2356c:	e320f000 	nop	{0}
   23570:	e320f000 	nop	{0}
   23574:	e24bd004 	sub	sp, fp, #4
   23578:	e8bd8800 	pop	{fp, pc}
   2357c:	000249dc 	ldrdeq	r4, [r2], -ip

00023580 <irqHandler>:
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler (void)
{
   23580:	e92d4830 	push	{r4, r5, fp, lr}
   23584:	e28db00c 	add	fp, sp, #12
	register unsigned long ulMaskedStatus = pRegs->IRQBasic;
   23588:	e59f3088 	ldr	r3, [pc, #136]	@ 23618 <irqHandler+0x98>
   2358c:	e5934000 	ldr	r4, [r3]

	// Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0):
	if (ulMaskedStatus & (1UL << 8))
   23590:	e2043c01 	and	r3, r4, #256	@ 0x100
   23594:	e3530000 	cmp	r3, #0
   23598:	0a000007 	beq	235bc <irqHandler+0x3c>
		handleRange(pRegs->Pending1 & enabled[0], 0);
   2359c:	e59f3074 	ldr	r3, [pc, #116]	@ 23618 <irqHandler+0x98>
   235a0:	e5932004 	ldr	r2, [r3, #4]
   235a4:	e59f3070 	ldr	r3, [pc, #112]	@ 2361c <irqHandler+0x9c>
   235a8:	e5933000 	ldr	r3, [r3]
   235ac:	e0033002 	and	r3, r3, r2
   235b0:	e3a01000 	mov	r1, #0
   235b4:	e1a00003 	mov	r0, r3
   235b8:	ebffffc3 	bl	234cc <handleRange>

	// Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32):
	if (ulMaskedStatus & (1UL << 9))
   235bc:	e2043c02 	and	r3, r4, #512	@ 0x200
   235c0:	e3530000 	cmp	r3, #0
   235c4:	0a000007 	beq	235e8 <irqHandler+0x68>
		handleRange(pRegs->Pending2 & enabled[1], 32);
   235c8:	e59f3048 	ldr	r3, [pc, #72]	@ 23618 <irqHandler+0x98>
   235cc:	e5932008 	ldr	r2, [r3, #8]
   235d0:	e59f3044 	ldr	r3, [pc, #68]	@ 2361c <irqHandler+0x9c>
   235d4:	e5933004 	ldr	r3, [r3, #4]
   235d8:	e0033002 	and	r3, r3, r2
   235dc:	e3a01020 	mov	r1, #32
   235e0:	e1a00003 	mov	r0, r3
   235e4:	ebffffb8 	bl	234cc <handleRange>

	// Bits 7 through 0 in IRQBasic represent interrupts 64-71:
	if (ulMaskedStatus & 0xFF)
   235e8:	e6ef3074 	uxtb	r3, r4
   235ec:	e3530000 	cmp	r3, #0
   235f0:	0a000006 	beq	23610 <irqHandler+0x90>
		handleRange(ulMaskedStatus & 0xFF & enabled[2], 64);
   235f4:	e59f3020 	ldr	r3, [pc, #32]	@ 2361c <irqHandler+0x9c>
   235f8:	e5933008 	ldr	r3, [r3, #8]
   235fc:	e0033004 	and	r3, r3, r4
   23600:	e6ef3073 	uxtb	r3, r3
   23604:	e3a01040 	mov	r1, #64	@ 0x40
   23608:	e1a00003 	mov	r0, r3
   2360c:	ebffffae 	bl	234cc <handleRange>
}
   23610:	e320f000 	nop	{0}
   23614:	e8bd8830 	pop	{r4, r5, fp, pc}
   23618:	2000b200 	andcs	fp, r0, r0, lsl #4
   2361c:	00024c1c 	andeq	r4, r2, ip, lsl ip

00023620 <irqUnblock>:

void irqUnblock (void)
{
   23620:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23624:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsie i" ::: "memory");
   23628:	f1080080 	cpsie	i
}
   2362c:	e320f000 	nop	{0}
   23630:	e28bd000 	add	sp, fp, #0
   23634:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23638:	e12fff1e 	bx	lr

0002363c <irqBlock>:

void irqBlock (void)
{
   2363c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23640:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsid i" ::: "memory");
   23644:	f10c0080 	cpsid	i
}
   23648:	e320f000 	nop	{0}
   2364c:	e28bd000 	add	sp, fp, #0
   23650:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23654:	e12fff1e 	bx	lr

00023658 <irqRegister>:

void irqRegister (const unsigned int irq, FN_INTERRUPT_HANDLER pfnHandler, void *pParam)
{
   23658:	e92d4800 	push	{fp, lr}
   2365c:	e28db004 	add	fp, sp, #4
   23660:	e24dd010 	sub	sp, sp, #16
   23664:	e50b0008 	str	r0, [fp, #-8]
   23668:	e50b100c 	str	r1, [fp, #-12]
   2366c:	e50b2010 	str	r2, [fp, #-16]
	if (irq < BCM2835_INTC_TOTAL_IRQ) {
   23670:	e51b3008 	ldr	r3, [fp, #-8]
   23674:	e3530047 	cmp	r3, #71	@ 0x47
   23678:	8a00000b 	bhi	236ac <irqRegister+0x54>
		irqBlock();
   2367c:	ebffffee 	bl	2363c <irqBlock>
		g_VectorTable[irq].pfnHandler = pfnHandler;
   23680:	e59f1030 	ldr	r1, [pc, #48]	@ 236b8 <irqRegister+0x60>
   23684:	e51b3008 	ldr	r3, [fp, #-8]
   23688:	e51b200c 	ldr	r2, [fp, #-12]
   2368c:	e7812183 	str	r2, [r1, r3, lsl #3]
		g_VectorTable[irq].pParam     = pParam;
   23690:	e59f2020 	ldr	r2, [pc, #32]	@ 236b8 <irqRegister+0x60>
   23694:	e51b3008 	ldr	r3, [fp, #-8]
   23698:	e1a03183 	lsl	r3, r3, #3
   2369c:	e0823003 	add	r3, r2, r3
   236a0:	e51b2010 	ldr	r2, [fp, #-16]
   236a4:	e5832004 	str	r2, [r3, #4]
		irqUnblock();
   236a8:	ebffffdc 	bl	23620 <irqUnblock>
	}
}
   236ac:	e320f000 	nop	{0}
   236b0:	e24bd004 	sub	sp, fp, #4
   236b4:	e8bd8800 	pop	{fp, pc}
   236b8:	000249dc 	ldrdeq	r4, [r2], -ip

000236bc <irqEnable>:

void irqEnable (const unsigned int irq)
{
   236bc:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   236c0:	e28db000 	add	fp, sp, #0
   236c4:	e24dd014 	sub	sp, sp, #20
   236c8:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   236cc:	e51b3010 	ldr	r3, [fp, #-16]
   236d0:	e203301f 	and	r3, r3, #31
   236d4:	e3a02001 	mov	r2, #1
   236d8:	e1a03312 	lsl	r3, r2, r3
   236dc:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   236e0:	e51b3010 	ldr	r3, [fp, #-16]
   236e4:	e353001f 	cmp	r3, #31
   236e8:	8a000009 	bhi	23714 <irqEnable+0x58>
		pRegs->Enable1 = mask;
   236ec:	e59f2094 	ldr	r2, [pc, #148]	@ 23788 <irqEnable+0xcc>
   236f0:	e51b3008 	ldr	r3, [fp, #-8]
   236f4:	e5823010 	str	r3, [r2, #16]
		enabled[0] |= mask;
   236f8:	e59f308c 	ldr	r3, [pc, #140]	@ 2378c <irqEnable+0xd0>
   236fc:	e5932000 	ldr	r2, [r3]
   23700:	e51b3008 	ldr	r3, [fp, #-8]
   23704:	e1823003 	orr	r3, r2, r3
   23708:	e59f207c 	ldr	r2, [pc, #124]	@ 2378c <irqEnable+0xd0>
   2370c:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->EnableBasic = mask;
		enabled[2] |= mask;
	}
}
   23710:	ea000018 	b	23778 <irqEnable+0xbc>
	else if (irq <= 63) {
   23714:	e51b3010 	ldr	r3, [fp, #-16]
   23718:	e353003f 	cmp	r3, #63	@ 0x3f
   2371c:	8a000009 	bhi	23748 <irqEnable+0x8c>
		pRegs->Enable2 = mask;
   23720:	e59f2060 	ldr	r2, [pc, #96]	@ 23788 <irqEnable+0xcc>
   23724:	e51b3008 	ldr	r3, [fp, #-8]
   23728:	e5823014 	str	r3, [r2, #20]
		enabled[1] |= mask;
   2372c:	e59f3058 	ldr	r3, [pc, #88]	@ 2378c <irqEnable+0xd0>
   23730:	e5932004 	ldr	r2, [r3, #4]
   23734:	e51b3008 	ldr	r3, [fp, #-8]
   23738:	e1823003 	orr	r3, r2, r3
   2373c:	e59f2048 	ldr	r2, [pc, #72]	@ 2378c <irqEnable+0xd0>
   23740:	e5823004 	str	r3, [r2, #4]
}
   23744:	ea00000b 	b	23778 <irqEnable+0xbc>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   23748:	e51b3010 	ldr	r3, [fp, #-16]
   2374c:	e3530047 	cmp	r3, #71	@ 0x47
   23750:	8a000008 	bhi	23778 <irqEnable+0xbc>
		pRegs->EnableBasic = mask;
   23754:	e59f202c 	ldr	r2, [pc, #44]	@ 23788 <irqEnable+0xcc>
   23758:	e51b3008 	ldr	r3, [fp, #-8]
   2375c:	e5823018 	str	r3, [r2, #24]
		enabled[2] |= mask;
   23760:	e59f3024 	ldr	r3, [pc, #36]	@ 2378c <irqEnable+0xd0>
   23764:	e5932008 	ldr	r2, [r3, #8]
   23768:	e51b3008 	ldr	r3, [fp, #-8]
   2376c:	e1823003 	orr	r3, r2, r3
   23770:	e59f2014 	ldr	r2, [pc, #20]	@ 2378c <irqEnable+0xd0>
   23774:	e5823008 	str	r3, [r2, #8]
}
   23778:	e320f000 	nop	{0}
   2377c:	e28bd000 	add	sp, fp, #0
   23780:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23784:	e12fff1e 	bx	lr
   23788:	2000b200 	andcs	fp, r0, r0, lsl #4
   2378c:	00024c1c 	andeq	r4, r2, ip, lsl ip

00023790 <irqDisable>:

void irqDisable (const unsigned int irq)
{
   23790:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23794:	e28db000 	add	fp, sp, #0
   23798:	e24dd014 	sub	sp, sp, #20
   2379c:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   237a0:	e51b3010 	ldr	r3, [fp, #-16]
   237a4:	e203301f 	and	r3, r3, #31
   237a8:	e3a02001 	mov	r2, #1
   237ac:	e1a03312 	lsl	r3, r2, r3
   237b0:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   237b4:	e51b3010 	ldr	r3, [fp, #-16]
   237b8:	e353001f 	cmp	r3, #31
   237bc:	8a00000a 	bhi	237ec <irqDisable+0x5c>
		pRegs->Disable1 = mask;
   237c0:	e59f20a0 	ldr	r2, [pc, #160]	@ 23868 <irqDisable+0xd8>
   237c4:	e51b3008 	ldr	r3, [fp, #-8]
   237c8:	e582301c 	str	r3, [r2, #28]
		enabled[0] &= ~mask;
   237cc:	e59f3098 	ldr	r3, [pc, #152]	@ 2386c <irqDisable+0xdc>
   237d0:	e5932000 	ldr	r2, [r3]
   237d4:	e51b3008 	ldr	r3, [fp, #-8]
   237d8:	e1e03003 	mvn	r3, r3
   237dc:	e0033002 	and	r3, r3, r2
   237e0:	e59f2084 	ldr	r2, [pc, #132]	@ 2386c <irqDisable+0xdc>
   237e4:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->DisableBasic = mask;
		enabled[2] &= ~mask;
	}
}
   237e8:	ea00001a 	b	23858 <irqDisable+0xc8>
	else if (irq <= 63) {
   237ec:	e51b3010 	ldr	r3, [fp, #-16]
   237f0:	e353003f 	cmp	r3, #63	@ 0x3f
   237f4:	8a00000a 	bhi	23824 <irqDisable+0x94>
		pRegs->Disable2 = mask;
   237f8:	e59f2068 	ldr	r2, [pc, #104]	@ 23868 <irqDisable+0xd8>
   237fc:	e51b3008 	ldr	r3, [fp, #-8]
   23800:	e5823020 	str	r3, [r2, #32]
		enabled[1] &= ~mask;
   23804:	e59f3060 	ldr	r3, [pc, #96]	@ 2386c <irqDisable+0xdc>
   23808:	e5932004 	ldr	r2, [r3, #4]
   2380c:	e51b3008 	ldr	r3, [fp, #-8]
   23810:	e1e03003 	mvn	r3, r3
   23814:	e0033002 	and	r3, r3, r2
   23818:	e59f204c 	ldr	r2, [pc, #76]	@ 2386c <irqDisable+0xdc>
   2381c:	e5823004 	str	r3, [r2, #4]
}
   23820:	ea00000c 	b	23858 <irqDisable+0xc8>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   23824:	e51b3010 	ldr	r3, [fp, #-16]
   23828:	e3530047 	cmp	r3, #71	@ 0x47
   2382c:	8a000009 	bhi	23858 <irqDisable+0xc8>
		pRegs->DisableBasic = mask;
   23830:	e59f2030 	ldr	r2, [pc, #48]	@ 23868 <irqDisable+0xd8>
   23834:	e51b3008 	ldr	r3, [fp, #-8]
   23838:	e5823024 	str	r3, [r2, #36]	@ 0x24
		enabled[2] &= ~mask;
   2383c:	e59f3028 	ldr	r3, [pc, #40]	@ 2386c <irqDisable+0xdc>
   23840:	e5932008 	ldr	r2, [r3, #8]
   23844:	e51b3008 	ldr	r3, [fp, #-8]
   23848:	e1e03003 	mvn	r3, r3
   2384c:	e0033002 	and	r3, r3, r2
   23850:	e59f2014 	ldr	r2, [pc, #20]	@ 2386c <irqDisable+0xdc>
   23854:	e5823008 	str	r3, [r2, #8]
}
   23858:	e320f000 	nop	{0}
   2385c:	e28bd000 	add	sp, fp, #0
   23860:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23864:	e12fff1e 	bx	lr
   23868:	2000b200 	andcs	fp, r0, r0, lsl #4
   2386c:	00024c1c 	andeq	r4, r2, ip, lsl ip

00023870 <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   23870:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23874:	e28db000 	add	fp, sp, #0
   23878:	e24dd01c 	sub	sp, sp, #28
   2387c:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   23880:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4

	int offset = pinNum / 10;
   23884:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23888:	e59f20b4 	ldr	r2, [pc, #180]	@ 23944 <SetGpioFunction+0xd4>
   2388c:	e0832392 	umull	r2, r3, r2, r3
   23890:	e1a031a3 	lsr	r3, r3, #3
   23894:	e50b3008 	str	r3, [fp, #-8]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   23898:	e59f20a8 	ldr	r2, [pc, #168]	@ 23948 <SetGpioFunction+0xd8>
   2389c:	e51b3008 	ldr	r3, [fp, #-8]
   238a0:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   238a4:	e50b300c 	str	r3, [fp, #-12]

	int item = pinNum % 10;
   238a8:	e51b1018 	ldr	r1, [fp, #-24]	@ 0xffffffe8
   238ac:	e59f3090 	ldr	r3, [pc, #144]	@ 23944 <SetGpioFunction+0xd4>
   238b0:	e0832193 	umull	r2, r3, r3, r1
   238b4:	e1a021a3 	lsr	r2, r3, #3
   238b8:	e1a03002 	mov	r3, r2
   238bc:	e1a03103 	lsl	r3, r3, #2
   238c0:	e0833002 	add	r3, r3, r2
   238c4:	e1a03083 	lsl	r3, r3, #1
   238c8:	e0412003 	sub	r2, r1, r3
   238cc:	e50b2010 	str	r2, [fp, #-16]
	val &= ~(0x7 << (item * 3));
   238d0:	e51b2010 	ldr	r2, [fp, #-16]
   238d4:	e1a03002 	mov	r3, r2
   238d8:	e1a03083 	lsl	r3, r3, #1
   238dc:	e0833002 	add	r3, r3, r2
   238e0:	e3a02007 	mov	r2, #7
   238e4:	e1a03312 	lsl	r3, r2, r3
   238e8:	e1e03003 	mvn	r3, r3
   238ec:	e1a02003 	mov	r2, r3
   238f0:	e51b300c 	ldr	r3, [fp, #-12]
   238f4:	e0033002 	and	r3, r3, r2
   238f8:	e50b300c 	str	r3, [fp, #-12]
	val |= ((funcNum & 0x7) << (item * 3));
   238fc:	e51b301c 	ldr	r3, [fp, #-28]	@ 0xffffffe4
   23900:	e2031007 	and	r1, r3, #7
   23904:	e51b2010 	ldr	r2, [fp, #-16]
   23908:	e1a03002 	mov	r3, r2
   2390c:	e1a03083 	lsl	r3, r3, #1
   23910:	e0833002 	add	r3, r3, r2
   23914:	e1a03311 	lsl	r3, r1, r3
   23918:	e51b200c 	ldr	r2, [fp, #-12]
   2391c:	e1823003 	orr	r3, r2, r3
   23920:	e50b300c 	str	r3, [fp, #-12]
	pRegs->GPFSEL[offset] = val;
   23924:	e59f101c 	ldr	r1, [pc, #28]	@ 23948 <SetGpioFunction+0xd8>
   23928:	e51b3008 	ldr	r3, [fp, #-8]
   2392c:	e51b200c 	ldr	r2, [fp, #-12]
   23930:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   23934:	e320f000 	nop	{0}
   23938:	e28bd000 	add	sp, fp, #0
   2393c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23940:	e12fff1e 	bx	lr
   23944:	cccccccd 	stclgt	12, cr12, [ip], {205}	@ 0xcd
   23948:	20200000 	eorcs	r0, r0, r0

0002394c <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   2394c:	e92d4800 	push	{fp, lr}
   23950:	e28db004 	add	fp, sp, #4
   23954:	e24dd008 	sub	sp, sp, #8
   23958:	e50b0008 	str	r0, [fp, #-8]
   2395c:	e1a03001 	mov	r3, r1
   23960:	e54b3009 	strb	r3, [fp, #-9]
	SetGpioFunction(pinNum,dir);
   23964:	e55b3009 	ldrb	r3, [fp, #-9]
   23968:	e1a01003 	mov	r1, r3
   2396c:	e51b0008 	ldr	r0, [fp, #-8]
   23970:	ebffffbe 	bl	23870 <SetGpioFunction>
}
   23974:	e320f000 	nop	{0}
   23978:	e24bd004 	sub	sp, fp, #4
   2397c:	e8bd8800 	pop	{fp, pc}

00023980 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   23980:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23984:	e28db000 	add	fp, sp, #0
   23988:	e24dd014 	sub	sp, sp, #20
   2398c:	e50b0010 	str	r0, [fp, #-16]
   23990:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
	unsigned long offset=pinNum/32;
   23994:	e51b3010 	ldr	r3, [fp, #-16]
   23998:	e1a032a3 	lsr	r3, r3, #5
   2399c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask=(1<<(pinNum%32));
   239a0:	e51b3010 	ldr	r3, [fp, #-16]
   239a4:	e203301f 	and	r3, r3, #31
   239a8:	e3a02001 	mov	r2, #1
   239ac:	e1a03312 	lsl	r3, r2, r3
   239b0:	e50b300c 	str	r3, [fp, #-12]

	if(pinVal) {
   239b4:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   239b8:	e3530000 	cmp	r3, #0
   239bc:	0a00000e 	beq	239fc <SetGpio+0x7c>
		pRegs->GPSET[offset]|=mask;
   239c0:	e59f206c 	ldr	r2, [pc, #108]	@ 23a34 <SetGpio+0xb4>
   239c4:	e51b3008 	ldr	r3, [fp, #-8]
   239c8:	e2833006 	add	r3, r3, #6
   239cc:	e1a03103 	lsl	r3, r3, #2
   239d0:	e0823003 	add	r3, r2, r3
   239d4:	e5932004 	ldr	r2, [r3, #4]
   239d8:	e59f1054 	ldr	r1, [pc, #84]	@ 23a34 <SetGpio+0xb4>
   239dc:	e51b300c 	ldr	r3, [fp, #-12]
   239e0:	e1822003 	orr	r2, r2, r3
   239e4:	e51b3008 	ldr	r3, [fp, #-8]
   239e8:	e2833006 	add	r3, r3, #6
   239ec:	e1a03103 	lsl	r3, r3, #2
   239f0:	e0813003 	add	r3, r1, r3
   239f4:	e5832004 	str	r2, [r3, #4]
	} else {
		pRegs->GPCLR[offset]|=mask;
	}
}
   239f8:	ea000009 	b	23a24 <SetGpio+0xa4>
		pRegs->GPCLR[offset]|=mask;
   239fc:	e59f2030 	ldr	r2, [pc, #48]	@ 23a34 <SetGpio+0xb4>
   23a00:	e51b3008 	ldr	r3, [fp, #-8]
   23a04:	e283300a 	add	r3, r3, #10
   23a08:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23a0c:	e59f1020 	ldr	r1, [pc, #32]	@ 23a34 <SetGpio+0xb4>
   23a10:	e51b300c 	ldr	r3, [fp, #-12]
   23a14:	e1822003 	orr	r2, r2, r3
   23a18:	e51b3008 	ldr	r3, [fp, #-8]
   23a1c:	e283300a 	add	r3, r3, #10
   23a20:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   23a24:	e320f000 	nop	{0}
   23a28:	e28bd000 	add	sp, fp, #0
   23a2c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23a30:	e12fff1e 	bx	lr
   23a34:	20200000 	eorcs	r0, r0, r0

00023a38 <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   23a38:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23a3c:	e28db000 	add	fp, sp, #0
   23a40:	e24dd00c 	sub	sp, sp, #12
   23a44:	e50b0008 	str	r0, [fp, #-8]
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   23a48:	e59f2034 	ldr	r2, [pc, #52]	@ 23a84 <ReadGpio+0x4c>
   23a4c:	e51b3008 	ldr	r3, [fp, #-8]
   23a50:	e1a032a3 	lsr	r3, r3, #5
   23a54:	e283300c 	add	r3, r3, #12
   23a58:	e1a03103 	lsl	r3, r3, #2
   23a5c:	e0823003 	add	r3, r2, r3
   23a60:	e5932004 	ldr	r2, [r3, #4]
   23a64:	e51b3008 	ldr	r3, [fp, #-8]
   23a68:	e203301f 	and	r3, r3, #31
   23a6c:	e1a03332 	lsr	r3, r2, r3
   23a70:	e2033001 	and	r3, r3, #1
}
   23a74:	e1a00003 	mov	r0, r3
   23a78:	e28bd000 	add	sp, fp, #0
   23a7c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23a80:	e12fff1e 	bx	lr
   23a84:	20200000 	eorcs	r0, r0, r0

00023a88 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   23a88:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23a8c:	e28db000 	add	fp, sp, #0
   23a90:	e24dd014 	sub	sp, sp, #20
   23a94:	e50b0010 	str	r0, [fp, #-16]
   23a98:	e1a03001 	mov	r3, r1
   23a9c:	e54b3011 	strb	r3, [fp, #-17]	@ 0xffffffef
	unsigned long mask=(1<<pinNum);
   23aa0:	e3a02001 	mov	r2, #1
   23aa4:	e51b3010 	ldr	r3, [fp, #-16]
   23aa8:	e1a03312 	lsl	r3, r2, r3
   23aac:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23ab0:	e51b3010 	ldr	r3, [fp, #-16]
   23ab4:	e1a032a3 	lsr	r3, r3, #5
   23ab8:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   23abc:	e55b3011 	ldrb	r3, [fp, #-17]	@ 0xffffffef
   23ac0:	e3530006 	cmp	r3, #6
   23ac4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   23ac8:	ea000055 	b	23c24 <EnableGpioDetect+0x19c>
   23acc:	00023c20 	andeq	r3, r2, r0, lsr #24
   23ad0:	00023ae8 	andeq	r3, r2, r8, ror #21
   23ad4:	00023b24 	andeq	r3, r2, r4, lsr #22
   23ad8:	00023b50 	andeq	r3, r2, r0, asr fp
   23adc:	00023b8c 	andeq	r3, r2, ip, lsl #23
   23ae0:	00023bb8 			@ <UNDEFINED> instruction: 0x00023bb8
   23ae4:	00023bf4 	strdeq	r3, [r2], -r4
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   23ae8:	e59f2144 	ldr	r2, [pc, #324]	@ 23c34 <EnableGpioDetect+0x1ac>
   23aec:	e51b300c 	ldr	r3, [fp, #-12]
   23af0:	e2833012 	add	r3, r3, #18
   23af4:	e1a03103 	lsl	r3, r3, #2
   23af8:	e0823003 	add	r3, r2, r3
   23afc:	e5932004 	ldr	r2, [r3, #4]
   23b00:	e59f112c 	ldr	r1, [pc, #300]	@ 23c34 <EnableGpioDetect+0x1ac>
   23b04:	e51b3008 	ldr	r3, [fp, #-8]
   23b08:	e1822003 	orr	r2, r2, r3
   23b0c:	e51b300c 	ldr	r3, [fp, #-12]
   23b10:	e2833012 	add	r3, r3, #18
   23b14:	e1a03103 	lsl	r3, r3, #2
   23b18:	e0813003 	add	r3, r1, r3
   23b1c:	e5832004 	str	r2, [r3, #4]
		break;
   23b20:	ea00003f 	b	23c24 <EnableGpioDetect+0x19c>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   23b24:	e59f2108 	ldr	r2, [pc, #264]	@ 23c34 <EnableGpioDetect+0x1ac>
   23b28:	e51b300c 	ldr	r3, [fp, #-12]
   23b2c:	e2833016 	add	r3, r3, #22
   23b30:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b34:	e59f10f8 	ldr	r1, [pc, #248]	@ 23c34 <EnableGpioDetect+0x1ac>
   23b38:	e51b3008 	ldr	r3, [fp, #-8]
   23b3c:	e1822003 	orr	r2, r2, r3
   23b40:	e51b300c 	ldr	r3, [fp, #-12]
   23b44:	e2833016 	add	r3, r3, #22
   23b48:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23b4c:	ea000034 	b	23c24 <EnableGpioDetect+0x19c>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   23b50:	e59f20dc 	ldr	r2, [pc, #220]	@ 23c34 <EnableGpioDetect+0x1ac>
   23b54:	e51b300c 	ldr	r3, [fp, #-12]
   23b58:	e2833018 	add	r3, r3, #24
   23b5c:	e1a03103 	lsl	r3, r3, #2
   23b60:	e0823003 	add	r3, r2, r3
   23b64:	e5932004 	ldr	r2, [r3, #4]
   23b68:	e59f10c4 	ldr	r1, [pc, #196]	@ 23c34 <EnableGpioDetect+0x1ac>
   23b6c:	e51b3008 	ldr	r3, [fp, #-8]
   23b70:	e1822003 	orr	r2, r2, r3
   23b74:	e51b300c 	ldr	r3, [fp, #-12]
   23b78:	e2833018 	add	r3, r3, #24
   23b7c:	e1a03103 	lsl	r3, r3, #2
   23b80:	e0813003 	add	r3, r1, r3
   23b84:	e5832004 	str	r2, [r3, #4]
		break;
   23b88:	ea000025 	b	23c24 <EnableGpioDetect+0x19c>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   23b8c:	e59f20a0 	ldr	r2, [pc, #160]	@ 23c34 <EnableGpioDetect+0x1ac>
   23b90:	e51b300c 	ldr	r3, [fp, #-12]
   23b94:	e283301c 	add	r3, r3, #28
   23b98:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b9c:	e59f1090 	ldr	r1, [pc, #144]	@ 23c34 <EnableGpioDetect+0x1ac>
   23ba0:	e51b3008 	ldr	r3, [fp, #-8]
   23ba4:	e1822003 	orr	r2, r2, r3
   23ba8:	e51b300c 	ldr	r3, [fp, #-12]
   23bac:	e283301c 	add	r3, r3, #28
   23bb0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23bb4:	ea00001a 	b	23c24 <EnableGpioDetect+0x19c>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   23bb8:	e59f2074 	ldr	r2, [pc, #116]	@ 23c34 <EnableGpioDetect+0x1ac>
   23bbc:	e51b300c 	ldr	r3, [fp, #-12]
   23bc0:	e283301e 	add	r3, r3, #30
   23bc4:	e1a03103 	lsl	r3, r3, #2
   23bc8:	e0823003 	add	r3, r2, r3
   23bcc:	e5932004 	ldr	r2, [r3, #4]
   23bd0:	e59f105c 	ldr	r1, [pc, #92]	@ 23c34 <EnableGpioDetect+0x1ac>
   23bd4:	e51b3008 	ldr	r3, [fp, #-8]
   23bd8:	e1822003 	orr	r2, r2, r3
   23bdc:	e51b300c 	ldr	r3, [fp, #-12]
   23be0:	e283301e 	add	r3, r3, #30
   23be4:	e1a03103 	lsl	r3, r3, #2
   23be8:	e0813003 	add	r3, r1, r3
   23bec:	e5832004 	str	r2, [r3, #4]
		break;
   23bf0:	ea00000b 	b	23c24 <EnableGpioDetect+0x19c>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   23bf4:	e59f2038 	ldr	r2, [pc, #56]	@ 23c34 <EnableGpioDetect+0x1ac>
   23bf8:	e51b300c 	ldr	r3, [fp, #-12]
   23bfc:	e2833022 	add	r3, r3, #34	@ 0x22
   23c00:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23c04:	e59f1028 	ldr	r1, [pc, #40]	@ 23c34 <EnableGpioDetect+0x1ac>
   23c08:	e51b3008 	ldr	r3, [fp, #-8]
   23c0c:	e1822003 	orr	r2, r2, r3
   23c10:	e51b300c 	ldr	r3, [fp, #-12]
   23c14:	e2833022 	add	r3, r3, #34	@ 0x22
   23c18:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23c1c:	ea000000 	b	23c24 <EnableGpioDetect+0x19c>
	case DETECT_NONE:
		break;
   23c20:	e320f000 	nop	{0}
	}
}
   23c24:	e320f000 	nop	{0}
   23c28:	e28bd000 	add	sp, fp, #0
   23c2c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23c30:	e12fff1e 	bx	lr
   23c34:	20200000 	eorcs	r0, r0, r0

00023c38 <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   23c38:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23c3c:	e28db000 	add	fp, sp, #0
   23c40:	e24dd014 	sub	sp, sp, #20
   23c44:	e50b0010 	str	r0, [fp, #-16]
   23c48:	e1a03001 	mov	r3, r1
   23c4c:	e54b3011 	strb	r3, [fp, #-17]	@ 0xffffffef
	unsigned long mask=~(1<<(pinNum%32));
   23c50:	e51b3010 	ldr	r3, [fp, #-16]
   23c54:	e203301f 	and	r3, r3, #31
   23c58:	e3a02001 	mov	r2, #1
   23c5c:	e1a03312 	lsl	r3, r2, r3
   23c60:	e1e03003 	mvn	r3, r3
   23c64:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23c68:	e51b3010 	ldr	r3, [fp, #-16]
   23c6c:	e1a032a3 	lsr	r3, r3, #5
   23c70:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   23c74:	e55b3011 	ldrb	r3, [fp, #-17]	@ 0xffffffef
   23c78:	e3530006 	cmp	r3, #6
   23c7c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   23c80:	ea000055 	b	23ddc <DisableGpioDetect+0x1a4>
   23c84:	00023dd8 	ldrdeq	r3, [r2], -r8
   23c88:	00023ca0 	andeq	r3, r2, r0, lsr #25
   23c8c:	00023cdc 	ldrdeq	r3, [r2], -ip
   23c90:	00023d08 	andeq	r3, r2, r8, lsl #26
   23c94:	00023d44 	andeq	r3, r2, r4, asr #26
   23c98:	00023d70 	andeq	r3, r2, r0, ror sp
   23c9c:	00023dac 	andeq	r3, r2, ip, lsr #27
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   23ca0:	e59f2144 	ldr	r2, [pc, #324]	@ 23dec <DisableGpioDetect+0x1b4>
   23ca4:	e51b300c 	ldr	r3, [fp, #-12]
   23ca8:	e2833012 	add	r3, r3, #18
   23cac:	e1a03103 	lsl	r3, r3, #2
   23cb0:	e0823003 	add	r3, r2, r3
   23cb4:	e5932004 	ldr	r2, [r3, #4]
   23cb8:	e59f112c 	ldr	r1, [pc, #300]	@ 23dec <DisableGpioDetect+0x1b4>
   23cbc:	e51b3008 	ldr	r3, [fp, #-8]
   23cc0:	e0022003 	and	r2, r2, r3
   23cc4:	e51b300c 	ldr	r3, [fp, #-12]
   23cc8:	e2833012 	add	r3, r3, #18
   23ccc:	e1a03103 	lsl	r3, r3, #2
   23cd0:	e0813003 	add	r3, r1, r3
   23cd4:	e5832004 	str	r2, [r3, #4]
		break;
   23cd8:	ea00003f 	b	23ddc <DisableGpioDetect+0x1a4>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   23cdc:	e59f2108 	ldr	r2, [pc, #264]	@ 23dec <DisableGpioDetect+0x1b4>
   23ce0:	e51b300c 	ldr	r3, [fp, #-12]
   23ce4:	e2833016 	add	r3, r3, #22
   23ce8:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23cec:	e59f10f8 	ldr	r1, [pc, #248]	@ 23dec <DisableGpioDetect+0x1b4>
   23cf0:	e51b3008 	ldr	r3, [fp, #-8]
   23cf4:	e0022003 	and	r2, r2, r3
   23cf8:	e51b300c 	ldr	r3, [fp, #-12]
   23cfc:	e2833016 	add	r3, r3, #22
   23d00:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23d04:	ea000034 	b	23ddc <DisableGpioDetect+0x1a4>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   23d08:	e59f20dc 	ldr	r2, [pc, #220]	@ 23dec <DisableGpioDetect+0x1b4>
   23d0c:	e51b300c 	ldr	r3, [fp, #-12]
   23d10:	e2833018 	add	r3, r3, #24
   23d14:	e1a03103 	lsl	r3, r3, #2
   23d18:	e0823003 	add	r3, r2, r3
   23d1c:	e5932004 	ldr	r2, [r3, #4]
   23d20:	e59f10c4 	ldr	r1, [pc, #196]	@ 23dec <DisableGpioDetect+0x1b4>
   23d24:	e51b3008 	ldr	r3, [fp, #-8]
   23d28:	e0022003 	and	r2, r2, r3
   23d2c:	e51b300c 	ldr	r3, [fp, #-12]
   23d30:	e2833018 	add	r3, r3, #24
   23d34:	e1a03103 	lsl	r3, r3, #2
   23d38:	e0813003 	add	r3, r1, r3
   23d3c:	e5832004 	str	r2, [r3, #4]
		break;
   23d40:	ea000025 	b	23ddc <DisableGpioDetect+0x1a4>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   23d44:	e59f20a0 	ldr	r2, [pc, #160]	@ 23dec <DisableGpioDetect+0x1b4>
   23d48:	e51b300c 	ldr	r3, [fp, #-12]
   23d4c:	e283301c 	add	r3, r3, #28
   23d50:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23d54:	e59f1090 	ldr	r1, [pc, #144]	@ 23dec <DisableGpioDetect+0x1b4>
   23d58:	e51b3008 	ldr	r3, [fp, #-8]
   23d5c:	e0022003 	and	r2, r2, r3
   23d60:	e51b300c 	ldr	r3, [fp, #-12]
   23d64:	e283301c 	add	r3, r3, #28
   23d68:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23d6c:	ea00001a 	b	23ddc <DisableGpioDetect+0x1a4>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   23d70:	e59f2074 	ldr	r2, [pc, #116]	@ 23dec <DisableGpioDetect+0x1b4>
   23d74:	e51b300c 	ldr	r3, [fp, #-12]
   23d78:	e283301e 	add	r3, r3, #30
   23d7c:	e1a03103 	lsl	r3, r3, #2
   23d80:	e0823003 	add	r3, r2, r3
   23d84:	e5932004 	ldr	r2, [r3, #4]
   23d88:	e59f105c 	ldr	r1, [pc, #92]	@ 23dec <DisableGpioDetect+0x1b4>
   23d8c:	e51b3008 	ldr	r3, [fp, #-8]
   23d90:	e0022003 	and	r2, r2, r3
   23d94:	e51b300c 	ldr	r3, [fp, #-12]
   23d98:	e283301e 	add	r3, r3, #30
   23d9c:	e1a03103 	lsl	r3, r3, #2
   23da0:	e0813003 	add	r3, r1, r3
   23da4:	e5832004 	str	r2, [r3, #4]
		break;
   23da8:	ea00000b 	b	23ddc <DisableGpioDetect+0x1a4>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   23dac:	e59f2038 	ldr	r2, [pc, #56]	@ 23dec <DisableGpioDetect+0x1b4>
   23db0:	e51b300c 	ldr	r3, [fp, #-12]
   23db4:	e2833022 	add	r3, r3, #34	@ 0x22
   23db8:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23dbc:	e59f1028 	ldr	r1, [pc, #40]	@ 23dec <DisableGpioDetect+0x1b4>
   23dc0:	e51b3008 	ldr	r3, [fp, #-8]
   23dc4:	e0022003 	and	r2, r2, r3
   23dc8:	e51b300c 	ldr	r3, [fp, #-12]
   23dcc:	e2833022 	add	r3, r3, #34	@ 0x22
   23dd0:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23dd4:	ea000000 	b	23ddc <DisableGpioDetect+0x1a4>
	case DETECT_NONE:
		break;
   23dd8:	e320f000 	nop	{0}
	}
}
   23ddc:	e320f000 	nop	{0}
   23de0:	e28bd000 	add	sp, fp, #0
   23de4:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23de8:	e12fff1e 	bx	lr
   23dec:	20200000 	eorcs	r0, r0, r0

00023df0 <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   23df0:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23df4:	e28db000 	add	fp, sp, #0
   23df8:	e24dd014 	sub	sp, sp, #20
   23dfc:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   23e00:	e51b3010 	ldr	r3, [fp, #-16]
   23e04:	e203301f 	and	r3, r3, #31
   23e08:	e3a02001 	mov	r2, #1
   23e0c:	e1a03312 	lsl	r3, r2, r3
   23e10:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23e14:	e51b3010 	ldr	r3, [fp, #-16]
   23e18:	e1a032a3 	lsr	r3, r3, #5
   23e1c:	e50b300c 	str	r3, [fp, #-12]

	pRegs->GPEDS[offset]=mask;
   23e20:	e59f101c 	ldr	r1, [pc, #28]	@ 23e44 <ClearGpioInterrupt+0x54>
   23e24:	e51b300c 	ldr	r3, [fp, #-12]
   23e28:	e2833010 	add	r3, r3, #16
   23e2c:	e51b2008 	ldr	r2, [fp, #-8]
   23e30:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   23e34:	e320f000 	nop	{0}
   23e38:	e28bd000 	add	sp, fp, #0
   23e3c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23e40:	e12fff1e 	bx	lr
   23e44:	20200000 	eorcs	r0, r0, r0

00023e48 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   23e48:	e92d4800 	push	{fp, lr}
   23e4c:	e28db004 	add	fp, sp, #4
   23e50:	e24dd018 	sub	sp, sp, #24
   23e54:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   23e58:	e3a03000 	mov	r3, #0
   23e5c:	e50b3010 	str	r3, [fp, #-16]

	vTaskSuspendAll();
   23e60:	ebfffa22 	bl	226f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   23e64:	e59f3194 	ldr	r3, [pc, #404]	@ 24000 <pvPortMalloc+0x1b8>
   23e68:	e5933000 	ldr	r3, [r3]
   23e6c:	e3530000 	cmp	r3, #0
   23e70:	1a000000 	bne	23e78 <pvPortMalloc+0x30>
		{
			prvHeapInit();
   23e74:	eb000093 	bl	240c8 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   23e78:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23e7c:	e3530000 	cmp	r3, #0
   23e80:	0a00000c 	beq	23eb8 <pvPortMalloc+0x70>
		{
			xWantedSize += heapSTRUCT_SIZE;
   23e84:	e3a03010 	mov	r3, #16
   23e88:	e1a02003 	mov	r2, r3
   23e8c:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23e90:	e0833002 	add	r3, r3, r2
   23e94:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   23e98:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23e9c:	e2033007 	and	r3, r3, #7
   23ea0:	e3530000 	cmp	r3, #0
   23ea4:	0a000003 	beq	23eb8 <pvPortMalloc+0x70>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   23ea8:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23eac:	e3c33007 	bic	r3, r3, #7
   23eb0:	e2833008 	add	r3, r3, #8
   23eb4:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   23eb8:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23ebc:	e3530000 	cmp	r3, #0
   23ec0:	0a000043 	beq	23fd4 <pvPortMalloc+0x18c>
   23ec4:	e3a02a01 	mov	r2, #4096	@ 0x1000
   23ec8:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23ecc:	e1530002 	cmp	r3, r2
   23ed0:	2a00003f 	bcs	23fd4 <pvPortMalloc+0x18c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   23ed4:	e59f3128 	ldr	r3, [pc, #296]	@ 24004 <pvPortMalloc+0x1bc>
   23ed8:	e50b300c 	str	r3, [fp, #-12]
			pxBlock = xStart.pxNextFreeBlock;
   23edc:	e59f3120 	ldr	r3, [pc, #288]	@ 24004 <pvPortMalloc+0x1bc>
   23ee0:	e5933000 	ldr	r3, [r3]
   23ee4:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   23ee8:	ea000004 	b	23f00 <pvPortMalloc+0xb8>
			{
				pxPreviousBlock = pxBlock;
   23eec:	e51b3008 	ldr	r3, [fp, #-8]
   23ef0:	e50b300c 	str	r3, [fp, #-12]
				pxBlock = pxBlock->pxNextFreeBlock;
   23ef4:	e51b3008 	ldr	r3, [fp, #-8]
   23ef8:	e5933000 	ldr	r3, [r3]
   23efc:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   23f00:	e51b3008 	ldr	r3, [fp, #-8]
   23f04:	e5933004 	ldr	r3, [r3, #4]
   23f08:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   23f0c:	e1520003 	cmp	r2, r3
   23f10:	9a000003 	bls	23f24 <pvPortMalloc+0xdc>
   23f14:	e51b3008 	ldr	r3, [fp, #-8]
   23f18:	e5933000 	ldr	r3, [r3]
   23f1c:	e3530000 	cmp	r3, #0
   23f20:	1afffff1 	bne	23eec <pvPortMalloc+0xa4>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   23f24:	e59f30d4 	ldr	r3, [pc, #212]	@ 24000 <pvPortMalloc+0x1b8>
   23f28:	e5933000 	ldr	r3, [r3]
   23f2c:	e51b2008 	ldr	r2, [fp, #-8]
   23f30:	e1520003 	cmp	r2, r3
   23f34:	0a000026 	beq	23fd4 <pvPortMalloc+0x18c>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   23f38:	e51b300c 	ldr	r3, [fp, #-12]
   23f3c:	e5933000 	ldr	r3, [r3]
   23f40:	e3a02010 	mov	r2, #16
   23f44:	e0833002 	add	r3, r3, r2
   23f48:	e50b3010 	str	r3, [fp, #-16]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   23f4c:	e51b3008 	ldr	r3, [fp, #-8]
   23f50:	e5932000 	ldr	r2, [r3]
   23f54:	e51b300c 	ldr	r3, [fp, #-12]
   23f58:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   23f5c:	e51b3008 	ldr	r3, [fp, #-8]
   23f60:	e5932004 	ldr	r2, [r3, #4]
   23f64:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23f68:	e0423003 	sub	r3, r2, r3
   23f6c:	e3a02010 	mov	r2, #16
   23f70:	e1a02082 	lsl	r2, r2, #1
   23f74:	e1530002 	cmp	r3, r2
   23f78:	9a00000e 	bls	23fb8 <pvPortMalloc+0x170>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   23f7c:	e51b2008 	ldr	r2, [fp, #-8]
   23f80:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23f84:	e0823003 	add	r3, r2, r3
   23f88:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   23f8c:	e51b3008 	ldr	r3, [fp, #-8]
   23f90:	e5932004 	ldr	r2, [r3, #4]
   23f94:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23f98:	e0422003 	sub	r2, r2, r3
   23f9c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   23fa0:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   23fa4:	e51b3008 	ldr	r3, [fp, #-8]
   23fa8:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   23fac:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   23fb0:	e51b0014 	ldr	r0, [fp, #-20]	@ 0xffffffec
   23fb4:	eb000079 	bl	241a0 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   23fb8:	e59f3048 	ldr	r3, [pc, #72]	@ 24008 <pvPortMalloc+0x1c0>
   23fbc:	e5932000 	ldr	r2, [r3]
   23fc0:	e51b3008 	ldr	r3, [fp, #-8]
   23fc4:	e5933004 	ldr	r3, [r3, #4]
   23fc8:	e0423003 	sub	r3, r2, r3
   23fcc:	e59f2034 	ldr	r2, [pc, #52]	@ 24008 <pvPortMalloc+0x1c0>
   23fd0:	e5823000 	str	r3, [r2]
			}
		}
	}
	xTaskResumeAll();
   23fd4:	ebfff9d1 	bl	22720 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   23fd8:	e59f302c 	ldr	r3, [pc, #44]	@ 2400c <pvPortMalloc+0x1c4>
   23fdc:	e5932000 	ldr	r2, [r3]
   23fe0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23fe4:	e0823003 	add	r3, r2, r3
   23fe8:	e59f201c 	ldr	r2, [pc, #28]	@ 2400c <pvPortMalloc+0x1c4>
   23fec:	e5823000 	str	r3, [r2]

	return pvReturn;
   23ff0:	e51b3010 	ldr	r3, [fp, #-16]
}
   23ff4:	e1a00003 	mov	r0, r3
   23ff8:	e24bd004 	sub	sp, fp, #4
   23ffc:	e8bd8800 	pop	{fp, pc}
   24000:	00025c30 	andeq	r5, r2, r0, lsr ip
   24004:	00025c28 	andeq	r5, r2, r8, lsr #24
   24008:	00024850 	andeq	r4, r2, r0, asr r8
   2400c:	00025c34 	andeq	r5, r2, r4, lsr ip

00024010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   24010:	e92d4800 	push	{fp, lr}
   24014:	e28db004 	add	fp, sp, #4
   24018:	e24dd010 	sub	sp, sp, #16
   2401c:	e50b0010 	str	r0, [fp, #-16]
unsigned char *puc = ( unsigned char * ) pv;
   24020:	e51b3010 	ldr	r3, [fp, #-16]
   24024:	e50b3008 	str	r3, [fp, #-8]
xBlockLink *pxLink;

	if( pv != NULL )
   24028:	e51b3010 	ldr	r3, [fp, #-16]
   2402c:	e3530000 	cmp	r3, #0
   24030:	0a000011 	beq	2407c <vPortFree+0x6c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   24034:	e3a03010 	mov	r3, #16
   24038:	e2633000 	rsb	r3, r3, #0
   2403c:	e51b2008 	ldr	r2, [fp, #-8]
   24040:	e0823003 	add	r3, r2, r3
   24044:	e50b3008 	str	r3, [fp, #-8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   24048:	e51b3008 	ldr	r3, [fp, #-8]
   2404c:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
   24050:	ebfff9a6 	bl	226f0 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   24054:	e51b300c 	ldr	r3, [fp, #-12]
   24058:	e5932004 	ldr	r2, [r3, #4]
   2405c:	e59f3024 	ldr	r3, [pc, #36]	@ 24088 <vPortFree+0x78>
   24060:	e5933000 	ldr	r3, [r3]
   24064:	e0823003 	add	r3, r2, r3
   24068:	e59f2018 	ldr	r2, [pc, #24]	@ 24088 <vPortFree+0x78>
   2406c:	e5823000 	str	r3, [r2]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   24070:	e51b000c 	ldr	r0, [fp, #-12]
   24074:	eb000049 	bl	241a0 <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   24078:	ebfff9a8 	bl	22720 <xTaskResumeAll>
	}
}
   2407c:	e320f000 	nop	{0}
   24080:	e24bd004 	sub	sp, fp, #4
   24084:	e8bd8800 	pop	{fp, pc}
   24088:	00024850 	andeq	r4, r2, r0, asr r8

0002408c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   2408c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   24090:	e28db000 	add	fp, sp, #0
	return xFreeBytesRemaining;
   24094:	e59f3010 	ldr	r3, [pc, #16]	@ 240ac <xPortGetFreeHeapSize+0x20>
   24098:	e5933000 	ldr	r3, [r3]
}
   2409c:	e1a00003 	mov	r0, r3
   240a0:	e28bd000 	add	sp, fp, #0
   240a4:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   240a8:	e12fff1e 	bx	lr
   240ac:	00024850 	andeq	r4, r2, r0, asr r8

000240b0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   240b0:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   240b4:	e28db000 	add	fp, sp, #0
	/* This just exists to keep the linker quiet. */
}
   240b8:	e320f000 	nop	{0}
   240bc:	e28bd000 	add	sp, fp, #0
   240c0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   240c4:	e12fff1e 	bx	lr

000240c8 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   240c8:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   240cc:	e28db000 	add	fp, sp, #0
   240d0:	e24dd00c 	sub	sp, sp, #12
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   240d4:	e59f30b4 	ldr	r3, [pc, #180]	@ 24190 <prvHeapInit+0xc8>
   240d8:	e59f20b4 	ldr	r2, [pc, #180]	@ 24194 <prvHeapInit+0xcc>
   240dc:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   240e0:	e59f30a8 	ldr	r3, [pc, #168]	@ 24190 <prvHeapInit+0xc8>
   240e4:	e3a02000 	mov	r2, #0
   240e8:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   240ec:	e3a02a01 	mov	r2, #4096	@ 0x1000
   240f0:	e59f309c 	ldr	r3, [pc, #156]	@ 24194 <prvHeapInit+0xcc>
   240f4:	e0823003 	add	r3, r2, r3
   240f8:	e50b3008 	str	r3, [fp, #-8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   240fc:	e3a03010 	mov	r3, #16
   24100:	e2633000 	rsb	r3, r3, #0
   24104:	e51b2008 	ldr	r2, [fp, #-8]
   24108:	e0823003 	add	r3, r2, r3
   2410c:	e50b3008 	str	r3, [fp, #-8]
	pxEnd = ( void * ) pucHeapEnd;
   24110:	e59f2080 	ldr	r2, [pc, #128]	@ 24198 <prvHeapInit+0xd0>
   24114:	e51b3008 	ldr	r3, [fp, #-8]
   24118:	e5823000 	str	r3, [r2]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   2411c:	e59f3074 	ldr	r3, [pc, #116]	@ 24198 <prvHeapInit+0xd0>
   24120:	e5933000 	ldr	r3, [r3]
   24124:	e3a02000 	mov	r2, #0
   24128:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   2412c:	e59f3064 	ldr	r3, [pc, #100]	@ 24198 <prvHeapInit+0xd0>
   24130:	e5933000 	ldr	r3, [r3]
   24134:	e3a02000 	mov	r2, #0
   24138:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   2413c:	e59f3050 	ldr	r3, [pc, #80]	@ 24194 <prvHeapInit+0xcc>
   24140:	e50b300c 	str	r3, [fp, #-12]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   24144:	e3a03a01 	mov	r3, #4096	@ 0x1000
   24148:	e3a02010 	mov	r2, #16
   2414c:	e0432002 	sub	r2, r3, r2
   24150:	e51b300c 	ldr	r3, [fp, #-12]
   24154:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   24158:	e59f3038 	ldr	r3, [pc, #56]	@ 24198 <prvHeapInit+0xd0>
   2415c:	e5932000 	ldr	r2, [r3]
   24160:	e51b300c 	ldr	r3, [fp, #-12]
   24164:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   24168:	e59f302c 	ldr	r3, [pc, #44]	@ 2419c <prvHeapInit+0xd4>
   2416c:	e5933000 	ldr	r3, [r3]
   24170:	e3a02010 	mov	r2, #16
   24174:	e0433002 	sub	r3, r3, r2
   24178:	e59f201c 	ldr	r2, [pc, #28]	@ 2419c <prvHeapInit+0xd4>
   2417c:	e5823000 	str	r3, [r2]
}
   24180:	e320f000 	nop	{0}
   24184:	e28bd000 	add	sp, fp, #0
   24188:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   2418c:	e12fff1e 	bx	lr
   24190:	00025c28 	andeq	r5, r2, r8, lsr #24
   24194:	00024c28 	andeq	r4, r2, r8, lsr #24
   24198:	00025c30 	andeq	r5, r2, r0, lsr ip
   2419c:	00024850 	andeq	r4, r2, r0, asr r8

000241a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   241a0:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   241a4:	e28db000 	add	fp, sp, #0
   241a8:	e24dd014 	sub	sp, sp, #20
   241ac:	e50b0010 	str	r0, [fp, #-16]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   241b0:	e59f3134 	ldr	r3, [pc, #308]	@ 242ec <prvInsertBlockIntoFreeList+0x14c>
   241b4:	e50b3008 	str	r3, [fp, #-8]
   241b8:	ea000002 	b	241c8 <prvInsertBlockIntoFreeList+0x28>
   241bc:	e51b3008 	ldr	r3, [fp, #-8]
   241c0:	e5933000 	ldr	r3, [r3]
   241c4:	e50b3008 	str	r3, [fp, #-8]
   241c8:	e51b3008 	ldr	r3, [fp, #-8]
   241cc:	e5933000 	ldr	r3, [r3]
   241d0:	e51b2010 	ldr	r2, [fp, #-16]
   241d4:	e1520003 	cmp	r2, r3
   241d8:	8afffff7 	bhi	241bc <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   241dc:	e51b3008 	ldr	r3, [fp, #-8]
   241e0:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   241e4:	e51b3008 	ldr	r3, [fp, #-8]
   241e8:	e5933004 	ldr	r3, [r3, #4]
   241ec:	e51b200c 	ldr	r2, [fp, #-12]
   241f0:	e0823003 	add	r3, r2, r3
   241f4:	e51b2010 	ldr	r2, [fp, #-16]
   241f8:	e1520003 	cmp	r2, r3
   241fc:	1a000008 	bne	24224 <prvInsertBlockIntoFreeList+0x84>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   24200:	e51b3008 	ldr	r3, [fp, #-8]
   24204:	e5932004 	ldr	r2, [r3, #4]
   24208:	e51b3010 	ldr	r3, [fp, #-16]
   2420c:	e5933004 	ldr	r3, [r3, #4]
   24210:	e0822003 	add	r2, r2, r3
   24214:	e51b3008 	ldr	r3, [fp, #-8]
   24218:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   2421c:	e51b3008 	ldr	r3, [fp, #-8]
   24220:	e50b3010 	str	r3, [fp, #-16]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   24224:	e51b3010 	ldr	r3, [fp, #-16]
   24228:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   2422c:	e51b3010 	ldr	r3, [fp, #-16]
   24230:	e5933004 	ldr	r3, [r3, #4]
   24234:	e51b200c 	ldr	r2, [fp, #-12]
   24238:	e0822003 	add	r2, r2, r3
   2423c:	e51b3008 	ldr	r3, [fp, #-8]
   24240:	e5933000 	ldr	r3, [r3]
   24244:	e1520003 	cmp	r2, r3
   24248:	1a000018 	bne	242b0 <prvInsertBlockIntoFreeList+0x110>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   2424c:	e51b3008 	ldr	r3, [fp, #-8]
   24250:	e5932000 	ldr	r2, [r3]
   24254:	e59f3094 	ldr	r3, [pc, #148]	@ 242f0 <prvInsertBlockIntoFreeList+0x150>
   24258:	e5933000 	ldr	r3, [r3]
   2425c:	e1520003 	cmp	r2, r3
   24260:	0a00000d 	beq	2429c <prvInsertBlockIntoFreeList+0xfc>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   24264:	e51b3010 	ldr	r3, [fp, #-16]
   24268:	e5932004 	ldr	r2, [r3, #4]
   2426c:	e51b3008 	ldr	r3, [fp, #-8]
   24270:	e5933000 	ldr	r3, [r3]
   24274:	e5933004 	ldr	r3, [r3, #4]
   24278:	e0822003 	add	r2, r2, r3
   2427c:	e51b3010 	ldr	r3, [fp, #-16]
   24280:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   24284:	e51b3008 	ldr	r3, [fp, #-8]
   24288:	e5933000 	ldr	r3, [r3]
   2428c:	e5932000 	ldr	r2, [r3]
   24290:	e51b3010 	ldr	r3, [fp, #-16]
   24294:	e5832000 	str	r2, [r3]
   24298:	ea000008 	b	242c0 <prvInsertBlockIntoFreeList+0x120>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   2429c:	e59f304c 	ldr	r3, [pc, #76]	@ 242f0 <prvInsertBlockIntoFreeList+0x150>
   242a0:	e5932000 	ldr	r2, [r3]
   242a4:	e51b3010 	ldr	r3, [fp, #-16]
   242a8:	e5832000 	str	r2, [r3]
   242ac:	ea000003 	b	242c0 <prvInsertBlockIntoFreeList+0x120>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   242b0:	e51b3008 	ldr	r3, [fp, #-8]
   242b4:	e5932000 	ldr	r2, [r3]
   242b8:	e51b3010 	ldr	r3, [fp, #-16]
   242bc:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   242c0:	e51b2008 	ldr	r2, [fp, #-8]
   242c4:	e51b3010 	ldr	r3, [fp, #-16]
   242c8:	e1520003 	cmp	r2, r3
   242cc:	0a000002 	beq	242dc <prvInsertBlockIntoFreeList+0x13c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   242d0:	e51b3008 	ldr	r3, [fp, #-8]
   242d4:	e51b2010 	ldr	r2, [fp, #-16]
   242d8:	e5832000 	str	r2, [r3]
	}
}
   242dc:	e320f000 	nop	{0}
   242e0:	e28bd000 	add	sp, fp, #0
   242e4:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   242e8:	e12fff1e 	bx	lr
   242ec:	00025c28 	andeq	r5, r2, r8, lsr #24
   242f0:	00025c30 	andeq	r5, r2, r0, lsr ip

000242f4 <undefined_instruction>:
   242f4:	eafffffe 	b	242f4 <undefined_instruction>

000242f8 <prefetch_abort>:
   242f8:	eafffffe 	b	242f8 <prefetch_abort>

000242fc <data_abort>:
   242fc:	eafffffe 	b	242fc <data_abort>

00024300 <unused>:
   24300:	eafffffe 	b	24300 <unused>

00024304 <fiq>:
   24304:	eafffffe 	b	24304 <fiq>

00024308 <hang>:
   24308:	eafffffe 	b	24308 <hang>

0002430c <uart_putc>:

#define UART0_BASE  0x101f1000
#define UART0_DR    (*(volatile unsigned int*)(UART0_BASE + 0x00))
#define UART0_FR    (*(volatile unsigned int*)(UART0_BASE + 0x18))

void uart_putc(char c) {
   2430c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   24310:	e28db000 	add	fp, sp, #0
   24314:	e24dd00c 	sub	sp, sp, #12
   24318:	e1a03000 	mov	r3, r0
   2431c:	e54b3005 	strb	r3, [fp, #-5]
    while (UART0_FR & (1 << 5)) ; // 等待发送 FIFO 非满
   24320:	e320f000 	nop	{0}
   24324:	e59f3028 	ldr	r3, [pc, #40]	@ 24354 <uart_putc+0x48>
   24328:	e5933000 	ldr	r3, [r3]
   2432c:	e2033020 	and	r3, r3, #32
   24330:	e3530000 	cmp	r3, #0
   24334:	1afffffa 	bne	24324 <uart_putc+0x18>
    UART0_DR = c;
   24338:	e59f2018 	ldr	r2, [pc, #24]	@ 24358 <uart_putc+0x4c>
   2433c:	e55b3005 	ldrb	r3, [fp, #-5]
   24340:	e5823000 	str	r3, [r2]
}
   24344:	e320f000 	nop	{0}
   24348:	e28bd000 	add	sp, fp, #0
   2434c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   24350:	e12fff1e 	bx	lr
   24354:	101f1018 	andsne	r1, pc, r8, lsl r0	@ <UNPREDICTABLE>
   24358:	101f1000 	andsne	r1, pc, r0

0002435c <uart_puts>:

void uart_puts(const char* s) {
   2435c:	e92d4800 	push	{fp, lr}
   24360:	e28db004 	add	fp, sp, #4
   24364:	e24dd008 	sub	sp, sp, #8
   24368:	e50b0008 	str	r0, [fp, #-8]
    while (*s) {
   2436c:	ea000005 	b	24388 <uart_puts+0x2c>
        uart_putc(*s++);
   24370:	e51b3008 	ldr	r3, [fp, #-8]
   24374:	e2832001 	add	r2, r3, #1
   24378:	e50b2008 	str	r2, [fp, #-8]
   2437c:	e5d33000 	ldrb	r3, [r3]
   24380:	e1a00003 	mov	r0, r3
   24384:	ebffffe0 	bl	2430c <uart_putc>
    while (*s) {
   24388:	e51b3008 	ldr	r3, [fp, #-8]
   2438c:	e5d33000 	ldrb	r3, [r3]
   24390:	e3530000 	cmp	r3, #0
   24394:	1afffff5 	bne	24370 <uart_puts+0x14>
    }
}
   24398:	e320f000 	nop	{0}
   2439c:	e320f000 	nop	{0}
   243a0:	e24bd004 	sub	sp, fp, #4
   243a4:	e8bd8800 	pop	{fp, pc}

000243a8 <uart_init>:

void uart_init() {
   243a8:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   243ac:	e28db000 	add	fp, sp, #0
    // 对于 QEMU versatilepb 平台，一般 UART 默认已初始化
    // 你可以留空，或者设定波特率等（如 PL011 初始化）
}
   243b0:	e320f000 	nop	{0}
   243b4:	e28bd000 	add	sp, fp, #0
   243b8:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   243bc:	e12fff1e 	bx	lr

000243c0 <task1>:

void task1(void *pParam) {
   243c0:	e92d4800 	push	{fp, lr}
   243c4:	e28db004 	add	fp, sp, #4
   243c8:	e24dd010 	sub	sp, sp, #16
   243cc:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   243d0:	e3a03000 	mov	r3, #0
   243d4:	e50b3008 	str	r3, [fp, #-8]
    uart_puts("1\n");
   243d8:	e59f0030 	ldr	r0, [pc, #48]	@ 24410 <task1+0x50>
   243dc:	ebffffde 	bl	2435c <uart_puts>
	while(1) {
		i++;
   243e0:	e51b3008 	ldr	r3, [fp, #-8]
   243e4:	e2833001 	add	r3, r3, #1
   243e8:	e50b3008 	str	r3, [fp, #-8]
        uart_puts("1\n");
   243ec:	e59f001c 	ldr	r0, [pc, #28]	@ 24410 <task1+0x50>
   243f0:	ebffffd9 	bl	2435c <uart_puts>
		SetGpio(16, 1);
   243f4:	e3a01001 	mov	r1, #1
   243f8:	e3a00010 	mov	r0, #16
   243fc:	ebfffd5f 	bl	23980 <SetGpio>
		vTaskDelay(200);
   24400:	e3a000c8 	mov	r0, #200	@ 0xc8
   24404:	ebfff6fe 	bl	22004 <vTaskDelay>
		i++;
   24408:	e320f000 	nop	{0}
   2440c:	eafffff3 	b	243e0 <task1+0x20>
   24410:	00024818 	andeq	r4, r2, r8, lsl r8

00024414 <task2>:
	}
}

void task2(void *pParam) {
   24414:	e92d4800 	push	{fp, lr}
   24418:	e28db004 	add	fp, sp, #4
   2441c:	e24dd010 	sub	sp, sp, #16
   24420:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   24424:	e3a03000 	mov	r3, #0
   24428:	e50b3008 	str	r3, [fp, #-8]
    uart_puts("2\n");
   2442c:	e59f0038 	ldr	r0, [pc, #56]	@ 2446c <task2+0x58>
   24430:	ebffffc9 	bl	2435c <uart_puts>
	while(1) {
		i++;
   24434:	e51b3008 	ldr	r3, [fp, #-8]
   24438:	e2833001 	add	r3, r3, #1
   2443c:	e50b3008 	str	r3, [fp, #-8]
        uart_puts("2\n");
   24440:	e59f0024 	ldr	r0, [pc, #36]	@ 2446c <task2+0x58>
   24444:	ebffffc4 	bl	2435c <uart_puts>
		vTaskDelay(100);
   24448:	e3a00064 	mov	r0, #100	@ 0x64
   2444c:	ebfff6ec 	bl	22004 <vTaskDelay>
		SetGpio(16, 0);
   24450:	e3a01000 	mov	r1, #0
   24454:	e3a00010 	mov	r0, #16
   24458:	ebfffd48 	bl	23980 <SetGpio>
		vTaskDelay(100);
   2445c:	e3a00064 	mov	r0, #100	@ 0x64
   24460:	ebfff6e7 	bl	22004 <vTaskDelay>
		i++;
   24464:	e320f000 	nop	{0}
   24468:	eafffff1 	b	24434 <task2+0x20>
   2446c:	0002481c 	andeq	r4, r2, ip, lsl r8

00024470 <main>:
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
void main (void)
{
   24470:	e92d4800 	push	{fp, lr}
   24474:	e28db004 	add	fp, sp, #4
   24478:	e24dd010 	sub	sp, sp, #16
    uart_init();
   2447c:	ebffffc9 	bl	243a8 <uart_init>
    uart_puts("Hello from FreeRTOS!\n");
   24480:	e59f0080 	ldr	r0, [pc, #128]	@ 24508 <main+0x98>
   24484:	ebffffb4 	bl	2435c <uart_puts>

	SetGpioFunction(16, 1);			// RDY led
   24488:	e3a01001 	mov	r1, #1
   2448c:	e3a00010 	mov	r0, #16
   24490:	ebfffcf6 	bl	23870 <SetGpioFunction>

	xTaskCreate(task1, "LED_0", 128, NULL, 0, NULL);
   24494:	e3a03000 	mov	r3, #0
   24498:	e58d300c 	str	r3, [sp, #12]
   2449c:	e3a03000 	mov	r3, #0
   244a0:	e58d3008 	str	r3, [sp, #8]
   244a4:	e3a03000 	mov	r3, #0
   244a8:	e58d3004 	str	r3, [sp, #4]
   244ac:	e3a03000 	mov	r3, #0
   244b0:	e58d3000 	str	r3, [sp]
   244b4:	e3a03000 	mov	r3, #0
   244b8:	e3a02080 	mov	r2, #128	@ 0x80
   244bc:	e59f1048 	ldr	r1, [pc, #72]	@ 2450c <main+0x9c>
   244c0:	e59f0048 	ldr	r0, [pc, #72]	@ 24510 <main+0xa0>
   244c4:	ebfff5b7 	bl	21ba8 <xTaskGenericCreate>
	xTaskCreate(task2, "LED_1", 128, NULL, 0, NULL);
   244c8:	e3a03000 	mov	r3, #0
   244cc:	e58d300c 	str	r3, [sp, #12]
   244d0:	e3a03000 	mov	r3, #0
   244d4:	e58d3008 	str	r3, [sp, #8]
   244d8:	e3a03000 	mov	r3, #0
   244dc:	e58d3004 	str	r3, [sp, #4]
   244e0:	e3a03000 	mov	r3, #0
   244e4:	e58d3000 	str	r3, [sp]
   244e8:	e3a03000 	mov	r3, #0
   244ec:	e3a02080 	mov	r2, #128	@ 0x80
   244f0:	e59f101c 	ldr	r1, [pc, #28]	@ 24514 <main+0xa4>
   244f4:	e59f001c 	ldr	r0, [pc, #28]	@ 24518 <main+0xa8>
   244f8:	ebfff5aa 	bl	21ba8 <xTaskGenericCreate>

	vTaskStartScheduler();
   244fc:	ebfff846 	bl	2261c <vTaskStartScheduler>

	/*
	 *	We should never get here, but just in case something goes wrong,
	 *	we'll place the CPU into a safe loop.
	 */
	while(1) {
   24500:	e320f000 	nop	{0}
   24504:	eafffffd 	b	24500 <main+0x90>
   24508:	00024820 	andeq	r4, r2, r0, lsr #16
   2450c:	00024838 	andeq	r4, r2, r8, lsr r8
   24510:	000243c0 	andeq	r4, r2, r0, asr #7
   24514:	00024840 	andeq	r4, r2, r0, asr #16
   24518:	00024414 	andeq	r4, r2, r4, lsl r4

0002451c <strncpy>:
   2451c:	e1803001 	orr	r3, r0, r1
   24520:	e3520003 	cmp	r2, #3
   24524:	e2033003 	and	r3, r3, #3
   24528:	93a0c000 	movls	ip, #0
   2452c:	83a0c001 	movhi	ip, #1
   24530:	e3530000 	cmp	r3, #0
   24534:	13a0c000 	movne	ip, #0
   24538:	e35c0000 	cmp	ip, #0
   2453c:	e92d4030 	push	{r4, r5, lr}
   24540:	01a0e000 	moveq	lr, r0
   24544:	1a000015 	bne	245a0 <strncpy+0x84>
   24548:	e2411001 	sub	r1, r1, #1
   2454c:	ea000007 	b	24570 <strncpy+0x54>
   24550:	e1a0300e 	mov	r3, lr
   24554:	e5f1c001 	ldrb	ip, [r1, #1]!
   24558:	e35c0000 	cmp	ip, #0
   2455c:	e4c3c001 	strb	ip, [r3], #1
   24560:	e2424001 	sub	r4, r2, #1
   24564:	0a000005 	beq	24580 <strncpy+0x64>
   24568:	e1a0e003 	mov	lr, r3
   2456c:	e1a02004 	mov	r2, r4
   24570:	e3520000 	cmp	r2, #0
   24574:	1afffff5 	bne	24550 <strncpy+0x34>
   24578:	e8bd4030 	pop	{r4, r5, lr}
   2457c:	e12fff1e 	bx	lr
   24580:	e3540000 	cmp	r4, #0
   24584:	108ee002 	addne	lr, lr, r2
   24588:	0afffffa 	beq	24578 <strncpy+0x5c>
   2458c:	e4c3c001 	strb	ip, [r3], #1
   24590:	e153000e 	cmp	r3, lr
   24594:	1afffffc 	bne	2458c <strncpy+0x70>
   24598:	e8bd4030 	pop	{r4, r5, lr}
   2459c:	e12fff1e 	bx	lr
   245a0:	e1a03001 	mov	r3, r1
   245a4:	e1a0e000 	mov	lr, r0
   245a8:	e59f5034 	ldr	r5, [pc, #52]	@ 245e4 <strncpy+0xc8>
   245ac:	e59f4034 	ldr	r4, [pc, #52]	@ 245e8 <strncpy+0xcc>
   245b0:	e1a01003 	mov	r1, r3
   245b4:	e593c000 	ldr	ip, [r3]
   245b8:	e08c3005 	add	r3, ip, r5
   245bc:	e1c3300c 	bic	r3, r3, ip
   245c0:	e1130004 	tst	r3, r4
   245c4:	e2813004 	add	r3, r1, #4
   245c8:	1affffde 	bne	24548 <strncpy+0x2c>
   245cc:	e2422004 	sub	r2, r2, #4
   245d0:	e3520003 	cmp	r2, #3
   245d4:	e48ec004 	str	ip, [lr], #4
   245d8:	8afffff4 	bhi	245b0 <strncpy+0x94>
   245dc:	e1a01003 	mov	r1, r3
   245e0:	eaffffd8 	b	24548 <strncpy+0x2c>
   245e4:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   245e8:	80808080 	addhi	r8, r0, r0, lsl #1

000245ec <memset>:
   245ec:	e3100003 	tst	r0, #3
   245f0:	e92d4030 	push	{r4, r5, lr}
   245f4:	0a000036 	beq	246d4 <memset+0xe8>
   245f8:	e3520000 	cmp	r2, #0
   245fc:	e2423001 	sub	r3, r2, #1
   24600:	0a00002f 	beq	246c4 <memset+0xd8>
   24604:	e1a0e000 	mov	lr, r0
   24608:	e20120ff 	and	r2, r1, #255	@ 0xff
   2460c:	ea000001 	b	24618 <memset+0x2c>
   24610:	e2533001 	subs	r3, r3, #1
   24614:	3a00002a 	bcc	246c4 <memset+0xd8>
   24618:	e4ce2001 	strb	r2, [lr], #1
   2461c:	e31e0003 	tst	lr, #3
   24620:	1afffffa 	bne	24610 <memset+0x24>
   24624:	e3530003 	cmp	r3, #3
   24628:	9a00001e 	bls	246a8 <memset+0xbc>
   2462c:	e201c0ff 	and	ip, r1, #255	@ 0xff
   24630:	e08cc40c 	add	ip, ip, ip, lsl #8
   24634:	e353000f 	cmp	r3, #15
   24638:	e08cc80c 	add	ip, ip, ip, lsl #16
   2463c:	9a000027 	bls	246e0 <memset+0xf4>
   24640:	e2432010 	sub	r2, r3, #16
   24644:	e3c2400f 	bic	r4, r2, #15
   24648:	e28e5020 	add	r5, lr, #32
   2464c:	e0855004 	add	r5, r5, r4
   24650:	e1a04222 	lsr	r4, r2, #4
   24654:	e28e2010 	add	r2, lr, #16
   24658:	e502c010 	str	ip, [r2, #-16]
   2465c:	e502c00c 	str	ip, [r2, #-12]
   24660:	e502c008 	str	ip, [r2, #-8]
   24664:	e502c004 	str	ip, [r2, #-4]
   24668:	e2822010 	add	r2, r2, #16
   2466c:	e1520005 	cmp	r2, r5
   24670:	1afffff8 	bne	24658 <memset+0x6c>
   24674:	e2842001 	add	r2, r4, #1
   24678:	e313000c 	tst	r3, #12
   2467c:	e08e2202 	add	r2, lr, r2, lsl #4
   24680:	e203300f 	and	r3, r3, #15
   24684:	0a000010 	beq	246cc <memset+0xe0>
   24688:	e243e004 	sub	lr, r3, #4
   2468c:	e3cee003 	bic	lr, lr, #3
   24690:	e28ee004 	add	lr, lr, #4
   24694:	e082e00e 	add	lr, r2, lr
   24698:	e482c004 	str	ip, [r2], #4
   2469c:	e15e0002 	cmp	lr, r2
   246a0:	1afffffc 	bne	24698 <memset+0xac>
   246a4:	e2033003 	and	r3, r3, #3
   246a8:	e3530000 	cmp	r3, #0
   246ac:	120110ff 	andne	r1, r1, #255	@ 0xff
   246b0:	108e3003 	addne	r3, lr, r3
   246b4:	0a000002 	beq	246c4 <memset+0xd8>
   246b8:	e4ce1001 	strb	r1, [lr], #1
   246bc:	e15e0003 	cmp	lr, r3
   246c0:	1afffffc 	bne	246b8 <memset+0xcc>
   246c4:	e8bd4030 	pop	{r4, r5, lr}
   246c8:	e12fff1e 	bx	lr
   246cc:	e1a0e002 	mov	lr, r2
   246d0:	eafffff4 	b	246a8 <memset+0xbc>
   246d4:	e1a0e000 	mov	lr, r0
   246d8:	e1a03002 	mov	r3, r2
   246dc:	eaffffd0 	b	24624 <memset+0x38>
   246e0:	e1a0200e 	mov	r2, lr
   246e4:	eaffffe7 	b	24688 <memset+0x9c>

000246e8 <memcpy>:
   246e8:	e352000f 	cmp	r2, #15
   246ec:	9a00000c 	bls	24724 <memcpy+0x3c>
   246f0:	e1803001 	orr	r3, r0, r1
   246f4:	e3130003 	tst	r3, #3
   246f8:	11a03000 	movne	r3, r0
   246fc:	12422001 	subne	r2, r2, #1
   24700:	0a00000c 	beq	24738 <memcpy+0x50>
   24704:	e2822001 	add	r2, r2, #1
   24708:	e2433001 	sub	r3, r3, #1
   2470c:	e0812002 	add	r2, r1, r2
   24710:	e4d1c001 	ldrb	ip, [r1], #1
   24714:	e1510002 	cmp	r1, r2
   24718:	e5e3c001 	strb	ip, [r3, #1]!
   2471c:	1afffffb 	bne	24710 <memcpy+0x28>
   24720:	e12fff1e 	bx	lr
   24724:	e3520000 	cmp	r2, #0
   24728:	e1a03000 	mov	r3, r0
   2472c:	e2422001 	sub	r2, r2, #1
   24730:	1afffff3 	bne	24704 <memcpy+0x1c>
   24734:	e12fff1e 	bx	lr
   24738:	e1a0c000 	mov	ip, r0
   2473c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24740:	e2427010 	sub	r7, r2, #16
   24744:	e3c7700f 	bic	r7, r7, #15
   24748:	e2877010 	add	r7, r7, #16
   2474c:	e281e010 	add	lr, r1, #16
   24750:	e0803007 	add	r3, r0, r7
   24754:	e51e8010 	ldr	r8, [lr, #-16]
   24758:	e48c8010 	str	r8, [ip], #16
   2475c:	e51e600c 	ldr	r6, [lr, #-12]
   24760:	e51e5008 	ldr	r5, [lr, #-8]
   24764:	e51e4004 	ldr	r4, [lr, #-4]
   24768:	e15c0003 	cmp	ip, r3
   2476c:	e50c600c 	str	r6, [ip, #-12]
   24770:	e50c5008 	str	r5, [ip, #-8]
   24774:	e50c4004 	str	r4, [ip, #-4]
   24778:	e28ee010 	add	lr, lr, #16
   2477c:	1afffff4 	bne	24754 <memcpy+0x6c>
   24780:	e312000c 	tst	r2, #12
   24784:	e202c00f 	and	ip, r2, #15
   24788:	01a0200c 	moveq	r2, ip
   2478c:	e0811007 	add	r1, r1, r7
   24790:	0a00000d 	beq	247cc <memcpy+0xe4>
   24794:	e1a04001 	mov	r4, r1
   24798:	e24cc004 	sub	ip, ip, #4
   2479c:	e3cc6003 	bic	r6, ip, #3
   247a0:	e1a0e12c 	lsr	lr, ip, #2
   247a4:	e0836006 	add	r6, r3, r6
   247a8:	e243c004 	sub	ip, r3, #4
   247ac:	e4945004 	ldr	r5, [r4], #4
   247b0:	e5ac5004 	str	r5, [ip, #4]!
   247b4:	e15c0006 	cmp	ip, r6
   247b8:	1afffffb 	bne	247ac <memcpy+0xc4>
   247bc:	e28ec001 	add	ip, lr, #1
   247c0:	e2022003 	and	r2, r2, #3
   247c4:	e083310c 	add	r3, r3, ip, lsl #2
   247c8:	e081110c 	add	r1, r1, ip, lsl #2
   247cc:	e3520000 	cmp	r2, #0
   247d0:	e2422001 	sub	r2, r2, #1
   247d4:	12822001 	addne	r2, r2, #1
   247d8:	12433001 	subne	r3, r3, #1
   247dc:	10812002 	addne	r2, r1, r2
   247e0:	0a000003 	beq	247f4 <memcpy+0x10c>
   247e4:	e4d1c001 	ldrb	ip, [r1], #1
   247e8:	e1510002 	cmp	r1, r2
   247ec:	e5e3c001 	strb	ip, [r3, #1]!
   247f0:	1afffffb 	bne	247e4 <memcpy+0xfc>
   247f4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   247f8:	e12fff1e 	bx	lr

Disassembly of section .rodata:

000247fc <pRegs>:
static volatile BCM2835_TIMER_REGS * const pRegs = (BCM2835_TIMER_REGS *) (portTIMER_BASE);
   247fc:	2000b400 	andcs	fp, r0, r0, lsl #8
   24800:	454c4449 	strbmi	r4, [ip, #-1097]	@ 0xfffffbb7
   24804:	00000000 	andeq	r0, r0, r0

00024808 <pRegs>:
static volatile BCM2835_INTC_REGS * const pRegs = (BCM2835_INTC_REGS *) (BCM2835_BASE_INTC);
   24808:	2000b200 	andcs	fp, r0, r0, lsl #4

0002480c <pRegs>:
volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);
   2480c:	20200000 	eorcs	r0, r0, r0

00024810 <heapSTRUCT_SIZE>:
static const unsigned short heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( sizeof( xBlockLink ) % portBYTE_ALIGNMENT ) );
   24810:	00000010 	andeq	r0, r0, r0, lsl r0

00024814 <xTotalHeapSize>:
static const size_t xTotalHeapSize = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   24814:	00001000 	andeq	r1, r0, r0
   24818:	00000a31 	andeq	r0, r0, r1, lsr sl
   2481c:	00000a32 	andeq	r0, r0, r2, lsr sl
   24820:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	@ 0xfffffee0
   24824:	7266206f 	rsbvc	r2, r6, #111	@ 0x6f
   24828:	46206d6f 	strtmi	r6, [r0], -pc, ror #26
   2482c:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
   24830:	21534f54 	cmpcs	r3, r4, asr pc
   24834:	0000000a 	andeq	r0, r0, sl
   24838:	5f44454c 	svcpl	0x0044454c
   2483c:	00000030 	andeq	r0, r0, r0, lsr r0
   24840:	5f44454c 	svcpl	0x0044454c
   24844:	Address 0x24844 is out of bounds.


Disassembly of section .data:

00024848 <ulCriticalNesting>:
volatile unsigned long ulCriticalNesting = 9999UL;
   24848:	0000270f 	andeq	r2, r0, pc, lsl #14

0002484c <xNextTaskUnblockTime>:
PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
   2484c:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff

00024850 <xFreeBytesRemaining>:
static size_t xFreeBytesRemaining = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   24850:	00001000 	andeq	r1, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000026c 	andeq	r0, r0, ip, ror #4
       4:	04010005 	streq	r0, [r1], #-5
       8:	00000000 	andeq	r0, r0, r0
       c:	0000940d 	andeq	r9, r0, sp, lsl #8
      10:	019b1d00 	orrseq	r1, fp, r0, lsl #26
      14:	00f10000 	rscseq	r0, r1, r0
      18:	00000000 	andeq	r0, r0, r0
      1c:	03480002 	movteq	r0, #32770	@ 0x8002
      20:	00000000 	andeq	r0, r0, r0
      24:	040e0000 	streq	r0, [lr], #-0
      28:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
      2c:	07040200 	streq	r0, [r4, -r0, lsl #4]
      30:	00000758 	andeq	r0, r0, r8, asr r7
      34:	00002d09 	andeq	r2, r0, r9, lsl #26
      38:	05080200 	streq	r0, [r8, #-512]	@ 0xfffffe00
      3c:	00000146 	andeq	r0, r0, r6, asr #2
      40:	0d040802 	stceq	8, cr0, [r4, #-8]
      44:	05000002 	streq	r0, [r0, #-2]
      48:	000000da 	ldrdeq	r0, [r0], -sl
      4c:	53104702 	tstpl	r0, #524288	@ 0x80000
      50:	06000000 	streq	r0, [r0], -r0
      54:	00000058 	andeq	r0, r0, r8, asr r0
      58:	0000630a 	andeq	r6, r0, sl, lsl #6
      5c:	00630300 	rsbeq	r0, r3, r0, lsl #6
      60:	0f000000 	svceq	0x00000000
      64:	00150504 	andseq	r0, r5, r4, lsl #10
      68:	61030000 	mrsvs	r0, (UNDEF: 3)
      6c:	0000711c 	andeq	r7, r0, ip, lsl r1
      70:	07040200 	streq	r0, [r4, -r0, lsl #4]
      74:	00000753 	andeq	r0, r0, r3, asr r7
      78:	4b050402 	blmi	141088 <__bss_end+0x11b450>
      7c:	02000001 	andeq	r0, r0, #1
      80:	07670601 	strbeq	r0, [r7, -r1, lsl #12]!
      84:	02020000 	andeq	r0, r2, #0
      88:	00008107 	andeq	r8, r0, r7, lsl #2
      8c:	00710600 	rsbseq	r0, r1, r0, lsl #12
      90:	f8050000 			@ <UNDEFINED> instruction: 0xf8050000
      94:	04000001 	streq	r0, [r0], #-1
      98:	009e100b 	addseq	r1, lr, fp
      9c:	a3060000 	movwge	r0, #24576	@ 0x6000
      a0:	0a000000 	beq	a8 <_start-0xff58>
      a4:	000000b3 	strheq	r0, [r0], -r3
      a8:	00002d03 	andeq	r2, r0, r3, lsl #26
      ac:	00630300 	rsbeq	r0, r3, r0, lsl #6
      b0:	10000000 	andne	r0, r0, r0
      b4:	0000006d 	andeq	r0, r0, sp, rrx
      b8:	10560124 	subsne	r0, r6, r4, lsr #2
      bc:	00000124 	andeq	r0, r0, r4, lsr #2
      c0:	444f4c01 	strbmi	r4, [pc], #-3073	@ c8 <_start-0xff38>
      c4:	00715700 	rsbseq	r5, r1, r0, lsl #14
      c8:	01000000 	mrseq	r0, (UNDEF: 0)
      cc:	004c4156 	subeq	r4, ip, r6, asr r1
      d0:	00007158 	andeq	r7, r0, r8, asr r1
      d4:	43010400 	movwmi	r0, #5120	@ 0x1400
      d8:	59004c54 	stmdbpl	r0, {r2, r4, r6, sl, fp, lr}
      dc:	00000071 	andeq	r0, r0, r1, ror r0
      e0:	4c430108 	stfmie	f0, [r3], {8}
      e4:	715a0049 	cmpvc	sl, r9, asr #32
      e8:	0c000000 	stceq	0, cr0, [r0], {-0}
      ec:	53495201 	movtpl	r5, #37377	@ 0x9201
      f0:	00715b00 	rsbseq	r5, r1, r0, lsl #22
      f4:	01100000 	tsteq	r0, r0
      f8:	0053494d 	subseq	r4, r3, sp, asr #18
      fc:	0000715c 	andeq	r7, r0, ip, asr r1
     100:	52011400 	andpl	r1, r1, #0, 8
     104:	5d00444c 	cfstrspl	mvf4, [r0, #-304]	@ 0xfffffed0
     108:	00000071 	andeq	r0, r0, r1, ror r0
     10c:	49440118 	stmdbmi	r4, {r3, r4, r8}^
     110:	715e0056 	cmpvc	lr, r6, asr r0
     114:	1c000000 	stcne	0, cr0, [r0], {-0}
     118:	544e4301 	strbpl	r4, [lr], #-769	@ 0xfffffcff
     11c:	00715f00 	rsbseq	r5, r1, r0, lsl #30
     120:	00200000 	eoreq	r0, r0, r0
     124:	00006e05 	andeq	r6, r0, r5, lsl #28
     128:	03600100 	cmneq	r0, #0, 2
     12c:	000000b3 	strheq	r0, [r0], -r3
     130:	00012411 	andeq	r2, r1, r1, lsl r4
     134:	01780700 	cmneq	r8, r0, lsl #14
     138:	2c620000 	stclcs	0, cr0, [r2], #-0
     13c:	0000014b 	andeq	r0, r0, fp, asr #2
     140:	47fc0305 	ldrbmi	r0, [ip, r5, lsl #6]!
     144:	30060002 	andcc	r0, r6, r2
     148:	09000001 	stmdbeq	r0, {r0}
     14c:	00000146 	andeq	r0, r0, r6, asr #2
     150:	0000e608 	andeq	lr, r0, r8, lsl #12
     154:	06160400 	ldreq	r0, [r6], -r0, lsl #8
     158:	0001910b 	andeq	r9, r1, fp, lsl #2
     15c:	01681300 	cmneq	r8, r0, lsl #6
     160:	34030000 	strcc	r0, [r3], #-0
     164:	00000000 	andeq	r0, r0, r0
     168:	0000530b 	andeq	r5, r0, fp, lsl #6
     16c:	01821200 	orreq	r1, r2, r0, lsl #4
     170:	34030000 	strcc	r0, [r3], #-0
     174:	03000000 	movweq	r0, #0
     178:	00000092 	muleq	r0, r2, r0
     17c:	00006303 	andeq	r6, r0, r3, lsl #6
     180:	0c080000 	stceq	0, cr0, [r8], {-0}
     184:	04000000 	streq	r0, [r0], #-0
     188:	220c0615 	andcs	r0, ip, #22020096	@ 0x1500000
     18c:	d4000000 	strle	r0, [r0], #-0
     190:	017e0c04 	cmneq	lr, r4, lsl #24
     194:	04930000 	ldreq	r0, [r3], #0
     198:	00015408 	andeq	r5, r1, r8, lsl #8
     19c:	0d6d0100 	stfeqe	f0, [sp, #-0]
     1a0:	00003512 	andeq	r3, r0, r2, lsl r5
     1a4:	0deb0100 	stfeqe	f0, [fp]
     1a8:	000202ac 	andeq	r0, r2, ip, lsr #5
     1ac:	0000009c 	muleq	r0, ip, r0
     1b0:	01c59c01 	biceq	r9, r5, r1, lsl #24
     1b4:	43070000 	movwmi	r0, #28672	@ 0x7000
     1b8:	ed000002 	stc	0, cr0, [r0, #-8]
     1bc:	00007110 	andeq	r7, r0, r0, lsl r1
     1c0:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     1c4:	01301300 	teqeq	r0, r0, lsl #6
     1c8:	dd010000 	stcle	0, cr0, [r1, #-0]
     1cc:	02027406 	andeq	r7, r2, #100663296	@ 0x6000000
     1d0:	00003800 	andeq	r3, r0, r0, lsl #16
     1d4:	f89c0100 			@ <UNDEFINED> instruction: 0xf89c0100
     1d8:	04000001 	streq	r0, [r0], #-1
     1dc:	00000000 	andeq	r0, r0, r0
     1e0:	002d1ddd 	ldrdeq	r1, [sp], -sp	@ <UNPREDICTABLE>
     1e4:	91020000 	mrsls	r0, (UNDEF: 2)
     1e8:	004c0474 	subeq	r0, ip, r4, ror r4
     1ec:	29dd0000 	ldmibcs	sp, {}^	@ <UNPREDICTABLE>
     1f0:	00000063 	andeq	r0, r0, r3, rrx
     1f4:	00709102 	rsbseq	r9, r0, r2, lsl #2
     1f8:	00011e14 	andeq	r1, r1, r4, lsl lr
     1fc:	06d00100 	ldrbeq	r0, [r0], r0, lsl #2
     200:	0002025c 	andeq	r0, r2, ip, asr r2
     204:	00000018 	andeq	r0, r0, r8, lsl r0
     208:	19159c01 	ldmdbne	r5, {r0, sl, fp, ip, pc}
     20c:	01000002 	tsteq	r0, r2
     210:	00780fc2 	rsbseq	r0, r8, r2, asr #31
     214:	02400000 	subeq	r0, r0, #0
     218:	001c0002 	andseq	r0, ip, r2
     21c:	9c010000 	stcls	0, cr0, [r1], {-0}
     220:	00022d16 	andeq	r2, r2, r6, lsl sp
     224:	11770100 	cmnne	r7, r0, lsl #2
     228:	0000008d 	andeq	r0, r0, sp, lsl #1
     22c:	00020000 	andeq	r0, r2, r0
     230:	00000240 	andeq	r0, r0, r0, asr #4
     234:	39049c01 	stmdbcc	r4, {r0, sl, fp, ip, pc}
     238:	77000001 	strvc	r0, [r0, -r1]
     23c:	00008d38 	andeq	r8, r0, r8, lsr sp
     240:	6c910200 	lfmvs	f0, 4, [r1], {0}
     244:	00000504 	andeq	r0, r0, r4, lsl #10
     248:	47527700 	ldrbmi	r7, [r2, -r0, lsl #14]
     24c:	02000000 	andeq	r0, r0, #0
     250:	6b046891 	blvs	11a49c <__bss_end+0xf4864>
     254:	77000001 	strvc	r0, [r0, -r1]
     258:	00006360 	andeq	r6, r0, r0, ror #6
     25c:	64910200 	ldrvs	r0, [r1], #512	@ 0x200
     260:	00005f07 	andeq	r5, r0, r7, lsl #30
     264:	8d117900 	vldrhi.16	s14, [r1, #-0]	@ <UNPREDICTABLE>
     268:	02000000 	andeq	r0, r0, #0
     26c:	00007491 	muleq	r0, r1, r4
     270:	00000187 	andeq	r0, r0, r7, lsl #3
     274:	04010005 	streq	r0, [r1], #-5
     278:	00000172 	andeq	r0, r0, r2, ror r1
     27c:	00009408 	andeq	r9, r0, r8, lsl #8
     280:	02521d00 	subseq	r1, r2, #0, 26
     284:	00f10000 	rscseq	r0, r1, r0
     288:	03480000 	movteq	r0, #32768	@ 0x8000
     28c:	02a40002 	adceq	r0, r4, #2
     290:	02280000 	eoreq	r0, r8, #0
     294:	04090000 	streq	r0, [r9], #-0
     298:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
     29c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     2a0:	00000758 	andeq	r0, r0, r8, asr r7
     2a4:	46050802 	strmi	r0, [r5], -r2, lsl #16
     2a8:	02000001 	andeq	r0, r0, #1
     2ac:	020d0408 	andeq	r0, sp, #8, 8	@ 0x8000000
     2b0:	04020000 	streq	r0, [r2], #-0
     2b4:	00075307 	andeq	r5, r7, r7, lsl #6
     2b8:	00420400 	subeq	r0, r2, r0, lsl #8
     2bc:	04020000 	streq	r0, [r2], #-0
     2c0:	00014b05 	andeq	r4, r1, r5, lsl #22
     2c4:	02c50500 	sbceq	r0, r5, #0, 10
     2c8:	18650000 	stmdane	r5!, {}^	@ <UNPREDICTABLE>
     2cc:	00000049 	andeq	r0, r0, r9, asr #32
     2d0:	48480305 	stmdami	r8, {r0, r2, r8, r9}^
     2d4:	0b050002 	bleq	1402e4 <__bss_end+0x11a6ac>
     2d8:	73000003 	movwvc	r0, #3
     2dc:	00002605 	andeq	r2, r0, r5, lsl #12
     2e0:	58030500 	stmdapl	r3, {r8, sl}
     2e4:	0a000248 	beq	c0c <_start-0xf3f4>
     2e8:	00000316 	andeq	r0, r0, r6, lsl r3
     2ec:	060dbe01 	streq	fp, [sp], -r1, lsl #28
     2f0:	000002d7 	ldrdeq	r0, [r0], -r7
     2f4:	020588fe 	andeq	r8, r5, #16646144	@ 0xfe0000
     2f8:	00006400 	andeq	r6, r0, r0, lsl #8
     2fc:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     300:	000002b2 			@ <UNDEFINED> instruction: 0x000002b2
     304:	020544ee 	andeq	r4, r5, #-301989888	@ 0xee000000
     308:	00004400 	andeq	r4, r0, r0, lsl #8
     30c:	0b9c0100 	bleq	fe700714 <_estack+0xf66e0714>
     310:	000002fd 	strdeq	r0, [r0], -sp
     314:	9406c101 	strls	ip, [r6], #-257	@ 0xfffffeff
     318:	b0000204 	andlt	r0, r0, r4, lsl #4
     31c:	01000000 	mrseq	r0, (UNDEF: 0)
     320:	0000f69c 	muleq	r0, ip, r6
     324:	04940700 	ldreq	r0, [r4], #1792	@ 0x700
     328:	00580002 	subseq	r0, r8, r2
     32c:	00d70000 	sbcseq	r0, r7, r0
     330:	21010000 	mrscs	r0, (UNDEF: 1)
     334:	c2000003 	andgt	r0, r0, #3
     338:	000000fc 	strdeq	r0, [r0], -ip
     33c:	0002c501 	andeq	ip, r2, r1, lsl #10
     340:	0049c200 	subeq	ip, r9, r0, lsl #4
     344:	03000000 	movweq	r0, #0
     348:	000204f0 	strdeq	r0, [r2], -r0	@ <UNPREDICTABLE>
     34c:	00000048 	andeq	r0, r0, r8, asr #32
     350:	00032101 	andeq	r2, r3, r1, lsl #2
     354:	00fcc400 	rscseq	ip, ip, r0, lsl #8
     358:	c5010000 	strgt	r0, [r1, #-0]
     35c:	c4000002 	strgt	r0, [r0], #-2
     360:	00000049 	andeq	r0, r0, r9, asr #32
     364:	040c0000 	streq	r0, [ip], #-0
     368:	00000101 	andeq	r0, r0, r1, lsl #2
     36c:	0000f604 	andeq	pc, r0, r4, lsl #12
     370:	e90e0d00 	stmdb	lr, {r8, sl, fp}
     374:	01000002 	tsteq	r0, r2
     378:	03e0069c 	mvneq	r0, #156, 12	@ 0x9c00000
     37c:	00b40002 	adcseq	r0, r4, r2
     380:	9c010000 	stcls	0, cr0, [r1], {-0}
     384:	00000159 	andeq	r0, r0, r9, asr r1
     388:	0203e407 	andeq	lr, r3, #117440512	@ 0x7000000
     38c:	00005800 	andeq	r5, r0, r0, lsl #16
     390:	00013a00 	andeq	r3, r1, r0, lsl #20
     394:	03210100 			@ <UNDEFINED> instruction: 0x03210100
     398:	fca40000 	stc2	0, cr0, [r4]
     39c:	01000000 	mrseq	r0, (UNDEF: 0)
     3a0:	000002c5 	andeq	r0, r0, r5, asr #5
     3a4:	000049a4 	andeq	r4, r0, r4, lsr #19
     3a8:	40030000 	andmi	r0, r3, r0
     3ac:	48000204 	stmdami	r0, {r2, r9}
     3b0:	01000000 	mrseq	r0, (UNDEF: 0)
     3b4:	00000321 	andeq	r0, r0, r1, lsr #6
     3b8:	0000fcaa 	andeq	pc, r0, sl, lsr #25
     3bc:	02c50100 	sbceq	r0, r5, #0, 2
     3c0:	49aa0000 	stmibmi	sl!, {}	@ <UNPREDICTABLE>
     3c4:	00000000 	andeq	r0, r0, r0
     3c8:	01540f00 	cmpeq	r4, r0, lsl #30
     3cc:	75010000 	strvc	r0, [r1, #-0]
     3d0:	02034806 	andeq	r4, r3, #393216	@ 0x60000
     3d4:	00009800 	andeq	r9, r0, r0, lsl #16
     3d8:	039c0100 	orrseq	r0, ip, #0, 2
     3dc:	00020370 	andeq	r0, r2, r0, ror r3
     3e0:	00000048 	andeq	r0, r0, r8, asr #32
     3e4:	00032101 	andeq	r2, r3, r1, lsl #2
     3e8:	00fc8800 	rscseq	r8, ip, r0, lsl #16
     3ec:	c5010000 	strgt	r0, [r1, #-0]
     3f0:	88000002 	stmdahi	r0, {r1}
     3f4:	00000049 	andeq	r0, r0, r9, asr #32
     3f8:	1d000000 	stcne	0, cr0, [r0, #-0]
     3fc:	05000005 	streq	r0, [r0, #-5]
     400:	6b040100 	blvs	100808 <__bss_end+0xdabd0>
     404:	0f000002 	svceq	0x00000002
     408:	00000094 	muleq	r0, r4, r0
     40c:	00057a1d 	andeq	r7, r5, sp, lsl sl
     410:	0000f100 	andeq	pc, r0, r0, lsl #2
     414:	0205f400 	andeq	pc, r5, #0, 8
     418:	00076800 	andeq	r6, r7, r0, lsl #16
     41c:	00030e00 	andeq	r0, r3, r0, lsl #28
     420:	05041000 	streq	r1, [r4, #-0]
     424:	00746e69 	rsbseq	r6, r4, r9, ror #28
     428:	0003d804 	andeq	sp, r3, r4, lsl #16
     42c:	17d60200 	ldrbne	r0, [r6, r0, lsl #4]
     430:	00000039 	andeq	r0, r0, r9, lsr r0
     434:	58070405 	stmdapl	r7, {r0, r2, sl}
     438:	05000007 	streq	r0, [r0, #-7]
     43c:	01460508 	cmpeq	r6, r8, lsl #10
     440:	08050000 	stmdaeq	r5, {}	@ <UNPREDICTABLE>
     444:	00020d04 	andeq	r0, r2, r4, lsl #26
     448:	04041100 	streq	r1, [r4], #-256	@ 0xffffff00
     44c:	00000015 	andeq	r0, r0, r5, lsl r0
     450:	5c1c6103 	ldfpls	f6, [ip], {3}
     454:	05000000 	streq	r0, [r0, #-0]
     458:	07530704 	ldrbeq	r0, [r3, -r4, lsl #14]
     45c:	5c0a0000 	stcpl	0, cr0, [sl], {-0}
     460:	05000000 	streq	r0, [r0, #-0]
     464:	014b0504 	cmpeq	fp, r4, lsl #10
     468:	df0b0000 	svcle	0x000b0000
     46c:	14000004 	strne	r0, [r0], #-4
     470:	be086904 	vmlalt.f16	s12, s16, s8	@ <UNPREDICTABLE>
     474:	01000000 	mrseq	r0, (UNDEF: 0)
     478:	000004a0 	andeq	r0, r0, r0, lsr #9
     47c:	500f6b04 	andpl	r6, pc, r4, lsl #22
     480:	00000000 	andeq	r0, r0, r0
     484:	0005d301 	andeq	sp, r5, r1, lsl #6
     488:	1f6c0400 	svcne	0x006c0400
     48c:	000000c3 	andeq	r0, r0, r3, asr #1
     490:	03df0104 	bicseq	r0, pc, #4, 2
     494:	6d040000 	stcvs	0, cr0, [r4, #-0]
     498:	0000c31f 	andeq	ip, r0, pc, lsl r3
     49c:	51010800 	tstpl	r1, r0, lsl #16
     4a0:	04000004 	streq	r0, [r0], #-4
     4a4:	004e096e 	subeq	r0, lr, lr, ror #18
     4a8:	010c0000 	mrseq	r0, (UNDEF: 12)
     4ac:	00000553 	andeq	r0, r0, r3, asr r5
     4b0:	4e096f04 	cdpmi	15, 0, cr6, cr9, cr4, {0}
     4b4:	10000000 	andne	r0, r0, r0
     4b8:	006f0a00 	rsbeq	r0, pc, r0, lsl #20
     4bc:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
     4c0:	04000000 	streq	r0, [r0], #-0
     4c4:	00000650 	andeq	r0, r0, r0, asr r6
     4c8:	6f1b7104 	svcvs	0x001b7104
     4cc:	0a000000 	beq	4d4 <_start-0xfb2c>
     4d0:	000000c8 	andeq	r0, r0, r8, asr #1
     4d4:	0006d10b 	andeq	sp, r6, fp, lsl #2
     4d8:	73040c00 	movwvc	r0, #19456	@ 0x4c00
     4dc:	00010e08 	andeq	r0, r1, r8, lsl #28
     4e0:	04a00100 	strteq	r0, [r0], #256	@ 0x100
     4e4:	75040000 	strvc	r0, [r4, #-0]
     4e8:	0000500f 	andeq	r5, r0, pc
     4ec:	d3010000 	movwle	r0, #4096	@ 0x1000
     4f0:	04000005 	streq	r0, [r0], #-5
     4f4:	00c31e76 	sbceq	r1, r3, r6, ror lr
     4f8:	01040000 	mrseq	r0, (UNDEF: 4)
     4fc:	000003df 	ldrdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
     500:	c31e7704 	tstgt	lr, #4, 14	@ 0x100000
     504:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
     508:	04fd0400 	ldrbteq	r0, [sp], #1024	@ 0x400
     50c:	79040000 	stmdbvc	r4, {}	@ <UNPREDICTABLE>
     510:	0000d920 	andeq	sp, r0, r0, lsr #18
     514:	010e0a00 	tsteq	lr, r0, lsl #20
     518:	9a0b0000 	bls	2c0520 <__bss_end+0x29a8e8>
     51c:	14000004 	strne	r0, [r0], #-4
     520:	54107e04 	ldrpl	r7, [r0], #-3588	@ 0xfffff1fc
     524:	01000001 	tsteq	r0, r1
     528:	00000640 	andeq	r0, r0, r0, asr #12
     52c:	63228004 			@ <UNDEFINED> instruction: 0x63228004
     530:	00000000 	andeq	r0, r0, r0
     534:	0006c901 	andeq	ip, r6, r1, lsl #18
     538:	17810400 	strne	r0, [r1, r0, lsl #8]
     53c:	00000154 	andeq	r0, r0, r4, asr r1
     540:	06760104 	ldrbteq	r0, [r6], -r4, lsl #2
     544:	82040000 	andhi	r0, r4, #0
     548:	00011a19 	andeq	r1, r1, r9, lsl sl
     54c:	06000800 	streq	r0, [r0], -r0, lsl #16
     550:	000000d4 	ldrdeq	r0, [r0], -r4
     554:	0007b104 	andeq	fp, r7, r4, lsl #2
     558:	03830400 	orreq	r0, r3, #0, 8
     55c:	0000011f 	andeq	r0, r0, pc, lsl r1
     560:	0001590d 	andeq	r5, r1, sp, lsl #18
     564:	06010500 	streq	r0, [r1], -r0, lsl #10
     568:	00000767 	andeq	r0, r0, r7, ror #14
     56c:	81070205 	tsthi	r7, r5, lsl #4
     570:	04000000 	streq	r0, [r0], #-0
     574:	00000489 	andeq	r0, r0, r9, lsl #9
     578:	4e105305 	cdpmi	3, 1, cr5, cr0, cr5, {0}
     57c:	04000000 	streq	r0, [r0], #-0
     580:	000005c2 	andeq	r0, r0, r2, asr #11
     584:	90105605 	andsls	r5, r0, r5, lsl #12
     588:	06000001 	streq	r0, [r0], -r1
     58c:	00000195 	muleq	r0, r5, r1
     590:	0001a512 	andeq	sl, r1, r2, lsl r5
     594:	01780300 	cmneq	r8, r0, lsl #6
     598:	5c030000 	stcpl	0, cr0, [r3], {-0}
     59c:	00000000 	andeq	r0, r0, r0
     5a0:	0005f90b 	andeq	pc, r5, fp, lsl #18
     5a4:	58053800 	stmdapl	r5, {fp, ip, sp}
     5a8:	00020110 	andeq	r0, r2, r0, lsl r1
     5ac:	04100100 	ldreq	r0, [r0], #-256	@ 0xffffff00
     5b0:	5a050000 	bpl	1405b8 <__bss_end+0x11a980>
     5b4:	00018415 	andeq	r8, r1, r5, lsl r4
     5b8:	40010000 	andmi	r0, r1, r0
     5bc:	05000004 	streq	r0, [r0, #-4]
     5c0:	00c80f5b 	sbceq	r0, r8, fp, asr pc
     5c4:	01040000 	mrseq	r0, (UNDEF: 4)
     5c8:	00000531 	andeq	r0, r0, r1, lsr r5
     5cc:	c80f5c05 	stmdagt	pc, {r0, r2, sl, fp, ip, lr}	@ <UNPREDICTABLE>
     5d0:	18000000 	stmdane	r0, {}	@ <UNPREDICTABLE>
     5d4:	0006be01 	andeq	fp, r6, r1, lsl #28
     5d8:	1a5d0500 	bne	17419e0 <__bss_end+0x171bda8>
     5dc:	0000005c 	andeq	r0, r0, ip, asr r0
     5e0:	0408012c 	streq	r0, [r8], #-300	@ 0xfffffed4
     5e4:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
     5e8:	00005c1a 	andeq	r5, r0, sl, lsl ip
     5ec:	ae013000 	cdpge	0, 0, cr3, cr1, cr0, {0}
     5f0:	05000003 	streq	r0, [r0, #-3]
     5f4:	0171135f 	cmneq	r1, pc, asr r3
     5f8:	00340000 	eorseq	r0, r4, r0
     5fc:	0006ee04 	andeq	lr, r6, r4, lsl #28
     600:	03600500 	cmneq	r0, #0, 10
     604:	000001a5 	andeq	r0, r0, r5, lsr #3
     608:	00015913 	andeq	r5, r1, r3, lsl r9
     60c:	00021d00 	andeq	r1, r2, r0, lsl #26
     610:	00391400 	eorseq	r1, r9, r0, lsl #8
     614:	00010000 	andeq	r0, r1, r0
     618:	0003c202 	andeq	ip, r3, r2, lsl #4
     61c:	0d0e5100 	stfeqs	f5, [lr, #-0]
     620:	05000002 	streq	r0, [r0, #-2]
     624:	02485c03 	subeq	r5, r8, #768	@ 0x300
     628:	06120200 	ldreq	r0, [r2], -r0, lsl #4
     62c:	0e520000 	cdpeq	0, 5, cr0, cr2, cr0, {0}
     630:	00000159 	andeq	r0, r0, r9, asr r1
     634:	48840305 	stmmi	r4, {r0, r2, r8, r9}
     638:	29020002 	stmdbcs	r2, {r1}
     63c:	53000006 	movwpl	r0, #6
     640:	0001590e 	andeq	r5, r1, lr, lsl #18
     644:	98030500 	stmdals	r3, {r8, sl}
     648:	02000248 	andeq	r0, r0, #72, 4	@ 0x80000004
     64c:	0000037b 	andeq	r0, r0, fp, ror r3
     650:	02611054 	rsbeq	r1, r1, #84	@ 0x54
     654:	03050000 	movweq	r0, #20480	@ 0x5000
     658:	000248ac 	andeq	r4, r2, ip, lsr #17
     65c:	00015906 	andeq	r5, r1, r6, lsl #18
     660:	02610d00 	rsbeq	r0, r1, #0, 26
     664:	da020000 	ble	8066c <__bss_end+0x5aa34>
     668:	55000005 	strpl	r0, [r0, #-5]
     66c:	00026110 	andeq	r6, r2, r0, lsl r1
     670:	b0030500 	andlt	r0, r3, r0, lsl #10
     674:	02000248 	andeq	r0, r0, #72, 4	@ 0x80000004
     678:	0000055f 	andeq	r0, r0, pc, asr r5
     67c:	01590e56 	cmpeq	r9, r6, asr lr
     680:	03050000 	movweq	r0, #20480	@ 0x5000
     684:	000248b4 			@ <UNDEFINED> instruction: 0x000248b4
     688:	00054015 	andeq	r4, r5, r5, lsl r0
     68c:	0b590100 	bleq	1640a94 <__bss_end+0x161ae5c>
     690:	0000029f 	muleq	r0, pc, r2	@ <UNPREDICTABLE>
     694:	48c80305 	stmiami	r8, {r0, r2, r8, r9}^
     698:	01060002 	tsteq	r6, r2
     69c:	02000002 	andeq	r0, r0, #2
     6a0:	000006a2 	andeq	r0, r0, r2, lsr #13
     6a4:	005c1f5a 	subseq	r1, ip, sl, asr pc
     6a8:	03050000 	movweq	r0, #20480	@ 0x5000
     6ac:	000248cc 	andeq	r4, r2, ip, asr #17
     6b0:	00068e02 	andeq	r8, r6, r2, lsl #28
     6b4:	50155b00 	andspl	r5, r5, r0, lsl #22
     6b8:	05000000 	streq	r0, [r0, #-0]
     6bc:	0248d003 	subeq	sp, r8, #3
     6c0:	067f0200 	ldrbteq	r0, [pc], -r0, lsl #4
     6c4:	2e5b0000 	cdpcs	0, 5, cr0, cr11, cr0, {0}
     6c8:	00000050 	andeq	r0, r0, r0, asr r0
     6cc:	48d40305 	ldmmi	r4, {r0, r2, r8, r9}^
     6d0:	24020002 	strcs	r0, [r2], #-2
     6d4:	5b000005 	blpl	6f0 <_start-0xf910>
     6d8:	00005042 	andeq	r5, r0, r2, asr #32
     6dc:	d8030500 	stmdale	r3, {r8, sl}
     6e0:	08000248 	stmdaeq	r0, {r3, r6, r9}
     6e4:	0000039e 	muleq	r0, lr, r3
     6e8:	02f90111 	rscseq	r0, r9, #1073741828	@ 0x40000004
     6ec:	61030000 	mrsvs	r0, (UNDEF: 3)
     6f0:	00000002 	andeq	r0, r0, r2
     6f4:	0004b216 	andeq	fp, r4, r6, lsl r2
     6f8:	03d80600 	bicseq	r0, r8, #0, 12
     6fc:	0000500e 	andeq	r5, r0, lr
     700:	03b60800 			@ <UNDEFINED> instruction: 0x03b60800
     704:	01290000 			@ <UNDEFINED> instruction: 0x01290000
     708:	0000031c 	andeq	r0, r0, ip, lsl r3
     70c:	00026103 	andeq	r6, r2, r3, lsl #2
     710:	031c0300 	tsteq	ip, #0, 6
     714:	06000000 	streq	r0, [r0], -r0
     718:	000000c8 	andeq	r0, r0, r8, asr #1
     71c:	00042408 	andeq	r2, r4, r8, lsl #8
     720:	32014a00 	andcc	r4, r1, #0, 20
     724:	03000003 	movweq	r0, #3
     728:	0000031c 	andeq	r0, r0, ip, lsl r3
     72c:	04590800 	ldrbeq	r0, [r9], #-2048	@ 0xfffff800
     730:	013e0000 	teqeq	lr, r0
     734:	00000348 	andeq	r0, r0, r8, asr #6
     738:	00026103 	andeq	r6, r2, r3, lsl #2
     73c:	031c0300 	tsteq	ip, #0, 6
     740:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
     744:	000006f6 	strdeq	r0, [r0], -r6
     748:	0359011c 	cmpeq	r9, #28, 2
     74c:	1c030000 	stcne	0, cr0, [r3], {-0}
     750:	00000003 	andeq	r0, r0, r3
     754:	0006e117 	andeq	lr, r6, r7, lsl r1
     758:	01700700 	cmneq	r0, r0, lsl #14
     75c:	00004e07 	andeq	r4, r0, r7, lsl #28
     760:	00037000 	andeq	r7, r3, r0
     764:	002d0300 	eoreq	r0, sp, r0, lsl #6
     768:	18000000 	stmdane	r0, {}	@ <UNPREDICTABLE>
     76c:	000003ea 	andeq	r0, r0, sl, ror #7
     770:	16016c01 	strne	r6, [r1], -r1, lsl #24
     774:	00000068 	andeq	r0, r0, r8, rrx
     778:	00020cd0 	ldrdeq	r0, [r2], -r0	@ <UNPREDICTABLE>
     77c:	0000008c 	andeq	r0, r0, ip, lsl #1
     780:	03ba9c01 			@ <UNDEFINED> instruction: 0x03ba9c01
     784:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     788:	01000003 	tsteq	r0, r3
     78c:	ba42016c 	blt	1080d44 <__bss_end+0x105b10c>
     790:	02000003 	andeq	r0, r0, #3
     794:	30076c91 	mulcc	r7, r1, ip
     798:	6e000004 	cdpvs	0, 0, cr0, cr0, cr4, {0}
     79c:	029f0a01 	addseq	r0, pc, #4096	@ 0x1000
     7a0:	91020000 	mrsls	r0, (UNDEF: 2)
     7a4:	095d0770 	ldmdbeq	sp, {r4, r5, r6, r8, r9, sl}^
     7a8:	016f0000 	cmneq	pc, r0
     7ac:	00006816 	andeq	r6, r0, r6, lsl r8
     7b0:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     7b4:	01650600 	cmneq	r5, r0, lsl #12
     7b8:	5a0e0000 	bpl	3807c0 <__bss_end+0x35ab88>
     7bc:	58000006 	stmdapl	r0, {r1, r2}
     7c0:	020c2801 	andeq	r2, ip, #65536	@ 0x10000
     7c4:	0000a800 	andeq	sl, r0, r0, lsl #16
     7c8:	e49c0100 	ldr	r0, [ip], #256	@ 0x100
     7cc:	07000003 	streq	r0, [r0, -r3]
     7d0:	000006be 			@ <UNDEFINED> instruction: 0x000006be
     7d4:	5c18015a 	ldfpls	f0, [r8], {90}	@ 0x5a
     7d8:	02000000 	andeq	r0, r0, #0
     7dc:	1a007491 	bne	1da28 <__module_entries_end+0xd984>
     7e0:	000004ea 	andeq	r0, r0, sl, ror #9
     7e4:	06013a01 	streq	r3, [r1], -r1, lsl #20
     7e8:	00020b04 	andeq	r0, r2, r4, lsl #22
     7ec:	00000124 	andeq	r0, r0, r4, lsr #2
     7f0:	04159c01 	ldreq	r9, [r5], #-3073	@ 0xfffff3ff
     7f4:	6c0c0000 	stcvs	0, cr0, [ip], {-0}
     7f8:	7800020b 	stmdavc	r0, {r0, r1, r3, r9}
     7fc:	07000000 	streq	r0, [r0, -r0]
     800:	0000047d 	andeq	r0, r0, sp, ror r4
     804:	6602014f 	strvs	r0, [r2], -pc, asr #2
     808:	02000002 	andeq	r0, r0, #2
     80c:	00007491 	muleq	r0, r1, r4
     810:	00034b0e 	andeq	r4, r3, lr, lsl #22
     814:	30010000 	andcc	r0, r1, r0
     818:	d4000209 	strle	r0, [r0], #-521	@ 0xfffffdf7
     81c:	01000001 	tsteq	r0, r1
     820:	0004539c 	muleq	r4, ip, r3
     824:	04ab0700 	strteq	r0, [fp], #1792	@ 0x700
     828:	01020000 	mrseq	r0, (UNDEF: 2)
     82c:	00029f0a 	andeq	r9, r2, sl, lsl #30
     830:	70910200 	addsvc	r0, r1, r0, lsl #4
     834:	0209940c 	andeq	r9, r9, #12, 8	@ 0xc000000
     838:	00002800 	andeq	r2, r0, r0, lsl #16
     83c:	04760700 	ldrbteq	r0, [r6], #-1792	@ 0xfffff900
     840:	010d0000 	mrseq	r0, (UNDEF: 13)
     844:	0002610c 	andeq	r6, r2, ip, lsl #2
     848:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     84c:	0b1b0000 	bleq	6c0854 <__bss_end+0x69ac1c>
     850:	01000005 	tsteq	r0, r5
     854:	08400de9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8, sl, fp}^
     858:	00f00002 	rscseq	r0, r0, r2
     85c:	9c010000 	stcls	0, cr0, [r1], {-0}
     860:	00000482 	andeq	r0, r0, r2, lsl #9
     864:	0208500c 	andeq	r5, r8, #12
     868:	0000b400 	andeq	fp, r0, r0, lsl #8
     86c:	04300200 	ldrteq	r0, [r0], #-512	@ 0xfffffe00
     870:	0cf00000 	ldcleq	0, cr0, [r0]
     874:	0000029f 	muleq	r0, pc, r2	@ <UNPREDICTABLE>
     878:	00749102 	rsbseq	r9, r4, r2, lsl #2
     87c:	04c41c00 	strbeq	r1, [r4], #3072	@ 0xc00
     880:	c3010000 	movwgt	r0, #4096	@ 0x1000
     884:	02075c06 	andeq	r5, r7, #1536	@ 0x600
     888:	0000e400 	andeq	lr, r0, r0, lsl #8
     88c:	c39c0100 	orrsgt	r0, ip, #0, 2
     890:	09000004 	stmdbeq	r0, {r2}
     894:	00000468 	andeq	r0, r0, r8, ror #8
     898:	00502fc3 	subseq	r2, r0, r3, asr #31
     89c:	91020000 	mrsls	r0, (UNDEF: 2)
     8a0:	032e096c 			@ <UNDEFINED> instruction: 0x032e096c
     8a4:	45c30000 	strbmi	r0, [r3]
     8a8:	00000261 	andeq	r0, r0, r1, ror #4
     8ac:	02689102 	rsbeq	r9, r8, #-2147483648	@ 0x80000000
     8b0:	00000392 	muleq	r0, r2, r3
     8b4:	00500ec5 	subseq	r0, r0, r5, asr #29
     8b8:	91020000 	mrsls	r0, (UNDEF: 2)
     8bc:	3a1d0074 	bcc	740a94 <__bss_end+0x71ae5c>
     8c0:	01000003 	tsteq	r0, r3
     8c4:	0068168a 	rsbeq	r1, r8, sl, lsl #13
     8c8:	05f40000 	ldrbeq	r0, [r4, #0]!
     8cc:	01680002 	cmneq	r8, r2
     8d0:	9c010000 	stcls	0, cr0, [r1], {-0}
     8d4:	00036b09 	andeq	r6, r3, r9, lsl #22
     8d8:	84398a00 	ldrthi	r8, [r9], #-2560	@ 0xfffff600
     8dc:	02000001 	andeq	r0, r0, #1
     8e0:	be096c91 	mcrlt	12, 0, r6, cr9, cr1, {4}
     8e4:	8a000006 	bhi	904 <_start-0xf6fc>
     8e8:	00005c61 	andeq	r5, r0, r1, ror #24
     8ec:	68910200 	ldmvs	r1, {r9}
     8f0:	00040809 	andeq	r0, r4, r9, lsl #16
     8f4:	5c848a00 	vstmiapl	r4, {s16-s15}
     8f8:	02000000 	andeq	r0, r0, #0
     8fc:	5d026491 	cfstrspl	mvf6, [r2, #-580]	@ 0xfffffdbc
     900:	8c000009 	stchi	0, cr0, [r0], {9}
     904:	00006816 	andeq	r6, r0, r6, lsl r8
     908:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     90c:	00035f02 	andeq	r5, r3, r2, lsl #30
     910:	9f0a8d00 	svcls	0x000a8d00
     914:	02000002 	andeq	r0, r0, #2
     918:	00007091 	muleq	r0, r1, r0
     91c:	0000027d 	andeq	r0, r0, sp, ror r2
     920:	04010005 	streq	r0, [r1], #-5
     924:	0000044f 	andeq	r0, r0, pc, asr #8
     928:	0000940a 	andeq	r9, r0, sl, lsl #8
     92c:	070a1d00 	streq	r1, [sl, -r0, lsl #26]
     930:	00f10000 	rscseq	r0, r1, r0
     934:	0d5c0000 	ldcleq	0, cr0, [ip, #-0]
     938:	029c0002 	addseq	r0, ip, #2
     93c:	06350000 	ldrteq	r0, [r5], -r0
     940:	04010000 	streq	r0, [r1], #-0
     944:	00075807 	andeq	r5, r7, r7, lsl #16
     948:	05040b00 	streq	r0, [r4, #-2816]	@ 0xfffff500
     94c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     950:	46050801 	strmi	r0, [r5], -r1, lsl #16
     954:	01000001 	tsteq	r0, r1
     958:	020d0408 	andeq	r0, sp, #8, 8	@ 0x8000000
     95c:	01010000 	mrseq	r0, (UNDEF: 1)
     960:	00076706 	andeq	r6, r7, r6, lsl #14
     964:	08010100 	stmdaeq	r1, {r8}
     968:	00000765 	andeq	r0, r0, r5, ror #14
     96c:	a6050201 	strge	r0, [r5], -r1, lsl #4
     970:	01000007 	tsteq	r0, r7
     974:	00810702 	addeq	r0, r1, r2, lsl #14
     978:	04010000 	streq	r0, [r1], #-0
     97c:	00014b05 	andeq	r4, r1, r5, lsl #22
     980:	07040100 	streq	r0, [r4, -r0, lsl #2]
     984:	00000753 	andeq	r0, r0, r3, asr r7
     988:	00006504 	andeq	r6, r0, r4, lsl #10
     98c:	07080100 	streq	r0, [r8, -r0, lsl #2]
     990:	0000074e 	andeq	r0, r0, lr, asr #14
     994:	0101040c 	tsteq	r1, ip, lsl #8
     998:	00076e08 	andeq	r6, r7, r8, lsl #28
     99c:	00150500 	andseq	r0, r5, r0, lsl #10
     9a0:	61030000 	mrsvs	r0, (UNDEF: 3)
     9a4:	0000651c 	andeq	r6, r0, ip, lsl r5
     9a8:	04df0900 	ldrbeq	r0, [pc], #2304	@ 9b0 <_start-0xf650>
     9ac:	69140000 	ldmdbvs	r4, {}	@ <UNPREDICTABLE>
     9b0:	0000d608 	andeq	sp, r0, r8, lsl #12
     9b4:	04a00200 	strteq	r0, [r0], #512	@ 0x200
     9b8:	0f6b0000 	svceq	0x006b0000
     9bc:	00000081 	andeq	r0, r0, r1, lsl #1
     9c0:	05d30200 	ldrbeq	r0, [r3, #512]	@ 0x200
     9c4:	1f6c0000 	svcne	0x006c0000
     9c8:	000000db 	ldrdeq	r0, [r0], -fp
     9cc:	03df0204 	bicseq	r0, pc, #4, 4	@ 0x40000000
     9d0:	1f6d0000 	svcne	0x006d0000
     9d4:	000000db 	ldrdeq	r0, [r0], -fp
     9d8:	04510208 	ldrbeq	r0, [r1], #-520	@ 0xfffffdf8
     9dc:	096e0000 	stmdbeq	lr!, {}^	@ <UNPREDICTABLE>
     9e0:	00000078 	andeq	r0, r0, r8, ror r0
     9e4:	0553020c 	ldrbeq	r0, [r3, #-524]	@ 0xfffffdf4
     9e8:	096f0000 	stmdbeq	pc!, {}^	@ <UNPREDICTABLE>
     9ec:	00000078 	andeq	r0, r0, r8, ror r0
     9f0:	8d040010 	stchi	0, cr0, [r4, #-64]	@ 0xffffffc0
     9f4:	06000000 	streq	r0, [r0], -r0
     9f8:	000000d6 	ldrdeq	r0, [r0], -r6
     9fc:	00065005 	andeq	r5, r6, r5
     a00:	1b710200 	blne	1c41208 <__bss_end+0x1c1b5d0>
     a04:	0000008d 	andeq	r0, r0, sp, lsl #1
     a08:	0000e004 	andeq	lr, r0, r4
     a0c:	06d10900 	ldrbeq	r0, [r1], r0, lsl #18
     a10:	730c0000 	movwvc	r0, #49152	@ 0xc000
     a14:	00012208 	andeq	r2, r1, r8, lsl #4
     a18:	04a00200 	strteq	r0, [r0], #512	@ 0x200
     a1c:	0f750000 	svceq	0x00750000
     a20:	00000081 	andeq	r0, r0, r1, lsl #1
     a24:	05d30200 	ldrbeq	r0, [r3, #512]	@ 0x200
     a28:	1e760000 	cdpne	0, 7, cr0, cr6, cr0, {0}
     a2c:	000000db 	ldrdeq	r0, [r0], -fp
     a30:	03df0204 	bicseq	r0, pc, #4, 4	@ 0x40000000
     a34:	1e770000 	cdpne	0, 7, cr0, cr7, cr0, {0}
     a38:	000000db 	ldrdeq	r0, [r0], -fp
     a3c:	fd050008 	stc2	0, cr0, [r5, #-32]	@ 0xffffffe0
     a40:	02000004 	andeq	r0, r0, #4
     a44:	00f12079 	rscseq	r2, r1, r9, ror r0
     a48:	22040000 	andcs	r0, r4, #0
     a4c:	09000001 	stmdbeq	r0, {r0}
     a50:	0000049a 	muleq	r0, sl, r4
     a54:	64107e14 	ldrvs	r7, [r0], #-3604	@ 0xfffff1ec
     a58:	02000001 	andeq	r0, r0, #1
     a5c:	00000640 	andeq	r0, r0, r0, asr #12
     a60:	006c2280 	rsbeq	r2, ip, r0, lsl #5
     a64:	02000000 	andeq	r0, r0, #0
     a68:	000006c9 	andeq	r0, r0, r9, asr #13
     a6c:	01641781 	cmneq	r4, r1, lsl #15
     a70:	02040000 	andeq	r0, r4, #0
     a74:	00000676 	andeq	r0, r0, r6, ror r6
     a78:	012e1982 	smlawbeq	lr, r2, r9, r1
     a7c:	00080000 	andeq	r0, r8, r0
     a80:	0000ec06 	andeq	lr, r0, r6, lsl #24
     a84:	07b10500 	ldreq	r0, [r1, r0, lsl #10]!
     a88:	83020000 	movwhi	r0, #8192	@ 0x2000
     a8c:	00013303 	andeq	r3, r1, r3, lsl #6
     a90:	04240700 	strteq	r0, [r4], #-1792	@ 0xfffff900
     a94:	60b70000 	adcsvs	r0, r7, r0
     a98:	9800020f 	stmdals	r0, {r0, r1, r2, r3, r9}
     a9c:	01000000 	mrseq	r0, (UNDEF: 0)
     aa0:	0001a69c 	muleq	r1, ip, r6
     aa4:	07730300 	ldrbeq	r0, [r3, -r0, lsl #6]!
     aa8:	1eb70000 	cdpne	0, 11, cr0, cr7, cr0, {0}
     aac:	000001a6 	andeq	r0, r0, r6, lsr #3
     ab0:	086c9102 	stmdaeq	ip!, {r1, r8, ip, pc}^
     ab4:	000007b0 			@ <UNDEFINED> instruction: 0x000007b0
     ab8:	01ab09b9 			@ <UNDEFINED> instruction: 0x01ab09b9
     abc:	91020000 	mrsls	r0, (UNDEF: 2)
     ac0:	e0060074 	and	r0, r6, r4, ror r0
     ac4:	06000000 	streq	r0, [r0], -r0
     ac8:	00000169 	andeq	r0, r0, r9, ror #2
     acc:	0003b607 	andeq	fp, r3, r7, lsl #12
     ad0:	0e887e00 	cdpeq	14, 8, cr7, cr8, cr0, {0}
     ad4:	00d80002 	sbcseq	r0, r8, r2
     ad8:	9c010000 	stcls	0, cr0, [r1], {-0}
     adc:	000001fd 	strdeq	r0, [r0], -sp
     ae0:	0007b003 	andeq	fp, r7, r3
     ae4:	ab1a7e00 	blge	6a02ec <__bss_end+0x67a6b4>
     ae8:	02000001 	andeq	r0, r0, #1
     aec:	b7036c91 			@ <UNDEFINED> instruction: 0xb7036c91
     af0:	7e000007 	cdpvc	0, 0, cr0, cr0, cr7, {0}
     af4:	0001a62d 	andeq	sl, r1, sp, lsr #12
     af8:	68910200 	ldmvs	r1, {r9}
     afc:	00079b08 	andeq	r9, r7, r8, lsl #22
     b00:	64158000 	ldrvs	r8, [r5], #-0
     b04:	02000001 	andeq	r0, r0, #1
     b08:	82087491 	andhi	r7, r8, #-1862270976	@ 0x91000000
     b0c:	81000007 	tsthi	r0, r7
     b10:	0000810e 	andeq	r8, r0, lr, lsl #2
     b14:	70910200 	addsvc	r0, r1, r0, lsl #4
     b18:	04590700 	ldrbeq	r0, [r9], #-1792	@ 0xfffff900
     b1c:	f0670000 			@ <UNDEFINED> instruction: 0xf0670000
     b20:	9800020d 	stmdals	r0, {r0, r2, r3, r9}
     b24:	01000000 	mrseq	r0, (UNDEF: 0)
     b28:	00023c9c 	muleq	r2, ip, ip
     b2c:	07b00300 	ldreq	r0, [r0, r0, lsl #6]!
     b30:	1d670000 	stclne	0, cr0, [r7, #-0]
     b34:	000001ab 	andeq	r0, r0, fp, lsr #3
     b38:	036c9102 	cmneq	ip, #-2147483648	@ 0x80000000
     b3c:	000007b7 			@ <UNDEFINED> instruction: 0x000007b7
     b40:	01a63067 			@ <UNDEFINED> instruction: 0x01a63067
     b44:	91020000 	mrsls	r0, (UNDEF: 2)
     b48:	06c90868 	strbeq	r0, [r9], r8, ror #16
     b4c:	16690000 	strbtne	r0, [r9], -r0
     b50:	00000164 	andeq	r0, r0, r4, ror #2
     b54:	00749102 	rsbseq	r9, r4, r2, lsl #2
     b58:	0006f607 	andeq	pc, r6, r7, lsl #12
     b5c:	0dc46000 	stcleq	0, cr6, [r4]
     b60:	002c0002 	eoreq	r0, ip, r2
     b64:	9c010000 	stcls	0, cr0, [r1], {-0}
     b68:	0000025f 	andeq	r0, r0, pc, asr r2
     b6c:	00079403 	andeq	r9, r7, r3, lsl #8
     b70:	a6266000 	strtge	r6, [r6], -r0
     b74:	02000001 	andeq	r0, r0, #1
     b78:	0d007491 	cfstrseq	mvf7, [r0, #-580]	@ 0xfffffdbc
     b7c:	0000039e 	muleq	r0, lr, r3
     b80:	5c064c01 	stcpl	12, cr4, [r6], {1}
     b84:	6800020d 	stmdavs	r0, {r0, r2, r3, r9}
     b88:	01000000 	mrseq	r0, (UNDEF: 0)
     b8c:	07b0039c 			@ <UNDEFINED> instruction: 0x07b0039c
     b90:	1e4c0000 	cdpne	0, 4, cr0, cr12, cr0, {0}
     b94:	000001ab 	andeq	r0, r0, fp, lsr #3
     b98:	00749102 	rsbseq	r9, r4, r2, lsl #2
     b9c:	00083f00 	andeq	r3, r8, r0, lsl #30
     ba0:	01000500 	tsteq	r0, r0, lsl #10
     ba4:	00051e04 	andeq	r1, r5, r4, lsl #28
     ba8:	00941300 	addseq	r1, r4, r0, lsl #6
     bac:	5b1d0000 	blpl	740bb4 <__bss_end+0x71af7c>
     bb0:	f100000a 	cps	#10
     bb4:	f8000000 			@ <UNDEFINED> instruction: 0xf8000000
     bb8:	b000020f 	andlt	r0, r0, pc, lsl #4
     bbc:	2300000b 	movwcs	r0, #11
     bc0:	07000008 	streq	r0, [r0, -r8]
     bc4:	000003d8 	ldrdeq	r0, [r0], -r8
     bc8:	3217d602 	andscc	sp, r7, #2097152	@ 0x200000
     bcc:	05000000 	streq	r0, [r0, #-0]
     bd0:	07580704 	ldrbeq	r0, [r8, -r4, lsl #14]
     bd4:	04140000 	ldreq	r0, [r4], #-0
     bd8:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
     bdc:	05080500 	streq	r0, [r8, #-1280]	@ 0xfffffb00
     be0:	00000146 	andeq	r0, r0, r6, asr #2
     be4:	0d040805 	stceq	8, cr0, [r4, #-20]	@ 0xffffffec
     be8:	05000002 	streq	r0, [r0, #-2]
     bec:	07670601 	strbeq	r0, [r7, -r1, lsl #12]!
     bf0:	01050000 	mrseq	r0, (UNDEF: 5)
     bf4:	00076508 	andeq	r6, r7, r8, lsl #10
     bf8:	05020500 	streq	r0, [r2, #-1280]	@ 0xfffffb00
     bfc:	000007a6 	andeq	r0, r0, r6, lsr #15
     c00:	81070205 	tsthi	r7, r5, lsl #4
     c04:	05000000 	streq	r0, [r0, #-0]
     c08:	014b0504 	cmpeq	fp, r4, lsl #10
     c0c:	6a0a0000 	bvs	280c14 <__bss_end+0x25afdc>
     c10:	05000000 	streq	r0, [r0, #-0]
     c14:	07530704 	ldrbeq	r0, [r3, -r4, lsl #14]
     c18:	760a0000 	strvc	r0, [sl], -r0
     c1c:	05000000 	streq	r0, [r0, #-0]
     c20:	074e0708 	strbeq	r0, [lr, -r8, lsl #14]
     c24:	04150000 	ldreq	r0, [r5], #-0
     c28:	00008908 	andeq	r8, r0, r8, lsl #18
     c2c:	08010500 	stmdaeq	r1, {r8, sl}
     c30:	0000076e 	andeq	r0, r0, lr, ror #14
     c34:	0000a106 	andeq	sl, r0, r6, lsl #2
     c38:	00970800 	addseq	r0, r7, r0, lsl #16
     c3c:	07160000 	ldreq	r0, [r6, -r0]
     c40:	00000015 	andeq	r0, r0, r5, lsl r0
     c44:	761c6103 	ldrvc	r6, [ip], -r3, lsl #2
     c48:	0b000000 	bleq	c50 <_start-0xf3b0>
     c4c:	000004df 	ldrdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
     c50:	08690414 	stmdaeq	r9!, {r2, r4, sl}^
     c54:	000000fd 	strdeq	r0, [r0], -sp
     c58:	0004a002 	andeq	sl, r4, r2
     c5c:	0f6b0400 	svceq	0x006b0400
     c60:	000000a2 	andeq	r0, r0, r2, lsr #1
     c64:	05d30200 	ldrbeq	r0, [r3, #512]	@ 0x200
     c68:	6c040000 	stcvs	0, cr0, [r4], {-0}
     c6c:	0001021f 	andeq	r0, r1, pc, lsl r2
     c70:	df020400 	svcle	0x00020400
     c74:	04000003 	streq	r0, [r0], #-3
     c78:	01021f6d 	tsteq	r2, sp, ror #30
     c7c:	02080000 	andeq	r0, r8, #0
     c80:	00000451 	andeq	r0, r0, r1, asr r4
     c84:	89096e04 	stmdbhi	r9, {r2, r9, sl, fp, sp, lr}
     c88:	0c000000 	stceq	0, cr0, [r0], {-0}
     c8c:	00055302 	andeq	r5, r5, r2, lsl #6
     c90:	096f0400 	stmdbeq	pc!, {sl}^	@ <UNPREDICTABLE>
     c94:	00000089 	andeq	r0, r0, r9, lsl #1
     c98:	ae0a0010 	mcrge	0, 0, r0, cr10, cr0, {0}
     c9c:	06000000 	streq	r0, [r0], -r0
     ca0:	000000fd 	strdeq	r0, [r0], -sp
     ca4:	00065007 	andeq	r5, r6, r7
     ca8:	1b710400 	blne	1c41cb0 <__bss_end+0x1c1c078>
     cac:	000000ae 	andeq	r0, r0, lr, lsr #1
     cb0:	0001070a 	andeq	r0, r1, sl, lsl #14
     cb4:	06d10b00 	ldrbeq	r0, [r1], r0, lsl #22
     cb8:	040c0000 	streq	r0, [ip], #-0
     cbc:	014d0873 	hvceq	53379	@ 0xd083
     cc0:	a0020000 	andge	r0, r2, r0
     cc4:	04000004 	streq	r0, [r0], #-4
     cc8:	00a20f75 	adceq	r0, r2, r5, ror pc
     ccc:	02000000 	andeq	r0, r0, #0
     cd0:	000005d3 	ldrdeq	r0, [r0], -r3
     cd4:	021e7604 	andseq	r7, lr, #4, 12	@ 0x400000
     cd8:	04000001 	streq	r0, [r0], #-1
     cdc:	0003df02 	andeq	sp, r3, r2, lsl #30
     ce0:	1e770400 	cdpne	4, 7, cr0, cr7, cr0, {0}
     ce4:	00000102 	andeq	r0, r0, r2, lsl #2
     ce8:	fd070008 	stc2	0, cr0, [r7, #-32]	@ 0xffffffe0
     cec:	04000004 	streq	r0, [r0], #-4
     cf0:	01182079 	tsteq	r8, r9, ror r0
     cf4:	4d0a0000 	stcmi	0, cr0, [sl, #-0]
     cf8:	0b000001 	bleq	d04 <_start-0xf2fc>
     cfc:	0000049a 	muleq	r0, sl, r4
     d00:	107e0414 	rsbsne	r0, lr, r4, lsl r4
     d04:	00000193 	muleq	r0, r3, r1
     d08:	00064002 	andeq	r4, r6, r2
     d0c:	22800400 	addcs	r0, r0, #0, 8
     d10:	0000007d 	andeq	r0, r0, sp, ror r0
     d14:	06c90200 	strbeq	r0, [r9], r0, lsl #4
     d18:	81040000 	mrshi	r0, (UNDEF: 4)
     d1c:	00019317 	andeq	r9, r1, r7, lsl r3
     d20:	76020400 	strvc	r0, [r2], -r0, lsl #8
     d24:	04000006 	streq	r0, [r0], #-6
     d28:	01591982 	cmpeq	r9, r2, lsl #19
     d2c:	00080000 	andeq	r0, r8, r0
     d30:	00011306 	andeq	r1, r1, r6, lsl #6
     d34:	07b10700 	ldreq	r0, [r1, r0, lsl #14]!
     d38:	83040000 	movwhi	r0, #16384	@ 0x4000
     d3c:	00015e03 	andeq	r5, r1, r3, lsl #28
     d40:	01980800 	orrseq	r0, r8, r0, lsl #16
     d44:	910b0000 	mrsls	r0, (UNDEF: 11)
     d48:	08000008 	stmdaeq	r0, {r3}
     d4c:	d1106805 	tstle	r0, r5, lsl #16
     d50:	02000001 	andeq	r0, r0, #1
     d54:	000008e7 	andeq	r0, r0, r7, ror #17
     d58:	6a106a05 	bvs	41b574 <__bss_end+0x3f593c>
     d5c:	00000000 	andeq	r0, r0, r0
     d60:	00092002 	andeq	r2, r9, r2
     d64:	106b0500 	rsbne	r0, fp, r0, lsl #10
     d68:	000000a2 	andeq	r0, r0, r2, lsr #1
     d6c:	4f070004 	svcmi	0x00070004
     d70:	05000009 	streq	r0, [r0, #-9]
     d74:	01a9036c 			@ <UNDEFINED> instruction: 0x01a9036c
     d78:	0f0b0000 	svceq	0x000b0000
     d7c:	4c00000a 	stcmi	0, cr0, [r0], {10}
     d80:	7a107901 	bvc	41f18c <__bss_end+0x3f9554>
     d84:	02000002 	andeq	r0, r0, #2
     d88:	00000919 	andeq	r0, r0, r9, lsl r9
     d8c:	7a0f7b01 	bvc	3df998 <__bss_end+0x3b9d60>
     d90:	00000002 	andeq	r0, r0, r2
     d94:	000b1502 	andeq	r1, fp, r2, lsl #10
     d98:	0f7c0100 	svceq	0x007c0100
     d9c:	0000027a 	andeq	r0, r0, sl, ror r2
     da0:	0b790204 	bleq	1e415b8 <__bss_end+0x1e1b980>
     da4:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
     da8:	00027a0f 	andeq	r7, r2, pc, lsl #20
     dac:	dc020800 	stcle	8, cr0, [r2], {-0}
     db0:	01000008 	tsteq	r0, r8
     db4:	027a0f7f 	rsbseq	r0, sl, #508	@ 0x1fc
     db8:	020c0000 	andeq	r0, ip, #0
     dbc:	00000b4b 	andeq	r0, r0, fp, asr #22
     dc0:	98088101 	stmdals	r8, {r0, r8, pc}
     dc4:	10000001 	andne	r0, r0, r1
     dc8:	0009b702 	andeq	fp, r9, r2, lsl #14
     dcc:	08820100 	stmeq	r2, {r8}
     dd0:	00000198 	muleq	r0, r8, r1
     dd4:	0ab70224 	beq	fedc166c <_estack+0xf6da166c>
     dd8:	84010000 	strhi	r0, [r1], #-0
     ddc:	00007d22 	andeq	r7, r0, r2, lsr #26
     de0:	a0023800 	andge	r3, r2, r0, lsl #16
     de4:	01000009 	tsteq	r0, r9
     de8:	00761985 	rsbseq	r1, r6, r5, lsl #19
     dec:	023c0000 	eorseq	r0, ip, #0
     df0:	00000b83 	andeq	r0, r0, r3, lsl #23
     df4:	76198601 	ldrvc	r8, [r9], -r1, lsl #12
     df8:	40000000 	andmi	r0, r0, r0
     dfc:	000b0d02 	andeq	r0, fp, r2, lsl #26
     e00:	20880100 	addcs	r0, r8, r0, lsl #2
     e04:	00000071 	andeq	r0, r0, r1, ror r0
     e08:	0a2e0244 	beq	b81720 <__bss_end+0xb5bae8>
     e0c:	89010000 	stmdbhi	r1, {}	@ <UNPREDICTABLE>
     e10:	00007120 	andeq	r7, r0, r0, lsr #2
     e14:	06004800 	streq	r4, [r0], -r0, lsl #16
     e18:	0000004e 	andeq	r0, r0, lr, asr #32
     e1c:	0009fa07 	andeq	pc, r9, r7, lsl #20
     e20:	03900100 	orrseq	r0, r0, #0, 2
     e24:	000001dd 	ldrdeq	r0, [r0], -sp
     e28:	00096507 	andeq	r6, r9, r7, lsl #10
     e2c:	12980100 	addsne	r0, r8, #0, 2
     e30:	0000029c 	muleq	r0, ip, r2
     e34:	00028b08 	andeq	r8, r2, r8, lsl #22
     e38:	027f0600 	rsbseq	r0, pc, #0, 12
     e3c:	9c080000 	stcls	0, cr0, [r8], {-0}
     e40:	10000002 	andne	r0, r0, r2
     e44:	00000a4a 	andeq	r0, r0, sl, asr #20
     e48:	d51704ea 	ldrle	r0, [r7, #-1258]	@ 0xfffffb16
     e4c:	06000008 	streq	r0, [r0], -r8
     e50:	0089091f 	addeq	r0, r9, pc, lsl r9
     e54:	02cd0000 	sbceq	r0, sp, #0
     e58:	89040000 	stmdbhi	r4, {}	@ <UNPREDICTABLE>
     e5c:	04000000 	streq	r0, [r0], #-0
     e60:	00000097 	muleq	r0, r7, r0
     e64:	00002604 	andeq	r2, r0, r4, lsl #12
     e68:	1f180000 	svcne	0x00180000
     e6c:	0500000a 	streq	r0, [r0, #-10]
     e70:	6a1603be 	bvs	581d70 <__bss_end+0x55c138>
     e74:	0c000000 	stceq	0, cr0, [r0], {-0}
     e78:	00000903 	andeq	r0, r0, r3, lsl #18
     e7c:	f104aa05 			@ <UNDEFINED> instruction: 0xf104aa05
     e80:	04000002 	streq	r0, [r0], #-2
     e84:	000002f6 	strdeq	r0, [r0], -r6
     e88:	0000a204 	andeq	sl, r0, r4, lsl #4
     e8c:	a4060000 	strge	r0, [r6], #-0
     e90:	08000001 	stmdaeq	r0, {r0}
     e94:	000002f1 	strdeq	r0, [r0], -r1
     e98:	000b1c0d 	andeq	r1, fp, sp, lsl #24
     e9c:	04e40500 	strbteq	r0, [r4], #1280	@ 0x500
     ea0:	00006a0f 	andeq	r6, r0, pc, lsl #20
     ea4:	00031700 	andeq	r1, r3, r0, lsl #14
     ea8:	031c0400 	tsteq	ip, #0, 8
     eac:	26040000 	strcs	r0, [r4], -r0
     eb0:	00000003 	andeq	r0, r0, r3
     eb4:	0001d106 	andeq	sp, r1, r6, lsl #2
     eb8:	03170800 	tsteq	r7, #0, 16
     ebc:	a2060000 	andge	r0, r6, #0
     ec0:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
     ec4:	00000321 	andeq	r0, r0, r1, lsr #6
     ec8:	000b3b10 	andeq	r3, fp, r0, lsl fp
     ecc:	0c038a00 			@ <UNDEFINED> instruction: 0x0c038a00
     ed0:	00000b8e 	andeq	r0, r0, lr, lsl #23
     ed4:	4404de05 	strmi	sp, [r4], #-3589	@ 0xfffff1fb
     ed8:	04000003 	streq	r0, [r0], #-3
     edc:	0000031c 	andeq	r0, r0, ip, lsl r3
     ee0:	09720c00 	ldmdbeq	r2!, {sl, fp}^
     ee4:	71070000 	mrsvc	r0, (UNDEF: 7)
     ee8:	00035601 	andeq	r5, r3, r1, lsl #12
     eec:	00890400 	addeq	r0, r9, r0, lsl #8
     ef0:	0d000000 	stceq	0, cr0, [r0, #-0]
     ef4:	000006e1 	andeq	r0, r0, r1, ror #13
     ef8:	07017007 	streq	r7, [r1, -r7]
     efc:	00000089 	andeq	r0, r0, r9, lsl #1
     f00:	0000036d 	andeq	r0, r0, sp, ror #6
     f04:	00002604 	andeq	r2, r0, r4, lsl #12
     f08:	d7110000 	ldrle	r0, [r1, -r0]
     f0c:	fd000002 	stc2	0, cr0, [r0, #-8]
     f10:	00039e0c 	andeq	r9, r3, ip, lsl #28
     f14:	01110400 	tsteq	r1, r0, lsl #8
     f18:	00000385 	andeq	r0, r0, r5, lsl #7
     f1c:	00038504 	andeq	r8, r3, r4, lsl #10
     f20:	98060000 	stmdals	r6, {}	@ <UNPREDICTABLE>
     f24:	0d000001 	stceq	0, cr0, [r0, #-4]
     f28:	00000ae5 	andeq	r0, r0, r5, ror #21
     f2c:	1604ca05 	strne	ip, [r4], -r5, lsl #20
     f30:	0000006a 	andeq	r0, r0, sl, rrx
     f34:	000003a1 	andeq	r0, r0, r1, lsr #7
     f38:	0002f604 	andeq	pc, r2, r4, lsl #12
     f3c:	b2110000 	andslt	r0, r1, #0
     f40:	fc000002 	stc2	0, cr0, [r0], {2}
     f44:	0007ea0e 	andeq	lr, r7, lr, lsl #20
     f48:	16056900 	strne	r6, [r5], -r0, lsl #18
     f4c:	0000006a 	andeq	r0, r0, sl, rrx
     f50:	00021b60 	andeq	r1, r2, r0, ror #22
     f54:	00000048 	andeq	r0, r0, r8, asr #32
     f58:	03e09c01 	mvneq	r9, #256	@ 0x100
     f5c:	71010000 	mrsvc	r0, (UNDEF: 1)
     f60:	6900000b 	stmdbvs	r0, {r0, r1, r3}
     f64:	02974305 	addseq	r4, r7, #335544320	@ 0x14000000
     f68:	91020000 	mrsls	r0, (UNDEF: 2)
     f6c:	095d036c 	ldmdbeq	sp, {r2, r3, r5, r6, r8, r9}^
     f70:	056b0000 	strbeq	r0, [fp, #-0]!
     f74:	00006a16 	andeq	r6, r0, r6, lsl sl
     f78:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     f7c:	09911200 	ldmibeq	r1, {r9, ip}
     f80:	055d0000 	ldrbeq	r0, [sp, #-0]
     f84:	0000006a 	andeq	r0, r0, sl, rrx
     f88:	00021b14 	andeq	r1, r2, r4, lsl fp
     f8c:	0000004c 	andeq	r0, r0, ip, asr #32
     f90:	04189c01 	ldreq	r9, [r8], #-3073	@ 0xfffff3ff
     f94:	71010000 	mrsvc	r0, (UNDEF: 1)
     f98:	5d00000b 	stcpl	0, cr0, [r0, #-44]	@ 0xffffffd4
     f9c:	02974005 	addseq	r4, r7, #5
     fa0:	91020000 	mrsls	r0, (UNDEF: 2)
     fa4:	095d036c 	ldmdbeq	sp, {r2, r3, r5, r6, r8, r9}^
     fa8:	055f0000 	ldrbeq	r0, [pc, #-0]	@ fb0 <_start-0xf050>
     fac:	00006a16 	andeq	r6, r0, r6, lsl sl
     fb0:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     fb4:	08340e00 	ldmdaeq	r4!, {r9, sl, fp}
     fb8:	05520000 	ldrbeq	r0, [r2, #-0]
     fbc:	00006a16 	andeq	r6, r0, r6, lsl sl
     fc0:	021ad400 	andseq	sp, sl, #0, 8
     fc4:	00004000 	andeq	r4, r0, r0
     fc8:	519c0100 	orrspl	r0, ip, r0, lsl #2
     fcc:	01000004 	tsteq	r0, r4
     fd0:	00000b71 	andeq	r0, r0, r1, ror fp
     fd4:	97440552 	smlsldls	r0, r4, r2, r5
     fd8:	02000002 	andeq	r0, r0, #2
     fdc:	5d036c91 	stcpl	12, cr6, [r3, #-580]	@ 0xfffffdbc
     fe0:	54000009 	strpl	r0, [r0], #-9
     fe4:	006a1605 	rsbeq	r1, sl, r5, lsl #12
     fe8:	91020000 	mrsls	r0, (UNDEF: 2)
     fec:	4e120074 	mrcmi	0, 0, r0, cr2, cr4, {3}
     ff0:	46000008 	strmi	r0, [r0], -r8
     ff4:	00006a05 	andeq	r6, r0, r5, lsl #20
     ff8:	021a9000 	andseq	r9, sl, #0
     ffc:	00004400 	andeq	r4, r0, r0, lsl #8
    1000:	899c0100 	ldmibhi	ip, {r8}
    1004:	01000004 	tsteq	r0, r4
    1008:	00000b71 	andeq	r0, r0, r1, ror fp
    100c:	97410546 	strbls	r0, [r1, -r6, asr #10]
    1010:	02000002 	andeq	r0, r0, #2
    1014:	5d036c91 	stcpl	12, cr6, [r3, #-580]	@ 0xfffffdbc
    1018:	48000009 	stmdami	r0, {r0, r3}
    101c:	006a1605 	rsbeq	r1, sl, r5, lsl #12
    1020:	91020000 	mrsls	r0, (UNDEF: 2)
    1024:	fe0f0074 	mcr2	0, 0, r0, cr15, cr4, {3}
    1028:	0600000a 	streq	r0, [r0], -sl
    102c:	02198c05 	andseq	r8, r9, #1280	@ 0x500
    1030:	00010400 	andeq	r0, r1, r0, lsl #8
    1034:	ae9c0100 	fmlgee	f0, f4, f0
    1038:	01000004 	tsteq	r0, r4
    103c:	00000b71 	andeq	r0, r0, r1, ror fp
    1040:	8b2a0506 	blhi	a82460 <__bss_end+0xa5c828>
    1044:	02000002 	andeq	r0, r0, #2
    1048:	0f007491 	svceq	0x00007491
    104c:	0000085e 	andeq	r0, r0, lr, asr r8
    1050:	18fc04f8 	ldmne	ip!, {r3, r4, r5, r6, r7, sl}^
    1054:	00900002 	addseq	r0, r0, r2
    1058:	9c010000 	stcls	0, cr0, [r1], {-0}
    105c:	000004e2 	andeq	r0, r0, r2, ror #9
    1060:	000b7101 	andeq	r7, fp, r1, lsl #2
    1064:	3204f800 	andcc	pc, r4, #0, 16
    1068:	000002a1 	andeq	r0, r0, r1, lsr #5
    106c:	01749102 	cmneq	r4, r2, lsl #2
    1070:	00000ac9 	andeq	r0, r0, r9, asr #21
    1074:	974704f8 			@ <UNDEFINED> instruction: 0x974704f8
    1078:	02000000 	andeq	r0, r0, #0
    107c:	0f007091 	svceq	0x00007091
    1080:	0000087e 	andeq	r0, r0, lr, ror r8
    1084:	17d004d2 			@ <UNDEFINED> instruction: 0x17d004d2
    1088:	012c0002 			@ <UNDEFINED> instruction: 0x012c0002
    108c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1090:	00000525 	andeq	r0, r0, r5, lsr #10
    1094:	000b7101 	andeq	r7, fp, r1, lsl #2
    1098:	2904d200 	stmdbcs	r4, {r9, ip, lr, pc}
    109c:	0000029c 	muleq	r0, ip, r2
    10a0:	01749102 	cmneq	r4, r2, lsl #2
    10a4:	000009ec 	andeq	r0, r0, ip, ror #19
    10a8:	973e04d2 			@ <UNDEFINED> instruction: 0x973e04d2
    10ac:	02000000 	andeq	r0, r0, #0
    10b0:	31017091 	swpcc	r7, r1, [r1]	@ <UNPREDICTABLE>
    10b4:	d200000b 	andle	r0, r0, #11
    10b8:	006a5b04 	rsbeq	r5, sl, r4, lsl #22
    10bc:	91020000 	mrsls	r0, (UNDEF: 2)
    10c0:	f619006c 			@ <UNDEFINED> instruction: 0xf619006c
    10c4:	01000008 	tsteq	r0, r8
    10c8:	9c0604a9 	cfstrsls	mvf0, [r6], {169}	@ 0xa9
    10cc:	34000217 	strcc	r0, [r0], #-535	@ 0xfffffde9
    10d0:	01000000 	mrseq	r0, (UNDEF: 0)
    10d4:	00054c9c 	muleq	r5, ip, ip
    10d8:	0b710100 	bleq	1c414e0 <__bss_end+0x1c1b8a8>
    10dc:	04a90000 	strteq	r0, [r9], #0
    10e0:	00028b21 	andeq	r8, r2, r1, lsr #22
    10e4:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    10e8:	09ce0e00 	stmibeq	lr, {r9, sl, fp}^
    10ec:	049d0000 	ldreq	r0, [sp], #0
    10f0:	00007618 	andeq	r7, r0, r8, lsl r6
    10f4:	02176c00 	andseq	r6, r7, #0, 24
    10f8:	00003000 	andeq	r3, r0, r0
    10fc:	859c0100 	ldrhi	r0, [ip, #256]	@ 0x100
    1100:	01000005 	tsteq	r0, r5
    1104:	00000b71 	andeq	r0, r0, r1, ror fp
    1108:	974a049d 			@ <UNDEFINED> instruction: 0x974a049d
    110c:	02000002 	andeq	r0, r0, #2
    1110:	5c036c91 	stcpl	12, cr6, [r3], {145}	@ 0x91
    1114:	9f000009 	svcls	0x00000009
    1118:	00761804 	rsbseq	r1, r6, r4, lsl #16
    111c:	91020000 	mrsls	r0, (UNDEF: 2)
    1120:	03090074 	movweq	r0, #36980	@ 0x9074
    1124:	8f000008 	svchi	0x00000008
    1128:	00761804 	rsbseq	r1, r6, r4, lsl #16
    112c:	17380000 	ldrne	r0, [r8, -r0]!
    1130:	00340002 	eorseq	r0, r4, r2
    1134:	9c010000 	stcls	0, cr0, [r1], {-0}
    1138:	000005be 			@ <UNDEFINED> instruction: 0x000005be
    113c:	000b7101 	andeq	r7, fp, r1, lsl #2
    1140:	43048f00 	movwmi	r8, #20224	@ 0x4f00
    1144:	00000297 	muleq	r0, r7, r2
    1148:	036c9102 	cmneq	ip, #-2147483648	@ 0x80000000
    114c:	0000095c 	andeq	r0, r0, ip, asr r9
    1150:	76180491 			@ <UNDEFINED> instruction: 0x76180491
    1154:	02000000 	andeq	r0, r0, #0
    1158:	09007491 	stmdbeq	r0, {r0, r4, r7, sl, ip, sp, lr}
    115c:	0000097c 	andeq	r0, r0, ip, ror r9
    1160:	6a160456 	bvs	5822c0 <__bss_end+0x55c688>
    1164:	58000000 	stmdapl	r0, {}	@ <UNPREDICTABLE>
    1168:	e0000216 	and	r0, r0, r6, lsl r2
    116c:	01000000 	mrseq	r0, (UNDEF: 0)
    1170:	0006249c 	muleq	r6, ip, r4
    1174:	0b710100 	bleq	1c4157c <__bss_end+0x1c1b944>
    1178:	04560000 	ldrbeq	r0, [r6], #-0
    117c:	00028b39 	andeq	r8, r2, r9, lsr fp
    1180:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1184:	000ac901 	andeq	ip, sl, r1, lsl #18
    1188:	4f045600 	svcmi	0x00045600
    118c:	0000008b 	andeq	r0, r0, fp, lsl #1
    1190:	01689102 	cmneq	r8, r2, lsl #2
    1194:	0000081a 	andeq	r0, r0, sl, lsl r8
    1198:	246f0456 	strbtcs	r0, [pc], #-1110	@ 11a0 <_start-0xee60>
    119c:	02000006 	andeq	r0, r0, #6
    11a0:	5d036491 	cfstrspl	mvf6, [r3, #-580]	@ 0xfffffdbc
    11a4:	58000009 	stmdapl	r0, {r0, r3}
    11a8:	006a1604 	rsbeq	r1, sl, r4, lsl #12
    11ac:	91020000 	mrsls	r0, (UNDEF: 2)
    11b0:	0aa00374 	beq	fe801f88 <_estack+0xf67e1f88>
    11b4:	04590000 	ldrbeq	r0, [r9], #-0
    11b8:	00007618 	andeq	r7, r0, r8, lsl r6
    11bc:	70910200 	addsvc	r0, r1, r0, lsl #4
    11c0:	006a0600 	rsbeq	r0, sl, r0, lsl #12
    11c4:	9b090000 	blls	2411cc <__bss_end+0x21b594>
    11c8:	c1000008 	tstgt	r0, r8
    11cc:	006a1603 	rsbeq	r1, sl, r3, lsl #12
    11d0:	14540000 	ldrbne	r0, [r4], #-0
    11d4:	02040002 	andeq	r0, r4, #2
    11d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    11dc:	000006ad 	andeq	r0, r0, sp, lsr #13
    11e0:	000b7101 	andeq	r7, fp, r1, lsl #2
    11e4:	3903c100 	stmdbcc	r3, {r8, lr, pc}
    11e8:	0000028b 	andeq	r0, r0, fp, lsl #5
    11ec:	01649102 	cmneq	r4, r2, lsl #2
    11f0:	00000ac9 	andeq	r0, r0, r9, asr #21
    11f4:	8b4f03c1 	blhi	13c2100 <__bss_end+0x139c4c8>
    11f8:	02000000 	andeq	r0, r0, #0
    11fc:	c5016091 	strgt	r6, [r1, #-145]	@ 0xffffff6f
    1200:	c1000010 	tstgt	r0, r0, lsl r0
    1204:	00a26603 	adceq	r6, r2, r3, lsl #12
    1208:	91020000 	mrsls	r0, (UNDEF: 2)
    120c:	0930015c 	ldmdbeq	r0!, {r2, r3, r4, r6, r8}
    1210:	03c10000 	biceq	r0, r1, #0
    1214:	00006a82 	andeq	r6, r0, r2, lsl #21
    1218:	58910200 	ldmpl	r1, {r9}
    121c:	000a0103 	andeq	r0, sl, r3, lsl #2
    1220:	1603c300 	strne	ip, [r3], -r0, lsl #6
    1224:	0000006a 	andeq	r0, r0, sl, rrx
    1228:	03749102 	cmneq	r4, #-2147483648	@ 0x80000000
    122c:	00000c48 	andeq	r0, r0, r8, asr #24
    1230:	d10e03c4 	smlabtle	lr, r4, r3, r0
    1234:	02000001 	andeq	r0, r0, #1
    1238:	be036891 	mcrlt	8, 0, r6, cr3, cr1, {4}
    123c:	c5000008 	strgt	r0, [r0, #-8]
    1240:	027a0e03 	rsbseq	r0, sl, #3, 28	@ 0x30
    1244:	91020000 	mrsls	r0, (UNDEF: 2)
    1248:	c5090070 	strgt	r0, [r9, #-112]	@ 0xffffff90
    124c:	86000007 	strhi	r0, [r0], -r7
    1250:	006a1603 	rsbeq	r1, sl, r3, lsl #12
    1254:	13780000 	cmnne	r8, #0
    1258:	00dc0002 	sbcseq	r0, ip, r2
    125c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1260:	00000722 	andeq	r0, r0, r2, lsr #14
    1264:	000b7101 	andeq	r7, fp, r1, lsl #2
    1268:	3d038600 	stccc	6, cr8, [r3, #-0]
    126c:	0000028b 	andeq	r0, r0, fp, lsl #5
    1270:	016c9102 	cmneq	ip, r2, lsl #2
    1274:	000009ec 	andeq	r0, r0, ip, ror #19
    1278:	9c590386 	mrrcls	3, 8, r0, r9, cr6
    127c:	02000000 	andeq	r0, r0, #0
    1280:	1a016891 	bne	5b4cc <__bss_end+0x35894>
    1284:	86000008 	strhi	r0, [r0], -r8
    1288:	06247e03 	strteq	r7, [r4], -r3, lsl #28
    128c:	91020000 	mrsls	r0, (UNDEF: 2)
    1290:	08b00164 	ldmeq	r0!, {r2, r5, r6, r8}
    1294:	03860000 	orreq	r0, r6, #0
    1298:	00006aa7 	andeq	r6, r0, r7, lsr #21
    129c:	60910200 	addsvs	r0, r1, r0, lsl #4
    12a0:	00095d03 	andeq	r5, r9, r3, lsl #26
    12a4:	16038800 	strne	r8, [r3], -r0, lsl #16
    12a8:	0000006a 	andeq	r0, r0, sl, rrx
    12ac:	03749102 	cmneq	r4, #-2147483648	@ 0x80000000
    12b0:	00000aa0 	andeq	r0, r0, r0, lsr #21
    12b4:	76180389 	ldrvc	r0, [r8], -r9, lsl #7
    12b8:	02000000 	andeq	r0, r0, #0
    12bc:	09007091 	stmdbeq	r0, {r0, r4, r7, ip, sp, lr}
    12c0:	0000093d 	andeq	r0, r0, sp, lsr r9
    12c4:	6a160241 	bvs	581bd0 <__bss_end+0x55bf98>
    12c8:	d4000000 	strle	r0, [r0], #-0
    12cc:	a4000211 	strge	r0, [r0], #-529	@ 0xfffffdef
    12d0:	01000001 	tsteq	r0, r1
    12d4:	0007979c 	muleq	r7, ip, r7
    12d8:	0b710100 	bleq	1c416e0 <__bss_end+0x1c1baa8>
    12dc:	02410000 	subeq	r0, r1, #0
    12e0:	00028b36 	andeq	r8, r2, r6, lsr fp
    12e4:	64910200 	ldrvs	r0, [r1], #512	@ 0x200
    12e8:	0009ec01 	andeq	lr, r9, r1, lsl #24
    12ec:	52024100 	andpl	r4, r2, #0, 2
    12f0:	0000009c 	muleq	r0, ip, r0
    12f4:	01609102 	cmneq	r0, r2, lsl #2
    12f8:	000010c5 	andeq	r1, r0, r5, asr #1
    12fc:	a26e0241 	rsbge	r0, lr, #268435460	@ 0x10000004
    1300:	02000000 	andeq	r0, r0, #0
    1304:	b0015c91 	mullt	r1, r1, ip
    1308:	41000008 	tstmi	r0, r8
    130c:	006a8a02 	rsbeq	r8, sl, r2, lsl #20
    1310:	91020000 	mrsls	r0, (UNDEF: 2)
    1314:	0a010358 	beq	4207c <__bss_end+0x1c444>
    1318:	02430000 	subeq	r0, r3, #0
    131c:	00006a16 	andeq	r6, r0, r6, lsl sl
    1320:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    1324:	000c4803 	andeq	r4, ip, r3, lsl #16
    1328:	0e024400 	cfcpyseq	mvf4, mvf2
    132c:	000001d1 	ldrdeq	r0, [r0], -r1
    1330:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1334:	000a3609 	andeq	r3, sl, r9, lsl #12
    1338:	0e014200 	cdpeq	2, 0, cr4, cr1, cr0, {0}
    133c:	0000028b 	andeq	r0, r0, fp, lsl #5
    1340:	0002110c 	andeq	r1, r2, ip, lsl #2
    1344:	000000c8 	andeq	r0, r0, r8, asr #1
    1348:	080c9c01 	stmdaeq	ip, {r0, sl, fp, ip, pc}
    134c:	a9010000 	stmdbge	r1, {}	@ <UNPREDICTABLE>
    1350:	42000009 	andmi	r0, r0, #9
    1354:	00763a01 	rsbseq	r3, r6, r1, lsl #20
    1358:	91020000 	mrsls	r0, (UNDEF: 2)
    135c:	0b830164 	bleq	fe0c18f4 <_estack+0xf60a18f4>
    1360:	01420000 	mrseq	r0, (UNDEF: 66)
    1364:	00007660 	andeq	r7, r0, r0, ror #12
    1368:	60910200 	addsvs	r0, r1, r0, lsl #4
    136c:	0007de01 	andeq	sp, r7, r1, lsl #28
    1370:	7a014200 	bvc	51b78 <__bss_end+0x2bf40>
    1374:	00000055 	andeq	r0, r0, r5, asr r0
    1378:	035f9102 	cmpeq	pc, #-2147483648	@ 0x80000000
    137c:	00000873 	andeq	r0, r0, r3, ror r8
    1380:	9c090144 	stflss	f0, [r9], {68}	@ 0x44
    1384:	02000002 	andeq	r0, r0, #2
    1388:	5f037091 	svcpl	0x00037091
    138c:	4500000b 	strmi	r0, [r0, #-11]
    1390:	00260801 	eoreq	r0, r6, r1, lsl #16
    1394:	91020000 	mrsls	r0, (UNDEF: 2)
    1398:	095d036c 	ldmdbeq	sp, {r2, r3, r5, r6, r8, r9}^
    139c:	01460000 	mrseq	r0, (UNDEF: 70)
    13a0:	00028b0e 	andeq	r8, r2, lr, lsl #22
    13a4:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    13a8:	0ad21a00 	beq	ff487bb0 <_estack+0xf7467bb0>
    13ac:	17010000 	strne	r0, [r1, -r0]
    13b0:	006a0f01 	rsbeq	r0, sl, r1, lsl #30
    13b4:	0ff80000 	svceq	0x00f80000
    13b8:	01140002 	tsteq	r4, r2
    13bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    13c0:	000b7101 	andeq	r7, fp, r1, lsl #2
    13c4:	30011700 	andcc	r1, r1, r0, lsl #14
    13c8:	0000028b 	andeq	r0, r0, fp, lsl #5
    13cc:	01749102 	cmneq	r4, r2, lsl #2
    13d0:	00000874 	andeq	r0, r0, r4, ror r8
    13d4:	6a470117 	bvs	11c1838 <__bss_end+0x119bc00>
    13d8:	02000000 	andeq	r0, r0, #0
    13dc:	00007091 	muleq	r0, r1, r0
    13e0:	00000e59 	andeq	r0, r0, r9, asr lr
    13e4:	04010005 	streq	r0, [r1], #-5
    13e8:	000006f5 	strdeq	r0, [r0], -r5
    13ec:	00009419 	andeq	r9, r0, r9, lsl r4
    13f0:	0d7a1d00 	ldcleq	13, cr1, [sl, #-0]
    13f4:	00f10000 	rscseq	r0, r1, r0
    13f8:	1ba80000 	blne	fea01400 <_estack+0xf69e1400>
    13fc:	19240002 	stmdbne	r4!, {r1}
    1400:	0da50000 	stceq	0, cr0, [r5]
    1404:	01080000 	mrseq	r0, (UNDEF: 8)
    1408:	00076706 	andeq	r6, r7, r6, lsl #14
    140c:	00260700 	eoreq	r0, r6, r0, lsl #14
    1410:	01080000 	mrseq	r0, (UNDEF: 8)
    1414:	00076508 	andeq	r6, r7, r8, lsl #10
    1418:	05020800 	streq	r0, [r2, #-2048]	@ 0xfffff800
    141c:	000007a6 	andeq	r0, r0, r6, lsr #15
    1420:	81070208 	tsthi	r7, r8, lsl #4
    1424:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    1428:	014b0504 	cmpeq	fp, r4, lsl #10
    142c:	470c0000 	strmi	r0, [ip, -r0]
    1430:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    1434:	07530704 	ldrbeq	r0, [r3, -r4, lsl #14]
    1438:	530c0000 	movwpl	r0, #49152	@ 0xc000
    143c:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    1440:	01460508 	cmpeq	r6, r8, lsl #10
    1444:	08080000 	stmdaeq	r8, {}	@ <UNPREDICTABLE>
    1448:	00074e07 	andeq	r4, r7, r7, lsl #28
    144c:	05041a00 	streq	r1, [r4, #-2560]	@ 0xfffff600
    1450:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1454:	58070408 	stmdapl	r7, {r3, sl}
    1458:	09000007 	stmdbeq	r0, {r0, r1, r2}
    145c:	000003d8 	ldrdeq	r0, [r0], -r8
    1460:	7417d602 	ldrvc	sp, [r7], #-1538	@ 0xfffff9fe
    1464:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    1468:	020d0408 	andeq	r0, sp, #8, 8	@ 0x8000000
    146c:	041b0000 	ldreq	r0, [fp], #-0
    1470:	00009506 	andeq	r9, r0, r6, lsl #10
    1474:	08010800 	stmdaeq	r1, {fp}
    1478:	0000076e 	andeq	r0, r0, lr, ror #14
    147c:	00009507 	andeq	r9, r0, r7, lsl #10
    1480:	009c0600 	addseq	r0, ip, r0, lsl #12
    1484:	da090000 	ble	24148c <__bss_end+0x21b854>
    1488:	03000000 	movweq	r0, #0
    148c:	00b21047 	adcseq	r1, r2, r7, asr #32
    1490:	b7060000 	strlt	r0, [r6, -r0]
    1494:	1c000000 	stcne	0, cr0, [r0], {-0}
    1498:	000000c2 	andeq	r0, r0, r2, asr #1
    149c:	00008e04 	andeq	r8, r0, r4, lsl #28
    14a0:	15090000 	strne	r0, [r9, #-0]
    14a4:	04000000 	streq	r0, [r0], #-0
    14a8:	00531c61 	subseq	r1, r3, r1, ror #24
    14ac:	c20c0000 	andgt	r0, ip, #0
    14b0:	09000000 	stmdbeq	r0, {}	@ <UNPREDICTABLE>
    14b4:	00000dc6 	andeq	r0, r0, r6, asr #27
    14b8:	df195705 	svcle	0x00195705
    14bc:	06000000 	streq	r0, [r0], -r0
    14c0:	000000e4 	andeq	r0, r0, r4, ror #1
    14c4:	0000471d 	andeq	r4, r0, sp, lsl r7
    14c8:	0000f300 	andeq	pc, r0, r0, lsl #6
    14cc:	008e0400 	addeq	r0, lr, r0, lsl #8
    14d0:	0d000000 	stceq	0, cr0, [r0, #-0]
    14d4:	000004df 	ldrdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
    14d8:	08690614 	stmdaeq	r9!, {r2, r4, r9, sl}^
    14dc:	00000142 	andeq	r0, r0, r2, asr #2
    14e0:	0004a003 	andeq	sl, r4, r3
    14e4:	0f6b0600 	svceq	0x006b0600
    14e8:	000000c2 	andeq	r0, r0, r2, asr #1
    14ec:	05d30300 	ldrbeq	r0, [r3, #768]	@ 0x300
    14f0:	6c060000 	stcvs	0, cr0, [r6], {-0}
    14f4:	0001471f 	andeq	r4, r1, pc, lsl r7
    14f8:	df030400 	svcle	0x00030400
    14fc:	06000003 	streq	r0, [r0], -r3
    1500:	01471f6d 	cmpeq	r7, sp, ror #30
    1504:	03080000 	movweq	r0, #32768	@ 0x8000
    1508:	00000451 	andeq	r0, r0, r1, asr r4
    150c:	8e096e06 	cdphi	14, 0, cr6, cr9, cr6, {0}
    1510:	0c000000 	stceq	0, cr0, [r0], {-0}
    1514:	00055303 	andeq	r5, r5, r3, lsl #6
    1518:	096f0600 	stmdbeq	pc!, {r9, sl}^	@ <UNPREDICTABLE>
    151c:	0000008e 	andeq	r0, r0, lr, lsl #1
    1520:	f30c0010 	vqadd.u8	d0, d12, d0
    1524:	06000000 	streq	r0, [r0], -r0
    1528:	00000142 	andeq	r0, r0, r2, asr #2
    152c:	00065009 	andeq	r5, r6, r9
    1530:	1b710600 	blne	1c42d38 <__bss_end+0x1c1d100>
    1534:	000000f3 	strdeq	r0, [r0], -r3
    1538:	00014c0c 	andeq	r4, r1, ip, lsl #24
    153c:	06d10d00 	ldrbeq	r0, [r1], r0, lsl #26
    1540:	060c0000 	streq	r0, [ip], -r0
    1544:	01920873 	orrseq	r0, r2, r3, ror r8
    1548:	a0030000 	andge	r0, r3, r0
    154c:	06000004 	streq	r0, [r0], -r4
    1550:	00c20f75 	sbceq	r0, r2, r5, ror pc
    1554:	03000000 	movweq	r0, #0
    1558:	000005d3 	ldrdeq	r0, [r0], -r3
    155c:	471e7606 	ldrmi	r7, [lr, -r6, lsl #12]
    1560:	04000001 	streq	r0, [r0], #-1
    1564:	0003df03 	andeq	sp, r3, r3, lsl #30
    1568:	1e770600 	cdpne	6, 7, cr0, cr7, cr0, {0}
    156c:	00000147 	andeq	r0, r0, r7, asr #2
    1570:	fd090008 	stc2	0, cr0, [r9, #-32]	@ 0xffffffe0
    1574:	06000004 	streq	r0, [r0], -r4
    1578:	015d2079 	cmpeq	sp, r9, ror r0
    157c:	920c0000 	andls	r0, ip, #0
    1580:	0d000001 	stceq	0, cr0, [r0, #-4]
    1584:	0000049a 	muleq	r0, sl, r4
    1588:	107e0614 	rsbsne	r0, lr, r4, lsl r6
    158c:	000001d8 	ldrdeq	r0, [r0], -r8
    1590:	00064003 	andeq	r4, r6, r3
    1594:	22800600 	addcs	r0, r0, #0, 12
    1598:	0000005a 	andeq	r0, r0, sl, asr r0
    159c:	06c90300 	strbeq	r0, [r9], r0, lsl #6
    15a0:	81060000 	mrshi	r0, (UNDEF: 6)
    15a4:	0001d817 	andeq	sp, r1, r7, lsl r8
    15a8:	76030400 	strvc	r0, [r3], -r0, lsl #8
    15ac:	06000006 	streq	r0, [r0], -r6
    15b0:	019e1982 	orrseq	r1, lr, r2, lsl #19
    15b4:	00080000 	andeq	r0, r8, r0
    15b8:	00015806 	andeq	r5, r1, r6, lsl #16
    15bc:	07b10900 	ldreq	r0, [r1, r0, lsl #18]!
    15c0:	83060000 	movwhi	r0, #24576	@ 0x6000
    15c4:	0001a303 	andeq	sl, r1, r3, lsl #6
    15c8:	01dd0700 	bicseq	r0, sp, r0, lsl #14
    15cc:	89090000 	stmdbhi	r9, {}	@ <UNPREDICTABLE>
    15d0:	0700000c 	streq	r0, [r0, -ip]
    15d4:	008e1063 	addeq	r1, lr, r3, rrx
    15d8:	910d0000 	mrsls	r0, (UNDEF: 13)
    15dc:	08000008 	stmdaeq	r0, {r3}
    15e0:	22106807 	andscs	r6, r0, #458752	@ 0x70000
    15e4:	03000002 	movweq	r0, #2
    15e8:	000008e7 	andeq	r0, r0, r7, ror #17
    15ec:	47106a07 	ldrmi	r6, [r0, -r7, lsl #20]
    15f0:	00000000 	andeq	r0, r0, r0
    15f4:	00092003 	andeq	r2, r9, r3
    15f8:	106b0700 	rsbne	r0, fp, r0, lsl #14
    15fc:	000000c2 	andeq	r0, r0, r2, asr #1
    1600:	4f090004 	svcmi	0x00090004
    1604:	07000009 	streq	r0, [r0, -r9]
    1608:	01fa036c 	mvnseq	r0, ip, ror #6
    160c:	130d0000 	movwne	r0, #53248	@ 0xd000
    1610:	0c00000e 	stceq	0, cr0, [r0], {14}
    1614:	63107107 	tstvs	r0, #-1073741823	@ 0xc0000001
    1618:	03000002 	movweq	r0, #2
    161c:	0000110d 	andeq	r1, r0, sp, lsl #2
    1620:	8e087307 	cdphi	3, 0, cr7, cr8, cr7, {0}
    1624:	00000000 	andeq	r0, r0, r0
    1628:	000f2403 	andeq	r2, pc, r3, lsl #8
    162c:	10740700 	rsbsne	r0, r4, r0, lsl #14
    1630:	00000053 	andeq	r0, r0, r3, asr r0
    1634:	0e8e0304 	cdpeq	3, 8, cr0, cr14, cr4, {0}
    1638:	75070000 	strvc	r0, [r7, #-0]
    163c:	00005310 	andeq	r5, r0, r0, lsl r3
    1640:	09000800 	stmdbeq	r0, {fp}
    1644:	00000fc5 	andeq	r0, r0, r5, asr #31
    1648:	2e037607 	cfmadd32cs	mvax0, mvfx7, mvfx3, mvfx7
    164c:	07000002 	streq	r0, [r0, -r2]
    1650:	00000263 	andeq	r0, r0, r3, ror #4
    1654:	00002d06 	andeq	r2, r0, r6, lsl #26
    1658:	02740700 	rsbseq	r0, r4, #0, 14
    165c:	53060000 	movwpl	r0, #24576	@ 0x6000
    1660:	0d000000 	stceq	0, cr0, [r0, #-0]
    1664:	00000cb2 			@ <UNDEFINED> instruction: 0x00000cb2
    1668:	10660148 	rsbne	r0, r6, r8, asr #2
    166c:	000002ec 	andeq	r0, r0, ip, ror #5
    1670:	00013903 	andeq	r3, r1, r3, lsl #18
    1674:	1b680100 	blne	1a01a7c <__bss_end+0x19dbe44>
    1678:	000002ec 	andeq	r0, r0, ip, ror #5
    167c:	04400300 	strbeq	r0, [r0], #-768	@ 0xfffffd00
    1680:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1684:	00014c0f 	andeq	r4, r1, pc, lsl #24
    1688:	31030400 	tstcc	r3, r0, lsl #8
    168c:	01000005 	tsteq	r0, r5
    1690:	014c0f6f 	cmpeq	ip, pc, ror #30
    1694:	03180000 	tsteq	r8, #0
    1698:	000006be 			@ <UNDEFINED> instruction: 0x000006be
    169c:	53197001 	tstpl	r9, #1
    16a0:	2c000000 	stccs	0, cr0, [r0], {-0}
    16a4:	000e5a03 	andeq	r5, lr, r3, lsl #20
    16a8:	14710100 	ldrbtne	r0, [r1], #-256	@ 0xffffff00
    16ac:	0000027e 	andeq	r0, r0, lr, ror r2
    16b0:	109e0330 	addsne	r0, lr, r0, lsr r3
    16b4:	72010000 	andvc	r0, r1, #0
    16b8:	0002f111 	andeq	pc, r2, r1, lsl r1	@ <UNPREDICTABLE>
    16bc:	1a033400 	bne	ce6c4 <__bss_end+0xa8a8c>
    16c0:	0100000c 	tsteq	r0, ip
    16c4:	00d31486 	sbcseq	r1, r3, r6, lsl #9
    16c8:	00440000 	subeq	r0, r4, r0
    16cc:	00005a06 	andeq	r5, r0, r6, lsl #20
    16d0:	00261100 	eoreq	r1, r6, r0, lsl #2
    16d4:	03010000 	movweq	r0, #4096	@ 0x1000
    16d8:	74120000 	ldrvc	r0, [r2], #-0
    16dc:	0f000000 	svceq	0x00000000
    16e0:	0dbf0900 			@ <UNDEFINED> instruction: 0x0dbf0900
    16e4:	93010000 	movwls	r0, #4096	@ 0x1000
    16e8:	00028303 	andeq	r8, r2, r3, lsl #6
    16ec:	03010700 	movweq	r0, #5888	@ 0x1700
    16f0:	211e0000 	tstcs	lr, r0
    16f4:	01000003 	tsteq	r0, r3
    16f8:	0329239f 			@ <UNDEFINED> instruction: 0x0329239f
    16fc:	03050000 	movweq	r0, #20480	@ 0x5000
    1700:	000248dc 	ldrdeq	r4, [r2], -ip
    1704:	00030106 	andeq	r0, r3, r6, lsl #2
    1708:	03240c00 			@ <UNDEFINED> instruction: 0x03240c00
    170c:	dd110000 	ldcle	0, cr0, [r1, #-0]
    1710:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
    1714:	12000003 	andne	r0, r0, #3
    1718:	00000074 	andeq	r0, r0, r4, ror r0
    171c:	0b050004 	bleq	141734 <__bss_end+0x11bafc>
    1720:	a3000010 	movwge	r0, #16
    1724:	00032e1e 	andeq	r2, r3, lr, lsl lr
    1728:	e0030500 	and	r0, r3, r0, lsl #10
    172c:	05000248 	streq	r0, [r0, #-584]	@ 0xfffffdb8
    1730:	00001034 	andeq	r1, r0, r4, lsr r0
    1734:	01dd1ea4 	bicseq	r1, sp, r4, lsr #29
    1738:	03050000 	movweq	r0, #20480	@ 0x5000
    173c:	00024944 	andeq	r4, r2, r4, asr #18
    1740:	00104605 	andseq	r4, r0, r5, lsl #12
    1744:	dd1ea500 	cfldr32le	mvfx10, [lr, #-0]
    1748:	05000001 	streq	r0, [r0, #-1]
    174c:	02495803 	subeq	r5, r9, #196608	@ 0x30000
    1750:	0e480500 	cdpeq	5, 4, cr0, cr8, cr0, {0}
    1754:	29a60000 	stmibcs	r6!, {}	@ <UNPREDICTABLE>
    1758:	00000387 	andeq	r0, r0, r7, lsl #7
    175c:	496c0305 	stmdbmi	ip!, {r0, r2, r8, r9}^
    1760:	dd060002 	stcle	0, cr0, [r6, #-8]
    1764:	0c000001 	stceq	0, cr0, [r0], {1}
    1768:	00000382 	andeq	r0, r0, r2, lsl #7
    176c:	00038207 	andeq	r8, r3, r7, lsl #4
    1770:	0e740500 	cdpeq	5, 7, cr0, cr4, cr0, {0}
    1774:	29a70000 	stmibcs	r7!, {}	@ <UNPREDICTABLE>
    1778:	00000387 	andeq	r0, r0, r7, lsl #7
    177c:	49700305 	ldmdbmi	r0!, {r0, r2, r8, r9}^
    1780:	b3050002 	movwlt	r0, #20482	@ 0x5002
    1784:	a800000e 	stmdage	r0, {r1, r2, r3}
    1788:	0001dd1e 	andeq	sp, r1, lr, lsl sp
    178c:	74030500 	strvc	r0, [r3], #-1280	@ 0xfffffb00
    1790:	05000249 	streq	r0, [r0, #-585]	@ 0xfffffdb7
    1794:	00000ec5 	andeq	r0, r0, r5, asr #29
    1798:	01dd1fac 	bicseq	r1, sp, ip, lsr #31
    179c:	03050000 	movweq	r0, #20480	@ 0x5000
    17a0:	00024988 	andeq	r4, r2, r8, lsl #19
    17a4:	000be105 	andeq	lr, fp, r5, lsl #2
    17a8:	5a39ad00 	bpl	e6cbb0 <__bss_end+0xe46f78>
    17ac:	05000000 	streq	r0, [r0, #-0]
    17b0:	02499c03 	subeq	r9, r9, #768	@ 0x300
    17b4:	0bff0500 	bleq	fffc2bbc <_estack+0xf7fa2bbc>
    17b8:	1fb30000 	svcne	0x00b30000
    17bc:	000001dd 	ldrdeq	r0, [r0], -sp
    17c0:	49a00305 	stmibmi	r0!, {r0, r2, r8, r9}
    17c4:	ca050002 	bgt	1417d4 <__bss_end+0x11bb9c>
    17c8:	be00000b 	cdplt	0, 0, cr0, cr0, cr11, {0}
    17cc:	00005a38 	andeq	r5, r0, r8, lsr sl
    17d0:	b4030500 	strlt	r0, [r3], #-1280	@ 0xfffffb00
    17d4:	05000249 	streq	r0, [r0, #-585]	@ 0xfffffdb7
    17d8:	0000106f 	andeq	r1, r0, pc, rrx
    17dc:	00ce2ebf 	strheq	r2, [lr], #239	@ 0xef
    17e0:	03050000 	movweq	r0, #20480	@ 0x5000
    17e4:	000249b8 			@ <UNDEFINED> instruction: 0x000249b8
    17e8:	000e6205 	andeq	r6, lr, r5, lsl #4
    17ec:	532fc000 			@ <UNDEFINED> instruction: 0x532fc000
    17f0:	05000000 	streq	r0, [r0, #-0]
    17f4:	0249bc03 	subeq	fp, r9, #768	@ 0x300
    17f8:	0efe0500 	cdpeq	5, 15, cr0, cr14, cr0, {0}
    17fc:	38c10000 	stmiacc	r1, {}^	@ <UNPREDICTABLE>
    1800:	0000005a 	andeq	r0, r0, sl, asr r0
    1804:	49c00305 	stmibmi	r0, {r0, r2, r8, r9}^
    1808:	61050002 	tstvs	r5, r2
    180c:	c200000f 	andgt	r0, r0, #15
    1810:	00004e36 	andeq	r4, r0, r6, lsr lr
    1814:	c4030500 	strgt	r0, [r3], #-1280	@ 0xfffffb00
    1818:	05000249 	streq	r0, [r0, #-585]	@ 0xfffffdb7
    181c:	00000d42 	andeq	r0, r0, r2, asr #26
    1820:	005a38c3 	subseq	r3, sl, r3, asr #17
    1824:	03050000 	movweq	r0, #20480	@ 0x5000
    1828:	000249c8 	andeq	r4, r2, r8, asr #19
    182c:	00108105 	andseq	r8, r0, r5, lsl #2
    1830:	5a38c400 	bpl	e32838 <__bss_end+0xe0cc00>
    1834:	05000000 	streq	r0, [r0, #-0]
    1838:	0249cc03 	subeq	ip, r9, #768	@ 0x300
    183c:	0e2f0500 	cfsh64eq	mvdx0, mvdx15, #0
    1840:	2fc50000 	svccs	0x00c50000
    1844:	0000004e 	andeq	r0, r0, lr, asr #32
    1848:	49d00305 	ldmibmi	r0, {r0, r2, r8, r9}^
    184c:	58050002 	stmdapl	r5, {r1}
    1850:	c6000010 			@ <UNDEFINED> instruction: 0xc6000010
    1854:	00004e2f 	andeq	r4, r0, pc, lsr #28
    1858:	d4030500 	strle	r0, [r3], #-1280	@ 0xfffffb00
    185c:	05000249 	streq	r0, [r0, #-585]	@ 0xfffffdb7
    1860:	00000ffe 	strdeq	r0, [r0], -lr
    1864:	00532fc7 	subseq	r2, r3, r7, asr #31
    1868:	03050000 	movweq	r0, #20480	@ 0x5000
    186c:	000249d8 	ldrdeq	r4, [r2], -r8
    1870:	000ee905 	andeq	lr, lr, r5, lsl #18
    1874:	c225c800 	eorgt	ip, r5, #0, 16
    1878:	05000000 	streq	r0, [r0, #-0]
    187c:	02484c03 	subeq	r4, r8, #768	@ 0x300
    1880:	107a1300 	rsbsne	r1, sl, r0, lsl #6
    1884:	09210000 	stmdbeq	r1!, {}	@ <UNPREDICTABLE>
    1888:	0000008e 	andeq	r0, r0, lr, lsl #1
    188c:	000004c0 	andeq	r0, r0, r0, asr #9
    1890:	00008e04 	andeq	r8, r0, r4, lsl #28
    1894:	006d0400 	rsbeq	r0, sp, r0, lsl #8
    1898:	7b040000 	blvc	1018a0 <__bss_end+0xdbc68>
    189c:	00000000 	andeq	r0, r0, r0
    18a0:	0009720e 	andeq	r7, r9, lr, lsl #4
    18a4:	01710900 	cmneq	r1, r0, lsl #18
    18a8:	000004d2 	ldrdeq	r0, [r0], -r2
    18ac:	00008e04 	andeq	r8, r0, r4, lsl #28
    18b0:	e1140000 	tst	r4, r0
    18b4:	70000006 	andvc	r0, r0, r6
    18b8:	008e0701 	addeq	r0, lr, r1, lsl #14
    18bc:	04e80000 	strbteq	r0, [r8], #0
    18c0:	7b040000 	blvc	1018c8 <__bss_end+0xdbc90>
    18c4:	00000000 	andeq	r0, r0, r0
    18c8:	00039e0e 	andeq	r9, r3, lr, lsl #28
    18cc:	01110600 	tsteq	r1, r0, lsl #12
    18d0:	000004fa 	strdeq	r0, [r0], -sl
    18d4:	00038204 	andeq	r8, r3, r4, lsl #4
    18d8:	f60e0000 			@ <UNDEFINED> instruction: 0xf60e0000
    18dc:	06000006 	streq	r0, [r0], -r6
    18e0:	050c011c 	streq	r0, [ip, #-284]	@ 0xfffffee4
    18e4:	0c040000 	stceq	0, cr0, [r4], {-0}
    18e8:	00000005 	andeq	r0, r0, r5
    18ec:	00014c06 	andeq	r4, r1, r6, lsl #24
    18f0:	0c121300 	ldceq	3, cr1, [r2], {-0}
    18f4:	082c0000 	stmdaeq	ip!, {}	@ <UNPREDICTABLE>
    18f8:	00000090 	muleq	r0, r0, r0
    18fc:	00000530 	andeq	r0, r0, r0, lsr r5
    1900:	00009004 	andeq	r9, r0, r4
    1904:	00a10400 	adceq	r0, r1, r0, lsl #8
    1908:	7b040000 	blvc	101910 <__bss_end+0xdbcd8>
    190c:	00000000 	andeq	r0, r0, r0
    1910:	0003b60e 	andeq	fp, r3, lr, lsl #12
    1914:	01290600 			@ <UNDEFINED> instruction: 0x01290600
    1918:	00000547 	andeq	r0, r0, r7, asr #10
    191c:	00038204 	andeq	r8, r3, r4, lsl #4
    1920:	050c0400 	streq	r0, [ip, #-1024]	@ 0xfffffc00
    1924:	1f000000 	svcne	0x00000000
    1928:	0000011e 	andeq	r0, r0, lr, lsl r1
    192c:	06018009 	streq	r8, [r1], -r9
    1930:	00021920 	andeq	r1, r2, r0, lsr #18
    1934:	01790900 	cmneq	r9, r0, lsl #18
    1938:	0000470f 	andeq	r4, r0, pc, lsl #14
    193c:	04240e00 	strteq	r0, [r4], #-3584	@ 0xfffff200
    1940:	4a060000 	bmi	181948 <__bss_end+0x15bd10>
    1944:	00056f01 	andeq	r6, r5, r1, lsl #30
    1948:	050c0400 	streq	r0, [ip, #-1024]	@ 0xfffffc00
    194c:	15000000 	strne	r0, [r0, #-0]
    1950:	000002d7 	ldrdeq	r0, [r0], -r7
    1954:	04590efd 	ldrbeq	r0, [r9], #-3837	@ 0xfffff103
    1958:	3e060000 	cdpcc	0, 0, cr0, cr6, cr0, {0}
    195c:	00058c01 	andeq	r8, r5, r1, lsl #24
    1960:	03820400 	orreq	r0, r2, #0, 8
    1964:	0c040000 	stceq	0, cr0, [r4], {-0}
    1968:	00000005 	andeq	r0, r0, r5
    196c:	0002b215 	andeq	fp, r2, r5, lsl r2
    1970:	2d14fc00 	ldccs	12, cr15, [r4, #-0]
    1974:	6a000002 	bvs	1984 <_start-0xe67c>
    1978:	027e1201 	rsbseq	r1, lr, #268435456	@ 0x10000000
    197c:	05b20000 	ldreq	r0, [r2, #0]!
    1980:	7e040000 	cdpvc	0, 0, cr0, cr4, cr0, {0}
    1984:	04000002 	streq	r0, [r0], #-2
    1988:	000000a6 	andeq	r0, r0, r6, lsr #1
    198c:	00008e04 	andeq	r8, r0, r4, lsl #28
    1990:	220f0000 	andcs	r0, pc, #0
    1994:	2900000e 	stmdbcs	r0, {r1, r2, r3}
    1998:	34980e09 	ldrcc	r0, [r8], #3593	@ 0xe09
    199c:	00340002 	eorseq	r0, r4, r2
    19a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19a4:	000005d8 	ldrdeq	r0, [r0], -r8
    19a8:	000dd702 	andeq	sp, sp, r2, lsl #14
    19ac:	24092900 	strcs	r2, [r9], #-2304	@ 0xfffff700
    19b0:	00000324 	andeq	r0, r0, r4, lsr #6
    19b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19b8:	000ce821 	andeq	lr, ip, r1, lsr #16
    19bc:	086a0100 	stmdaeq	sl!, {r8}^
    19c0:	00032410 	andeq	r2, r3, r0, lsl r4
    19c4:	0233e800 	eorseq	lr, r3, #0, 16
    19c8:	0000b000 	andeq	fp, r0, r0
    19cc:	219c0100 	orrscs	r0, ip, r0, lsl #2
    19d0:	02000006 	andeq	r0, r0, #6
    19d4:	00000cff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
    19d8:	4037086a 	eorsmi	r0, r7, sl, ror #16
    19dc:	02000000 	andeq	r0, r0, #0
    19e0:	0c026e91 	stceq	14, cr6, [r2], {145}	@ 0x91
    19e4:	6a00000d 	bvs	1a20 <_start-0xe5e0>
    19e8:	027e5508 	rsbseq	r5, lr, #8, 10	@ 0x2000000
    19ec:	91020000 	mrsls	r0, (UNDEF: 2)
    19f0:	0cc60168 	stfeqe	f0, [r6], {104}	@ 0x68
    19f4:	086c0000 	stmdaeq	ip!, {}^	@ <UNPREDICTABLE>
    19f8:	00032409 	andeq	r2, r3, r9, lsl #8
    19fc:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    1a00:	0fd30f00 	svceq	0x00d30f00
    1a04:	08500000 	ldmdaeq	r0, {}^	@ <UNPREDICTABLE>
    1a08:	0233300d 	eorseq	r3, r3, #13
    1a0c:	0000b800 	andeq	fp, r0, r0, lsl #16
    1a10:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    1a14:	02000006 	andeq	r0, r0, #6
    1a18:	00000392 	muleq	r0, r2, r3
    1a1c:	c23a0850 	eorsgt	r0, sl, #80, 16	@ 0x500000
    1a20:	02000000 	andeq	r0, r0, #0
    1a24:	0f007491 	svceq	0x00007491
    1a28:	00000fa5 	andeq	r0, r0, r5, lsr #31
    1a2c:	740d082d 	strvc	r0, [sp], #-2093	@ 0xfffff7d3
    1a30:	bc000232 	sfmlt	f0, 4, [r0], {50}	@ 0x32
    1a34:	01000000 	mrseq	r0, (UNDEF: 0)
    1a38:	0006909c 	muleq	r6, ip, r0
    1a3c:	32801000 	addcc	r1, r0, #0
    1a40:	00980002 	addseq	r0, r8, r2
    1a44:	62010000 	andvs	r0, r1, #0
    1a48:	3100000c 	tstcc	r0, ip
    1a4c:	00471108 	subeq	r1, r7, r8, lsl #2
    1a50:	91020000 	mrsls	r0, (UNDEF: 2)
    1a54:	32c01074 	sbccc	r1, r0, #116	@ 0x74
    1a58:	00580002 	subseq	r0, r8, r2
    1a5c:	d7010000 	strle	r0, [r1, -r0]
    1a60:	3d00000d 	stccc	0, cr0, [r0, #-52]	@ 0xffffffcc
    1a64:	03240d08 			@ <UNDEFINED> instruction: 0x03240d08
    1a68:	91020000 	mrsls	r0, (UNDEF: 2)
    1a6c:	00000070 	andeq	r0, r0, r0, ror r0
    1a70:	00111b0f 	andseq	r1, r1, pc, lsl #22
    1a74:	0d080d00 	stceq	13, cr0, [r8, #-0]
    1a78:	000231b4 			@ <UNDEFINED> instruction: 0x000231b4
    1a7c:	000000c0 	andeq	r0, r0, r0, asr #1
    1a80:	06b69c01 	ldrteq	r9, [r6], r1, lsl #24
    1a84:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    1a88:	0f000006 	svceq	0x00000006
    1a8c:	00531808 	subseq	r1, r3, r8, lsl #16
    1a90:	91020000 	mrsls	r0, (UNDEF: 2)
    1a94:	a30f0074 	movwge	r0, #61556	@ 0xf074
    1a98:	b700000b 	strlt	r0, [r0, -fp]
    1a9c:	30f40d07 	rscscc	r0, r4, r7, lsl #26
    1aa0:	00c00002 	sbceq	r0, r0, r2
    1aa4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aa8:	00000718 	andeq	r0, r0, r8, lsl r7
    1aac:	000dd702 	andeq	sp, sp, r2, lsl #14
    1ab0:	3007b700 	andcc	fp, r7, r0, lsl #14
    1ab4:	00000324 	andeq	r0, r0, r4, lsr #6
    1ab8:	02749102 	rsbseq	r9, r4, #-2147483648	@ 0x80000000
    1abc:	000010e4 	andeq	r1, r0, r4, ror #1
    1ac0:	795107b7 	ldmdbvc	r1, {r0, r1, r2, r4, r5, r7, r8, r9, sl}^
    1ac4:	02000002 	andeq	r0, r0, #2
    1ac8:	be027091 	mcrlt	0, 0, r7, cr2, cr1, {4}
    1acc:	b7000006 	strlt	r0, [r0, -r6]
    1ad0:	00537007 	subseq	r7, r3, r7
    1ad4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ad8:	0eaa026c 	cdpeq	2, 10, cr0, cr10, cr12, {3}
    1adc:	07b70000 	ldreq	r0, [r7, r0]!
    1ae0:	00071d98 	muleq	r7, r8, sp
    1ae4:	68910200 	ldmvs	r1, {r9}
    1ae8:	000cff02 	andeq	pc, ip, r2, lsl #30
    1aec:	b107b700 	tstlt	r7, r0, lsl #14
    1af0:	00000040 	andeq	r0, r0, r0, asr #32
    1af4:	00009102 	andeq	r9, r0, r2, lsl #2
    1af8:	00026f06 	andeq	r6, r2, r6, lsl #30
    1afc:	07180700 	ldreq	r0, [r8, -r0, lsl #14]
    1b00:	3c0f0000 	stccc	0, cr0, [pc], {-0}
    1b04:	7600000e 	strvc	r0, [r0], -lr
    1b08:	30c40807 	sbccc	r0, r4, r7, lsl #16
    1b0c:	00300002 	eorseq	r0, r0, r2
    1b10:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b14:	00000748 	andeq	r0, r0, r8, asr #14
    1b18:	00016b02 	andeq	r6, r1, r2, lsl #22
    1b1c:	08077600 	stmdaeq	r7, {r9, sl, ip, sp, lr}
    1b20:	0000008e 	andeq	r0, r0, lr, lsl #1
    1b24:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1b28:	000a4a16 	andeq	r4, sl, r6, lsl sl
    1b2c:	9c074200 	sfmls	f4, 4, [r7], {-0}
    1b30:	28000230 	stmdacs	r0, {r4, r5, r9}
    1b34:	01000000 	mrseq	r0, (UNDEF: 0)
    1b38:	0b1c0b9c 	bleq	7049b0 <__bss_end+0x6ded78>
    1b3c:	07140000 	ldreq	r0, [r4, -r0]
    1b40:	0000470f 	andeq	r4, r0, pc, lsl #14
    1b44:	022fa800 	eoreq	sl, pc, #0, 16
    1b48:	0000f400 	andeq	pc, r0, r0, lsl #8
    1b4c:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    1b50:	02000007 	andeq	r0, r0, #7
    1b54:	00000c47 	andeq	r0, r0, r7, asr #24
    1b58:	a63a0714 			@ <UNDEFINED> instruction: 0xa63a0714
    1b5c:	02000007 	andeq	r0, r0, #7
    1b60:	c4026c91 	strgt	r6, [r2], #-3217	@ 0xfffff36f
    1b64:	14000010 	strne	r0, [r0], #-16
    1b68:	07b05a07 	ldreq	r5, [r0, r7, lsl #20]!
    1b6c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b70:	095d0168 	ldmdbeq	sp, {r3, r5, r6, r8}^
    1b74:	07160000 	ldreq	r0, [r6, -r0]
    1b78:	0000470f 	andeq	r4, r0, pc, lsl #14
    1b7c:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    1b80:	02220600 	eoreq	r0, r2, #0, 12
    1b84:	a1070000 	mrsge	r0, (UNDEF: 7)
    1b88:	06000007 	streq	r0, [r0], -r7
    1b8c:	000000c2 	andeq	r0, r0, r2, asr #1
    1b90:	0007ab07 	andeq	sl, r7, r7, lsl #22
    1b94:	0b8e1700 	bleq	fe38779c <_estack+0xf636779c>
    1b98:	070c0000 	streq	r0, [ip, -r0]
    1b9c:	00022f60 	andeq	r2, r2, r0, ror #30
    1ba0:	00000048 	andeq	r0, r0, r8, asr #32
    1ba4:	07da9c01 	ldrbeq	r9, [sl, r1, lsl #24]
    1ba8:	47020000 	strmi	r0, [r2, -r0]
    1bac:	0c00000c 	stceq	0, cr0, [r0], {12}
    1bb0:	07a63107 	streq	r3, [r6, r7, lsl #2]!
    1bb4:	91020000 	mrsls	r0, (UNDEF: 2)
    1bb8:	e50b0074 	str	r0, [fp, #-116]	@ 0xffffff8c
    1bbc:	d900000a 	stmdble	r0, {r1, r3}
    1bc0:	00471606 	subeq	r1, r7, r6, lsl #12
    1bc4:	2e480000 	cdpcs	0, 4, cr0, cr8, cr0, {0}
    1bc8:	01180002 	tsteq	r8, r2
    1bcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bd0:	00000822 	andeq	r0, r0, r2, lsr #16
    1bd4:	00032e02 	andeq	r2, r3, r2, lsl #28
    1bd8:	4406d900 	strmi	sp, [r6], #-2304	@ 0xfffff700
    1bdc:	00000827 	andeq	r0, r0, r7, lsr #16
    1be0:	016c9102 	cmneq	ip, r2, lsl #2
    1be4:	00000f42 	andeq	r0, r0, r2, asr #30
    1be8:	240906db 	strcs	r0, [r9], #-1755	@ 0xfffff925
    1bec:	02000003 	andeq	r0, r0, #3
    1bf0:	5d017091 	stcpl	0, cr7, [r1, #-580]	@ 0xfffffdbc
    1bf4:	dc000009 	stcle	0, cr0, [r0], {9}
    1bf8:	00470f06 	subeq	r0, r7, r6, lsl #30
    1bfc:	91020000 	mrsls	r0, (UNDEF: 2)
    1c00:	e9060074 	stmdb	r6, {r2, r4, r5, r6}
    1c04:	07000001 	streq	r0, [r0, -r1]
    1c08:	00000822 	andeq	r0, r0, r2, lsr #16
    1c0c:	0009030a 	andeq	r0, r9, sl, lsl #6
    1c10:	06068700 	streq	r8, [r6], -r0, lsl #14
    1c14:	00022dac 	andeq	r2, r2, ip, lsr #27
    1c18:	0000009c 	muleq	r0, ip, r0
    1c1c:	08709c01 	ldmdaeq	r0!, {r0, sl, fp, ip, pc}^
    1c20:	2e020000 	cdpcs	0, 0, cr0, cr2, cr0, {0}
    1c24:	87000003 	strhi	r0, [r0, -r3]
    1c28:	08273106 	stmdaeq	r7!, {r1, r2, r8, ip, sp}
    1c2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c30:	10c5026c 	sbcne	r0, r5, ip, ror #4
    1c34:	06870000 	streq	r0, [r7], r0
    1c38:	0000c24b 	andeq	ip, r0, fp, asr #4
    1c3c:	68910200 	ldmvs	r1, {r9}
    1c40:	00039201 	andeq	r9, r3, r1, lsl #4
    1c44:	0e068900 	vmlaeq.f16	s16, s12, s0	@ <UNPREDICTABLE>
    1c48:	000000c2 	andeq	r0, r0, r2, asr #1
    1c4c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1c50:	00002217 	andeq	r2, r0, r7, lsl r2
    1c54:	a4064b00 	strge	r4, [r6], #-2816	@ 0xfffff500
    1c58:	0800022c 	stmdaeq	r0, {r2, r3, r5, r9}
    1c5c:	01000001 	tsteq	r0, r1
    1c60:	00089f9c 	muleq	r8, ip, pc	@ <UNPREDICTABLE>
    1c64:	2d101000 	ldccs	0, cr1, [r0, #-0]
    1c68:	00780002 	rsbseq	r0, r8, r2
    1c6c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    1c70:	7c000004 	stcvc	0, cr0, [r0], {4}
    1c74:	038c0306 	orreq	r0, ip, #402653184	@ 0x18000000
    1c78:	91020000 	mrsls	r0, (UNDEF: 2)
    1c7c:	0b000074 	bleq	1e54 <_start-0xe1ac>
    1c80:	00000c95 	muleq	r0, r5, ip
    1c84:	4710062d 	ldrmi	r0, [r0, -sp, lsr #12]
    1c88:	28000000 	stmdacs	r0, {}	@ <UNPREDICTABLE>
    1c8c:	7c00022c 	sfmvc	f0, 4, [r0], {44}	@ 0x2c
    1c90:	01000000 	mrseq	r0, (UNDEF: 0)
    1c94:	0008f69c 	muleq	r8, ip, r6
    1c98:	0d300200 	lfmeq	f0, 4, [r0, #-0]
    1c9c:	062d0000 	strteq	r0, [sp], -r0
    1ca0:	0001ee3a 	andeq	lr, r1, sl, lsr lr
    1ca4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1ca8:	000d3602 	andeq	r3, sp, r2, lsl #12
    1cac:	47062d00 	strmi	r2, [r6, -r0, lsl #26]
    1cb0:	0000008e 	andeq	r0, r0, lr, lsl #1
    1cb4:	01689102 	cmneq	r8, r2, lsl #2
    1cb8:	00000dd8 	ldrdeq	r0, [r0], -r8
    1cbc:	240a062f 	strcs	r0, [sl], #-1583	@ 0xfffff9d1
    1cc0:	02000003 	andeq	r0, r0, #3
    1cc4:	5d017491 	cfstrspl	mvf7, [r1, #-580]	@ 0xfffffdbc
    1cc8:	30000009 	andcc	r0, r0, r9
    1ccc:	00471006 	subeq	r1, r7, r6
    1cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1cd4:	a90b0070 	stmdbge	fp, {r4, r5, r6}
    1cd8:	10000010 	andne	r0, r0, r0, lsl r0
    1cdc:	00d31306 	sbcseq	r1, r3, r6, lsl #6
    1ce0:	2bcc0000 	blcs	ff301ce8 <_estack+0xf72e1ce8>
    1ce4:	005c0002 	subseq	r0, ip, r2
    1ce8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cec:	0000093e 	andeq	r0, r0, lr, lsr r9
    1cf0:	000d3002 	andeq	r3, sp, r2
    1cf4:	3b061000 	blcc	185cfc <__bss_end+0x1600c4>
    1cf8:	000001ee 	andeq	r0, r0, lr, ror #3
    1cfc:	016c9102 	cmneq	ip, r2, lsl #2
    1d00:	00000dd8 	ldrdeq	r0, [r0], -r8
    1d04:	240a0612 	strcs	r0, [sl], #-1554	@ 0xfffff9ee
    1d08:	02000003 	andeq	r0, r0, #3
    1d0c:	5d017491 	cfstrspl	mvf7, [r1, #-580]	@ 0xfffffdbc
    1d10:	13000009 	movwne	r0, #9
    1d14:	00d31306 	sbcseq	r1, r3, r6, lsl #6
    1d18:	91020000 	mrsls	r0, (UNDEF: 2)
    1d1c:	f80a0070 			@ <UNDEFINED> instruction: 0xf80a0070
    1d20:	f600000d 			@ <UNDEFINED> instruction: 0xf600000d
    1d24:	2b700705 	blcs	1c03940 <__bss_end+0x1bddd08>
    1d28:	005c0002 	subseq	r0, ip, r2
    1d2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d30:	00000982 	andeq	r0, r0, r2, lsl #19
    1d34:	000d3002 	andeq	r3, sp, r2
    1d38:	2f05f600 	svccs	0x0005f600
    1d3c:	000001ee 	andeq	r0, r0, lr, ror #3
    1d40:	026c9102 	rsbeq	r9, ip, #-2147483648	@ 0x80000000
    1d44:	00000bf0 	strdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
    1d48:	d34705f6 	movtle	r0, #30198	@ 0x75f6
    1d4c:	02000000 	andeq	r0, r0, #0
    1d50:	d8016891 	stmdale	r1, {r0, r4, r7, fp, sp, lr}
    1d54:	f800000d 			@ <UNDEFINED> instruction: 0xf800000d
    1d58:	03240a05 			@ <UNDEFINED> instruction: 0x03240a05
    1d5c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d60:	7e0a0074 	mcrvc	0, 0, r0, cr10, cr4, {3}
    1d64:	a9000001 	stmdbge	r0, {r0}
    1d68:	29540605 	ldmdbcs	r4, {r0, r2, r9, sl}^
    1d6c:	021c0002 	andseq	r0, ip, #2
    1d70:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d74:	000009de 	ldrdeq	r0, [r0], -lr
    1d78:	000dd701 	andeq	sp, sp, r1, lsl #14
    1d7c:	0a05ab00 	beq	16c984 <__bss_end+0x146d4c>
    1d80:	00000324 	andeq	r0, r0, r4, lsr #6
    1d84:	22709102 	rsbscs	r9, r0, #-2147483648	@ 0x80000000
    1d88:	00022994 	muleq	r2, r4, r9
    1d8c:	00000084 	andeq	r0, r0, r4, lsl #1
    1d90:	000009c4 	andeq	r0, r0, r4, asr #19
    1d94:	00047601 	andeq	r7, r4, r1, lsl #12
    1d98:	0b05b500 	bleq	16f1a0 <__bss_end+0x149568>
    1d9c:	00000382 	andeq	r0, r0, r2, lsl #7
    1da0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1da4:	022a1810 	eoreq	r1, sl, #16, 16	@ 0x100000
    1da8:	00011000 	andeq	r1, r1, r0
    1dac:	04a00100 	strteq	r0, [r0], #256	@ 0x100
    1db0:	05d60000 	ldrbeq	r0, [r6]
    1db4:	0000c203 	andeq	ip, r0, r3, lsl #4
    1db8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1dbc:	1d230000 	stcne	0, cr0, [r3, #-0]
    1dc0:	01000010 	tsteq	r0, r0, lsl r0
    1dc4:	531804f7 	tstpl	r8, #-150994944	@ 0xf7000000
    1dc8:	30000000 	andcc	r0, r0, r0
    1dcc:	24000229 	strcs	r0, [r0], #-553	@ 0xfffffdd7
    1dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd4:	0ccf189c 	stcleq	8, cr1, [pc], {156}	@ 0x9c
    1dd8:	04ea0000 	strbteq	r0, [sl], #0
    1ddc:	0000c20e 	andeq	ip, r0, lr, lsl #4
    1de0:	0228f800 	eoreq	pc, r8, #0, 16
    1de4:	00003800 	andeq	r3, r0, r0, lsl #16
    1de8:	2e9c0100 	fmlcse	f0, f4, f0
    1dec:	0100000a 	tsteq	r0, sl
    1df0:	0000095d 	andeq	r0, r0, sp, asr r9
    1df4:	c20e04ec 	andgt	r0, lr, #236, 8	@ 0xec000000
    1df8:	02000000 	andeq	r0, r0, #0
    1dfc:	a0017091 	mulge	r1, r1, r0
    1e00:	ed00000a 	stc	0, cr0, [r0, #-40]	@ 0xffffffd8
    1e04:	00531804 	subseq	r1, r3, r4, lsl #16
    1e08:	91020000 	mrsls	r0, (UNDEF: 2)
    1e0c:	b20b0074 	andlt	r0, fp, #116	@ 0x74
    1e10:	db000004 	blle	1e28 <_start-0xe1d8>
    1e14:	00c20e04 	sbceq	r0, r2, r4, lsl #28
    1e18:	28c40000 	stmiacs	r4, {}^	@ <UNPREDICTABLE>
    1e1c:	00340002 	eorseq	r0, r4, r2
    1e20:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e24:	00000a58 	andeq	r0, r0, r8, asr sl
    1e28:	00106801 	andseq	r6, r0, r1, lsl #16
    1e2c:	0e04dd00 	cdpeq	13, 0, cr13, cr4, cr0, {0}
    1e30:	000000c2 	andeq	r0, r0, r2, asr #1
    1e34:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e38:	000a1f0b 	andeq	r1, sl, fp, lsl #30
    1e3c:	16048400 	strne	r8, [r4], -r0, lsl #8
    1e40:	00000047 	andeq	r0, r0, r7, asr #32
    1e44:	00022720 	andeq	r2, r2, r0, lsr #14
    1e48:	000001a4 	andeq	r0, r0, r4, lsr #3
    1e4c:	0aa99c01 	beq	fea68e58 <_estack+0xf6a48e58>
    1e50:	d7010000 	strle	r0, [r1, -r0]
    1e54:	8600000d 	strhi	r0, [r0], -sp
    1e58:	03241204 			@ <UNDEFINED> instruction: 0x03241204
    1e5c:	54010000 	strpl	r0, [r1], #-0
    1e60:	000c3701 	andeq	r3, ip, r1, lsl #14
    1e64:	16048700 	strne	r8, [r4], -r0, lsl #14
    1e68:	00000047 	andeq	r0, r0, r7, asr #32
    1e6c:	106c9102 	rsbne	r9, ip, r2, lsl #2
    1e70:	0002276c 	andeq	r2, r2, ip, ror #14
    1e74:	00000124 	andeq	r0, r0, r4, lsr #2
    1e78:	000ddd01 	andeq	sp, sp, r1, lsl #26
    1e7c:	13049a00 	movwne	r9, #18944	@ 0x4a00
    1e80:	00000047 	andeq	r0, r0, r7, asr #32
    1e84:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1e88:	0b3b1600 	bleq	ec7690 <__bss_end+0xea1a58>
    1e8c:	047c0000 	ldrbteq	r0, [ip], #-0
    1e90:	000226f0 	strdeq	r2, [r2], -r0
    1e94:	00000030 	andeq	r0, r0, r0, lsr r0
    1e98:	73249c01 			@ <UNDEFINED> instruction: 0x73249c01
    1e9c:	0100000f 	tsteq	r0, pc
    1ea0:	b8060471 	stmdalt	r6, {r0, r4, r5, r6, sl}
    1ea4:	38000226 	stmdacc	r0, {r1, r2, r5, r9}
    1ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    1eac:	0d1b0a9c 	vldreq	s0, [fp, #-624]	@ 0xfffffd90
    1eb0:	04300000 	ldrteq	r0, [r0], #-0
    1eb4:	02261c06 	eoreq	r1, r6, #1536	@ 0x600
    1eb8:	00009c00 	andeq	r9, r0, r0, lsl #24
    1ebc:	f39c0100 	vaddw.u16	q0, q6, d0
    1ec0:	0100000a 	tsteq	r0, sl
    1ec4:	0000095d 	andeq	r0, r0, sp, asr r9
    1ec8:	470f0432 	smladxmi	pc, r2, r4, r0	@ <UNPREDICTABLE>
    1ecc:	02000000 	andeq	r0, r0, #0
    1ed0:	0b007491 	bleq	1f11c <__module_entries_end+0xf078>
    1ed4:	00000f85 	andeq	r0, r0, r5, lsl #31
    1ed8:	47100402 	ldrmi	r0, [r0, -r2, lsl #8]
    1edc:	00000000 	andeq	r0, r0, r0
    1ee0:	1c000225 	sfmne	f0, 4, [r0], {37}	@ 0x25
    1ee4:	01000001 	tsteq	r0, r1
    1ee8:	000b4a9c 	muleq	fp, ip, sl
    1eec:	0c6f0200 	sfmeq	f0, 2, [pc], #-0	@ 1ef4 <_start-0xe10c>
    1ef0:	04020000 	streq	r0, [r2], #-0
    1ef4:	0001ee30 	andeq	lr, r1, r0, lsr lr
    1ef8:	64910200 	ldrvs	r0, [r1], #512	@ 0x200
    1efc:	000ddd01 	andeq	sp, sp, r1, lsl #26
    1f00:	10040400 	andne	r0, r4, r0, lsl #8
    1f04:	00000047 	andeq	r0, r0, r7, asr #32
    1f08:	01749102 	cmneq	r4, r2, lsl #2
    1f0c:	00000dd7 	ldrdeq	r0, [r0], -r7
    1f10:	240a0405 	strcs	r0, [sl], #-1029	@ 0xfffffbfb
    1f14:	02000003 	andeq	r0, r0, #3
    1f18:	a0017091 	mulge	r1, r1, r0
    1f1c:	0600000a 	streq	r0, [r0], -sl
    1f20:	00531904 	subseq	r1, r3, r4, lsl #18
    1f24:	91020000 	mrsls	r0, (UNDEF: 2)
    1f28:	ec0a006c 	stc	0, cr0, [sl], {108}	@ 0x6c
    1f2c:	d500000d 	strle	r0, [r0, #-13]
    1f30:	24080703 	strcs	r0, [r8], #-1795	@ 0xfffff8fd
    1f34:	00f80002 	rscseq	r0, r8, r2
    1f38:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f3c:	00000b7f 	andeq	r0, r0, pc, ror fp
    1f40:	000c6f02 	andeq	r6, ip, r2, lsl #30
    1f44:	2003d500 	andcs	sp, r3, r0, lsl #10
    1f48:	000001ee 	andeq	r0, r0, lr, ror #3
    1f4c:	016c9102 	cmneq	ip, r2, lsl #2
    1f50:	00000dd7 	ldrdeq	r0, [r0], -r7
    1f54:	240a03d7 	strcs	r0, [sl], #-983	@ 0xfffffc29
    1f58:	02000003 	andeq	r0, r0, #3
    1f5c:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    1f60:	00000d65 	andeq	r0, r0, r5, ror #26
    1f64:	471703b3 			@ <UNDEFINED> instruction: 0x471703b3
    1f68:	8c000000 	stchi	0, cr0, [r0], {-0}
    1f6c:	7c000223 	sfmvc	f0, 4, [r0], {35}	@ 0x23
    1f70:	01000000 	mrseq	r0, (UNDEF: 0)
    1f74:	000bc79c 	muleq	fp, ip, r7
    1f78:	0d300200 	lfmeq	f0, 4, [r0, #-0]
    1f7c:	03b30000 			@ <UNDEFINED> instruction: 0x03b30000
    1f80:	0001ee39 	andeq	lr, r1, r9, lsr lr
    1f84:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1f88:	00095d01 	andeq	r5, r9, r1, lsl #26
    1f8c:	1003b500 	andne	fp, r3, r0, lsl #10
    1f90:	00000047 	andeq	r0, r0, r7, asr #32
    1f94:	01749102 	cmneq	r4, r2, lsl #2
    1f98:	00000dd7 	ldrdeq	r0, [r0], -r7
    1f9c:	cc1703b6 	ldcgt	3, cr0, [r7], {182}	@ 0xb6
    1fa0:	0200000b 	andeq	r0, r0, #11
    1fa4:	06007091 			@ <UNDEFINED> instruction: 0x06007091
    1fa8:	0000030d 	andeq	r0, r0, sp, lsl #6
    1fac:	000bc707 	andeq	ip, fp, r7, lsl #14
    1fb0:	0bbd0a00 	bleq	fef447b8 <_estack+0xf6f247b8>
    1fb4:	03730000 	cmneq	r3, #0
    1fb8:	02228807 	eoreq	r8, r2, #458752	@ 0x70000
    1fbc:	00010400 	andeq	r0, r1, r0, lsl #8
    1fc0:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    1fc4:	0200000c 	andeq	r0, r0, #12
    1fc8:	000010fd 	strdeq	r1, [r0], -sp
    1fcc:	ee210373 	mcr	3, 1, r0, cr1, cr3, {3}
    1fd0:	02000001 	andeq	r0, r0, #1
    1fd4:	d7016c91 			@ <UNDEFINED> instruction: 0xd7016c91
    1fd8:	7500000d 	strvc	r0, [r0, #-13]
    1fdc:	03240a03 			@ <UNDEFINED> instruction: 0x03240a03
    1fe0:	91020000 	mrsls	r0, (UNDEF: 2)
    1fe4:	510a0074 	tstpl	sl, r4, ror r0
    1fe8:	0700000c 	streq	r0, [r0, -ip]
    1fec:	20e00703 	rsccs	r0, r0, r3, lsl #14
    1ff0:	01a80002 			@ <UNDEFINED> instruction: 0x01a80002
    1ff4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ff8:	00000c68 	andeq	r0, r0, r8, ror #24
    1ffc:	000d2f02 	andeq	r2, sp, r2, lsl #30
    2000:	25030700 	strcs	r0, [r3, #-1792]	@ 0xfffff900
    2004:	000001ee 	andeq	r0, r0, lr, ror #3
    2008:	02649102 	rsbeq	r9, r4, #-2147483648	@ 0x80000000
    200c:	00000f34 	andeq	r0, r0, r4, lsr pc
    2010:	53440307 	movtpl	r0, #17159	@ 0x4307
    2014:	02000000 	andeq	r0, r0, #0
    2018:	d7016091 			@ <UNDEFINED> instruction: 0xd7016091
    201c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    2020:	03240a03 			@ <UNDEFINED> instruction: 0x03240a03
    2024:	91020000 	mrsls	r0, (UNDEF: 2)
    2028:	10d20170 	sbcsne	r0, r2, r0, ror r1
    202c:	030a0000 	movweq	r0, #40960	@ 0xa000
    2030:	00005319 	andeq	r5, r0, r9, lsl r3
    2034:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2038:	000ddd01 	andeq	sp, sp, r1, lsl #26
    203c:	10030b00 	andne	r0, r3, r0, lsl #22
    2040:	00000047 	andeq	r0, r0, r7, asr #32
    2044:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2048:	0010eb0b 	andseq	lr, r0, fp, lsl #22
    204c:	1902f100 	stmdbne	r2, {r8, ip, sp, lr, pc}
    2050:	00000053 	andeq	r0, r0, r3, asr r0
    2054:	00022088 	andeq	r2, r2, r8, lsl #1
    2058:	00000058 	andeq	r0, r0, r8, asr r0
    205c:	0cb09c01 	ldceq	12, cr9, [r0], #4
    2060:	2f020000 	svccs	0x00020000
    2064:	f100000d 	cps	#13
    2068:	01ee3802 	mvneq	r3, r2, lsl #16
    206c:	91020000 	mrsls	r0, (UNDEF: 2)
    2070:	0dd7016c 	ldfeqe	f0, [r7, #432]	@ 0x1b0
    2074:	02f30000 	rscseq	r0, r3, #0
    2078:	0003240a 	andeq	r2, r3, sl, lsl #8
    207c:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    2080:	00095c01 	andeq	r5, r9, r1, lsl #24
    2084:	1902f400 	stmdbne	r2, {sl, ip, sp, lr, pc}
    2088:	00000053 	andeq	r0, r0, r3, asr r0
    208c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2090:	000c7e0a 	andeq	r7, ip, sl, lsl #28
    2094:	0702c300 	streq	ip, [r2, -r0, lsl #6]
    2098:	00022004 	andeq	r2, r2, r4
    209c:	00000084 	andeq	r0, r0, r4, lsl #1
    20a0:	0cf49c01 	ldcleq	12, cr9, [r4], #4
    20a4:	68020000 	stmdavs	r2, {}	@ <UNPREDICTABLE>
    20a8:	c3000004 	movwgt	r0, #4
    20ac:	00c22002 	sbceq	r2, r2, r2
    20b0:	91020000 	mrsls	r0, (UNDEF: 2)
    20b4:	0392016c 	orrseq	r0, r2, #108, 2
    20b8:	02c50000 	sbceq	r0, r5, #0
    20bc:	0000c20f 	andeq	ip, r0, pc, lsl #4
    20c0:	70910200 	addsvc	r0, r1, r0, lsl #4
    20c4:	000c3701 	andeq	r3, ip, r1, lsl #14
    20c8:	1702c600 	strne	ip, [r2, -r0, lsl #12]
    20cc:	00000047 	andeq	r0, r0, r7, asr #32
    20d0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    20d4:	000f510a 	andeq	r5, pc, sl, lsl #2
    20d8:	07028200 	streq	r8, [r2, -r0, lsl #4]
    20dc:	00021ef4 	strdeq	r1, [r2], -r4
    20e0:	00000110 	andeq	r0, r0, r0, lsl r1
    20e4:	0d569c01 	ldcleq	12, cr9, [r6, #-4]
    20e8:	11020000 	mrsne	r0, (UNDEF: 2)
    20ec:	8200000f 	andhi	r0, r0, #15
    20f0:	07b02d02 	ldreq	r2, [r0, r2, lsl #26]!
    20f4:	91020000 	mrsls	r0, (UNDEF: 2)
    20f8:	108f0264 	addne	r0, pc, r4, ror #4
    20fc:	02820000 	addeq	r0, r2, #0
    2100:	0000c24e 	andeq	ip, r0, lr, asr #4
    2104:	60910200 	addsvs	r0, r1, r0, lsl #4
    2108:	00039201 	andeq	r9, r3, r1, lsl #4
    210c:	0f028400 	svceq	0x00028400
    2110:	000000c2 	andeq	r0, r0, r2, asr #1
    2114:	01709102 	cmneq	r0, r2, lsl #2
    2118:	00000c37 	andeq	r0, r0, r7, lsr ip
    211c:	47100285 	ldrmi	r0, [r0, -r5, lsl #5]
    2120:	02000000 	andeq	r0, r0, #0
    2124:	98016c91 	stmdals	r1, {r0, r4, r7, sl, fp, sp, lr}
    2128:	8500000f 	strhi	r0, [r0, #-15]
    212c:	00472102 	subeq	r2, r7, r2, lsl #2
    2130:	91020000 	mrsls	r0, (UNDEF: 2)
    2134:	f20a0074 	vqadd.s8	q0, q5, q10
    2138:	4000000f 	andmi	r0, r0, pc
    213c:	1df40702 	ldclne	7, cr0, [r4, #8]!
    2140:	01000002 	tsteq	r0, r2
    2144:	9c010000 	stcls	0, cr0, [r1], {-0}
    2148:	00000d8b 	andeq	r0, r0, fp, lsl #27
    214c:	000e9b02 	andeq	r9, lr, r2, lsl #22
    2150:	20024000 	andcs	r4, r2, r0
    2154:	000001ee 	andeq	r0, r0, lr, ror #3
    2158:	016c9102 	cmneq	ip, r2, lsl #2
    215c:	00000dd7 	ldrdeq	r0, [r0], -r7
    2160:	240a0242 	strcs	r0, [sl], #-578	@ 0xfffffdbe
    2164:	02000003 	andeq	r0, r0, #3
    2168:	0b007491 	bleq	1f3b4 <__module_entries_end+0xf310>
    216c:	00000c24 	andeq	r0, r0, r4, lsr #24
    2170:	4716019b 			@ <UNDEFINED> instruction: 0x4716019b
    2174:	a8000000 	stmdage	r0, {}	@ <UNPREDICTABLE>
    2178:	4c00021b 	sfmmi	f0, 4, [r0], {27}
    217c:	01000002 	tsteq	r0, r2
    2180:	000e579c 	muleq	lr, ip, r7
    2184:	0ede0200 	cdpeq	2, 13, cr0, cr14, cr0, {0}
    2188:	019b0000 	orrseq	r0, fp, r0
    218c:	0000a636 	andeq	sl, r0, r6, lsr r6
    2190:	64910200 	ldrvs	r0, [r1], #512	@ 0x200
    2194:	0010e402 	andseq	lr, r0, r2, lsl #8
    2198:	5c019b00 			@ <UNDEFINED> instruction: 0x5c019b00
    219c:	00000279 	andeq	r0, r0, r9, ror r2
    21a0:	02609102 	rsbeq	r9, r0, #-2147483648	@ 0x80000000
    21a4:	00000cff 	strdeq	r0, [r0], -pc	@ <UNPREDICTABLE>
    21a8:	4073019b 			@ <UNDEFINED> instruction: 0x4073019b
    21ac:	02000000 	andeq	r0, r0, #0
    21b0:	6b025e91 	blvs	99bfc <__bss_end+0x73fc4>
    21b4:	9b000001 	blls	21c0 <_start-0xde40>
    21b8:	008e8701 	addeq	r8, lr, r1, lsl #14
    21bc:	91020000 	mrsls	r0, (UNDEF: 2)
    21c0:	06be0258 	ssateq	r0, #31, r8, asr #4
    21c4:	019b0000 	orrseq	r0, fp, r0
    21c8:	000053ac 	andeq	r5, r0, ip, lsr #7
    21cc:	00910200 	addseq	r0, r1, r0, lsl #4
    21d0:	000d5702 	andeq	r5, sp, r2, lsl #14
    21d4:	c5019b00 	strgt	r9, [r1, #-2816]	@ 0xfffff500
    21d8:	00000e57 	andeq	r0, r0, r7, asr lr
    21dc:	02049102 	andeq	r9, r4, #-2147483648	@ 0x80000000
    21e0:	00000d0c 	andeq	r0, r0, ip, lsl #26
    21e4:	7ee4019b 	mcrvc	1, 7, r0, cr4, cr11, {4}
    21e8:	02000002 	andeq	r0, r0, #2
    21ec:	aa250891 	bge	944438 <__bss_end+0x91e800>
    21f0:	0100000e 	tsteq	r0, lr
    21f4:	0110019b 			@ <UNDEFINED> instruction: 0x0110019b
    21f8:	0000071d 	andeq	r0, r0, sp, lsl r7
    21fc:	010c9102 	tsteq	ip, r2, lsl #2
    2200:	0000095d 	andeq	r0, r0, sp, asr r9
    2204:	4716019d 			@ <UNDEFINED> instruction: 0x4716019d
    2208:	02000000 	andeq	r0, r0, #0
    220c:	c6017491 			@ <UNDEFINED> instruction: 0xc6017491
    2210:	9e00000c 	cdpls	0, 0, cr0, cr0, cr12, {0}
    2214:	03240a01 			@ <UNDEFINED> instruction: 0x03240a01
    2218:	91020000 	mrsls	r0, (UNDEF: 2)
    221c:	1be81070 	blne	ffa063e4 <_estack+0xf79e63e4>
    2220:	019c0002 	orrseq	r0, ip, r2
    2224:	39010000 	stmdbcc	r1, {}	@ <UNPREDICTABLE>
    2228:	a9000001 	stmdbge	r0, {r0}
    222c:	027e1301 	rsbseq	r1, lr, #67108864	@ 0x4000000
    2230:	91020000 	mrsls	r0, (UNDEF: 2)
    2234:	0600006c 	streq	r0, [r0], -ip, rrx
    2238:	000001ee 	andeq	r0, r0, lr, ror #3
    223c:	0002b300 	andeq	fp, r2, r0, lsl #6
    2240:	01000500 	tsteq	r0, r0, lsl #10
    2244:	00098604 	andeq	r8, r9, r4, lsl #12
    2248:	00941100 	addseq	r1, r4, r0, lsl #2
    224c:	8f1d0000 	svchi	0x001d0000
    2250:	f1000011 	cps	#17
    2254:	cc000000 	stcgt	0, cr0, [r0], {-0}
    2258:	a4000234 	strge	r0, [r0], #-564	@ 0xfffffdcc
    225c:	17000003 	strne	r0, [r0, -r3]
    2260:	04000016 	streq	r0, [r0], #-22	@ 0xffffffea
    2264:	000001f8 	strdeq	r0, [r0], -r8
    2268:	32100b02 	andscc	r0, r0, #2048	@ 0x800
    226c:	06000000 	streq	r0, [r0], -r0
    2270:	00000037 	andeq	r0, r0, r7, lsr r0
    2274:	00004712 	andeq	r4, r0, r2, lsl r7
    2278:	00470700 	subeq	r0, r7, r0, lsl #14
    227c:	51070000 	mrspl	r0, (UNDEF: 7)
    2280:	00000000 	andeq	r0, r0, r0
    2284:	00075808 	andeq	r5, r7, r8, lsl #16
    2288:	00470900 	subeq	r0, r7, r0, lsl #18
    228c:	04130000 	ldreq	r0, [r3], #-0
    2290:	0d02080a 	stceq	8, cr0, [r2, #-40]	@ 0xffffffd8
    2294:	00000076 	andeq	r0, r0, r6, ror r0
    2298:	0011da01 	andseq	sp, r1, r1, lsl #20
    229c:	180e0200 	stmdane	lr, {r9}
    22a0:	00000026 	andeq	r0, r0, r6, lsr #32
    22a4:	004c0100 	subeq	r0, ip, r0, lsl #2
    22a8:	0f020000 	svceq	0x00020000
    22ac:	0000510f 	andeq	r5, r0, pc, lsl #2
    22b0:	04000400 	streq	r0, [r0], #-1024	@ 0xfffffc00
    22b4:	00001216 	andeq	r1, r0, r6, lsl r2
    22b8:	53031002 	movwpl	r1, #12290	@ 0x3002
    22bc:	0b000000 	bleq	22c4 <_start-0xdd3c>
    22c0:	00000076 	andeq	r0, r0, r6, ror r0
    22c4:	00000092 	muleq	r0, r2, r0
    22c8:	0000470c 	andeq	r4, r0, ip, lsl #14
    22cc:	02004700 	andeq	r4, r0, #0, 14
    22d0:	000011e5 	andeq	r1, r0, r5, ror #3
    22d4:	00821909 	addeq	r1, r2, r9, lsl #18
    22d8:	03050000 	movweq	r0, #20480	@ 0x5000
    22dc:	000249dc 	ldrdeq	r4, [r2], -ip
    22e0:	0c01280a 	stceq	8, cr2, [r1], {10}
    22e4:	0000012e 	andeq	r0, r0, lr, lsr #2
    22e8:	00122f01 	andseq	r2, r2, r1, lsl #30
    22ec:	100d0100 	andne	r0, sp, r0, lsl #2
    22f0:	0000012e 	andeq	r0, r0, lr, lsr #2
    22f4:	11f30100 	mvnsne	r0, r0, lsl #2
    22f8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    22fc:	00012e10 	andeq	r2, r1, r0, lsl lr
    2300:	32010400 	andcc	r0, r1, #0, 8
    2304:	01000011 	tsteq	r0, r1, lsl r0
    2308:	012e100f 			@ <UNDEFINED> instruction: 0x012e100f
    230c:	01080000 	mrseq	r0, (UNDEF: 8)
    2310:	0000115a 	andeq	r1, r0, sl, asr r1
    2314:	2e101001 	cdpcs	0, 1, cr1, cr0, cr1, {0}
    2318:	0c000001 	stceq	0, cr0, [r0], {1}
    231c:	00124401 	andseq	r4, r2, r1, lsl #8
    2320:	10110100 	andsne	r0, r1, r0, lsl #2
    2324:	0000012e 	andeq	r0, r0, lr, lsr #2
    2328:	11fc0110 	mvnsne	r0, r0, lsl r1
    232c:	12010000 	andne	r0, r1, #0
    2330:	00012e10 	andeq	r2, r1, r0, lsl lr
    2334:	38011400 	stmdacc	r1, {sl, ip}
    2338:	01000012 	tsteq	r0, r2, lsl r0
    233c:	012e1013 			@ <UNDEFINED> instruction: 0x012e1013
    2340:	01180000 	tsteq	r8, r0
    2344:	00001204 	andeq	r1, r0, r4, lsl #4
    2348:	2e101401 	cfmulscs	mvf1, mvf0, mvf1
    234c:	1c000001 	stcne	0, cr0, [r0], {1}
    2350:	00120d01 	andseq	r0, r2, r1, lsl #26
    2354:	10150100 	andsne	r0, r5, r0, lsl #2
    2358:	0000012e 	andeq	r0, r0, lr, lsr #2
    235c:	113b0120 	teqne	fp, r0, lsr #2
    2360:	16010000 	strne	r0, [r1], -r0
    2364:	00012e10 	andeq	r2, r1, r0, lsl lr
    2368:	08002400 	stmdaeq	r0, {sl, sp}
    236c:	00000753 	andeq	r0, r0, r3, asr r7
    2370:	00114804 	andseq	r4, r1, r4, lsl #16
    2374:	03170100 	tsteq	r7, #0, 2
    2378:	000000a3 	andeq	r0, r0, r3, lsr #1
    237c:	00013314 	andeq	r3, r1, r4, lsl r3
    2380:	01780200 	cmneq	r8, r0, lsl #4
    2384:	2b190000 	blcs	64238c <__bss_end+0x61c754>
    2388:	0000015a 	andeq	r0, r0, sl, asr r1
    238c:	48080305 	stmdami	r8, {r0, r2, r8, r9}
    2390:	3f060002 	svccc	0x00060002
    2394:	09000001 	stmdbeq	r0, {r0}
    2398:	00000155 	andeq	r0, r0, r5, asr r1
    239c:	00012e0b 	andeq	r2, r1, fp, lsl #28
    23a0:	00016f00 	andeq	r6, r1, r0, lsl #30
    23a4:	00470c00 	subeq	r0, r7, r0, lsl #24
    23a8:	00020000 	andeq	r0, r2, r0
    23ac:	00117602 	andseq	r7, r1, r2, lsl #12
    23b0:	5f161c00 	svcpl	0x00161c00
    23b4:	05000001 	streq	r0, [r0, #-1]
    23b8:	024c1c03 	subeq	r1, ip, #768	@ 0x300
    23bc:	11cf0d00 	bicne	r0, pc, r0, lsl #26
    23c0:	906d0000 	rsbls	r0, sp, r0
    23c4:	e0000237 	and	r0, r0, r7, lsr r2
    23c8:	01000000 	mrseq	r0, (UNDEF: 0)
    23cc:	0001b19c 	muleq	r1, ip, r1
    23d0:	72690500 	rsbvc	r0, r9, #0, 10
    23d4:	256d0071 	strbcs	r0, [sp, #-113]!	@ 0xffffff8f
    23d8:	0000004c 	andeq	r0, r0, ip, asr #32
    23dc:	026c9102 	rsbeq	r9, ip, #-2147483648	@ 0x80000000
    23e0:	0000118a 	andeq	r1, r0, sl, lsl #3
    23e4:	012e106f 			@ <UNDEFINED> instruction: 0x012e106f
    23e8:	91020000 	mrsls	r0, (UNDEF: 2)
    23ec:	910d0074 	tstls	sp, r4, ror r0
    23f0:	5b000001 	blpl	23fc <_start-0xdc04>
    23f4:	000236bc 			@ <UNDEFINED> instruction: 0x000236bc
    23f8:	000000d4 	ldrdeq	r0, [r0], -r4
    23fc:	01e29c01 	mvneq	r9, r1, lsl #24
    2400:	69050000 	stmdbvs	r5, {}	@ <UNPREDICTABLE>
    2404:	5b007172 	blpl	1e9d4 <__module_entries_end+0xe930>
    2408:	00004c24 	andeq	r4, r0, r4, lsr #24
    240c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2410:	00118a02 	andseq	r8, r1, r2, lsl #20
    2414:	2e105d00 	cdpcs	13, 1, cr5, cr0, cr0, {0}
    2418:	02000001 	andeq	r0, r0, #1
    241c:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
    2420:	00000053 	andeq	r0, r0, r3, asr r0
    2424:	02365851 	eorseq	r5, r6, #5308416	@ 0x510000
    2428:	00006400 	andeq	r6, r0, r0, lsl #8
    242c:	219c0100 	orrscs	r0, ip, r0, lsl #2
    2430:	05000002 	streq	r0, [r0, #-2]
    2434:	00717269 	rsbseq	r7, r1, r9, ror #4
    2438:	004c2651 	subeq	r2, ip, r1, asr r6
    243c:	91020000 	mrsls	r0, (UNDEF: 2)
    2440:	11da0374 	bicsne	r0, sl, r4, ror r3
    2444:	40510000 	subsmi	r0, r1, r0
    2448:	00000026 	andeq	r0, r0, r6, lsr #32
    244c:	03709102 	cmneq	r0, #-2147483648	@ 0x80000000
    2450:	0000004c 	andeq	r0, r0, ip, asr #32
    2454:	00515251 	subseq	r5, r1, r1, asr r2
    2458:	91020000 	mrsls	r0, (UNDEF: 2)
    245c:	0c0f006c 	stceq	0, cr0, [pc], {108}	@ 0x6c
    2460:	4c000000 	stcmi	0, cr0, [r0], {-0}
    2464:	0002363c 	andeq	r3, r2, ip, lsr r6
    2468:	0000001c 	andeq	r0, r0, ip, lsl r0
    246c:	e60f9c01 	str	r9, [pc], -r1, lsl #24
    2470:	47000000 	strmi	r0, [r0, -r0]
    2474:	00023620 	andeq	r3, r2, r0, lsr #12
    2478:	0000001c 	andeq	r0, r0, ip, lsl r0
    247c:	160e9c01 	strne	r9, [lr], -r1, lsl #24
    2480:	36000003 	strcc	r0, [r0], -r3
    2484:	00023580 	andeq	r3, r2, r0, lsl #11
    2488:	000000a0 	andeq	r0, r0, r0, lsr #1
    248c:	02639c01 	rsbeq	r9, r3, #256	@ 0x100
    2490:	62020000 	andvs	r0, r2, #0
    2494:	38000011 	stmdacc	r0, {r0, r4}
    2498:	00012e19 	andeq	r2, r1, r9, lsl lr
    249c:	00540100 	subseq	r0, r4, r0, lsl #2
    24a0:	00117e15 	andseq	r7, r1, r5, lsl lr
    24a4:	0d1e0100 	ldfeqs	f0, [lr, #-0]
    24a8:	000234cc 	andeq	r3, r2, ip, asr #9
    24ac:	000000b4 	strheq	r0, [r0], -r4
    24b0:	27039c01 	strcs	r9, [r3, -r1, lsl #24]
    24b4:	1e000012 	mcrne	0, 0, r0, cr0, cr2, {0}
    24b8:	00012e28 	andeq	r2, r1, r8, lsr #28
    24bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    24c0:	00117103 	andseq	r7, r1, r3, lsl #2
    24c4:	4c441e00 	mcrrmi	14, 0, r1, r4, cr0
    24c8:	02000000 	andeq	r0, r0, #0
    24cc:	e4166891 	ldr	r6, [r6], #-2193	@ 0xfffff76f
    24d0:	7c000234 	sfmvc	f0, 4, [r0], {52}	@ 0x34
    24d4:	10000000 	andne	r0, r0, r0
    24d8:	00746962 	rsbseq	r6, r4, r2, ror #18
    24dc:	00004723 	andeq	r4, r0, r3, lsr #14
    24e0:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    24e4:	71726910 	cmnvc	r2, r0, lsl r9
    24e8:	00472600 	subeq	r2, r7, r0, lsl #12
    24ec:	91020000 	mrsls	r0, (UNDEF: 2)
    24f0:	00000070 	andeq	r0, r0, r0, ror r0
    24f4:	000003e0 	andeq	r0, r0, r0, ror #7
    24f8:	04010005 	streq	r0, [r1], #-5
    24fc:	00000ad6 	ldrdeq	r0, [r0], -r6
    2500:	0000940a 	andeq	r9, r0, sl, lsl #8
    2504:	12aa1d00 	adcne	r1, sl, #0, 26
    2508:	00f10000 	rscseq	r0, r1, r0
    250c:	38700000 	ldmdacc	r0!, {}^	@ <UNPREDICTABLE>
    2510:	05d80002 	ldrbeq	r0, [r8, #2]
    2514:	17a60000 	strne	r0, [r6, r0]!
    2518:	1c090000 	stcne	0, cr0, [r9], {-0}
    251c:	5f000013 	svcpl	0x00000013
    2520:	47000000 	strmi	r0, [r0, -r0]
    2524:	0000005f 	andeq	r0, r0, pc, asr r0
    2528:	00137504 	andseq	r7, r3, r4, lsl #10
    252c:	90040000 	andls	r0, r4, r0
    2530:	01000013 	tsteq	r0, r3, lsl r0
    2534:	00143f04 	andseq	r3, r4, r4, lsl #30
    2538:	69040200 	stmdbvs	r4, {r9}
    253c:	03000013 	movweq	r0, #19
    2540:	00139e04 	andseq	r9, r3, r4, lsl #28
    2544:	96040400 	strls	r0, [r4], -r0, lsl #8
    2548:	05000012 	streq	r0, [r0, #-18]	@ 0xffffffee
    254c:	00146c04 	andseq	r6, r4, r4, lsl #24
    2550:	06000600 	streq	r0, [r0], -r0, lsl #12
    2554:	07650801 	strbeq	r0, [r5, -r1, lsl #16]!
    2558:	58090000 	stmdapl	r9, {}	@ <UNPREDICTABLE>
    255c:	5f000013 	svcpl	0x00000013
    2560:	5a000000 	bpl	2568 <_start-0xda98>
    2564:	00000081 	andeq	r0, r0, r1, lsl #1
    2568:	00136104 	andseq	r6, r3, r4, lsl #2
    256c:	81040000 	mrshi	r0, (UNDEF: 4)
    2570:	01000014 	tsteq	r0, r4, lsl r0
    2574:	01a00b00 	lsleq	r0, r0, #22
    2578:	0193094a 	orrseq	r0, r3, sl, asr #18
    257c:	d5010000 	strle	r0, [r1, #-0]
    2580:	4b000013 	blmi	25d4 <_start-0xda2c>
    2584:	00000193 	muleq	r0, r3, r1
    2588:	13dc0100 	bicsne	r0, ip, #0, 2
    258c:	aa4c0000 	bge	1302594 <__bss_end+0x12dc95c>
    2590:	18000001 	stmdane	r0, {r0}
    2594:	00124c01 	andseq	r4, r2, r1, lsl #24
    2598:	01b14d00 			@ <UNDEFINED> instruction: 0x01b14d00
    259c:	011c0000 	tsteq	ip, r0
    25a0:	000013e7 	andeq	r1, r0, r7, ror #7
    25a4:	0001aa4e 	andeq	sl, r1, lr, asr #20
    25a8:	8a012400 	bhi	4b5b0 <__bss_end+0x25978>
    25ac:	4f000012 	svcmi	0x00000012
    25b0:	000001b1 			@ <UNDEFINED> instruction: 0x000001b1
    25b4:	13f20128 	mvnsne	r0, #40, 2
    25b8:	aa500000 	bge	14025c0 <__bss_end+0x13dc988>
    25bc:	30000001 	andcc	r0, r0, r1
    25c0:	0013a901 	andseq	sl, r3, r1, lsl #18
    25c4:	01b15100 			@ <UNDEFINED> instruction: 0x01b15100
    25c8:	01340000 	teqeq	r4, r0
    25cc:	000013fd 	strdeq	r1, [r0], -sp
    25d0:	0001aa52 	andeq	sl, r1, r2, asr sl
    25d4:	bd013c00 	stclt	12, cr3, [r1, #-0]
    25d8:	53000013 	movwpl	r0, #19
    25dc:	000001b1 			@ <UNDEFINED> instruction: 0x000001b1
    25e0:	14080140 	strne	r0, [r8], #-320	@ 0xfffffec0
    25e4:	aa540000 	bge	15025ec <__bss_end+0x14dc9b4>
    25e8:	48000001 	stmdami	r0, {r0}
    25ec:	0013b701 	andseq	fp, r3, r1, lsl #14
    25f0:	01b15500 			@ <UNDEFINED> instruction: 0x01b15500
    25f4:	014c0000 	mrseq	r0, (UNDEF: 76)
    25f8:	00001413 	andeq	r1, r0, r3, lsl r4
    25fc:	0001aa56 	andeq	sl, r1, r6, asr sl
    2600:	c3015400 	movwgt	r5, #5120	@ 0x1400
    2604:	57000013 	smladpl	r0, r3, r0, r0
    2608:	000001b1 			@ <UNDEFINED> instruction: 0x000001b1
    260c:	141e0158 	ldrne	r0, [lr], #-344	@ 0xfffffea8
    2610:	aa580000 	bge	1602618 <__bss_end+0x15dc9e0>
    2614:	60000001 	andvs	r0, r0, r1
    2618:	00129001 	andseq	r9, r2, r1
    261c:	01b15900 			@ <UNDEFINED> instruction: 0x01b15900
    2620:	01640000 	cmneq	r4, r0
    2624:	00001429 	andeq	r1, r0, r9, lsr #8
    2628:	0001aa5a 	andeq	sl, r1, sl, asr sl
    262c:	81016c00 	tsthi	r1, r0, lsl #24
    2630:	5b000013 	blpl	2684 <_start-0xd97c>
    2634:	000001b1 			@ <UNDEFINED> instruction: 0x000001b1
    2638:	14340170 	ldrtne	r0, [r4], #-368	@ 0xfffffe90
    263c:	aa5c0000 	bge	1702644 <__bss_end+0x16dca0c>
    2640:	78000001 	stmdavc	r0, {r0}
    2644:	00132f01 	andseq	r2, r3, r1, lsl #30
    2648:	01b15d00 			@ <UNDEFINED> instruction: 0x01b15d00
    264c:	017c0000 	cmneq	ip, r0
    2650:	00001456 	andeq	r1, r0, r6, asr r4
    2654:	0001aa5e 	andeq	sl, r1, lr, asr sl
    2658:	fe018400 	cdp2	4, 0, cr8, cr1, cr0, {0}
    265c:	5f000012 	svcpl	0x00000012
    2660:	000001b1 			@ <UNDEFINED> instruction: 0x000001b1
    2664:	14610188 	strbtne	r0, [r1], #-392	@ 0xfffffe78
    2668:	aa600000 	bge	1802670 <__bss_end+0x17dca38>
    266c:	90000001 	andls	r0, r0, r1
    2670:	00131601 	andseq	r1, r3, r1, lsl #12
    2674:	01c16100 	biceq	r6, r1, r0, lsl #2
    2678:	01940000 	orrseq	r0, r4, r0
    267c:	00001387 	andeq	r1, r0, r7, lsl #7
    2680:	0001b162 	andeq	fp, r1, r2, ror #2
    2684:	07009800 	streq	r9, [r0, -r0, lsl #16]
    2688:	000001aa 	andeq	r0, r0, sl, lsr #3
    268c:	000001a3 	andeq	r0, r0, r3, lsr #3
    2690:	0001a308 	andeq	sl, r1, r8, lsl #6
    2694:	06000500 	streq	r0, [r0], -r0, lsl #10
    2698:	07580704 	ldrbeq	r0, [r8, -r4, lsl #14]
    269c:	04060000 	streq	r0, [r6], #-0
    26a0:	00075307 	andeq	r5, r7, r7, lsl #6
    26a4:	01aa0700 			@ <UNDEFINED> instruction: 0x01aa0700
    26a8:	01c10000 	biceq	r0, r1, r0
    26ac:	a3080000 	movwge	r0, #32768	@ 0x8000
    26b0:	01000001 	tsteq	r0, r1
    26b4:	01aa0700 			@ <UNDEFINED> instruction: 0x01aa0700
    26b8:	01d10000 	bicseq	r0, r1, r0
    26bc:	a3080000 	movwge	r0, #32768	@ 0x8000
    26c0:	00000001 	andeq	r0, r0, r1
    26c4:	12520c00 	subsne	r0, r2, #0, 24
    26c8:	64010000 	strvs	r0, [r1], #-0
    26cc:	00008103 	andeq	r8, r0, r3, lsl #2
    26d0:	01d10d00 	bicseq	r0, r1, r0, lsl #26
    26d4:	780e0000 	stmdavc	lr, {}	@ <UNPREDICTABLE>
    26d8:	01000001 	tsteq	r0, r1
    26dc:	01fa2466 	mvnseq	r2, r6, ror #8
    26e0:	03050000 	movweq	r0, #20480	@ 0x5000
    26e4:	0002480c 	andeq	r4, r2, ip, lsl #16
    26e8:	01dd040f 	bicseq	r0, sp, pc, lsl #8
    26ec:	f4100000 			@ <UNDEFINED> instruction: 0xf4100000
    26f0:	05000001 	streq	r0, [r0, #-1]
    26f4:	000012eb 	andeq	r1, r0, fp, ror #5
    26f8:	023df0c2 	eorseq	pc, sp, #194	@ 0xc2
    26fc:	00005800 	andeq	r5, r0, r0, lsl #16
    2700:	3e9c0100 	fmlcce	f0, f4, f0
    2704:	02000002 	andeq	r0, r0, #2
    2708:	00001269 	andeq	r1, r0, r9, ror #4
    270c:	01a326c2 			@ <UNDEFINED> instruction: 0x01a326c2
    2710:	91020000 	mrsls	r0, (UNDEF: 2)
    2714:	118a036c 	orrne	r0, sl, ip, ror #6
    2718:	10c40000 	sbcne	r0, r4, r0
    271c:	000001aa 	andeq	r0, r0, sl, lsr #3
    2720:	03749102 	cmneq	r4, #-2147483648	@ 0x80000000
    2724:	000013ce 	andeq	r1, r0, lr, asr #7
    2728:	01aa10c5 			@ <UNDEFINED> instruction: 0x01aa10c5
    272c:	91020000 	mrsls	r0, (UNDEF: 2)
    2730:	36050070 			@ <UNDEFINED> instruction: 0x36050070
    2734:	a5000013 	strge	r0, [r0, #-19]	@ 0xffffffed
    2738:	00023c38 	andeq	r3, r2, r8, lsr ip
    273c:	000001b8 			@ <UNDEFINED> instruction: 0x000001b8
    2740:	028b9c01 	addeq	r9, fp, #256	@ 0x100
    2744:	69020000 	stmdbvs	r2, {}	@ <UNPREDICTABLE>
    2748:	a5000012 	strge	r0, [r0, #-18]	@ 0xffffffee
    274c:	0001a325 	andeq	sl, r1, r5, lsr #6
    2750:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2754:	0013c902 	andseq	ip, r3, r2, lsl #18
    2758:	263ea500 	ldrtcs	sl, [lr], -r0, lsl #10
    275c:	02000000 	andeq	r0, r0, #0
    2760:	8a036b91 	bhi	dd5ac <__bss_end+0xb7974>
    2764:	a7000011 	smladge	r0, r1, r0, r0
    2768:	0001aa10 	andeq	sl, r1, r0, lsl sl
    276c:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    2770:	0013ce03 	andseq	ip, r3, r3, lsl #28
    2774:	aa10a800 	bge	42c77c <__bss_end+0x406b44>
    2778:	02000001 	andeq	r0, r0, #1
    277c:	05007091 	streq	r7, [r0, #-145]	@ 0xffffff6f
    2780:	00001305 	andeq	r1, r0, r5, lsl #6
    2784:	023a8888 	eorseq	r8, sl, #136, 16	@ 0x880000
    2788:	0001b000 	andeq	fp, r1, r0
    278c:	d89c0100 	ldmle	ip, {r8}
    2790:	02000002 	andeq	r0, r0, #2
    2794:	00001269 	andeq	r1, r0, r9, ror #4
    2798:	01a32488 			@ <UNDEFINED> instruction: 0x01a32488
    279c:	91020000 	mrsls	r0, (UNDEF: 2)
    27a0:	13c9026c 	bicne	r0, r9, #108, 4	@ 0xc0000006
    27a4:	3d880000 	stccc	0, cr0, [r8]
    27a8:	00000026 	andeq	r0, r0, r6, lsr #32
    27ac:	036b9102 	cmneq	fp, #-2147483648	@ 0x80000000
    27b0:	0000118a 	andeq	r1, r0, sl, lsl #3
    27b4:	01aa108a 			@ <UNDEFINED> instruction: 0x01aa108a
    27b8:	91020000 	mrsls	r0, (UNDEF: 2)
    27bc:	13ce0374 	bicne	r0, lr, #116, 6	@ 0xd0000001
    27c0:	108b0000 	addne	r0, fp, r0
    27c4:	000001aa 	andeq	r0, r0, sl, lsr #3
    27c8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    27cc:	00127011 	andseq	r7, r2, r1, lsl r0
    27d0:	05840100 	streq	r0, [r4, #256]	@ 0x100
    27d4:	00000301 	andeq	r0, r0, r1, lsl #6
    27d8:	00023a38 	andeq	r3, r2, r8, lsr sl
    27dc:	00000050 	andeq	r0, r0, r0, asr r0
    27e0:	03019c01 	movweq	r9, #7169	@ 0x1c01
    27e4:	69020000 	stmdbvs	r2, {}	@ <UNPREDICTABLE>
    27e8:	84000012 	strhi	r0, [r0], #-18	@ 0xffffffee
    27ec:	0001a31b 	andeq	sl, r1, fp, lsl r3
    27f0:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    27f4:	05041200 	streq	r1, [r4, #-512]	@ 0xfffffe00
    27f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    27fc:	00144e05 	andseq	r4, r4, r5, lsl #28
    2800:	39807900 	stmibcc	r0, {r8, fp, ip, sp, lr}
    2804:	00b80002 	adcseq	r0, r8, r2
    2808:	9c010000 	stcls	0, cr0, [r1], {-0}
    280c:	00000355 	andeq	r0, r0, r5, asr r3
    2810:	00126902 	andseq	r6, r2, r2, lsl #18
    2814:	a31b7900 	tstge	fp, #0, 18
    2818:	02000001 	andeq	r0, r0, #1
    281c:	28026c91 	stmdacs	r2, {r0, r4, r7, sl, fp, sp, lr}
    2820:	79000013 	stmdbvc	r0, {r0, r1, r4}
    2824:	0001a330 	andeq	sl, r1, r0, lsr r3
    2828:	68910200 	ldmvs	r1, {r9}
    282c:	0013ce03 	andseq	ip, r3, r3, lsl #28
    2830:	aa107a00 	bge	421038 <__bss_end+0x3fb400>
    2834:	02000001 	andeq	r0, r0, #1
    2838:	8a037491 	bhi	dfa84 <__bss_end+0xb9e4c>
    283c:	7b000011 	blvc	2888 <_start-0xd778>
    2840:	0001aa10 	andeq	sl, r1, r0, lsl sl
    2844:	70910200 	addsvc	r0, r1, r0, lsl #4
    2848:	12791300 	rsbsne	r1, r9, #0, 6
    284c:	75010000 	strvc	r0, [r1, #-0]
    2850:	02394c06 	eorseq	r4, r9, #1536	@ 0x600
    2854:	00003400 	andeq	r3, r0, r0, lsl #8
    2858:	899c0100 	ldmibhi	ip, {r8}
    285c:	02000003 	andeq	r0, r0, #3
    2860:	00001269 	andeq	r1, r0, r9, ror #4
    2864:	01a32475 			@ <UNDEFINED> instruction: 0x01a32475
    2868:	91020000 	mrsls	r0, (UNDEF: 2)
    286c:	69641474 	stmdbvs	r4!, {r2, r4, r5, r6, sl, ip}^
    2870:	75010072 	strvc	r0, [r1, #-114]	@ 0xffffff8e
    2874:	0000663a 	andeq	r6, r0, sl, lsr r6
    2878:	73910200 	orrsvc	r0, r1, #0, 4
    287c:	13481500 	movtne	r1, #34048	@ 0x8500
    2880:	69010000 	stmdbvs	r1, {}	@ <UNPREDICTABLE>
    2884:	02387006 	eorseq	r7, r8, #6
    2888:	0000dc00 	andeq	sp, r0, r0, lsl #24
    288c:	029c0100 	addseq	r0, ip, #0, 2
    2890:	00001269 	andeq	r1, r0, r9, ror #4
    2894:	01a32369 			@ <UNDEFINED> instruction: 0x01a32369
    2898:	91020000 	mrsls	r0, (UNDEF: 2)
    289c:	13af0264 			@ <UNDEFINED> instruction: 0x13af0264
    28a0:	38690000 	stmdacc	r9!, {}^	@ <UNPREDICTABLE>
    28a4:	000001a3 	andeq	r0, r0, r3, lsr #3
    28a8:	03609102 	cmneq	r0, #-2147483648	@ 0x80000000
    28ac:	000013ce 	andeq	r1, r0, lr, asr #7
    28b0:	0301066b 	movweq	r0, #5739	@ 0x166b
    28b4:	91020000 	mrsls	r0, (UNDEF: 2)
    28b8:	61761674 	cmnvs	r6, r4, ror r6
    28bc:	6d01006c 	stcvs	0, cr0, [r1, #-432]	@ 0xfffffe50
    28c0:	0001aa10 	andeq	sl, r1, r0, lsl sl
    28c4:	70910200 	addsvc	r0, r1, r0, lsl #4
    28c8:	00126403 	andseq	r6, r2, r3, lsl #8
    28cc:	01066f00 	tsteq	r6, r0, lsl #30
    28d0:	02000003 	andeq	r0, r0, #3
    28d4:	00006c91 	muleq	r0, r1, ip
    28d8:	000002e3 	andeq	r0, r0, r3, ror #5
    28dc:	04010005 	streq	r0, [r1], #-5
    28e0:	00000c43 	andeq	r0, r0, r3, asr #24
    28e4:	0000940a 	andeq	r9, r0, sl, lsl #8
    28e8:	15331d00 	ldrne	r1, [r3, #-3328]!	@ 0xfffff300
    28ec:	00f10000 	rscseq	r0, r1, r0
    28f0:	3e480000 	cdpcc	0, 4, cr0, cr8, cr0, {0}
    28f4:	04ac0002 	strteq	r0, [ip], #2
    28f8:	19960000 	ldmibne	r6, {}	@ <UNPREDICTABLE>
    28fc:	d8050000 	stmdale	r5, {}	@ <UNPREDICTABLE>
    2900:	02000003 	andeq	r0, r0, #3
    2904:	003717d6 	ldrsbteq	r1, [r7], -r6
    2908:	26060000 	strcs	r0, [r6], -r0
    290c:	01000000 	mrseq	r0, (UNDEF: 0)
    2910:	07580704 	ldrbeq	r0, [r8, -r4, lsl #14]
    2914:	040b0000 	streq	r0, [fp], #-0
    2918:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
    291c:	05080100 	streq	r0, [r8, #-256]	@ 0xffffff00
    2920:	00000146 	andeq	r0, r0, r6, asr #2
    2924:	0d040801 	stceq	8, cr0, [r4, #-4]
    2928:	01000002 	tsteq	r0, r2
    292c:	07670601 	strbeq	r0, [r7, -r1, lsl #12]!
    2930:	01010000 	mrseq	r0, (UNDEF: 1)
    2934:	00076508 	andeq	r6, r7, r8, lsl #10
    2938:	05020100 	streq	r0, [r2, #-256]	@ 0xffffff00
    293c:	000007a6 	andeq	r0, r0, r6, lsr #15
    2940:	81070201 	tsthi	r7, r1, lsl #4
    2944:	06000000 	streq	r0, [r0], -r0
    2948:	00000068 	andeq	r0, r0, r8, rrx
    294c:	4b050401 	blmi	143958 <__bss_end+0x11dd20>
    2950:	01000001 	tsteq	r0, r1
    2954:	07530704 	ldrbeq	r0, [r3, -r4, lsl #14]
    2958:	08010000 	stmdaeq	r1, {}	@ <UNPREDICTABLE>
    295c:	00074e07 	andeq	r4, r7, r7, lsl #28
    2960:	03040c00 	movweq	r0, #19456	@ 0x4c00
    2964:	0000005a 	andeq	r0, r0, sl, asr r0
    2968:	6e080101 	adfvse	f0, f0, f1
    296c:	0d000007 	stceq	0, cr0, [r0, #-28]	@ 0xffffffe4
    2970:	000014f3 	strdeq	r1, [r0], -r3
    2974:	5c011000 	stcpl	0, cr1, [r1], {-0}
    2978:	0000bc0e 	andeq	fp, r0, lr, lsl #24
    297c:	15050700 	strne	r0, [r5, #-1792]	@ 0xfffff900
    2980:	175f0000 	ldrbne	r0, [pc, -r0]
    2984:	000000c3 	andeq	r0, r0, r3, asr #1
    2988:	0014fe07 	andseq	pc, r4, r7, lsl #28
    298c:	c8106300 	ldmdagt	r0, {r8, r9, sp, lr}
    2990:	00000000 	andeq	r0, r0, r0
    2994:	12040801 	andne	r0, r4, #65536	@ 0x10000
    2998:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
    299c:	000000bc 	strheq	r0, [r0], -ip
    29a0:	00005a0f 	andeq	r5, r0, pc, lsl #20
    29a4:	0000d900 	andeq	sp, r0, r0, lsl #18
    29a8:	00371000 	eorseq	r1, r7, r0
    29ac:	0fff0000 	svceq	0x00ff0000
    29b0:	15170200 	ldrne	r0, [r7, #-512]	@ 0xfffffe00
    29b4:	03640000 	cmneq	r4, #0
    29b8:	00000097 	muleq	r0, r7, r0
    29bc:	4c280305 	stcmi	3, cr0, [r8], #-20	@ 0xffffffec
    29c0:	ba110002 	blt	4429d0 <__bss_end+0x41cd98>
    29c4:	08000014 	stmdaeq	r0, {r2, r4}
    29c8:	10106801 	andsne	r6, r0, r1, lsl #16
    29cc:	08000001 	stmdaeq	r0, {r0}
    29d0:	00001614 	andeq	r1, r0, r4, lsl r6
    29d4:	0110176a 	tsteq	r0, sl, ror #14
    29d8:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    29dc:	0000150c 	andeq	r1, r0, ip, lsl #10
    29e0:	0026096b 	eoreq	r0, r6, fp, ror #18
    29e4:	00040000 	andeq	r0, r4, r0
    29e8:	0000ea03 	andeq	lr, r0, r3, lsl #20
    29ec:	15d00500 	ldrbne	r0, [r0, #1280]	@ 0x500
    29f0:	6c010000 	stcvs	0, cr0, [r1], {-0}
    29f4:	0000ea03 	andeq	lr, r0, r3, lsl #20
    29f8:	15b90200 	ldrne	r0, [r9, #512]!	@ 0x200
    29fc:	1d820000 	stcne	0, cr0, [r2]
    2a00:	0000006f 	andeq	r0, r0, pc, rrx
    2a04:	48100305 	ldmdami	r0, {r0, r2, r8, r9}
    2a08:	8b020002 	blhi	82a18 <__bss_end+0x5cde0>
    2a0c:	85000015 	strhi	r0, [r0, #-21]	@ 0xffffffeb
    2a10:	00003215 	andeq	r3, r0, r5, lsl r2
    2a14:	14030500 	strne	r0, [r3], #-1280	@ 0xfffffb00
    2a18:	02000248 	andeq	r0, r0, #72, 4	@ 0x80000004
    2a1c:	000015c9 	andeq	r1, r0, r9, asr #11
    2a20:	01151388 	tsteq	r5, r8, lsl #7
    2a24:	03050000 	movweq	r0, #20480	@ 0x5000
    2a28:	00025c28 	andeq	r5, r2, r8, lsr #24
    2a2c:	00151d02 	andseq	r1, r5, r2, lsl #26
    2a30:	651c8800 	ldrvs	r8, [ip, #-2048]	@ 0xfffff800
    2a34:	05000001 	streq	r0, [r0, #-1]
    2a38:	025c3003 	subseq	r3, ip, #3
    2a3c:	01150300 	tsteq	r5, r0, lsl #6
    2a40:	f1020000 	cps	#0
    2a44:	8c000015 	stchi	0, cr0, [r0], {21}
    2a48:	0000260f 	andeq	r2, r0, pc, lsl #12
    2a4c:	50030500 	andpl	r0, r3, r0, lsl #10
    2a50:	12000248 	andne	r0, r0, #72, 4	@ 0x80000004
    2a54:	000015db 	ldrdeq	r1, [r0], -fp
    2a58:	26089101 	strcs	r9, [r8], -r1, lsl #2
    2a5c:	05000000 	streq	r0, [r0, #-0]
    2a60:	025c3403 	subseq	r3, ip, #50331648	@ 0x3000000
    2a64:	0a1f1300 	beq	7c766c <__bss_end+0x7a1a34>
    2a68:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    2a6c:	00741603 	rsbseq	r1, r4, r3, lsl #12
    2a70:	3b140000 	blcc	502a78 <__bss_end+0x4dce40>
    2a74:	0300000b 	movweq	r0, #11
    2a78:	0906038a 	stmdbeq	r6, {r1, r3, r7, r8, r9}
    2a7c:	0000148a 	andeq	r1, r0, sl, lsl #9
    2a80:	41a00134 	lsrmi	r0, r4, r1
    2a84:	01540002 	cmpeq	r4, r2
    2a88:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a8c:	000001e8 	andeq	r0, r0, r8, ror #3
    2a90:	00162f15 	andseq	r2, r6, r5, lsl pc
    2a94:	01340100 	teqeq	r4, r0, lsl #2
    2a98:	00016535 	andeq	r6, r1, r5, lsr r5
    2a9c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2aa0:	00079b04 	andeq	r9, r7, r4, lsl #22
    2aa4:	0d013600 	stceq	6, cr3, [r1, #-0]
    2aa8:	00000165 	andeq	r0, r0, r5, ror #2
    2aac:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    2ab0:	00637570 	rsbeq	r7, r3, r0, ror r5
    2ab4:	10013701 	andne	r3, r1, r1, lsl #14
    2ab8:	0000008b 	andeq	r0, r0, fp, lsl #1
    2abc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2ac0:	0014c709 	andseq	ip, r4, r9, lsl #14
    2ac4:	c8011300 	stmdagt	r1, {r8, r9, ip}
    2ac8:	d8000240 	stmdale	r0, {r6, r9}
    2acc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ad0:	00021c9c 	muleq	r2, ip, ip
    2ad4:	14e20400 	strbtne	r0, [r2], #1024	@ 0x400
    2ad8:	01150000 	tsteq	r5, r0
    2adc:	0001650d 	andeq	r6, r1, sp, lsl #10
    2ae0:	70910200 	addsvc	r0, r1, r0, lsl #4
    2ae4:	00162404 	andseq	r2, r6, r4, lsl #8
    2ae8:	10011600 	andne	r1, r1, r0, lsl #12
    2aec:	0000008b 	andeq	r0, r0, fp, lsl #1
    2af0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2af4:	0015a317 	andseq	sl, r5, r7, lsl r3
    2af8:	010d0100 	mrseq	r0, (UNDEF: 29)
    2afc:	0240b006 	subeq	fp, r0, #6
    2b00:	00001800 	andeq	r1, r0, r0, lsl #16
    2b04:	189c0100 	ldmne	ip, {r8}
    2b08:	000014a5 	andeq	r1, r0, r5, lsr #9
    2b0c:	08010701 	stmdaeq	r1, {r0, r8, r9, sl}
    2b10:	00000026 	andeq	r0, r0, r6, lsr #32
    2b14:	0002408c 	andeq	r4, r2, ip, lsl #1
    2b18:	00000024 	andeq	r0, r0, r4, lsr #32
    2b1c:	72199c01 	andsvc	r9, r9, #256	@ 0x100
    2b20:	01000009 	tsteq	r0, r9
    2b24:	401006ee 	andsmi	r0, r0, lr, ror #13
    2b28:	007c0002 	rsbseq	r0, ip, r2
    2b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b30:	00000288 	andeq	r0, r0, r8, lsl #5
    2b34:	0076701a 	rsbseq	r7, r6, sl, lsl r0
    2b38:	8917ee01 	ldmdbhi	r7, {r0, r9, sl, fp, sp, lr, pc}
    2b3c:	02000000 	andeq	r0, r0, #0
    2b40:	701b6c91 	mulsvc	fp, r1, ip
    2b44:	01006375 	tsteq	r0, r5, ror r3
    2b48:	008b10f0 	strdeq	r1, [fp], r0
    2b4c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b50:	14db0274 	ldrbne	r0, [fp], #628	@ 0x274
    2b54:	0df10000 	ldcleq	0, cr0, [r1]
    2b58:	00000165 	andeq	r0, r0, r5, ror #2
    2b5c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2b60:	0006e11c 	andeq	lr, r6, ip, lsl r1
    2b64:	07920100 	ldreq	r0, [r2, r0, lsl #2]
    2b68:	00000089 	andeq	r0, r0, r9, lsl #1
    2b6c:	00023e48 	andeq	r3, r2, r8, asr #28
    2b70:	000001c8 	andeq	r0, r0, r8, asr #3
    2b74:	e51d9c01 	ldr	r9, [sp, #-3073]	@ 0xfffff3ff
    2b78:	01000015 	tsteq	r0, r5, lsl r0
    2b7c:	00261c92 	mlaeq	r6, r2, ip, r1
    2b80:	91020000 	mrsls	r0, (UNDEF: 2)
    2b84:	14d30264 	ldrbne	r0, [r3], #612	@ 0x264
    2b88:	0d940000 	ldceq	0, cr0, [r4]
    2b8c:	00000165 	andeq	r0, r0, r5, ror #2
    2b90:	02749102 	rsbseq	r9, r4, #-2147483648	@ 0x80000000
    2b94:	00001523 	andeq	r1, r0, r3, lsr #10
    2b98:	01651794 			@ <UNDEFINED> instruction: 0x01651794
    2b9c:	91020000 	mrsls	r0, (UNDEF: 2)
    2ba0:	16050270 			@ <UNDEFINED> instruction: 0x16050270
    2ba4:	29940000 	ldmibcs	r4, {}	@ <UNPREDICTABLE>
    2ba8:	00000165 	andeq	r0, r0, r5, ror #2
    2bac:	02689102 	rsbeq	r9, r8, #-2147483648	@ 0x80000000
    2bb0:	0000159a 	muleq	r0, sl, r5
    2bb4:	00890795 	umulleq	r0, r9, r5, r7
    2bb8:	91020000 	mrsls	r0, (UNDEF: 2)
    2bbc:	4d00006c 	stcmi	0, cr0, [r0, #-432]	@ 0xfffffe50
    2bc0:	05000002 	streq	r0, [r0, #-2]
    2bc4:	2a040100 	bcs	102fcc <__bss_end+0xdd394>
    2bc8:	0c00000e 	stceq	0, cr0, [r0], {14}
    2bcc:	00000094 	muleq	r0, r4, r0
    2bd0:	00163f1d 	andseq	r3, r6, sp, lsl pc
    2bd4:	0000f100 	andeq	pc, r0, r0, lsl #2
    2bd8:	02430c00 	subeq	r0, r3, #0, 24
    2bdc:	00021000 	andeq	r1, r2, r0
    2be0:	001c0b00 	andseq	r0, ip, r0, lsl #22
    2be4:	05040d00 	streq	r0, [r4, #-3328]	@ 0xfffff300
    2be8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2bec:	58070402 	stmdapl	r7, {r1, sl}
    2bf0:	02000007 	andeq	r0, r0, #7
    2bf4:	01460508 	cmpeq	r6, r8, lsl #10
    2bf8:	08020000 	stmdaeq	r2, {}	@ <UNPREDICTABLE>
    2bfc:	00020d04 	andeq	r0, r2, r4, lsl #26
    2c00:	00da0500 	sbcseq	r0, sl, r0, lsl #10
    2c04:	47020000 	strmi	r0, [r2, -r0]
    2c08:	00004e10 	andeq	r4, r0, r0, lsl lr
    2c0c:	00530300 	subseq	r0, r3, r0, lsl #6
    2c10:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
    2c14:	01000000 	mrseq	r0, (UNDEF: 0)
    2c18:	0000005e 	andeq	r0, r0, lr, asr r0
    2c1c:	05040f00 	streq	r0, [r4, #-3840]	@ 0xfffff100
    2c20:	00000015 	andeq	r0, r0, r5, lsl r0
    2c24:	6c1c6103 	ldfvss	f6, [ip], {3}
    2c28:	02000000 	andeq	r0, r0, #0
    2c2c:	07530704 	ldrbeq	r0, [r3, -r4, lsl #14]
    2c30:	04020000 	streq	r0, [r2], #-0
    2c34:	00014b05 	andeq	r4, r1, r5, lsl #22
    2c38:	0c890500 	cfstr32eq	mvfx0, [r9], {0}
    2c3c:	63040000 	movwvs	r0, #16384	@ 0x4000
    2c40:	00005e10 	andeq	r5, r0, r0, lsl lr
    2c44:	0e131000 	cdpeq	0, 1, cr1, cr3, cr0, {0}
    2c48:	040c0000 	streq	r0, [ip], #-0
    2c4c:	00b81071 	adcseq	r1, r8, r1, ror r0
    2c50:	0d060000 	stceq	0, cr0, [r6, #-0]
    2c54:	73000011 	movwvc	r0, #17
    2c58:	00005e08 	andeq	r5, r0, r8, lsl #28
    2c5c:	24060000 	strcs	r0, [r6], #-0
    2c60:	7400000f 	strvc	r0, [r0], #-15
    2c64:	00006c10 	andeq	r6, r0, r0, lsl ip
    2c68:	8e060400 	cfcpyshi	mvf0, mvf6
    2c6c:	7500000e 	strvc	r0, [r0, #-14]
    2c70:	00006c10 	andeq	r6, r0, r0, lsl ip
    2c74:	05000800 	streq	r0, [r0, #-2048]	@ 0xfffff800
    2c78:	00000fc5 	andeq	r0, r0, r5, asr #31
    2c7c:	86037604 	strhi	r7, [r3], -r4, lsl #12
    2c80:	04000000 	streq	r0, [r0], #-0
    2c84:	000000b8 	strheq	r0, [r0], -r8
    2c88:	0000da03 	andeq	sp, r0, r3, lsl #20
    2c8c:	00c90400 	sbceq	r0, r9, r0, lsl #8
    2c90:	01020000 	mrseq	r0, (UNDEF: 2)
    2c94:	00076706 	andeq	r6, r7, r6, lsl #14
    2c98:	00d30400 	sbcseq	r0, r3, r0, lsl #8
    2c9c:	02020000 	andeq	r0, r2, #0
    2ca0:	00008107 	andeq	r8, r0, r7, lsl #2
    2ca4:	006c0300 	rsbeq	r0, ip, r0, lsl #6
    2ca8:	01020000 	mrseq	r0, (UNDEF: 2)
    2cac:	00076508 	andeq	r6, r7, r8, lsl #10
    2cb0:	0d1b1100 	ldfeqs	f1, [fp, #-0]
    2cb4:	22040000 	andcs	r0, r4, #0
    2cb8:	24120603 	ldrcs	r0, [r2], #-1539	@ 0xfffff9fd
    2cbc:	0400000c 	streq	r0, [r0], #-12
    2cc0:	73160502 	tstvc	r6, #8388608	@ 0x800000
    2cc4:	35000000 	strcc	r0, [r0, #-0]
    2cc8:	01000001 	tsteq	r0, r1
    2ccc:	00000042 	andeq	r0, r0, r2, asr #32
    2cd0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    2cd4:	00df0100 	sbcseq	r0, pc, r0, lsl #2
    2cd8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    2cdc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ce0:	0000006c 	andeq	r0, r0, ip, rrx
    2ce4:	00013501 	andeq	r3, r1, r1, lsl #10
    2ce8:	00e60100 	rsceq	r0, r6, r0, lsl #2
    2cec:	3f010000 	svccc	0x00010000
    2cf0:	00000001 	andeq	r0, r0, r1
    2cf4:	00007a03 	andeq	r7, r0, r3, lsl #20
    2cf8:	00c40300 	sbceq	r0, r4, r0, lsl #6
    2cfc:	3a040000 	bcc	102d04 <__bss_end+0xdd0cc>
    2d00:	08000001 	stmdaeq	r0, {r0}
    2d04:	00001348 	andeq	r1, r0, r8, asr #6
    2d08:	00015960 	andeq	r5, r1, r0, ror #18
    2d0c:	002d0100 	eoreq	r0, sp, r0, lsl #2
    2d10:	2d010000 	stccs	0, cr0, [r1, #-0]
    2d14:	00000000 	andeq	r0, r0, r0
    2d18:	000c7e13 	andeq	r7, ip, r3, lsl lr
    2d1c:	01f00400 	mvnseq	r0, r0, lsl #8
    2d20:	00016c06 	andeq	r6, r1, r6, lsl #24
    2d24:	00600100 	rsbeq	r0, r0, r0, lsl #2
    2d28:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    2d2c:	0000144e 	andeq	r1, r0, lr, asr #8
    2d30:	00018165 	andeq	r8, r1, r5, ror #2
    2d34:	002d0100 	eoreq	r0, sp, r0, lsl #2
    2d38:	2d010000 	stccs	0, cr0, [r1, #-0]
    2d3c:	00000000 	andeq	r0, r0, r0
    2d40:	00168814 	andseq	r8, r6, r4, lsl r8
    2d44:	067e0100 	ldrbteq	r0, [lr], -r0, lsl #2
    2d48:	00024470 	andeq	r4, r2, r0, ror r4
    2d4c:	000000ac 	andeq	r0, r0, ip, lsr #1
    2d50:	82079c01 	andhi	r9, r7, #256	@ 0x100
    2d54:	6a000016 	bvs	2db4 <_start-0xd24c>
    2d58:	00024414 	andeq	r4, r2, r4, lsl r4
    2d5c:	0000005c 	andeq	r0, r0, ip, asr r0
    2d60:	01c09c01 	biceq	r9, r0, r1, lsl #24
    2d64:	4c090000 	stcmi	0, cr0, [r9], {-0}
    2d68:	6a000000 	bvs	2d70 <_start-0xd290>
    2d6c:	0000005e 	andeq	r0, r0, lr, asr r0
    2d70:	0a6c9102 	beq	1b27180 <__bss_end+0x1b01548>
    2d74:	266c0069 	strbtcs	r0, [ip], -r9, rrx
    2d78:	02000000 	andeq	r0, r0, #0
    2d7c:	07007491 			@ <UNDEFINED> instruction: 0x07007491
    2d80:	0000168d 	andeq	r1, r0, sp, lsl #13
    2d84:	0243c05e 	subeq	ip, r3, #94	@ 0x5e
    2d88:	00005400 	andeq	r5, r0, r0, lsl #8
    2d8c:	ed9c0100 	ldfs	f0, [ip]
    2d90:	09000001 	stmdbeq	r0, {r0}
    2d94:	0000004c 	andeq	r0, r0, ip, asr #32
    2d98:	00005e5e 	andeq	r5, r0, lr, asr lr
    2d9c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2da0:	6000690a 	andvs	r6, r0, sl, lsl #18
    2da4:	00000026 	andeq	r0, r0, r6, lsr #32
    2da8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2dac:	00167815 	andseq	r7, r6, r5, lsl r8
    2db0:	06590100 	ldrbeq	r0, [r9], -r0, lsl #2
    2db4:	000243a8 	andeq	r4, r2, r8, lsr #7
    2db8:	00000018 	andeq	r0, r0, r8, lsl r0
    2dbc:	9d079c01 	stcls	12, cr9, [r7, #-4]
    2dc0:	53000016 	movwpl	r0, #22
    2dc4:	0002435c 	andeq	r4, r2, ip, asr r3
    2dc8:	0000004c 	andeq	r0, r0, ip, asr #32
    2dcc:	02209c01 	eoreq	r9, r0, #256	@ 0x100
    2dd0:	730b0000 	movwvc	r0, #45056	@ 0xb000
    2dd4:	201c5300 	andscs	r5, ip, r0, lsl #6
    2dd8:	02000002 	andeq	r0, r0, #2
    2ddc:	03007491 	movweq	r7, #1169	@ 0x491
    2de0:	0000022c 	andeq	r0, r0, ip, lsr #4
    2de4:	6e080102 	adfvse	f0, f0, f2
    2de8:	04000007 	streq	r0, [r0], #-7
    2dec:	00000225 	andeq	r0, r0, r5, lsr #4
    2df0:	00169316 	andseq	r9, r6, r6, lsl r3
    2df4:	064e0100 	strbeq	r0, [lr], -r0, lsl #2
    2df8:	0002430c 	andeq	r4, r2, ip, lsl #6
    2dfc:	00000050 	andeq	r0, r0, r0, asr r0
    2e00:	630b9c01 	movwvs	r9, #48129	@ 0xbc01
    2e04:	25154e00 	ldrcs	r4, [r5, #-3584]	@ 0xfffff200
    2e08:	02000002 	andeq	r0, r0, #2
    2e0c:	00007791 	muleq	r0, r1, r7
    2e10:	00000146 	andeq	r0, r0, r6, asr #2
    2e14:	04010005 	streq	r0, [r1], #-5
    2e18:	00000fa2 	andeq	r0, r0, r2, lsr #31
    2e1c:	00173b08 	andseq	r3, r7, r8, lsl #22
    2e20:	16c31d00 	strbne	r1, [r3], r0, lsl #26
    2e24:	16f50000 	ldrbtne	r0, [r5], r0
    2e28:	451c0000 	ldrmi	r0, [ip, #-0]
    2e2c:	00d00002 	sbcseq	r0, r0, r2
    2e30:	1dfe0000 	ldclne	0, cr0, [lr]
    2e34:	08010000 	stmdaeq	r1, {}	@ <UNPREDICTABLE>
    2e38:	00074e07 	andeq	r4, r7, r7, lsl #28
    2e3c:	07040100 	streq	r0, [r4, -r0, lsl #2]
    2e40:	00000758 	andeq	r0, r0, r8, asr r7
    2e44:	69050409 	stmdbvs	r5, {r0, r3, sl}
    2e48:	0a00746e 	beq	20008 <pxPortInitialiseStack+0x8>
    2e4c:	000003d8 	ldrdeq	r0, [r0], -r8
    2e50:	2d17d602 	ldccs	6, cr13, [r7, #-8]
    2e54:	01000000 	mrseq	r0, (UNDEF: 0)
    2e58:	01460508 	cmpeq	r6, r8, lsl #10
    2e5c:	08010000 	stmdaeq	r1, {}	@ <UNPREDICTABLE>
    2e60:	00020d04 	andeq	r0, r2, r4, lsl #26
    2e64:	06010100 	streq	r0, [r1], -r0, lsl #2
    2e68:	00000767 	andeq	r0, r0, r7, ror #14
    2e6c:	65080101 	strvs	r0, [r8, #-257]	@ 0xfffffeff
    2e70:	01000007 	tsteq	r0, r7
    2e74:	07a60502 	streq	r0, [r6, r2, lsl #10]!
    2e78:	02010000 	andeq	r0, r1, #0
    2e7c:	00008107 	andeq	r8, r0, r7, lsl #2
    2e80:	05040100 	streq	r0, [r4, #-256]	@ 0xffffff00
    2e84:	0000014b 	andeq	r0, r0, fp, asr #2
    2e88:	00007103 	andeq	r7, r0, r3, lsl #2
    2e8c:	07040100 	streq	r0, [r4, -r0, lsl #2]
    2e90:	00000753 	andeq	r0, r0, r3, asr r7
    2e94:	00008e02 	andeq	r8, r0, r2, lsl #28
    2e98:	00840400 	addeq	r0, r4, r0, lsl #8
    2e9c:	01010000 	mrseq	r0, (UNDEF: 1)
    2ea0:	00076e08 	andeq	r6, r7, r8, lsl #28
    2ea4:	008e0300 	addeq	r0, lr, r0, lsl #6
    2ea8:	95020000 	strls	r0, [r2, #-0]
    2eac:	04000000 	streq	r0, [r0], #-0
    2eb0:	0000009a 	muleq	r0, sl, r0
    2eb4:	000c120b 	andeq	r1, ip, fp, lsl #4
    2eb8:	082c0300 	stmdaeq	ip!, {r8, r9}
    2ebc:	00000084 	andeq	r0, r0, r4, lsl #1
    2ec0:	0002451c 	andeq	r4, r2, ip, lsl r5
    2ec4:	000000d0 	ldrdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
    2ec8:	013f9c01 	teqeq	pc, r1, lsl #24
    2ecc:	ac0c0000 	stcge	0, cr0, [ip], {-0}
    2ed0:	01000016 	tsteq	r0, r6, lsl r0
    2ed4:	00891b3e 	addeq	r1, r9, lr, lsr fp
    2ed8:	50010000 	andpl	r0, r1, r0
    2edc:	0016a705 	andseq	sl, r6, r5, lsl #14
    2ee0:	9f193f00 	svcls	0x00193f00
    2ee4:	14000000 	strne	r0, [r0], #-0
    2ee8:	0c000000 	stceq	0, cr0, [r0], {-0}
    2eec:	05000000 	streq	r0, [r0, #-0]
    2ef0:	000016bd 			@ <UNDEFINED> instruction: 0x000016bd
    2ef4:	003b0940 	eorseq	r0, fp, r0, asr #18
    2ef8:	004e0000 	subeq	r0, lr, r0
    2efc:	00400000 	subeq	r0, r0, r0
    2f00:	64060000 	strvs	r0, [r6], #-0
    2f04:	53007473 	movwpl	r7, #1139	@ 0x473
    2f08:	00008409 	andeq	r8, r0, r9, lsl #8
    2f0c:	00008b00 	andeq	r8, r0, r0, lsl #22
    2f10:	00007b00 	andeq	r7, r0, r0, lsl #22
    2f14:	72730600 	rsbsvc	r0, r3, #0, 12
    2f18:	0f540063 	svceq	0x00540063
    2f1c:	0000009a 	muleq	r0, sl, r0
    2f20:	000000c3 	andeq	r0, r0, r3, asr #1
    2f24:	000000b9 	strheq	r0, [r0], -r9
    2f28:	0016b107 	andseq	fp, r6, r7, lsl #2
    2f2c:	3f095500 	svccc	0x00095500
    2f30:	eb000001 	bl	2f3c <_start-0xd0c4>
    2f34:	e5000000 	str	r0, [r0, #-0]
    2f38:	07000000 	streq	r0, [r0, -r0]
    2f3c:	000016e9 	andeq	r1, r0, r9, ror #13
    2f40:	01440f56 	cmpeq	r4, r6, asr pc
    2f44:	01090000 	mrseq	r0, (UNDEF: 9)
    2f48:	01030000 	mrseq	r0, (UNDEF: 3)
    2f4c:	02000000 	andeq	r0, r0, #0
    2f50:	00000071 	andeq	r0, r0, r1, ror r0
    2f54:	00007802 	andeq	r7, r0, r2, lsl #16
    2f58:	01310000 	teqeq	r1, r0
    2f5c:	00050000 	andeq	r0, r5, r0
    2f60:	10600401 	rsbne	r0, r0, r1, lsl #8
    2f64:	3b060000 	blcc	182f6c <__bss_end+0x15d334>
    2f68:	1d000017 	stcne	0, cr0, [r0, #-92]	@ 0xffffffa4
    2f6c:	000017a8 	andeq	r1, r0, r8, lsr #15
    2f70:	000016f5 	strdeq	r1, [r0], -r5
    2f74:	000245ec 	andeq	r4, r2, ip, ror #11
    2f78:	000000fc 	strdeq	r0, [r0], -ip
    2f7c:	00001f8e 	andeq	r1, r0, lr, lsl #31
    2f80:	4e070801 	cdpmi	8, 0, cr0, cr7, cr1, {0}
    2f84:	01000007 	tsteq	r0, r7
    2f88:	07580704 	ldrbeq	r0, [r8, -r4, lsl #14]
    2f8c:	04070000 	streq	r0, [r7], #-0
    2f90:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
    2f94:	03d80800 	bicseq	r0, r8, #0, 16
    2f98:	d6020000 	strle	r0, [r2], -r0
    2f9c:	00002d17 	andeq	r2, r0, r7, lsl sp
    2fa0:	05080100 	streq	r0, [r8, #-256]	@ 0xffffff00
    2fa4:	00000146 	andeq	r0, r0, r6, asr #2
    2fa8:	0d040801 	stceq	8, cr0, [r4, #-4]
    2fac:	01000002 	tsteq	r0, r2
    2fb0:	07670601 	strbeq	r0, [r7, -r1, lsl #12]!
    2fb4:	01010000 	mrseq	r0, (UNDEF: 1)
    2fb8:	00076508 	andeq	r6, r7, r8, lsl #10
    2fbc:	05020100 	streq	r0, [r2, #-256]	@ 0xffffff00
    2fc0:	000007a6 	andeq	r0, r0, r6, lsr #15
    2fc4:	81070201 	tsthi	r7, r1, lsl #4
    2fc8:	01000000 	mrseq	r0, (UNDEF: 0)
    2fcc:	014b0504 	cmpeq	fp, r4, lsl #10
    2fd0:	04010000 	streq	r0, [r1], #-0
    2fd4:	00075307 	andeq	r5, r7, r7, lsl #6
    2fd8:	03040900 	movweq	r0, #18688	@ 0x4900
    2fdc:	00000086 	andeq	r0, r0, r6, lsl #1
    2fe0:	6e080101 	adfvse	f0, f0, f1
    2fe4:	0a000007 	beq	3008 <_start-0xcff8>
    2fe8:	0000107a 	andeq	r1, r0, sl, ror r0
    2fec:	7f092103 	svcvc	0x00092103
    2ff0:	ec000000 	stc	0, cr0, [r0], {-0}
    2ff4:	fc000245 	stc2	2, cr0, [r0], {69}	@ 0x45
    2ff8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ffc:	00012f9c 	muleq	r1, ip, pc	@ <UNPREDICTABLE>
    3000:	006d0b00 	rsbeq	r0, sp, r0, lsl #22
    3004:	7f0f2601 	svcvc	0x000f2601
    3008:	01000000 	mrseq	r0, (UNDEF: 0)
    300c:	00630450 	rsbeq	r0, r3, r0, asr r4
    3010:	00340627 	eorseq	r0, r4, r7, lsr #12
    3014:	01310000 	teqeq	r1, r0
    3018:	012b0000 			@ <UNDEFINED> instruction: 0x012b0000
    301c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    3020:	3b092800 	blcc	24d028 <__bss_end+0x2273f0>
    3024:	5f000000 	svcpl	0x00000000
    3028:	4f000001 	svcmi	0x00000001
    302c:	02000001 	andeq	r0, r0, #1
    3030:	092a0073 	stmdbeq	sl!, {r0, r1, r4, r5, r6}
    3034:	00000081 	andeq	r0, r0, r1, lsl #1
    3038:	000001a6 	andeq	r0, r0, r6, lsr #3
    303c:	00000192 	muleq	r0, r2, r1
    3040:	2d006902 	vstrcs.16	s12, [r0, #-4]	@ <UNPREDICTABLE>
    3044:	00002d10 	andeq	r2, r0, r0, lsl sp
    3048:	0001f000 	andeq	pc, r1, r0
    304c:	0001ea00 	andeq	lr, r1, r0, lsl #20
    3050:	17cd0500 	strbne	r0, [sp, r0, lsl #10]
    3054:	112e0000 			@ <UNDEFINED> instruction: 0x112e0000
    3058:	00000078 	andeq	r0, r0, r8, ror r0
    305c:	00000213 	andeq	r0, r0, r3, lsl r2
    3060:	0000020b 	andeq	r0, r0, fp, lsl #4
    3064:	00179b05 	andseq	r9, r7, r5, lsl #22
    3068:	2f122f00 	svccs	0x00122f00
    306c:	4e000001 	cdpmi	0, 0, cr0, cr0, cr1, {0}
    3070:	36000002 	strcc	r0, [r0], -r2
    3074:	02000002 	andeq	r0, r0, #2
    3078:	10300064 	eorsne	r0, r0, r4, rrx
    307c:	0000002d 	andeq	r0, r0, sp, lsr #32
    3080:	000002ae 	andeq	r0, r0, lr, lsr #5
    3084:	000002a4 	andeq	r0, r0, r4, lsr #5
    3088:	00780300 	rsbseq	r0, r8, r0, lsl #6
    308c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    3090:	05000001 	streq	r0, [r0, #-1]
    3094:	17040100 	strne	r0, [r4, -r0, lsl #2]
    3098:	08000011 	stmdaeq	r0, {r0, r4}
    309c:	0000173b 	andeq	r1, r0, fp, lsr r7
    30a0:	0017d91d 	andseq	sp, r7, sp, lsl r9
    30a4:	0016f500 	andseq	pc, r6, r0, lsl #10
    30a8:	0246e800 	subeq	lr, r6, #0, 16
    30ac:	00011400 	andeq	r1, r1, r0, lsl #8
    30b0:	00214700 	eoreq	r4, r1, r0, lsl #14
    30b4:	07080100 	streq	r0, [r8, -r0, lsl #2]
    30b8:	0000074e 	andeq	r0, r0, lr, asr #14
    30bc:	58070401 	stmdapl	r7, {r0, sl}
    30c0:	09000007 	stmdbeq	r0, {r0, r1, r2}
    30c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    30c8:	d80a0074 	stmdale	sl, {r2, r4, r5, r6}
    30cc:	03000003 	movweq	r0, #3
    30d0:	002d17d6 	ldrdeq	r1, [sp], -r6	@ <UNPREDICTABLE>
    30d4:	08010000 	stmdaeq	r1, {}	@ <UNPREDICTABLE>
    30d8:	00014605 	andeq	r4, r1, r5, lsl #12
    30dc:	04080100 	streq	r0, [r8], #-256	@ 0xffffff00
    30e0:	0000020d 	andeq	r0, r0, sp, lsl #4
    30e4:	67060101 	strvs	r0, [r6, -r1, lsl #2]
    30e8:	01000007 	tsteq	r0, r7
    30ec:	07650801 	strbeq	r0, [r5, -r1, lsl #16]!
    30f0:	02010000 	andeq	r0, r1, #0
    30f4:	0007a605 	andeq	sl, r7, r5, lsl #12
    30f8:	07020100 	streq	r0, [r2, -r0, lsl #2]
    30fc:	00000081 	andeq	r0, r0, r1, lsl #1
    3100:	4b050401 	blmi	14410c <__bss_end+0x11e4d4>
    3104:	03000001 	movweq	r0, #1
    3108:	00000071 	andeq	r0, r0, r1, ror r0
    310c:	53070401 	movwpl	r0, #29697	@ 0x7401
    3110:	0b000007 	bleq	3134 <_start-0xcecc>
    3114:	00840404 	addeq	r0, r4, r4, lsl #8
    3118:	90020000 	andls	r0, r2, r0
    311c:	01000000 	mrseq	r0, (UNDEF: 0)
    3120:	076e0801 	strbeq	r0, [lr, -r1, lsl #16]!
    3124:	90030000 	andls	r0, r3, r0
    3128:	02000000 	andeq	r0, r0, #0
    312c:	00000097 	muleq	r0, r7, r0
    3130:	0000ab02 	andeq	sl, r0, r2, lsl #22
    3134:	00a10400 	adceq	r0, r1, r0, lsl #8
    3138:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    313c:	000008d5 	ldrdeq	r0, [r0], -r5
    3140:	84091f04 	strhi	r1, [r9], #-3844	@ 0xfffff0fc
    3144:	e8000000 	stmda	r0, {}	@ <UNPREDICTABLE>
    3148:	14000246 	strne	r0, [r0], #-582	@ 0xfffffdba
    314c:	01000001 	tsteq	r0, r1
    3150:	0001479c 	muleq	r1, ip, r7
    3154:	16ac0e00 	strtne	r0, [ip], r0, lsl #28
    3158:	31020000 	mrscc	r0, (UNDEF: 2)
    315c:	0000861a 	andeq	r8, r0, sl, lsl r6
    3160:	05500100 	ldrbeq	r0, [r0, #-256]	@ 0xffffff00
    3164:	000016a7 	andeq	r1, r0, r7, lsr #13
    3168:	00a61932 	adceq	r1, r6, r2, lsr r9
    316c:	02fc0000 	rscseq	r0, ip, #0
    3170:	02f40000 	rscseq	r0, r4, #0
    3174:	d4050000 	strle	r0, [r5], #-0
    3178:	33000017 	movwcc	r0, #23
    317c:	00003b09 	andeq	r3, r0, r9, lsl #22
    3180:	00033000 	andeq	r3, r3, r0
    3184:	00032600 	andeq	r2, r3, r0, lsl #12
    3188:	73640600 	cmnvc	r4, #0, 12
    318c:	09420074 	stmdbeq	r2, {r2, r4, r5, r6}^
    3190:	0000008b 	andeq	r0, r0, fp, lsl #1
    3194:	00000368 	andeq	r0, r0, r8, ror #6
    3198:	0000035e 	andeq	r0, r0, lr, asr r3
    319c:	63727306 	cmnvs	r2, #402653184	@ 0x18000000
    31a0:	9c0f4300 	stcls	3, cr4, [pc], {-0}
    31a4:	93000000 	movwls	r0, #0
    31a8:	85000003 	strhi	r0, [r0, #-3]
    31ac:	07000003 	streq	r0, [r0, -r3]
    31b0:	000016b1 			@ <UNDEFINED> instruction: 0x000016b1
    31b4:	01470944 	cmpeq	r7, r4, asr #18
    31b8:	03d50000 	bicseq	r0, r5, #0
    31bc:	03cd0000 	biceq	r0, sp, #0
    31c0:	e9070000 	stmdb	r7, {}	@ <UNPREDICTABLE>
    31c4:	45000016 	strmi	r0, [r0, #-22]	@ 0xffffffea
    31c8:	00014c0f 	andeq	r4, r1, pc, lsl #24
    31cc:	00040500 	andeq	r0, r4, r0, lsl #10
    31d0:	0003f300 	andeq	pc, r3, r0, lsl #6
    31d4:	71020000 	mrsvc	r0, (UNDEF: 2)
    31d8:	02000000 	andeq	r0, r0, #0
    31dc:	00000078 	andeq	r0, r0, r8, ror r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	03000d01 	movweq	r0, #3329	@ 0xd01
       4:	01213a08 			@ <UNDEFINED> instruction: 0x01213a08
       8:	21390b3b 	teqcs	r9, fp, lsr fp
       c:	38134910 	ldmdacc	r3, {r4, r8, fp, lr}
      10:	0200000b 	andeq	r0, r0, #11
      14:	0b0b0024 	bleq	2c00ac <__bss_end+0x29a474>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	05030000 	streq	r0, [r3, #-0]
      20:	00134900 	andseq	r4, r3, r0, lsl #18
      24:	00050400 	andeq	r0, r5, r0, lsl #8
      28:	213a0e03 	teqcs	sl, r3, lsl #28
      2c:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
      30:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
      34:	05000018 	streq	r0, [r0, #-24]	@ 0xffffffe8
      38:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      3c:	0b3b0b3a 	bleq	ec2d2c <__bss_end+0xe9d0f4>
      40:	13490b39 	movtne	r0, #39737	@ 0x9b39
      44:	0f060000 	svceq	0x00060000
      48:	04210b00 	strteq	r0, [r1], #-2816	@ 0xfffff500
      4c:	00001349 	andeq	r1, r0, r9, asr #6
      50:	03003407 	movweq	r3, #1031	@ 0x407
      54:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
      58:	0b390b3b 	bleq	e42d4c <__bss_end+0xe1d114>
      5c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
      60:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
      64:	03193f00 	tsteq	r9, #0, 30
      68:	3b0b3a0e 	blcc	2ce8a8 <__bss_end+0x2a8c70>
      6c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
      70:	00193c19 	andseq	r3, r9, r9, lsl ip
      74:	00260900 	eoreq	r0, r6, r0, lsl #18
      78:	00001349 	andeq	r1, r0, r9, asr #6
      7c:	2701150a 	strcs	r1, [r1, -sl, lsl #10]
      80:	00130119 	andseq	r0, r3, r9, lsl r1
      84:	012e0b00 			@ <UNDEFINED> instruction: 0x012e0b00
      88:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
      8c:	3b04213a 	blcc	10857c <__bss_end+0xe2944>
      90:	0621390b 	strteq	r3, [r1], -fp, lsl #18
      94:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
      98:	00001301 	andeq	r1, r0, r1, lsl #6
      9c:	3f002e0c 	svccc	0x00002e0c
      a0:	3a0e0319 	bcc	380d0c <__bss_end+0x35b0d4>
      a4:	053b0521 	ldreq	r0, [fp, #-1313]!	@ 0xfffffadf
      a8:	27062139 	smladxcs	r6, r9, r1, r2
      ac:	00193c19 	andseq	r3, r9, r9, lsl ip
      b0:	01110d00 	tsteq	r1, r0, lsl #26
      b4:	0b130e25 	bleq	4c3950 <__bss_end+0x49dd18>
      b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
      bc:	06120111 			@ <UNDEFINED> instruction: 0x06120111
      c0:	00001710 	andeq	r1, r0, r0, lsl r7
      c4:	0b00240e 	bleq	9104 <_start-0x6efc>
      c8:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
      cc:	0f000008 	svceq	0x00000008
      d0:	0b0b000f 	bleq	2c0114 <__bss_end+0x29a4dc>
      d4:	13100000 	tstne	r0, #0
      d8:	0b0e0301 	bleq	380ce4 <__bss_end+0x35b0ac>
      dc:	3b0b3a0b 	blcc	2ce910 <__bss_end+0x2a8cd8>
      e0:	010b390b 	tsteq	fp, fp, lsl #18
      e4:	11000013 	tstne	r0, r3, lsl r0
      e8:	13490035 	movtne	r0, #36917	@ 0x9035
      ec:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
      f0:	3a0e0301 	bcc	380cfc <__bss_end+0x35b0c4>
      f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      f8:	1119270b 	tstne	r9, fp, lsl #14
      fc:	40061201 	andmi	r1, r6, r1, lsl #4
     100:	01197c18 	tsteq	r9, r8, lsl ip
     104:	13000013 	movwne	r0, #19
     108:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     10c:	0b3a0e03 	bleq	e83920 <__bss_end+0xe5dce8>
     110:	0b390b3b 	bleq	e42e04 <__bss_end+0xe1d1cc>
     114:	01111927 	tsteq	r1, r7, lsr #18
     118:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     11c:	1301197c 	movwne	r1, #6524	@ 0x197c
     120:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     124:	03193f00 	tsteq	r9, #0, 30
     128:	3b0b3a0e 	blcc	2ce968 <__bss_end+0x2a8d30>
     12c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     130:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     134:	7a184006 	bvc	610154 <__bss_end+0x5ea51c>
     138:	15000019 	strne	r0, [r0, #-25]	@ 0xffffffe7
     13c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	@ <UNPREDICTABLE>
     140:	0b3a0e03 	bleq	e83954 <__bss_end+0xe5dd1c>
     144:	0b390b3b 	bleq	e42e38 <__bss_end+0xe1d200>
     148:	13491927 	movtne	r1, #39207	@ 0x9927
     14c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     150:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     154:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     158:	03193f01 	tsteq	r9, #1, 30
     15c:	3b0b3a0e 	blcc	2ce99c <__bss_end+0x2a8d64>
     160:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     164:	11134919 	tstne	r3, r9, lsl r9
     168:	40061201 	andmi	r1, r6, r1, lsl #4
     16c:	00197a18 	andseq	r7, r9, r8, lsl sl
     170:	34010000 	strcc	r0, [r1], #-0
     174:	3a0e0300 	bcc	380d7c <__bss_end+0x35b144>
     178:	0b3b0121 	bleq	ec0604 <__bss_end+0xe9a9cc>
     17c:	49022139 	stmdbmi	r2, {r0, r3, r4, r5, r8, sp}
     180:	3c193f13 	ldccc	15, cr3, [r9], {19}
     184:	02000019 	andeq	r0, r0, #25
     188:	0b0b0024 	bleq	2c0220 <__bss_end+0x29a5e8>
     18c:	0e030b3e 	vmoveq.16	d3[0], r0
     190:	0b030000 	bleq	c0198 <__bss_end+0x9a560>
     194:	12011101 	andne	r1, r1, #1073741824	@ 0x40000000
     198:	04000006 	streq	r0, [r0], #-6
     19c:	13490035 	movtne	r0, #36917	@ 0x9035
     1a0:	34050000 	strcc	r0, [r5], #-0
     1a4:	3a0e0300 	bcc	380dac <__bss_end+0x35b174>
     1a8:	0b3b0121 	bleq	ec0634 <__bss_end+0xe9a9fc>
     1ac:	13490b39 	movtne	r0, #39737	@ 0x9b39
     1b0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1b4:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     1b8:	03193f00 	tsteq	r9, #0, 30
     1bc:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     1c0:	21390b3b 	teqcs	r9, fp, lsr fp
     1c4:	11192706 	tstne	r9, r6, lsl #14
     1c8:	40061201 	andmi	r1, r6, r1, lsl #4
     1cc:	00197a18 	andseq	r7, r9, r8, lsl sl
     1d0:	010b0700 	tsteq	fp, r0, lsl #14
     1d4:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     1d8:	00001301 	andeq	r1, r0, r1, lsl #6
     1dc:	25011108 	strcs	r1, [r1, #-264]	@ 0xfffffef8
     1e0:	030b130e 	movweq	r1, #45838	@ 0xb30e
     1e4:	110e1b0e 	tstne	lr, lr, lsl #22
     1e8:	10061201 	andne	r1, r6, r1, lsl #4
     1ec:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
     1f0:	0b0b0024 	bleq	2c0288 <__bss_end+0x29a650>
     1f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     1f8:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     1fc:	03193f00 	tsteq	r9, #0, 30
     200:	3b0b3a0e 	blcc	2cea40 <__bss_end+0x2a8e08>
     204:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     208:	00193c19 	andseq	r3, r9, r9, lsl ip
     20c:	012e0b00 			@ <UNDEFINED> instruction: 0x012e0b00
     210:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     214:	0b3b0b3a 	bleq	ec2f04 <__bss_end+0xe9d2cc>
     218:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     21c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     220:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     224:	00001301 	andeq	r1, r0, r1, lsl #6
     228:	0b000f0c 	bleq	3e60 <_start-0xc1a0>
     22c:	0013490b 	andseq	r4, r3, fp, lsl #18
     230:	00350d00 	eorseq	r0, r5, r0, lsl #26
     234:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     238:	03193f01 	tsteq	r9, #1, 30
     23c:	3b0b3a0e 	blcc	2cea7c <__bss_end+0x2a8e44>
     240:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     244:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     248:	7a184006 	bvc	610268 <__bss_end+0x5ea630>
     24c:	00130119 	andseq	r0, r3, r9, lsl r1
     250:	012e0f00 			@ <UNDEFINED> instruction: 0x012e0f00
     254:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     258:	0b3b0b3a 	bleq	ec2f48 <__bss_end+0xe9d310>
     25c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     260:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     264:	197a1840 	ldmdbne	sl!, {r6, fp, ip}^
     268:	01000000 	mrseq	r0, (UNDEF: 0)
     26c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     270:	0b3b0b3a 	bleq	ec2f60 <__bss_end+0xe9d328>
     274:	13490b39 	movtne	r0, #39737	@ 0x9b39
     278:	00000b38 	andeq	r0, r0, r8, lsr fp
     27c:	03003402 	movweq	r3, #1026	@ 0x402
     280:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     284:	0b390b3b 	bleq	e42f78 <__bss_end+0xe1d340>
     288:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     28c:	05030000 	streq	r0, [r3, #-0]
     290:	00134900 	andseq	r4, r3, r0, lsl #18
     294:	00160400 	andseq	r0, r6, r0, lsl #8
     298:	0b3a0e03 	bleq	e83aac <__bss_end+0xe5de74>
     29c:	0b390b3b 	bleq	e42f90 <__bss_end+0xe1d358>
     2a0:	00001349 	andeq	r1, r0, r9, asr #6
     2a4:	0b002405 	bleq	92c0 <_start-0x6d40>
     2a8:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
     2ac:	0600000e 	streq	r0, [r0], -lr
     2b0:	210b000f 	tstcs	fp, pc
     2b4:	00134904 	andseq	r4, r3, r4, lsl #18
     2b8:	00340700 	eorseq	r0, r4, r0, lsl #14
     2bc:	213a0e03 	teqcs	sl, r3, lsl #28
     2c0:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
     2c4:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     2c8:	08000018 	stmdaeq	r0, {r3, r4}
     2cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     2d0:	213a0e03 	teqcs	sl, r3, lsl #28
     2d4:	39053b04 	stmdbcc	r5, {r2, r8, r9, fp, ip, sp}
     2d8:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
     2dc:	1301193c 	movwne	r1, #6460	@ 0x193c
     2e0:	05090000 	streq	r0, [r9, #-0]
     2e4:	3a0e0300 	bcc	380eec <__bss_end+0x35b2b4>
     2e8:	0b3b0121 	bleq	ec0774 <__bss_end+0xe9ab3c>
     2ec:	13490b39 	movtne	r0, #39737	@ 0x9b39
     2f0:	00001802 	andeq	r1, r0, r2, lsl #16
     2f4:	4900350a 	stmdbmi	r0, {r1, r3, r8, sl, ip, sp}
     2f8:	0b000013 	bleq	34c <_start-0xfcb4>
     2fc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     300:	0b3a0b0b 	bleq	e82f34 <__bss_end+0xe5d2fc>
     304:	0b390b3b 	bleq	e42ff8 <__bss_end+0xe1d3c0>
     308:	00001301 	andeq	r1, r0, r1, lsl #6
     30c:	11010b0c 	tstne	r1, ip, lsl #22
     310:	00061201 	andeq	r1, r6, r1, lsl #4
     314:	00260d00 	eoreq	r0, r6, r0, lsl #26
     318:	00001349 	andeq	r1, r0, r9, asr #6
     31c:	03012e0e 	movweq	r2, #7694	@ 0x1e0e
     320:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     324:	2139053b 	teqcs	r9, fp, lsr r5
     328:	1119270d 	tstne	r9, sp, lsl #14
     32c:	40061201 	andmi	r1, r6, r1, lsl #4
     330:	01197c18 	tsteq	r9, r8, lsl ip
     334:	0f000013 	svceq	0x00000013
     338:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     33c:	0e030b13 	vmoveq.32	d3[0], r0
     340:	01110e1b 	tsteq	r1, fp, lsl lr
     344:	17100612 			@ <UNDEFINED> instruction: 0x17100612
     348:	24100000 	ldrcs	r0, [r0], #-0
     34c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     350:	0008030b 	andeq	r0, r8, fp, lsl #6
     354:	000f1100 	andeq	r1, pc, r0, lsl #2
     358:	00000b0b 	andeq	r0, r0, fp, lsl #22
     35c:	27011512 	smladcs	r1, r2, r5, r1
     360:	00130119 	andseq	r0, r3, r9, lsl r1
     364:	01011300 	mrseq	r1, SP_irq
     368:	13011349 	movwne	r1, #4937	@ 0x1349
     36c:	21140000 	tstcs	r4, r0
     370:	2f134900 	svccs	0x00134900
     374:	1500000b 	strne	r0, [r0, #-11]
     378:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     37c:	0b3b0b3a 	bleq	ec306c <__bss_end+0xe9d434>
     380:	13490b39 	movtne	r0, #39737	@ 0x9b39
     384:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     388:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     38c:	03193f00 	tsteq	r9, #0, 30
     390:	3b0b3a0e 	blcc	2cebd0 <__bss_end+0x2a8f98>
     394:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     398:	3c134919 			@ <UNDEFINED> instruction: 0x3c134919
     39c:	17000019 	smladne	r0, r9, r0, r0
     3a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     3a4:	0b3a0e03 	bleq	e83bb8 <__bss_end+0xe5df80>
     3a8:	0b39053b 	bleq	e4189c <__bss_end+0xe1bc64>
     3ac:	13491927 	movtne	r1, #39207	@ 0x9927
     3b0:	1301193c 	movwne	r1, #6460	@ 0x193c
     3b4:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     3b8:	03193f01 	tsteq	r9, #1, 30
     3bc:	3b0b3a0e 	blcc	2cebfc <__bss_end+0x2a8fc4>
     3c0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     3c4:	11134919 	tstne	r3, r9, lsl r9
     3c8:	40061201 	andmi	r1, r6, r1, lsl #4
     3cc:	01197c18 	tsteq	r9, r8, lsl ip
     3d0:	19000013 	stmdbne	r0, {r0, r1, r4}
     3d4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     3d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     3dc:	13490b39 	movtne	r0, #39737	@ 0x9b39
     3e0:	00001802 	andeq	r1, r0, r2, lsl #16
     3e4:	3f012e1a 	svccc	0x00012e1a
     3e8:	3a0e0319 	bcc	381054 <__bss_end+0x35b41c>
     3ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3f0:	1119270b 	tstne	r9, fp, lsl #14
     3f4:	40061201 	andmi	r1, r6, r1, lsl #4
     3f8:	01197c18 	tsteq	r9, r8, lsl ip
     3fc:	1b000013 	blne	450 <_start-0xfbb0>
     400:	0e03012e 	adfeqsp	f0, f3, #0.5
     404:	0b3b0b3a 	bleq	ec30f4 <__bss_end+0xe9d4bc>
     408:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     40c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     410:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     414:	00001301 	andeq	r1, r0, r1, lsl #6
     418:	3f012e1c 	svccc	0x00012e1c
     41c:	3a0e0319 	bcc	381088 <__bss_end+0x35b450>
     420:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     424:	1119270b 	tstne	r9, fp, lsl #14
     428:	40061201 	andmi	r1, r6, r1, lsl #4
     42c:	01197c18 	tsteq	r9, r8, lsl ip
     430:	1d000013 	stcne	0, cr0, [r0, #-76]	@ 0xffffffb4
     434:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     438:	0b3a0e03 	bleq	e83c4c <__bss_end+0xe5e014>
     43c:	0b390b3b 	bleq	e43130 <__bss_end+0xe1d4f8>
     440:	13491927 	movtne	r1, #39207	@ 0x9927
     444:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     448:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     44c:	01000000 	mrseq	r0, (UNDEF: 0)
     450:	0b0b0024 	bleq	2c04e8 <__bss_end+0x29a8b0>
     454:	0e030b3e 	vmoveq.16	d3[0], r0
     458:	0d020000 	stceq	0, cr0, [r2, #-0]
     45c:	3a0e0300 	bcc	381064 <__bss_end+0x35b42c>
     460:	0b3b0221 	bleq	ec0cec <__bss_end+0xe9b0b4>
     464:	13490b39 	movtne	r0, #39737	@ 0x9b39
     468:	00000b38 	andeq	r0, r0, r8, lsr fp
     46c:	03000503 	movweq	r0, #1283	@ 0x503
     470:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     474:	0b390b3b 	bleq	e43168 <__bss_end+0xe1d530>
     478:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     47c:	35040000 	strcc	r0, [r4, #-0]
     480:	00134900 	andseq	r4, r3, r0, lsl #18
     484:	00160500 	andseq	r0, r6, r0, lsl #10
     488:	0b3a0e03 	bleq	e83c9c <__bss_end+0xe5e064>
     48c:	0b390b3b 	bleq	e43180 <__bss_end+0xe1d548>
     490:	00001349 	andeq	r1, r0, r9, asr #6
     494:	0b000f06 	bleq	40b4 <_start-0xbf4c>
     498:	13490421 	movtne	r0, #37921	@ 0x9421
     49c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     4a0:	03193f01 	tsteq	r9, #1, 30
     4a4:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     4a8:	21390b3b 	teqcs	r9, fp, lsr fp
     4ac:	11192706 	tstne	r9, r6, lsl #14
     4b0:	40061201 	andmi	r1, r6, r1, lsl #4
     4b4:	01197a18 	tsteq	r9, r8, lsl sl
     4b8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     4bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4c0:	3b01213a 	blcc	489b0 <__bss_end+0x22d78>
     4c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     4c8:	00180213 	andseq	r0, r8, r3, lsl r2
     4cc:	01130900 	tsteq	r3, r0, lsl #18
     4d0:	0b0b0e03 	bleq	2c3ce4 <__bss_end+0x29e0ac>
     4d4:	3b02213a 	blcc	889c4 <__bss_end+0x62d8c>
     4d8:	010b390b 	tsteq	fp, fp, lsl #18
     4dc:	0a000013 	beq	530 <_start-0xfad0>
     4e0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     4e4:	0e030b13 	vmoveq.32	d3[0], r0
     4e8:	01110e1b 	tsteq	r1, fp, lsl lr
     4ec:	17100612 			@ <UNDEFINED> instruction: 0x17100612
     4f0:	240b0000 	strcs	r0, [fp], #-0
     4f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     4f8:	0008030b 	andeq	r0, r8, fp, lsl #6
     4fc:	000f0c00 	andeq	r0, pc, r0, lsl #24
     500:	00000b0b 	andeq	r0, r0, fp, lsl #22
     504:	3f012e0d 	svccc	0x00012e0d
     508:	3a0e0319 	bcc	381174 <__bss_end+0x35b53c>
     50c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     510:	1119270b 	tstne	r9, fp, lsl #14
     514:	40061201 	andmi	r1, r6, r1, lsl #4
     518:	00197a18 	andseq	r7, r9, r8, lsl sl
     51c:	05010000 	streq	r0, [r1, #-0]
     520:	3a0e0300 	bcc	381128 <__bss_end+0x35b4f0>
     524:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     528:	13490b39 	movtne	r0, #39737	@ 0x9b39
     52c:	00001802 	andeq	r1, r0, r2, lsl #16
     530:	03000d02 	movweq	r0, #3330	@ 0xd02
     534:	3b0b3a0e 	blcc	2ced74 <__bss_end+0x2a913c>
     538:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     53c:	000b3813 	andeq	r3, fp, r3, lsl r8
     540:	00340300 	eorseq	r0, r4, r0, lsl #6
     544:	213a0e03 	teqcs	sl, r3, lsl #28
     548:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
     54c:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     550:	04000018 	streq	r0, [r0], #-24	@ 0xffffffe8
     554:	13490005 	movtne	r0, #36869	@ 0x9005
     558:	24050000 	strcs	r0, [r5], #-0
     55c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     560:	000e030b 	andeq	r0, lr, fp, lsl #6
     564:	000f0600 	andeq	r0, pc, r0, lsl #12
     568:	4904210b 	stmdbmi	r4, {r0, r1, r3, r8, sp}
     56c:	07000013 	smladeq	r0, r3, r0, r0
     570:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     574:	0b3b0b3a 	bleq	ec3264 <__bss_end+0xe9d62c>
     578:	13490b39 	movtne	r0, #39737	@ 0x9b39
     57c:	26080000 	strcs	r0, [r8], -r0
     580:	00134900 	andseq	r4, r3, r0, lsl #18
     584:	012e0900 			@ <UNDEFINED> instruction: 0x012e0900
     588:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     58c:	3b01213a 	blcc	48a7c <__bss_end+0x22e44>
     590:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     594:	11134919 	tstne	r3, r9, lsl r9
     598:	40061201 	andmi	r1, r6, r1, lsl #4
     59c:	01197c18 	tsteq	r9, r8, lsl ip
     5a0:	0a000013 	beq	5f4 <_start-0xfa0c>
     5a4:	13490035 	movtne	r0, #36917	@ 0x9035
     5a8:	130b0000 	movwne	r0, #45056	@ 0xb000
     5ac:	0b0e0301 	bleq	3811b8 <__bss_end+0x35b580>
     5b0:	3b0b3a0b 	blcc	2cede4 <__bss_end+0x2a91ac>
     5b4:	010b390b 	tsteq	fp, fp, lsl #18
     5b8:	0c000013 	stceq	0, cr0, [r0], {19}
     5bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     5c0:	0b3a0e03 	bleq	e83dd4 <__bss_end+0xe5e19c>
     5c4:	2139053b 	teqcs	r9, fp, lsr r5
     5c8:	3c192706 	ldccc	7, cr2, [r9], {6}
     5cc:	00130119 	andseq	r0, r3, r9, lsl r1
     5d0:	012e0d00 			@ <UNDEFINED> instruction: 0x012e0d00
     5d4:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     5d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     5dc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     5e0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     5e4:	00001301 	andeq	r1, r0, r1, lsl #6
     5e8:	3f012e0e 	svccc	0x00012e0e
     5ec:	3a0e0319 	bcc	381258 <__bss_end+0x35b620>
     5f0:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     5f4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     5f8:	01111349 	tsteq	r1, r9, asr #6
     5fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     600:	1301197a 	movwne	r1, #6522	@ 0x197a
     604:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     608:	3a0e0301 	bcc	381214 <__bss_end+0x35b5dc>
     60c:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     610:	270d2139 	smladxcs	sp, r9, r1, r2
     614:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     618:	7c184006 	ldcvc	0, cr4, [r8], {6}
     61c:	00130119 	andseq	r0, r3, r9, lsl r1
     620:	002e1000 	eoreq	r1, lr, r0
     624:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     628:	3b05213a 	blcc	148b18 <__bss_end+0x122ee0>
     62c:	06213905 	strteq	r3, [r1], -r5, lsl #18
     630:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     634:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     638:	03193f00 	tsteq	r9, #0, 30
     63c:	03213a0e 			@ <UNDEFINED> instruction: 0x03213a0e
     640:	21390b3b 	teqcs	r9, fp, lsr fp
     644:	3c19270d 	ldccc	7, cr2, [r9], {13}
     648:	12000019 	andne	r0, r0, #25
     64c:	0e03012e 	adfeqsp	f0, f3, #0.5
     650:	3b01213a 	blcc	48b40 <__bss_end+0x22f08>
     654:	1d213905 			@ <UNDEFINED> instruction: 0x1d213905
     658:	13491927 	movtne	r1, #39207	@ 0x9927
     65c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     660:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     664:	00001301 	andeq	r1, r0, r1, lsl #6
     668:	25011113 	strcs	r1, [r1, #-275]	@ 0xfffffeed
     66c:	030b130e 	movweq	r1, #45838	@ 0xb30e
     670:	110e1b0e 	tstne	lr, lr, lsl #22
     674:	10061201 	andne	r1, r6, r1, lsl #4
     678:	14000017 	strne	r0, [r0], #-23	@ 0xffffffe9
     67c:	0b0b0024 	bleq	2c0714 <__bss_end+0x29aadc>
     680:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     684:	0f150000 	svceq	0x00150000
     688:	000b0b00 	andeq	r0, fp, r0, lsl #22
     68c:	00261600 	eoreq	r1, r6, r0, lsl #12
     690:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     694:	03193f01 	tsteq	r9, #1, 30
     698:	3b0b3a0e 	blcc	2ceed8 <__bss_end+0x2a92a0>
     69c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     6a0:	3c134919 			@ <UNDEFINED> instruction: 0x3c134919
     6a4:	00130119 	andseq	r0, r3, r9, lsl r1
     6a8:	002e1800 	eoreq	r1, lr, r0, lsl #16
     6ac:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     6b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     6b4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     6b8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     6bc:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     6c0:	03193f01 	tsteq	r9, #1, 30
     6c4:	3b0b3a0e 	blcc	2cef04 <__bss_end+0x2a92cc>
     6c8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     6cc:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     6d0:	7c184006 	ldcvc	0, cr4, [r8], {6}
     6d4:	00130119 	andseq	r0, r3, r9, lsl r1
     6d8:	012e1a00 			@ <UNDEFINED> instruction: 0x012e1a00
     6dc:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     6e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     6e4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     6e8:	01111349 	tsteq	r1, r9, asr #6
     6ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     6f0:	0000197c 	andeq	r1, r0, ip, ror r9
     6f4:	00340100 	eorseq	r0, r4, r0, lsl #2
     6f8:	213a0e03 	teqcs	sl, r3, lsl #28
     6fc:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
     700:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     704:	02000018 	andeq	r0, r0, #24
     708:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     70c:	3b01213a 	blcc	48bfc <__bss_end+0x22fc4>
     710:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     714:	00180213 	andseq	r0, r8, r3, lsl r2
     718:	000d0300 	andeq	r0, sp, r0, lsl #6
     71c:	0b3a0e03 	bleq	e83f30 <__bss_end+0xe5e2f8>
     720:	0b390b3b 	bleq	e43414 <__bss_end+0xe1d7dc>
     724:	0b381349 	bleq	e05450 <__bss_end+0xddf818>
     728:	05040000 	streq	r0, [r4, #-0]
     72c:	00134900 	andseq	r4, r3, r0, lsl #18
     730:	00340500 	eorseq	r0, r4, r0, lsl #10
     734:	213a0e03 	teqcs	sl, r3, lsl #28
     738:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     73c:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     740:	06000018 			@ <UNDEFINED> instruction: 0x06000018
     744:	210b000f 	tstcs	fp, pc
     748:	00134904 	andseq	r4, r3, r4, lsl #18
     74c:	00260700 	eoreq	r0, r6, r0, lsl #14
     750:	00001349 	andeq	r1, r0, r9, asr #6
     754:	0b002408 	bleq	977c <_start-0x6884>
     758:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
     75c:	0900000e 	stmdbeq	r0, {r1, r2, r3}
     760:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     764:	0b3b0b3a 	bleq	ec3454 <__bss_end+0xe9d81c>
     768:	13490b39 	movtne	r0, #39737	@ 0x9b39
     76c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     770:	03193f01 	tsteq	r9, #1, 30
     774:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     778:	0b39053b 	bleq	e41c6c <__bss_end+0xe1c034>
     77c:	01111927 	tsteq	r1, r7, lsr #18
     780:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     784:	1301197c 	movwne	r1, #6524	@ 0x197c
     788:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     78c:	03193f01 	tsteq	r9, #1, 30
     790:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     794:	0b39053b 	bleq	e41c88 <__bss_end+0xe1c050>
     798:	13491927 	movtne	r1, #39207	@ 0x9927
     79c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     7a0:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     7a4:	00001301 	andeq	r1, r0, r1, lsl #6
     7a8:	4900350c 	stmdbmi	r0, {r2, r3, r8, sl, ip, sp}
     7ac:	0d000013 	stceq	0, cr0, [r0, #-76]	@ 0xffffffb4
     7b0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     7b4:	0b3a0b0b 	bleq	e833e8 <__bss_end+0xe5d7b0>
     7b8:	0b390b3b 	bleq	e434ac <__bss_end+0xe1d874>
     7bc:	00001301 	andeq	r1, r0, r1, lsl #6
     7c0:	3f012e0e 	svccc	0x00012e0e
     7c4:	3a0e0319 	bcc	381430 <__bss_end+0x35b7f8>
     7c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7cc:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
     7d0:	1301193c 	movwne	r1, #6460	@ 0x193c
     7d4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     7d8:	3a0e0301 	bcc	3813e4 <__bss_end+0x35b7ac>
     7dc:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     7e0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     7e4:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     7e8:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     7ec:	00001301 	andeq	r1, r0, r1, lsl #6
     7f0:	11010b10 	tstne	r1, r0, lsl fp
     7f4:	00061201 	andeq	r1, r6, r1, lsl #4
     7f8:	01011100 	mrseq	r1, (UNDEF: 17)
     7fc:	13011349 	movwne	r1, #4937	@ 0x1349
     800:	21120000 	tstcs	r2, r0
     804:	2f134900 	svccs	0x00134900
     808:	1300000b 	movwne	r0, #11
     80c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     810:	213a0e03 	teqcs	sl, r3, lsl #28
     814:	390b3b08 	stmdbcc	fp, {r3, r8, r9, fp, ip, sp}
     818:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     81c:	01193c13 	tsteq	r9, r3, lsl ip
     820:	14000013 	strne	r0, [r0], #-19	@ 0xffffffed
     824:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     828:	213a0e03 	teqcs	sl, r3, lsl #28
     82c:	39053b09 	stmdbcc	r5, {r0, r3, r8, r9, fp, ip, sp}
     830:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     834:	01193c13 	tsteq	r9, r3, lsl ip
     838:	15000013 	strne	r0, [r0, #-19]	@ 0xffffffed
     83c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	@ <UNPREDICTABLE>
     840:	213a0e03 	teqcs	sl, r3, lsl #28
     844:	390b3b04 	stmdbcc	fp, {r2, r8, r9, fp, ip, sp}
     848:	19270d21 	stmdbne	r7!, {r0, r5, r8, sl, fp}
     84c:	0000193c 	andeq	r1, r0, ip, lsr r9
     850:	3f002e16 	svccc	0x00002e16
     854:	3a0e0319 	bcc	3814c0 <__bss_end+0x35b888>
     858:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     85c:	27062139 	smladxcs	r6, r9, r1, r2
     860:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     864:	7a184006 	bvc	610884 <__bss_end+0x5eac4c>
     868:	17000019 	smladne	r0, r9, r0, r0
     86c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     870:	213a0e03 	teqcs	sl, r3, lsl #28
     874:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
     878:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
     87c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     880:	197a1840 	ldmdbne	sl!, {r6, fp, ip}^
     884:	00001301 	andeq	r1, r0, r1, lsl #6
     888:	3f012e18 	svccc	0x00012e18
     88c:	3a0e0319 	bcc	3814f8 <__bss_end+0x35b8c0>
     890:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     894:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     898:	01111349 	tsteq	r1, r9, asr #6
     89c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8a0:	1301197a 	movwne	r1, #6522	@ 0x197a
     8a4:	11190000 	tstne	r9, r0
     8a8:	130e2501 	movwne	r2, #58625	@ 0xe501
     8ac:	1b0e030b 	blne	3814e0 <__bss_end+0x35b8a8>
     8b0:	1201110e 	andne	r1, r1, #-2147483645	@ 0x80000003
     8b4:	00171006 	andseq	r1, r7, r6
     8b8:	00241a00 	eoreq	r1, r4, r0, lsl #20
     8bc:	0b3e0b0b 	bleq	f834f0 <__bss_end+0xf5d8b8>
     8c0:	00000803 	andeq	r0, r0, r3, lsl #16
     8c4:	0b000f1b 	bleq	4538 <_start-0xbac8>
     8c8:	1c00000b 	stcne	0, cr0, [r0], {11}
     8cc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     8d0:	00001301 	andeq	r1, r0, r1, lsl #6
     8d4:	2701151d 	smladcs	r1, sp, r5, r1
     8d8:	01134919 	tsteq	r3, r9, lsl r9
     8dc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     8e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8e4:	0b3b0b3a 	bleq	ec35d4 <__bss_end+0xe9d99c>
     8e8:	13490b39 	movtne	r0, #39737	@ 0x9b39
     8ec:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     8f0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     8f4:	03193f00 	tsteq	r9, #0, 30
     8f8:	3b0b3a0e 	blcc	2cf138 <__bss_end+0x2a9500>
     8fc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     900:	00193c19 	andseq	r3, r9, r9, lsl ip
     904:	002e2000 	eoreq	r2, lr, r0
     908:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     90c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     910:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     914:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     918:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     91c:	3a0e0301 	bcc	381528 <__bss_end+0x35b8f0>
     920:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     924:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     928:	12011113 	andne	r1, r1, #-1073741820	@ 0xc0000004
     92c:	7c184006 	ldcvc	0, cr4, [r8], {6}
     930:	00130119 	andseq	r0, r3, r9, lsl r1
     934:	010b2200 	mrseq	r2, R11_fiq
     938:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     93c:	00001301 	andeq	r1, r0, r1, lsl #6
     940:	3f002e23 	svccc	0x00002e23
     944:	3a0e0319 	bcc	3815b0 <__bss_end+0x35b978>
     948:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     94c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     950:	12011113 	andne	r1, r1, #-1073741820	@ 0xc0000004
     954:	7a184006 	bvc	610974 <__bss_end+0x5ead3c>
     958:	24000019 	strcs	r0, [r0], #-25	@ 0xffffffe7
     95c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	@ <UNPREDICTABLE>
     960:	0b3a0e03 	bleq	e84174 <__bss_end+0xe5e53c>
     964:	0b39053b 	bleq	e41e58 <__bss_end+0xe1c220>
     968:	01111927 	tsteq	r1, r7, lsr #18
     96c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     970:	0000197c 	andeq	r1, r0, ip, ror r9
     974:	03000525 	movweq	r0, #1317	@ 0x525
     978:	3b0b3a0e 	blcc	2cf1b8 <__bss_end+0x2a9580>
     97c:	49053905 	stmdbmi	r5, {r0, r2, r8, fp, ip, sp}
     980:	00180213 	andseq	r0, r8, r3, lsl r2
     984:	0d010000 	stceq	0, cr0, [r1, #-0]
     988:	3a0e0300 	bcc	381590 <__bss_end+0x35b958>
     98c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     990:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     994:	0200000b 	andeq	r0, r0, #11
     998:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     99c:	3b01213a 	blcc	48e8c <__bss_end+0x23254>
     9a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     9a4:	00180213 	andseq	r0, r8, r3, lsl r2
     9a8:	00050300 	andeq	r0, r5, r0, lsl #6
     9ac:	213a0e03 	teqcs	sl, r3, lsl #28
     9b0:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     9b4:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     9b8:	04000018 	streq	r0, [r0], #-24	@ 0xffffffe8
     9bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     9c0:	0b3b0b3a 	bleq	ec36b0 <__bss_end+0xe9da78>
     9c4:	13490b39 	movtne	r0, #39737	@ 0x9b39
     9c8:	05050000 	streq	r0, [r5, #-0]
     9cc:	3a080300 	bcc	2015d4 <__bss_end+0x1db99c>
     9d0:	0b3b0121 	bleq	ec0e5c <__bss_end+0xe9b224>
     9d4:	13490b39 	movtne	r0, #39737	@ 0x9b39
     9d8:	00001802 	andeq	r1, r0, r2, lsl #16
     9dc:	0b000f06 	bleq	45fc <_start-0xba04>
     9e0:	13490421 	movtne	r0, #37921	@ 0x9421
     9e4:	05070000 	streq	r0, [r7, #-0]
     9e8:	00134900 	andseq	r4, r3, r0, lsl #18
     9ec:	00240800 	eoreq	r0, r4, r0, lsl #16
     9f0:	3e04210b 	adfccs	f2, f4, #3.0
     9f4:	0e030721 	cdpeq	7, 0, cr0, cr3, cr1, {1}
     9f8:	26090000 	strcs	r0, [r9], -r0
     9fc:	00134900 	andseq	r4, r3, r0, lsl #18
     a00:	01130a00 	tsteq	r3, r0, lsl #20
     a04:	0b3a0b0b 	bleq	e83638 <__bss_end+0xe5da00>
     a08:	21390b3b 	teqcs	r9, fp, lsr fp
     a0c:	00130109 	andseq	r0, r3, r9, lsl #2
     a10:	01010b00 	tsteq	r1, r0, lsl #22
     a14:	13011349 	movwne	r1, #4937	@ 0x1349
     a18:	210c0000 	mrscs	r0, (UNDEF: 12)
     a1c:	2f134900 	svccs	0x00134900
     a20:	0d00000b 	stceq	0, cr0, [r0, #-44]	@ 0xffffffd4
     a24:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     a28:	213a0e03 	teqcs	sl, r3, lsl #28
     a2c:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     a30:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
     a34:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     a38:	197a1840 	ldmdbne	sl!, {r6, fp, ip}^
     a3c:	00001301 	andeq	r1, r0, r1, lsl #6
     a40:	3f012e0e 	svccc	0x00012e0e
     a44:	3a0e0319 	bcc	3816b0 <__bss_end+0x35ba78>
     a48:	0b3b0121 	bleq	ec0ed4 <__bss_end+0xe9b29c>
     a4c:	27062139 	smladxcs	r6, r9, r1, r2
     a50:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     a54:	7c184006 	ldcvc	0, cr4, [r8], {6}
     a58:	00130119 	andseq	r0, r3, r9, lsl r1
     a5c:	002e0f00 	eoreq	r0, lr, r0, lsl #30
     a60:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     a64:	3b01213a 	blcc	48f54 <__bss_end+0x2331c>
     a68:	0621390b 	strteq	r3, [r1], -fp, lsl #18
     a6c:	01111927 	tsteq	r1, r7, lsr #18
     a70:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a74:	0000197a 	andeq	r1, r0, sl, ror r9
     a78:	03003410 	movweq	r3, #1040	@ 0x410
     a7c:	01213a08 			@ <UNDEFINED> instruction: 0x01213a08
     a80:	21390b3b 	teqcs	r9, fp, lsr fp
     a84:	02134910 	andseq	r4, r3, #16, 18	@ 0x40000
     a88:	11000018 	tstne	r0, r8, lsl r0
     a8c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     a90:	0e030b13 	vmoveq.32	d3[0], r0
     a94:	01110e1b 	tsteq	r1, fp, lsl lr
     a98:	17100612 			@ <UNDEFINED> instruction: 0x17100612
     a9c:	15120000 	ldrne	r0, [r2, #-0]
     aa0:	01192701 	tsteq	r9, r1, lsl #14
     aa4:	13000013 	movwne	r0, #19
     aa8:	0b0b000f 	bleq	2c0aec <__bss_end+0x29aeb4>
     aac:	35140000 	ldrcc	r0, [r4, #-0]
     ab0:	00134900 	andseq	r4, r3, r0, lsl #18
     ab4:	012e1500 			@ <UNDEFINED> instruction: 0x012e1500
     ab8:	0b3a0e03 	bleq	e842cc <__bss_end+0xe5e694>
     abc:	0b390b3b 	bleq	e437b0 <__bss_end+0xe1db78>
     ac0:	01111927 	tsteq	r1, r7, lsr #18
     ac4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ac8:	0000197c 	andeq	r1, r0, ip, ror r9
     acc:	11010b16 	tstne	r1, r6, lsl fp
     ad0:	00061201 	andeq	r1, r6, r1, lsl #4
     ad4:	0d010000 	stceq	0, cr0, [r1, #-0]
     ad8:	3a0e0300 	bcc	3816e0 <__bss_end+0x35baa8>
     adc:	0b3b0121 	bleq	ec0f68 <__bss_end+0xe9b330>
     ae0:	49102139 	ldmdbmi	r0, {r0, r3, r4, r5, r8, sp}
     ae4:	000b3813 	andeq	r3, fp, r3, lsl r8
     ae8:	00050200 	andeq	r0, r5, r0, lsl #4
     aec:	213a0e03 	teqcs	sl, r3, lsl #28
     af0:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     af4:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     af8:	03000018 	movweq	r0, #24
     afc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b00:	3b01213a 	blcc	48ff0 <__bss_end+0x233b8>
     b04:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     b08:	00180213 	andseq	r0, r8, r3, lsl r2
     b0c:	00280400 	eoreq	r0, r8, r0, lsl #8
     b10:	0b1c0e03 	bleq	704324 <__bss_end+0x6de6ec>
     b14:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
     b18:	03193f01 	tsteq	r9, #1, 30
     b1c:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     b20:	21390b3b 	teqcs	r9, fp, lsr fp
     b24:	11192706 	tstne	r9, r6, lsl #14
     b28:	40061201 	andmi	r1, r6, r1, lsl #4
     b2c:	01197a18 	tsteq	r9, r8, lsl sl
     b30:	06000013 			@ <UNDEFINED> instruction: 0x06000013
     b34:	0b0b0024 	bleq	2c0bcc <__bss_end+0x29af94>
     b38:	0e030b3e 	vmoveq.16	d3[0], r0
     b3c:	01070000 	mrseq	r0, (UNDEF: 7)
     b40:	01134901 	tsteq	r3, r1, lsl #18
     b44:	08000013 	stmdaeq	r0, {r0, r1, r4}
     b48:	13490021 	movtne	r0, #36897	@ 0x9021
     b4c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     b50:	03010409 	movweq	r0, #5129	@ 0x1409
     b54:	07213e0e 	streq	r3, [r1, -lr, lsl #28]!
     b58:	4901210b 	stmdbmi	r1, {r0, r1, r3, r8, sp}
     b5c:	02213a13 	eoreq	r3, r1, #77824	@ 0x13000
     b60:	21390b3b 	teqcs	r9, fp, lsr fp
     b64:	00130106 	andseq	r0, r3, r6, lsl #2
     b68:	01110a00 	tsteq	r1, r0, lsl #20
     b6c:	0b130e25 	bleq	4c4408 <__bss_end+0x49e7d0>
     b70:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     b74:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     b78:	00001710 	andeq	r1, r0, r0, lsl r7
     b7c:	0b01130b 	bleq	457b0 <__bss_end+0x1fb78>
     b80:	3b0b3a0b 	blcc	2cf3b4 <__bss_end+0x2a977c>
     b84:	010b390b 	tsteq	fp, fp, lsl #18
     b88:	0c000013 	stceq	0, cr0, [r0], {19}
     b8c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     b90:	0b3b0b3a 	bleq	ec3880 <__bss_end+0xe9dc48>
     b94:	13490b39 	movtne	r0, #39737	@ 0x9b39
     b98:	350d0000 	strcc	r0, [sp, #-0]
     b9c:	00134900 	andseq	r4, r3, r0, lsl #18
     ba0:	00340e00 	eorseq	r0, r4, r0, lsl #28
     ba4:	0b3a0e03 	bleq	e843b8 <__bss_end+0xe5e780>
     ba8:	0b390b3b 	bleq	e4389c <__bss_end+0xe1dc64>
     bac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	@ <UNPREDICTABLE>
     bb0:	00001802 	andeq	r1, r0, r2, lsl #16
     bb4:	0b000f0f 	bleq	47f8 <_start-0xb808>
     bb8:	0013490b 	andseq	r4, r3, fp, lsl #18
     bbc:	00261000 	eoreq	r1, r6, r0
     bc0:	00001349 	andeq	r1, r0, r9, asr #6
     bc4:	3f012e11 	svccc	0x00012e11
     bc8:	3a0e0319 	bcc	381834 <__bss_end+0x35bbfc>
     bcc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bd0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     bd4:	12011113 	andne	r1, r1, #-1073741820	@ 0xc0000004
     bd8:	7a184006 	bvc	610bf8 <__bss_end+0x5eafc0>
     bdc:	00130119 	andseq	r0, r3, r9, lsl r1
     be0:	00241200 	eoreq	r1, r4, r0, lsl #4
     be4:	0b3e0b0b 	bleq	f83818 <__bss_end+0xf5dbe0>
     be8:	00000803 	andeq	r0, r0, r3, lsl #16
     bec:	3f012e13 	svccc	0x00012e13
     bf0:	3a0e0319 	bcc	38185c <__bss_end+0x35bc24>
     bf4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bf8:	1119270b 	tstne	r9, fp, lsl #14
     bfc:	40061201 	andmi	r1, r6, r1, lsl #4
     c00:	01197c18 	tsteq	r9, r8, lsl ip
     c04:	14000013 	strne	r0, [r0], #-19	@ 0xffffffed
     c08:	08030005 	stmdaeq	r3, {r0, r2}
     c0c:	0b3b0b3a 	bleq	ec38fc <__bss_end+0xe9dcc4>
     c10:	13490b39 	movtne	r0, #39737	@ 0x9b39
     c14:	00001802 	andeq	r1, r0, r2, lsl #16
     c18:	3f012e15 	svccc	0x00012e15
     c1c:	3a0e0319 	bcc	381888 <__bss_end+0x35bc50>
     c20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c24:	1119270b 	tstne	r9, fp, lsl #14
     c28:	40061201 	andmi	r1, r6, r1, lsl #4
     c2c:	00197a18 	andseq	r7, r9, r8, lsl sl
     c30:	00341600 	eorseq	r1, r4, r0, lsl #12
     c34:	0b3a0803 	bleq	e82c48 <__bss_end+0xe5d010>
     c38:	0b390b3b 	bleq	e4392c <__bss_end+0xe1dcf4>
     c3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c40:	01000000 	mrseq	r0, (UNDEF: 0)
     c44:	0b0b0024 	bleq	2c0cdc <__bss_end+0x29b0a4>
     c48:	0e030b3e 	vmoveq.16	d3[0], r0
     c4c:	34020000 	strcc	r0, [r2], #-0
     c50:	3a0e0300 	bcc	381858 <__bss_end+0x35bc20>
     c54:	0b3b0121 	bleq	ec10e0 <__bss_end+0xe9b4a8>
     c58:	13490b39 	movtne	r0, #39737	@ 0x9b39
     c5c:	00001802 	andeq	r1, r0, r2, lsl #16
     c60:	0b000f03 	bleq	4874 <_start-0xb78c>
     c64:	13490421 	movtne	r0, #37921	@ 0x9421
     c68:	34040000 	strcc	r0, [r4], #-0
     c6c:	3a0e0300 	bcc	381874 <__bss_end+0x35bc3c>
     c70:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     c74:	13490b39 	movtne	r0, #39737	@ 0x9b39
     c78:	00001802 	andeq	r1, r0, r2, lsl #16
     c7c:	03001605 	movweq	r1, #1541	@ 0x605
     c80:	3b0b3a0e 	blcc	2cf4c0 <__bss_end+0x2a9888>
     c84:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     c88:	06000013 			@ <UNDEFINED> instruction: 0x06000013
     c8c:	13490026 	movtne	r0, #36902	@ 0x9026
     c90:	0d070000 	stceq	0, cr0, [r7, #-0]
     c94:	3a0e0300 	bcc	38189c <__bss_end+0x35bc64>
     c98:	0b3b0121 	bleq	ec1124 <__bss_end+0xe9b4ec>
     c9c:	13490b39 	movtne	r0, #39737	@ 0x9b39
     ca0:	0d080000 	stceq	0, cr0, [r8, #-0]
     ca4:	3a0e0300 	bcc	3818ac <__bss_end+0x35bc74>
     ca8:	0b3b0121 	bleq	ec1134 <__bss_end+0xe9b4fc>
     cac:	13490b39 	movtne	r0, #39737	@ 0x9b39
     cb0:	00000b38 	andeq	r0, r0, r8, lsr fp
     cb4:	03012e09 	movweq	r2, #7689	@ 0x1e09
     cb8:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     cbc:	2139053b 	teqcs	r9, fp, lsr r5
     cc0:	1119270d 	tstne	r9, sp, lsl #14
     cc4:	40061201 	andmi	r1, r6, r1, lsl #4
     cc8:	01197a18 	tsteq	r9, r8, lsl sl
     ccc:	0a000013 	beq	d20 <_start-0xf2e0>
     cd0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     cd4:	0e030b13 	vmoveq.32	d3[0], r0
     cd8:	01110e1b 	tsteq	r1, fp, lsl lr
     cdc:	17100612 			@ <UNDEFINED> instruction: 0x17100612
     ce0:	240b0000 	strcs	r0, [fp], #-0
     ce4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ce8:	0008030b 	andeq	r0, r8, fp, lsl #6
     cec:	000f0c00 	andeq	r0, pc, r0, lsl #24
     cf0:	00000b0b 	andeq	r0, r0, fp, lsl #22
     cf4:	0301170d 	movweq	r1, #5901	@ 0x170d
     cf8:	3a050b0e 	bcc	143938 <__bss_end+0x11dd00>
     cfc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d00:	0013010b 	andseq	r0, r3, fp, lsl #2
     d04:	00350e00 	eorseq	r0, r5, r0, lsl #28
     d08:	00001349 	andeq	r1, r0, r9, asr #6
     d0c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     d10:	00130113 	andseq	r0, r3, r3, lsl r1
     d14:	00211000 	eoreq	r1, r1, r0
     d18:	052f1349 	streq	r1, [pc, #-841]!	@ 9d7 <_start-0xf629>
     d1c:	13110000 	tstne	r1, #0
     d20:	0b0e0301 	bleq	38192c <__bss_end+0x35bcf4>
     d24:	3b0b3a0b 	blcc	2cf558 <__bss_end+0x2a9920>
     d28:	010b390b 	tsteq	fp, fp, lsl #18
     d2c:	12000013 	andne	r0, r0, #19
     d30:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d34:	0b3b0b3a 	bleq	ec3a24 <__bss_end+0xe9ddec>
     d38:	13490b39 	movtne	r0, #39737	@ 0x9b39
     d3c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     d40:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     d44:	03193f00 	tsteq	r9, #0, 30
     d48:	3b0b3a0e 	blcc	2cf588 <__bss_end+0x2a9950>
     d4c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     d50:	3c134919 			@ <UNDEFINED> instruction: 0x3c134919
     d54:	14000019 	strne	r0, [r0], #-25	@ 0xffffffe7
     d58:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	@ <UNPREDICTABLE>
     d5c:	0b3a0e03 	bleq	e84570 <__bss_end+0xe5e938>
     d60:	0b39053b 	bleq	e42254 <__bss_end+0xe1c61c>
     d64:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     d68:	05150000 	ldreq	r0, [r5, #-0]
     d6c:	3a0e0300 	bcc	381974 <__bss_end+0x35bd3c>
     d70:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d74:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     d78:	16000018 			@ <UNDEFINED> instruction: 0x16000018
     d7c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     d80:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     d84:	13490b39 	movtne	r0, #39737	@ 0x9b39
     d88:	00001802 	andeq	r1, r0, r2, lsl #16
     d8c:	3f002e17 	svccc	0x00002e17
     d90:	3a0e0319 	bcc	3819fc <__bss_end+0x35bdc4>
     d94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d98:	1119270b 	tstne	r9, fp, lsl #14
     d9c:	40061201 	andmi	r1, r6, r1, lsl #4
     da0:	00197a18 	andseq	r7, r9, r8, lsl sl
     da4:	002e1800 	eoreq	r1, lr, r0, lsl #16
     da8:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     dac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     db0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     db4:	01111349 	tsteq	r1, r9, asr #6
     db8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     dbc:	0000197a 	andeq	r1, r0, sl, ror r9
     dc0:	3f012e19 	svccc	0x00012e19
     dc4:	3a0e0319 	bcc	381a30 <__bss_end+0x35bdf8>
     dc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     dcc:	1119270b 	tstne	r9, fp, lsl #14
     dd0:	40061201 	andmi	r1, r6, r1, lsl #4
     dd4:	01197c18 	tsteq	r9, r8, lsl ip
     dd8:	1a000013 	bne	e2c <_start-0xf1d4>
     ddc:	08030005 	stmdaeq	r3, {r0, r2}
     de0:	0b3b0b3a 	bleq	ec3ad0 <__bss_end+0xe9de98>
     de4:	13490b39 	movtne	r0, #39737	@ 0x9b39
     de8:	00001802 	andeq	r1, r0, r2, lsl #16
     dec:	0300341b 	movweq	r3, #1051	@ 0x41b
     df0:	3b0b3a08 	blcc	2cf618 <__bss_end+0x2a99e0>
     df4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     df8:	00180213 	andseq	r0, r8, r3, lsl r2
     dfc:	012e1c00 			@ <UNDEFINED> instruction: 0x012e1c00
     e00:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     e04:	0b3b0b3a 	bleq	ec3af4 <__bss_end+0xe9debc>
     e08:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     e0c:	01111349 	tsteq	r1, r9, asr #6
     e10:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e14:	0000197c 	andeq	r1, r0, ip, ror r9
     e18:	0300051d 	movweq	r0, #1309	@ 0x51d
     e1c:	3b0b3a0e 	blcc	2cf65c <__bss_end+0x2a9a24>
     e20:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e24:	00180213 	andseq	r0, r8, r3, lsl r2
     e28:	05010000 	streq	r0, [r1, #-0]
     e2c:	00134900 	andseq	r4, r3, r0, lsl #18
     e30:	00240200 	eoreq	r0, r4, r0, lsl #4
     e34:	0b3e0b0b 	bleq	f83a68 <__bss_end+0xf5de30>
     e38:	00000e03 	andeq	r0, r0, r3, lsl #28
     e3c:	0b000f03 	bleq	4a50 <_start-0xb5b0>
     e40:	13490421 	movtne	r0, #37921	@ 0x9421
     e44:	26040000 	strcs	r0, [r4], -r0
     e48:	00134900 	andseq	r4, r3, r0, lsl #18
     e4c:	00160500 	andseq	r0, r6, r0, lsl #10
     e50:	0b3a0e03 	bleq	e84664 <__bss_end+0xe5ea2c>
     e54:	0b390b3b 	bleq	e43b48 <__bss_end+0xe1df10>
     e58:	00001349 	andeq	r1, r0, r9, asr #6
     e5c:	03000d06 	movweq	r0, #3334	@ 0xd06
     e60:	04213a0e 	strteq	r3, [r1], #-2574	@ 0xfffff5f2
     e64:	0b390b3b 	bleq	e43b58 <__bss_end+0xe1df20>
     e68:	0b381349 	bleq	e05b94 <__bss_end+0xddff5c>
     e6c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     e70:	03193f01 	tsteq	r9, #1, 30
     e74:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     e78:	21390b3b 	teqcs	r9, fp, lsr fp
     e7c:	11192706 	tstne	r9, r6, lsl #14
     e80:	40061201 	andmi	r1, r6, r1, lsl #4
     e84:	01197c18 	tsteq	r9, r8, lsl ip
     e88:	08000013 	stmdaeq	r0, {r0, r1, r4}
     e8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     e90:	213a0e03 	teqcs	sl, r3, lsl #28
     e94:	390b3b05 	stmdbcc	fp, {r0, r2, r8, r9, fp, ip, sp}
     e98:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
     e9c:	1301193c 	movwne	r1, #6460	@ 0x193c
     ea0:	05090000 	streq	r0, [r9, #-0]
     ea4:	3a0e0300 	bcc	381aac <__bss_end+0x35be74>
     ea8:	0b3b0121 	bleq	ec1334 <__bss_end+0xe9b6fc>
     eac:	49122139 	ldmdbmi	r2, {r0, r3, r4, r5, r8, sp}
     eb0:	00180213 	andseq	r0, r8, r3, lsl r2
     eb4:	00340a00 	eorseq	r0, r4, r0, lsl #20
     eb8:	213a0803 	teqcs	sl, r3, lsl #16
     ebc:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     ec0:	13490621 	movtne	r0, #38433	@ 0x9621
     ec4:	00001802 	andeq	r1, r0, r2, lsl #16
     ec8:	0300050b 	movweq	r0, #1291	@ 0x50b
     ecc:	01213a08 			@ <UNDEFINED> instruction: 0x01213a08
     ed0:	0b390b3b 	bleq	e43bc4 <__bss_end+0xe1df8c>
     ed4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ed8:	110c0000 	mrsne	r0, (UNDEF: 12)
     edc:	130e2501 	movwne	r2, #58625	@ 0xe501
     ee0:	1b0e030b 	blne	381b14 <__bss_end+0x35bedc>
     ee4:	1201110e 	andne	r1, r1, #-2147483645	@ 0x80000003
     ee8:	00171006 	andseq	r1, r7, r6
     eec:	00240d00 	eoreq	r0, r4, r0, lsl #26
     ef0:	0b3e0b0b 	bleq	f83b24 <__bss_end+0xf5deec>
     ef4:	00000803 	andeq	r0, r0, r3, lsl #16
     ef8:	2701150e 	strcs	r1, [r1, -lr, lsl #10]
     efc:	00130119 	andseq	r0, r3, r9, lsl r1
     f00:	000f0f00 	andeq	r0, pc, r0, lsl #30
     f04:	00000b0b 	andeq	r0, r0, fp, lsl #22
     f08:	03011310 	movweq	r1, #4880	@ 0x1310
     f0c:	3a0b0b0e 	bcc	2c3b4c <__bss_end+0x29df14>
     f10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f14:	0013010b 	andseq	r0, r3, fp, lsl #2
     f18:	002e1100 	eoreq	r1, lr, r0, lsl #2
     f1c:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     f20:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     f24:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     f28:	0000193c 	andeq	r1, r0, ip, lsr r9
     f2c:	3f012e12 	svccc	0x00012e12
     f30:	3a0e0319 	bcc	381b9c <__bss_end+0x35bf64>
     f34:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f38:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     f3c:	01193c13 	tsteq	r9, r3, lsl ip
     f40:	13000013 	movwne	r0, #19
     f44:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     f48:	0b3a0e03 	bleq	e8475c <__bss_end+0xe5eb24>
     f4c:	0b39053b 	bleq	e42440 <__bss_end+0xe1c808>
     f50:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     f54:	00001301 	andeq	r1, r0, r1, lsl #6
     f58:	3f002e14 	svccc	0x00002e14
     f5c:	3a0e0319 	bcc	381bc8 <__bss_end+0x35bf90>
     f60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f64:	1119270b 	tstne	r9, fp, lsl #14
     f68:	40061201 	andmi	r1, r6, r1, lsl #4
     f6c:	00197c18 	andseq	r7, r9, r8, lsl ip
     f70:	002e1500 	eoreq	r1, lr, r0, lsl #10
     f74:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     f78:	0b3b0b3a 	bleq	ec3c68 <__bss_end+0xe9e030>
     f7c:	01110b39 	tsteq	r1, r9, lsr fp
     f80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f84:	0000197a 	andeq	r1, r0, sl, ror r9
     f88:	3f012e16 	svccc	0x00012e16
     f8c:	3a0e0319 	bcc	381bf8 <__bss_end+0x35bfc0>
     f90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f94:	1119270b 	tstne	r9, fp, lsl #14
     f98:	40061201 	andmi	r1, r6, r1, lsl #4
     f9c:	00197a18 	andseq	r7, r9, r8, lsl sl
     fa0:	24010000 	strcs	r0, [r1], #-0
     fa4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     fa8:	000e030b 	andeq	r0, lr, fp, lsl #6
     fac:	000f0200 	andeq	r0, pc, r0, lsl #4
     fb0:	4904210b 	stmdbmi	r4, {r0, r1, r3, r8, sp}
     fb4:	03000013 	movweq	r0, #19
     fb8:	13490026 	movtne	r0, #36902	@ 0x9026
     fbc:	37040000 	strcc	r0, [r4, -r0]
     fc0:	00134900 	andseq	r4, r3, r0, lsl #18
     fc4:	00050500 	andeq	r0, r5, r0, lsl #10
     fc8:	213a0e03 	teqcs	sl, r3, lsl #28
     fcc:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     fd0:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     fd4:	1742b717 	smlaldne	fp, r2, r7, r7
     fd8:	34060000 	strcc	r0, [r6], #-0
     fdc:	3a080300 	bcc	201be4 <__bss_end+0x1dbfac>
     fe0:	0b3b0121 	bleq	ec146c <__bss_end+0xe9b834>
     fe4:	13490b39 	movtne	r0, #39737	@ 0x9b39
     fe8:	42b71702 	adcsmi	r1, r7, #524288	@ 0x80000
     fec:	07000017 	smladeq	r0, r7, r0, r0
     ff0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ff4:	3b01213a 	blcc	494e4 <__bss_end+0x238ac>
     ff8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ffc:	b7170213 			@ <UNDEFINED> instruction: 0xb7170213
    1000:	00001742 	andeq	r1, r0, r2, asr #14
    1004:	25011108 	strcs	r1, [r1, #-264]	@ 0xfffffef8
    1008:	030b130e 	movweq	r1, #45838	@ 0xb30e
    100c:	110e1b0e 	tstne	lr, lr, lsl #22
    1010:	10061201 	andne	r1, r6, r1, lsl #4
    1014:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    1018:	0b0b0024 	bleq	2c10b0 <__bss_end+0x29b478>
    101c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1020:	160a0000 	strne	r0, [sl], -r0
    1024:	3a0e0300 	bcc	381c2c <__bss_end+0x35bff4>
    1028:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    102c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1030:	012e0b00 			@ <UNDEFINED> instruction: 0x012e0b00
    1034:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
    1038:	0b3b0b3a 	bleq	ec3d28 <__bss_end+0xe9e0f0>
    103c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1040:	01111349 	tsteq	r1, r9, asr #6
    1044:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1048:	1301197a 	movwne	r1, #6522	@ 0x197a
    104c:	050c0000 	streq	r0, [ip, #-0]
    1050:	3a0e0300 	bcc	381c58 <__bss_end+0x35c020>
    1054:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1058:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
    105c:	00000018 	andeq	r0, r0, r8, lsl r0
    1060:	0b002401 	bleq	a06c <_start-0x5f94>
    1064:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
    1068:	0200000e 	andeq	r0, r0, #14
    106c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1070:	3b01213a 	blcc	49560 <__bss_end+0x23928>
    1074:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1078:	b7170213 			@ <UNDEFINED> instruction: 0xb7170213
    107c:	00001742 	andeq	r1, r0, r2, asr #14
    1080:	0b000f03 	bleq	4c94 <_start-0xb36c>
    1084:	13490421 	movtne	r0, #37921	@ 0x9421
    1088:	05040000 	streq	r0, [r4, #-0]
    108c:	3a080300 	bcc	201c94 <__bss_end+0x1dc05c>
    1090:	0b3b0121 	bleq	ec151c <__bss_end+0xe9b8e4>
    1094:	13490b39 	movtne	r0, #39737	@ 0x9b39
    1098:	42b71702 	adcsmi	r1, r7, #524288	@ 0x80000
    109c:	05000017 	streq	r0, [r0, #-23]	@ 0xffffffe9
    10a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10a4:	3b01213a 	blcc	49594 <__bss_end+0x2395c>
    10a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    10ac:	b7170213 			@ <UNDEFINED> instruction: 0xb7170213
    10b0:	00001742 	andeq	r1, r0, r2, asr #14
    10b4:	25011106 	strcs	r1, [r1, #-262]	@ 0xfffffefa
    10b8:	030b130e 	movweq	r1, #45838	@ 0xb30e
    10bc:	110e1b0e 	tstne	lr, lr, lsl #22
    10c0:	10061201 	andne	r1, r6, r1, lsl #4
    10c4:	07000017 	smladeq	r0, r7, r0, r0
    10c8:	0b0b0024 	bleq	2c1160 <__bss_end+0x29b528>
    10cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    10d0:	16080000 	strne	r0, [r8], -r0
    10d4:	3a0e0300 	bcc	381cdc <__bss_end+0x35c0a4>
    10d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    10e0:	000f0900 	andeq	r0, pc, r0, lsl #18
    10e4:	00000b0b 	andeq	r0, r0, fp, lsl #22
    10e8:	3f012e0a 	svccc	0x00012e0a
    10ec:	3a0e0319 	bcc	381d58 <__bss_end+0x35c120>
    10f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10f4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    10f8:	12011113 	andne	r1, r1, #-1073741820	@ 0xc0000004
    10fc:	7a184006 	bvc	61111c <__bss_end+0x5eb4e4>
    1100:	00130119 	andseq	r0, r3, r9, lsl r1
    1104:	00050b00 	andeq	r0, r5, r0, lsl #22
    1108:	0b3a0803 	bleq	e8311c <__bss_end+0xe5d4e4>
    110c:	0b390b3b 	bleq	e43e00 <__bss_end+0xe1e1c8>
    1110:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1114:	01000000 	mrseq	r0, (UNDEF: 0)
    1118:	0b0b0024 	bleq	2c11b0 <__bss_end+0x29b578>
    111c:	0e030b3e 	vmoveq.16	d3[0], r0
    1120:	0f020000 	svceq	0x00020000
    1124:	04210b00 	strteq	r0, [r1], #-2816	@ 0xfffff500
    1128:	00001349 	andeq	r1, r0, r9, asr #6
    112c:	49002603 	stmdbmi	r0, {r0, r1, r9, sl, sp}
    1130:	04000013 	streq	r0, [r0], #-19	@ 0xffffffed
    1134:	13490037 	movtne	r0, #36919	@ 0x9037
    1138:	05050000 	streq	r0, [r5, #-0]
    113c:	3a0e0300 	bcc	381d44 <__bss_end+0x35c10c>
    1140:	0b3b0221 	bleq	ec19cc <__bss_end+0xe9bd94>
    1144:	13490b39 	movtne	r0, #39737	@ 0x9b39
    1148:	42b71702 	adcsmi	r1, r7, #524288	@ 0x80000
    114c:	06000017 			@ <UNDEFINED> instruction: 0x06000017
    1150:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1154:	3b02213a 	blcc	89644 <__bss_end+0x63a0c>
    1158:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    115c:	b7170213 			@ <UNDEFINED> instruction: 0xb7170213
    1160:	00001742 	andeq	r1, r0, r2, asr #14
    1164:	03003407 	movweq	r3, #1031	@ 0x407
    1168:	02213a0e 	eoreq	r3, r1, #57344	@ 0xe000
    116c:	0b390b3b 	bleq	e43e60 <__bss_end+0xe1e228>
    1170:	17021349 	strne	r1, [r2, -r9, asr #6]
    1174:	001742b7 			@ <UNDEFINED> instruction: 0x001742b7
    1178:	01110800 	tsteq	r1, r0, lsl #16
    117c:	0b130e25 	bleq	4c4a18 <__bss_end+0x49ede0>
    1180:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1184:	06120111 			@ <UNDEFINED> instruction: 0x06120111
    1188:	00001710 	andeq	r1, r0, r0, lsl r7
    118c:	0b002409 	bleq	a1b8 <_start-0x5e48>
    1190:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
    1194:	0a000008 	beq	11bc <_start-0xee44>
    1198:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    119c:	0b3b0b3a 	bleq	ec3e8c <__bss_end+0xe9e254>
    11a0:	13490b39 	movtne	r0, #39737	@ 0x9b39
    11a4:	0f0b0000 	svceq	0x000b0000
    11a8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    11ac:	00260c00 	eoreq	r0, r6, r0, lsl #24
    11b0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    11b4:	03193f01 	tsteq	r9, #1, 30
    11b8:	3b0b3a0e 	blcc	2cf9f8 <__bss_end+0x2a9dc0>
    11bc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    11c0:	11134919 	tstne	r3, r9, lsl r9
    11c4:	40061201 	andmi	r1, r6, r1, lsl #4
    11c8:	01197a18 	tsteq	r9, r8, lsl sl
    11cc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    11d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    11d4:	0b3b0b3a 	bleq	ec3ec4 <__bss_end+0xe9e28c>
    11d8:	13490b39 	movtne	r0, #39737	@ 0x9b39
    11dc:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00020000 	andeq	r0, r2, r0
  14:	00000348 	andeq	r0, r0, r8, asr #6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02700002 	rsbseq	r0, r0, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00020348 	andeq	r0, r2, r8, asr #6
  34:	000002a4 	andeq	r0, r0, r4, lsr #5
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03fb0002 	mvnseq	r0, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000205f4 	strdeq	r0, [r2], -r4
  54:	00000768 	andeq	r0, r0, r8, ror #14
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	091c0002 	ldmdbeq	ip, {r1}
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00020d5c 	andeq	r0, r2, ip, asr sp
  74:	0000029c 	muleq	r0, ip, r2
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0b9d0002 	bleq	fe740094 <_estack+0xf6720094>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00020ff8 	strdeq	r0, [r2], -r8
  94:	00000bb0 			@ <UNDEFINED> instruction: 0x00000bb0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	13e00002 	mvnne	r0, #2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00021ba8 	andeq	r1, r2, r8, lsr #23
  b4:	00001924 	andeq	r1, r0, r4, lsr #18
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	223d0002 	eorscs	r0, sp, #2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000234cc 	andeq	r3, r2, ip, asr #9
  d4:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	24f40002 	ldrbtcs	r0, [r4], #2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00023870 	andeq	r3, r2, r0, ror r8
  f4:	000005d8 	ldrdeq	r0, [r0], -r8
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	28d80002 	ldmcs	r8, {r1}^
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00023e48 	andeq	r3, r2, r8, asr #28
 114:	000004ac 	andeq	r0, r0, ip, lsr #9
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	2bbf0002 	blcs	fefc0134 <_estack+0xf6fa0134>
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	0002430c 	andeq	r4, r2, ip, lsl #6
 134:	00000210 	andeq	r0, r0, r0, lsl r2
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	2e100002 	cdpcs	0, 1, cr0, cr0, cr2, {0}
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	0002451c 	andeq	r4, r2, ip, lsl r5
 154:	000000d0 	ldrdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	2f5a0002 	svccs	0x005a0002
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	000245ec 	andeq	r4, r2, ip, ror #11
 174:	000000fc 	strdeq	r0, [r0], -ip
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	308f0002 	addcc	r0, pc, r2
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	000246e8 	andeq	r4, r2, r8, ror #13
 194:	00000114 	andeq	r0, r0, r4, lsl r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000224 	andeq	r0, r0, r4, lsr #4
       4:	01220003 			@ <UNDEFINED> instruction: 0x01220003
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
      20:	646d632f 	strbtvs	r6, [sp], #-815	@ 0xfffffcd1
      24:	482f6379 	stmdami	pc!, {r0, r3, r4, r5, r6, r8, r9, sp, lr}	@ <UNPREDICTABLE>
      28:	72617865 	rsbvc	r7, r1, #6619136	@ 0x650000
      2c:	732f6863 			@ <UNDEFINED> instruction: 0x732f6863
      30:	522f6372 	eorpl	r6, pc, #-939524095	@ 0xc8000001
      34:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
      38:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      3c:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
      40:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
      44:	2f534f54 	svccs	0x00534f54
      48:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
      4c:	534f5452 	movtpl	r5, #62546	@ 0xf452
      50:	756f532f 	strbvc	r5, [pc, #-815]!	@ fffffd29 <_estack+0xf7fdfd29>
      54:	2f656372 	svccs	0x00656372
      58:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
      5c:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
      60:	4343472f 	movtmi	r4, #14127	@ 0x372f
      64:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
      68:	72656270 	rsbvc	r6, r5, #112, 4
      6c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
      70:	6f682f00 	svcvs	0x00682f00
      74:	632f656d 			@ <UNDEFINED> instruction: 0x632f656d
      78:	6379646d 	cmnvs	r9, #1828716544	@ 0x6d000000
      7c:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
      80:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      84:	6372732f 	cmnvs	r2, #-1140850688	@ 0xbc000000
      88:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
      8c:	72656270 	rsbvc	r6, r5, #112, 4
      90:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
      94:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
      98:	4f545265 	svcmi	0x00545265
      9c:	72462f53 	subvc	r2, r6, #332	@ 0x14c
      a0:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
      a4:	532f534f 			@ <UNDEFINED> instruction: 0x532f534f
      a8:	6372756f 	cmnvs	r2, #465567744	@ 0x1bc00000
      ac:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
      b0:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
      b4:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	@ <UNPREDICTABLE>
      b8:	2f656d6f 	svccs	0x00656d6f
      bc:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
      c0:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
      c4:	63726178 	cmnvs	r2, #120, 2
      c8:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
      cc:	61522f63 	cmpvs	r2, r3, ror #30
      d0:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
      d4:	50797272 	rsbspl	r7, r9, r2, ror r2
      d8:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
      dc:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
      e0:	442f534f 	strtmi	r5, [pc], #-847	@ e8 <_start-0xff18>
      e4:	2f6f6d65 	svccs	0x006f6d65
      e8:	76697244 	strbtvc	r7, [r9], -r4, asr #4
      ec:	00737265 	rsbseq	r7, r3, r5, ror #4
      f0:	726f7000 	rsbvc	r7, pc, #0
      f4:	00632e74 	rsbeq	r2, r3, r4, ror lr
      f8:	70000001 	andvc	r0, r0, r1
      fc:	646a6f72 	strbtvs	r6, [sl], #-3954	@ 0xfffff08e
     100:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
     104:	00020068 	andeq	r0, r2, r8, rrx
     108:	726f7000 	rsbvc	r7, pc, #0
     10c:	63616d74 	cmnvs	r1, #116, 26	@ 0x1d00
     110:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     114:	00000100 	andeq	r0, r0, r0, lsl #2
     118:	2e717269 	cdpcs	2, 7, cr7, cr1, cr9, {3}
     11c:	00030068 	andeq	r0, r3, r8, rrx
     120:	73617400 	cmnvc	r1, #0, 8
     124:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     128:	00000002 	andeq	r0, r0, r2
     12c:	05000105 	streq	r0, [r0, #-261]	@ 0xfffffefb
     130:	02000002 	andeq	r0, r0, #2
     134:	00f70300 	rscseq	r0, r7, r0, lsl #6
     138:	bd100501 	cfldr32lt	mvfx0, [r0, #-4]
     13c:	054e0e05 	strbeq	r0, [lr, #-3589]	@ 0xfffff1fb
     140:	2c056e12 	stccs	14, cr6, [r5], {18}
     144:	2e10052e 	cfmul64cs	mvdx0, mvdx0, mvdx14
     148:	054b0e05 	strbeq	r0, [fp, #-3589]	@ 0xfffff1fb
     14c:	0e056810 	mcreq	8, 0, r6, cr5, cr0, {0}
     150:	67120567 	ldrvs	r0, [r2, -r7, ror #10]
     154:	052e1005 	streq	r1, [lr, #-5]!
     158:	10054b0e 	andne	r4, r5, lr, lsl #22
     15c:	670e0567 	strvs	r0, [lr, -r7, ror #10]
     160:	05671005 	strbeq	r1, [r7, #-5]!
     164:	1005670e 	andne	r6, r5, lr, lsl #14
     168:	670e0567 	strvs	r0, [lr, -r7, ror #10]
     16c:	05671005 	strbeq	r1, [r7, #-5]!
     170:	1005670e 	andne	r6, r5, lr, lsl #14
     174:	670e0567 	strvs	r0, [lr, -r7, ror #10]
     178:	05671005 	strbeq	r1, [r7, #-5]!
     17c:	1005670e 	andne	r6, r5, lr, lsl #14
     180:	670e0567 	strvs	r0, [lr, -r7, ror #10]
     184:	05671005 	strbeq	r1, [r7, #-5]!
     188:	1005670e 	andne	r6, r5, lr, lsl #14
     18c:	670e0567 	strvs	r0, [lr, -r7, ror #10]
     190:	05671005 	strbeq	r1, [r7, #-5]!
     194:	1005670e 	andne	r6, r5, lr, lsl #14
     198:	670e0567 	strvs	r0, [lr, -r7, ror #10]
     19c:	05671005 	strbeq	r1, [r7, #-5]!
     1a0:	1205670e 	andne	r6, r5, #3670016	@ 0x380000
     1a4:	2e10056a 	cfmsc32cs	mvfx0, mvfx0, mvfx10
     1a8:	054b0e05 	strbeq	r0, [fp, #-3589]	@ 0xfffff1fb
     1ac:	08056a10 	stmdaeq	r5, {r4, r9, fp, sp, lr}
     1b0:	2e210568 	cfsh64cs	mvdx0, mvdx1, #56
     1b4:	052e0405 	streq	r0, [lr, #-1029]!	@ 0xfffffbfb
     1b8:	11054d03 	tstne	r5, r3, lsl #26
     1bc:	690e054a 	stmdbvs	lr, {r1, r3, r6, r8, sl}
     1c0:	056c1005 	strbeq	r1, [ip, #-5]!
     1c4:	01056809 	tsteq	r5, r9, lsl #16
     1c8:	1622022f 	strtne	r0, [r2], -pc, lsr #4
     1cc:	314d0205 	cmpcc	sp, r5, lsl #4
     1d0:	05310905 	ldreq	r0, [r1, #-2309]!	@ 0xfffff6fb
     1d4:	4d4e2f01 	stclmi	15, cr2, [lr, #-4]
     1d8:	05820a03 	streq	r0, [r2, #2563]	@ 0xa03
     1dc:	05319f02 	ldreq	r9, [r1, #-3842]!	@ 0xfffff0fe
     1e0:	0d053107 	stfeqs	f3, [r5, #-28]	@ 0xffffffe4
     1e4:	4b01052e 	blmi	416a4 <__bss_end+0x1ba6c>
     1e8:	6b110588 	blvs	441810 <__bss_end+0x41bbd8>
     1ec:	0a030205 	beq	c0a08 <__bss_end+0x9add0>
     1f0:	3007054a 	andcc	r0, r7, sl, asr #10
     1f4:	052e0d05 	streq	r0, [lr, #-3333]!	@ 0xfffff2fb
     1f8:	1e054b07 	vmlane.f64	d4, d5, d7
     1fc:	4a0d052e 	bmi	3416bc <__bss_end+0x31ba84>
     200:	052f0705 	streq	r0, [pc, #-1797]!	@ fffffb03 <_estack+0xf7fdfb03>
     204:	0d052e1e 	stceq	14, cr2, [r5, #-120]	@ 0xffffff88
     208:	2f07054a 	svccs	0x0007054a
     20c:	052e0d05 	streq	r0, [lr, #-3333]!	@ 0xfffff2fb
     210:	0d054b07 	vstreq	d4, [r5, #-28]	@ 0xffffffe4
     214:	4b07052e 	blmi	1c16d4 <__bss_end+0x19ba9c>
     218:	052e0d05 	streq	r0, [lr, #-3333]!	@ 0xfffff2fb
     21c:	4c844c02 	stcmi	12, cr4, [r4], {2}
     220:	022f0105 	eoreq	r0, pc, #1073741825	@ 0x40000001
     224:	0101000c 	tsteq	r1, ip
     228:	000000e2 	andeq	r0, r0, r2, ror #1
     22c:	00760003 	rsbseq	r0, r6, r3
     230:	01020000 	mrseq	r0, (UNDEF: 2)
     234:	000d0efb 	strdeq	r0, [sp], -fp
     238:	01010101 	tsteq	r1, r1, lsl #2
     23c:	01000000 	mrseq	r0, (UNDEF: 0)
     240:	2f010000 	svccs	0x00010000
     244:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     248:	646d632f 	strbtvs	r6, [sp], #-815	@ 0xfffffcd1
     24c:	482f6379 	stmdami	pc!, {r0, r3, r4, r5, r6, r8, r9, sp, lr}	@ <UNPREDICTABLE>
     250:	72617865 	rsbvc	r7, r1, #6619136	@ 0x650000
     254:	732f6863 			@ <UNDEFINED> instruction: 0x732f6863
     258:	522f6372 	eorpl	r6, pc, #-939524095	@ 0xc8000001
     25c:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     260:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     264:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     268:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     26c:	2f534f54 	svccs	0x00534f54
     270:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     274:	534f5452 	movtpl	r5, #62546	@ 0xf452
     278:	756f532f 	strbvc	r5, [pc, #-815]!	@ ffffff51 <_estack+0xf7fdff51>
     27c:	2f656372 	svccs	0x00656372
     280:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
     284:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
     288:	4343472f 	movtmi	r4, #14127	@ 0x372f
     28c:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
     290:	72656270 	rsbvc	r6, r5, #112, 4
     294:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     298:	6f700000 	svcvs	0x00700000
     29c:	73697472 	cmnvc	r9, #1912602624	@ 0x72000000
     2a0:	00632e72 	rsbeq	r2, r3, r2, ror lr
     2a4:	00000001 	andeq	r0, r0, r1
     2a8:	05000105 	streq	r0, [r0, #-261]	@ 0xfffffefb
     2ac:	02034802 	andeq	r4, r3, #131072	@ 0x20000
     2b0:	00f50300 	rscseq	r0, r5, r0, lsl #6
     2b4:	520c0501 	andpl	r0, ip, #4194304	@ 0x400000
     2b8:	2fa00205 	svccs	0x00a00205
     2bc:	2402342f 	strcs	r3, [r2], #-1071	@ 0xfffffbd1
     2c0:	6c010513 	cfstr32vs	mvfx0, [r1], {19}
     2c4:	05d60e03 	ldrbeq	r0, [r6, #3587]	@ 0xe03
     2c8:	02311602 	eorseq	r1, r1, #2097152	@ 0x200000
     2cc:	0531152c 	ldreq	r1, [r1, #-1324]!	@ 0xfffffad4
     2d0:	13240201 			@ <UNDEFINED> instruction: 0x13240201
     2d4:	16031c05 	strne	r1, [r3], -r5, lsl #24
     2d8:	13020566 	movwne	r0, #9574	@ 0x2566
     2dc:	2f132c02 	svccs	0x00132c02
     2e0:	24020105 	strcs	r0, [r2], #-261	@ 0xfffffefb
     2e4:	662a0313 			@ <UNDEFINED> instruction: 0x662a0313
     2e8:	054c0205 	strbeq	r0, [ip, #-517]	@ 0xfffffdfb
     2ec:	9e0a0313 	mcrls	3, 0, r0, cr10, cr3, {0}
     2f0:	a19f0105 	orrsge	r0, pc, r5, lsl #2
     2f4:	054b1805 	strbeq	r1, [fp, #-2053]	@ 0xfffff7fb
     2f8:	14054a04 	strne	r4, [r5], #-2564	@ 0xfffff5fc
     2fc:	a219054d 	andsge	r0, r9, #322961408	@ 0x13400000
     300:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
     304:	01054d04 	tsteq	r5, r4, lsl #26
     308:	000e02a6 	andeq	r0, lr, r6, lsr #5
     30c:	03230101 			@ <UNDEFINED> instruction: 0x03230101
     310:	00030000 	andeq	r0, r3, r0
     314:	0000016e 	andeq	r0, r0, lr, ror #2
     318:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     31c:	0101000d 	tsteq	r1, sp
     320:	00000101 	andeq	r0, r0, r1, lsl #2
     324:	00000100 	andeq	r0, r0, r0, lsl #2
     328:	6f682f01 	svcvs	0x00682f01
     32c:	632f656d 			@ <UNDEFINED> instruction: 0x632f656d
     330:	6379646d 	cmnvs	r9, #1828716544	@ 0x6d000000
     334:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     338:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     33c:	6372732f 	cmnvs	r2, #-1140850688	@ 0xbc000000
     340:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
     344:	72656270 	rsbvc	r6, r5, #112, 4
     348:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     34c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
     350:	4f545265 	svcmi	0x00545265
     354:	72462f53 	subvc	r2, r6, #332	@ 0x14c
     358:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     35c:	532f534f 			@ <UNDEFINED> instruction: 0x532f534f
     360:	6372756f 	cmnvs	r2, #465567744	@ 0x1bc00000
     364:	752f0065 	strvc	r0, [pc, #-101]!	@ 307 <_start-0xfcf9>
     368:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	@ 1a4 <_start-0xfe5c>
     36c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     370:	612f6363 			@ <UNDEFINED> instruction: 0x612f6363
     374:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     378:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	@ 0xfffffe44
     37c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     380:	2e33312f 	rsfcssp	f3, f3, #10.0
     384:	2f312e32 	svccs	0x00312e32
     388:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
     38c:	00656475 	rsbeq	r6, r5, r5, ror r4
     390:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ 2dc <_start-0xfd24>
     394:	6d632f65 	stclvs	15, cr2, [r3, #-404]!	@ 0xfffffe6c
     398:	2f637964 	svccs	0x00637964
     39c:	61786548 	cmnvs	r8, r8, asr #10
     3a0:	2f686372 	svccs	0x00686372
     3a4:	2f637273 	svccs	0x00637273
     3a8:	70736152 	rsbsvc	r6, r3, r2, asr r1
     3ac:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     3b0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
     3b4:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     3b8:	534f5452 	movtpl	r5, #62546	@ 0xf452
     3bc:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
     3c0:	4f545265 	svcmi	0x00545265
     3c4:	6f532f53 	svcvs	0x00532f53
     3c8:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
     3cc:	726f702f 	rsbvc	r7, pc, #47	@ 0x2f
     3d0:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
     3d4:	43472f65 	movtmi	r2, #32613	@ 0x7f65
     3d8:	61522f43 	cmpvs	r2, r3, asr #30
     3dc:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     3e0:	50797272 	rsbspl	r7, r9, r2, ror r2
     3e4:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	@ <UNPREDICTABLE>
     3e8:	2f656d6f 	svccs	0x00656d6f
     3ec:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     3f0:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
     3f4:	63726178 	cmnvs	r2, #120, 2
     3f8:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
     3fc:	61522f63 	cmpvs	r2, r3, ror #30
     400:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     404:	50797272 	rsbspl	r7, r9, r2, ror r2
     408:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     40c:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     410:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     414:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     418:	2f534f54 	svccs	0x00534f54
     41c:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     420:	692f6563 	stmdbvs	pc!, {r0, r1, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
     424:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
     428:	00006564 	andeq	r6, r0, r4, ror #10
     42c:	756f7263 	strbvc	r7, [pc, #-611]!	@ 1d1 <_start-0xfe2f>
     430:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     434:	0100632e 	tsteq	r0, lr, lsr #6
     438:	74730000 	ldrbtvc	r0, [r3], #-0
     43c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     440:	0200682e 	andeq	r6, r0, #3014656	@ 0x2e0000
     444:	6f700000 	svcvs	0x00700000
     448:	616d7472 	smcvs	55106	@ 0xd742
     44c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     450:	00030068 	andeq	r0, r3, r8, rrx
     454:	73696c00 	cmnvc	r9, #0, 24
     458:	00682e74 	rsbeq	r2, r8, r4, ror lr
     45c:	63000004 	movwvs	r0, #4
     460:	74756f72 	ldrbtvc	r6, [r5], #-3954	@ 0xfffff08e
     464:	2e656e69 	cdpcs	14, 6, cr6, cr5, cr9, {3}
     468:	00040068 	andeq	r0, r4, r8, rrx
     46c:	73617400 	cmnvc	r1, #0, 8
     470:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     474:	70000004 	andvc	r0, r0, r4
     478:	6174726f 	cmnvs	r4, pc, ror #4
     47c:	2e656c62 	cdpcs	12, 6, cr6, cr5, cr2, {3}
     480:	00040068 	andeq	r0, r4, r8, rrx
     484:	01050000 	mrseq	r0, (UNDEF: 5)
     488:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     48c:	03000205 	movweq	r0, #517	@ 0x205
     490:	0501018a 	streq	r0, [r1, #-394]	@ 0xfffffe76
     494:	0405bf1e 	streq	fp, [r5], #-3870	@ 0xfffff0e2
     498:	6a1a0567 	bvs	681a3c <__bss_end+0x65be04>
     49c:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
     4a0:	04054c17 	streq	r4, [r5], #-3095	@ 0xfffff3e9
     4a4:	32050567 	andcc	r0, r5, #432013312	@ 0x19c00000
     4a8:	05680f05 	strbeq	r0, [r8, #-3845]!	@ 0xfffff0fb
     4ac:	1b054e18 	blne	153d14 <__bss_end+0x12e0dc>
     4b0:	67180567 	ldrvs	r0, [r8, -r7, ror #10]
     4b4:	05672405 	strbeq	r2, [r7, #-1029]!	@ 0xfffffbfb
     4b8:	87836903 	strhi	r6, [r3, r3, lsl #18]
     4bc:	00866967 	addeq	r6, r6, r7, ror #18
     4c0:	06010402 	streq	r0, [r1], -r2, lsl #8
     4c4:	040200ba 	streq	r0, [r2], #-186	@ 0xffffff46
     4c8:	0b058203 	bleq	160cdc <__bss_end+0x13b0a4>
     4cc:	6a920806 	bvs	fe4824ec <_estack+0xf64624ec>
     4d0:	054d0905 	strbeq	r0, [sp, #-2309]	@ 0xfffff6fb
     4d4:	05be2f01 	ldreq	r2, [lr, #3841]!	@ 0xf01
     4d8:	0e05a324 	cdpeq	3, 0, cr10, cr5, cr4, {1}
     4dc:	6b34054a 	blvs	d01a0c <__bss_end+0xcdbdd4>
     4e0:	694a0205 	stmdbvs	sl, {r0, r2, r9}^
     4e4:	05841205 	streq	r1, [r4, #517]	@ 0x205
     4e8:	03054a04 	movweq	r4, #23044	@ 0x5a04
     4ec:	4a61056a 	bmi	1841a9c <__bss_end+0x181be64>
     4f0:	a44a0305 	strbge	r0, [sl], #-773	@ 0xfffffcfb
     4f4:	054a5905 	strbeq	r5, [sl, #-2309]	@ 0xfffff6fb
     4f8:	04054a03 	streq	r4, [r5], #-2563	@ 0xfffff5fd
     4fc:	6a320585 	bvs	c81b18 <__bss_end+0xc5bee0>
     500:	054a0305 	strbeq	r0, [sl, #-773]	@ 0xfffffcfb
     504:	05da8401 	ldrbeq	r8, [sl, #1025]	@ 0x401
     508:	03056a07 	movweq	r6, #23047	@ 0x5a07
     50c:	a0240533 	eorge	r0, r4, r3, lsr r5
     510:	054a1405 	strbeq	r1, [sl, #-1029]	@ 0xfffffbfb
     514:	03054b04 	movweq	r4, #23300	@ 0x5b04
     518:	0083a084 	addeq	sl, r3, r4, lsl #1
     51c:	06010402 	streq	r0, [r1], -r2, lsl #8
     520:	040200ba 	streq	r0, [r2], #-186	@ 0xffffff46
     524:	09058203 	stmdbeq	r5, {r0, r1, r9, pc}
     528:	08730306 	ldmdaeq	r3!, {r1, r2, r8, r9}^
     52c:	4a3a0590 	bmi	e81b74 <__bss_end+0xe5bf3c>
     530:	0f030105 	svceq	0x00030105
     534:	1105da4a 	tstne	r5, sl, asr #20
     538:	00250569 	eoreq	r0, r5, r9, ror #10
     53c:	4a010402 	bmi	4154c <__bss_end+0x1b914>
     540:	02000f05 	andeq	r0, r0, #5, 30
     544:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
     548:	16054b07 	strne	r4, [r5], -r7, lsl #22
     54c:	9f0f0530 	svcls	0x000f0530
     550:	05a11b05 	streq	r1, [r1, #2821]!	@ 0xb05
     554:	0b054a05 	bleq	152d70 <__bss_end+0x12d138>
     558:	671b0550 			@ <UNDEFINED> instruction: 0x671b0550
     55c:	05832305 	streq	r2, [r3, #773]	@ 0x305
     560:	1b056a08 	blne	15ad88 <__bss_end+0x135150>
     564:	660b0530 			@ <UNDEFINED> instruction: 0x660b0530
     568:	054c1e05 	strbeq	r1, [ip, #-3589]	@ 0xfffff1fb
     56c:	06054a1c 			@ <UNDEFINED> instruction: 0x06054a1c
     570:	5004054a 	andpl	r0, r4, sl, asr #10
     574:	05a50505 	streq	r0, [r5, #1285]!	@ 0x505
     578:	0705851f 	smladeq	r5, pc, r5, r8	@ <UNPREDICTABLE>
     57c:	4c06054a 	cfstr32mi	mvfx0, [r6], {74}	@ 0x4a
     580:	a0850405 	addge	r0, r5, r5, lsl #8
     584:	01040200 	mrseq	r0, R12_usr
     588:	0200ba06 	andeq	fp, r0, #24576	@ 0x6000
     58c:	05820304 	streq	r0, [r2, #772]	@ 0x304
     590:	6503060a 	strvs	r0, [r3, #-1546]	@ 0xfffff9f6
     594:	36059008 	strcc	r9, [r5], -r8
     598:	6d050566 	cfstr32vs	mvfx0, [r5, #-408]	@ 0xfffffe68
     59c:	67030905 	strvs	r0, [r3, -r5, lsl #18]
     5a0:	0311052e 	tsteq	r1, #192937984	@ 0xb800000
     5a4:	01058231 	tsteq	r5, r1, lsr r2
     5a8:	05400883 	strbeq	r0, [r0, #-2179]	@ 0xfffff77d
     5ac:	05316802 	ldreq	r6, [r1, #-2050]!	@ 0xfffff7fe
     5b0:	23053107 	movwcs	r3, #20743	@ 0x5107
     5b4:	4a050530 	bmi	141a7c <__bss_end+0x11be44>
     5b8:	054f0305 	strbeq	r0, [pc, #-773]	@ 2bb <_start-0xfd45>
     5bc:	9e790309 	cdpls	3, 7, cr0, cr9, cr9, {0}
     5c0:	0c030205 	sfmeq	f0, 4, [r3], {5}
     5c4:	02005808 	andeq	r5, r0, #8, 16	@ 0x80000
     5c8:	02060104 	andeq	r0, r6, #4, 2
     5cc:	02001228 	andeq	r1, r0, #40, 4	@ 0x80000002
     5d0:	059e0304 	ldreq	r0, [lr, #772]	@ 0x304
     5d4:	05a10616 	streq	r0, [r1, #1558]!	@ 0x616
     5d8:	16059e55 			@ <UNDEFINED> instruction: 0x16059e55
     5dc:	6802054a 	stmdavs	r2, {r1, r3, r6, r8, sl}
     5e0:	74030405 	strvc	r0, [r3], #-1029	@ 0xfffffbfb
     5e4:	0301052e 	movweq	r0, #5422	@ 0x152e
     5e8:	05a22e0d 	streq	r2, [r2, #3597]!	@ 0xe0d
     5ec:	02056912 	andeq	r6, r5, #294912	@ 0x48000
     5f0:	3003054a 	andcc	r0, r3, sl, asr #10
     5f4:	02004f05 	andeq	r4, r0, #5, 30
     5f8:	1e080304 	cdpne	3, 0, cr0, cr8, cr4, {0}
     5fc:	02002205 	andeq	r2, r0, #1342177280	@ 0x50000000
     600:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
     604:	4b4b6b02 	blmi	12db214 <__bss_end+0x12b55dc>
     608:	054e1905 	strbeq	r1, [lr, #-2309]	@ 0xfffff6fb
     60c:	01056721 	tsteq	r5, r1, lsr #14
     610:	05240867 	streq	r0, [r4, #-2151]!	@ 0xfffff799
     614:	12058922 	andne	r8, r5, #557056	@ 0x88000
     618:	4b02054a 	blmi	81b48 <__bss_end+0x5bf10>
     61c:	a0150583 	andsge	r0, r5, r3, lsl #11
     620:	054a3705 	strbeq	r3, [sl, #-1797]	@ 0xfffff8fb
     624:	0b056604 	bleq	159e3c <__bss_end+0x134204>
     628:	09056a4c 	stmdbeq	r5, {r2, r3, r6, r9, fp, sp, lr}
     62c:	2f01054d 	svccs	0x0001054d
     630:	01000a02 	tsteq	r0, r2, lsl #20
     634:	0001ea01 	andeq	lr, r1, r1, lsl #20
     638:	0e000300 	cdpeq	3, 0, cr0, cr0, cr0, {0}
     63c:	02000001 	andeq	r0, r0, #1
     640:	0d0efb01 	vstreq	d15, [lr, #-4]
     644:	01010100 	mrseq	r0, (UNDEF: 17)
     648:	00000001 	andeq	r0, r0, r1
     64c:	01000001 	tsteq	r0, r1
     650:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ 59c <_start-0xfa64>
     654:	6d632f65 	stclvs	15, cr2, [r3, #-404]!	@ 0xfffffe6c
     658:	2f637964 	svccs	0x00637964
     65c:	61786548 	cmnvs	r8, r8, asr #10
     660:	2f686372 	svccs	0x00686372
     664:	2f637273 	svccs	0x00637273
     668:	70736152 	rsbsvc	r6, r3, r2, asr r1
     66c:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     670:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
     674:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     678:	534f5452 	movtpl	r5, #62546	@ 0xf452
     67c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
     680:	4f545265 	svcmi	0x00545265
     684:	6f532f53 	svcvs	0x00532f53
     688:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
     68c:	6f682f00 	svcvs	0x00682f00
     690:	632f656d 			@ <UNDEFINED> instruction: 0x632f656d
     694:	6379646d 	cmnvs	r9, #1828716544	@ 0x6d000000
     698:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     69c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     6a0:	6372732f 	cmnvs	r2, #-1140850688	@ 0xbc000000
     6a4:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
     6a8:	72656270 	rsbvc	r6, r5, #112, 4
     6ac:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     6b0:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
     6b4:	4f545265 	svcmi	0x00545265
     6b8:	72462f53 	subvc	r2, r6, #332	@ 0x14c
     6bc:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     6c0:	532f534f 			@ <UNDEFINED> instruction: 0x532f534f
     6c4:	6372756f 	cmnvs	r2, #465567744	@ 0x1bc00000
     6c8:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     6cc:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
     6d0:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	@ <UNPREDICTABLE>
     6d4:	2f656d6f 	svccs	0x00656d6f
     6d8:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     6dc:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
     6e0:	63726178 	cmnvs	r2, #120, 2
     6e4:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
     6e8:	61522f63 	cmpvs	r2, r3, ror #30
     6ec:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     6f0:	50797272 	rsbspl	r7, r9, r2, ror r2
     6f4:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     6f8:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     6fc:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     700:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     704:	2f534f54 	svccs	0x00534f54
     708:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     70c:	702f6563 	eorvc	r6, pc, r3, ror #10
     710:	6174726f 	cmnvs	r4, pc, ror #4
     714:	2f656c62 	svccs	0x00656c62
     718:	2f434347 	svccs	0x00434347
     71c:	70736152 	rsbsvc	r6, r3, r2, asr r1
     720:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     724:	00695079 	rsbeq	r5, r9, r9, ror r0
     728:	73696c00 	cmnvc	r9, #0, 24
     72c:	00632e74 	rsbeq	r2, r3, r4, ror lr
     730:	6c000001 	stcvs	0, cr0, [r0], {1}
     734:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     738:	00020068 	andeq	r0, r2, r8, rrx
     73c:	726f7000 	rsbvc	r7, pc, #0
     740:	63616d74 	cmnvs	r1, #116, 26	@ 0x1d00
     744:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     748:	00000300 	andeq	r0, r0, r0, lsl #6
     74c:	00010500 	andeq	r0, r1, r0, lsl #10
     750:	0d5c0205 	lfmeq	f0, 2, [ip, #-20]	@ 0xffffffec
     754:	cc030002 	stcgt	0, cr0, [r3], {2}
     758:	24050100 	strcs	r0, [r5], #-256	@ 0xffffff00
     75c:	4a120586 	bmi	481d7c <__bss_end+0x45c144>
     760:	054e1e05 	strbeq	r1, [lr, #-3589]	@ 0xfffff1fb
     764:	1a056a2c 	bne	15b01c <__bss_end+0x1353e4>
     768:	4b30054a 	blmi	c01c98 <__bss_end+0xbdc060>
     76c:	054a1e05 	strbeq	r1, [sl, #-3589]	@ 0xfffff1fb
     770:	01054c1a 	tsteq	r5, sl, lsl ip
     774:	16058667 	strne	r8, [r5], -r7, ror #12
     778:	67010584 	strvs	r0, [r1, -r4, lsl #11]
     77c:	a50a0586 	strge	r0, [sl, #-1414]	@ 0xfffffa7a
     780:	05682105 	strbeq	r2, [r8, #-261]!	@ 0xfffffefb
     784:	24054a18 	strcs	r4, [r5], #-2584	@ 0xfffff5e8
     788:	4a1c054b 	bmi	701cbc <__bss_end+0x6dc084>
     78c:	054b0905 	strbeq	r0, [fp, #-2309]	@ 0xfffff6fb
     790:	12054a1e 	andne	r4, r5, #122880	@ 0x1e000
     794:	1d05674b 	stcne	7, cr6, [r5, #-300]	@ 0xfffffed4
     798:	680a0569 	stmdavs	sl, {r0, r3, r5, r6, r8, sl}
     79c:	054a1d05 	strbeq	r1, [sl, #-3333]	@ 0xfffff2fb
     7a0:	05866701 	streq	r6, [r6, #1793]	@ 0x701
     7a4:	0405a314 	streq	sl, [r5], #-788	@ 0xfffffcec
     7a8:	05660903 	strbeq	r0, [r6, #-2307]!	@ 0xfffff6fd
     7ac:	1305680e 	movwne	r6, #22542	@ 0x580e
     7b0:	05821403 	streq	r1, [r2, #1027]	@ 0x403
     7b4:	7c056603 	stcvc	6, cr6, [r5], {3}
     7b8:	03040200 	movweq	r0, #16896	@ 0x4200
     7bc:	0046052e 	subeq	r0, r6, lr, lsr #10
     7c0:	66010402 	strvs	r0, [r1], -r2, lsl #8
     7c4:	02004e05 	andeq	r4, r0, #5, 28	@ 0x50
     7c8:	054a0104 	strbeq	r0, [sl, #-260]	@ 0xfffffefc
     7cc:	0402005b 	streq	r0, [r2], #-91	@ 0xffffffa5
     7d0:	24052e01 	strcs	r2, [r5], #-3585	@ 0xfffff1ff
     7d4:	4a18056d 	bmi	601d90 <__bss_end+0x5dc158>
     7d8:	054b0f05 	strbeq	r0, [fp, #-3845]	@ 0xfffff0fb
     7dc:	1c054a24 			@ <UNDEFINED> instruction: 0x1c054a24
     7e0:	6715054b 	ldrvs	r0, [r5, -fp, asr #10]
     7e4:	056a1d05 	strbeq	r1, [sl, #-3333]!	@ 0xfffff2fb
     7e8:	1d05680a 	stcne	8, cr6, [r5, #-40]	@ 0xffffffd8
     7ec:	6701054a 	strvs	r0, [r1, -sl, asr #10]
     7f0:	85100586 	ldrhi	r0, [r0, #-1414]	@ 0xfffffa7a
     7f4:	054a3505 	strbeq	r3, [sl, #-1285]	@ 0xfffffafb
     7f8:	10054a25 	andne	r4, r5, r5, lsr #20
     7fc:	4a35052f 	bmi	d41cc0 <__bss_end+0xd1c088>
     800:	054a2505 	strbeq	r2, [sl, #-1285]	@ 0xfffffafb
     804:	0c053209 	sfmeq	f3, 4, [r5], {9}
     808:	4a040569 	bmi	101db4 <__bss_end+0xdc17c>
     80c:	05682305 	strbeq	r2, [r8, #-773]!	@ 0xfffffcfb
     810:	1e054a13 			@ <UNDEFINED> instruction: 0x1e054a13
     814:	670a054d 	strvs	r0, [sl, -sp, asr #10]
     818:	054a1d05 	strbeq	r1, [sl, #-3333]	@ 0xfffff2fb
     81c:	08026701 	stmdaeq	r2, {r0, r8, r9, sl, sp, lr}
     820:	7e010100 	adfvcs	f0, f1, f0
     824:	03000005 	movweq	r0, #5
     828:	00017d00 	andeq	r7, r1, r0, lsl #26
     82c:	fb010200 	blx	41036 <__bss_end+0x1b3fe>
     830:	01000d0e 	tsteq	r0, lr, lsl #26
     834:	00010101 	andeq	r0, r1, r1, lsl #2
     838:	00010000 	andeq	r0, r1, r0
     83c:	682f0100 	stmdavs	pc!, {r8}	@ <UNPREDICTABLE>
     840:	2f656d6f 	svccs	0x00656d6f
     844:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     848:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
     84c:	63726178 	cmnvs	r2, #120, 2
     850:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
     854:	61522f63 	cmpvs	r2, r3, ror #30
     858:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     85c:	50797272 	rsbspl	r7, r9, r2, ror r2
     860:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     864:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     868:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     86c:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     870:	2f534f54 	svccs	0x00534f54
     874:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     878:	2f006563 	svccs	0x00006563
     87c:	2f727375 	svccs	0x00727375
     880:	2f62696c 	svccs	0x0062696c
     884:	2f636367 	svccs	0x00636367
     888:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	@ 0xfffffe7c
     88c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	@ 0xfffff092
     890:	6261652d 	rsbvs	r6, r1, #188743680	@ 0xb400000
     894:	33312f69 	teqcc	r1, #420	@ 0x1a4
     898:	312e322e 			@ <UNDEFINED> instruction: 0x312e322e
     89c:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
     8a0:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
     8a4:	6f682f00 	svcvs	0x00682f00
     8a8:	632f656d 			@ <UNDEFINED> instruction: 0x632f656d
     8ac:	6379646d 	cmnvs	r9, #1828716544	@ 0x6d000000
     8b0:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     8b4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     8b8:	6372732f 	cmnvs	r2, #-1140850688	@ 0xbc000000
     8bc:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
     8c0:	72656270 	rsbvc	r6, r5, #112, 4
     8c4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     8c8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
     8cc:	4f545265 	svcmi	0x00545265
     8d0:	72462f53 	subvc	r2, r6, #332	@ 0x14c
     8d4:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     8d8:	532f534f 			@ <UNDEFINED> instruction: 0x532f534f
     8dc:	6372756f 	cmnvs	r2, #465567744	@ 0x1bc00000
     8e0:	6f702f65 	svcvs	0x00702f65
     8e4:	62617472 	rsbvs	r7, r1, #1912602624	@ 0x72000000
     8e8:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     8ec:	522f4343 	eorpl	r4, pc, #201326593	@ 0xc000001
     8f0:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     8f4:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     8f8:	2f006950 	svccs	0x00006950
     8fc:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     900:	646d632f 	strbtvs	r6, [sp], #-815	@ 0xfffffcd1
     904:	482f6379 	stmdami	pc!, {r0, r3, r4, r5, r6, r8, r9, sp, lr}	@ <UNPREDICTABLE>
     908:	72617865 	rsbvc	r7, r1, #6619136	@ 0x650000
     90c:	732f6863 			@ <UNDEFINED> instruction: 0x732f6863
     910:	522f6372 	eorpl	r6, pc, #-939524095	@ 0xc8000001
     914:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     918:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     91c:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     920:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     924:	2f534f54 	svccs	0x00534f54
     928:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     92c:	534f5452 	movtpl	r5, #62546	@ 0xf452
     930:	756f532f 	strbvc	r5, [pc, #-815]!	@ 609 <_start-0xf9f7>
     934:	2f656372 	svccs	0x00656372
     938:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
     93c:	00656475 	rsbeq	r6, r5, r5, ror r4
     940:	7273752f 	rsbsvc	r7, r3, #197132288	@ 0xbc00000
     944:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
     948:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
     94c:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     950:	0062696c 	rsbeq	r6, r2, ip, ror #18
     954:	65757100 	ldrbvs	r7, [r5, #-256]!	@ 0xffffff00
     958:	632e6575 			@ <UNDEFINED> instruction: 0x632e6575
     95c:	00000100 	andeq	r0, r0, r0, lsl #2
     960:	64647473 	strbtvs	r7, [r4], #-1139	@ 0xfffffb8d
     964:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     968:	00000200 	andeq	r0, r0, r0, lsl #4
     96c:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
     970:	7263616d 	rsbvc	r6, r3, #1073741851	@ 0x4000001b
     974:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     978:	6c000003 	stcvs	0, cr0, [r0], {3}
     97c:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     980:	00040068 	andeq	r0, r4, r8, rrx
     984:	73617400 	cmnvc	r1, #0, 8
     988:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     98c:	73000004 	movwvc	r0, #4
     990:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     994:	00682e67 	rsbeq	r2, r8, r7, ror #28
     998:	70000005 	andvc	r0, r0, r5
     99c:	6174726f 	cmnvs	r4, pc, ror #4
     9a0:	2e656c62 	cdpcs	12, 6, cr6, cr5, cr2, {3}
     9a4:	00040068 	andeq	r0, r4, r8, rrx
     9a8:	01050000 	mrseq	r0, (UNDEF: 5)
     9ac:	f8020500 			@ <UNDEFINED> instruction: 0xf8020500
     9b0:	0300020f 	movweq	r0, #527	@ 0x20f
     9b4:	05010297 	streq	r0, [r1, #-663]	@ 0xfffffd69
     9b8:	1c05a102 	stfned	f2, [r5], {2}
     9bc:	4a300530 	bmi	c01e84 <__bss_end+0xbdc24c>
     9c0:	054a4405 	strbeq	r4, [sl, #-1029]	@ 0xfffffbfb
     9c4:	25054a3b 	strcs	r4, [r5, #-2619]	@ 0xfffff5c5
     9c8:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
     9cc:	054b1e05 	strbeq	r1, [fp, #-3589]	@ 0xfffff1fb
     9d0:	1605671f 			@ <UNDEFINED> instruction: 0x1605671f
     9d4:	4b20054a 	blmi	801f04 <__bss_end+0x7dc2cc>
     9d8:	054a3605 	strbeq	r3, [sl, #-1541]	@ 0xfffff9fb
     9dc:	6c054a41 			@ <UNDEFINED> instruction: 0x6c054a41
     9e0:	4a63052e 	bmi	18c1ea0 <__bss_end+0x189c268>
     9e4:	052e2905 	streq	r2, [lr, #-2309]!	@ 0xfffff6fb
     9e8:	14052e17 	strne	r2, [r5], #-3607	@ 0xfffff1e9
     9ec:	0505674b 	streq	r6, [r5, #-1867]	@ 0xfffff8b5
     9f0:	6d080568 	cfstr32vs	mvfx0, [r8, #-416]	@ 0xfffffe60
     9f4:	054a0605 	strbeq	r0, [sl, #-1541]	@ 0xfffff9fb
     9f8:	09054c23 	stmdbeq	r5, {r0, r1, r5, sl, fp, lr}
     9fc:	0007054a 	andeq	r0, r7, sl, asr #10
     a00:	66010402 	strvs	r0, [r1], -r2, lsl #8
     a04:	054c0605 	strbeq	r0, [ip, #-1541]	@ 0xfffff9fb
     a08:	05835104 	streq	r5, [r3, #260]	@ 0x104
     a0c:	09058502 	stmdbeq	r5, {r1, r8, sl, pc}
     a10:	2f010532 	svccs	0x00010532
     a14:	d90e056a 	stmdble	lr, {r1, r3, r5, r6, r8, sl}
     a18:	05510405 	ldrbeq	r0, [r1, #-1029]	@ 0xfffffbfb
     a1c:	0505681d 	streq	r6, [r5, #-2077]	@ 0xfffff7e3
     a20:	6a330567 	bvs	cc1fc4 <__bss_end+0xc9c38c>
     a24:	05661605 	strbeq	r1, [r6, #-1541]!	@ 0xfffff9fb
     a28:	17054c2b 	strne	r4, [r5, -fp, lsr #24]
     a2c:	01040200 	mrseq	r0, R12_usr
     a30:	4b120566 	blmi	481fd0 <__bss_end+0x45c398>
     a34:	054a0605 	strbeq	r0, [sl, #-1541]	@ 0xfffff9fb
     a38:	1c054e1a 	stcne	14, cr4, [r5], {26}
     a3c:	67050567 	strvs	r0, [r5, -r7, ror #10]
     a40:	056e0d05 	strbeq	r0, [lr, #-3333]!	@ 0xfffff2fb
     a44:	09056b05 	stmdbeq	r5, {r0, r2, r8, r9, fp, sp, lr}
     a48:	2f010551 	svccs	0x00010551
     a4c:	6601d003 	strvs	sp, [r1], -r3
     a50:	05d71605 	ldrbeq	r1, [r7, #1541]	@ 0x605
     a54:	4a0b0303 	bmi	2c1668 <__bss_end+0x29ba30>
     a58:	05320f05 	ldreq	r0, [r2, #-3845]!	@ 0xfffff0fb
     a5c:	06054a2c 	streq	r4, [r5], -ip, lsr #20
     a60:	4d05054a 	cfstr32mi	mvfx0, [r5, #-296]	@ 0xfffffed8
     a64:	05860905 	streq	r0, [r6, #2309]	@ 0x905
     a68:	24054a07 	strcs	r4, [r5], #-2567	@ 0xfffff5f9
     a6c:	4a0a054c 	bmi	281fa4 <__bss_end+0x25c36c>
     a70:	02000805 	andeq	r0, r0, #327680	@ 0x50000
     a74:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
     a78:	05055007 	streq	r5, [r5, #-7]
     a7c:	320c0532 	andcc	r0, ip, #209715200	@ 0xc800000
     a80:	054e1605 	strbeq	r1, [lr, #-1541]	@ 0xfffff9fb
     a84:	06052e07 	streq	r2, [r5], -r7, lsl #28
     a88:	330d054e 	movwcc	r0, #54606	@ 0xd54e
     a8c:	054c0c05 	strbeq	r0, [ip, #-3077]	@ 0xfffff3fb
     a90:	14056a06 	strne	r6, [r5], #-2566	@ 0xfffff5fa
     a94:	4e030567 	cfsh32mi	mvfx0, mvfx3, #55
     a98:	02002f33 	andeq	r2, r0, #51, 30	@ 0xcc
     a9c:	2e060104 	adfcss	f0, f6, f4
     aa0:	03040200 	movweq	r0, #16896	@ 0x4200
     aa4:	040200d6 	streq	r0, [r2], #-214	@ 0xffffff2a
     aa8:	02008204 	andeq	r8, r0, #4, 4	@ 0x40000000
     aac:	05660604 	strbeq	r0, [r6, #-1540]!	@ 0xfffff9fc
     ab0:	05310607 	ldreq	r0, [r1, #-1543]!	@ 0xfffff9f9
     ab4:	04020005 	streq	r0, [r2], #-5
     ab8:	0805ba01 	stmdaeq	r5, {r0, r9, fp, ip, sp, pc}
     abc:	0006054c 	andeq	r0, r6, ip, asr #10
     ac0:	66010402 	strvs	r0, [r1], -r2, lsl #8
     ac4:	054d1c05 	strbeq	r1, [sp, #-3077]	@ 0xfffff3fb
     ac8:	05894a05 	streq	r4, [r9, #2565]	@ 0xa05
     acc:	07055109 	streq	r5, [r5, -r9, lsl #2]
     ad0:	01040200 	mrseq	r0, R12_usr
     ad4:	4c06054a 	cfstr32mi	mvfx0, [r6], {74}	@ 0x4a
     ad8:	05500505 	ldrbeq	r0, [r0, #-1285]	@ 0xfffffafb
     adc:	04054b0e 	streq	r4, [r5], #-2830	@ 0xfffff4f2
     ae0:	4b0d0550 	blmi	342028 <__bss_end+0x31c3f0>
     ae4:	05330b05 	ldreq	r0, [r3, #-2821]!	@ 0xfffff4fb
     ae8:	d2033101 	andle	r3, r3, #1073741824	@ 0x40000000
     aec:	19056601 	stmdbne	r5, {r0, r9, sl, sp, lr}
     af0:	05d60c03 	ldrbeq	r0, [r6, #3075]	@ 0xc03
     af4:	2b054c0e 	blcs	153b34 <__bss_end+0x12defc>
     af8:	4a05054a 	bmi	142028 <__bss_end+0x11c3f0>
     afc:	054e0405 	strbeq	r0, [lr, #-1029]	@ 0xfffffbfb
     b00:	0605860f 	streq	r8, [r5], -pc, lsl #12
     b04:	4c09054a 	cfstr32mi	mvfx0, [r9], {74}	@ 0x4a
     b08:	054a0705 	strbeq	r0, [sl, #-1797]	@ 0xfffff8fb
     b0c:	0a054c24 	beq	153ba4 <__bss_end+0x12df6c>
     b10:	0008054a 	andeq	r0, r8, sl, asr #10
     b14:	66010402 	strvs	r0, [r1], -r2, lsl #8
     b18:	054e0905 	strbeq	r0, [lr, #-2309]	@ 0xfffff6fb
     b1c:	10056823 	andne	r6, r5, r3, lsr #16
     b20:	05820903 	streq	r0, [r2, #2307]	@ 0x903
     b24:	0c054a05 			@ <UNDEFINED> instruction: 0x0c054a05
     b28:	09056b69 	stmdbeq	r5, {r0, r3, r5, r6, r8, r9, fp, sp, lr}
     b2c:	2f01054f 	svccs	0x0001054f
     b30:	d716056a 	ldrle	r0, [r6, -sl, ror #10]
     b34:	0d030305 	stceq	3, cr0, [r3, #-20]	@ 0xffffffec
     b38:	320f054a 	andcc	r0, pc, #310378496	@ 0x12800000
     b3c:	054a0605 	strbeq	r0, [sl, #-1541]	@ 0xfffff9fb
     b40:	05054d1c 	streq	r4, [r5, #-3356]	@ 0xfffff2e4
     b44:	68070568 	stmdavs	r7, {r3, r5, r6, r8, sl}
     b48:	056b1105 	strbeq	r1, [fp, #-261]!	@ 0xfffffefb
     b4c:	0a054a06 	beq	15336c <__bss_end+0x12d734>
     b50:	05660d03 	strbeq	r0, [r6, #-3331]!	@ 0xfffff2fd
     b54:	25054a08 	strcs	r4, [r5, #-2568]	@ 0xfffff5f8
     b58:	4a0b054c 	bmi	2c2090 <__bss_end+0x29c458>
     b5c:	02000905 	andeq	r0, r0, #81920	@ 0x14000
     b60:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
     b64:	1a054c08 	bne	153b8c <__bss_end+0x12df54>
     b68:	054a0a03 	strbeq	r0, [sl, #-2563]	@ 0xfffff5fd
     b6c:	08056a0a 	stmdaeq	r5, {r1, r3, r9, fp, sp, lr}
     b70:	4e25054a 	cfsh64mi	mvdx0, mvdx5, #42
     b74:	054a0b05 	strbeq	r0, [sl, #-2821]	@ 0xfffff4fb
     b78:	04020009 	streq	r0, [r2], #-9
     b7c:	08056601 	stmdaeq	r5, {r0, r9, sl, sp, lr}
     b80:	3305054d 	movwcc	r0, #21837	@ 0x554d
     b84:	052f0c05 	streq	r0, [pc, #-3077]!	@ ffffff87 <_estack+0xf7fdff87>
     b88:	07054e16 	smladeq	r5, r6, lr, r4
     b8c:	4e06052e 	cfsh32mi	mvfx0, mvfx6, #30
     b90:	05300d05 	ldreq	r0, [r0, #-3333]!	@ 0xfffff2fb
     b94:	06054c0c 	streq	r4, [r5], -ip, lsl #24
     b98:	6714056a 	ldrvs	r0, [r4, -sl, ror #10]
     b9c:	334e0305 	movtcc	r0, #58117	@ 0xe305
     ba0:	0402002f 	streq	r0, [r2], #-47	@ 0xffffffd1
     ba4:	002e0601 	eoreq	r0, lr, r1, lsl #12
     ba8:	d6030402 	strle	r0, [r3], -r2, lsl #8
     bac:	04040200 	streq	r0, [r4], #-512	@ 0xfffffe00
     bb0:	04020082 	streq	r0, [r2], #-130	@ 0xffffff7e
     bb4:	07056606 	streq	r6, [r5, -r6, lsl #12]
     bb8:	05053106 	streq	r3, [r5, #-262]	@ 0xfffffefa
     bbc:	01040200 	mrseq	r0, R12_usr
     bc0:	4c0805ba 	cfstr32mi	mvfx0, [r8], {186}	@ 0xba
     bc4:	02000605 	andeq	r0, r0, #5242880	@ 0x500000
     bc8:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
     bcc:	4a11031c 	bmi	441844 <__bss_end+0x41bc0c>
     bd0:	834a0505 	movthi	r0, #42245	@ 0xa505
     bd4:	054b0905 	strbeq	r0, [fp, #-2309]	@ 0xfffff6fb
     bd8:	04020007 	streq	r0, [r2], #-7
     bdc:	06054a01 	streq	r4, [r5], -r1, lsl #20
     be0:	5005054c 	andpl	r0, r5, ip, asr #10
     be4:	054b0e05 	strbeq	r0, [fp, #-3589]	@ 0xfffff1fb
     be8:	0d054f04 	stceq	15, cr4, [r5, #-16]
     bec:	300b054b 	andcc	r0, fp, fp, asr #10
     bf0:	6a310105 	bvs	c4100c <__bss_end+0xc1b3d4>
     bf4:	05c11905 	strbeq	r1, [r1, #2309]	@ 0x905
     bf8:	05054d0e 	streq	r4, [r5, #-3342]	@ 0xfffff2f2
     bfc:	4e04054a 	cfsh32mi	mvfx0, mvfx4, #42
     c00:	05670f05 	strbeq	r0, [r7, #-3845]!	@ 0xfffff0fb
     c04:	0f054a04 	svceq	0x00054a04
     c08:	4a06056b 	bmi	1821bc <__bss_end+0x15c584>
     c0c:	054c0905 	strbeq	r0, [ip, #-2309]	@ 0xfffff6fb
     c10:	24054a07 	strcs	r4, [r5], #-2567	@ 0xfffff5f9
     c14:	4a0a054c 	bmi	28214c <__bss_end+0x25c514>
     c18:	02000805 	andeq	r0, r0, #327680	@ 0x50000
     c1c:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
     c20:	23054e09 	movwcs	r4, #24073	@ 0x5e09
     c24:	03100568 	tsteq	r0, #104, 10	@ 0x1a000000
     c28:	05058209 	streq	r8, [r5, #-521]	@ 0xfffffdf7
     c2c:	690c054a 	stmdbvs	ip, {r1, r3, r6, r8, sl}
     c30:	5009056a 	andpl	r0, r9, sl, ror #10
     c34:	6a2f0105 	bvs	bc1050 <__bss_end+0xb9b418>
     c38:	05870205 	streq	r0, [r7, #517]	@ 0x205
     c3c:	02052f0c 	andeq	r2, r5, #12, 30	@ 0x30
     c40:	30090567 	andcc	r0, r9, r7, ror #10
     c44:	6a2f0105 	bvs	bc1060 <__bss_end+0xb9b428>
     c48:	05870b05 	streq	r0, [r7, #2821]	@ 0xb05
     c4c:	01056809 	tsteq	r5, r9, lsl #16
     c50:	1405862f 	strne	r8, [r5], #-1583	@ 0xfffff9d1
     c54:	4a020587 	bmi	82278 <__bss_end+0x5c640>
     c58:	4b01054b 	blmi	4218c <__bss_end+0x1c554>
     c5c:	05662203 	strbeq	r2, [r6, #-515]!	@ 0xfffffdfd
     c60:	0405bb0d 	streq	fp, [r5], #-2829	@ 0xfffff4f3
     c64:	0309054a 	movweq	r0, #38218	@ 0x954a
     c68:	1d054a0d 	vstrne	s8, [r5, #-52]	@ 0xffffffcc
     c6c:	4a4d0568 	bmi	1342214 <__bss_end+0x131c5dc>
     c70:	054a0305 	strbeq	r0, [sl, #-773]	@ 0xfffffcfb
     c74:	2005670a 	andcs	r6, r5, sl, lsl #14
     c78:	4a16054a 	bmi	5821a8 <__bss_end+0x55c570>
     c7c:	05670e05 	strbeq	r0, [r7, #-3589]!	@ 0xfffff1fb
     c80:	05054a24 	streq	r4, [r5, #-2596]	@ 0xfffff5dc
     c84:	4c20054a 	cfstr32mi	mvfx0, [r0], #-296	@ 0xfffffed8
     c88:	054a1705 	strbeq	r1, [sl, #-1797]	@ 0xfffff8fb
     c8c:	4e056b1d 	vmovmi.32	d5[0], r6
     c90:	4a03054a 	bmi	c21c0 <__bss_end+0x9c588>
     c94:	05670a05 	strbeq	r0, [r7, #-2565]!	@ 0xfffff5fb
     c98:	17054a21 	strne	r4, [r5, -r1, lsr #20]
     c9c:	830e054a 	movwhi	r0, #58698	@ 0xe54a
     ca0:	054a2405 	strbeq	r2, [sl, #-1029]	@ 0xfffffbfb
     ca4:	23054a05 	movwcs	r4, #23045	@ 0x5a05
     ca8:	4a35054c 	bmi	d421e0 <__bss_end+0xd1c5a8>
     cac:	054a2c05 	strbeq	r2, [sl, #-3077]	@ 0xfffff3fb
     cb0:	0d054a18 	vstreq	s8, [r5, #-96]	@ 0xffffffa0
     cb4:	4a02054e 	bmi	821f4 <__bss_end+0x5c5bc>
     cb8:	6a670105 	bvs	19c10d4 <__bss_end+0x199b49c>
     cbc:	059f0d05 	ldreq	r0, [pc, #3333]	@ 19c9 <_start-0xe637>
     cc0:	0a054a04 	beq	1534d8 <__bss_end+0x12d8a0>
     cc4:	4a21054c 	bmi	8421fc <__bss_end+0x81c5c4>
     cc8:	054a1705 	strbeq	r1, [sl, #-1797]	@ 0xfffff8fb
     ccc:	2505670e 	strcs	r6, [r5, #-1806]	@ 0xfffff8f2
     cd0:	4a05054a 	bmi	142200 <__bss_end+0x11c5c8>
     cd4:	054c2105 	strbeq	r2, [ip, #-261]	@ 0xfffffefb
     cd8:	32054a18 	andcc	r4, r5, #24, 20	@ 0x18000
     cdc:	4a54054c 	bmi	1502214 <__bss_end+0x14dc5dc>
     ce0:	054a0305 	strbeq	r0, [sl, #-773]	@ 0xfffffcfb
     ce4:	056a6801 	strbeq	r6, [sl, #-2049]!	@ 0xfffff7ff
     ce8:	08058902 	stmdaeq	r5, {r1, r8, fp, pc}
     cec:	06053231 			@ <UNDEFINED> instruction: 0x06053231
     cf0:	4e23054a 	cfsh64mi	mvdx0, mvdx3, #42
     cf4:	054a0905 	strbeq	r0, [sl, #-2309]	@ 0xfffff6fb
     cf8:	04020007 	streq	r0, [r2], #-7
     cfc:	06056601 	streq	r6, [r5], -r1, lsl #12
     d00:	3110054e 	tstcc	r0, lr, asr #10
     d04:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
     d08:	66710311 			@ <UNDEFINED> instruction: 0x66710311
     d0c:	054a1b05 	strbeq	r1, [sl, #-2821]	@ 0xfffff4fb
     d10:	66130305 	ldrvs	r0, [r3], -r5, lsl #6
     d14:	05321405 	ldreq	r1, [r2, #-1029]!	@ 0xfffffbfb
     d18:	05316802 	ldreq	r6, [r1, #-2050]!	@ 0xfffff7fe
     d1c:	05303008 	ldreq	r3, [r0, #-8]!
     d20:	23054a06 	movwcs	r4, #23046	@ 0x5a06
     d24:	4a09054c 	bmi	24225c <__bss_end+0x21c624>
     d28:	02000705 	andeq	r0, r0, #1310720	@ 0x140000
     d2c:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
     d30:	10054c06 	andne	r4, r5, r6, lsl #24
     d34:	4a050531 	bmi	142200 <__bss_end+0x11c5c8>
     d38:	77031105 	strvc	r1, [r3, -r5, lsl #2]
     d3c:	4a1b0566 	bmi	6c22dc <__bss_end+0x69c6a4>
     d40:	0d030505 	cfstr32eq	mvfx0, [r3, #-20]	@ 0xffffffec
     d44:	32140566 	andscc	r0, r4, #427819008	@ 0x19800000
     d48:	05680205 	strbeq	r0, [r8, #-517]!	@ 0xfffffdfb
     d4c:	056a2f01 	strbeq	r2, [sl, #-3841]!	@ 0xfffff0ff
     d50:	16058502 	strne	r8, [r5], -r2, lsl #10
     d54:	4a2a052f 	bmi	a82218 <__bss_end+0xa5c5e0>
     d58:	05820b05 	streq	r0, [r2, #2821]	@ 0xb05
     d5c:	09052f02 	stmdbeq	r5, {r1, r8, r9, sl, fp, sp}
     d60:	2f010530 	svccs	0x00010530
     d64:	8615056a 	ldrhi	r0, [r5], -sl, ror #10
     d68:	054a2905 	strbeq	r2, [sl, #-2309]	@ 0xfffff6fb
     d6c:	0905820a 	stmdbeq	r5, {r1, r3, r9, pc}
     d70:	2f010530 	svccs	0x00010530
     d74:	85020586 	strhi	r0, [r2, #-1414]	@ 0xfffffa7a
     d78:	052f1605 	streq	r1, [pc, #-1541]!	@ 77b <_start-0xf885>
     d7c:	2a054a34 	bcs	153654 <__bss_end+0x12da1c>
     d80:	820b054a 	andhi	r0, fp, #310378496	@ 0x12800000
     d84:	052f0205 	streq	r0, [pc, #-517]!	@ b87 <_start-0xf479>
     d88:	01053009 	tsteq	r5, r9
     d8c:	15056a2f 	strne	r6, [r5, #-2607]	@ 0xfffff5d1
     d90:	4a330586 	bmi	cc23b0 <__bss_end+0xc9c778>
     d94:	054a2905 	strbeq	r2, [sl, #-2309]	@ 0xfffff6fb
     d98:	0905820a 	stmdbeq	r5, {r1, r3, r9, pc}
     d9c:	2f010530 	svccs	0x00010530
     da0:	01000802 	tsteq	r0, r2, lsl #16
     da4:	00086e01 	andeq	r6, r8, r1, lsl #28
     da8:	99000300 	stmdbls	r0, {r8, r9}
     dac:	02000001 	andeq	r0, r0, #1
     db0:	0d0efb01 	vstreq	d15, [lr, #-4]
     db4:	01010100 	mrseq	r0, (UNDEF: 17)
     db8:	00000001 	andeq	r0, r0, r1
     dbc:	01000001 	tsteq	r0, r1
     dc0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ d0c <_start-0xf2f4>
     dc4:	6d632f65 	stclvs	15, cr2, [r3, #-404]!	@ 0xfffffe6c
     dc8:	2f637964 	svccs	0x00637964
     dcc:	61786548 	cmnvs	r8, r8, asr #10
     dd0:	2f686372 	svccs	0x00686372
     dd4:	2f637273 	svccs	0x00637273
     dd8:	70736152 	rsbsvc	r6, r3, r2, asr r1
     ddc:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     de0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
     de4:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     de8:	534f5452 	movtpl	r5, #62546	@ 0xf452
     dec:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
     df0:	4f545265 	svcmi	0x00545265
     df4:	6f532f53 	svcvs	0x00532f53
     df8:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
     dfc:	73752f00 	cmnvc	r5, #0, 30
     e00:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     e04:	63672f62 	cmnvs	r7, #392	@ 0x188
     e08:	72612f63 	rsbvc	r2, r1, #396	@ 0x18c
     e0c:	6f6e2d6d 	svcvs	0x006e2d6d
     e10:	652d656e 	strvs	r6, [sp, #-1390]!	@ 0xfffffa92
     e14:	2f696261 	svccs	0x00696261
     e18:	322e3331 	eorcc	r3, lr, #-1006632960	@ 0xc4000000
     e1c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	@ <UNPREDICTABLE>
     e20:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
     e24:	2f006564 	svccs	0x00006564
     e28:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     e2c:	646d632f 	strbtvs	r6, [sp], #-815	@ 0xfffffcd1
     e30:	482f6379 	stmdami	pc!, {r0, r3, r4, r5, r6, r8, r9, sp, lr}	@ <UNPREDICTABLE>
     e34:	72617865 	rsbvc	r7, r1, #6619136	@ 0x650000
     e38:	732f6863 			@ <UNDEFINED> instruction: 0x732f6863
     e3c:	522f6372 	eorpl	r6, pc, #-939524095	@ 0xc8000001
     e40:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     e44:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     e48:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     e4c:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     e50:	2f534f54 	svccs	0x00534f54
     e54:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     e58:	534f5452 	movtpl	r5, #62546	@ 0xf452
     e5c:	756f532f 	strbvc	r5, [pc, #-815]!	@ b35 <_start-0xf4cb>
     e60:	2f656372 	svccs	0x00656372
     e64:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
     e68:	00656475 	rsbeq	r6, r5, r5, ror r4
     e6c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ db8 <_start-0xf248>
     e70:	6d632f65 	stclvs	15, cr2, [r3, #-404]!	@ 0xfffffe6c
     e74:	2f637964 	svccs	0x00637964
     e78:	61786548 	cmnvs	r8, r8, asr #10
     e7c:	2f686372 	svccs	0x00686372
     e80:	2f637273 	svccs	0x00637273
     e84:	70736152 	rsbsvc	r6, r3, r2, asr r1
     e88:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     e8c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
     e90:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     e94:	534f5452 	movtpl	r5, #62546	@ 0xf452
     e98:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
     e9c:	4f545265 	svcmi	0x00545265
     ea0:	6f532f53 	svcvs	0x00532f53
     ea4:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
     ea8:	726f702f 	rsbvc	r7, pc, #47	@ 0x2f
     eac:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
     eb0:	43472f65 	movtmi	r2, #32613	@ 0x7f65
     eb4:	61522f43 	cmpvs	r2, r3, asr #30
     eb8:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     ebc:	50797272 	rsbspl	r7, r9, r2, ror r2
     ec0:	752f0069 	strvc	r0, [pc, #-105]!	@ e5f <_start-0xf1a1>
     ec4:	692f7273 	stmdbvs	pc!, {r0, r1, r4, r5, r6, r9, ip, sp, lr}	@ <UNPREDICTABLE>
     ec8:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
     ecc:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
     ed0:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
     ed4:	74000062 	strvc	r0, [r0], #-98	@ 0xffffff9e
     ed8:	736b7361 	cmnvc	fp, #-2080374783	@ 0x84000001
     edc:	0100632e 	tsteq	r0, lr, lsr #6
     ee0:	74730000 	ldrbtvc	r0, [r3], #-0
     ee4:	66656464 	strbtvs	r6, [r5], -r4, ror #8
     ee8:	0200682e 	andeq	r6, r0, #3014656	@ 0x2e0000
     eec:	72700000 	rsbsvc	r0, r0, #0
     ef0:	65646a6f 	strbvs	r6, [r4, #-2671]!	@ 0xfffff591
     ef4:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
     ef8:	00000300 	andeq	r0, r0, r0, lsl #6
     efc:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
     f00:	7263616d 	rsbvc	r6, r3, #1073741851	@ 0x4000001b
     f04:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     f08:	46000004 	strmi	r0, [r0], -r4
     f0c:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     f10:	2e534f54 	mrccs	15, 2, r4, cr3, cr4, {2}
     f14:	00030068 	andeq	r0, r3, r8, rrx
     f18:	73696c00 	cmnvc	r9, #0, 24
     f1c:	00682e74 	rsbeq	r2, r8, r4, ror lr
     f20:	74000003 	strvc	r0, [r0], #-3
     f24:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
     f28:	00030068 	andeq	r0, r3, r8, rrx
     f2c:	72747300 	rsbsvc	r7, r4, #0, 6
     f30:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
     f34:	00050068 	andeq	r0, r5, r8, rrx
     f38:	726f7000 	rsbvc	r7, pc, #0
     f3c:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
     f40:	00682e65 	rsbeq	r2, r8, r5, ror #28
     f44:	00000003 	andeq	r0, r0, r3
     f48:	05000105 	streq	r0, [r0, #-261]	@ 0xfffffefb
     f4c:	021ba802 	andseq	sl, fp, #131072	@ 0x20000
     f50:	039b0300 	orrseq	r0, fp, #0, 6
     f54:	030d0501 	movweq	r0, #54529	@ 0xd501
     f58:	0405f209 	streq	pc, [r5], #-521	@ 0xfffffdf7
     f5c:	031b05a0 	tsteq	fp, #160, 10	@ 0x28000000
     f60:	25056618 	strcs	r6, [r5, #-1560]	@ 0xfffff9e8
     f64:	6611054a 	ldrvs	r0, [r1], -sl, asr #10
     f68:	054b2c05 	strbeq	r2, [fp, #-3077]	@ 0xfffff3fb
     f6c:	11052e55 	tstne	r5, r5, asr lr
     f70:	0303052e 	movweq	r0, #13614	@ 0x352e
     f74:	1d052e14 	stcne	14, cr2, [r5, #-80]	@ 0xffffffb0
     f78:	05d60c03 	ldrbeq	r0, [r6, #3075]	@ 0xc03
     f7c:	0402001b 	streq	r0, [r2], #-27	@ 0xffffffe5
     f80:	05059e01 	streq	r9, [r5, #-3585]	@ 0xfffff1ff
     f84:	6b130551 	blvs	4c24d0 <__bss_end+0x49c898>
     f88:	056b0305 	strbeq	r0, [fp, #-773]!	@ 0xfffffcfb
     f8c:	1505301a 	strne	r3, [r5, #-26]	@ 0xffffffe6
     f90:	4a06059f 	bmi	182614 <__bss_end+0x15c9dc>
     f94:	054e1205 	strbeq	r1, [lr, #-517]	@ 0xfffffdfb
     f98:	07056820 	streq	r6, [r5, -r0, lsr #16]
     f9c:	4f06054a 	svcmi	0x0006054a
     fa0:	05521b05 	ldrbeq	r1, [r2, #-2821]	@ 0xfffff4fb
     fa4:	16054a07 	strne	r4, [r5], -r7, lsl #20
     fa8:	6608054c 	strvs	r0, [r8], -ip, asr #10
     fac:	05681405 	strbeq	r1, [r8, #-1029]!	@ 0xfffffbfb
     fb0:	1d056d10 	stcne	13, cr6, [r5, #-64]	@ 0xffffffc0
     fb4:	4a06054a 	bmi	1824e4 <__bss_end+0x15c8ac>
     fb8:	054c2105 	strbeq	r2, [ip, #-261]	@ 0xfffffefb
     fbc:	10054a17 	andne	r4, r5, r7, lsl sl
     fc0:	054a0903 	strbeq	r0, [sl, #-2307]	@ 0xfffff6fd
     fc4:	0200a004 	andeq	sl, r0, #4
     fc8:	ba060104 	blt	1813e0 <__bss_end+0x15b7a8>
     fcc:	03040200 	movweq	r0, #16896	@ 0x4200
     fd0:	060c0582 	streq	r0, [ip], -r2, lsl #11
     fd4:	03059208 	movweq	r9, #21000	@ 0x5208
     fd8:	4e0b054e 	cfsh32mi	mvfx0, mvfx11, #46
     fdc:	054e0405 	strbeq	r0, [lr, #-1029]	@ 0xfffffbfb
     fe0:	05056819 	streq	r6, [r5, #-2073]	@ 0xfffff7e7
     fe4:	4e14054a 	cfmac32mi	mvfx0, mvfx4, mvfx10
     fe8:	05660605 	strbeq	r0, [r6, #-1541]!	@ 0xfffff9fb
     fec:	09056805 	stmdbeq	r5, {r0, r2, fp, sp, lr}
     ff0:	2f010533 	svccs	0x00010533
     ff4:	42080205 	andmi	r0, r8, #1342177280	@ 0x50000000
     ff8:	05850305 	streq	r0, [r5, #773]	@ 0x305
     ffc:	06053217 			@ <UNDEFINED> instruction: 0x06053217
    1000:	6814054a 	ldmdavs	r4, {r1, r3, r6, r8, sl}
    1004:	004e0c05 	subeq	r0, lr, r5, lsl #24
    1008:	06010402 	streq	r0, [r1], -r2, lsl #8
    100c:	04020066 	streq	r0, [r2], #-102	@ 0xffffff9a
    1010:	0a056602 	beq	15a820 <__bss_end+0x134be8>
    1014:	04040200 	streq	r0, [r4], #-512	@ 0xfffffe00
    1018:	04052e06 	streq	r2, [r5], #-3590	@ 0xfffff1fa
    101c:	851d0534 	ldrhi	r0, [sp, #-1332]	@ 0xfffffacc
    1020:	054a0605 	strbeq	r0, [sl, #-1541]	@ 0xfffff9fb
    1024:	04054c05 	streq	r4, [r5], #-3077	@ 0xfffff3fb
    1028:	1005a385 	andne	sl, r5, r5, lsl #7
    102c:	a20305a2 	andge	r0, r3, #679477248	@ 0x28800000
    1030:	05311905 	ldreq	r1, [r1, #-2309]!	@ 0xfffff6fb
    1034:	06054a05 	streq	r4, [r5], -r5, lsl #20
    1038:	6805054c 	stmdavs	r5, {r2, r3, r6, r8, sl}
    103c:	03310205 	teqeq	r1, #1342177280	@ 0x50000000
    1040:	2105f210 	tstcs	r5, r0, lsl r2	@ <UNPREDICTABLE>
    1044:	4f0305a0 	svcmi	0x000305a0
    1048:	05311205 	ldreq	r1, [r1, #-517]!	@ 0xfffffdfb
    104c:	15054a10 	strne	r4, [r5, #-2576]	@ 0xfffff5f0
    1050:	4a130568 	bmi	4c25f8 <__bss_end+0x49c9c0>
    1054:	054a0605 	strbeq	r0, [sl, #-1541]	@ 0xfffff9fb
    1058:	07055119 	smladeq	r5, r9, r1, r5
    105c:	0040054a 	subeq	r0, r0, sl, asr #10
    1060:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1064:	02002f05 	andeq	r2, r0, #5, 30
    1068:	054a0104 	strbeq	r0, [sl, #-260]	@ 0xfffffefc
    106c:	19056813 	stmdbne	r5, {r0, r1, r4, fp, sp, lr}
    1070:	4a07056e 	bmi	1c2630 <__bss_end+0x19c9f8>
    1074:	02004005 	andeq	r4, r0, #5
    1078:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
    107c:	0402002f 	streq	r0, [r2], #-47	@ 0xffffffd1
    1080:	13054a01 	movwne	r4, #23041	@ 0x5a01
    1084:	4f180568 	svcmi	0x00180568
    1088:	05680605 	strbeq	r0, [r8, #-1541]!	@ 0xfffff9fb
    108c:	05056d31 	streq	r6, [r5, #-3377]	@ 0xfffff2cf
    1090:	1505674a 	strne	r6, [r5, #-1866]	@ 0xfffff8b6
    1094:	4e05054d 	cfsh32mi	mvfx0, mvfx5, #45
    1098:	05680405 	strbeq	r0, [r8, #-1029]!	@ 0xfffffbfb
    109c:	05a63002 	streq	r3, [r6, #2]!
    10a0:	05058417 	streq	r8, [r5, #-1047]	@ 0xfffffbe9
    10a4:	6804054d 	stmdavs	r4, {r0, r2, r3, r6, r8, sl}
    10a8:	0e031e05 	cdpeq	14, 0, cr1, cr3, cr5, {0}
    10ac:	4a11052e 	bmi	44256c <__bss_end+0x41c934>
    10b0:	056b3105 	strbeq	r3, [fp, #-261]!	@ 0xfffffefb
    10b4:	05674a05 	strbeq	r4, [r7, #-2565]!	@ 0xfffff5fb
    10b8:	05054c16 	streq	r4, [r5, #-3094]	@ 0xfffff3ea
    10bc:	6804054f 	stmdavs	r4, {r0, r1, r2, r3, r6, r8, sl}
    10c0:	a6300205 	ldrtge	r0, [r0], -r5, lsl #4
    10c4:	05860305 	streq	r0, [r6, #773]	@ 0x305
    10c8:	0200320c 	andeq	r3, r0, #12, 4	@ 0xc0000000
    10cc:	66060104 	strvs	r0, [r6], -r4, lsl #2
    10d0:	02040200 	andeq	r0, r4, #0, 4
    10d4:	000a0566 	andeq	r0, sl, r6, ror #10
    10d8:	06040402 	streq	r0, [r4], -r2, lsl #8
    10dc:	2f0d052e 	svccs	0x000d052e
    10e0:	05680305 	strbeq	r0, [r8, #-773]!	@ 0xfffffcfb
    10e4:	0205300a 	andeq	r3, r5, #10
    10e8:	10058a2f 	andne	r8, r5, pc, lsr #20
    10ec:	4f0505a1 	svcmi	0x000505a1
    10f0:	05681205 	strbeq	r1, [r8, #-517]!	@ 0xfffffdfb
    10f4:	0f054d03 	svceq	0x00054d03
    10f8:	4a060530 	bmi	1825c0 <__bss_end+0x15c988>
    10fc:	4f680c05 	svcmi	0x00680c05
    1100:	01040200 	mrseq	r0, R12_usr
    1104:	02006606 	andeq	r6, r0, #6291456	@ 0x600000
    1108:	05660204 	strbeq	r0, [r6, #-516]!	@ 0xfffffdfc
    110c:	0402000a 	streq	r0, [r2], #-10
    1110:	052e0604 	streq	r0, [lr, #-1540]!	@ 0xfffff9fc
    1114:	2e0a0317 	mcrcs	3, 0, r0, cr10, cr7, {0}
    1118:	056a0605 	strbeq	r0, [sl, #-1541]!	@ 0xfffff9fb
    111c:	08058607 	stmdaeq	r5, {r0, r1, r2, r9, sl, pc}
    1120:	6c160584 	cfldr32vs	mvfx0, [r6], {132}	@ 0x84
    1124:	05690c05 	strbeq	r0, [r9, #-3077]!	@ 0xfffff3fb
    1128:	18056a15 	stmdane	r5, {r0, r2, r4, r9, fp, sp, lr}
    112c:	054a1303 	strbeq	r1, [sl, #-771]	@ 0xfffffcfd
    1130:	09056a05 	stmdbeq	r5, {r0, r2, r9, fp, sp, lr}
    1134:	08070588 	stmdaeq	r7, {r3, r7, r8, sl}
    1138:	4f060520 	svcmi	0x00060520
    113c:	04020083 	streq	r0, [r2], #-131	@ 0xffffff7d
    1140:	00ba0601 	adcseq	r0, sl, r1, lsl #12
    1144:	82030402 	andhi	r0, r3, #33554432	@ 0x2000000
    1148:	08060705 	stmdaeq	r6, {r0, r2, r8, r9, sl}
    114c:	68060593 	stmdavs	r6, {r0, r1, r4, r7, r8, sl}
    1150:	05320305 	ldreq	r0, [r2, #-773]!	@ 0xfffffcfb
    1154:	05c22f02 	strbeq	r2, [r2, #3842]	@ 0xf02
    1158:	18058503 	stmdane	r5, {r0, r1, r8, sl, pc}
    115c:	4a060532 	bmi	18262c <__bss_end+0x15c9f4>
    1160:	05681505 	strbeq	r1, [r8, #-1285]!	@ 0xfffffafb
    1164:	02004e0c 	andeq	r4, r0, #12, 28	@ 0xc0
    1168:	66060104 	strvs	r0, [r6], -r4, lsl #2
    116c:	02040200 	andeq	r0, r4, #0, 4
    1170:	000a0566 	andeq	r0, sl, r6, ror #10
    1174:	06040402 	streq	r0, [r4], -r2, lsl #8
    1178:	3304052e 	movwcc	r0, #17710	@ 0x452e
    117c:	05851d05 	streq	r1, [r5, #3333]	@ 0xd05
    1180:	05054a06 	streq	r4, [r5, #-2566]	@ 0xfffff5fa
    1184:	8504054c 	strhi	r0, [r4, #-1356]	@ 0xfffffab4
    1188:	05a00305 	streq	r0, [r0, #773]!	@ 0x305
    118c:	1a053005 	bne	14d1a8 <__bss_end+0x127570>
    1190:	4a060568 	bmi	182738 <__bss_end+0x15cb00>
    1194:	054d0505 	strbeq	r0, [sp, #-1285]	@ 0xfffffafb
    1198:	2e150302 	cdpcs	3, 1, cr0, cr5, cr2, {0}
    119c:	72030905 	andvc	r0, r3, #81920	@ 0x14000
    11a0:	4a38052e 	bmi	e02660 <__bss_end+0xddca28>
    11a4:	054a0705 	strbeq	r0, [sl, #-1797]	@ 0xfffff8fb
    11a8:	02055013 	andeq	r5, r5, #19
    11ac:	2a06056e 	bcs	18276c <__bss_end+0x15cb34>
    11b0:	de320205 	cdple	2, 3, cr0, cr2, cr5, {0}
    11b4:	05831005 	streq	r1, [r3, #5]
    11b8:	07054b17 	smladeq	r5, r7, fp, r4
    11bc:	4a050551 	bmi	142708 <__bss_end+0x11cad0>
    11c0:	05690805 	strbeq	r0, [r9, #-2053]!	@ 0xfffff7fb
    11c4:	09054a06 	stmdbeq	r5, {r1, r2, r9, fp, lr}
    11c8:	4a07056c 	bmi	1c2780 <__bss_end+0x19cb48>
    11cc:	054c0e05 	strbeq	r0, [ip, #-3589]	@ 0xfffff1fb
    11d0:	02054f0a 	andeq	r4, r5, #10, 30	@ 0x28
    11d4:	0905c22f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r9, lr, pc}
    11d8:	4e05058a 	cfsh32mi	mvfx0, mvfx5, #-54
    11dc:	02002405 	andeq	r2, r0, #83886080	@ 0x5000000
    11e0:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
    11e4:	04020019 	streq	r0, [r2], #-25	@ 0xffffffe7
    11e8:	04054a01 	streq	r4, [r5], #-2561	@ 0xfffff5ff
    11ec:	30090568 	andcc	r0, r9, r8, ror #10
    11f0:	02000705 	andeq	r0, r0, #1310720	@ 0x140000
    11f4:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
    11f8:	00835006 	addeq	r5, r3, r6
    11fc:	06010402 	streq	r0, [r1], -r2, lsl #8
    1200:	040200ba 	streq	r0, [r2], #-186	@ 0xffffff46
    1204:	0f058203 	svceq	0x00058203
    1208:	05930806 	ldreq	r0, [r3, #2054]	@ 0x806
    120c:	08054a2b 	stmdaeq	r5, {r0, r1, r3, r5, r9, fp, lr}
    1210:	4e070566 	cfsh32mi	mvfx0, mvfx7, #54
    1214:	05320405 	ldreq	r0, [r2, #-1029]!	@ 0xfffffbfb
    1218:	09033002 	stmdbeq	r3, {r1, ip, sp}
    121c:	831005ba 	tsthi	r0, #780140544	@ 0x2e800000
    1220:	05500905 	ldrbeq	r0, [r0, #-2309]	@ 0xfffff6fb
    1224:	08054c1a 	stmdaeq	r5, {r1, r3, r4, sl, fp, lr}
    1228:	0006054c 	andeq	r0, r6, ip, asr #10
    122c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1230:	054e1e05 	strbeq	r1, [lr, #-3589]	@ 0xfffff1fb
    1234:	1e054a07 	vmlane.f32	s8, s10, s14
    1238:	4a3a054c 	bmi	e82770 <__bss_end+0xe5cb38>
    123c:	05662b05 	strbeq	r2, [r6, #-2821]!	@ 0xfffff4fb
    1240:	06058215 			@ <UNDEFINED> instruction: 0x06058215
    1244:	0200832f 	andeq	r8, r0, #-1140850688	@ 0xbc000000
    1248:	ba060104 	blt	181660 <__bss_end+0x15ba28>
    124c:	03040200 	movweq	r0, #16896	@ 0x4200
    1250:	b3080682 	movwlt	r0, #34434	@ 0x8682
    1254:	05a40a05 	streq	r0, [r4, #2565]!	@ 0xa05
    1258:	01052f02 	tsteq	r5, r2, lsl #30
    125c:	05f20d03 	ldrbeq	r0, [r2, #3331]!	@ 0xd03
    1260:	660d030d 	strvs	r0, [sp], -sp, lsl #6
    1264:	0d030405 	cfstrseq	mvf0, [r3, #-20]	@ 0xffffffec
    1268:	0305ac08 	movweq	sl, #23560	@ 0x5c08
    126c:	05660a03 	strbeq	r0, [r6, #-2563]!	@ 0xfffff5fd
    1270:	0e05a015 	mcreq	0, 0, sl, cr5, cr5, {0}
    1274:	03070567 	movweq	r0, #30055	@ 0x7567
    1278:	01056609 	tsteq	r5, r9, lsl #12
    127c:	da2e0d03 	ble	b84690 <__bss_end+0xb5ea58>
    1280:	054e0205 	strbeq	r0, [lr, #-517]	@ 0xfffffdfb
    1284:	02059f14 	andeq	r9, r5, #20, 30	@ 0x50
    1288:	2f010567 	svccs	0x00010567
    128c:	4d02056a 	cfstr32mi	mvfx0, [r2, #-424]	@ 0xfffffe58
    1290:	a29f0105 	addsge	r0, pc, #1073741825	@ 0x40000001
    1294:	05681605 	strbeq	r1, [r8, #-1541]!	@ 0xfffff9fb
    1298:	4a0b0302 	bmi	2c1ea8 <__bss_end+0x29c270>
    129c:	05300305 	ldreq	r0, [r0, #-773]!	@ 0xfffffcfb
    12a0:	0505a01c 	streq	sl, [r5, #-28]	@ 0xffffffe4
    12a4:	4c1f054a 	cfldr32mi	mvfx0, [pc], {74}	@ 0x4a
    12a8:	054a0605 	strbeq	r0, [sl, #-1541]	@ 0xfffff9fb
    12ac:	0a054c13 	beq	154300 <__bss_end+0x12e6c8>
    12b0:	301b054e 	andscc	r0, fp, lr, asr #10
    12b4:	054a0c05 	strbeq	r0, [sl, #-3077]	@ 0xfffff3fb
    12b8:	67672f06 	strbvs	r2, [r7, -r6, lsl #30]!
    12bc:	01040200 	mrseq	r0, R12_usr
    12c0:	02009e06 	andeq	r9, r0, #6, 28	@ 0x60
    12c4:	05660304 	strbeq	r0, [r6, #-772]!	@ 0xfffffcfc
    12c8:	5c08060f 	stcpl	6, cr0, [r8], {15}
    12cc:	052e2b05 	streq	r2, [lr, #-2821]!	@ 0xfffff4fb
    12d0:	16056608 	strne	r6, [r5], -r8, lsl #12
    12d4:	030c054c 	movweq	r0, #50508	@ 0xc54c
    12d8:	40054a75 	andmi	r4, r5, r5, ror sl
    12dc:	0317054a 	tsteq	r7, #310378496	@ 0x12800000
    12e0:	07054a12 	smladeq	r5, r2, sl, r4
    12e4:	4c0b054a 	cfstr32mi	mvfx0, [fp], {74}	@ 0x4a
    12e8:	2f300705 	svccs	0x00300705
    12ec:	059b1b05 	ldreq	r1, [fp, #2821]	@ 0xb05
    12f0:	820b0316 	andhi	r0, fp, #1476395008	@ 0x58000000
    12f4:	054f0705 	strbeq	r0, [pc, #-1797]	@ bf7 <_start-0xf409>
    12f8:	04020038 	streq	r0, [r2], #-56	@ 0xffffffc8
    12fc:	26056601 	strcs	r6, [r5], -r1, lsl #12
    1300:	01040200 	mrseq	r0, R12_usr
    1304:	4c16054a 	cfldr32mi	mvfx0, [r6], {74}	@ 0x4a
    1308:	054b1305 	strbeq	r1, [fp, #-773]	@ 0xfffffcfb
    130c:	02056706 	andeq	r6, r5, #1572864	@ 0x180000
    1310:	30090533 	andcc	r0, r9, r3, lsr r5
    1314:	032f0105 			@ <UNDEFINED> instruction: 0x032f0105
    1318:	0558080e 	ldrbeq	r0, [r8, #-2062]	@ 0xfffff7f2
    131c:	0a056a02 	beq	15bb2c <__bss_end+0x135ef4>
    1320:	68020530 	stmdavs	r2, {r4, r5, r8, sl}
    1324:	05300905 	ldreq	r0, [r0, #-2309]!	@ 0xfffff6fb
    1328:	05862f01 	streq	r2, [r6, #3841]	@ 0xf01
    132c:	0a056a19 	beq	15bb98 <__bss_end+0x135f60>
    1330:	6909054b 	stmdbvs	r9, {r0, r1, r3, r6, r8, sl}
    1334:	a22f0105 	eorge	r0, pc, #1073741825	@ 0x40000001
    1338:	054d0905 	strbeq	r0, [sp, #-2309]	@ 0xfffff6fb
    133c:	ae034b01 	vmlage.f64	d4, d3, d1
    1340:	1b059e01 	blne	168b4c <__bss_end+0x142f14>
    1344:	4a04056c 	bmi	1028fc <__bss_end+0xdccc4>
    1348:	054c0305 	strbeq	r0, [ip, #-773]	@ 0xfffffcfb
    134c:	05059f12 	streq	r9, [r5, #-3858]	@ 0xfffff0ee
    1350:	030b054a 	movweq	r0, #46410	@ 0xb54a
    1354:	16054a09 	strne	r4, [r5], -r9, lsl #20
    1358:	831e0567 	tsthi	lr, #432013312	@ 0x19c00000
    135c:	05671305 	strbeq	r1, [r7, #-773]!	@ 0xfffffcfb
    1360:	0605a008 	streq	sl, [r5], -r8
    1364:	511a0566 	tstpl	sl, r6, ror #10
    1368:	660b058a 	strvs	r0, [fp], -sl, lsl #11
    136c:	054b1c05 	strbeq	r1, [fp, #-3077]	@ 0xfffff3fb
    1370:	03054a1a 	movweq	r4, #23066	@ 0x5a1a
    1374:	0402004f 	streq	r0, [r2], #-79	@ 0xffffffb1
    1378:	00ba060c 	adcseq	r0, sl, ip, lsl #12
    137c:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    1380:	04020066 	streq	r0, [r2], #-102	@ 0xffffff9a
    1384:	02002e03 	andeq	r2, r0, #3, 28	@ 0x30
    1388:	90080404 	andls	r0, r8, r4, lsl #8
    138c:	04020066 	streq	r0, [r2], #-102	@ 0xffffff9a
    1390:	02002e05 	andeq	r2, r0, #5, 28	@ 0x50
    1394:	00820104 	addeq	r0, r2, r4, lsl #2
    1398:	82060402 	andhi	r0, r6, #33554432	@ 0x2000000
    139c:	08040200 	stmdaeq	r4, {r9}
    13a0:	04020082 	streq	r0, [r2], #-130	@ 0xffffff7e
    13a4:	0200ba09 	andeq	fp, r0, #36864	@ 0x9000
    13a8:	08820b04 	stmeq	r2, {r2, r8, r9, fp}
    13ac:	05320690 	ldreq	r0, [r2, #-1680]!	@ 0xfffff970
    13b0:	9e170301 	cdpls	3, 1, cr0, cr7, cr1, {0}
    13b4:	96080205 	strls	r0, [r8], -r5, lsl #4
    13b8:	05a20505 	streq	r0, [r2, #1285]!	@ 0x505
    13bc:	05866809 	streq	r6, [r6, #2057]	@ 0x809
    13c0:	14054f03 	strne	r4, [r5], #-3843	@ 0xfffff0fd
    13c4:	6703052f 	strvs	r0, [r3, -pc, lsr #10]
    13c8:	8a2f0205 	bhi	bc1be4 <__bss_end+0xb9bfac>
    13cc:	05870505 	streq	r0, [r7, #1285]	@ 0x505
    13d0:	05866809 	streq	r6, [r6, #2057]	@ 0x809
    13d4:	0c054f03 	stceq	15, cr4, [r5], {3}
    13d8:	6703052f 	strvs	r0, [r3, -pc, lsr #10]
    13dc:	05300a05 	ldreq	r0, [r0, #-2565]!	@ 0xfffff5fb
    13e0:	058a2f02 	streq	r2, [sl, #3842]	@ 0xf02
    13e4:	0905a305 	stmdbeq	r5, {r0, r2, r8, r9, sp, pc}
    13e8:	0b058668 	bleq	162d90 <__bss_end+0x13d158>
    13ec:	4a05054d 	bmi	142928 <__bss_end+0x11ccf0>
    13f0:	054c1205 	strbeq	r1, [ip, #-517]	@ 0xfffffdfb
    13f4:	0c054a0e 			@ <UNDEFINED> instruction: 0x0c054a0e
    13f8:	4d0a0586 	cfstr32mi	mvfx0, [sl, #-536]	@ 0xfffffde8
    13fc:	052f0205 	streq	r0, [pc, #-517]!	@ 11ff <_start-0xee01>
    1400:	1b058801 	blne	16340c <__bss_end+0x13d7d4>
    1404:	4a040567 	bmi	1029a8 <__bss_end+0xdcd70>
    1408:	054e1005 	strbeq	r1, [lr, #-5]
    140c:	66330301 	ldrtvs	r0, [r3], -r1, lsl #6
    1410:	6e030405 	cdpvs	4, 0, cr0, cr3, cr5, {0}
    1414:	9b0a052e 	blls	2828d4 <__bss_end+0x25cc9c>
    1418:	0d030305 	stceq	3, cr0, [r3, #-20]	@ 0xffffffec
    141c:	02005808 	andeq	r5, r0, #8, 16	@ 0x80000
    1420:	02060104 	andeq	r0, r6, #4, 2
    1424:	02001228 	andeq	r1, r0, #40, 4	@ 0x80000002
    1428:	059e0304 	ldreq	r0, [lr, #772]	@ 0x304
    142c:	08a60601 	stmiaeq	r6!, {r0, r9, sl}
    1430:	03470524 	movteq	r0, #29988	@ 0x7524
    1434:	02059e0b 	andeq	r9, r5, #11, 28	@ 0xb0
    1438:	872e054a 	strhi	r0, [lr, -sl, asr #10]!
    143c:	054a0205 	strbeq	r0, [sl, #-517]	@ 0xfffffdfb
    1440:	54056b05 	strpl	r6, [r5], #-2821	@ 0xfffff4fb
    1444:	4a04056b 	bmi	1029f8 <__bss_end+0xdcdc0>
    1448:	12030105 	andne	r0, r3, #1073741825	@ 0x40000001
    144c:	031d0582 	tsteq	sp, #545259520	@ 0x20800000
    1450:	10052e74 	andne	r2, r5, r4, ror lr
    1454:	6704054a 	strvs	r0, [r4, -sl, asr #10]
    1458:	0b030105 	bleq	c1874 <__bss_end+0x9bc3c>
    145c:	ba26034a 	blt	98218c <__bss_end+0x95c554>
    1460:	11032005 	tstne	r3, r5
    1464:	4a110582 	bmi	442a74 <__bss_end+0x41ce3c>
    1468:	054c0205 	strbeq	r0, [ip, #-517]	@ 0xfffffdfb
    146c:	0405841b 	streq	r8, [r5], #-1051	@ 0xfffffbe5
    1470:	4c03054a 	cfstr32mi	mvfx0, [r3], {74}	@ 0x4a
    1474:	04020083 	streq	r0, [r2], #-131	@ 0xffffff7d
    1478:	00ba0601 	adcseq	r0, sl, r1, lsl #12
    147c:	82030402 	andhi	r0, r3, #33554432	@ 0x2000000
    1480:	05b20806 	ldreq	r0, [r2, #2054]!	@ 0x806
    1484:	3005a114 	andcc	sl, r5, r4, lsl r1
    1488:	6604054a 	strvs	r0, [r4], -sl, asr #10
    148c:	6a500b05 	bvs	14040a8 <__bss_end+0x13de470>
    1490:	054d0905 	strbeq	r0, [sp, #-2309]	@ 0xfffff6fb
    1494:	05f62f01 	ldrbeq	r2, [r6, #3841]!	@ 0xf01
    1498:	1d05841c 	cfstrsne	mvf8, [r5, #-112]	@ 0xffffff90
    149c:	83010583 	movwhi	r0, #5507	@ 0x1583
    14a0:	a40205be 	strge	r0, [r2], #-1470	@ 0xfffffa42
    14a4:	05340805 	ldreq	r0, [r4, #-2053]!	@ 0xfffff7fb
    14a8:	0d054a06 	vstreq	s8, [r5, #-24]	@ 0xffffffe8
    14ac:	6b25054c 	blvs	9429e4 <__bss_end+0x91cdac>
    14b0:	054a1905 	strbeq	r1, [sl, #-2309]	@ 0xfffff6fb
    14b4:	76054a05 	strvc	r4, [r5], -r5, lsl #20
    14b8:	01040200 	mrseq	r0, R12_usr
    14bc:	003d054a 	eorseq	r0, sp, sl, asr #10
    14c0:	4a010402 	bmi	424d0 <__bss_end+0x1c898>
    14c4:	02003805 	andeq	r3, r0, #327680	@ 0x50000
    14c8:	054a0104 	strbeq	r0, [sl, #-260]	@ 0xfffffefc
    14cc:	2105500c 	tstcs	r5, ip
    14d0:	4a590568 	bmi	1642a78 <__bss_end+0x161ce40>
    14d4:	054a0e05 	strbeq	r0, [sl, #-3589]	@ 0xfffff1fb
    14d8:	0a052e71 	beq	14cea4 <__bss_end+0x12726c>
    14dc:	4d18054a 	cfldr32mi	mvfx0, [r8, #-296]	@ 0xfffffed8
    14e0:	054a5005 	strbeq	r5, [sl, #-5]
    14e4:	04054a34 	streq	r4, [r5], #-2612	@ 0xfffff5cc
    14e8:	4a13052e 	bmi	4c29a8 <__bss_end+0x49cd70>
    14ec:	05670405 	strbeq	r0, [r7, #-1029]!	@ 0xfffffbfb
    14f0:	056a4b0c 	strbeq	r4, [sl, #-2828]!	@ 0xfffff4f4
    14f4:	09054d02 	stmdbeq	r5, {r1, r8, sl, fp, lr}
    14f8:	2f010530 	svccs	0x00010530
    14fc:	4b0f05a2 	blmi	3c2b8c <__bss_end+0x39cf54>
    1500:	03670105 	cmneq	r7, #1073741825	@ 0x40000001
    1504:	03059e32 	movweq	r9, #24114	@ 0x5e32
    1508:	03080589 	movweq	r0, #34185	@ 0x8589
    150c:	06052e17 			@ <UNDEFINED> instruction: 0x06052e17
    1510:	4c05054a 	cfstr32mi	mvfx0, [r5], {74}	@ 0x4a
    1514:	67030305 	strvs	r0, [r3, -r5, lsl #6]
    1518:	0301052e 	movweq	r0, #5422	@ 0x152e
    151c:	17054a3a 	smladxne	r5, sl, sl, r4
    1520:	4a0305db 	bmi	c2c94 <__bss_end+0x9d05c>
    1524:	05855905 	streq	r5, [r5, #2309]	@ 0x905
    1528:	0e056a04 	vmlaeq.f32	s12, s10, s8
    152c:	4d140568 	cfldr32mi	mvfx0, [r4, #-416]	@ 0xfffffe60
    1530:	836d0205 	cmnhi	sp, #1342177280	@ 0x50000000
    1534:	05836986 	streq	r6, [r3, #2438]	@ 0x986
    1538:	660a0314 			@ <UNDEFINED> instruction: 0x660a0314
    153c:	14030105 	strne	r0, [r3], #-261	@ 0xfffffefb
    1540:	66170366 	ldrvs	r0, [r7], -r6, ror #6
    1544:	05691205 	strbeq	r1, [r9, #-517]!	@ 0xfffffdfb
    1548:	03054a02 	movweq	r4, #23042	@ 0x5a02
    154c:	00600530 	rsbeq	r0, r0, r0, lsr r5
    1550:	08030402 	stmdaeq	r3, {r1, sl}
    1554:	003e051e 	eorseq	r0, lr, lr, lsl r5
    1558:	66010402 	strvs	r0, [r1], -r2, lsl #8
    155c:	4b6b0205 	blmi	1ac1d78 <__bss_end+0x1a9c140>
    1560:	4e03054b 	cfsh32mi	mvfx0, mvfx3, #43
    1564:	50140550 	andspl	r0, r4, r0, asr r5
    1568:	05671c05 	strbeq	r1, [r7, #-3077]!	@ 0xfffff3fb
    156c:	5c086701 	stcpl	7, cr6, [r8], {1}
    1570:	056d1605 	strbeq	r1, [sp, #-1541]!	@ 0xfffff9fb
    1574:	04054a05 	streq	r4, [r5], #-2565	@ 0xfffff5fb
    1578:	2f14054c 	svccs	0x0014054c
    157c:	05ba1205 	ldreq	r1, [sl, #517]!	@ 0x205
    1580:	06052f04 	streq	r2, [r5], -r4, lsl #30
    1584:	6a050530 	bvs	142a4c <__bss_end+0x11ce14>
    1588:	05301b05 	ldreq	r1, [r0, #-2821]!	@ 0xfffff4fb
    158c:	06054a0c 	streq	r4, [r5], -ip, lsl #20
    1590:	059f834b 	ldreq	r8, [pc, #843]	@ 18e3 <_start-0xe71d>
    1594:	0530a005 	ldreq	sl, [r0, #-5]!
    1598:	05be4f01 	ldreq	r4, [lr, #3841]!	@ 0xf01
    159c:	12058402 	andne	r8, r5, #33554432	@ 0x2000000
    15a0:	4a040584 	bmi	102bb8 <__bss_end+0xdcf80>
    15a4:	05690305 	strbeq	r0, [r9, #-773]!	@ 0xfffffcfb
    15a8:	03054a56 	movweq	r4, #23126	@ 0x5a56
    15ac:	0301054a 	movweq	r0, #5450	@ 0x154a
    15b0:	0305820f 	movweq	r8, #21007	@ 0x520f
    15b4:	052e7603 	streq	r7, [lr, #-1539]!	@ 0xfffff9fd
    15b8:	03054a4e 	movweq	r4, #23118	@ 0x5a4e
    15bc:	8713054a 	ldrhi	r0, [r3, -sl, asr #10]
    15c0:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
    15c4:	01056819 	tsteq	r5, r9, lsl r8
    15c8:	1a05f669 	bne	17ef74 <__bss_end+0x15933c>
    15cc:	680405bf 	stmdavs	r4, {r0, r1, r2, r3, r4, r5, r7, r8, sl}
    15d0:	056b1705 	strbeq	r1, [fp, #-1797]!	@ 0xfffff8fb
    15d4:	0402002c 	streq	r0, [r2], #-44	@ 0xffffffd4
    15d8:	17056601 	strne	r6, [r5, -r1, lsl #12]
    15dc:	02040200 	andeq	r0, r4, #0, 4
    15e0:	001505ba 			@ <UNDEFINED> instruction: 0x001505ba
    15e4:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
    15e8:	054c0f05 	strbeq	r0, [ip, #-3845]	@ 0xfffff0fb
    15ec:	04054a05 	streq	r4, [r5], #-2565	@ 0xfffff5fb
    15f0:	4b0d054d 	blmi	342b2c <__bss_end+0x31cef4>
    15f4:	056b1405 	strbeq	r1, [fp, #-1029]!	@ 0xfffffbfb
    15f8:	04054a3b 	streq	r4, [r5], #-2619	@ 0xfffff5c5
    15fc:	0309052e 	movweq	r0, #38190	@ 0x952e
    1600:	0105820a 	tsteq	r5, sl, lsl #4
    1604:	0302052f 	movweq	r0, #9519	@ 0x252f
    1608:	0566019d 	strbeq	r0, [r6, #-413]!	@ 0xfffffe63
    160c:	05838a03 	streq	r8, [r3, #2563]	@ 0xa03
    1610:	06024b02 	streq	r4, [r2], -r2, lsl #22
    1614:	8b010100 	blhi	41a1c <__bss_end+0x1bde4>
    1618:	03000001 	movweq	r0, #1
    161c:	00005f00 	andeq	r5, r0, r0, lsl #30
    1620:	fb010200 	blx	41e2a <__bss_end+0x1c1f2>
    1624:	01000d0e 	tsteq	r0, lr, lsl #26
    1628:	00010101 	andeq	r0, r1, r1, lsl #2
    162c:	00010000 	andeq	r0, r1, r0
    1630:	682f0100 	stmdavs	pc!, {r8}	@ <UNPREDICTABLE>
    1634:	2f656d6f 	svccs	0x00656d6f
    1638:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    163c:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
    1640:	63726178 	cmnvs	r2, #120, 2
    1644:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
    1648:	61522f63 	cmpvs	r2, r3, ror #30
    164c:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
    1650:	50797272 	rsbspl	r7, r9, r2, ror r2
    1654:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
    1658:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
    165c:	442f534f 	strtmi	r5, [pc], #-847	@ 1664 <_start-0xe99c>
    1660:	2f6f6d65 	svccs	0x006f6d65
    1664:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    1668:	00737265 	rsbseq	r7, r3, r5, ror #4
    166c:	71726900 	cmnvc	r2, r0, lsl #18
    1670:	0100632e 	tsteq	r0, lr, lsr #6
    1674:	72690000 	rsbvc	r0, r9, #0
    1678:	00682e71 	rsbeq	r2, r8, r1, ror lr
    167c:	00000001 	andeq	r0, r0, r1
    1680:	05000105 	streq	r0, [r0, #-261]	@ 0xfffffefb
    1684:	0234cc02 	eorseq	ip, r4, #512	@ 0x200
    1688:	011e0300 	tsteq	lr, r0, lsl #6
    168c:	059f0805 	ldreq	r0, [pc, #2053]	@ 1e99 <_start-0xe167>
    1690:	1905311b 	stmdbne	r5, {r0, r1, r3, r4, r8, ip, sp}
    1694:	01040200 	mrseq	r0, R12_usr
    1698:	0010054a 	andseq	r0, r0, sl, asr #10
    169c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    16a0:	85190531 	ldrhi	r0, [r9, #-1329]	@ 0xfffffacf
    16a4:	05660605 	strbeq	r0, [r6, #-1541]!	@ 0xfffff9fb
    16a8:	04054b16 	streq	r4, [r5], #-2838	@ 0xfffff4ea
    16ac:	f5140566 			@ <UNDEFINED> instruction: 0xf5140566
    16b0:	05660e05 	strbeq	r0, [r6, #-3589]!	@ 0xfffff1fb
    16b4:	09052e0b 	stmdbeq	r5, {r0, r1, r3, r9, sl, fp, sp}
    16b8:	05667303 	strbeq	r7, [r6, #-771]!	@ 0xfffffcfd
    16bc:	660f0301 	strvs	r0, [pc], -r1, lsl #6
    16c0:	4b2f05a6 	blmi	bc2d60 <__bss_end+0xb9d128>
    16c4:	052e1905 	streq	r1, [lr, #-2309]!	@ 0xfffff6fb
    16c8:	05053115 	streq	r3, [r5, #-277]	@ 0xfffffeeb
    16cc:	4b14052e 	blmi	502b8c <__bss_end+0x4dcf54>
    16d0:	054a2805 	strbeq	r2, [sl, #-2053]	@ 0xfffff7fb
    16d4:	15054a03 	strne	r4, [r5, #-2563]	@ 0xfffff5fd
    16d8:	2e050585 	cfsh32cs	mvfx0, mvfx5, #-59
    16dc:	054b1405 	strbeq	r1, [fp, #-1029]	@ 0xfffffbfb
    16e0:	03054a28 	movweq	r4, #23080	@ 0x5a28
    16e4:	8515054a 	ldrhi	r0, [r5, #-1354]	@ 0xfffffab6
    16e8:	052e0505 	streq	r0, [lr, #-1285]!	@ 0xfffffafb
    16ec:	25054b2e 	strcs	r4, [r5, #-2862]	@ 0xfffff4d2
    16f0:	2e03054a 	cfsh32cs	mvfx0, mvfx3, #42
    16f4:	85830105 	strhi	r0, [r3, #261]	@ 0x105
    16f8:	054b0205 	strbeq	r0, [fp, #-517]	@ 0xfffffdfb
    16fc:	05852f01 	streq	r2, [r5, #3841]	@ 0xf01
    1700:	01054b02 	tsteq	r5, r2, lsl #22
    1704:	0505852f 	streq	r8, [r5, #-1327]	@ 0xfffffad1
    1708:	670305bb 			@ <UNDEFINED> instruction: 0x670305bb
    170c:	832f2105 			@ <UNDEFINED> instruction: 0x832f2105
    1710:	05bb0305 	ldreq	r0, [fp, #773]!	@ 0x305
    1714:	05853001 	streq	r3, [r5, #1]
    1718:	10058323 	andne	r8, r5, r3, lsr #6
    171c:	6805054a 	stmdavs	r5, {r1, r3, r6, r8, sl}
    1720:	05670805 	strbeq	r0, [r7, #-2053]!	@ 0xfffff7fb
    1724:	0a052e12 	beq	14cf74 <__bss_end+0x12733c>
    1728:	4a0e054b 	bmi	382c5c <__bss_end+0x35d024>
    172c:	0a030105 	beq	c1b48 <__bss_end+0x9bf10>
    1730:	030a0582 	movweq	r0, #42370	@ 0xa582
    1734:	08052e78 	stmdaeq	r5, {r3, r4, r5, r6, r9, sl, fp, sp}
    1738:	2e120567 	cfmsc32cs	mvfx0, mvfx2, mvfx7
    173c:	054b0a05 	strbeq	r0, [fp, #-2565]	@ 0xfffff5fb
    1740:	01054a0e 	tsteq	r5, lr, lsl #20
    1744:	2a0a0588 	bcs	282d6c <__bss_end+0x25d134>
    1748:	05670805 	strbeq	r0, [r7, #-2053]!	@ 0xfffff7fb
    174c:	0a052e16 	beq	14cfac <__bss_end+0x127374>
    1750:	4a0e054b 	bmi	382c84 <__bss_end+0x35d04c>
    1754:	bd840105 	stflts	f0, [r4, #20]
    1758:	05832305 	streq	r2, [r3, #773]	@ 0x305
    175c:	05054a10 	streq	r4, [r5, #-2576]	@ 0xfffff5f0
    1760:	67080568 	strvs	r0, [r8, -r8, ror #10]
    1764:	052e1305 	streq	r1, [lr, #-773]!	@ 0xfffffcfb
    1768:	11054b0a 	tstne	r5, sl, lsl #22
    176c:	4a0e054a 	bmi	382c9c <__bss_end+0x35d064>
    1770:	0a030105 	beq	c1b8c <__bss_end+0x9bf54>
    1774:	030a0566 	movweq	r0, #42342	@ 0xa566
    1778:	08052e78 	stmdaeq	r5, {r3, r4, r5, r6, r9, sl, fp, sp}
    177c:	2e130567 	cfmsc32cs	mvfx0, mvfx3, mvfx7
    1780:	054b0a05 	strbeq	r0, [fp, #-2565]	@ 0xfffff5fb
    1784:	0e054a11 			@ <UNDEFINED> instruction: 0x0e054a11
    1788:	6c01054a 	cfstr32vs	mvfx0, [r1], {74}	@ 0x4a
    178c:	052a0a05 	streq	r0, [sl, #-2565]!	@ 0xfffff5fb
    1790:	17056708 	strne	r6, [r5, -r8, lsl #14]
    1794:	4b0a052e 	blmi	282c54 <__bss_end+0x25d01c>
    1798:	054a1105 	strbeq	r1, [sl, #-261]	@ 0xfffffefb
    179c:	01054a0e 	tsteq	r5, lr, lsl #20
    17a0:	000c0268 	andeq	r0, ip, r8, ror #4
    17a4:	01ec0101 	mvneq	r0, r1, lsl #2
    17a8:	00030000 	andeq	r0, r3, r0
    17ac:	00000061 	andeq	r0, r0, r1, rrx
    17b0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    17b4:	0101000d 	tsteq	r1, sp
    17b8:	00000101 	andeq	r0, r0, r1, lsl #2
    17bc:	00000100 	andeq	r0, r0, r0, lsl #2
    17c0:	6f682f01 	svcvs	0x00682f01
    17c4:	632f656d 			@ <UNDEFINED> instruction: 0x632f656d
    17c8:	6379646d 	cmnvs	r9, #1828716544	@ 0x6d000000
    17cc:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    17d0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    17d4:	6372732f 	cmnvs	r2, #-1140850688	@ 0xbc000000
    17d8:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
    17dc:	72656270 	rsbvc	r6, r5, #112, 4
    17e0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    17e4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
    17e8:	4f545265 	svcmi	0x00545265
    17ec:	65442f53 	strbvs	r2, [r4, #-3923]	@ 0xfffff0ad
    17f0:	442f6f6d 	strtmi	r6, [pc], #-3949	@ 17f8 <_start-0xe808>
    17f4:	65766972 	ldrbvs	r6, [r6, #-2418]!	@ 0xfffff68e
    17f8:	00007372 	andeq	r7, r0, r2, ror r3
    17fc:	6f697067 	svcvs	0x00697067
    1800:	0100632e 	tsteq	r0, lr, lsr #6
    1804:	70670000 	rsbvc	r0, r7, r0
    1808:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    180c:	00000100 	andeq	r0, r0, r0, lsl #2
    1810:	00410500 	subeq	r0, r1, r0, lsl #10
    1814:	38700205 	ldmdacc	r0!, {r0, r2, r9}^
    1818:	e8030002 	stmda	r3, {r1}
    181c:	16050100 	strne	r0, [r5], -r0, lsl #2
    1820:	820605a0 	andhi	r0, r6, #160, 10	@ 0x28000000
    1824:	05301b05 	ldreq	r1, [r0, #-2821]!	@ 0xfffff4fb
    1828:	14052e10 	strne	r2, [r5], #-3600	@ 0xfffff1f0
    182c:	08060568 	stmdaeq	r6, {r3, r5, r6, r8, sl}
    1830:	2f180520 	svccs	0x00180520
    1834:	05820f05 	streq	r0, [r2, #3845]	@ 0xf05
    1838:	06054a09 	streq	r4, [r5], -r9, lsl #20
    183c:	6713054a 	ldrvs	r0, [r3, -sl, asr #10]
    1840:	054a2305 	strbeq	r2, [sl, #-773]	@ 0xfffffcfb
    1844:	0605821a 			@ <UNDEFINED> instruction: 0x0605821a
    1848:	6707052e 	strvs	r0, [r7, -lr, lsr #10]
    184c:	052e1805 	streq	r1, [lr, #-2053]!	@ 0xfffff7fb
    1850:	3f056701 	svccc	0x00056701
    1854:	bb0205bc 	bllt	82f4c <__bss_end+0x5d314>
    1858:	05830105 	streq	r0, [r3, #261]	@ 0x105
    185c:	10056838 	andne	r6, r5, r8, lsr r8
    1860:	6720059f 			@ <UNDEFINED> instruction: 0x6720059f
    1864:	054a1705 	strbeq	r1, [sl, #-1797]	@ 0xfffff8fb
    1868:	04054a10 	streq	r4, [r5], #-2576	@ 0xfffff5f0
    186c:	67080530 	smladxvs	r8, r0, r5, r0
    1870:	052e0f05 	streq	r0, [lr, #-3845]!	@ 0xfffff0fb
    1874:	17059e08 	strne	r9, [r5, -r8, lsl #28]
    1878:	da01052e 	ble	42d38 <__bss_end+0x1d100>
    187c:	052c0805 	streq	r0, [ip, #-2053]!	@ 0xfffff7fb
    1880:	08052e0f 	stmdaeq	r5, {r0, r1, r2, r3, r9, sl, fp, sp}
    1884:	2e170566 	cfmsc32cs	mvfx0, mvfx7, mvfx6
    1888:	05a00105 	streq	r0, [r0, #261]!	@ 0x105
    188c:	1005a023 	andne	sl, r5, r3, lsr #32
    1890:	2e1e0583 	cdpcs	5, 1, cr0, cr14, cr3, {4}
    1894:	054a1705 	strbeq	r1, [sl, #-1797]	@ 0xfffff8fb
    1898:	2305822c 	movwcs	r8, #21036	@ 0x522c
    189c:	2e31054a 	cdpcs	5, 3, cr0, cr1, cr10, {2}
    18a0:	a12f0105 			@ <UNDEFINED> instruction: 0xa12f0105
    18a4:	05bb1705 	ldreq	r1, [fp, #1797]!	@ 0x705
    18a8:	052f6610 	streq	r6, [pc, #-1552]!	@ 12a0 <_start-0xed60>
    18ac:	08056802 	stmdaeq	r5, {r1, fp, sp, lr}
    18b0:	0f055a08 	svceq	0x00055a08
    18b4:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    18b8:	052e1705 	streq	r1, [lr, #-1797]!	@ 0xfffff8fb
    18bc:	0805d703 	stmdaeq	r5, {r0, r1, r8, r9, sl, ip, lr, pc}
    18c0:	2e0f0530 	cfmv64hrcs	mvdx15, r0
    18c4:	05660805 	strbeq	r0, [r6, #-2053]!	@ 0xfffff7fb
    18c8:	03052e17 	movweq	r2, #24087	@ 0x5e17
    18cc:	3008059f 	mulcc	r8, pc, r5	@ <UNPREDICTABLE>
    18d0:	052e0f05 	streq	r0, [lr, #-3845]!	@ 0xfffff0fb
    18d4:	17059e08 	strne	r9, [r5, -r8, lsl #28]
    18d8:	d703052e 	strle	r0, [r3, -lr, lsr #10]
    18dc:	05300805 	ldreq	r0, [r0, #-2053]!	@ 0xfffff7fb
    18e0:	08052e0f 	stmdaeq	r5, {r0, r1, r2, r3, r9, sl, fp, sp}
    18e4:	2e170566 	cfmsc32cs	mvfx0, mvfx7, mvfx6
    18e8:	059f0305 	ldreq	r0, [pc, #773]	@ 1bf5 <_start-0xe40b>
    18ec:	10053008 	andne	r3, r5, r8
    18f0:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    18f4:	052e1805 	streq	r1, [lr, #-2053]!	@ 0xfffff7fb
    18f8:	0805d703 	stmdaeq	r5, {r0, r1, r8, r9, sl, ip, lr, pc}
    18fc:	2e100530 	cfmvr64hcs	r0, mvdx0
    1900:	05660805 	strbeq	r0, [r6, #-2053]!	@ 0xfffff7fb
    1904:	03052e18 	movweq	r2, #24088	@ 0x5e18
    1908:	0105309f 	swpeq	r3, pc, [r5]	@ <UNPREDICTABLE>
    190c:	2105a130 	tstcs	r5, r0, lsr r1
    1910:	4a1805bb 	bmi	603004 <__bss_end+0x5dd3cc>
    1914:	054a1505 	strbeq	r1, [sl, #-1285]	@ 0xfffffafb
    1918:	052f2e10 	streq	r2, [pc, #-3600]!	@ b10 <_start-0xf4f0>
    191c:	08056802 	stmdaeq	r5, {r1, fp, sp, lr}
    1920:	0f055a08 	svceq	0x00055a08
    1924:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    1928:	052e1705 	streq	r1, [lr, #-1797]!	@ 0xfffff8fb
    192c:	0805d703 	stmdaeq	r5, {r0, r1, r8, r9, sl, ip, lr, pc}
    1930:	2e0f0530 	cfmv64hrcs	mvdx15, r0
    1934:	05660805 	strbeq	r0, [r6, #-2053]!	@ 0xfffff7fb
    1938:	03052e17 	movweq	r2, #24087	@ 0x5e17
    193c:	3008059f 	mulcc	r8, pc, r5	@ <UNPREDICTABLE>
    1940:	052e0f05 	streq	r0, [lr, #-3845]!	@ 0xfffff0fb
    1944:	17059e08 	strne	r9, [r5, -r8, lsl #28]
    1948:	d703052e 	strle	r0, [r3, -lr, lsr #10]
    194c:	05300805 	ldreq	r0, [r0, #-2053]!	@ 0xfffff7fb
    1950:	08052e0f 	stmdaeq	r5, {r0, r1, r2, r3, r9, sl, fp, sp}
    1954:	2e170566 	cfmsc32cs	mvfx0, mvfx7, mvfx6
    1958:	059f0305 	ldreq	r0, [pc, #773]	@ 1c65 <_start-0xe39b>
    195c:	10053008 	andne	r3, r5, r8
    1960:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    1964:	052e1805 	streq	r1, [lr, #-2053]!	@ 0xfffff7fb
    1968:	0805d703 	stmdaeq	r5, {r0, r1, r8, r9, sl, ip, lr, pc}
    196c:	2e100530 	cfmvr64hcs	r0, mvdx0
    1970:	05660805 	strbeq	r0, [r6, #-2053]!	@ 0xfffff7fb
    1974:	03052e18 	movweq	r2, #24088	@ 0x5e18
    1978:	0105309f 	swpeq	r3, pc, [r5]	@ <UNPREDICTABLE>
    197c:	2005a130 	andcs	sl, r5, r0, lsr r1
    1980:	4a170583 	bmi	5c2f94 <__bss_end+0x59d35c>
    1984:	2f4a1005 	svccs	0x004a1005
    1988:	05680705 	strbeq	r0, [r8, #-1797]!	@ 0xfffff8fb
    198c:	01052e16 	tsteq	r5, r6, lsl lr
    1990:	000a0283 	andeq	r0, sl, r3, lsl #5
    1994:	02710101 	rsbseq	r0, r1, #1073741824	@ 0x40000000
    1998:	00030000 	andeq	r0, r3, r0
    199c:	000000f3 	strdeq	r0, [r0], -r3
    19a0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    19a4:	0101000d 	tsteq	r1, sp
    19a8:	00000101 	andeq	r0, r0, r1, lsl #2
    19ac:	00000100 	andeq	r0, r0, r0, lsl #2
    19b0:	6f682f01 	svcvs	0x00682f01
    19b4:	632f656d 			@ <UNDEFINED> instruction: 0x632f656d
    19b8:	6379646d 	cmnvs	r9, #1828716544	@ 0x6d000000
    19bc:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    19c0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    19c4:	6372732f 	cmnvs	r2, #-1140850688	@ 0xbc000000
    19c8:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
    19cc:	72656270 	rsbvc	r6, r5, #112, 4
    19d0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    19d4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
    19d8:	4f545265 	svcmi	0x00545265
    19dc:	462f2f53 	qsaxmi	r2, pc, r3	@ <UNPREDICTABLE>
    19e0:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
    19e4:	2f534f54 	svccs	0x00534f54
    19e8:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
    19ec:	702f6563 	eorvc	r6, pc, r3, ror #10
    19f0:	6174726f 	cmnvs	r4, pc, ror #4
    19f4:	2f656c62 	svccs	0x00656c62
    19f8:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	@ 0xfffffecc
    19fc:	00676e61 	rsbeq	r6, r7, r1, ror #28
    1a00:	7273752f 	rsbsvc	r7, r3, #197132288	@ 0xbc00000
    1a04:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
    1a08:	6363672f 	cmnvs	r3, #12320768	@ 0xbc0000
    1a0c:	6d72612f 	ldfvse	f6, [r2, #-188]!	@ 0xffffff44
    1a10:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1a14:	61652d65 	cmnvs	r5, r5, ror #26
    1a18:	312f6962 			@ <UNDEFINED> instruction: 0x312f6962
    1a1c:	2e322e33 	mrccs	14, 1, r2, cr2, cr3, {1}
    1a20:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    1a24:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
    1a28:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	@ <UNPREDICTABLE>
    1a2c:	2f656d6f 	svccs	0x00656d6f
    1a30:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    1a34:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
    1a38:	63726178 	cmnvs	r2, #120, 2
    1a3c:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
    1a40:	61522f63 	cmpvs	r2, r3, ror #30
    1a44:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
    1a48:	50797272 	rsbspl	r7, r9, r2, ror r2
    1a4c:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
    1a50:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
    1a54:	462f534f 	strtmi	r5, [pc], -pc, asr #6
    1a58:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
    1a5c:	2f534f54 	svccs	0x00534f54
    1a60:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
    1a64:	692f6563 	stmdbvs	pc!, {r0, r1, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
    1a68:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
    1a6c:	00006564 	andeq	r6, r0, r4, ror #10
    1a70:	70616568 	rsbvc	r6, r1, r8, ror #10
    1a74:	632e345f 			@ <UNDEFINED> instruction: 0x632e345f
    1a78:	00000100 	andeq	r0, r0, r0, lsl #2
    1a7c:	64647473 	strbtvs	r7, [r4], #-1139	@ 0xfffffb8d
    1a80:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1a84:	00000200 	andeq	r0, r0, r0, lsl #4
    1a88:	6b736174 	blvs	1cda060 <__bss_end+0x1cb4428>
    1a8c:	0300682e 	movweq	r6, #2094	@ 0x82e
    1a90:	05000000 	streq	r0, [r0, #-0]
    1a94:	02050001 	andeq	r0, r5, #1
    1a98:	00023e48 	andeq	r3, r2, r8, asr #28
    1a9c:	01019203 	tsteq	r1, r3, lsl #4
    1aa0:	05840705 	streq	r0, [r4, #1797]	@ 0x705
    1aa4:	0d054c02 	stceq	12, cr4, [r5, #-8]
    1aa8:	4a050532 	bmi	142f78 <__bss_end+0x11d340>
    1aac:	054c0405 	strbeq	r0, [ip, #-1029]	@ 0xfffffbfb
    1ab0:	10053305 	andne	r3, r5, r5, lsl #6
    1ab4:	a2140568 	andsge	r0, r4, #104, 10	@ 0x1a000000
    1ab8:	054a0605 	strbeq	r0, [sl, #-1541]	@ 0xfffff9fb
    1abc:	05054d11 	streq	r4, [r5, #-3345]	@ 0xfffff2ef
    1ac0:	002c0586 	eoreq	r0, ip, r6, lsl #11
    1ac4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1ac8:	02001b05 	andeq	r1, r0, #5120	@ 0x1400
    1acc:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
    1ad0:	0c056a14 			@ <UNDEFINED> instruction: 0x0c056a14
    1ad4:	6709054b 	strvs	r0, [r9, -fp, asr #10]
    1ad8:	05301505 	ldreq	r1, [r0, #-1285]!	@ 0xfffffafb
    1adc:	14054b0d 	strne	r4, [r5], #-2829	@ 0xfffff4f3
    1ae0:	4a310563 	bmi	c43074 <__bss_end+0xc1d43c>
    1ae4:	02003d05 	andeq	r3, r0, #320	@ 0x140
    1ae8:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
    1aec:	04020031 	streq	r0, [r2], #-49	@ 0xffffffcf
    1af0:	10054a01 	andne	r4, r5, r1, lsl #20
    1af4:	4a060552 	bmi	183044 <__bss_end+0x15d40c>
    1af8:	056a4205 	strbeq	r4, [sl, #-517]!	@ 0xfffffdfb
    1afc:	0e054a10 	vmoveq	s10, r4
    1b00:	4e2f052e 	cfsh64mi	mvdx0, mvdx15, #30
    1b04:	054a2605 	strbeq	r2, [sl, #-1541]	@ 0xfffff9fb
    1b08:	1f054d12 	svcne	0x00054d12
    1b0c:	4a31054a 	bmi	c4303c <__bss_end+0xc1d404>
    1b10:	054a0705 	strbeq	r0, [sl, #-1797]	@ 0xfffff8fb
    1b14:	2a054f15 	bcs	155770 <__bss_end+0x12fb38>
    1b18:	4a370586 	bmi	dc3138 <__bss_end+0xd9d500>
    1b1c:	054a2105 	strbeq	r2, [sl, #-261]	@ 0xfffffefb
    1b20:	06054b1a 			@ <UNDEFINED> instruction: 0x06054b1a
    1b24:	4d190569 	cfldr32mi	mvfx0, [r9, #-420]	@ 0xfffffe5c
    1b28:	054a2305 	strbeq	r2, [sl, #-773]	@ 0xfffffcfb
    1b2c:	02054a19 	andeq	r4, r5, #102400	@ 0x19000
    1b30:	030c056a 	movweq	r0, #50538	@ 0xc56a
    1b34:	09052e0c 	stmdbeq	r5, {r2, r3, r9, sl, fp, sp}
    1b38:	2f0105bc 	svccs	0x000105bc
    1b3c:	831005da 	tsthi	r0, #914358272	@ 0x36800000
    1b40:	054d0405 	strbeq	r0, [sp, #-1029]	@ 0xfffffbfb
    1b44:	0a056a07 	beq	15c368 <__bss_end+0x136730>
    1b48:	4c0305a1 	cfstr32mi	mvfx0, [r3], {161}	@ 0xa1
    1b4c:	05312105 	ldreq	r2, [r1, #-261]!	@ 0xfffffefb
    1b50:	04054a18 	streq	r4, [r5], #-2584	@ 0xfffff5e8
    1b54:	4c03059f 	cfstr32mi	mvfx0, [r3], {159}	@ 0x9f
    1b58:	86300105 	ldrthi	r0, [r0], -r5, lsl #2
    1b5c:	054b0905 	strbeq	r0, [fp, #-2309]	@ 0xfffff6fb
    1b60:	4ca24b01 	fstmiaxmi	r2!, {d4-d3}	@ Deprecated
    1b64:	03190586 	tsteq	r9, #562036736	@ 0x21800000
    1b68:	14056609 	strne	r6, [r5], #-1545	@ 0xfffff9f7
    1b6c:	6a1c0567 	bvs	703110 <__bss_end+0x6dd4d8>
    1b70:	672e0d05 	strvs	r0, [lr, -r5, lsl #26]!
    1b74:	059f0805 	ldreq	r0, [pc, #2053]	@ 2381 <_start-0xdc7f>
    1b78:	14056807 	strne	r6, [r5], #-2055	@ 0xfffff7f9
    1b7c:	4b07054a 	blmi	1c30ac <__bss_end+0x19d474>
    1b80:	054a1905 	strbeq	r1, [sl, #-2309]	@ 0xfffff6fb
    1b84:	30054e13 	andcc	r4, r5, r3, lsl lr
    1b88:	661f054b 	ldrvs	r0, [pc], -fp, asr #10
    1b8c:	054b2405 	strbeq	r2, [fp, #-1029]	@ 0xfffffbfb
    1b90:	01058516 	tsteq	r5, r6, lsl r5
    1b94:	1205f6bb 	andne	pc, r5, #196083712	@ 0xbb00000
    1b98:	4a020588 	bmi	831c0 <__bss_end+0x5d588>
    1b9c:	02005705 	andeq	r5, r0, #1310720	@ 0x140000
    1ba0:	052e0304 	streq	r0, [lr, #-772]!	@ 0xfffffcfc
    1ba4:	04020027 	streq	r0, [r2], #-39	@ 0xffffffd9
    1ba8:	39056601 	stmdbcc	r5, {r0, r9, sl, sp, lr}
    1bac:	01040200 	mrseq	r0, R12_usr
    1bb0:	6d06054a 	cfstr32vs	mvfx0, [r6, #-296]	@ 0xfffffed8
    1bb4:	054b1805 	strbeq	r1, [fp, #-2053]	@ 0xfffff7fb
    1bb8:	04054a0c 	streq	r4, [r5], #-2572	@ 0xfffff5f4
    1bbc:	680d054a 	stmdavs	sp, {r1, r3, r6, r8, sl}
    1bc0:	054a2c05 	strbeq	r2, [sl, #-3077]	@ 0xfffff3fb
    1bc4:	13054a1a 	movwne	r4, #23066	@ 0x5a1a
    1bc8:	4f060567 	svcmi	0x00060567
    1bcc:	054b1d05 	strbeq	r1, [fp, #-3333]	@ 0xfffff2fb
    1bd0:	4d054a0c 	vstrmi	s8, [r5, #-48]	@ 0xffffffd0
    1bd4:	4a04054a 	bmi	103104 <__bss_end+0xdd4cc>
    1bd8:	054c1105 	strbeq	r1, [ip, #-261]	@ 0xfffffefb
    1bdc:	05054a23 	streq	r4, [r5, #-2595]	@ 0xfffff5dd
    1be0:	4d13054a 	cfldr32mi	mvfx0, [r3, #-296]	@ 0xfffffed8
    1be4:	054a2d05 	strbeq	r2, [sl, #-3333]	@ 0xfffff2fb
    1be8:	20054a3e 	andcs	r4, r5, lr, lsr sl
    1bec:	6731052e 	ldrvs	r0, [r1, -lr, lsr #10]!
    1bf0:	054a4205 	strbeq	r4, [sl, #-517]	@ 0xfffffdfb
    1bf4:	056a2e25 	strbeq	r2, [sl, #-3621]!	@ 0xfffff1db
    1bf8:	2405a330 	strcs	sl, [r5], #-816	@ 0xfffffcd0
    1bfc:	5104054a 	tstpl	r4, sl, asr #10
    1c00:	05841f05 	streq	r1, [r4, #3845]	@ 0xf05
    1c04:	0c026801 	stceq	8, cr6, [r2], {1}
    1c08:	ef010100 	svc	0x00010100
    1c0c:	03000001 	movweq	r0, #1
    1c10:	00015500 	andeq	r5, r1, r0, lsl #10
    1c14:	fb010200 	blx	4241e <__bss_end+0x1c7e6>
    1c18:	01000d0e 	tsteq	r0, lr, lsl #26
    1c1c:	00010101 	andeq	r0, r1, r1, lsl #2
    1c20:	00010000 	andeq	r0, r1, r0
    1c24:	682f0100 	stmdavs	pc!, {r8}	@ <UNPREDICTABLE>
    1c28:	2f656d6f 	svccs	0x00656d6f
    1c2c:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    1c30:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
    1c34:	63726178 	cmnvs	r2, #120, 2
    1c38:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
    1c3c:	61522f63 	cmpvs	r2, r3, ror #30
    1c40:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
    1c44:	50797272 	rsbspl	r7, r9, r2, ror r2
    1c48:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
    1c4c:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
    1c50:	442f534f 	strtmi	r5, [pc], #-847	@ 1c58 <_start-0xe3a8>
    1c54:	006f6d65 	rsbeq	r6, pc, r5, ror #26
    1c58:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ 1ba4 <_start-0xe45c>
    1c5c:	6d632f65 	stclvs	15, cr2, [r3, #-404]!	@ 0xfffffe6c
    1c60:	2f637964 	svccs	0x00637964
    1c64:	61786548 	cmnvs	r8, r8, asr #10
    1c68:	2f686372 	svccs	0x00686372
    1c6c:	2f637273 	svccs	0x00637273
    1c70:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1c74:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
    1c78:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
    1c7c:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
    1c80:	534f5452 	movtpl	r5, #62546	@ 0xf452
    1c84:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
    1c88:	4f545265 	svcmi	0x00545265
    1c8c:	6f532f53 	svcvs	0x00532f53
    1c90:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
    1c94:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
    1c98:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
    1c9c:	6f682f00 	svcvs	0x00682f00
    1ca0:	632f656d 			@ <UNDEFINED> instruction: 0x632f656d
    1ca4:	6379646d 	cmnvs	r9, #1828716544	@ 0x6d000000
    1ca8:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    1cac:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1cb0:	6372732f 	cmnvs	r2, #-1140850688	@ 0xbc000000
    1cb4:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
    1cb8:	72656270 	rsbvc	r6, r5, #112, 4
    1cbc:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1cc0:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
    1cc4:	4f545265 	svcmi	0x00545265
    1cc8:	72462f53 	subvc	r2, r6, #332	@ 0x14c
    1ccc:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
    1cd0:	532f534f 			@ <UNDEFINED> instruction: 0x532f534f
    1cd4:	6372756f 	cmnvs	r2, #465567744	@ 0x1bc00000
    1cd8:	6f702f65 	svcvs	0x00702f65
    1cdc:	62617472 	rsbvs	r7, r1, #1912602624	@ 0x72000000
    1ce0:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
    1ce4:	522f4343 	eorpl	r4, pc, #201326593	@ 0xc000001
    1ce8:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
    1cec:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1cf0:	2f006950 	svccs	0x00006950
    1cf4:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
    1cf8:	646d632f 	strbtvs	r6, [sp], #-815	@ 0xfffffcd1
    1cfc:	482f6379 	stmdami	pc!, {r0, r3, r4, r5, r6, r8, r9, sp, lr}	@ <UNPREDICTABLE>
    1d00:	72617865 	rsbvc	r7, r1, #6619136	@ 0x650000
    1d04:	732f6863 			@ <UNDEFINED> instruction: 0x732f6863
    1d08:	522f6372 	eorpl	r6, pc, #-939524095	@ 0xc8000001
    1d0c:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
    1d10:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1d14:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
    1d18:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
    1d1c:	2f534f54 	svccs	0x00534f54
    1d20:	6f6d6544 	svcvs	0x006d6544
    1d24:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1d28:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
    1d2c:	616d0000 	cmnvs	sp, r0
    1d30:	632e6e69 			@ <UNDEFINED> instruction: 0x632e6e69
    1d34:	00000100 	andeq	r0, r0, r0, lsl #2
    1d38:	6a6f7270 	bvs	1bde700 <__bss_end+0x1bb8ac8>
    1d3c:	73666564 	cmnvc	r6, #100, 10	@ 0x19000000
    1d40:	0200682e 	andeq	r6, r0, #3014656	@ 0x2e0000
    1d44:	6f700000 	svcvs	0x00700000
    1d48:	616d7472 	smcvs	55106	@ 0xd742
    1d4c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
    1d50:	00030068 	andeq	r0, r3, r8, rrx
    1d54:	73617400 	cmnvc	r1, #0, 8
    1d58:	00682e6b 	rsbeq	r2, r8, fp, ror #28
    1d5c:	67000002 	strvs	r0, [r0, -r2]
    1d60:	2e6f6970 			@ <UNDEFINED> instruction: 0x2e6f6970
    1d64:	00040068 	andeq	r0, r4, r8, rrx
    1d68:	18050000 	stmdane	r5, {}	@ <UNPREDICTABLE>
    1d6c:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
    1d70:	03000243 	movweq	r0, #579	@ 0x243
    1d74:	050100cd 	streq	r0, [r1, #-205]	@ 0xffffff33
    1d78:	0c059f0b 	stceq	15, cr9, [r5], {11}
    1d7c:	01040200 	mrseq	r0, R12_usr
    1d80:	0015052e 	andseq	r0, r5, lr, lsr #10
    1d84:	4a010402 	bmi	42d94 <__bss_end+0x1d15c>
    1d88:	02000c05 	andeq	r0, r0, #1280	@ 0x500
    1d8c:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
    1d90:	0e054b05 	vmlaeq.f64	d4, d5, d5
    1d94:	4b01052e 	blmi	43254 <__bss_end+0x1d61c>
    1d98:	05bc1f05 	ldreq	r1, [ip, #3845]!	@ 0xf05
    1d9c:	1505830b 	strne	r8, [r5, #-779]	@ 0xfffffcf5
    1da0:	6609052f 	strvs	r0, [r9], -pc, lsr #10
    1da4:	05650c05 	strbeq	r0, [r5, #-3077]!	@ 0xfffff3fb
    1da8:	12058501 	andne	r8, r5, #4194304	@ 0x400000
    1dac:	4d010584 	cfstr32mi	mvfx0, [r1, #-528]	@ 0xfffffdf0
    1db0:	05841a05 	streq	r1, [r4, #2565]	@ 0xa05
    1db4:	05058406 	streq	r8, [r5, #-1030]	@ 0xfffffbfa
    1db8:	4c04054b 	cfstr32mi	mvfx0, [r4], {75}	@ 0x4b
    1dbc:	05670905 	strbeq	r0, [r7, #-2309]!	@ 0xfffff6fb
    1dc0:	02004b03 	andeq	r4, r0, #3072	@ 0xc00
    1dc4:	05670104 	strbeq	r0, [r7, #-260]!	@ 0xfffffefc
    1dc8:	1a054704 	bne	1539e0 <__bss_end+0x12dda8>
    1dcc:	8406056d 	strhi	r0, [r6], #-1389	@ 0xfffffa93
    1dd0:	054b0505 	strbeq	r0, [fp, #-1285]	@ 0xfffffafb
    1dd4:	09054c04 	stmdbeq	r5, {r2, sl, fp, lr}
    1dd8:	4b030567 	blmi	c337c <__bss_end+0x9d744>
    1ddc:	0402004b 	streq	r0, [r2], #-75	@ 0xffffffb5
    1de0:	04056701 	streq	r6, [r5], #-1793	@ 0xfffff8ff
    1de4:	03010546 	movweq	r0, #5446	@ 0x1546
    1de8:	05056610 	streq	r6, [r5, #-1552]	@ 0xfffff9f0
    1dec:	02052f67 	andeq	r2, r5, #412	@ 0x19c
    1df0:	9108684c 	tstls	r8, ip, asr #16
    1df4:	07059208 	streq	r9, [r5, -r8, lsl #4]
    1df8:	000e0234 	andeq	r0, lr, r4, lsr r2
    1dfc:	018c0101 	orreq	r0, ip, r1, lsl #2
    1e00:	00030000 	andeq	r0, r3, r0
    1e04:	000000bd 	strheq	r0, [r0], -sp
    1e08:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1e0c:	0101000d 	tsteq	r1, sp
    1e10:	00000101 	andeq	r0, r0, r1, lsl #2
    1e14:	00000100 	andeq	r0, r0, r0, lsl #2
    1e18:	2f2e2e01 	svccs	0x002e2e01
    1e1c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1e20:	656e2f2e 	strbvs	r2, [lr, #-3886]!	@ 0xfffff0d2
    1e24:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    1e28:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
    1e2c:	74732f63 	ldrbtvc	r2, [r3], #-3939	@ 0xfffff09d
    1e30:	676e6972 			@ <UNDEFINED> instruction: 0x676e6972
    1e34:	73752f00 	cmnvc	r5, #0, 30
    1e38:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1e3c:	63672f62 	cmnvs	r7, #392	@ 0x188
    1e40:	72612f63 	rsbvc	r2, r1, #396	@ 0x18c
    1e44:	6f6e2d6d 	svcvs	0x006e2d6d
    1e48:	652d656e 	strvs	r6, [sp, #-1390]!	@ 0xfffffa92
    1e4c:	2f696261 	svccs	0x00696261
    1e50:	322e3331 	eorcc	r3, lr, #-1006632960	@ 0xc4000000
    1e54:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	@ <UNPREDICTABLE>
    1e58:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
    1e5c:	2f006564 	svccs	0x00006564
    1e60:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	@ 0xfffffe78
    1e64:	656e2f64 	strbvs	r2, [lr, #-3940]!	@ 0xfffff09c
    1e68:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    1e6c:	5638332d 	ldrtpl	r3, [r8], -sp, lsr #6
    1e70:	2f434a30 	svccs	0x00434a30
    1e74:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    1e78:	342d6269 	strtcc	r6, [sp], #-617	@ 0xfffffd97
    1e7c:	302e342e 	eorcc	r3, lr, lr, lsr #8
    1e80:	3230322e 	eorscc	r3, r0, #-536870910	@ 0xe0000002
    1e84:	33323133 	teqcc	r2, #-1073741812	@ 0xc000000c
    1e88:	656e2f31 	strbvs	r2, [lr, #-3889]!	@ 0xfffff0cf
    1e8c:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    1e90:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
    1e94:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    1e98:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
    1e9c:	73000065 	movwvc	r0, #101	@ 0x65
    1ea0:	636e7274 	cmnvs	lr, #116, 4	@ 0x40000007
    1ea4:	632e7970 			@ <UNDEFINED> instruction: 0x632e7970
    1ea8:	00000100 	andeq	r0, r0, r0, lsl #2
    1eac:	64647473 	strbtvs	r7, [r4], #-1139	@ 0xfffffb8d
    1eb0:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    1eb4:	00000200 	andeq	r0, r0, r0, lsl #4
    1eb8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1ebc:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    1ec0:	00000300 	andeq	r0, r0, r0, lsl #6
    1ec4:	00010500 	andeq	r0, r1, r0, lsl #10
    1ec8:	451c0205 	ldrmi	r0, [ip, #-517]	@ 0xfffffdfb
    1ecc:	c0030002 	andgt	r0, r3, r2
    1ed0:	03050100 	movweq	r0, #20736	@ 0x5100
    1ed4:	13011203 	movwne	r1, #4611	@ 0x1203
    1ed8:	05151313 	ldreq	r1, [r5, #-787]	@ 0xfffffced
    1edc:	05010608 	streq	r0, [r1, #-1544]	@ 0xfffff9f8
    1ee0:	0402001d 	streq	r0, [r2], #-29	@ 0xffffffe3
    1ee4:	06052e01 	streq	r2, [r5], -r1, lsl #28
    1ee8:	001d052e 	andseq	r0, sp, lr, lsr #10
    1eec:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    1ef0:	68030105 	stmdavs	r3, {r0, r2, r8}
    1ef4:	0309059e 	movweq	r0, #38302	@ 0x959e
    1ef8:	1d052e12 	stcne	14, cr2, [r5, #-72]	@ 0xffffffb8
    1efc:	01040200 	mrseq	r0, R12_usr
    1f00:	04020034 	streq	r0, [r2], #-52	@ 0xffffffcc
    1f04:	10052e01 	andne	r2, r5, r1, lsl #28
    1f08:	054a1403 	strbeq	r1, [sl, #-1027]	@ 0xfffffbfd
    1f0c:	0a052e15 	beq	14d768 <__bss_end+0x127b30>
    1f10:	2e13052e 	cfmul64cs	mvdx0, mvdx3, mvdx14
    1f14:	062d0705 	strteq	r0, [sp], -r5, lsl #14
    1f18:	060a052f 	streq	r0, [sl], -pc, lsr #10
    1f1c:	2e100501 	cfmul32cs	mvfx0, mvfx0, mvfx1
    1f20:	062d0705 	strteq	r0, [sp], -r5, lsl #14
    1f24:	1010052e 	andsne	r0, r0, lr, lsr #10
    1f28:	03060105 	movweq	r0, #24837	@ 0x6105
    1f2c:	12054a0c 	andne	r4, r5, #12, 20	@ 0xc000
    1f30:	01064506 	tsteq	r6, r6, lsl #10
    1f34:	67060505 	strvs	r0, [r6, -r5, lsl #10]
    1f38:	01060c05 	tsteq	r6, r5, lsl #24
    1f3c:	2d061205 	sfmcs	f1, 4, [r6, #-20]	@ 0xffffffec
    1f40:	01050106 	tsteq	r5, r6, lsl #2
    1f44:	052e2e4f 	streq	r2, [lr, #-3663]!	@ 0xfffff1b1
    1f48:	2e650313 	mcrcs	3, 3, r0, cr5, cr3, {0}
    1f4c:	02002d05 	andeq	r2, r0, #320	@ 0x140
    1f50:	05330104 	ldreq	r0, [r3, #-260]!	@ 0xfffffefc
    1f54:	04020029 	streq	r0, [r2], #-41	@ 0xffffffd7
    1f58:	04052e01 	streq	r2, [r5], #-3585	@ 0xfffff1ff
    1f5c:	01063006 	tsteq	r6, r6
    1f60:	02002d05 	andeq	r2, r0, #320	@ 0x140
    1f64:	002c0104 	eoreq	r0, ip, r4, lsl #2
    1f68:	4a010402 	bmi	42f78 <__bss_end+0x1d340>
    1f6c:	02002905 	andeq	r2, r0, #81920	@ 0x14000
    1f70:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
    1f74:	0405680a 	streq	r6, [r5], #-2058	@ 0xfffff7f6
    1f78:	29052f06 	stmdbcs	r5, {r1, r2, r8, r9, sl, fp, sp}
    1f7c:	13050f06 	movwne	r0, #24326	@ 0x5f06
    1f80:	06290531 			@ <UNDEFINED> instruction: 0x06290531
    1f84:	0621052b 	strteq	r0, [r1], -fp, lsr #10
    1f88:	00080231 	andeq	r0, r8, r1, lsr r2
    1f8c:	01b50101 			@ <UNDEFINED> instruction: 0x01b50101
    1f90:	00030000 	andeq	r0, r3, r0
    1f94:	000000bc 	strheq	r0, [r0], -ip
    1f98:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1f9c:	0101000d 	tsteq	r1, sp
    1fa0:	00000101 	andeq	r0, r0, r1, lsl #2
    1fa4:	00000100 	andeq	r0, r0, r0, lsl #2
    1fa8:	2f2e2e01 	svccs	0x002e2e01
    1fac:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1fb0:	656e2f2e 	strbvs	r2, [lr, #-3886]!	@ 0xfffff0d2
    1fb4:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    1fb8:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
    1fbc:	74732f63 	ldrbtvc	r2, [r3], #-3939	@ 0xfffff09d
    1fc0:	676e6972 			@ <UNDEFINED> instruction: 0x676e6972
    1fc4:	73752f00 	cmnvc	r5, #0, 30
    1fc8:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1fcc:	63672f62 	cmnvs	r7, #392	@ 0x188
    1fd0:	72612f63 	rsbvc	r2, r1, #396	@ 0x18c
    1fd4:	6f6e2d6d 	svcvs	0x006e2d6d
    1fd8:	652d656e 	strvs	r6, [sp, #-1390]!	@ 0xfffffa92
    1fdc:	2f696261 	svccs	0x00696261
    1fe0:	322e3331 	eorcc	r3, lr, #-1006632960	@ 0xc4000000
    1fe4:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	@ <UNPREDICTABLE>
    1fe8:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
    1fec:	2f006564 	svccs	0x00006564
    1ff0:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	@ 0xfffffe78
    1ff4:	656e2f64 	strbvs	r2, [lr, #-3940]!	@ 0xfffff09c
    1ff8:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    1ffc:	5638332d 	ldrtpl	r3, [r8], -sp, lsr #6
    2000:	2f434a30 	svccs	0x00434a30
    2004:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    2008:	342d6269 	strtcc	r6, [sp], #-617	@ 0xfffffd97
    200c:	302e342e 	eorcc	r3, lr, lr, lsr #8
    2010:	3230322e 	eorscc	r3, r0, #-536870910	@ 0xe0000002
    2014:	33323133 	teqcc	r2, #-1073741812	@ 0xc000000c
    2018:	656e2f31 	strbvs	r2, [lr, #-3889]!	@ 0xfffff0cf
    201c:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    2020:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
    2024:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    2028:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
    202c:	6d000065 	stcvs	0, cr0, [r0, #-404]	@ 0xfffffe6c
    2030:	65736d65 	ldrbvs	r6, [r3, #-3429]!	@ 0xfffff29b
    2034:	00632e74 	rsbeq	r2, r3, r4, ror lr
    2038:	73000001 	movwvc	r0, #1
    203c:	65646474 	strbvs	r6, [r4, #-1140]!	@ 0xfffffb8c
    2040:	00682e66 	rsbeq	r2, r8, r6, ror #28
    2044:	73000002 	movwvc	r0, #2
    2048:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    204c:	00682e67 	rsbeq	r2, r8, r7, ror #28
    2050:	00000003 	andeq	r0, r0, r3
    2054:	05000105 	streq	r0, [r0, #-261]	@ 0xfffffefb
    2058:	0245ec02 	subeq	lr, r5, #512	@ 0x200
    205c:	01280300 			@ <UNDEFINED> instruction: 0x01280300
    2060:	15130305 	ldrne	r0, [r3, #-773]	@ 0xfffffcfb
    2064:	15131313 	ldrne	r1, [r3, #-787]	@ 0xfffffced
    2068:	05010a05 	streq	r0, [r1, #-2565]	@ 0xfffff5fb
    206c:	76030601 	strvc	r0, [r3], -r1, lsl #12
    2070:	030a052e 	movweq	r0, #42286	@ 0xa52e
    2074:	07052e0a 	streq	r2, [r5, -sl, lsl #28]
    2078:	0a053006 	beq	14e098 <__bss_end+0x128460>
    207c:	0c050106 	stfeqs	f0, [r5], {6}
    2080:	2e0a052e 	cfsh32cs	mvfx0, mvfx10, #30
    2084:	75030905 	strvc	r0, [r3, #-2309]	@ 0xfffff6fb
    2088:	0310052e 	tsteq	r0, #192937984	@ 0xb800000
    208c:	052e2e0c 	streq	r2, [lr, #-3596]!	@ 0xfffff1f4
    2090:	052e2d0a 	streq	r2, [lr, #-3338]!	@ 0xfffff2f6
    2094:	052e0607 	streq	r0, [lr, #-1543]!	@ 0xfffff9f9
    2098:	0e051309 	cdpeq	3, 0, cr1, cr5, cr9, {0}
    209c:	0a050106 	beq	1424bc <__bss_end+0x11c884>
    20a0:	03052b06 	movweq	r2, #23302	@ 0x5b06
    20a4:	06060552 			@ <UNDEFINED> instruction: 0x06060552
    20a8:	06070501 	streq	r0, [r7], -r1, lsl #10
    20ac:	0513164d 	ldreq	r1, [r3, #-1613]	@ 0xfffff9b3
    20b0:	6d030610 	stcvs	6, cr0, [r3, #-64]	@ 0xffffffc0
    20b4:	4a180301 	bmi	602cc0 <__bss_end+0x5dd088>
    20b8:	46060705 	strmi	r0, [r6], -r5, lsl #14
    20bc:	02001605 	andeq	r1, r0, #5242880	@ 0x500000
    20c0:	05010104 	streq	r0, [r1, #-260]	@ 0xfffffefc
    20c4:	2e061610 	mcrcs	6, 0, r1, cr6, cr0, {0}
    20c8:	bc060b05 			@ <UNDEFINED> instruction: 0xbc060b05
    20cc:	01061b05 	tsteq	r6, r5, lsl #22
    20d0:	2f060b05 	svccs	0x00060b05
    20d4:	01061b05 	tsteq	r6, r5, lsl #22
    20d8:	2f060b05 	svccs	0x00060b05
    20dc:	01061b05 	tsteq	r6, r5, lsl #22
    20e0:	2f060b05 	svccs	0x00060b05
    20e4:	01061b05 	tsteq	r6, r5, lsl #22
    20e8:	2f060b05 	svccs	0x00060b05
    20ec:	7a031005 	bvc	c6108 <__bss_end+0xa04d0>
    20f0:	4a2e0601 	bmi	b838fc <__bss_end+0xb5dcc4>
    20f4:	062e0903 	strteq	r0, [lr], -r3, lsl #18
    20f8:	2e2e0666 	cfmadda32cs	mvax3, mvax0, mvfx14, mvfx6
    20fc:	68060b05 	stmdavs	r6, {r0, r2, r8, r9, fp}
    2100:	01061b05 	tsteq	r6, r5, lsl #22
    2104:	2f060b05 	svccs	0x00060b05
    2108:	060f1005 	streq	r1, [pc], -r5
    210c:	060a054a 	streq	r0, [sl], -sl, asr #10
    2110:	062e0b03 	strteq	r0, [lr], -r3, lsl #22
    2114:	03100501 	tsteq	r0, #4194304	@ 0x400000
    2118:	052e2e5a 	streq	r2, [lr, #-3674]!	@ 0xfffff1a6
    211c:	2e26030a 	cdpcs	3, 2, cr0, cr6, cr10, {0}
    2120:	2f060505 	svccs	0x00060505
    2124:	01060a05 	tsteq	r6, r5, lsl #20
    2128:	01062d06 	tsteq	r6, r6, lsl #26
    212c:	054e0105 	strbeq	r0, [lr, #-261]	@ 0xfffffefb
    2130:	4a770309 	bmi	1dc2d5c <__bss_end+0x1d9d124>
    2134:	2e53032e 	cdpcs	3, 5, cr0, cr3, cr14, {1}
    2138:	09030a05 	stmdbeq	r3, {r0, r2, r9, fp}
    213c:	0314052e 	tsteq	r4, #192937984	@ 0xb800000
    2140:	04024a0b 	streq	r4, [r2], #-2571	@ 0xfffff5f5
    2144:	e9010100 	stmdb	r1, {r8}
    2148:	03000001 	movweq	r0, #1
    214c:	00010000 	andeq	r0, r1, r0
    2150:	fb010200 	blx	4295a <__bss_end+0x1cd22>
    2154:	01000d0e 	tsteq	r0, lr, lsl #26
    2158:	00010101 	andeq	r0, r1, r1, lsl #2
    215c:	00010000 	andeq	r0, r1, r0
    2160:	2e2e0100 	sufcse	f0, f6, f0
    2164:	2f2e2e2f 	svccs	0x002e2e2f
    2168:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    216c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2170:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2174:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	@ 1ff4 <_start-0xe00c>
    2178:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    217c:	612f656e 			@ <UNDEFINED> instruction: 0x612f656e
    2180:	2e006d72 	mcrcs	13, 0, r6, cr0, cr2, {3}
    2184:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2188:	2f2e2e2f 	svccs	0x002e2e2f
    218c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    2190:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	@ 1ff4 <_start-0xe00c>
    2194:	2f636269 	svccs	0x00636269
    2198:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    219c:	2f656e69 	svccs	0x00656e69
    21a0:	2f6d7261 	svccs	0x006d7261
    21a4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    21a8:	74732f2e 	ldrbtvc	r2, [r3], #-3886	@ 0xfffff0d2
    21ac:	676e6972 			@ <UNDEFINED> instruction: 0x676e6972
    21b0:	73752f00 	cmnvc	r5, #0, 30
    21b4:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    21b8:	63672f62 	cmnvs	r7, #392	@ 0x188
    21bc:	72612f63 	rsbvc	r2, r1, #396	@ 0x18c
    21c0:	6f6e2d6d 	svcvs	0x006e2d6d
    21c4:	652d656e 	strvs	r6, [sp, #-1390]!	@ 0xfffffa92
    21c8:	2f696261 	svccs	0x00696261
    21cc:	322e3331 	eorcc	r3, lr, #-1006632960	@ 0xc4000000
    21d0:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	@ <UNPREDICTABLE>
    21d4:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
    21d8:	2f006564 	svccs	0x00006564
    21dc:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	@ 0xfffffe78
    21e0:	656e2f64 	strbvs	r2, [lr, #-3940]!	@ 0xfffff09c
    21e4:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    21e8:	5638332d 	ldrtpl	r3, [r8], -sp, lsr #6
    21ec:	2f434a30 	svccs	0x00434a30
    21f0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    21f4:	342d6269 	strtcc	r6, [sp], #-617	@ 0xfffffd97
    21f8:	302e342e 	eorcc	r3, lr, lr, lsr #8
    21fc:	3230322e 	eorscc	r3, r0, #-536870910	@ 0xe0000002
    2200:	33323133 	teqcc	r2, #-1073741812	@ 0xc000000c
    2204:	656e2f31 	strbvs	r2, [lr, #-3889]!	@ 0xfffff0cf
    2208:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    220c:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
    2210:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    2214:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
    2218:	6d000065 	stcvs	0, cr0, [r0, #-404]	@ 0xfffffe6c
    221c:	70636d65 	rsbvc	r6, r3, r5, ror #26
    2220:	74732d79 	ldrbtvc	r2, [r3], #-3449	@ 0xfffff287
    2224:	632e6275 			@ <UNDEFINED> instruction: 0x632e6275
    2228:	00000100 	andeq	r0, r0, r0, lsl #2
    222c:	636d656d 	cmnvs	sp, #457179136	@ 0x1b400000
    2230:	632e7970 			@ <UNDEFINED> instruction: 0x632e7970
    2234:	00000200 	andeq	r0, r0, r0, lsl #4
    2238:	64647473 	strbtvs	r7, [r4], #-1139	@ 0xfffffb8d
    223c:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    2240:	00000300 	andeq	r0, r0, r0, lsl #6
    2244:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2248:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    224c:	00000400 	andeq	r0, r0, r0, lsl #8
    2250:	05020400 	streq	r0, [r2, #-1024]	@ 0xfffffc00
    2254:	02050001 	andeq	r0, r5, #1
    2258:	000246e8 	andeq	r4, r2, r8, ror #13
    225c:	05013303 	streq	r3, [r1, #-771]	@ 0xfffffcfd
    2260:	010e0303 	tsteq	lr, r3, lsl #6
    2264:	16131313 			@ <UNDEFINED> instruction: 0x16131313
    2268:	01060605 	tsteq	r6, r5, lsl #12
    226c:	02001c05 	andeq	r1, r0, #1280	@ 0x500
    2270:	054a0104 	strbeq	r0, [sl, #-260]	@ 0xfffffefc
    2274:	04020018 	streq	r0, [r2], #-24	@ 0xffffffe8
    2278:	09052e01 	stmdbeq	r5, {r0, r9, sl, fp, sp}
    227c:	052e7903 	streq	r7, [lr, #-2307]!	@ 0xfffff6fd
    2280:	2e22030e 	cdpcs	3, 2, cr0, cr2, cr14, {0}
    2284:	02001805 	andeq	r1, r0, #327680	@ 0x50000
    2288:	65030104 	strvs	r0, [r3, #-260]	@ 0xfffffefc
    228c:	0402002e 	streq	r0, [r2], #-46	@ 0xffffffd2
    2290:	05052e01 	streq	r2, [r5, #-3585]	@ 0xfffff1ff
    2294:	661c0306 	ldrvs	r0, [ip], -r6, lsl #6
    2298:	01060c05 	tsteq	r6, r5, lsl #24
    229c:	052d0a05 	streq	r0, [sp, #-2565]!	@ 0xfffff5fb
    22a0:	0a052f0c 	beq	14ded8 <__bss_end+0x1282a0>
    22a4:	01062d06 	tsteq	r6, r6, lsl #26
    22a8:	0309054a 	movweq	r0, #38218	@ 0x954a
    22ac:	0a052e5e 	beq	14dc2c <__bss_end+0x127ff4>
    22b0:	2e220306 	cdpcs	3, 2, cr0, cr2, cr6, {0}
    22b4:	01060e05 	tsteq	r6, r5, lsl #28
    22b8:	2e2e0a05 	vmulcs.f32	s0, s28, s10
    22bc:	67031305 	strvs	r1, [r3, -r5, lsl #6]
    22c0:	0301052e 	movweq	r0, #5422	@ 0x152e
    22c4:	0b052e69 	bleq	14dc70 <__bss_end+0x128038>
    22c8:	ba1d0306 	blt	742ee8 <__bss_end+0x71d2b0>
    22cc:	01061a05 	tsteq	r6, r5, lsl #20
    22d0:	054a1c05 	strbeq	r1, [sl, #-3077]	@ 0xfffff3fb
    22d4:	1367060b 	cmnne	r7, #11534336	@ 0xb00000
    22d8:	06130513 			@ <UNDEFINED> instruction: 0x06130513
    22dc:	301a050d 	andscc	r0, sl, sp, lsl #10
    22e0:	6a060b05 	bvs	184efc <__bss_end+0x15f2c4>
    22e4:	7a031305 	bvc	c6f00 <__bss_end+0xa12c8>
    22e8:	032e0601 			@ <UNDEFINED> instruction: 0x032e0601
    22ec:	064a2e0a 	strbeq	r2, [sl], -sl, lsl #28
    22f0:	d80b054a 	stmdale	fp, {r1, r3, r6, r8, sl}
    22f4:	01061a05 	tsteq	r6, r5, lsl #20
    22f8:	060b052e 	streq	r0, [fp], -lr, lsr #10
    22fc:	0f13052f 	svceq	0x0013052f
    2300:	89060b05 	stmdbhi	r6, {r0, r2, r8, r9, fp}
    2304:	060a052f 	streq	r0, [sl], -pc, lsr #10
    2308:	060e0531 			@ <UNDEFINED> instruction: 0x060e0531
    230c:	2e2e2e2e 	cdpcs	14, 2, cr2, cr14, cr14, {1}
    2310:	052e0a05 	streq	r0, [lr, #-2565]!	@ 0xfffff5fb
    2314:	052f0605 	streq	r0, [pc, #-1541]!	@ 1d17 <_start-0xe2e9>
    2318:	0501060c 	streq	r0, [r1, #-1548]	@ 0xfffff9f4
    231c:	0c052d0a 	stceq	13, cr2, [r5], {10}
    2320:	060a052f 	streq	r0, [sl], -pc, lsr #10
    2324:	0501062d 	streq	r0, [r1, #-1581]	@ 0xfffff9d3
    2328:	05310603 	ldreq	r0, [r1, #-1539]!	@ 0xfffff9fd
    232c:	02140601 	andseq	r0, r4, #1048576	@ 0x100000
    2330:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	42717269 	rsbsmi	r7, r1, #-1879048186	@ 0x90000006
      10:	6b636f6c 	blvs	18dbdc8 <__bss_end+0x18b6190>
      14:	726f7000 	rsbvc	r7, pc, #0
      18:	63695474 	cmnvs	r9, #116, 8	@ 0x74000000
      1c:	7079546b 	rsbsvc	r5, r9, fp, ror #8
      20:	54760065 	ldrbtpl	r0, [r6], #-101	@ 0xffffff9b
      24:	536b7361 	cmnpl	fp, #-2080374783	@ 0x84000001
      28:	63746977 	cmnvs	r4, #1949696	@ 0x1dc000
      2c:	6e6f4368 	cdpvs	3, 6, cr4, cr15, cr8, {3}
      30:	74786574 	ldrbtvc	r6, [r8], #-1396	@ 0xfffffa8c
      34:	76727000 	ldrbtvc	r7, [r2], -r0
      38:	75746553 	ldrbvc	r6, [r4, #-1363]!	@ 0xfffffaad
      3c:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	@ 0xfffffe40
      40:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
      44:	72726574 	rsbsvc	r6, r2, #116, 10	@ 0x1d000000
      48:	00747075 	rsbseq	r7, r4, r5, ror r0
      4c:	72615070 	rsbvc	r5, r1, #112	@ 0x70
      50:	69006d61 	stmdbvs	r0, {r0, r5, r6, r8, sl, fp, sp, lr}
      54:	65527172 	ldrbvs	r7, [r2, #-370]	@ 0xfffffe8e
      58:	74736967 	ldrbtvc	r6, [r3], #-2407	@ 0xfffff699
      5c:	70007265 	andvc	r7, r0, r5, ror #4
      60:	69724f78 	ldmdbvs	r2!, {r3, r4, r5, r6, r8, r9, sl, fp, lr}^
      64:	616e6967 	cmnvs	lr, r7, ror #18
      68:	534f546c 	movtpl	r5, #62572	@ 0xf46c
      6c:	43425f00 	movtmi	r5, #12032	@ 0x2f00
      70:	3338324d 	teqcc	r8, #-805306364	@ 0xd0000004
      74:	49545f35 	ldmdbmi	r4, {r0, r2, r4, r5, r8, r9, sl, fp, ip, lr}^
      78:	5f52454d 	svcpl	0x0052454d
      7c:	53474552 	movtpl	r4, #30034	@ 0x7552
      80:	6f687300 	svcvs	0x00687300
      84:	75207472 	strvc	r7, [r0, #-1138]!	@ 0xfffffb8e
      88:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
      8c:	2064656e 	rsbcs	r6, r4, lr, ror #10
      90:	00746e69 	rsbseq	r6, r4, r9, ror #28
      94:	20554e47 	subscs	r4, r5, r7, asr #28
      98:	20373143 	eorscs	r3, r7, r3, asr #2
      9c:	322e3331 	eorcc	r3, lr, #-1006632960	@ 0xc4000000
      a0:	3220312e 	eorcc	r3, r0, #-2147483637	@ 0x8000000b
      a4:	31333230 	teqcc	r3, r0, lsr r2
      a8:	20393030 	eorscs	r3, r9, r0, lsr r0
      ac:	6c666d2d 	stclvs	13, cr6, [r6], #-180	@ 0xffffff4c
      b0:	2d74616f 	ldfcse	f6, [r4, #-444]!	@ 0xfffffe44
      b4:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	@ 0xfffffe7c
      b8:	74666f73 	strbtvc	r6, [r6], #-3955	@ 0xfffff08d
      bc:	616d2d20 	cmnvs	sp, r0, lsr #26
      c0:	2d206d72 	stccs	13, cr6, [r0, #-456]!	@ 0xfffffe38
      c4:	6372616d 	cmnvs	r2, #1073741851	@ 0x4000001b
      c8:	72613d68 	rsbvc	r3, r1, #104, 26	@ 0x1a00
      cc:	7a36766d 	bvc	d9da88 <__bss_end+0xd77e50>
      d0:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      d4:	2d20672d 	stccs	7, cr6, [r0, #-180]!	@ 0xffffff4c
      d8:	64700067 	ldrbtvs	r0, [r0], #-103	@ 0xffffff99
      dc:	4b534154 	blmi	14d0634 <__bss_end+0x14aa9fc>
      e0:	444f435f 	strbmi	r4, [pc], #-863	@ e8 <_start-0xff18>
      e4:	72690045 	rsbvc	r0, r9, #69	@ 0x45
      e8:	626e5571 	rsbvs	r5, lr, #473956352	@ 0x1c400000
      ec:	6b636f6c 	blvs	18dbea4 <__bss_end+0x18b626c>
      f0:	6f682f00 	svcvs	0x00682f00
      f4:	632f656d 			@ <UNDEFINED> instruction: 0x632f656d
      f8:	6379646d 	cmnvs	r9, #1828716544	@ 0x6d000000
      fc:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     100:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     104:	6372732f 	cmnvs	r2, #-1140850688	@ 0xbc000000
     108:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
     10c:	72656270 	rsbvc	r6, r5, #112, 4
     110:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     114:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
     118:	4f545265 	svcmi	0x00545265
     11c:	50760053 	rsbspl	r0, r6, r3, asr r0
     120:	4574726f 	ldrbmi	r7, [r4, #-623]!	@ 0xfffffd91
     124:	6353646e 	cmpvs	r3, #1845493760	@ 0x6e000000
     128:	75646568 	strbvc	r6, [r4, #-1384]!	@ 0xfffffa98
     12c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     130:	63695476 	cmnvs	r9, #1979711488	@ 0x76000000
     134:	5253496b 	subspl	r4, r3, #1753088	@ 0x1ac000
     138:	54787000 	ldrbtpl	r7, [r8], #-0
     13c:	664f706f 	strbvs	r7, [pc], -pc, rrx
     140:	63617453 	cmnvs	r1, #1392508928	@ 0x53000000
     144:	6f6c006b 	svcvs	0x006c006b
     148:	6c20676e 	stcvs	7, cr6, [r0], #-440	@ 0xfffffe48
     14c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     150:	00746e69 	rsbseq	r6, r4, r9, ror #28
     154:	726f5076 	rsbvc	r5, pc, #118	@ 0x76
     158:	52534974 	subspl	r4, r3, #116, 18	@ 0x1d0000
     15c:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
     160:	72694674 	rsbvc	r4, r9, #116, 12	@ 0x7400000
     164:	61547473 	cmpvs	r4, r3, ror r4
     168:	70006b73 	andvc	r6, r0, r3, ror fp
     16c:	72615076 	rsbvc	r5, r1, #118	@ 0x76
     170:	74656d61 	strbtvc	r6, [r5], #-3425	@ 0xfffff29f
     174:	00737265 	rsbseq	r7, r3, r5, ror #4
     178:	67655270 			@ <UNDEFINED> instruction: 0x67655270
     17c:	54760073 	ldrbtpl	r0, [r6], #-115	@ 0xffffff8d
     180:	496b7361 	stmdbmi	fp!, {r0, r5, r6, r8, r9, ip, sp, lr}^
     184:	6572636e 	ldrbvs	r6, [r2, #-878]!	@ 0xfffffc92
     188:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
     18c:	6b636954 	blvs	18da6e4 <__bss_end+0x18b4aac>
     190:	71726900 	cmnvc	r2, r0, lsl #18
     194:	62616e45 	rsbvs	r6, r1, #1104	@ 0x450
     198:	2f00656c 	svccs	0x0000656c
     19c:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     1a0:	646d632f 	strbtvs	r6, [sp], #-815	@ 0xfffffcd1
     1a4:	482f6379 	stmdami	pc!, {r0, r3, r4, r5, r6, r8, r9, sp, lr}	@ <UNPREDICTABLE>
     1a8:	72617865 	rsbvc	r7, r1, #6619136	@ 0x650000
     1ac:	732f6863 			@ <UNDEFINED> instruction: 0x732f6863
     1b0:	522f6372 	eorpl	r6, pc, #-939524095	@ 0xc8000001
     1b4:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     1b8:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     1bc:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     1c0:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     1c4:	2f534f54 	svccs	0x00534f54
     1c8:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     1cc:	534f5452 	movtpl	r5, #62546	@ 0xf452
     1d0:	756f532f 	strbvc	r5, [pc, #-815]!	@ fffffea9 <_estack+0xf7fdfea9>
     1d4:	2f656372 	svccs	0x00656372
     1d8:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
     1dc:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
     1e0:	4343472f 	movtmi	r4, #14127	@ 0x372f
     1e4:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
     1e8:	72656270 	rsbvc	r6, r5, #112, 4
     1ec:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     1f0:	726f702f 	rsbvc	r7, pc, #47	@ 0x2f
     1f4:	00632e74 	rsbeq	r2, r3, r4, ror lr
     1f8:	495f4e46 	ldmdbmi	pc, {r1, r2, r6, r9, sl, fp, lr}^	@ <UNPREDICTABLE>
     1fc:	5245544e 	subpl	r5, r5, #1308622848	@ 0x4e000000
     200:	54505552 	ldrbpl	r5, [r0], #-1362	@ 0xfffffaae
     204:	4e41485f 	mcrmi	8, 2, r4, cr1, cr15, {2}
     208:	52454c44 	subpl	r4, r5, #68, 24	@ 0x4400
     20c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     210:	6f642067 	svcvs	0x00642067
     214:	656c6275 	strbvs	r6, [ip, #-629]!	@ 0xfffffd8b
     218:	6f507800 	svcvs	0x00507800
     21c:	74537472 	ldrbvc	r7, [r3], #-1138	@ 0xfffffb8e
     220:	53747261 	cmnpl	r4, #268435462	@ 0x10000006
     224:	64656863 	strbtvs	r6, [r5], #-2147	@ 0xfffff79d
     228:	72656c75 	rsbvc	r6, r5, #29952	@ 0x7500
     22c:	50787000 	rsbspl	r7, r8, r0
     230:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     234:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     238:	73696c61 	cmnvc	r9, #24832	@ 0x6100
     23c:	61745365 	cmnvs	r4, r5, ror #6
     240:	75006b63 	strvc	r6, [r0, #-2915]	@ 0xfffff49d
     244:	6d6f436c 	stclvs	3, cr4, [pc, #-432]!	@ 9c <_start-0xff64>
     248:	65726170 	ldrbvs	r6, [r2, #-368]!	@ 0xfffffe90
     24c:	6374614d 	cmnvs	r4, #1073741843	@ 0x40000013
     250:	682f0068 	stmdavs	pc!, {r3, r5, r6}	@ <UNPREDICTABLE>
     254:	2f656d6f 	svccs	0x00656d6f
     258:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     25c:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
     260:	63726178 	cmnvs	r2, #120, 2
     264:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
     268:	61522f63 	cmpvs	r2, r3, ror #30
     26c:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     270:	50797272 	rsbspl	r7, r9, r2, ror r2
     274:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     278:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     27c:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     280:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     284:	2f534f54 	svccs	0x00534f54
     288:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     28c:	702f6563 	eorvc	r6, pc, r3, ror #10
     290:	6174726f 	cmnvs	r4, pc, ror #4
     294:	2f656c62 	svccs	0x00656c62
     298:	2f434347 	svccs	0x00434347
     29c:	70736152 	rsbsvc	r6, r3, r2, asr r1
     2a0:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     2a4:	2f695079 	svccs	0x00695079
     2a8:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
     2ac:	2e727369 	cdpcs	3, 7, cr7, cr2, cr9, {3}
     2b0:	50760063 	rsbspl	r0, r6, r3, rrx
     2b4:	4574726f 	ldrbmi	r7, [r4, #-623]!	@ 0xfffffd91
     2b8:	7265746e 	rsbvc	r7, r5, #1845493760	@ 0x6e000000
     2bc:	74697243 	strbtvc	r7, [r9], #-579	@ 0xfffffdbd
     2c0:	6c616369 	stclvs	3, cr6, [r1], #-420	@ 0xfffffe5c
     2c4:	436c7500 	cmnmi	ip, #0, 10
     2c8:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     2cc:	4e6c6163 	powmiez	f6, f4, f3
     2d0:	69747365 	ldmdbvs	r4!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}^
     2d4:	7600676e 	strvc	r6, [r0], -lr, ror #14
     2d8:	74726f50 	ldrbtvc	r6, [r2], #-3920	@ 0xfffff0b0
     2dc:	74697845 	strbtvc	r7, [r9], #-2117	@ 0xfffff7bb
     2e0:	74697243 	strbtvc	r7, [r9], #-579	@ 0xfffffdbd
     2e4:	6c616369 	stclvs	3, cr6, [r1], #-420	@ 0xfffffe5c
     2e8:	6f507600 	svcvs	0x00507600
     2ec:	69597472 	ldmdbvs	r9, {r1, r4, r5, r6, sl, ip, sp, lr}^
     2f0:	50646c65 	rsbpl	r6, r4, r5, ror #24
     2f4:	65636f72 	strbvs	r6, [r3, #-3954]!	@ 0xfffff08e
     2f8:	726f7373 	rsbvc	r7, pc, #-872415231	@ 0xcc000001
     2fc:	72467600 	subvc	r7, r6, #0, 12
     300:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     304:	495f534f 	ldmdbmi	pc, {r0, r1, r2, r3, r6, r8, r9, ip, lr}^	@ <UNPREDICTABLE>
     308:	67005253 	smlsdvs	r0, r3, r2, r5
     30c:	7453625f 	ldrbvc	r6, [r3], #-607	@ 0xfffffda1
     310:	65747261 	ldrbvs	r7, [r4, #-609]!	@ 0xfffffd9f
     314:	72690064 	rsbvc	r0, r9, #100	@ 0x64
     318:	6e614871 	mcrvs	8, 3, r4, cr1, cr1, {3}
     31c:	72656c64 	rsbvc	r6, r5, #100, 24	@ 0x6400
     320:	43787000 	cmnmi	r8, #0
     324:	65727275 	ldrbvs	r7, [r2, #-629]!	@ 0xfffffd8b
     328:	4354746e 	cmpmi	r4, #1845493760	@ 0x6e000000
     32c:	78700042 	ldmdavc	r0!, {r1, r6}^
     330:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     334:	73694c74 	cmnvc	r9, #116, 24	@ 0x7400
     338:	43780074 	cmnmi	r8, #116	@ 0x74
     33c:	756f526f 	strbvc	r5, [pc, #-623]!	@ d5 <_start-0xff2b>
     340:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     344:	61657243 	cmnvs	r5, r3, asr #4
     348:	70006574 	andvc	r6, r0, r4, ror r5
     34c:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     350:	446b6365 	strbtmi	r6, [fp], #-869	@ 0xfffffc9b
     354:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     358:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
     35c:	70007473 	andvc	r7, r0, r3, ror r4
     360:	526f4378 	rsbpl	r4, pc, #120, 6	@ 0xe0000001
     364:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     368:	7000656e 	andvc	r6, r0, lr, ror #10
     36c:	526f4378 	rsbpl	r4, pc, #120, 6	@ 0xe0000001
     370:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     374:	6f43656e 	svcvs	0x0043656e
     378:	70006564 	andvc	r6, r0, r4, ror #10
     37c:	6c654478 	cfstrdvs	mvd4, [r5], #-480	@ 0xfffffe20
     380:	64657961 	strbtvs	r7, [r5], #-2401	@ 0xfffff69f
     384:	6f526f43 	svcvs	0x00526f43
     388:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     38c:	73694c65 	cmnvc	r9, #25856	@ 0x6500
     390:	54780074 	ldrbtpl	r0, [r8], #-116	@ 0xffffff8c
     394:	54656d69 	strbtpl	r6, [r5], #-3433	@ 0xfffff297
     398:	6b61576f 	blvs	185615c <__bss_end+0x1830524>
     39c:	4c760065 	ldclmi	0, cr0, [r6], #-404	@ 0xfffffe6c
     3a0:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     3a4:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     3a8:	73696c61 	cmnvc	r9, #24832	@ 0x6100
     3ac:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     3b0:	74617453 	strbtvc	r7, [r1], #-1107	@ 0xfffffbad
     3b4:	4c760065 	ldclmi	0, cr0, [r6], #-404	@ 0xfffffe6c
     3b8:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     3bc:	7265736e 	rsbvc	r7, r5, #-1207959551	@ 0xb8000001
     3c0:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     3c4:	64616552 	strbtvs	r6, [r1], #-1362	@ 0xfffffaae
     3c8:	526f4379 	rsbpl	r4, pc, #-469762047	@ 0xe4000001
     3cc:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     3d0:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     3d4:	00737473 	rsbseq	r7, r3, r3, ror r4
     3d8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	@ 0xfffff68d
     3dc:	7000745f 	andvc	r7, r0, pc, asr r4
     3e0:	65725078 	ldrbvs	r5, [r2, #-120]!	@ 0xffffff88
     3e4:	756f6976 	strbvc	r6, [pc, #-2422]!	@ fffffa76 <_estack+0xf7fdfa76>
     3e8:	43780073 	cmnmi	r8, #115	@ 0x73
     3ec:	756f526f 	strbvc	r5, [pc, #-623]!	@ 185 <_start-0xfe7b>
     3f0:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     3f4:	6f6d6552 	svcvs	0x006d6552
     3f8:	72466576 	subvc	r6, r6, #494927872	@ 0x1d800000
     3fc:	76456d6f 	strbvc	r6, [r5], -pc, ror #26
     400:	4c746e65 	ldclmi	14, cr6, [r4], #-404	@ 0xfffffe6c
     404:	00747369 	rsbseq	r7, r4, r9, ror #6
     408:	6e497875 	mcrvs	8, 2, r7, cr9, cr5, {3}
     40c:	00786564 	rsbseq	r6, r8, r4, ror #10
     410:	6f437870 	svcvs	0x00437870
     414:	74756f52 	ldrbtvc	r6, [r5], #-3922	@ 0xfffff0ae
     418:	46656e69 	strbtmi	r6, [r5], -r9, ror #28
     41c:	74636e75 	strbtvc	r6, [r3], #-3701	@ 0xfffff18b
     420:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     424:	73694c76 	cmnvc	r9, #30208	@ 0x7600
     428:	6d655274 	sfmvs	f5, 2, [r5, #-464]!	@ 0xfffffe30
     42c:	0065766f 	rsbeq	r7, r5, pc, ror #12
     430:	6e557870 	mrcvs	8, 2, r7, cr5, cr0, {3}
     434:	636f6c62 	cmnvs	pc, #25088	@ 0x6200
     438:	4364656b 	cmnmi	r4, #448790528	@ 0x1ac00000
     43c:	00424352 	subeq	r4, r2, r2, asr r3
     440:	6e654778 	mcrvs	7, 3, r4, cr5, cr8, {3}
     444:	63697265 	cmnvs	r9, #1342177286	@ 0x50000006
     448:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     44c:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	@ 0xfffffedc
     450:	4f767000 	svcmi	0x00767000
     454:	72656e77 	rsbvc	r6, r5, #1904	@ 0x770
     458:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     45c:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     460:	74726573 	ldrbtvc	r6, [r2], #-1395	@ 0xfffffa8d
     464:	00646e45 	rsbeq	r6, r4, r5, asr #28
     468:	63695478 	cmnvs	r9, #120, 8	@ 0x78000000
     46c:	6f54736b 	svcvs	0x0054736b
     470:	616c6544 	cmnvs	ip, r4, asr #10
     474:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
     478:	706d6554 	rsbvc	r6, sp, r4, asr r5
     47c:	43787000 	cmnmi	r8, #0
     480:	74736e6f 	ldrbtvc	r6, [r3], #-3695	@ 0xfffff191
     484:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     488:	6f437800 	svcvs	0x00437800
     48c:	74756f52 	ldrbtvc	r6, [r5], #-3922	@ 0xfffff0ae
     490:	48656e69 	stmdami	r5!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
     494:	6c646e61 	stclvs	14, cr6, [r4], #-388	@ 0xfffffe7c
     498:	4c780065 	ldclmi	0, cr0, [r8], #-404	@ 0xfffffe6c
     49c:	00545349 	subseq	r5, r4, r9, asr #6
     4a0:	65744978 	ldrbvs	r4, [r4, #-2424]!	@ 0xfffff688
     4a4:	6c61566d 	stclvs	6, cr5, [r1], #-436	@ 0xfffffe4c
     4a8:	70006575 	andvc	r6, r0, r5, ror r5
     4ac:	43524378 	cmpmi	r2, #120, 6	@ 0xe0000001
     4b0:	54780042 	ldrbtpl	r0, [r8], #-66	@ 0xffffffbe
     4b4:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     4b8:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     4bc:	6f436b63 	svcvs	0x00436b63
     4c0:	00746e75 	rsbseq	r6, r4, r5, ror lr
     4c4:	526f4376 	rsbpl	r4, pc, #-671088639	@ 0xd8000001
     4c8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4cc:	6441656e 	strbvs	r6, [r1], #-1390	@ 0xfffffa92
     4d0:	446f5464 	strbtmi	r5, [pc], #-1124	@ 4d8 <_start-0xfb28>
     4d4:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     4d8:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
     4dc:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     4e0:	5453494c 	ldrbpl	r4, [r3], #-2380	@ 0xfffff6b4
     4e4:	4554495f 	ldrbmi	r4, [r4, #-2399]	@ 0xfffff6a1
     4e8:	4376004d 	cmnmi	r6, #77	@ 0x4d
     4ec:	756f526f 	strbvc	r5, [pc, #-623]!	@ 285 <_start-0xfd7b>
     4f0:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     4f4:	65686353 	strbvs	r6, [r8, #-851]!	@ 0xfffffcad
     4f8:	656c7564 	strbvs	r7, [ip, #-1380]!	@ 0xfffffa9c
     4fc:	694d7800 	stmdbvs	sp, {fp, ip, sp, lr}^
     500:	694c696e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     504:	74497473 	strbvc	r7, [r9], #-1139	@ 0xfffffb8d
     508:	70006d65 	andvc	r6, r0, r5, ror #26
     50c:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     510:	506b6365 	rsbpl	r6, fp, r5, ror #6
     514:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     518:	6552676e 	ldrbvs	r6, [r2, #-1902]	@ 0xfffff892
     51c:	4c796461 	cfldrdmi	mvd6, [r9], #-388	@ 0xfffffe7c
     520:	00747369 	rsbseq	r7, r4, r9, ror #6
     524:	73615078 	cmnvc	r1, #120	@ 0x78
     528:	54646573 	strbtpl	r6, [r4], #-1395	@ 0xfffffa8d
     52c:	736b6369 	cmnvc	fp, #-1543503871	@ 0xa4000001
     530:	76457800 	strbvc	r7, [r5], -r0, lsl #16
     534:	4c746e65 	ldclmi	14, cr6, [r4], #-404	@ 0xfffffe6c
     538:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     53c:	006d6574 	rsbeq	r6, sp, r4, ror r5
     540:	75437870 	strbvc	r7, [r3, #-2160]	@ 0xfffff790
     544:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     548:	526f4374 	rsbpl	r4, pc, #116, 6	@ 0xd0000001
     54c:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     550:	7000656e 	andvc	r6, r0, lr, ror #10
     554:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     558:	6e696174 	mcrvs	1, 3, r6, cr9, cr4, {3}
     55c:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     560:	646e6550 	strbtvs	r6, [lr], #-1360	@ 0xfffffab0
     564:	52676e69 	rsbpl	r6, r7, #1680	@ 0x690
     568:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     56c:	6f526f43 	svcvs	0x00526f43
     570:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     574:	73694c65 	cmnvc	r9, #25856	@ 0x6500
     578:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	@ <UNPREDICTABLE>
     57c:	2f656d6f 	svccs	0x00656d6f
     580:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     584:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
     588:	63726178 	cmnvs	r2, #120, 2
     58c:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
     590:	61522f63 	cmpvs	r2, r3, ror #30
     594:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     598:	50797272 	rsbspl	r7, r9, r2, ror r2
     59c:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     5a0:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     5a4:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     5a8:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     5ac:	2f534f54 	svccs	0x00534f54
     5b0:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     5b4:	632f6563 			@ <UNDEFINED> instruction: 0x632f6563
     5b8:	74756f72 	ldrbtvc	r6, [r5], #-3954	@ 0xfffff08e
     5bc:	2e656e69 	cdpcs	14, 6, cr6, cr5, cr9, {3}
     5c0:	72630063 	rsbvc	r0, r3, #99	@ 0x63
     5c4:	4f524f43 	svcmi	0x00524f43
     5c8:	4e495455 	mcrmi	4, 2, r5, cr9, cr5, {2}
     5cc:	4f435f45 	svcmi	0x00435f45
     5d0:	70004544 	andvc	r4, r0, r4, asr #10
     5d4:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     5d8:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     5dc:	7265764f 	rsbvc	r7, r5, #82837504	@ 0x4f00000
     5e0:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
     5e4:	616c6544 	cmnvs	ip, r4, asr #10
     5e8:	43646579 	cmnmi	r4, #507510784	@ 0x1e400000
     5ec:	756f526f 	strbvc	r5, [pc, #-623]!	@ 385 <_start-0xfc7b>
     5f0:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     5f4:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     5f8:	726f6300 	rsbvc	r6, pc, #0, 6
     5fc:	6f526f43 	svcvs	0x00526f43
     600:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     604:	6e6f4365 	cdpvs	3, 6, cr4, cr15, cr5, {3}
     608:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	@ 440 <_start-0xfbc0>
     60c:	636f6c42 	cmnvs	pc, #16896	@ 0x4200
     610:	4478006b 	ldrbtmi	r0, [r8], #-107	@ 0xffffff95
     614:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     618:	6f436465 	svcvs	0x00436465
     61c:	74756f52 	ldrbtvc	r6, [r5], #-3922	@ 0xfffff0ae
     620:	4c656e69 	stclmi	14, cr6, [r5], #-420	@ 0xfffffe5c
     624:	31747369 	cmncc	r4, r9, ror #6
     628:	65447800 	strbvs	r7, [r4, #-2048]	@ 0xfffff800
     62c:	6579616c 	ldrbvs	r6, [r9, #-364]!	@ 0xfffffe94
     630:	526f4364 	rsbpl	r4, pc, #100, 6	@ 0x90000001
     634:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     638:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     63c:	00327473 	eorseq	r7, r2, r3, ror r4
     640:	754e7875 	strbvc	r7, [lr, #-2165]	@ 0xfffff78b
     644:	7265626d 	rsbvc	r6, r5, #-805306362	@ 0xd0000006
     648:	7449664f 	strbvc	r6, [r9], #-1615	@ 0xfffff9b1
     64c:	00736d65 	rsbseq	r6, r3, r5, ror #26
     650:	73694c78 	cmnvc	r9, #120, 24	@ 0x7800
     654:	65744974 	ldrbvs	r4, [r4, #-2420]!	@ 0xfffff68c
     658:	7270006d 	rsbsvc	r0, r0, #109	@ 0x6d
     65c:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
     660:	6c616974 			@ <UNDEFINED> instruction: 0x6c616974
     664:	43657369 	cmnmi	r5, #-1543503871	@ 0xa4000001
     668:	756f526f 	strbvc	r5, [pc, #-623]!	@ 401 <_start-0xfbff>
     66c:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     670:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     674:	4c780073 	ldclmi	0, cr0, [r8], #-460	@ 0xfffffe34
     678:	45747369 	ldrbmi	r7, [r4, #-873]!	@ 0xfffffc97
     67c:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     680:	7473614c 	ldrbtvc	r6, [r3], #-332	@ 0xfffffeb4
     684:	6b636954 	blvs	18dabdc <__bss_end+0x18b4fa4>
     688:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     68c:	43780074 	cmnmi	r8, #116	@ 0x74
     690:	756f526f 	strbvc	r5, [pc, #-623]!	@ 429 <_start-0xfbd7>
     694:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     698:	6b636954 	blvs	18dabf0 <__bss_end+0x18b4fb8>
     69c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     6a0:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
     6a4:	43706f54 	cmnmi	r0, #84, 30	@ 0x150
     6a8:	756f526f 	strbvc	r5, [pc, #-623]!	@ 441 <_start-0xfbbf>
     6ac:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     6b0:	64616552 	strbtvs	r6, [r1], #-1362	@ 0xfffffaae
     6b4:	69725079 	ldmdbvs	r2!, {r0, r3, r4, r5, r6, ip, lr}^
     6b8:	7469726f 	strbtvc	r7, [r9], #-623	@ 0xfffffd91
     6bc:	78750079 	ldmdavc	r5!, {r0, r3, r4, r5, r6}^
     6c0:	6f697250 	svcvs	0x00697250
     6c4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     6c8:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     6cc:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     6d0:	494d7800 	stmdbmi	sp, {fp, ip, sp, lr}^
     6d4:	4c5f494e 	mrrcmi	9, 4, r4, pc, cr14	@ <UNPREDICTABLE>
     6d8:	5f545349 	svcpl	0x00545349
     6dc:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	@ 0xfffffedc
     6e0:	50767000 	rsbspl	r7, r6, r0
     6e4:	4d74726f 	lfmmi	f7, 2, [r4, #-444]!	@ 0xfffffe44
     6e8:	6f6c6c61 	svcvs	0x006c6c61
     6ec:	6f630063 	svcvs	0x00630063
     6f0:	43524372 	cmpmi	r2, #-939524095	@ 0xc8000001
     6f4:	4c760042 	ldclmi	0, cr0, [r6], #-264	@ 0xfffffef8
     6f8:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     6fc:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     700:	73696c61 	cmnvc	r9, #24832	@ 0x6100
     704:	65744965 	ldrbvs	r4, [r4, #-2405]!	@ 0xfffff69b
     708:	682f006d 	stmdavs	pc!, {r0, r2, r3, r5, r6}	@ <UNPREDICTABLE>
     70c:	2f656d6f 	svccs	0x00656d6f
     710:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     714:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
     718:	63726178 	cmnvs	r2, #120, 2
     71c:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
     720:	61522f63 	cmpvs	r2, r3, ror #30
     724:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     728:	50797272 	rsbspl	r7, r9, r2, ror r2
     72c:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     730:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     734:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     738:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     73c:	2f534f54 	svccs	0x00534f54
     740:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     744:	6c2f6563 	cfstr32vs	mvfx6, [pc], #-396	@ 5c0 <_start-0xfa40>
     748:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     74c:	6f6c0063 	svcvs	0x006c0063
     750:	6c20676e 	stcvs	7, cr6, [r0], #-440	@ 0xfffffe48
     754:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     758:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     75c:	64656e67 	strbtvs	r6, [r5], #-3687	@ 0xfffff199
     760:	746e6920 	strbtvc	r6, [lr], #-2336	@ 0xfffff6e0
     764:	736e7500 	cmnvc	lr, #0, 10
     768:	656e6769 	strbvs	r6, [lr, #-1897]!	@ 0xfffff897
     76c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     770:	70007261 	andvc	r7, r0, r1, ror #4
     774:	65744978 	ldrbvs	r4, [r4, #-2424]!	@ 0xfffff688
     778:	526f546d 	rsbpl	r5, pc, #1828716544	@ 0x6d000000
     77c:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     780:	56780065 	ldrbtpl	r0, [r8], -r5, rrx
     784:	65756c61 	ldrbvs	r6, [r5, #-3169]!	@ 0xfffff39f
     788:	6e49664f 	cdpvs	6, 4, cr6, cr9, cr15, {2}
     78c:	74726573 	ldrbtvc	r6, [r2], #-1395	@ 0xfffffa8d
     790:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     794:	74497870 	strbvc	r7, [r9], #-2160	@ 0xfffff790
     798:	70006d65 	andvc	r6, r0, r5, ror #26
     79c:	65744978 	ldrbvs	r4, [r4, #-2424]!	@ 0xfffff688
     7a0:	6f746172 	svcvs	0x00746172
     7a4:	68730072 	ldmdavs	r3!, {r1, r4, r5, r6}^
     7a8:	2074726f 	rsbscs	r7, r4, pc, ror #4
     7ac:	00746e69 	rsbseq	r6, r4, r9, ror #28
     7b0:	694c7870 	stmdbvs	ip, {r4, r5, r6, fp, ip, sp, lr}^
     7b4:	70007473 	andvc	r7, r0, r3, ror r4
     7b8:	77654e78 			@ <UNDEFINED> instruction: 0x77654e78
     7bc:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     7c0:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	@ 0xfffffedc
     7c4:	75517800 	ldrbvc	r7, [r1, #-2048]	@ 0xfffff800
     7c8:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
     7cc:	72656e65 	rsbvc	r6, r5, #1616	@ 0x650
     7d0:	65536369 	ldrbvs	r6, [r3, #-873]	@ 0xfffffc97
     7d4:	7246646e 	subvc	r6, r6, #1845493760	@ 0x6e000000
     7d8:	53496d6f 	movtpl	r6, #40303	@ 0x9d6f
     7dc:	63750052 	cmnvs	r5, #82	@ 0x52
     7e0:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     7e4:	70795465 	rsbsvc	r5, r9, r5, ror #8
     7e8:	51780065 	cmnpl	r8, r5, rrx
     7ec:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     7f0:	75517349 	ldrbvc	r7, [r1, #-841]	@ 0xfffffcb7
     7f4:	46657565 	strbtmi	r7, [r5], -r5, ror #10
     7f8:	466c6c75 			@ <UNDEFINED> instruction: 0x466c6c75
     7fc:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     800:	75005253 	strvc	r5, [r0, #-595]	@ 0xfffffdad
     804:	65755178 	ldrbvs	r5, [r5, #-376]!	@ 0xfffffe88
     808:	654d6575 	strbvs	r6, [sp, #-1397]	@ 0xfffffa8b
     80c:	67617373 			@ <UNDEFINED> instruction: 0x67617373
     810:	61577365 	cmpvs	r7, r5, ror #6
     814:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     818:	78700067 	ldmdavc	r0!, {r0, r1, r2, r5, r6}^
     81c:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
     820:	72507265 	subsvc	r7, r0, #1342177286	@ 0x50000006
     824:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     828:	61547974 	cmpvs	r4, r4, ror r9
     82c:	6f576b73 	svcvs	0x00576b73
     830:	006e656b 	rsbeq	r6, lr, fp, ror #10
     834:	65755178 	ldrbvs	r5, [r5, #-376]!	@ 0xfffffe88
     838:	73496575 	movtvc	r6, #38261	@ 0x9575
     83c:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     840:	706d4565 	rsbvc	r4, sp, r5, ror #10
     844:	72467974 	subvc	r7, r6, #116, 18	@ 0x1d0000
     848:	53496d6f 	movtpl	r6, #40303	@ 0x9d6f
     84c:	72700052 	rsbsvc	r0, r0, #82	@ 0x52
     850:	51734976 	cmnpl	r3, r6, ror r9
     854:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     858:	74706d45 	ldrbtvc	r6, [r0], #-3397	@ 0xfffff2bb
     85c:	72700079 	rsbsvc	r0, r0, #121	@ 0x79
     860:	706f4376 	rsbvc	r4, pc, r6, ror r3	@ <UNPREDICTABLE>
     864:	74614479 	strbtvc	r4, [r1], #-1145	@ 0xfffffb87
     868:	6f724661 	svcvs	0x00724661
     86c:	6575516d 	ldrbvs	r5, [r5, #-365]!	@ 0xfffffe93
     870:	70006575 	andvc	r6, r0, r5, ror r5
     874:	77654e78 			@ <UNDEFINED> instruction: 0x77654e78
     878:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     87c:	72700065 	rsbsvc	r0, r0, #101	@ 0x65
     880:	706f4376 	rsbvc	r4, pc, r6, ror r3	@ <UNPREDICTABLE>
     884:	74614479 	strbtvc	r4, [r1], #-1145	@ 0xfffffb87
     888:	516f5461 	cmnpl	pc, r1, ror #8
     88c:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     890:	49547800 	ldmdbmi	r4, {fp, ip, sp, lr}^
     894:	4f5f454d 	svcmi	0x005f454d
     898:	78005455 	stmdavc	r0, {r0, r2, r4, r6, sl, ip, lr}
     89c:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     8a0:	6e654765 	cdpvs	7, 6, cr4, cr5, cr5, {3}
     8a4:	63697265 	cmnvs	r9, #1342177286	@ 0x50000006
     8a8:	65636552 	strbvs	r6, [r3, #-1362]!	@ 0xfffffaae
     8ac:	00657669 	rsbeq	r7, r5, r9, ror #12
     8b0:	706f4378 	rsbvc	r4, pc, r8, ror r3	@ <UNPREDICTABLE>
     8b4:	736f5079 	cmnvc	pc, #121	@ 0x79
     8b8:	6f697469 	svcvs	0x00697469
     8bc:	6370006e 	cmnvs	r0, #110	@ 0x6e
     8c0:	6769724f 	strbvs	r7, [r9, -pc, asr #4]!
     8c4:	6c616e69 	stclvs	14, cr6, [r1], #-420	@ 0xfffffe5c
     8c8:	64616552 	strbtvs	r6, [r1], #-1362	@ 0xfffffaae
     8cc:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     8d0:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
     8d4:	6d656d00 	stclvs	13, cr6, [r5, #-0]
     8d8:	00797063 	rsbseq	r7, r9, r3, rrx
     8dc:	65526370 	ldrbvs	r6, [r2, #-880]	@ 0xfffffc90
     8e0:	72466461 	subvc	r6, r6, #1627389952	@ 0x61000000
     8e4:	78006d6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r8, sl, fp, sp, lr}
     8e8:	7265764f 	rsbvc	r7, r5, #82837504	@ 0x4f00000
     8ec:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
     8f0:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     8f4:	51760074 	cmnpl	r6, r4, ror r0
     8f8:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     8fc:	656c6544 	strbvs	r6, [ip, #-1348]!	@ 0xfffffabc
     900:	76006574 			@ <UNDEFINED> instruction: 0x76006574
     904:	6b736154 	blvs	1cd8e5c <__bss_end+0x1cb3224>
     908:	63616c50 	cmnvs	r1, #80, 24	@ 0x5000
     90c:	456e4f65 	strbmi	r4, [lr, #-3941]!	@ 0xfffff09b
     910:	746e6576 	strbtvc	r6, [lr], #-1398	@ 0xfffffa8a
     914:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     918:	48637000 	stmdami	r3!, {ip, sp, lr}^
     91c:	00646165 	rsbeq	r6, r4, r5, ror #2
     920:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	@ 0xfffffe20
     924:	456e4f65 	strbmi	r4, [lr, #-3941]!	@ 0xfffff09b
     928:	7265746e 	rsbvc	r7, r5, #1845493760	@ 0x6e000000
     92c:	00676e69 	rsbeq	r6, r7, r9, ror #28
     930:	73754a78 	cmnvc	r5, #120, 20	@ 0x78000
     934:	65655074 	strbvs	r5, [r5, #-116]!	@ 0xffffff8c
     938:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
     93c:	75517800 	ldrbvc	r7, [r1, #-2048]	@ 0xfffff800
     940:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
     944:	72656e65 	rsbvc	r6, r5, #1616	@ 0x650
     948:	65536369 	ldrbvs	r6, [r3, #-873]	@ 0xfffffc97
     94c:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     950:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
     954:	5474754f 	ldrbtpl	r7, [r4], #-1359	@ 0xfffffab1
     958:	00657079 	rsbeq	r7, r5, r9, ror r0
     95c:	65527875 	ldrbvs	r7, [r2, #-2165]	@ 0xfffff78b
     960:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
     964:	75517800 	ldrbvc	r7, [r1, #-2048]	@ 0xfffff800
     968:	48657565 	stmdami	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
     96c:	6c646e61 	stclvs	14, cr6, [r4], #-388	@ 0xfffffe7c
     970:	50760065 	rsbspl	r0, r6, r5, rrx
     974:	4674726f 	ldrbtmi	r7, [r4], -pc, ror #4
     978:	00656572 	rsbeq	r6, r5, r2, ror r5
     97c:	65755178 	ldrbvs	r5, [r5, #-376]!	@ 0xfffffe88
     980:	65526575 	ldrbvs	r6, [r2, #-1397]	@ 0xfffffa8b
     984:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     988:	6f724665 	svcvs	0x00724665
     98c:	5253496d 	subspl	r4, r3, #1785856	@ 0x1b4000
     990:	76727000 	ldrbtvc	r7, [r2], -r0
     994:	75517349 	ldrbvc	r7, [r1, #-841]	@ 0xfffffcb7
     998:	46657565 	strbtmi	r7, [r5], -r5, ror #10
     99c:	006c6c75 	rsbeq	r6, ip, r5, ror ip
     9a0:	654c7875 	strbvs	r7, [ip, #-2165]	@ 0xfffff78b
     9a4:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     9a8:	51787500 	cmnpl	r8, r0, lsl #10
     9ac:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     9b0:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
     9b4:	78006874 	stmdavc	r0, {r2, r4, r5, r6, fp, sp, lr}
     9b8:	6b736154 	blvs	1cd8f10 <__bss_end+0x1cb32d8>
     9bc:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     9c0:	676e6974 			@ <UNDEFINED> instruction: 0x676e6974
     9c4:	65526f54 	ldrbvs	r6, [r2, #-3924]	@ 0xfffff0ac
     9c8:	76696563 	strbtvc	r6, [r9], -r3, ror #10
     9cc:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     9d0:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     9d4:	73654d65 	cmnvc	r5, #6464	@ 0x1940
     9d8:	65676173 	strbvs	r6, [r7, #-371]!	@ 0xfffffe8d
     9dc:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     9e0:	676e6974 			@ <UNDEFINED> instruction: 0x676e6974
     9e4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	@ 8d4 <_start-0xf72c>
     9e8:	00525349 	subseq	r5, r2, r9, asr #6
     9ec:	74497670 	strbvc	r7, [r9], #-1648	@ 0xfffff990
     9f0:	6f546d65 	svcvs	0x00546d65
     9f4:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     9f8:	51780065 	cmnpl	r8, r5, rrx
     9fc:	45554555 	ldrbmi	r4, [r5, #-1365]	@ 0xfffffaab
     a00:	6e457800 	cdpvs	8, 4, cr7, cr5, cr0, {0}
     a04:	54797274 	ldrbtpl	r7, [r9], #-628	@ 0xfffffd8c
     a08:	53656d69 	cmnpl	r5, #6720	@ 0x1a40
     a0c:	51007465 	tstpl	r0, r5, ror #8
     a10:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     a14:	69666544 	stmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     a18:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     a1c:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     a20:	6b736154 	blvs	1cd8f78 <__bss_end+0x1cb3340>
     a24:	75736552 	ldrbvc	r6, [r3, #-1362]!	@ 0xfffffaae
     a28:	6c41656d 	cfstr64vs	mvdx6, [r1], {109}	@ 0x6d
     a2c:	5478006c 	ldrbtpl	r0, [r8], #-108	@ 0xffffff94
     a30:	636f4c78 	cmnvs	pc, #120, 24	@ 0x7800
     a34:	5178006b 	cmnpl	r8, fp, rrx
     a38:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     a3c:	656e6547 	strbvs	r6, [lr, #-1351]!	@ 0xfffffab9
     a40:	43636972 	cmnmi	r3, #1867776	@ 0x1c8000
     a44:	74616572 	strbtvc	r6, [r1], #-1394	@ 0xfffffa8e
     a48:	54760065 	ldrbtpl	r0, [r6], #-101	@ 0xffffff9b
     a4c:	4d6b7361 	stclmi	3, cr7, [fp, #-388]!	@ 0xfffffe7c
     a50:	65737369 	ldrbvs	r7, [r3, #-873]!	@ 0xfffffc97
     a54:	65695964 	strbvs	r5, [r9, #-2404]!	@ 0xfffff69c
     a58:	2f00646c 	svccs	0x0000646c
     a5c:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     a60:	646d632f 	strbtvs	r6, [sp], #-815	@ 0xfffffcd1
     a64:	482f6379 	stmdami	pc!, {r0, r3, r4, r5, r6, r8, r9, sp, lr}	@ <UNPREDICTABLE>
     a68:	72617865 	rsbvc	r7, r1, #6619136	@ 0x650000
     a6c:	732f6863 			@ <UNDEFINED> instruction: 0x732f6863
     a70:	522f6372 	eorpl	r6, pc, #-939524095	@ 0xc8000001
     a74:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     a78:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     a7c:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     a80:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     a84:	2f534f54 	svccs	0x00534f54
     a88:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     a8c:	534f5452 	movtpl	r5, #62546	@ 0xf452
     a90:	756f532f 	strbvc	r5, [pc, #-815]!	@ 769 <_start-0xf897>
     a94:	2f656372 	svccs	0x00656372
     a98:	75657571 	strbvc	r7, [r5, #-1393]!	@ 0xfffffa8f
     a9c:	00632e65 	rsbeq	r2, r3, r5, ror #28
     aa0:	61537875 	cmpvs	r3, r5, ror r8
     aa4:	49646576 	stmdbmi	r4!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     aa8:	7265746e 	rsbvc	r7, r5, #1845493760	@ 0x6e000000
     aac:	74707572 	ldrbtvc	r7, [r0], #-1394	@ 0xfffffa8e
     ab0:	74617453 	strbtvc	r7, [r1], #-1107	@ 0xfffffbad
     ab4:	75007375 	strvc	r7, [r0, #-885]	@ 0xfffffc8b
     ab8:	73654d78 	cmnvc	r5, #120, 26	@ 0x1e00
     abc:	65676173 	strbvs	r6, [r7, #-371]!	@ 0xfffffe8d
     ac0:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     ac4:	676e6974 			@ <UNDEFINED> instruction: 0x676e6974
     ac8:	42767000 	rsbsmi	r7, r6, #0
     acc:	65666675 	strbvs	r6, [r6, #-1653]!	@ 0xfffff98b
     ad0:	51780072 	cmnpl	r8, r2, ror r0
     ad4:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     ad8:	656e6547 	strbvs	r6, [lr, #-1351]!	@ 0xfffffab9
     adc:	52636972 	rsbpl	r6, r3, #1867776	@ 0x1c8000
     ae0:	74657365 	strbtvc	r7, [r5], #-869	@ 0xfffffc9b
     ae4:	61547800 	cmpvs	r4, r0, lsl #16
     ae8:	65526b73 	ldrbvs	r6, [r2, #-2931]	@ 0xfffff48d
     aec:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	@ 0xfffff093
     af0:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	@ 9e0 <_start-0xf620>
     af4:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     af8:	73694c74 	cmnvc	r9, #116, 24	@ 0x7400
     afc:	72700074 	rsbsvc	r0, r0, #116	@ 0x74
     b00:	6c6e5576 	cfstr64vs	mvdx5, [lr], #-472	@ 0xfffffe28
     b04:	516b636f 	cmnpl	fp, pc, ror #6
     b08:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     b0c:	78527800 	ldmdavc	r2, {fp, ip, sp, lr}^
     b10:	6b636f4c 	blvs	18dc848 <__bss_end+0x18b6c10>
     b14:	54637000 	strbtpl	r7, [r3], #-0
     b18:	006c6961 	rsbeq	r6, ip, r1, ror #18
     b1c:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
     b20:	6568436b 	strbvs	r4, [r8, #-875]!	@ 0xfffffc95
     b24:	6f466b63 	svcvs	0x00466b63
     b28:	6d695472 	cfstrdvs	mvd5, [r9, #-456]!	@ 0xfffffe38
     b2c:	74754f65 	ldrbtvc	r4, [r5], #-3941	@ 0xfffff09b
     b30:	6f507800 	svcvs	0x00507800
     b34:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     b38:	76006e6f 	strvc	r6, [r0], -pc, ror #28
     b3c:	6b736154 	blvs	1cd9094 <__bss_end+0x1cb345c>
     b40:	70737553 	rsbsvc	r7, r3, r3, asr r5
     b44:	41646e65 	cmnmi	r4, r5, ror #28
     b48:	78006c6c 	stmdavc	r0, {r2, r3, r5, r6, sl, fp, sp, lr}
     b4c:	6b736154 	blvs	1cd90a4 <__bss_end+0x1cb346c>
     b50:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     b54:	676e6974 			@ <UNDEFINED> instruction: 0x676e6974
     b58:	65536f54 	ldrbvs	r6, [r3, #-3924]	@ 0xfffff0ac
     b5c:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     b60:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     b64:	7a695365 	bvc	1a55900 <__bss_end+0x1a2fcc8>
     b68:	426e4965 	rsbmi	r4, lr, #1654784	@ 0x194000
     b6c:	73657479 	cmnvc	r5, #2030043136	@ 0x79000000
     b70:	51787000 	cmnpl	r8, r0
     b74:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     b78:	57637000 	strbpl	r7, [r3, -r0]!
     b7c:	65746972 	ldrbvs	r6, [r4, #-2418]!	@ 0xfffff68e
     b80:	75006f54 	strvc	r6, [r0, #-3924]	@ 0xfffff0ac
     b84:	65744978 	ldrbvs	r4, [r4, #-2424]!	@ 0xfffff688
     b88:	7a69536d 	bvc	1a55944 <__bss_end+0x1a2fd0c>
     b8c:	54760065 	ldrbtpl	r0, [r6], #-101	@ 0xffffff9b
     b90:	536b7361 	cmnpl	fp, #-2080374783	@ 0x84000001
     b94:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     b98:	754f656d 	strbvc	r6, [pc, #-1389]	@ 633 <_start-0xf9cd>
     b9c:	61745374 	cmnvs	r4, r4, ror r3
     ba0:	70006574 	andvc	r6, r0, r4, ror r5
     ba4:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
     ba8:	61697469 	cmnvs	r9, r9, ror #8
     bac:	6573696c 	ldrbvs	r6, [r3, #-2412]!	@ 0xfffff694
     bb0:	56424354 			@ <UNDEFINED> instruction: 0x56424354
     bb4:	61697261 	cmnvs	r9, r1, ror #4
     bb8:	73656c62 	cmnvc	r5, #25088	@ 0x6200
     bbc:	61547600 	cmpvs	r4, r0, lsl #12
     bc0:	75536b73 	ldrbvc	r6, [r3, #-2931]	@ 0xfffff48d
     bc4:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
     bc8:	78750064 	ldmdavc	r5!, {r2, r5, r6}^
     bcc:	72727543 	rsbsvc	r7, r2, #281018368	@ 0x10c00000
     bd0:	4e746e65 	cdpmi	14, 7, cr6, cr4, cr5, {3}
     bd4:	65626d75 	strbvs	r6, [r2, #-3445]!	@ 0xfffff28b
     bd8:	54664f72 	strbtpl	r4, [r6], #-3954	@ 0xfffff08e
     bdc:	736b7361 	cmnvc	fp, #-2080374783	@ 0x84000001
     be0:	54787500 	ldrbtpl	r7, [r8], #-1280	@ 0xfffffb00
     be4:	736b7361 	cmnvc	fp, #-2080374783	@ 0x84000001
     be8:	656c6544 	strbvs	r6, [ip, #-1348]!	@ 0xfffffabc
     bec:	00646574 	rsbeq	r6, r4, r4, ror r5
     bf0:	6f487870 	svcvs	0x00487870
     bf4:	75466b6f 	strbvc	r6, [r6, #-2927]	@ 0xfffff491
     bf8:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     bfc:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     c00:	70737553 	rsbsvc	r7, r3, r3, asr r5
     c04:	65646e65 	strbvs	r6, [r4, #-3685]!	@ 0xfffff19b
     c08:	73615464 	cmnvc	r1, #100, 8	@ 0x64000000
     c0c:	73694c6b 	cmnvc	r9, #27392	@ 0x6b00
     c10:	74730074 	ldrbtvc	r0, [r3], #-116	@ 0xffffff8c
     c14:	70636e72 	rsbvc	r6, r3, r2, ror lr
     c18:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
     c1c:	6b736154 	blvs	1cd9174 <__bss_end+0x1cb353c>
     c20:	00676154 	rsbeq	r6, r7, r4, asr r1
     c24:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
     c28:	6e65476b 	cdpvs	7, 6, cr4, cr5, cr11, {3}
     c2c:	63697265 	cmnvs	r9, #1342177286	@ 0x50000006
     c30:	61657243 	cmnvs	r5, r3, asr #4
     c34:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     c38:	65726c41 	ldrbvs	r6, [r2, #-3137]!	@ 0xfffff3bf
     c3c:	59796461 	ldmdbpl	r9!, {r0, r5, r6, sl, sp, lr}^
     c40:	646c6569 	strbtvs	r6, [ip], #-1385	@ 0xfffffa97
     c44:	70006465 	andvc	r6, r0, r5, ror #8
     c48:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	@ 0xfffffe20
     c4c:	74754f65 	ldrbtvc	r4, [r5], #-3941	@ 0xfffff09b
     c50:	61547600 	cmpvs	r4, r0, lsl #12
     c54:	72506b73 	subsvc	r6, r0, #117760	@ 0x1cc00
     c58:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     c5c:	65537974 	ldrbvs	r7, [r3, #-2420]	@ 0xfffff68c
     c60:	4c780074 	ldclmi	0, cr0, [r8], #-464	@ 0xfffffe30
     c64:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     c68:	706d4573 	rsbvc	r4, sp, r3, ror r5
     c6c:	70007974 	andvc	r7, r0, r4, ror r9
     c70:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
     c74:	526f546b 	rsbpl	r5, pc, #1795162112	@ 0x6b000000
     c78:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	@ 0xfffffe6c
     c7c:	54760065 	ldrbtpl	r0, [r6], #-101	@ 0xffffff9b
     c80:	446b7361 	strbtmi	r7, [fp], #-865	@ 0xfffffc9f
     c84:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     c88:	61547800 	cmpvs	r4, r0, lsl #16
     c8c:	61486b73 	hvcvs	34483	@ 0x86b3
     c90:	656c646e 	strbvs	r6, [ip, #-1134]!	@ 0xfffffb92
     c94:	61547800 	cmpvs	r4, r0, lsl #16
     c98:	61436b73 	hvcvs	14003	@ 0x36b3
     c9c:	70416c6c 	subvc	r6, r1, ip, ror #24
     ca0:	63696c70 	cmnvs	r9, #112, 24	@ 0x7000
     ca4:	6f697461 	svcvs	0x00697461
     ca8:	7361546e 	cmnvc	r1, #1845493760	@ 0x6e000000
     cac:	6f6f486b 	svcvs	0x006f486b
     cb0:	7374006b 	cmnvc	r4, #107	@ 0x6b
     cb4:	7361546b 	cmnvc	r1, #1795162112	@ 0x6b000000
     cb8:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     cbc:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	@ af4 <_start-0xf50c>
     cc0:	636f6c42 	cmnvs	pc, #16896	@ 0x4200
     cc4:	7870006b 	ldmdavc	r0!, {r0, r1, r3, r5, r6}^
     cc8:	5477654e 	ldrbtpl	r6, [r7], #-1358	@ 0xfffffab2
     ccc:	78004243 	stmdavc	r0, {r0, r1, r6, r9, lr}
     cd0:	6b736154 	blvs	1cd9228 <__bss_end+0x1cb35f0>
     cd4:	54746547 	ldrbtpl	r6, [r4], #-1351	@ 0xfffffab9
     cd8:	436b6369 	cmnmi	fp, #-1543503871	@ 0xa4000001
     cdc:	746e756f 	strbtvc	r7, [lr], #-1391	@ 0xfffffa91
     ce0:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	@ bd0 <_start-0xf430>
     ce4:	00525349 	subseq	r5, r2, r9, asr #6
     ce8:	41767270 	cmnmi	r6, r0, ror r2
     cec:	636f6c6c 	cmnvs	pc, #108, 24	@ 0x6c00
     cf0:	54657461 	strbtpl	r7, [r5], #-1121	@ 0xfffffb9f
     cf4:	6e414243 	cdpvs	2, 4, cr4, cr1, cr3, {2}
     cf8:	61745364 	cmnvs	r4, r4, ror #6
     cfc:	75006b63 	strvc	r6, [r0, #-2915]	@ 0xfffff49d
     d00:	61745373 	cmnvs	r4, r3, ror r3
     d04:	65446b63 	strbvs	r6, [r4, #-2915]	@ 0xfffff49d
     d08:	00687470 	rsbeq	r7, r8, r0, ror r4
     d0c:	53787570 	cmnpl	r8, #112, 10	@ 0x1c000000
     d10:	6b636174 	blvs	18d92e8 <__bss_end+0x18b36b0>
     d14:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     d18:	76007265 	strvc	r7, [r0], -r5, ror #4
     d1c:	6b736154 	blvs	1cd9274 <__bss_end+0x1cb363c>
     d20:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
     d24:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
     d28:	6c756465 	cfldrdvs	mvd6, [r5], #-404	@ 0xfffffe6c
     d2c:	70007265 	andvc	r7, r0, r5, ror #4
     d30:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
     d34:	7670006b 	ldrbtvc	r0, [r0], -fp, rrx
     d38:	61726150 	cmnvs	r2, r0, asr r1
     d3c:	6574656d 	ldrbvs	r6, [r4, #-1389]!	@ 0xfffffa93
     d40:	78750072 	ldmdavc	r5!, {r1, r4, r5, r6}^
     d44:	65686353 	strbvs	r6, [r8, #-851]!	@ 0xfffffcad
     d48:	656c7564 	strbvs	r7, [ip, #-1380]!	@ 0xfffffa9c
     d4c:	73755372 	cmnvc	r5, #-939524095	@ 0xc8000001
     d50:	646e6570 	strbtvs	r6, [lr], #-1392	@ 0xfffffa90
     d54:	70006465 	andvc	r6, r0, r5, ror #8
     d58:	65724378 	ldrbvs	r4, [r2, #-888]!	@ 0xfffffc88
     d5c:	64657461 	strbtvs	r7, [r5], #-1121	@ 0xfffffb9f
     d60:	6b736154 	blvs	1cd92b8 <__bss_end+0x1cb3680>
     d64:	61547800 	cmpvs	r4, r0, lsl #16
     d68:	73496b73 	movtvc	r6, #39795	@ 0x9b73
     d6c:	6b736154 	blvs	1cd92c4 <__bss_end+0x1cb368c>
     d70:	70737553 	rsbsvc	r7, r3, r3, asr r5
     d74:	65646e65 	strbvs	r6, [r4, #-3685]!	@ 0xfffff19b
     d78:	682f0064 	stmdavs	pc!, {r2, r5, r6}	@ <UNPREDICTABLE>
     d7c:	2f656d6f 	svccs	0x00656d6f
     d80:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
     d84:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
     d88:	63726178 	cmnvs	r2, #120, 2
     d8c:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
     d90:	61522f63 	cmpvs	r2, r3, ror #30
     d94:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     d98:	50797272 	rsbspl	r7, r9, r2, ror r2
     d9c:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     da0:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     da4:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     da8:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     dac:	2f534f54 	svccs	0x00534f54
     db0:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     db4:	742f6563 	strtvc	r6, [pc], #-1379	@ dbc <_start-0xf244>
     db8:	736b7361 	cmnvc	fp, #-2080374783	@ 0x84000001
     dbc:	7400632e 	strvc	r6, [r0], #-814	@ 0xfffffcd2
     dc0:	43546b73 	cmpmi	r4, #117760	@ 0x1cc00
     dc4:	64700042 	ldrbtvs	r0, [r0], #-66	@ 0xffffffbe
     dc8:	4b534154 	blmi	14d1320 <__bss_end+0x14ab6e8>
     dcc:	4f4f485f 	svcmi	0x004f485f
     dd0:	4f435f4b 	svcmi	0x00435f4b
     dd4:	70004544 	andvc	r4, r0, r4, asr #10
     dd8:	42435478 	submi	r5, r3, #120, 8	@ 0x78000000
     ddc:	69597800 	ldmdbvs	r9, {fp, ip, sp, lr}^
     de0:	52646c65 	rsbpl	r6, r4, #25856	@ 0x6500
     de4:	69757165 	ldmdbvs	r5!, {r0, r2, r5, r6, r8, ip, sp, lr}^
     de8:	00646572 	rsbeq	r6, r4, r2, ror r5
     dec:	73615476 	cmnvc	r1, #1979711488	@ 0x76000000
     df0:	7365526b 	cmnvc	r5, #-1342177274	@ 0xb0000006
     df4:	00656d75 	rsbeq	r6, r5, r5, ror sp
     df8:	73615476 	cmnvc	r1, #1979711488	@ 0x76000000
     dfc:	7465536b 	strbtvc	r5, [r5], #-875	@ 0xfffffc95
     e00:	6c707041 	ldclvs	0, cr7, [r0], #-260	@ 0xfffffefc
     e04:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
     e08:	546e6f69 	strbtpl	r6, [lr], #-3945	@ 0xfffff097
     e0c:	546b7361 	strbtpl	r7, [fp], #-865	@ 0xfffffc9f
     e10:	78006761 	stmdavc	r0, {r0, r5, r6, r8, r9, sl, sp, lr}
     e14:	4f4d454d 	svcmi	0x004d454d
     e18:	525f5952 	subspl	r5, pc, #1343488	@ 0x148000
     e1c:	4f494745 	svcmi	0x00494745
     e20:	7270004e 	rsbsvc	r0, r0, #78	@ 0x4e
     e24:	6c654476 	cfstrdvs	mvd4, [r5], #-472	@ 0xfffffe28
     e28:	54657465 	strbtpl	r7, [r5], #-1125	@ 0xfffffb9b
     e2c:	78004243 	stmdavc	r0, {r0, r1, r6, r9, lr}
     e30:	7373694d 	cmnvc	r3, #1261568	@ 0x134000
     e34:	69596465 	ldmdbvs	r9, {r0, r2, r5, r6, sl, sp, lr}^
     e38:	00646c65 	rsbeq	r6, r4, r5, ror #24
     e3c:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     e40:	54656c64 	strbtpl	r6, [r5], #-3172	@ 0xfffff39c
     e44:	006b7361 	rsbeq	r7, fp, r1, ror #6
     e48:	65447870 	strbvs	r7, [r4, #-2160]	@ 0xfffff790
     e4c:	6579616c 	ldrbvs	r6, [r9, #-364]!	@ 0xfffffe94
     e50:	73615464 	cmnvc	r1, #100, 8	@ 0x64000000
     e54:	73694c6b 	cmnvc	r9, #27392	@ 0x6b00
     e58:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     e5c:	63617453 	cmnvs	r1, #1392508928	@ 0x53000000
     e60:	7875006b 	ldmdavc	r5!, {r0, r1, r3, r5, r6}^
     e64:	55706f54 	ldrbpl	r6, [r0, #-3924]!	@ 0xfffff0ac
     e68:	50646573 	rsbpl	r6, r4, r3, ror r5
     e6c:	726f6972 	rsbvc	r6, pc, #1867776	@ 0x1c8000
     e70:	00797469 	rsbseq	r7, r9, r9, ror #8
     e74:	764f7870 			@ <UNDEFINED> instruction: 0x764f7870
     e78:	6c667265 	sfmvs	f7, 2, [r6], #-404	@ 0xfffffe6c
     e7c:	6544776f 	strbvs	r7, [r4, #-1903]	@ 0xfffff891
     e80:	6579616c 	ldrbvs	r6, [r9, #-364]!	@ 0xfffffe94
     e84:	73615464 	cmnvc	r1, #100, 8	@ 0x64000000
     e88:	73694c6b 	cmnvc	r9, #27392	@ 0x6b00
     e8c:	6c750074 	ldclvs	0, cr0, [r5], #-464	@ 0xfffffe30
     e90:	61726150 	cmnvs	r2, r0, asr r1
     e94:	6574656d 	ldrbvs	r6, [r4, #-1389]!	@ 0xfffffa93
     e98:	70007372 	andvc	r7, r0, r2, ror r3
     e9c:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
     ea0:	446f546b 	strbtmi	r5, [pc], #-1131	@ ea8 <_start-0xf158>
     ea4:	74656c65 	strbtvc	r6, [r5], #-3173	@ 0xfffff39b
     ea8:	52780065 	rsbspl	r0, r8, #101	@ 0x65
     eac:	6f696765 	svcvs	0x00696765
     eb0:	7800736e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, ip, sp, lr}
     eb4:	646e6550 	strbtvs	r6, [lr], #-1360	@ 0xfffffab0
     eb8:	52676e69 	rsbpl	r6, r7, #1680	@ 0x690
     ebc:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     ec0:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     ec4:	61547800 	cmpvs	r4, r0, lsl #16
     ec8:	57736b73 			@ <UNDEFINED> instruction: 0x57736b73
     ecc:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     ed0:	6554676e 	ldrbvs	r6, [r4, #-1902]	@ 0xfffff892
     ed4:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
     ed8:	6f697461 	svcvs	0x00697461
     edc:	7870006e 	ldmdavc	r0!, {r1, r2, r3, r5, r6}^
     ee0:	6b736154 	blvs	1cd9438 <__bss_end+0x1cb3800>
     ee4:	65646f43 	strbvs	r6, [r4, #-3907]!	@ 0xfffff0bd
     ee8:	654e7800 	strbvs	r7, [lr, #-2048]	@ 0xfffff800
     eec:	61547478 	cmpvs	r4, r8, ror r4
     ef0:	6e556b73 	vmovvs.s8	r6, d5[3]
     ef4:	636f6c62 	cmnvs	pc, #25088	@ 0x6200
     ef8:	6d69546b 	cfstrdvs	mvd5, [r9, #-428]!	@ 0xfffffe54
     efc:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     f00:	52706f54 	rsbspl	r6, r0, #84, 30	@ 0x150
     f04:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     f08:	6f697250 	svcvs	0x00697250
     f0c:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     f10:	50787000 	rsbspl	r7, r8, r0
     f14:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     f18:	5773756f 	ldrbpl	r7, [r3, -pc, ror #10]!
     f1c:	54656b61 	strbtpl	r6, [r5], #-2913	@ 0xfffff49f
     f20:	00656d69 	rsbeq	r6, r5, r9, ror #26
     f24:	654c6c75 	strbvs	r6, [ip, #-3189]	@ 0xfffff38b
     f28:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     f2c:	79426e49 	stmdbvc	r2, {r0, r3, r6, r9, sl, fp, sp, lr}^
     f30:	00736574 	rsbseq	r6, r3, r4, ror r5
     f34:	654e7875 	strbvs	r7, [lr, #-2165]	@ 0xfffff78b
     f38:	69725077 	ldmdbvs	r2!, {r0, r1, r2, r4, r5, r6, ip, lr}^
     f3c:	7469726f 	strbtvc	r7, [r9], #-623	@ 0xfffffd91
     f40:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
     f44:	6c626e55 	stclvs	14, cr6, [r2], #-340	@ 0xfffffeac
     f48:	656b636f 	strbvs	r6, [fp, #-879]!	@ 0xfffffc91
     f4c:	42435464 	submi	r5, r3, #100, 8	@ 0x64000000
     f50:	61547600 	cmpvs	r4, r0, lsl #12
     f54:	65446b73 	strbvs	r6, [r4, #-2931]	@ 0xfffff48d
     f58:	5579616c 	ldrbpl	r6, [r9, #-364]!	@ 0xfffffe94
     f5c:	6c69746e 	cfstrdvs	mvd7, [r9], #-440	@ 0xfffffe48
     f60:	63537800 	cmpvs	r3, #0, 16
     f64:	75646568 	strbvc	r6, [r4, #-1384]!	@ 0xfffffa98
     f68:	5272656c 	rsbspl	r6, r2, #108, 10	@ 0x1b000000
     f6c:	696e6e75 	stmdbvs	lr!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     f70:	7600676e 	strvc	r6, [r0], -lr, ror #14
     f74:	6b736154 	blvs	1cd94cc <__bss_end+0x1cb3894>
     f78:	53646e45 	cmnpl	r4, #1104	@ 0x450
     f7c:	64656863 	strbtvs	r6, [r5], #-2147	@ 0xfffff79d
     f80:	72656c75 	rsbvc	r6, r5, #29952	@ 0x7500
     f84:	61547800 	cmpvs	r4, r0, lsl #16
     f88:	65526b73 	ldrbvs	r6, [r2, #-2931]	@ 0xfffff48d
     f8c:	656d7573 	strbvs	r7, [sp, #-1395]!	@ 0xfffffa8d
     f90:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	@ e80 <_start-0xf180>
     f94:	00525349 	subseq	r5, r2, r9, asr #6
     f98:	6f685378 	svcvs	0x00685378
     f9c:	44646c75 	strbtmi	r6, [r4], #-3189	@ 0xfffff38b
     fa0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     fa4:	76727000 	ldrbtvc	r7, [r2], -r0
     fa8:	63656843 	cmnvs	r5, #4390912	@ 0x430000
     fac:	7361546b 	cmnvc	r1, #1795162112	@ 0x6b000000
     fb0:	6157736b 	cmpvs	r7, fp, ror #6
     fb4:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     fb8:	72655467 	rsbvc	r5, r5, #1728053248	@ 0x67000000
     fbc:	616e696d 	cmnvs	lr, sp, ror #18
     fc0:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
     fc4:	654d7800 	strbvs	r7, [sp, #-2048]	@ 0xfffff800
     fc8:	79726f6d 	ldmdbvc	r2!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     fcc:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
     fd0:	70006e6f 	andvc	r6, r0, pc, ror #28
     fd4:	64417672 	strbvs	r7, [r1], #-1650	@ 0xfffff98e
     fd8:	72754364 	rsbsvc	r4, r5, #100, 6	@ 0x90000001
     fdc:	746e6572 	strbtvc	r6, [lr], #-1394	@ 0xfffffa8e
     fe0:	6b736154 	blvs	1cd9538 <__bss_end+0x1cb3900>
     fe4:	65446f54 	strbvs	r6, [r4, #-3924]	@ 0xfffff0ac
     fe8:	6579616c 	ldrbvs	r6, [r9, #-364]!	@ 0xfffffe94
     fec:	73694c64 	cmnvc	r9, #100, 24	@ 0x6400
     ff0:	54760074 	ldrbtpl	r0, [r6], #-116	@ 0xffffff8c
     ff4:	446b7361 	strbtmi	r7, [fp], #-865	@ 0xfffffc9f
     ff8:	74656c65 	strbtvc	r6, [r5], #-3173	@ 0xfffff39b
     ffc:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    1000:	6b736154 	blvs	1cd9558 <__bss_end+0x1cb3920>
    1004:	626d754e 	rsbvs	r7, sp, #327155712	@ 0x13800000
    1008:	70007265 	andvc	r7, r0, r5, ror #4
    100c:	61655278 	smcvs	21800	@ 0x5528
    1010:	61547964 	cmpvs	r4, r4, ror #18
    1014:	4c736b73 			@ <UNDEFINED> instruction: 0x4c736b73
    1018:	73747369 	cmnvc	r4, #-1543503871	@ 0xa4000001
    101c:	54787500 	ldrbtpl	r7, [r8], #-1280	@ 0xfffffb00
    1020:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
    1024:	754e7465 	strbvc	r7, [lr, #-1125]	@ 0xfffffb9b
    1028:	7265626d 	rsbvc	r6, r5, #-805306362	@ 0xd0000006
    102c:	6154664f 	cmpvs	r4, pc, asr #12
    1030:	00736b73 	rsbseq	r6, r3, r3, ror fp
    1034:	6c654478 	cfstrdvs	mvd4, [r5], #-480	@ 0xfffffe20
    1038:	64657961 	strbtvs	r7, [r5], #-2401	@ 0xfffff69f
    103c:	6b736154 	blvs	1cd9594 <__bss_end+0x1cb395c>
    1040:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
    1044:	44780031 	ldrbtmi	r0, [r8], #-49	@ 0xffffffcf
    1048:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
    104c:	61546465 	cmpvs	r4, r5, ror #8
    1050:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    1054:	00327473 	eorseq	r7, r2, r3, ror r4
    1058:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	@ 0xfffffe20
    105c:	764f664f 	strbvc	r6, [pc], -pc, asr #12
    1060:	6c667265 	sfmvs	f7, 2, [r6], #-404	@ 0xfffffe6c
    1064:	0073776f 	rsbseq	r7, r3, pc, ror #14
    1068:	63695478 	cmnvs	r9, #120, 8	@ 0x78000000
    106c:	7800736b 	stmdavc	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    1070:	6b636954 	blvs	18db5c8 <__bss_end+0x18b5990>
    1074:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1078:	656d0074 	strbvs	r0, [sp, #-116]!	@ 0xffffff8c
    107c:	7465736d 	strbtvc	r7, [r5], #-877	@ 0xfffffc93
    1080:	4d787500 	cfldr64mi	mvdx7, [r8, #-0]
    1084:	65737369 	ldrbvs	r7, [r3, #-873]!	@ 0xfffffc97
    1088:	63695464 	cmnvs	r9, #100, 8	@ 0x64000000
    108c:	7800736b 	stmdavc	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    1090:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
    1094:	72636e49 	rsbvc	r6, r3, #1168	@ 0x490
    1098:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
    109c:	63700074 	cmnvs	r0, #116	@ 0x74
    10a0:	6b736154 	blvs	1cd95f8 <__bss_end+0x1cb39c0>
    10a4:	656d614e 	strbvs	r6, [sp, #-334]!	@ 0xfffffeb2
    10a8:	61547800 	cmpvs	r4, r0, lsl #16
    10ac:	65476b73 	strbvs	r6, [r7, #-2931]	@ 0xfffff48d
    10b0:	70704174 	rsbsvc	r4, r0, r4, ror r1
    10b4:	6163696c 	cmnvs	r3, ip, ror #18
    10b8:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
    10bc:	6b736154 	blvs	1cd9614 <__bss_end+0x1cb39dc>
    10c0:	00676154 	rsbeq	r6, r7, r4, asr r1
    10c4:	69547870 	ldmdbvs	r4, {r4, r5, r6, fp, ip, sp, lr}^
    10c8:	54736b63 	ldrbtpl	r6, [r3], #-2915	@ 0xfffff49d
    10cc:	6961576f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, lr}^
    10d0:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
    10d4:	72727543 	rsbsvc	r7, r2, #281018368	@ 0x10c00000
    10d8:	50746e65 	rsbspl	r6, r4, r5, ror #28
    10dc:	726f6972 	rsbvc	r6, pc, #1867776	@ 0x1c8000
    10e0:	00797469 	rsbseq	r7, r9, r9, ror #8
    10e4:	614e6370 	hvcvs	58928	@ 0xe630
    10e8:	7500656d 	strvc	r6, [r0, #-1389]	@ 0xfffffa93
    10ec:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
    10f0:	6972506b 	ldmdbvs	r2!, {r0, r1, r3, r5, r6, ip, lr}^
    10f4:	7469726f 	strbtvc	r7, [r9], #-623	@ 0xfffffd91
    10f8:	74654779 	strbtvc	r4, [r5], #-1913	@ 0xfffff887
    10fc:	54787000 	ldrbtpl	r7, [r8], #-0
    1100:	546b7361 	strbtpl	r7, [fp], #-865	@ 0xfffffc9f
    1104:	7375536f 	cmnvc	r5, #-1140850687	@ 0xbc000001
    1108:	646e6570 	strbtvs	r6, [lr], #-1392	@ 0xfffffa90
    110c:	42767000 	rsbsmi	r7, r6, #0
    1110:	41657361 	cmnmi	r5, r1, ror #6
    1114:	65726464 	ldrbvs	r6, [r2, #-1124]!	@ 0xfffffb9c
    1118:	70007373 	andvc	r7, r0, r3, ror r3
    111c:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
    1120:	61697469 	cmnvs	r9, r9, ror #8
    1124:	6573696c 	ldrbvs	r6, [r3, #-2412]!	@ 0xfffff694
    1128:	6b736154 	blvs	1cd9680 <__bss_end+0x1cb3a48>
    112c:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
    1130:	65500073 	ldrbvs	r0, [r0, #-115]	@ 0xffffff8d
    1134:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    1138:	44003267 	strmi	r3, [r0], #-615	@ 0xfffffd99
    113c:	62617369 	rsbvs	r7, r1, #-1543503871	@ 0xa4000001
    1140:	6142656c 	cmpvs	r2, ip, ror #10
    1144:	00636973 	rsbeq	r6, r3, r3, ror r9
    1148:	324d4342 	subcc	r4, sp, #134217729	@ 0x8000001
    114c:	5f353338 	svcpl	0x00353338
    1150:	43544e49 	cmpmi	r4, #1168	@ 0x490
    1154:	4745525f 	smlsldmi	r5, r5, pc, r2	@ <UNPREDICTABLE>
    1158:	49460053 	stmdbmi	r6, {r0, r1, r4, r6}^
    115c:	72744351 	rsbsvc	r4, r4, #1140850689	@ 0x44000001
    1160:	6c75006c 	ldclvs	0, cr0, [r5], #-432	@ 0xfffffe50
    1164:	6b73614d 	blvs	1cd96a0 <__bss_end+0x1cb3a68>
    1168:	74536465 	ldrbvc	r6, [r3], #-1125	@ 0xfffffb9b
    116c:	73757461 	cmnvc	r5, #1627389952	@ 0x61000000
    1170:	73616200 	cmnvc	r1, #0, 4
    1174:	6e650065 	cdpvs	0, 6, cr0, cr5, cr5, {3}
    1178:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
    117c:	61680064 	cmnvs	r8, r4, rrx
    1180:	656c646e 	strbvs	r6, [ip, #-1134]!	@ 0xfffffb92
    1184:	676e6152 			@ <UNDEFINED> instruction: 0x676e6152
    1188:	616d0065 	cmnvs	sp, r5, rrx
    118c:	2f006b73 	svccs	0x00006b73
    1190:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
    1194:	646d632f 	strbtvs	r6, [sp], #-815	@ 0xfffffcd1
    1198:	482f6379 	stmdami	pc!, {r0, r3, r4, r5, r6, r8, r9, sp, lr}	@ <UNPREDICTABLE>
    119c:	72617865 	rsbvc	r7, r1, #6619136	@ 0x650000
    11a0:	732f6863 			@ <UNDEFINED> instruction: 0x732f6863
    11a4:	522f6372 	eorpl	r6, pc, #-939524095	@ 0xc8000001
    11a8:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
    11ac:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    11b0:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
    11b4:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
    11b8:	2f534f54 	svccs	0x00534f54
    11bc:	6f6d6544 	svcvs	0x006d6544
    11c0:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    11c4:	73726576 	cmnvc	r2, #494927872	@ 0x1d800000
    11c8:	7172692f 	cmnvc	r2, pc, lsr #18
    11cc:	6900632e 	stmdbvs	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    11d0:	69447172 	stmdbvs	r4, {r1, r4, r5, r6, r8, ip, sp, lr}^
    11d4:	6c626173 	stfvse	f6, [r2], #-460	@ 0xfffffe34
    11d8:	66700065 	ldrbtvs	r0, [r0], -r5, rrx
    11dc:	6e61486e 	cdpvs	8, 6, cr4, cr1, cr14, {3}
    11e0:	72656c64 	rsbvc	r6, r5, #100, 24	@ 0x6400
    11e4:	565f6700 	ldrbpl	r6, [pc], -r0, lsl #14
    11e8:	6f746365 	svcvs	0x00746365
    11ec:	62615472 	rsbvs	r5, r1, #1912602624	@ 0x72000000
    11f0:	5000656c 	andpl	r6, r0, ip, ror #10
    11f4:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    11f8:	0031676e 	eorseq	r6, r1, lr, ror #14
    11fc:	62616e45 	rsbvs	r6, r1, #1104	@ 0x450
    1200:	0032656c 	eorseq	r6, r2, ip, ror #10
    1204:	61736944 	cmnvs	r3, r4, asr #18
    1208:	31656c62 	cmncc	r5, r2, ror #24
    120c:	73694400 	cmnvc	r9, #0, 8
    1210:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
    1214:	4e490032 	mcrmi	0, 2, r0, cr9, cr2, {1}
    1218:	52524554 	subspl	r4, r2, #84, 10	@ 0x15000000
    121c:	5f545055 	svcpl	0x00545055
    1220:	54434556 	strbpl	r4, [r3], #-1366	@ 0xfffffaaa
    1224:	7000524f 	andvc	r5, r0, pc, asr #4
    1228:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    122c:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    1230:	61425152 	cmpvs	r2, r2, asr r1
    1234:	00636973 	rsbeq	r6, r3, r3, ror r9
    1238:	62616e45 	rsbvs	r6, r1, #1104	@ 0x450
    123c:	6142656c 	cmpvs	r2, ip, ror #10
    1240:	00636973 	rsbeq	r6, r3, r3, ror r9
    1244:	62616e45 	rsbvs	r6, r1, #1104	@ 0x450
    1248:	0031656c 	eorseq	r6, r1, ip, ror #10
    124c:	45535047 	ldrbmi	r5, [r3, #-71]	@ 0xffffffb9
    1250:	43420054 	movtmi	r0, #8276	@ 0x2054
    1254:	3338324d 	teqcc	r8, #-805306364	@ 0xd0000004
    1258:	50475f35 	subpl	r5, r7, r5, lsr pc
    125c:	525f4f49 	subspl	r4, pc, #292	@ 0x124
    1260:	00534745 	subseq	r4, r3, r5, asr #14
    1264:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	@ 0xfffffe5c
    1268:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    126c:	006d754e 	rsbeq	r7, sp, lr, asr #10
    1270:	64616552 	strbtvs	r6, [r1], #-1362	@ 0xfffffaae
    1274:	6f697047 	svcvs	0x00697047
    1278:	74655300 	strbtvc	r5, [r5], #-768	@ 0xfffffd00
    127c:	6f697047 	svcvs	0x00697047
    1280:	65726944 	ldrbvs	r6, [r2, #-2372]!	@ 0xfffff6bc
    1284:	6f697463 	svcvs	0x00697463
    1288:	5047006e 	subpl	r0, r7, lr, rrx
    128c:	00524c43 	subseq	r4, r2, r3, asr #24
    1290:	45485047 	strbmi	r5, [r8, #-71]	@ 0xffffffb9
    1294:	4544004e 	strbmi	r0, [r4, #-78]	@ 0xffffffb2
    1298:	54434554 	strbpl	r4, [r3], #-1364	@ 0xfffffaac
    129c:	5349525f 	movtpl	r5, #37471	@ 0x925f
    12a0:	5f474e49 	svcpl	0x00474e49
    12a4:	4e595341 	cdpmi	3, 5, cr5, cr9, cr1, {2}
    12a8:	682f0043 	stmdavs	pc!, {r0, r1, r6}	@ <UNPREDICTABLE>
    12ac:	2f656d6f 	svccs	0x00656d6f
    12b0:	79646d63 	stmdbvc	r4!, {r0, r1, r5, r6, r8, sl, fp, sp, lr}^
    12b4:	65482f63 	strbvs	r2, [r8, #-3939]	@ 0xfffff09d
    12b8:	63726178 	cmnvs	r2, #120, 2
    12bc:	72732f68 	rsbsvc	r2, r3, #104, 30	@ 0x1a0
    12c0:	61522f63 	cmpvs	r2, r3, ror #30
    12c4:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
    12c8:	50797272 	rsbspl	r7, r9, r2, ror r2
    12cc:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
    12d0:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
    12d4:	442f534f 	strtmi	r5, [pc], #-847	@ 12dc <_start-0xed24>
    12d8:	2f6f6d65 	svccs	0x006f6d65
    12dc:	76697244 	strbtvc	r7, [r9], -r4, asr #4
    12e0:	2f737265 	svccs	0x00737265
    12e4:	6f697067 	svcvs	0x00697067
    12e8:	4300632e 	movwmi	r6, #814	@ 0x32e
    12ec:	7261656c 	rsbvc	r6, r1, #108, 10	@ 0x1b000000
    12f0:	6f697047 	svcvs	0x00697047
    12f4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	@ 0xfffff1b7
    12f8:	70757272 	rsbsvc	r7, r5, r2, ror r2
    12fc:	50470074 	subpl	r0, r7, r4, ror r0
    1300:	4e454641 	cdpmi	6, 4, cr4, cr5, cr1, {2}
    1304:	616e4500 	cmnvs	lr, r0, lsl #10
    1308:	47656c62 	strbmi	r6, [r5, -r2, ror #24]!
    130c:	446f6970 	strbtmi	r6, [pc], #-2416	@ 1314 <_start-0xecec>
    1310:	63657465 	cmnvs	r5, #1694498816	@ 0x65000000
    1314:	50470074 	subpl	r0, r7, r4, ror r0
    1318:	00445550 	subeq	r5, r4, r0, asr r5
    131c:	45544544 	ldrbmi	r4, [r4, #-1348]	@ 0xfffffabc
    1320:	545f5443 	ldrbpl	r5, [pc], #-1091	@ 1328 <_start-0xecd8>
    1324:	00455059 	subeq	r5, r5, r9, asr r0
    1328:	566e6970 			@ <UNDEFINED> instruction: 0x566e6970
    132c:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    1330:	45524150 	ldrbmi	r4, [r2, #-336]	@ 0xfffffeb0
    1334:	6944004e 	stmdbvs	r4, {r1, r2, r3, r6}^
    1338:	6c626173 	stfvse	f6, [r2], #-460	@ 0xfffffe34
    133c:	69704765 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, lr}^
    1340:	7465446f 	strbtvc	r4, [r5], #-1135	@ 0xfffffb91
    1344:	00746365 	rsbseq	r6, r4, r5, ror #6
    1348:	47746553 			@ <UNDEFINED> instruction: 0x47746553
    134c:	466f6970 			@ <UNDEFINED> instruction: 0x466f6970
    1350:	74636e75 	strbtvc	r6, [r3], #-3701	@ 0xfffff18b
    1354:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1358:	4f495047 	svcmi	0x00495047
    135c:	5249445f 	subpl	r4, r9, #1593835520	@ 0x5f000000
    1360:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1364:	4e495f4f 	cdpmi	15, 4, cr5, cr9, cr15, {2}
    1368:	54454400 	strbpl	r4, [r5], #-1024	@ 0xfffffc00
    136c:	5f544345 	svcpl	0x00544345
    1370:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
    1374:	54454400 	strbpl	r4, [r5], #-1024	@ 0xfffffc00
    1378:	5f544345 	svcpl	0x00544345
    137c:	454e4f4e 	strbmi	r4, [lr, #-3918]	@ 0xfffff0b2
    1380:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
    1384:	47004e45 	strmi	r4, [r0, -r5, asr #28]
    1388:	44555050 	ldrbmi	r5, [r5], #-80	@ 0xffffffb0
    138c:	004b4c43 	subeq	r4, fp, r3, asr #24
    1390:	45544544 	ldrbmi	r4, [r4, #-1348]	@ 0xfffffabc
    1394:	525f5443 	subspl	r5, pc, #1124073472	@ 0x43000000
    1398:	4e495349 	cdpmi	3, 4, cr5, cr9, cr9, {2}
    139c:	45440047 	strbmi	r0, [r4, #-71]	@ 0xffffffb9
    13a0:	54434554 	strbpl	r4, [r3], #-1364	@ 0xfffffaac
    13a4:	574f4c5f 	smlsldpl	r4, pc, pc, ip	@ <UNPREDICTABLE>
    13a8:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
    13ac:	66005645 	strvs	r5, [r0], -r5, asr #12
    13b0:	4e636e75 	mcrmi	14, 3, r6, cr3, cr5, {3}
    13b4:	47006d75 	smlsdxmi	r0, r5, sp, r6
    13b8:	4e455250 	mcrmi	2, 2, r5, cr5, cr0, {2}
    13bc:	45504700 	ldrbmi	r4, [r0, #-1792]	@ 0xfffff900
    13c0:	47005344 	strmi	r5, [r0, -r4, asr #6]
    13c4:	4e454650 	mcrmi	6, 2, r4, cr5, cr0, {2}
    13c8:	70797400 	rsbsvc	r7, r9, r0, lsl #8
    13cc:	666f0065 	strbtvs	r0, [pc], -r5, rrx
    13d0:	74657366 	strbtvc	r7, [r5], #-870	@ 0xfffffc9a
    13d4:	46504700 	ldrbmi	r4, [r0], -r0, lsl #14
    13d8:	004c4553 	subeq	r4, ip, r3, asr r5
    13dc:	65736552 	ldrbvs	r6, [r3, #-1362]!	@ 0xfffffaae
    13e0:	64657672 	strbtvs	r7, [r5], #-1650	@ 0xfffff98e
    13e4:	5200315f 	andpl	r3, r0, #-1073741801	@ 0xc0000017
    13e8:	72657365 	rsbvc	r7, r5, #-1811939327	@ 0x94000001
    13ec:	5f646576 	svcpl	0x00646576
    13f0:	65520032 	ldrbvs	r0, [r2, #-50]	@ 0xffffffce
    13f4:	76726573 			@ <UNDEFINED> instruction: 0x76726573
    13f8:	335f6465 	cmpcc	pc, #1694498816	@ 0x65000000
    13fc:	73655200 	cmnvc	r5, #0, 4
    1400:	65767265 	ldrbvs	r7, [r6, #-613]!	@ 0xfffffd9b
    1404:	00345f64 	eorseq	r5, r4, r4, ror #30
    1408:	65736552 	ldrbvs	r6, [r3, #-1362]!	@ 0xfffffaae
    140c:	64657672 	strbtvs	r7, [r5], #-1650	@ 0xfffff98e
    1410:	5200355f 	andpl	r3, r0, #398458880	@ 0x17c00000
    1414:	72657365 	rsbvc	r7, r5, #-1811939327	@ 0x94000001
    1418:	5f646576 	svcpl	0x00646576
    141c:	65520036 	ldrbvs	r0, [r2, #-54]	@ 0xffffffca
    1420:	76726573 			@ <UNDEFINED> instruction: 0x76726573
    1424:	375f6465 	ldrbcc	r6, [pc, -r5, ror #8]
    1428:	73655200 	cmnvc	r5, #0, 4
    142c:	65767265 	ldrbvs	r7, [r6, #-613]!	@ 0xfffffd9b
    1430:	00385f64 	eorseq	r5, r8, r4, ror #30
    1434:	65736552 	ldrbvs	r6, [r3, #-1362]!	@ 0xfffffaae
    1438:	64657672 	strbtvs	r7, [r5], #-1650	@ 0xfffff98e
    143c:	4400395f 	strmi	r3, [r0], #-2399	@ 0xfffff6a1
    1440:	43455445 	movtmi	r5, #21573	@ 0x5445
    1444:	41465f54 	cmpmi	r6, r4, asr pc
    1448:	4e494c4c 	cdpmi	12, 4, cr4, cr9, cr12, {2}
    144c:	65530047 	ldrbvs	r0, [r3, #-71]	@ 0xffffffb9
    1450:	69704774 	ldmdbvs	r0!, {r2, r4, r5, r6, r8, r9, sl, lr}^
    1454:	6552006f 	ldrbvs	r0, [r2, #-111]	@ 0xffffff91
    1458:	76726573 			@ <UNDEFINED> instruction: 0x76726573
    145c:	415f6465 	cmpmi	pc, r5, ror #8
    1460:	73655200 	cmnvc	r5, #0, 4
    1464:	65767265 	ldrbvs	r7, [r6, #-613]!	@ 0xfffffd9b
    1468:	00425f64 	subeq	r5, r2, r4, ror #30
    146c:	45544544 	ldrbmi	r4, [r4, #-1348]	@ 0xfffffabc
    1470:	465f5443 	ldrbmi	r5, [pc], -r3, asr #8
    1474:	494c4c41 	stmdbmi	ip, {r0, r6, sl, fp, lr}^
    1478:	415f474e 	cmpmi	pc, lr, asr #14
    147c:	434e5953 	movtmi	r5, #59731	@ 0xe953
    1480:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1484:	554f5f4f 	strbpl	r5, [pc, #-3919]	@ 53d <_start-0xfac3>
    1488:	72700054 	rsbsvc	r0, r0, #84	@ 0x54
    148c:	736e4976 	cmnvc	lr, #1933312	@ 0x1d8000
    1490:	42747265 	rsbsmi	r7, r4, #1342177286	@ 0x50000006
    1494:	6b636f6c 	blvs	18dd24c <__bss_end+0x18b7614>
    1498:	6f746e49 	svcvs	0x00746e49
    149c:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
    14a0:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
    14a4:	6f507800 	svcvs	0x00507800
    14a8:	65477472 	strbvs	r7, [r7, #-1138]	@ 0xfffffb8e
    14ac:	65724674 	ldrbvs	r4, [r2, #-1652]!	@ 0xfffff98c
    14b0:	61654865 	cmnvs	r5, r5, ror #16
    14b4:	7a695370 	bvc	1a5627c <__bss_end+0x1a30644>
    14b8:	5f410065 	svcpl	0x00410065
    14bc:	434f4c42 	movtmi	r4, #64578	@ 0xfc42
    14c0:	494c5f4b 	stmdbmi	ip, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
    14c4:	70004b4e 	andvc	r4, r0, lr, asr #22
    14c8:	65487672 	strbvs	r7, [r8, #-1650]	@ 0xfffff98e
    14cc:	6e497061 	cdpvs	0, 4, cr7, cr9, cr1, {3}
    14d0:	70007469 	andvc	r7, r0, r9, ror #8
    14d4:	6f6c4278 	svcvs	0x006c4278
    14d8:	70006b63 	andvc	r6, r0, r3, ror #22
    14dc:	6e694c78 	mcrvs	12, 3, r4, cr9, cr8, {3}
    14e0:	7870006b 	ldmdavc	r0!, {r0, r1, r3, r5, r6}^
    14e4:	73726946 	cmnvc	r2, #1146880	@ 0x118000
    14e8:	65724674 	ldrbvs	r4, [r2, #-1652]!	@ 0xfffff98c
    14ec:	6f6c4265 	svcvs	0x006c4265
    14f0:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    14f4:	534f5452 	movtpl	r5, #62546	@ 0xf452
    14f8:	4145485f 	cmpmi	r5, pc, asr r8
    14fc:	63750050 	cmnvs	r5, #80	@ 0x50
    1500:	70616548 	rsbvc	r6, r1, r8, asr #10
    1504:	75446400 	strbvc	r6, [r4, #-1024]	@ 0xfffffc00
    1508:	00796d6d 	rsbseq	r6, r9, sp, ror #26
    150c:	6f6c4278 	svcvs	0x006c4278
    1510:	69536b63 	ldmdbvs	r3, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    1514:	7800657a 	stmdavc	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    1518:	70616548 	rsbvc	r6, r1, r8, asr #10
    151c:	45787000 	ldrbmi	r7, [r8, #-0]!
    1520:	7000646e 	andvc	r6, r0, lr, ror #8
    1524:	65725078 	ldrbvs	r5, [r2, #-120]!	@ 0xffffff88
    1528:	756f6976 	strbvc	r6, [pc, #-2422]!	@ bba <_start-0xf446>
    152c:	6f6c4273 	svcvs	0x006c4273
    1530:	2f006b63 	svccs	0x00006b63
    1534:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
    1538:	646d632f 	strbtvs	r6, [sp], #-815	@ 0xfffffcd1
    153c:	482f6379 	stmdami	pc!, {r0, r3, r4, r5, r6, r8, r9, sp, lr}	@ <UNPREDICTABLE>
    1540:	72617865 	rsbvc	r7, r1, #6619136	@ 0x650000
    1544:	732f6863 			@ <UNDEFINED> instruction: 0x732f6863
    1548:	522f6372 	eorpl	r6, pc, #-939524095	@ 0xc8000001
    154c:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
    1550:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1554:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
    1558:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
    155c:	2f534f54 	svccs	0x00534f54
    1560:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
    1564:	4f545265 	svcmi	0x00545265
    1568:	6f532f53 	svcvs	0x00532f53
    156c:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
    1570:	726f702f 	rsbvc	r7, pc, #47	@ 0x2f
    1574:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
    1578:	654d2f65 	strbvs	r2, [sp, #-3941]	@ 0xfffff09b
    157c:	6e614d6d 	cdpvs	13, 6, cr4, cr1, cr13, {3}
    1580:	65682f67 	strbvs	r2, [r8, #-3943]!	@ 0xfffff099
    1584:	345f7061 	ldrbcc	r7, [pc], #-97	@ 158c <_start-0xea74>
    1588:	7800632e 	stmdavc	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
    158c:	61746f54 	cmnvs	r4, r4, asr pc
    1590:	6165486c 	cmnvs	r5, ip, ror #16
    1594:	7a695370 	bvc	1a5635c <__bss_end+0x1a30724>
    1598:	76700065 	ldrbtvc	r0, [r0], -r5, rrx
    159c:	75746552 	ldrbvc	r6, [r4, #-1362]!	@ 0xfffffaae
    15a0:	76006e72 			@ <UNDEFINED> instruction: 0x76006e72
    15a4:	74726f50 	ldrbtvc	r6, [r2], #-3920	@ 0xfffff0b0
    15a8:	74696e49 	strbtvc	r6, [r9], #-3657	@ 0xfffff1b7
    15ac:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    15b0:	6c426573 	cfstr64vs	mvdx6, [r2], {115}	@ 0x73
    15b4:	736b636f 	cmnvc	fp, #-1140850687	@ 0xbc000001
    15b8:	61656800 	cmnvs	r5, r0, lsl #16
    15bc:	52545370 	subspl	r5, r4, #112, 6	@ 0xc0000001
    15c0:	5f544355 	svcpl	0x00544355
    15c4:	455a4953 	ldrbmi	r4, [sl, #-2387]	@ 0xfffff6ad
    15c8:	74537800 	ldrbvc	r7, [r3], #-2048	@ 0xfffff800
    15cc:	00747261 	rsbseq	r7, r4, r1, ror #4
    15d0:	6f6c4278 	svcvs	0x006c4278
    15d4:	694c6b63 	stmdbvs	ip, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    15d8:	61006b6e 	tstvs	r0, lr, ror #22
    15dc:	636f6c6c 	cmnvs	pc, #108, 24	@ 0x6c00
    15e0:	64657461 	strbtvs	r7, [r5], #-1121	@ 0xfffffb9f
    15e4:	61577800 	cmpvs	r7, r0, lsl #16
    15e8:	6465746e 	strbtvs	r7, [r5], #-1134	@ 0xfffffb92
    15ec:	657a6953 	ldrbvs	r6, [sl, #-2387]!	@ 0xfffff6ad
    15f0:	72467800 	subvc	r7, r6, #0, 16
    15f4:	79426565 	stmdbvc	r2, {r0, r2, r5, r6, r8, sl, sp, lr}^
    15f8:	52736574 	rsbspl	r6, r3, #116, 10	@ 0x1d000000
    15fc:	69616d65 	stmdbvs	r1!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1600:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1604:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    1608:	6c427765 	mcrrvs	7, 6, r7, r2, cr5
    160c:	4c6b636f 	stclmi	3, cr6, [fp], #-444	@ 0xfffffe44
    1610:	006b6e69 	rsbeq	r6, fp, r9, ror #28
    1614:	654e7870 	strbvs	r7, [lr, #-2160]	@ 0xfffff790
    1618:	72467478 	subvc	r7, r6, #120, 8	@ 0x78000000
    161c:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	@ 0x65
    1620:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1624:	48637570 	stmdami	r3!, {r4, r5, r6, r8, sl, ip, sp, lr}^
    1628:	45706165 	ldrbmi	r6, [r0, #-357]!	@ 0xfffffe9b
    162c:	7000646e 	andvc	r6, r0, lr, ror #8
    1630:	6f6c4278 	svcvs	0x006c4278
    1634:	6f546b63 	svcvs	0x00546b63
    1638:	65736e49 	ldrbvs	r6, [r3, #-3657]!	@ 0xfffff1b7
    163c:	2f007472 	svccs	0x00007472
    1640:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
    1644:	646d632f 	strbtvs	r6, [sp], #-815	@ 0xfffffcd1
    1648:	482f6379 	stmdami	pc!, {r0, r3, r4, r5, r6, r8, r9, sp, lr}	@ <UNPREDICTABLE>
    164c:	72617865 	rsbvc	r7, r1, #6619136	@ 0x650000
    1650:	732f6863 			@ <UNDEFINED> instruction: 0x732f6863
    1654:	522f6372 	eorpl	r6, pc, #-939524095	@ 0xc8000001
    1658:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
    165c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1660:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
    1664:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
    1668:	2f534f54 	svccs	0x00534f54
    166c:	6f6d6544 	svcvs	0x006d6544
    1670:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
    1674:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    1678:	74726175 	ldrbtvc	r6, [r2], #-373	@ 0xfffffe8b
    167c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1680:	61740074 	cmnvs	r4, r4, ror r0
    1684:	00326b73 	eorseq	r6, r2, r3, ror fp
    1688:	6e69616d 	powvsez	f6, f1, #5.0
    168c:	73617400 	cmnvc	r1, #0, 8
    1690:	7500316b 	strvc	r3, [r0, #-363]	@ 0xfffffe95
    1694:	5f747261 	svcpl	0x00747261
    1698:	63747570 	cmnvs	r4, #112, 10	@ 0x1c000000
    169c:	72617500 	rsbvc	r7, r1, #0, 10
    16a0:	75705f74 	ldrbvc	r5, [r0, #-3956]!	@ 0xfffff08c
    16a4:	73007374 	movwvc	r7, #884	@ 0x374
    16a8:	00306372 	eorseq	r6, r0, r2, ror r3
    16ac:	30747364 	rsbscc	r7, r4, r4, ror #6
    16b0:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    16b4:	64656e67 	strbtvs	r6, [r5], #-3687	@ 0xfffff199
    16b8:	7473645f 	ldrbtvc	r6, [r3], #-1119	@ 0xfffffba1
    16bc:	756f6300 	strbvc	r6, [pc, #-768]!	@ 13c4 <_start-0xec3c>
    16c0:	2e00746e 	cdpcs	4, 0, cr7, cr0, cr14, {3}
    16c4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    16c8:	2f2e2e2f 	svccs	0x002e2e2f
    16cc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    16d0:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	@ 1534 <_start-0xeacc>
    16d4:	2f636269 	svccs	0x00636269
    16d8:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    16dc:	732f676e 			@ <UNDEFINED> instruction: 0x732f676e
    16e0:	636e7274 	cmnvs	lr, #116, 4	@ 0x40000007
    16e4:	632e7970 			@ <UNDEFINED> instruction: 0x632e7970
    16e8:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    16ec:	64656e67 	strbtvs	r6, [r5], #-3687	@ 0xfffff199
    16f0:	6372735f 	cmnvs	r2, #2080374785	@ 0x7c000001
    16f4:	75622f00 	strbvc	r2, [r2, #-3840]!	@ 0xfffff100
    16f8:	2f646c69 	svccs	0x00646c69
    16fc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    1700:	332d6269 			@ <UNDEFINED> instruction: 0x332d6269
    1704:	4a305638 	bmi	c16fec <__bss_end+0xbf13b4>
    1708:	656e2f43 	strbvs	r2, [lr, #-3907]!	@ 0xfffff0bd
    170c:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    1710:	342e342d 	strtcc	r3, [lr], #-1069	@ 0xfffffbd3
    1714:	322e302e 	eorcc	r3, lr, #46	@ 0x2e
    1718:	31333230 	teqcc	r3, r0, lsr r2
    171c:	2f313332 	svccs	0x00313332
    1720:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	@ 0xfffffe78
    1724:	72612f64 	rsbvc	r2, r1, #100, 30	@ 0x190
    1728:	6f6e2d6d 	svcvs	0x006e2d6d
    172c:	652d656e 	strvs	r6, [sp, #-1390]!	@ 0xfffffa92
    1730:	2f696261 	svccs	0x00696261
    1734:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    1738:	47006269 	strmi	r6, [r0, -r9, ror #4]
    173c:	4320554e 			@ <UNDEFINED> instruction: 0x4320554e
    1740:	31203731 			@ <UNDEFINED> instruction: 0x31203731
    1744:	2e322e33 	mrccs	14, 1, r2, cr2, cr3, {1}
    1748:	30322031 	eorscc	r2, r2, r1, lsr r0
    174c:	30313332 	eorscc	r3, r1, r2, lsr r3
    1750:	2d203930 			@ <UNDEFINED> instruction: 0x2d203930
    1754:	7570636d 	ldrbvc	r6, [r0, #-877]!	@ 0xfffffc93
    1758:	6d72613d 	ldfvse	f6, [r2, #-244]!	@ 0xffffff0c
    175c:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	@ 0xffffff24
    1760:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	@ 0xfffffe5c
    1764:	616f6c66 	cmnvs	pc, r6, ror #24
    1768:	62612d74 	rsbvs	r2, r1, #116, 26	@ 0x1d00
    176c:	6f733d69 	svcvs	0x00733d69
    1770:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	@ 0xfffffe68
    1774:	6d72616d 	ldfvse	f6, [r2, #-436]!	@ 0xfffffe4c
    1778:	616d2d20 	cmnvs	sp, r0, lsr #26
    177c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	@ 0xfffffe38
    1780:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    1784:	2d207434 	cfstrscs	mvf7, [r0, #-208]!	@ 0xffffff30
    1788:	4f2d2067 	svcmi	0x002d2067
    178c:	662d2032 			@ <UNDEFINED> instruction: 0x662d2032
    1790:	622d6f6e 	eorvs	r6, sp, #440	@ 0x1b8
    1794:	746c6975 	strbtvc	r6, [ip], #-2421	@ 0xfffff68b
    1798:	61006e69 	tstvs	r0, r9, ror #28
    179c:	6e67696c 	vnmulvs.f16	s13, s14, s25	@ <UNPREDICTABLE>
    17a0:	615f6465 	cmpvs	pc, r5, ror #8
    17a4:	00726464 	rsbseq	r6, r2, r4, ror #8
    17a8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    17ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    17b0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    17b4:	2f62696c 	svccs	0x0062696c
    17b8:	6362696c 	cmnvs	r2, #108, 18	@ 0x1b0000
    17bc:	7274732f 	rsbsvc	r7, r4, #-1140850688	@ 0xbc000000
    17c0:	2f676e69 	svccs	0x00676e69
    17c4:	736d656d 	cmnvc	sp, #457179136	@ 0x1b400000
    17c8:	632e7465 			@ <UNDEFINED> instruction: 0x632e7465
    17cc:	66756200 	ldrbtvs	r6, [r5], -r0, lsl #4
    17d0:	00726566 	rsbseq	r6, r2, r6, ror #10
    17d4:	306e656c 	rsbcc	r6, lr, ip, ror #10
    17d8:	2f2e2e00 	svccs	0x002e2e00
    17dc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    17e0:	656e2f2e 	strbvs	r2, [lr, #-3886]!	@ 0xfffff0d2
    17e4:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    17e8:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
    17ec:	616d2f63 	cmnvs	sp, r3, ror #30
    17f0:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    17f4:	72612f65 	rsbvc	r2, r1, #404	@ 0x194
    17f8:	656d2f6d 	strbvs	r2, [sp, #-3949]!	@ 0xfffff093
    17fc:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    1800:	7574732d 	ldrbvc	r7, [r4, #-813]!	@ 0xfffffcd3
    1804:	00632e62 	rsbeq	r2, r3, r2, ror #28

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end+0x10ab0ec>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	@ 0xfffff7e0
   8:	2e33313a 	mrccs	1, 1, r3, cr3, cr10, {1}
   c:	65722e32 	ldrbvs	r2, [r2, #-3634]!	@ 0xfffff1ce
  10:	322d316c 	eorcc	r3, sp, #108, 2
  14:	33312029 	teqcc	r1, #41	@ 0x29
  18:	312e322e 			@ <UNDEFINED> instruction: 0x312e322e
  1c:	32303220 	eorscc	r3, r0, #32, 4
  20:	30303133 	eorscc	r3, r0, r3, lsr r1
  24:	Address 0x24 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	@ 0xfffffef7
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			@ <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00020000 	andeq	r0, r2, r0
  1c:	00000240 	andeq	r0, r0, r0, asr #4
  20:	8b040e42 	blhi	103930 <__bss_end+0xddcf8>
  24:	0b0d4201 	bleq	350830 <__bss_end+0x32abf8>
  28:	0d0dfe02 	stceq	14, cr15, [sp, #-8]
  2c:	000ecb42 	andeq	ip, lr, r2, asr #22
  30:	00000018 	andeq	r0, r0, r8, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	00020240 	andeq	r0, r2, r0, asr #4
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	8b080e42 	blhi	203950 <__bss_end+0x1ddd18>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	00040b0c 	andeq	r0, r4, ip, lsl #22
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	0002025c 	andeq	r0, r2, ip, asr r2
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	8b040e42 	blhi	10396c <__bss_end+0xddd34>
  60:	0b0d4201 	bleq	35086c <__bss_end+0x32ac34>
  64:	420d0d44 	andmi	r0, sp, #68, 26	@ 0x1100
  68:	00000ecb 	andeq	r0, r0, fp, asr #29
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	00020274 	andeq	r0, r2, r4, ror r2
  78:	00000038 	andeq	r0, r0, r8, lsr r0
  7c:	8b080e42 	blhi	20398c <__bss_end+0x1ddd54>
  80:	42018e02 	andmi	r8, r1, #2, 28
  84:	54040b0c 	strpl	r0, [r4], #-2828	@ 0xfffff4f4
  88:	00080d0c 	andeq	r0, r8, ip, lsl #26
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	000202ac 	andeq	r0, r2, ip, lsr #5
  98:	0000009c 	muleq	r0, ip, r0
  9c:	8b080e42 	blhi	2039ac <__bss_end+0x1ddd74>
  a0:	42018e02 	andmi	r8, r1, #2, 28
  a4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
  a8:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
  b4:	7c020001 	stcvc	0, cr0, [r2], {1}
  b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	000000ac 	andeq	r0, r0, ip, lsr #1
  c4:	00020348 	andeq	r0, r2, r8, asr #6
  c8:	00000098 	muleq	r0, r8, r0
  cc:	8b040e42 	blhi	1039dc <__bss_end+0xddda4>
  d0:	0b0d4201 	bleq	3508dc <__bss_end+0x32aca4>
  d4:	420d0d7e 	andmi	r0, sp, #8064	@ 0x1f80
  d8:	00000ecb 	andeq	r0, r0, fp, asr #29
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	000000ac 	andeq	r0, r0, ip, lsr #1
  e4:	000203e0 	andeq	r0, r2, r0, ror #7
  e8:	000000b4 	strheq	r0, [r0], -r4
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	000000ac 	andeq	r0, r0, ip, lsr #1
  f4:	00020494 	muleq	r2, r4, r4
  f8:	000000b0 	strheq	r0, [r0], -r0	@ <UNPREDICTABLE>
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	000000ac 	andeq	r0, r0, ip, lsr #1
 104:	00020544 	andeq	r0, r2, r4, asr #10
 108:	00000044 	andeq	r0, r0, r4, asr #32
 10c:	8b040e42 	blhi	103a1c <__bss_end+0xddde4>
 110:	0b0d4201 	bleq	35091c <__bss_end+0x32ace4>
 114:	420d0d58 	andmi	r0, sp, #88, 26	@ 0x1600
 118:	00000ecb 	andeq	r0, r0, fp, asr #29
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	000000ac 	andeq	r0, r0, ip, lsr #1
 124:	00020588 	andeq	r0, r2, r8, lsl #11
 128:	00000064 	andeq	r0, r0, r4, rrx
 12c:	8b040e42 	blhi	103a3c <__bss_end+0xdde04>
 130:	0b0d4201 	bleq	35093c <__bss_end+0x32ad04>
 134:	420d0d68 	andmi	r0, sp, #104, 26	@ 0x1a00
 138:	00000ecb 	andeq	r0, r0, fp, asr #29
 13c:	0000000c 	andeq	r0, r0, ip
 140:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 144:	7c020001 	stcvc	0, cr0, [r2], {1}
 148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	0000013c 	andeq	r0, r0, ip, lsr r1
 154:	000205f4 	strdeq	r0, [r2], -r4
 158:	00000168 	andeq	r0, r0, r8, ror #2
 15c:	8b080e42 	blhi	203a6c <__bss_end+0x1dde34>
 160:	42018e02 	andmi	r8, r1, #2, 28
 164:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 168:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
 16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 170:	0000013c 	andeq	r0, r0, ip, lsr r1
 174:	0002075c 	andeq	r0, r2, ip, asr r7
 178:	000000e4 	andeq	r0, r0, r4, ror #1
 17c:	8b080e42 	blhi	203a8c <__bss_end+0x1dde54>
 180:	42018e02 	andmi	r8, r1, #2, 28
 184:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 188:	080d0c64 	stmdaeq	sp, {r2, r5, r6, sl, fp}
 18c:	0000001c 	andeq	r0, r0, ip, lsl r0
 190:	0000013c 	andeq	r0, r0, ip, lsr r1
 194:	00020840 	andeq	r0, r2, r0, asr #16
 198:	000000f0 	strdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
 19c:	8b080e42 	blhi	203aac <__bss_end+0x1dde74>
 1a0:	42018e02 	andmi	r8, r1, #2, 28
 1a4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 1a8:	080d0c6c 	stmdaeq	sp, {r2, r3, r5, r6, sl, fp}
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1b4:	00020930 	andeq	r0, r2, r0, lsr r9
 1b8:	000001d4 	ldrdeq	r0, [r0], -r4
 1bc:	8b080e42 	blhi	203acc <__bss_end+0x1dde94>
 1c0:	42018e02 	andmi	r8, r1, #2, 28
 1c4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 1c8:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1d4:	00020b04 	andeq	r0, r2, r4, lsl #22
 1d8:	00000124 	andeq	r0, r0, r4, lsr #2
 1dc:	8b080e42 	blhi	203aec <__bss_end+0x1ddeb4>
 1e0:	42018e02 	andmi	r8, r1, #2, 28
 1e4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 1e8:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1f4:	00020c28 	andeq	r0, r2, r8, lsr #24
 1f8:	000000a8 	andeq	r0, r0, r8, lsr #1
 1fc:	8b080e42 	blhi	203b0c <__bss_end+0x1dded4>
 200:	42018e02 	andmi	r8, r1, #2, 28
 204:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 208:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	0000013c 	andeq	r0, r0, ip, lsr r1
 214:	00020cd0 	ldrdeq	r0, [r2], -r0	@ <UNPREDICTABLE>
 218:	0000008c 	andeq	r0, r0, ip, lsl #1
 21c:	8b080e42 	blhi	203b2c <__bss_end+0x1ddef4>
 220:	42018e02 	andmi	r8, r1, #2, 28
 224:	7c040b0c 			@ <UNDEFINED> instruction: 0x7c040b0c
 228:	00080d0c 	andeq	r0, r8, ip, lsl #26
 22c:	0000000c 	andeq	r0, r0, ip
 230:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 234:	7c020001 	stcvc	0, cr0, [r2], {1}
 238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	0000022c 	andeq	r0, r0, ip, lsr #4
 244:	00020d5c 	andeq	r0, r2, ip, asr sp
 248:	00000068 	andeq	r0, r0, r8, rrx
 24c:	8b040e42 	blhi	103b5c <__bss_end+0xddf24>
 250:	0b0d4201 	bleq	350a5c <__bss_end+0x32ae24>
 254:	420d0d6c 	andmi	r0, sp, #108, 26	@ 0x1b00
 258:	00000ecb 	andeq	r0, r0, fp, asr #29
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	0000022c 	andeq	r0, r0, ip, lsr #4
 264:	00020dc4 	andeq	r0, r2, r4, asr #27
 268:	0000002c 	andeq	r0, r0, ip, lsr #32
 26c:	8b040e42 	blhi	103b7c <__bss_end+0xddf44>
 270:	0b0d4201 	bleq	350a7c <__bss_end+0x32ae44>
 274:	420d0d4e 	andmi	r0, sp, #4992	@ 0x1380
 278:	00000ecb 	andeq	r0, r0, fp, asr #29
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000022c 	andeq	r0, r0, ip, lsr #4
 284:	00020df0 	strdeq	r0, [r2], -r0	@ <UNPREDICTABLE>
 288:	00000098 	muleq	r0, r8, r0
 28c:	8b040e42 	blhi	103b9c <__bss_end+0xddf64>
 290:	0b0d4201 	bleq	350a9c <__bss_end+0x32ae64>
 294:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 298:	000ecb42 	andeq	ip, lr, r2, asr #22
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2a4:	00020e88 	andeq	r0, r2, r8, lsl #29
 2a8:	000000d8 	ldrdeq	r0, [r0], -r8
 2ac:	8b040e42 	blhi	103bbc <__bss_end+0xddf84>
 2b0:	0b0d4201 	bleq	350abc <__bss_end+0x32ae84>
 2b4:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 2b8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2c4:	00020f60 	andeq	r0, r2, r0, ror #30
 2c8:	00000098 	muleq	r0, r8, r0
 2cc:	8b040e42 	blhi	103bdc <__bss_end+0xddfa4>
 2d0:	0b0d4201 	bleq	350adc <__bss_end+0x32aea4>
 2d4:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 2d8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000002dc 	ldrdeq	r0, [r0], -ip
 2f4:	00020ff8 	strdeq	r0, [r2], -r8
 2f8:	00000114 	andeq	r0, r0, r4, lsl r1
 2fc:	8b080e42 	blhi	203c0c <__bss_end+0x1ddfd4>
 300:	42018e02 	andmi	r8, r1, #2, 28
 304:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 308:	080d0c84 	stmdaeq	sp, {r2, r7, sl, fp}
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	000002dc 	ldrdeq	r0, [r0], -ip
 314:	0002110c 	andeq	r1, r2, ip, lsl #2
 318:	000000c8 	andeq	r0, r0, r8, asr #1
 31c:	8b080e42 	blhi	203c2c <__bss_end+0x1ddff4>
 320:	42018e02 	andmi	r8, r1, #2, 28
 324:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 328:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000002dc 	ldrdeq	r0, [r0], -ip
 334:	000211d4 	ldrdeq	r1, [r2], -r4
 338:	000001a4 	andeq	r0, r0, r4, lsr #3
 33c:	8b080e42 	blhi	203c4c <__bss_end+0x1de014>
 340:	42018e02 	andmi	r8, r1, #2, 28
 344:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 348:	080d0ccc 	stmdaeq	sp, {r2, r3, r6, r7, sl, fp}
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	000002dc 	ldrdeq	r0, [r0], -ip
 354:	00021378 	andeq	r1, r2, r8, ror r3
 358:	000000dc 	ldrdeq	r0, [r0], -ip
 35c:	8b080e42 	blhi	203c6c <__bss_end+0x1de034>
 360:	42018e02 	andmi	r8, r1, #2, 28
 364:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 368:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	000002dc 	ldrdeq	r0, [r0], -ip
 374:	00021454 	andeq	r1, r2, r4, asr r4
 378:	00000204 	andeq	r0, r0, r4, lsl #4
 37c:	8b080e42 	blhi	203c8c <__bss_end+0x1de054>
 380:	42018e02 	andmi	r8, r1, #2, 28
 384:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 388:	080d0cfc 	stmdaeq	sp, {r2, r3, r4, r5, r6, r7, sl, fp}
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	000002dc 	ldrdeq	r0, [r0], -ip
 394:	00021658 	andeq	r1, r2, r8, asr r6
 398:	000000e0 	andeq	r0, r0, r0, ror #1
 39c:	8b080e42 	blhi	203cac <__bss_end+0x1de074>
 3a0:	42018e02 	andmi	r8, r1, #2, 28
 3a4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 3a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002dc 	ldrdeq	r0, [r0], -ip
 3b4:	00021738 	andeq	r1, r2, r8, lsr r7
 3b8:	00000034 	andeq	r0, r0, r4, lsr r0
 3bc:	8b080e42 	blhi	203ccc <__bss_end+0x1de094>
 3c0:	42018e02 	andmi	r8, r1, #2, 28
 3c4:	54040b0c 	strpl	r0, [r4], #-2828	@ 0xfffff4f4
 3c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	000002dc 	ldrdeq	r0, [r0], -ip
 3d4:	0002176c 	andeq	r1, r2, ip, ror #14
 3d8:	00000030 	andeq	r0, r0, r0, lsr r0
 3dc:	8b040e42 	blhi	103cec <__bss_end+0xde0b4>
 3e0:	0b0d4201 	bleq	350bec <__bss_end+0x32afb4>
 3e4:	420d0d50 	andmi	r0, sp, #80, 26	@ 0x1400
 3e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	000002dc 	ldrdeq	r0, [r0], -ip
 3f4:	0002179c 	muleq	r2, ip, r7
 3f8:	00000034 	andeq	r0, r0, r4, lsr r0
 3fc:	8b080e42 	blhi	203d0c <__bss_end+0x1de0d4>
 400:	42018e02 	andmi	r8, r1, #2, 28
 404:	54040b0c 	strpl	r0, [r4], #-2828	@ 0xfffff4f4
 408:	00080d0c 	andeq	r0, r8, ip, lsl #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	000002dc 	ldrdeq	r0, [r0], -ip
 414:	000217d0 	ldrdeq	r1, [r2], -r0
 418:	0000012c 	andeq	r0, r0, ip, lsr #2
 41c:	8b080e42 	blhi	203d2c <__bss_end+0x1de0f4>
 420:	42018e02 	andmi	r8, r1, #2, 28
 424:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 428:	080d0c90 	stmdaeq	sp, {r4, r7, sl, fp}
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	000002dc 	ldrdeq	r0, [r0], -ip
 434:	000218fc 	strdeq	r1, [r2], -ip
 438:	00000090 	muleq	r0, r0, r0
 43c:	8b080e42 	blhi	203d4c <__bss_end+0x1de114>
 440:	42018e02 	andmi	r8, r1, #2, 28
 444:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 448:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	000002dc 	ldrdeq	r0, [r0], -ip
 454:	0002198c 	andeq	r1, r2, ip, lsl #19
 458:	00000104 	andeq	r0, r0, r4, lsl #2
 45c:	8b080e42 	blhi	203d6c <__bss_end+0x1de134>
 460:	42018e02 	andmi	r8, r1, #2, 28
 464:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 468:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000002dc 	ldrdeq	r0, [r0], -ip
 474:	00021a90 	muleq	r2, r0, sl
 478:	00000044 	andeq	r0, r0, r4, asr #32
 47c:	8b080e42 	blhi	203d8c <__bss_end+0x1de154>
 480:	42018e02 	andmi	r8, r1, #2, 28
 484:	5c040b0c 			@ <UNDEFINED> instruction: 0x5c040b0c
 488:	00080d0c 	andeq	r0, r8, ip, lsl #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	000002dc 	ldrdeq	r0, [r0], -ip
 494:	00021ad4 	ldrdeq	r1, [r2], -r4
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	8b040e42 	blhi	103dac <__bss_end+0xde174>
 4a0:	0b0d4201 	bleq	350cac <__bss_end+0x32b074>
 4a4:	420d0d58 	andmi	r0, sp, #88, 26	@ 0x1600
 4a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	000002dc 	ldrdeq	r0, [r0], -ip
 4b4:	00021b14 	andeq	r1, r2, r4, lsl fp
 4b8:	0000004c 	andeq	r0, r0, ip, asr #32
 4bc:	8b080e42 	blhi	203dcc <__bss_end+0x1de194>
 4c0:	42018e02 	andmi	r8, r1, #2, 28
 4c4:	60040b0c 	andvs	r0, r4, ip, lsl #22
 4c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	000002dc 	ldrdeq	r0, [r0], -ip
 4d4:	00021b60 	andeq	r1, r2, r0, ror #22
 4d8:	00000048 	andeq	r0, r0, r8, asr #32
 4dc:	8b040e42 	blhi	103dec <__bss_end+0xde1b4>
 4e0:	0b0d4201 	bleq	350cec <__bss_end+0x32b0b4>
 4e4:	420d0d5c 	andmi	r0, sp, #92, 26	@ 0x1700
 4e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ec:	0000000c 	andeq	r0, r0, ip
 4f0:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4fc:	00000020 	andeq	r0, r0, r0, lsr #32
 500:	000004ec 	andeq	r0, r0, ip, ror #9
 504:	00021ba8 	andeq	r1, r2, r8, lsr #23
 508:	0000024c 	andeq	r0, r0, ip, asr #4
 50c:	8b080e42 	blhi	203e1c <__bss_end+0x1de1e4>
 510:	42018e02 	andmi	r8, r1, #2, 28
 514:	03040b0c 	movweq	r0, #19212	@ 0x4b0c
 518:	0d0c0112 	stfeqs	f0, [ip, #-72]	@ 0xffffffb8
 51c:	00000008 	andeq	r0, r0, r8
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	000004ec 	andeq	r0, r0, ip, ror #9
 528:	00021df4 	strdeq	r1, [r2], -r4
 52c:	00000100 	andeq	r0, r0, r0, lsl #2
 530:	8b080e42 	blhi	203e40 <__bss_end+0x1de208>
 534:	42018e02 	andmi	r8, r1, #2, 28
 538:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 53c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	000004ec 	andeq	r0, r0, ip, ror #9
 548:	00021ef4 	strdeq	r1, [r2], -r4
 54c:	00000110 	andeq	r0, r0, r0, lsl r1
 550:	8b080e42 	blhi	203e60 <__bss_end+0x1de228>
 554:	42018e02 	andmi	r8, r1, #2, 28
 558:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 55c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	000004ec 	andeq	r0, r0, ip, ror #9
 568:	00022004 	andeq	r2, r2, r4
 56c:	00000084 	andeq	r0, r0, r4, lsl #1
 570:	8b080e42 	blhi	203e80 <__bss_end+0x1de248>
 574:	42018e02 	andmi	r8, r1, #2, 28
 578:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
 57c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	000004ec 	andeq	r0, r0, ip, ror #9
 588:	00022088 	andeq	r2, r2, r8, lsl #1
 58c:	00000058 	andeq	r0, r0, r8, asr r0
 590:	8b080e42 	blhi	203ea0 <__bss_end+0x1de268>
 594:	42018e02 	andmi	r8, r1, #2, 28
 598:	64040b0c 	strvs	r0, [r4], #-2828	@ 0xfffff4f4
 59c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	000004ec 	andeq	r0, r0, ip, ror #9
 5a8:	000220e0 	andeq	r2, r2, r0, ror #1
 5ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 5b0:	8b080e42 	blhi	203ec0 <__bss_end+0x1de288>
 5b4:	42018e02 	andmi	r8, r1, #2, 28
 5b8:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 5bc:	080d0cc8 	stmdaeq	sp, {r3, r6, r7, sl, fp}
 5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c4:	000004ec 	andeq	r0, r0, ip, ror #9
 5c8:	00022288 	andeq	r2, r2, r8, lsl #5
 5cc:	00000104 	andeq	r0, r0, r4, lsl #2
 5d0:	8b080e42 	blhi	203ee0 <__bss_end+0x1de2a8>
 5d4:	42018e02 	andmi	r8, r1, #2, 28
 5d8:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 5dc:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
 5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e4:	000004ec 	andeq	r0, r0, ip, ror #9
 5e8:	0002238c 	andeq	r2, r2, ip, lsl #7
 5ec:	0000007c 	andeq	r0, r0, ip, ror r0
 5f0:	8b040e42 	blhi	103f00 <__bss_end+0xde2c8>
 5f4:	0b0d4201 	bleq	350e00 <__bss_end+0x32b1c8>
 5f8:	420d0d72 	andmi	r0, sp, #7296	@ 0x1c80
 5fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 600:	0000001c 	andeq	r0, r0, ip, lsl r0
 604:	000004ec 	andeq	r0, r0, ip, ror #9
 608:	00022408 	andeq	r2, r2, r8, lsl #8
 60c:	000000f8 	strdeq	r0, [r0], -r8
 610:	8b080e42 	blhi	203f20 <__bss_end+0x1de2e8>
 614:	42018e02 	andmi	r8, r1, #2, 28
 618:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 61c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 620:	0000001c 	andeq	r0, r0, ip, lsl r0
 624:	000004ec 	andeq	r0, r0, ip, ror #9
 628:	00022500 	andeq	r2, r2, r0, lsl #10
 62c:	0000011c 	andeq	r0, r0, ip, lsl r1
 630:	8b080e42 	blhi	203f40 <__bss_end+0x1de308>
 634:	42018e02 	andmi	r8, r1, #2, 28
 638:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 63c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	000004ec 	andeq	r0, r0, ip, ror #9
 648:	0002261c 	andeq	r2, r2, ip, lsl r6
 64c:	0000009c 	muleq	r0, ip, r0
 650:	8b080e42 	blhi	203f60 <__bss_end+0x1de328>
 654:	42018e02 	andmi	r8, r1, #2, 28
 658:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 65c:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
 660:	00000018 	andeq	r0, r0, r8, lsl r0
 664:	000004ec 	andeq	r0, r0, ip, ror #9
 668:	000226b8 			@ <UNDEFINED> instruction: 0x000226b8
 66c:	00000038 	andeq	r0, r0, r8, lsr r0
 670:	8b080e42 	blhi	203f80 <__bss_end+0x1de348>
 674:	42018e02 	andmi	r8, r1, #2, 28
 678:	00040b0c 	andeq	r0, r4, ip, lsl #22
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	000004ec 	andeq	r0, r0, ip, ror #9
 684:	000226f0 	strdeq	r2, [r2], -r0
 688:	00000030 	andeq	r0, r0, r0, lsr r0
 68c:	8b040e42 	blhi	103f9c <__bss_end+0xde364>
 690:	0b0d4201 	bleq	350e9c <__bss_end+0x32b264>
 694:	420d0d4e 	andmi	r0, sp, #4992	@ 0x1380
 698:	00000ecb 	andeq	r0, r0, fp, asr #29
 69c:	00000020 	andeq	r0, r0, r0, lsr #32
 6a0:	000004ec 	andeq	r0, r0, ip, ror #9
 6a4:	00022720 	andeq	r2, r2, r0, lsr #14
 6a8:	000001a4 	andeq	r0, r0, r4, lsr #3
 6ac:	840c0e42 	strhi	r0, [ip], #-3650	@ 0xfffff1be
 6b0:	8e028b03 	vmlahi.f64	d8, d2, d3
 6b4:	0b0c4201 	bleq	310ec0 <__bss_end+0x2eb288>
 6b8:	0cbc0204 	lfmeq	f0, 4, [ip], #16
 6bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	000004ec 	andeq	r0, r0, ip, ror #9
 6c8:	000228c4 	andeq	r2, r2, r4, asr #17
 6cc:	00000034 	andeq	r0, r0, r4, lsr r0
 6d0:	8b080e42 	blhi	203fe0 <__bss_end+0x1de3a8>
 6d4:	42018e02 	andmi	r8, r1, #2, 28
 6d8:	52040b0c 	andpl	r0, r4, #12, 22	@ 0x3000
 6dc:	00080d0c 	andeq	r0, r8, ip, lsl #26
 6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e4:	000004ec 	andeq	r0, r0, ip, ror #9
 6e8:	000228f8 	strdeq	r2, [r2], -r8
 6ec:	00000038 	andeq	r0, r0, r8, lsr r0
 6f0:	8b040e42 	blhi	104000 <__bss_end+0xde3c8>
 6f4:	0b0d4201 	bleq	350f00 <__bss_end+0x32b2c8>
 6f8:	420d0d52 	andmi	r0, sp, #5248	@ 0x1480
 6fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 700:	0000001c 	andeq	r0, r0, ip, lsl r0
 704:	000004ec 	andeq	r0, r0, ip, ror #9
 708:	00022930 	andeq	r2, r2, r0, lsr r9
 70c:	00000024 	andeq	r0, r0, r4, lsr #32
 710:	8b040e42 	blhi	104020 <__bss_end+0xde3e8>
 714:	0b0d4201 	bleq	350f20 <__bss_end+0x32b2e8>
 718:	420d0d48 	andmi	r0, sp, #72, 26	@ 0x1200
 71c:	00000ecb 	andeq	r0, r0, fp, asr #29
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	000004ec 	andeq	r0, r0, ip, ror #9
 728:	00022954 	andeq	r2, r2, r4, asr r9
 72c:	0000021c 	andeq	r0, r0, ip, lsl r2
 730:	8b080e42 	blhi	204040 <__bss_end+0x1de408>
 734:	42018e02 	andmi	r8, r1, #2, 28
 738:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 73c:	080d0cf6 	stmdaeq	sp, {r1, r2, r4, r5, r6, r7, sl, fp}
 740:	0000001c 	andeq	r0, r0, ip, lsl r0
 744:	000004ec 	andeq	r0, r0, ip, ror #9
 748:	00022b70 	andeq	r2, r2, r0, ror fp
 74c:	0000005c 	andeq	r0, r0, ip, asr r0
 750:	8b080e42 	blhi	204060 <__bss_end+0x1de428>
 754:	42018e02 	andmi	r8, r1, #2, 28
 758:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 75c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 760:	0000001c 	andeq	r0, r0, ip, lsl r0
 764:	000004ec 	andeq	r0, r0, ip, ror #9
 768:	00022bcc 	andeq	r2, r2, ip, asr #23
 76c:	0000005c 	andeq	r0, r0, ip, asr r0
 770:	8b080e42 	blhi	204080 <__bss_end+0x1de448>
 774:	42018e02 	andmi	r8, r1, #2, 28
 778:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 77c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 780:	0000001c 	andeq	r0, r0, ip, lsl r0
 784:	000004ec 	andeq	r0, r0, ip, ror #9
 788:	00022c28 	andeq	r2, r2, r8, lsr #24
 78c:	0000007c 	andeq	r0, r0, ip, ror r0
 790:	8b080e42 	blhi	2040a0 <__bss_end+0x1de468>
 794:	42018e02 	andmi	r8, r1, #2, 28
 798:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 79c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a4:	000004ec 	andeq	r0, r0, ip, ror #9
 7a8:	00022ca4 	andeq	r2, r2, r4, lsr #25
 7ac:	00000108 	andeq	r0, r0, r8, lsl #2
 7b0:	8b040e42 	blhi	1040c0 <__bss_end+0xde488>
 7b4:	0b0d4201 	bleq	350fc0 <__bss_end+0x32b388>
 7b8:	0d0d7202 	sfmeq	f7, 4, [sp, #-8]
 7bc:	000ecb42 	andeq	ip, lr, r2, asr #22
 7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c4:	000004ec 	andeq	r0, r0, ip, ror #9
 7c8:	00022dac 	andeq	r2, r2, ip, lsr #27
 7cc:	0000009c 	muleq	r0, ip, r0
 7d0:	8b080e42 	blhi	2040e0 <__bss_end+0x1de4a8>
 7d4:	42018e02 	andmi	r8, r1, #2, 28
 7d8:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 7dc:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e4:	000004ec 	andeq	r0, r0, ip, ror #9
 7e8:	00022e48 	andeq	r2, r2, r8, asr #28
 7ec:	00000118 	andeq	r0, r0, r8, lsl r1
 7f0:	8b080e42 	blhi	204100 <__bss_end+0x1de4c8>
 7f4:	42018e02 	andmi	r8, r1, #2, 28
 7f8:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 7fc:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 800:	0000001c 	andeq	r0, r0, ip, lsl r0
 804:	000004ec 	andeq	r0, r0, ip, ror #9
 808:	00022f60 	andeq	r2, r2, r0, ror #30
 80c:	00000048 	andeq	r0, r0, r8, asr #32
 810:	8b040e42 	blhi	104120 <__bss_end+0xde4e8>
 814:	0b0d4201 	bleq	351020 <__bss_end+0x32b3e8>
 818:	420d0d58 	andmi	r0, sp, #88, 26	@ 0x1600
 81c:	00000ecb 	andeq	r0, r0, fp, asr #29
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	000004ec 	andeq	r0, r0, ip, ror #9
 828:	00022fa8 	andeq	r2, r2, r8, lsr #31
 82c:	000000f4 	strdeq	r0, [r0], -r4
 830:	8b080e42 	blhi	204140 <__bss_end+0x1de508>
 834:	42018e02 	andmi	r8, r1, #2, 28
 838:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 83c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	000004ec 	andeq	r0, r0, ip, ror #9
 848:	0002309c 	muleq	r2, ip, r0
 84c:	00000028 	andeq	r0, r0, r8, lsr #32
 850:	8b040e42 	blhi	104160 <__bss_end+0xde528>
 854:	0b0d4201 	bleq	351060 <__bss_end+0x32b428>
 858:	420d0d4a 	andmi	r0, sp, #4736	@ 0x1280
 85c:	00000ecb 	andeq	r0, r0, fp, asr #29
 860:	00000018 	andeq	r0, r0, r8, lsl r0
 864:	000004ec 	andeq	r0, r0, ip, ror #9
 868:	000230c4 	andeq	r3, r2, r4, asr #1
 86c:	00000030 	andeq	r0, r0, r0, lsr r0
 870:	8b080e42 	blhi	204180 <__bss_end+0x1de548>
 874:	42018e02 	andmi	r8, r1, #2, 28
 878:	00040b0c 	andeq	r0, r4, ip, lsl #22
 87c:	0000001c 	andeq	r0, r0, ip, lsl r0
 880:	000004ec 	andeq	r0, r0, ip, ror #9
 884:	000230f4 	strdeq	r3, [r2], -r4
 888:	000000c0 	andeq	r0, r0, r0, asr #1
 88c:	8b080e42 	blhi	20419c <__bss_end+0x1de564>
 890:	42018e02 	andmi	r8, r1, #2, 28
 894:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 898:	080d0c5a 	stmdaeq	sp, {r1, r3, r4, r6, sl, fp}
 89c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a0:	000004ec 	andeq	r0, r0, ip, ror #9
 8a4:	000231b4 			@ <UNDEFINED> instruction: 0x000231b4
 8a8:	000000c0 	andeq	r0, r0, r0, asr #1
 8ac:	8b080e42 	blhi	2041bc <__bss_end+0x1de584>
 8b0:	42018e02 	andmi	r8, r1, #2, 28
 8b4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 8b8:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
 8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c0:	000004ec 	andeq	r0, r0, ip, ror #9
 8c4:	00023274 	andeq	r3, r2, r4, ror r2
 8c8:	000000bc 	strheq	r0, [r0], -ip
 8cc:	8b080e42 	blhi	2041dc <__bss_end+0x1de5a4>
 8d0:	42018e02 	andmi	r8, r1, #2, 28
 8d4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 8d8:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e0:	000004ec 	andeq	r0, r0, ip, ror #9
 8e4:	00023330 	andeq	r3, r2, r0, lsr r3
 8e8:	000000b8 	strheq	r0, [r0], -r8
 8ec:	8b080e42 	blhi	2041fc <__bss_end+0x1de5c4>
 8f0:	42018e02 	andmi	r8, r1, #2, 28
 8f4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 8f8:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
 8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 900:	000004ec 	andeq	r0, r0, ip, ror #9
 904:	000233e8 	andeq	r3, r2, r8, ror #7
 908:	000000b0 	strheq	r0, [r0], -r0	@ <UNPREDICTABLE>
 90c:	8b080e42 	blhi	20421c <__bss_end+0x1de5e4>
 910:	42018e02 	andmi	r8, r1, #2, 28
 914:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 918:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 91c:	0000001c 	andeq	r0, r0, ip, lsl r0
 920:	000004ec 	andeq	r0, r0, ip, ror #9
 924:	00023498 	muleq	r2, r8, r4
 928:	00000034 	andeq	r0, r0, r4, lsr r0
 92c:	8b080e42 	blhi	20423c <__bss_end+0x1de604>
 930:	42018e02 	andmi	r8, r1, #2, 28
 934:	54040b0c 	strpl	r0, [r4], #-2828	@ 0xfffff4f4
 938:	00080d0c 	andeq	r0, r8, ip, lsl #26
 93c:	0000000c 	andeq	r0, r0, ip
 940:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 944:	7c020001 	stcvc	0, cr0, [r2], {1}
 948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 94c:	0000001c 	andeq	r0, r0, ip, lsl r0
 950:	0000093c 	andeq	r0, r0, ip, lsr r9
 954:	000234cc 	andeq	r3, r2, ip, asr #9
 958:	000000b4 	strheq	r0, [r0], -r4
 95c:	8b080e42 	blhi	20426c <__bss_end+0x1de634>
 960:	42018e02 	andmi	r8, r1, #2, 28
 964:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 968:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 96c:	0000001c 	andeq	r0, r0, ip, lsl r0
 970:	0000093c 	andeq	r0, r0, ip, lsr r9
 974:	00023580 	andeq	r3, r2, r0, lsl #11
 978:	000000a0 	andeq	r0, r0, r0, lsr #1
 97c:	84100e42 	ldrhi	r0, [r0], #-3650	@ 0xfffff1be
 980:	8b038504 	blhi	e1d98 <__bss_end+0xbc160>
 984:	42018e02 	andmi	r8, r1, #2, 28
 988:	00040b0c 	andeq	r0, r4, ip, lsl #22
 98c:	0000001c 	andeq	r0, r0, ip, lsl r0
 990:	0000093c 	andeq	r0, r0, ip, lsr r9
 994:	00023620 	andeq	r3, r2, r0, lsr #12
 998:	0000001c 	andeq	r0, r0, ip, lsl r0
 99c:	8b040e42 	blhi	1042ac <__bss_end+0xde674>
 9a0:	0b0d4201 	bleq	3511ac <__bss_end+0x32b574>
 9a4:	420d0d46 	andmi	r0, sp, #4480	@ 0x1180
 9a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9b4:	0002363c 	andeq	r3, r2, ip, lsr r6
 9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 9bc:	8b040e42 	blhi	1042cc <__bss_end+0xde694>
 9c0:	0b0d4201 	bleq	3511cc <__bss_end+0x32b594>
 9c4:	420d0d46 	andmi	r0, sp, #4480	@ 0x1180
 9c8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9d4:	00023658 	andeq	r3, r2, r8, asr r6
 9d8:	00000064 	andeq	r0, r0, r4, rrx
 9dc:	8b080e42 	blhi	2042ec <__bss_end+0x1de6b4>
 9e0:	42018e02 	andmi	r8, r1, #2, 28
 9e4:	6a040b0c 	bvs	10361c <__bss_end+0xdd9e4>
 9e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9f4:	000236bc 			@ <UNDEFINED> instruction: 0x000236bc
 9f8:	000000d4 	ldrdeq	r0, [r0], -r4
 9fc:	8b040e42 	blhi	10430c <__bss_end+0xde6d4>
 a00:	0b0d4201 	bleq	35120c <__bss_end+0x32b5d4>
 a04:	0d0d5e02 	stceq	14, cr5, [sp, #-8]
 a08:	000ecb42 	andeq	ip, lr, r2, asr #22
 a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a10:	0000093c 	andeq	r0, r0, ip, lsr r9
 a14:	00023790 	muleq	r2, r0, r7
 a18:	000000e0 	andeq	r0, r0, r0, ror #1
 a1c:	8b040e42 	blhi	10432c <__bss_end+0xde6f4>
 a20:	0b0d4201 	bleq	35122c <__bss_end+0x32b5f4>
 a24:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 a28:	000ecb42 	andeq	ip, lr, r2, asr #22
 a2c:	0000000c 	andeq	r0, r0, ip
 a30:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 a34:	7c020001 	stcvc	0, cr0, [r2], {1}
 a38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a40:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a44:	00023870 	andeq	r3, r2, r0, ror r8
 a48:	000000dc 	ldrdeq	r0, [r0], -ip
 a4c:	8b040e42 	blhi	10435c <__bss_end+0xde724>
 a50:	0b0d4201 	bleq	35125c <__bss_end+0x32b624>
 a54:	0d0d6202 	sfmeq	f6, 4, [sp, #-8]
 a58:	000ecb42 	andeq	ip, lr, r2, asr #22
 a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a60:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a64:	0002394c 	andeq	r3, r2, ip, asr #18
 a68:	00000034 	andeq	r0, r0, r4, lsr r0
 a6c:	8b080e42 	blhi	20437c <__bss_end+0x1de744>
 a70:	42018e02 	andmi	r8, r1, #2, 28
 a74:	54040b0c 	strpl	r0, [r4], #-2828	@ 0xfffff4f4
 a78:	00080d0c 	andeq	r0, r8, ip, lsl #26
 a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a80:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a84:	00023980 	andeq	r3, r2, r0, lsl #19
 a88:	000000b8 	strheq	r0, [r0], -r8
 a8c:	8b040e42 	blhi	10439c <__bss_end+0xde764>
 a90:	0b0d4201 	bleq	35129c <__bss_end+0x32b664>
 a94:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
 a98:	000ecb42 	andeq	ip, lr, r2, asr #22
 a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 aa0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 aa4:	00023a38 	andeq	r3, r2, r8, lsr sl
 aa8:	00000050 	andeq	r0, r0, r0, asr r0
 aac:	8b040e42 	blhi	1043bc <__bss_end+0xde784>
 ab0:	0b0d4201 	bleq	3512bc <__bss_end+0x32b684>
 ab4:	420d0d5e 	andmi	r0, sp, #6016	@ 0x1780
 ab8:	00000ecb 	andeq	r0, r0, fp, asr #29
 abc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ac4:	00023a88 	andeq	r3, r2, r8, lsl #21
 ac8:	000001b0 			@ <UNDEFINED> instruction: 0x000001b0
 acc:	8b040e42 	blhi	1043dc <__bss_end+0xde7a4>
 ad0:	0b0d4201 	bleq	3512dc <__bss_end+0x32b6a4>
 ad4:	0d0dce02 	stceq	14, cr12, [sp, #-8]
 ad8:	000ecb42 	andeq	ip, lr, r2, asr #22
 adc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ae4:	00023c38 	andeq	r3, r2, r8, lsr ip
 ae8:	000001b8 			@ <UNDEFINED> instruction: 0x000001b8
 aec:	8b040e42 	blhi	1043fc <__bss_end+0xde7c4>
 af0:	0b0d4201 	bleq	3512fc <__bss_end+0x32b6c4>
 af4:	0d0dd202 	sfmeq	f5, 1, [sp, #-8]
 af8:	000ecb42 	andeq	ip, lr, r2, asr #22
 afc:	0000001c 	andeq	r0, r0, ip, lsl r0
 b00:	00000a2c 	andeq	r0, r0, ip, lsr #20
 b04:	00023df0 	strdeq	r3, [r2], -r0
 b08:	00000058 	andeq	r0, r0, r8, asr r0
 b0c:	8b040e42 	blhi	10441c <__bss_end+0xde7e4>
 b10:	0b0d4201 	bleq	35131c <__bss_end+0x32b6e4>
 b14:	420d0d62 	andmi	r0, sp, #6272	@ 0x1880
 b18:	00000ecb 	andeq	r0, r0, fp, asr #29
 b1c:	0000000c 	andeq	r0, r0, ip
 b20:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 b24:	7c020001 	stcvc	0, cr0, [r2], {1}
 b28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b30:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b34:	00023e48 	andeq	r3, r2, r8, asr #28
 b38:	000001c8 	andeq	r0, r0, r8, asr #3
 b3c:	8b080e42 	blhi	20444c <__bss_end+0x1de814>
 b40:	42018e02 	andmi	r8, r1, #2, 28
 b44:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 b48:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
 b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b50:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b54:	00024010 	andeq	r4, r2, r0, lsl r0
 b58:	0000007c 	andeq	r0, r0, ip, ror r0
 b5c:	8b080e42 	blhi	20446c <__bss_end+0x1de834>
 b60:	42018e02 	andmi	r8, r1, #2, 28
 b64:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 b68:	00080d0c 	andeq	r0, r8, ip, lsl #26
 b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b70:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b74:	0002408c 	andeq	r4, r2, ip, lsl #1
 b78:	00000024 	andeq	r0, r0, r4, lsr #32
 b7c:	8b040e42 	blhi	10448c <__bss_end+0xde854>
 b80:	0b0d4201 	bleq	35138c <__bss_end+0x32b754>
 b84:	420d0d48 	andmi	r0, sp, #72, 26	@ 0x1200
 b88:	00000ecb 	andeq	r0, r0, fp, asr #29
 b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b90:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b94:	000240b0 	strheq	r4, [r2], -r0
 b98:	00000018 	andeq	r0, r0, r8, lsl r0
 b9c:	8b040e42 	blhi	1044ac <__bss_end+0xde874>
 ba0:	0b0d4201 	bleq	3513ac <__bss_end+0x32b774>
 ba4:	420d0d44 	andmi	r0, sp, #68, 26	@ 0x1100
 ba8:	00000ecb 	andeq	r0, r0, fp, asr #29
 bac:	0000001c 	andeq	r0, r0, ip, lsl r0
 bb0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bb4:	000240c8 	andeq	r4, r2, r8, asr #1
 bb8:	000000d8 	ldrdeq	r0, [r0], -r8
 bbc:	8b040e42 	blhi	1044cc <__bss_end+0xde894>
 bc0:	0b0d4201 	bleq	3513cc <__bss_end+0x32b794>
 bc4:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
 bc8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bd0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bd4:	000241a0 	andeq	r4, r2, r0, lsr #3
 bd8:	00000154 	andeq	r0, r0, r4, asr r1
 bdc:	8b040e42 	blhi	1044ec <__bss_end+0xde8b4>
 be0:	0b0d4201 	bleq	3513ec <__bss_end+0x32b7b4>
 be4:	0d0d9e02 	stceq	14, cr9, [sp, #-8]
 be8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bec:	0000000c 	andeq	r0, r0, ip
 bf0:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 bfc:	0000001c 	andeq	r0, r0, ip, lsl r0
 c00:	00000bec 	andeq	r0, r0, ip, ror #23
 c04:	0002430c 	andeq	r4, r2, ip, lsl #6
 c08:	00000050 	andeq	r0, r0, r0, asr r0
 c0c:	8b040e42 	blhi	10451c <__bss_end+0xde8e4>
 c10:	0b0d4201 	bleq	35141c <__bss_end+0x32b7e4>
 c14:	420d0d5c 	andmi	r0, sp, #92, 26	@ 0x1700
 c18:	00000ecb 	andeq	r0, r0, fp, asr #29
 c1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c20:	00000bec 	andeq	r0, r0, ip, ror #23
 c24:	0002435c 	andeq	r4, r2, ip, asr r3
 c28:	0000004c 	andeq	r0, r0, ip, asr #32
 c2c:	8b080e42 	blhi	20453c <__bss_end+0x1de904>
 c30:	42018e02 	andmi	r8, r1, #2, 28
 c34:	60040b0c 	andvs	r0, r4, ip, lsl #22
 c38:	00080d0c 	andeq	r0, r8, ip, lsl #26
 c3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c40:	00000bec 	andeq	r0, r0, ip, ror #23
 c44:	000243a8 	andeq	r4, r2, r8, lsr #7
 c48:	00000018 	andeq	r0, r0, r8, lsl r0
 c4c:	8b040e42 	blhi	10455c <__bss_end+0xde924>
 c50:	0b0d4201 	bleq	35145c <__bss_end+0x32b824>
 c54:	420d0d44 	andmi	r0, sp, #68, 26	@ 0x1100
 c58:	00000ecb 	andeq	r0, r0, fp, asr #29
 c5c:	00000018 	andeq	r0, r0, r8, lsl r0
 c60:	00000bec 	andeq	r0, r0, ip, ror #23
 c64:	000243c0 	andeq	r4, r2, r0, asr #7
 c68:	00000054 	andeq	r0, r0, r4, asr r0
 c6c:	8b080e42 	blhi	20457c <__bss_end+0x1de944>
 c70:	42018e02 	andmi	r8, r1, #2, 28
 c74:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c78:	00000018 	andeq	r0, r0, r8, lsl r0
 c7c:	00000bec 	andeq	r0, r0, ip, ror #23
 c80:	00024414 	andeq	r4, r2, r4, lsl r4
 c84:	0000005c 	andeq	r0, r0, ip, asr r0
 c88:	8b080e42 	blhi	204598 <__bss_end+0x1de960>
 c8c:	42018e02 	andmi	r8, r1, #2, 28
 c90:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c94:	00000018 	andeq	r0, r0, r8, lsl r0
 c98:	00000bec 	andeq	r0, r0, ip, ror #23
 c9c:	00024470 	andeq	r4, r2, r0, ror r4
 ca0:	000000ac 	andeq	r0, r0, ip, lsr #1
 ca4:	8b080e42 	blhi	2045b4 <__bss_end+0x1de97c>
 ca8:	42018e02 	andmi	r8, r1, #2, 28
 cac:	00040b0c 	andeq	r0, r4, ip, lsl #22
 cb0:	0000000c 	andeq	r0, r0, ip
 cb4:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 cb8:	7c020001 	stcvc	0, cr0, [r2], {1}
 cbc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 cc0:	00000028 	andeq	r0, r0, r8, lsr #32
 cc4:	00000cb0 			@ <UNDEFINED> instruction: 0x00000cb0
 cc8:	0002451c 	andeq	r4, r2, ip, lsl r5
 ccc:	000000d0 	ldrdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
 cd0:	840c0e52 	strhi	r0, [ip], #-3666	@ 0xfffff1ae
 cd4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 cd8:	ce0a5e01 	cdpgt	14, 0, cr5, cr10, cr1, {0}
 cdc:	000ec4c5 	andeq	ip, lr, r5, asr #9
 ce0:	0a4e0b42 	beq	13839f0 <__bss_end+0x135ddb8>
 ce4:	0ec4c5ce 	cdpeq	5, 12, cr12, cr4, cr14, {6}
 ce8:	000b4200 	andeq	r4, fp, r0, lsl #4
 cec:	0000000c 	andeq	r0, r0, ip
 cf0:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 cf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 cf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 cfc:	00000020 	andeq	r0, r0, r0, lsr #32
 d00:	00000cec 	andeq	r0, r0, ip, ror #25
 d04:	000245ec 	andeq	r4, r2, ip, ror #11
 d08:	000000fc 	strdeq	r0, [r0], -ip
 d0c:	840c0e44 	strhi	r0, [ip], #-3652	@ 0xfffff1bc
 d10:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 d14:	0a6a0201 	beq	1a81520 <__bss_end+0x1a5b8e8>
 d18:	0ec4c5ce 	cdpeq	5, 12, cr12, cr4, cr14, {6}
 d1c:	000b4200 	andeq	r4, fp, r0, lsl #4
 d20:	0000000c 	andeq	r0, r0, ip
 d24:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 d28:	7c020001 	stcvc	0, cr0, [r2], {1}
 d2c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 d30:	00000028 	andeq	r0, r0, r8, lsr #32
 d34:	00000d20 	andeq	r0, r0, r0, lsr #26
 d38:	000246e8 	andeq	r4, r2, r8, ror #13
 d3c:	00000114 	andeq	r0, r0, r4, lsl r1
 d40:	84180e6c 	ldrhi	r0, [r8], #-3692	@ 0xfffff194
 d44:	86058506 	strhi	r8, [r5], -r6, lsl #10
 d48:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 d4c:	02018e02 	andeq	r8, r1, #2, 28
 d50:	c7c8ce5c 			@ <UNDEFINED> instruction: 0xc7c8ce5c
 d54:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
 d58:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_loclists:

00000000 <.debug_loclists>:
   0:	0000011b 	andeq	r0, r0, fp, lsl r1
   4:	00040005 	andeq	r0, r4, r5
	...
  14:	012c0004 			@ <UNDEFINED> instruction: 0x012c0004
  18:	842c0451 	strthi	r0, [ip], #-1105	@ 0xfffffbaf
  1c:	03a30a01 			@ <UNDEFINED> instruction: 0x03a30a01
  20:	a82601a5 	stmdage	r6!, {r0, r2, r5, r7, r8}
  24:	9f00a82d 	svcls	0x0000a82d
  28:	94018404 	strls	r8, [r1], #-1028	@ 0xfffffbfc
  2c:	04510101 	ldrbeq	r0, [r1], #-257	@ 0xfffffeff
  30:	01d00194 			@ <UNDEFINED> instruction: 0x01d00194
  34:	a503a30a 	strge	sl, [r3, #-778]	@ 0xfffffcf6
  38:	2da82601 	stccs	6, cr2, [r8, #4]!
  3c:	009f00a8 	addseq	r0, pc, r8, lsr #1
  40:	00000000 	andeq	r0, r0, r0
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	00000001 	andeq	r0, r0, r1
  4c:	00040000 	andeq	r0, r4, r0
  50:	04520148 	ldrbeq	r0, [r2], #-328	@ 0xfffffeb8
  54:	54015448 	strpl	r5, [r1], #-1096	@ 0xfffffbb8
  58:	015c5404 	cmpeq	ip, r4, lsl #8
  5c:	64640452 	strbtvs	r0, [r4], #-1106	@ 0xfffffbae
  60:	64045401 	strvs	r5, [r4], #-1025	@ 0xfffffbff
  64:	74030180 	strvc	r0, [r3], #-384	@ 0xfffffe80
  68:	80049f7f 	andhi	r9, r4, pc, ror pc
  6c:	03018401 	movweq	r8, #5121	@ 0x1401
  70:	049f7e72 	ldreq	r7, [pc], #3698	@ 78 <_start-0xff88>
  74:	01d00184 	bicseq	r0, r0, r4, lsl #3
  78:	02005201 	andeq	r5, r0, #268435456	@ 0x10000000
  7c:	01010000 	mrseq	r0, (UNDEF: 1)
  80:	00000000 	andeq	r0, r0, r0
  84:	00000101 	andeq	r0, r0, r1, lsl #2
  88:	04000000 	streq	r0, [r0], #-0
  8c:	50013400 	andpl	r3, r1, r0, lsl #8
  90:	01483404 	cmpeq	r8, r4, lsl #8
  94:	5448045e 	strbpl	r0, [r8], #-1118	@ 0xfffffba2
  98:	54045301 	strpl	r5, [r4], #-769	@ 0xfffffcff
  9c:	045e015c 	ldrbeq	r0, [lr], #-348	@ 0xfffffea4
  a0:	53017064 	movwpl	r7, #4196	@ 0x1064
  a4:	03747004 	cmneq	r4, #4
  a8:	049f0173 	ldreq	r0, [pc], #371	@ b0 <_start-0xff50>
  ac:	01018474 	tsteq	r1, r4, ror r4
  b0:	01840453 	orreq	r0, r4, r3, asr r4
  b4:	500101d0 	ldrdpl	r0, [r1], -r0	@ <UNPREDICTABLE>
  b8:	00000300 	andeq	r0, r0, r0, lsl #6
  bc:	00000100 	andeq	r0, r0, r0, lsl #2
  c0:	04000000 	streq	r0, [r0], #-0
  c4:	51012c00 	tstpl	r1, r0, lsl #24
  c8:	94018404 	strls	r8, [r1], #-1028	@ 0xfffffbfc
  cc:	04510101 	ldrbeq	r0, [r1], #-257	@ 0xfffffeff
  d0:	01a00194 	lsleq	r0, r4	@ <illegal shifter operand>
  d4:	a0045301 	andge	r5, r4, r1, lsl #6
  d8:	0101c001 	tsteq	r1, r1
  dc:	01c00451 	biceq	r0, r0, r1, asr r4
  e0:	530101d0 	movwpl	r0, #4560	@ 0x11d0
  e4:	01010000 	mrseq	r0, (UNDEF: 1)
  e8:	04000000 	streq	r0, [r0], #-0
  ec:	01b40198 			@ <UNDEFINED> instruction: 0x01b40198
  f0:	b4045e01 	strlt	r5, [r4], #-3585	@ 0xfffff1ff
  f4:	0301bc01 	movweq	fp, #7169	@ 0x1c01
  f8:	049f047e 	ldreq	r0, [pc], #1150	@ 100 <_start-0xff00>
  fc:	01d001bc 	ldrheq	r0, [r0, #28]
 100:	00005e01 	andeq	r5, r0, r1, lsl #28
 104:	01010000 	mrseq	r0, (UNDEF: 1)
 108:	01980400 	orrseq	r0, r8, r0, lsl #8
 10c:	530101a0 	movwpl	r0, #4512	@ 0x11a0
 110:	b401a004 	strlt	sl, [r1], #-4
 114:	04510101 	ldrbeq	r0, [r1], #-257	@ 0xfffffeff
 118:	01d001b4 	ldrheq	r0, [r0, #20]
 11c:	c5005301 	strgt	r5, [r0, #-769]	@ 0xfffffcff
 120:	05000001 	streq	r0, [r0, #-1]
 124:	00000400 	andeq	r0, r0, r0, lsl #8
	...
 130:	c4000400 	strgt	r0, [r0], #-1024	@ 0xfffffc00
 134:	04510101 	ldrbeq	r0, [r1], #-257	@ 0xfffffeff
 138:	01e001c4 	mvneq	r0, r4, asr #3
 13c:	a503a30a 	strge	sl, [r3, #-778]	@ 0xfffffcf6
 140:	2da82601 	stccs	6, cr2, [r8, #4]!
 144:	049f00a8 	ldreq	r0, [pc], #168	@ 14c <_start-0xfeb4>
 148:	01fc01e0 	mvnseq	r0, r0, ror #3
 14c:	00005101 	andeq	r5, r0, r1, lsl #2
 150:	00000000 	andeq	r0, r0, r0
 154:	01000000 	mrseq	r0, (UNDEF: 0)
 158:	00000000 	andeq	r0, r0, r0
 15c:	04000000 	streq	r0, [r0], #-0
 160:	52011400 	andpl	r1, r1, #0, 8
 164:	01241404 			@ <UNDEFINED> instruction: 0x01241404
 168:	28240453 	stmdacs	r4!, {r0, r1, r4, r6, sl}
 16c:	9f7f7303 	svcls	0x007f7303
 170:	012c2804 			@ <UNDEFINED> instruction: 0x012c2804
 174:	382c0453 	stmdacc	ip!, {r0, r1, r4, r6, sl}
 178:	9f7f7303 	svcls	0x007f7303
 17c:	9c019804 	stcls	8, cr9, [r1], {4}
 180:	04530101 	ldrbeq	r0, [r3], #-257	@ 0xfffffeff
 184:	01e801e0 	mvneq	r0, r0, ror #3
 188:	e8045301 	stmda	r4, {r0, r8, r9, ip, lr}
 18c:	0101f401 	tsteq	r1, r1, lsl #8	@ <UNPREDICTABLE>
 190:	00020052 	andeq	r0, r2, r2, asr r0
 194:	00020200 	andeq	r0, r2, r0, lsl #4
 198:	01000000 	mrseq	r0, (UNDEF: 0)
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	00040000 	andeq	r0, r4, r0
 1a8:	04500124 	ldrbeq	r0, [r0], #-292	@ 0xfffffedc
 1ac:	5e012c24 	cdppl	12, 0, cr2, cr1, cr4, {1}
 1b0:	03302c04 	teqeq	r0, #4, 24	@ 0x400
 1b4:	049f017e 	ldreq	r0, [pc], #382	@ 1bc <_start-0xfe44>
 1b8:	0101a030 	tsteq	r1, r0, lsr r0
 1bc:	01bc045e 			@ <UNDEFINED> instruction: 0x01bc045e
 1c0:	5e0101cc 	adfpldm	f0, f1, #4.0
 1c4:	d001cc04 	andle	ip, r1, r4, lsl #24
 1c8:	017e0301 	cmneq	lr, r1, lsl #6
 1cc:	01d0049f 			@ <UNDEFINED> instruction: 0x01d0049f
 1d0:	5e0101d8 	mcrpl	1, 0, r0, cr1, cr8, {6}
 1d4:	e401e004 	str	lr, [r1], #-4
 1d8:	045e0101 	ldrbeq	r0, [lr], #-257	@ 0xfffffeff
 1dc:	01f401e8 	mvnseq	r0, r8, ror #3
 1e0:	f4045001 	vst4.8	{d5-d8}, [r4], r1
 1e4:	0101fc01 	tsteq	r1, r1, lsl #24	@ <UNPREDICTABLE>
 1e8:	0001005e 	andeq	r0, r1, lr, asr r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	01bc5004 			@ <UNDEFINED> instruction: 0x01bc5004
 1f4:	9f200803 	svcls	0x00200803
 1f8:	e801e004 	stmda	r1, {r2, sp, lr, pc}
 1fc:	20080301 	andcs	r0, r8, r1, lsl #6
 200:	01f4049f 			@ <UNDEFINED> instruction: 0x01f4049f
 204:	080301fc 	stmdaeq	r3, {r2, r3, r4, r5, r6, r7, r8}
 208:	02009f20 	andeq	r9, r0, #32, 30	@ 0x80
 20c:	00000000 	andeq	r0, r0, r0
 210:	04000000 	streq	r0, [r0], #-0
 214:	710a5040 	tstvc	sl, r0, asr #32
 218:	1aff0800 	bne	fffc2220 <_estack+0xf7fa2220>
 21c:	1e01010a 	adfnes	f0, f1, #2.0
 220:	bc50049f 	cfldrdlt	mvd0, [r0], {159}	@ 0x9f
 224:	045c0101 	ldrbeq	r0, [ip], #-257	@ 0xfffffeff
 228:	01e801e0 	mvneq	r0, r0, ror #3
 22c:	f4045c01 			@ <UNDEFINED> instruction: 0xf4045c01
 230:	0101fc01 	tsteq	r1, r1, lsl #24	@ <UNPREDICTABLE>
 234:	0001005c 	andeq	r0, r1, ip, asr r0
 238:	01010101 	tsteq	r1, r1, lsl #2
 23c:	00010101 	andeq	r0, r1, r1, lsl #2
 240:	00000000 	andeq	r0, r0, r0
 244:	00010100 	andeq	r0, r1, r0, lsl #2
 248:	00000000 	andeq	r0, r0, r0
 24c:	40040000 	andmi	r0, r4, r0
 250:	045e016c 	ldrbeq	r0, [lr], #-364	@ 0xfffffe94
 254:	7203706c 	andvc	r7, r3, #108	@ 0x6c
 258:	70049f74 	andvc	r9, r4, r4, ror pc
 25c:	78720374 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9}^
 260:	7874049f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r7, sl}^
 264:	9f7c7203 	svcls	0x007c7203
 268:	01807804 	orreq	r7, r0, r4, lsl #16
 26c:	80045201 	andhi	r5, r4, r1, lsl #4
 270:	03018c01 	movweq	r8, #7169	@ 0x1c01
 274:	049f7072 	ldreq	r7, [pc], #114	@ 27c <_start-0xfd84>
 278:	019c0198 			@ <UNDEFINED> instruction: 0x019c0198
 27c:	ac045201 	sfmge	f5, 4, [r4], {1}
 280:	0101ac01 	tsteq	r1, r1, lsl #24
 284:	01ac0452 			@ <UNDEFINED> instruction: 0x01ac0452
 288:	720301b0 	andvc	r0, r3, #176, 2	@ 0x2c
 28c:	b0049f04 	andlt	r9, r4, r4, lsl #30
 290:	0101bc01 	tsteq	r1, r1, lsl #24
 294:	01e00452 	mvneq	r0, r2, asr r4
 298:	520101e8 	andpl	r0, r1, #232, 2	@ 0x3a
 29c:	fc01f404 	stc2	4, cr15, [r1], {4}
 2a0:	005e0101 	subseq	r0, lr, r1, lsl #2
 2a4:	00000006 	andeq	r0, r0, r6
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	00040000 	andeq	r0, r4, r0
 2b0:	00710620 	rsbseq	r0, r1, r0, lsr #12
 2b4:	9f1aff08 	svcls	0x001aff08
 2b8:	01382004 	teqeq	r8, r4
 2bc:	c4380452 	ldrtgt	r0, [r8], #-1106	@ 0xfffffbae
 2c0:	00710601 	rsbseq	r0, r1, r1, lsl #12
 2c4:	9f1aff08 	svcls	0x001aff08
 2c8:	e001c404 	and	ip, r1, r4, lsl #8
 2cc:	03a30d01 			@ <UNDEFINED> instruction: 0x03a30d01
 2d0:	a82601a5 	stmdage	r6!, {r0, r2, r5, r7, r8}
 2d4:	0800a82d 	stmdaeq	r0, {r0, r2, r3, r5, fp, sp, pc}
 2d8:	049f1aff 	ldreq	r1, [pc], #2815	@ 2e0 <_start-0xfd20>
 2dc:	01fc01e0 	mvnseq	r0, r0, ror #3
 2e0:	08007106 	stmdaeq	r0, {r1, r2, r8, ip, sp, lr}
 2e4:	009f1aff 			@ <UNDEFINED> instruction: 0x009f1aff
 2e8:	00000162 	andeq	r0, r0, r2, ror #2
 2ec:	00040005 	andeq	r0, r4, r5
	...
 2fc:	01280004 			@ <UNDEFINED> instruction: 0x01280004
 300:	3c280451 	cfstrscc	mvf0, [r8], #-324	@ 0xfffffebc
 304:	a503a30a 	strge	sl, [r3, #-778]	@ 0xfffffcf6
 308:	2da82601 	stccs	6, cr2, [r8, #4]!
 30c:	049f00a8 	ldreq	r0, [pc], #168	@ 314 <_start-0xfcec>
 310:	0101a83c 	tsteq	r1, ip, lsr r8
 314:	01a80451 			@ <UNDEFINED> instruction: 0x01a80451
 318:	a30a0294 	movwge	r0, #41620	@ 0xa294
 31c:	2601a503 	strcs	sl, [r1], -r3, lsl #10
 320:	00a82da8 	adceq	r2, r8, r8, lsr #27
 324:	0000009f 	muleq	r0, pc, r0	@ <UNPREDICTABLE>
	...
 330:	01180004 	tsteq	r8, r4
 334:	1c180452 	cfldrsne	mvf0, [r8], {82}	@ 0x52
 338:	a503a30a 	strge	sl, [r3, #-778]	@ 0xfffffcf6
 33c:	2da82602 	stccs	6, cr2, [r8, #8]!
 340:	049f00a8 	ldreq	r0, [pc], #168	@ 348 <_start-0xfcb8>
 344:	5201503c 	andpl	r5, r1, #60	@ 0x3c
 348:	0a6c5004 	beq	1b14360 <__bss_end+0x1aee728>
 34c:	02a503a3 	adceq	r0, r5, #-1946157054	@ 0x8c000002
 350:	a82da826 	stmdage	sp!, {r1, r2, r5, fp, sp, pc}
 354:	e4049f00 	str	r9, [r4], #-3840	@ 0xfffff100
 358:	0101f001 	tsteq	r1, r1	@ <UNPREDICTABLE>
 35c:	00020052 	andeq	r0, r2, r2, asr r0
	...
 368:	011c0004 	tsteq	ip, r4
 36c:	443c0450 	ldrtmi	r0, [ip], #-1104	@ 0xfffffbb0
 370:	44045001 	strmi	r5, [r4], #-1
 374:	0453014c 	ldrbeq	r0, [r3], #-332	@ 0xfffffeb4
 378:	0101e44c 	tsteq	r1, ip, asr #8
 37c:	01e40450 	mvneq	r0, r0, asr r4
 380:	530101f4 	movwpl	r0, #4596	@ 0x11f4
 384:	01010300 	mrseq	r0, SP_irq
 388:	00000000 	andeq	r0, r0, r0
 38c:	01010000 	mrseq	r0, (UNDEF: 1)
 390:	04000000 	streq	r0, [r0], #-0
 394:	51012800 	tstpl	r1, r0, lsl #16
 398:	032c2804 			@ <UNDEFINED> instruction: 0x032c2804
 39c:	049f0171 	ldreq	r0, [pc], #369	@ 3a4 <_start-0xfc5c>
 3a0:	0101a82c 	tsteq	r1, ip, lsr #16
 3a4:	01a80451 			@ <UNDEFINED> instruction: 0x01a80451
 3a8:	a30a01e4 	movwge	r0, #41444	@ 0xa1e4
 3ac:	2601a503 	strcs	sl, [r1], -r3, lsl #10
 3b0:	00a82da8 	adceq	r2, r8, r8, lsr #27
 3b4:	01e4049f 			@ <UNDEFINED> instruction: 0x01e4049f
 3b8:	510101fc 	strdpl	r0, [r1, -ip]
 3bc:	8001fc04 	andhi	pc, r1, r4, lsl #24
 3c0:	01710302 	cmneq	r1, r2, lsl #6
 3c4:	0280049f 	addeq	r0, r0, #-1627389952	@ 0x9f000000
 3c8:	51010294 			@ <UNDEFINED> instruction: 0x51010294
 3cc:	00000100 	andeq	r0, r0, r0, lsl #2
 3d0:	00000101 	andeq	r0, r0, r1, lsl #2
 3d4:	746c0400 	strbtvc	r0, [ip], #-1024	@ 0xfffffc00
 3d8:	9f047c03 	svcls	0x00047c03
 3dc:	01807404 	orreq	r7, r0, r4, lsl #8
 3e0:	9f747c03 	svcls	0x00747c03
 3e4:	a0019004 	andge	r9, r1, r4
 3e8:	045c0101 	ldrbeq	r0, [ip], #-257	@ 0xfffffeff
 3ec:	01c401a8 	biceq	r0, r4, r8, lsr #3
 3f0:	01005301 	tsteq	r0, r1, lsl #6
 3f4:	02020101 	andeq	r0, r2, #1073741824	@ 0x40000000
 3f8:	00000303 	andeq	r0, r0, r3, lsl #6
 3fc:	00000000 	andeq	r0, r0, r0
 400:	00000101 	andeq	r0, r0, r1, lsl #2
 404:	806c0400 	rsbhi	r0, ip, r0, lsl #8
 408:	747e0301 	ldrbtvc	r0, [lr], #-769	@ 0xfffffcff
 40c:	0180049f 			@ <UNDEFINED> instruction: 0x0180049f
 410:	7e030180 	adfvcd	f0, f3, f0
 414:	80049f78 	andhi	r9, r4, r8, ror pc
 418:	03018001 	movweq	r8, #4097	@ 0x1001
 41c:	049f7c7e 	ldreq	r7, [pc], #3198	@ 424 <_start-0xfbdc>
 420:	01940180 	orrseq	r0, r4, r0, lsl #3
 424:	94045e01 	strls	r5, [r4], #-3585	@ 0xfffff1ff
 428:	0301a801 	movweq	sl, #6145	@ 0x1801
 42c:	049f707e 	ldreq	r7, [pc], #126	@ 434 <_start-0xfbcc>
 430:	01c401a8 	biceq	r0, r4, r8, lsr #3
 434:	c4045101 	strgt	r5, [r4], #-257	@ 0xfffffeff
 438:	0101c401 	tsteq	r1, r1, lsl #8
 43c:	01c40454 	biceq	r0, r4, r4, asr r4
 440:	740301c8 	strvc	r0, [r3], #-456	@ 0xfffffe38
 444:	c8049f04 	stmdagt	r4, {r2, r8, r9, sl, fp, ip, pc}
 448:	0101e401 	tsteq	r1, r1, lsl #8
 44c:	Address 0x44c is out of bounds.

