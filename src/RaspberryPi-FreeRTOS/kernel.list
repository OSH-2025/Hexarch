
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00010000 <_start>:
   10000:	e59ff018 	ldr	pc, [pc, #24]	@ 10020 <reset_handler>
   10004:	e59ff018 	ldr	pc, [pc, #24]	@ 10024 <undefined_handler>
   10008:	e59ff018 	ldr	pc, [pc, #24]	@ 10028 <swi_handler>
   1000c:	e59ff018 	ldr	pc, [pc, #24]	@ 1002c <prefetch_handler>
   10010:	e59ff018 	ldr	pc, [pc, #24]	@ 10030 <data_handler>
   10014:	e59ff018 	ldr	pc, [pc, #24]	@ 10034 <unused_handler>
   10018:	e59ff018 	ldr	pc, [pc, #24]	@ 10038 <irq_handler>
   1001c:	e59ff018 	ldr	pc, [pc, #24]	@ 1003c <fiq_handler>

00010020 <reset_handler>:
   10020:	00010040 	andeq	r0, r1, r0, asr #32

00010024 <undefined_handler>:
   10024:	000242f0 	strdeq	r4, [r2], -r0

00010028 <swi_handler>:
   10028:	000203dc 	ldrdeq	r0, [r2], -ip

0001002c <prefetch_handler>:
   1002c:	000242f4 	strdeq	r4, [r2], -r4	@ <UNPREDICTABLE>

00010030 <data_handler>:
   10030:	000242f8 	strdeq	r4, [r2], -r8

00010034 <unused_handler>:
   10034:	000242fc 	strdeq	r4, [r2], -ip

00010038 <irq_handler>:
   10038:	00020490 	muleq	r2, r0, r4

0001003c <fiq_handler>:
   1003c:	00024300 	andeq	r4, r2, r0, lsl #6

00010040 <reset>:
   10040:	e3a00801 	mov	r0, #65536	@ 0x10000
   10044:	e3a01000 	mov	r1, #0
   10048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
   1004c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10058:	e3a000d2 	mov	r0, #210	@ 0xd2
   1005c:	e121f000 	msr	CPSR_c, r0
   10060:	e3a0d902 	mov	sp, #32768	@ 0x8000
   10064:	e3a000d1 	mov	r0, #209	@ 0xd1
   10068:	e121f000 	msr	CPSR_c, r0
   1006c:	e3a0d901 	mov	sp, #16384	@ 0x4000
   10070:	e3a000d3 	mov	r0, #211	@ 0xd3
   10074:	e121f000 	msr	CPSR_c, r0
   10078:	e3a0d302 	mov	sp, #134217728	@ 0x8000000
   1007c:	e59f0018 	ldr	r0, [pc, #24]	@ 1009c <zero_loop+0x14>
   10080:	e59f1018 	ldr	r1, [pc, #24]	@ 100a0 <zero_loop+0x18>
   10084:	e3a02000 	mov	r2, #0

00010088 <zero_loop>:
   10088:	e1500001 	cmp	r0, r1
   1008c:	b4802004 	strlt	r2, [r0], #4
   10090:	bafffffc 	blt	10088 <zero_loop>
   10094:	eb004d67 	bl	23638 <irqBlock>
   10098:	ea0050e9 	b	24444 <main>
   1009c:	00024820 	andeq	r4, r2, r0, lsr #16
   100a0:	00025c00 	andeq	r5, r2, r0, lsl #24

Disassembly of section .text:

00020000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   20000:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20004:	e28db000 	add	fp, sp, #0
   20008:	e24dd01c 	sub	sp, sp, #28
   2000c:	e50b0010 	str	r0, [fp, #-16]
   20010:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
   20014:	e50b2018 	str	r2, [fp, #-24]	@ 0xffffffe8
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   20018:	e51b3010 	ldr	r3, [fp, #-16]
   2001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   20020:	e51b3010 	ldr	r3, [fp, #-16]
   20024:	e2433004 	sub	r3, r3, #4
   20028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   2002c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20030:	e2832004 	add	r2, r3, #4
   20034:	e51b3010 	ldr	r3, [fp, #-16]
   20038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   2003c:	e51b3010 	ldr	r3, [fp, #-16]
   20040:	e2433004 	sub	r3, r3, #4
   20044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   20048:	e51b3010 	ldr	r3, [fp, #-16]
   2004c:	e59f21b8 	ldr	r2, [pc, #440]	@ 2020c <pxPortInitialiseStack+0x20c>
   20050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20054:	e51b3010 	ldr	r3, [fp, #-16]
   20058:	e2433004 	sub	r3, r3, #4
   2005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   20060:	e51b2008 	ldr	r2, [fp, #-8]
   20064:	e51b3010 	ldr	r3, [fp, #-16]
   20068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   2006c:	e51b3010 	ldr	r3, [fp, #-16]
   20070:	e2433004 	sub	r3, r3, #4
   20074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   20078:	e51b3010 	ldr	r3, [fp, #-16]
   2007c:	e59f218c 	ldr	r2, [pc, #396]	@ 20210 <pxPortInitialiseStack+0x210>
   20080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20084:	e51b3010 	ldr	r3, [fp, #-16]
   20088:	e2433004 	sub	r3, r3, #4
   2008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   20090:	e51b3010 	ldr	r3, [fp, #-16]
   20094:	e59f2178 	ldr	r2, [pc, #376]	@ 20214 <pxPortInitialiseStack+0x214>
   20098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2009c:	e51b3010 	ldr	r3, [fp, #-16]
   200a0:	e2433004 	sub	r3, r3, #4
   200a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   200a8:	e51b3010 	ldr	r3, [fp, #-16]
   200ac:	e59f2164 	ldr	r2, [pc, #356]	@ 20218 <pxPortInitialiseStack+0x218>
   200b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200b4:	e51b3010 	ldr	r3, [fp, #-16]
   200b8:	e2433004 	sub	r3, r3, #4
   200bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   200c0:	e51b3010 	ldr	r3, [fp, #-16]
   200c4:	e59f2150 	ldr	r2, [pc, #336]	@ 2021c <pxPortInitialiseStack+0x21c>
   200c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200cc:	e51b3010 	ldr	r3, [fp, #-16]
   200d0:	e2433004 	sub	r3, r3, #4
   200d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   200d8:	e51b3010 	ldr	r3, [fp, #-16]
   200dc:	e59f213c 	ldr	r2, [pc, #316]	@ 20220 <pxPortInitialiseStack+0x220>
   200e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200e4:	e51b3010 	ldr	r3, [fp, #-16]
   200e8:	e2433004 	sub	r3, r3, #4
   200ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   200f0:	e51b3010 	ldr	r3, [fp, #-16]
   200f4:	e59f2128 	ldr	r2, [pc, #296]	@ 20224 <pxPortInitialiseStack+0x224>
   200f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200fc:	e51b3010 	ldr	r3, [fp, #-16]
   20100:	e2433004 	sub	r3, r3, #4
   20104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   20108:	e51b3010 	ldr	r3, [fp, #-16]
   2010c:	e59f2114 	ldr	r2, [pc, #276]	@ 20228 <pxPortInitialiseStack+0x228>
   20110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20114:	e51b3010 	ldr	r3, [fp, #-16]
   20118:	e2433004 	sub	r3, r3, #4
   2011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   20120:	e51b3010 	ldr	r3, [fp, #-16]
   20124:	e59f2100 	ldr	r2, [pc, #256]	@ 2022c <pxPortInitialiseStack+0x22c>
   20128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2012c:	e51b3010 	ldr	r3, [fp, #-16]
   20130:	e2433004 	sub	r3, r3, #4
   20134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   20138:	e51b3010 	ldr	r3, [fp, #-16]
   2013c:	e59f20ec 	ldr	r2, [pc, #236]	@ 20230 <pxPortInitialiseStack+0x230>
   20140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20144:	e51b3010 	ldr	r3, [fp, #-16]
   20148:	e2433004 	sub	r3, r3, #4
   2014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   20150:	e51b3010 	ldr	r3, [fp, #-16]
   20154:	e59f20d8 	ldr	r2, [pc, #216]	@ 20234 <pxPortInitialiseStack+0x234>
   20158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2015c:	e51b3010 	ldr	r3, [fp, #-16]
   20160:	e2433004 	sub	r3, r3, #4
   20164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   20168:	e51b3010 	ldr	r3, [fp, #-16]
   2016c:	e59f20c4 	ldr	r2, [pc, #196]	@ 20238 <pxPortInitialiseStack+0x238>
   20170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20174:	e51b3010 	ldr	r3, [fp, #-16]
   20178:	e2433004 	sub	r3, r3, #4
   2017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   20180:	e51b3010 	ldr	r3, [fp, #-16]
   20184:	e59f20b0 	ldr	r2, [pc, #176]	@ 2023c <pxPortInitialiseStack+0x23c>
   20188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2018c:	e51b3010 	ldr	r3, [fp, #-16]
   20190:	e2433004 	sub	r3, r3, #4
   20194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   20198:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   2019c:	e51b3010 	ldr	r3, [fp, #-16]
   201a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   201a4:	e51b3010 	ldr	r3, [fp, #-16]
   201a8:	e2433004 	sub	r3, r3, #4
   201ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   201b0:	e51b3010 	ldr	r3, [fp, #-16]
   201b4:	e3a0201f 	mov	r2, #31
   201b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   201bc:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   201c0:	e2033001 	and	r3, r3, #1
   201c4:	e3530000 	cmp	r3, #0
   201c8:	0a000004 	beq	201e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   201cc:	e51b3010 	ldr	r3, [fp, #-16]
   201d0:	e5933000 	ldr	r3, [r3]
   201d4:	e3832020 	orr	r2, r3, #32
   201d8:	e51b3010 	ldr	r3, [fp, #-16]
   201dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   201e0:	e51b3010 	ldr	r3, [fp, #-16]
   201e4:	e2433004 	sub	r3, r3, #4
   201e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   201ec:	e51b3010 	ldr	r3, [fp, #-16]
   201f0:	e3a02000 	mov	r2, #0
   201f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   201f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   201fc:	e1a00003 	mov	r0, r3
   20200:	e28bd000 	add	sp, fp, #0
   20204:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20208:	e12fff1e 	bx	lr
   2020c:	aaaaaaaa 	bge	feacacbc <_estack+0xf6aaacbc>
   20210:	12121212 	andsne	r1, r2, #536870913	@ 0x20000001
   20214:	11111111 	tstne	r1, r1, lsl r1
   20218:	10101010 	andsne	r1, r0, r0, lsl r0
   2021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   20220:	08080808 	stmdaeq	r8, {r3, fp}
   20224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   20228:	06060606 	streq	r0, [r6], -r6, lsl #12
   2022c:	05050505 	streq	r0, [r5, #-1285]	@ 0xfffffafb
   20230:	04040404 	streq	r0, [r4], #-1028	@ 0xfffffbfc
   20234:	03030303 	movweq	r0, #13059	@ 0x3303
   20238:	02020202 	andeq	r0, r2, #536870912	@ 0x20000000
   2023c:	01010101 	tsteq	r1, r1, lsl #2

00020240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   20240:	e92d4800 	push	{fp, lr}
   20244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   20248:	eb000017 	bl	202ac <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   2024c:	eb00003c 	bl	20344 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   20250:	e3a03000 	mov	r3, #0
}
   20254:	e1a00003 	mov	r0, r3
   20258:	e8bd8800 	pop	{fp, pc}

0002025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   2025c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   20264:	e320f000 	nop	{0}
   20268:	e28bd000 	add	sp, fp, #0
   2026c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20270:	e12fff1e 	bx	lr

00020274 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR (unsigned int nIRQ, void *pParam)
{
   20274:	e92d4800 	push	{fp, lr}
   20278:	e28db004 	add	fp, sp, #4
   2027c:	e24dd008 	sub	sp, sp, #8
   20280:	e50b0008 	str	r0, [fp, #-8]
   20284:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   20288:	eb0009b0 	bl	22950 <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   2028c:	eb000a83 	bl	22ca0 <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   20290:	e59f3010 	ldr	r3, [pc, #16]	@ 202a8 <vTickISR+0x34>
   20294:	e3a02000 	mov	r2, #0
   20298:	e583200c 	str	r2, [r3, #12]
}
   2029c:	e320f000 	nop	{0}
   202a0:	e24bd004 	sub	sp, fp, #4
   202a4:	e8bd8800 	pop	{fp, pc}
   202a8:	2000b400 	andcs	fp, r0, r0, lsl #8

000202ac <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   202ac:	e92d4800 	push	{fp, lr}
   202b0:	e28db004 	add	fp, sp, #4
   202b4:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   202b8:	e3a03ffa 	mov	r3, #1000	@ 0x3e8
   202bc:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	irqBlock();
   202c0:	eb000cdc 	bl	23638 <irqBlock>

	pRegs->CTL = 0x003E0000;
   202c4:	e59f3068 	ldr	r3, [pc, #104]	@ 20334 <prvSetupTimerInterrupt+0x88>
   202c8:	e3a0283e 	mov	r2, #4063232	@ 0x3e0000
   202cc:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   202d0:	e59f305c 	ldr	r3, [pc, #92]	@ 20334 <prvSetupTimerInterrupt+0x88>
   202d4:	e59f205c 	ldr	r2, [pc, #92]	@ 20338 <prvSetupTimerInterrupt+0x8c>
   202d8:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   202dc:	e59f3050 	ldr	r3, [pc, #80]	@ 20334 <prvSetupTimerInterrupt+0x88>
   202e0:	e59f2050 	ldr	r2, [pc, #80]	@ 20338 <prvSetupTimerInterrupt+0x8c>
   202e4:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   202e8:	e59f3044 	ldr	r3, [pc, #68]	@ 20334 <prvSetupTimerInterrupt+0x88>
   202ec:	e3a020f9 	mov	r2, #249	@ 0xf9
   202f0:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   202f4:	e59f3038 	ldr	r3, [pc, #56]	@ 20334 <prvSetupTimerInterrupt+0x88>
   202f8:	e3a02000 	mov	r2, #0
   202fc:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   20300:	e59f302c 	ldr	r3, [pc, #44]	@ 20334 <prvSetupTimerInterrupt+0x88>
   20304:	e59f2030 	ldr	r2, [pc, #48]	@ 2033c <prvSetupTimerInterrupt+0x90>
   20308:	e5832008 	str	r2, [r3, #8]

	irqRegister(64, vTickISR, NULL);
   2030c:	e3a02000 	mov	r2, #0
   20310:	e59f1028 	ldr	r1, [pc, #40]	@ 20340 <prvSetupTimerInterrupt+0x94>
   20314:	e3a00040 	mov	r0, #64	@ 0x40
   20318:	eb000ccd 	bl	23654 <irqRegister>

	irqEnable(64);
   2031c:	e3a00040 	mov	r0, #64	@ 0x40
   20320:	eb000ce4 	bl	236b8 <irqEnable>

	irqUnblock();
   20324:	eb000cbc 	bl	2361c <irqUnblock>
}
   20328:	e320f000 	nop	{0}
   2032c:	e24bd004 	sub	sp, fp, #4
   20330:	e8bd8800 	pop	{fp, pc}
   20334:	2000b400 	andcs	fp, r0, r0, lsl #8
   20338:	000003e7 	andeq	r0, r0, r7, ror #7
   2033c:	003e00a2 	eorseq	r0, lr, r2, lsr #1
   20340:	00020274 	andeq	r0, r2, r4, ror r2

00020344 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   20344:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20348:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   2034c:	e59f307c 	ldr	r3, [pc, #124]	@ 203d0 <vPortISRStartFirstTask+0x8c>
   20350:	e5933000 	ldr	r3, [r3]
   20354:	e2833001 	add	r3, r3, #1
   20358:	e59f2070 	ldr	r2, [pc, #112]	@ 203d0 <vPortISRStartFirstTask+0x8c>
   2035c:	e5823000 	str	r3, [r2]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   20360:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   20364:	e3c00080 	bic	r0, r0, #128	@ 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   20368:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   2036c:	e59f0274 	ldr	r0, [pc, #628]	@ 205e8 <vPortExitCritical+0x64>
   20370:	e5900000 	ldr	r0, [r0]
   20374:	e590e000 	ldr	lr, [r0]
   20378:	e59f026c 	ldr	r0, [pc, #620]	@ 205ec <vPortExitCritical+0x68>
   2037c:	e8be0002 	ldm	lr!, {r1}
   20380:	e5801000 	str	r1, [r0]
   20384:	e8be0001 	ldm	lr!, {r0}
   20388:	e16ff000 	msr	SPSR_fsxc, r0
   2038c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20390:	e320f000 	nop	{0}
   20394:	e59ee03c 	ldr	lr, [lr, #60]	@ 0x3c
   20398:	e25ef004 	subs	pc, lr, #4
   2039c:	e320f000 	nop	{0}
   203a0:	e320f000 	nop	{0}
   203a4:	e59f3028 	ldr	r3, [pc, #40]	@ 203d4 <vPortISRStartFirstTask+0x90>
   203a8:	e5933000 	ldr	r3, [r3]
   203ac:	e59f3024 	ldr	r3, [pc, #36]	@ 203d8 <vPortISRStartFirstTask+0x94>
   203b0:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   203b4:	e8bd4000 	ldmfd	sp!, {lr}
   203b8:	e24ee004 	sub	lr, lr, #4
   203bc:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   203c0:	e320f000 	nop	{0}
   203c4:	e28bd000 	add	sp, fp, #0
   203c8:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   203cc:	e12fff1e 	bx	lr
   203d0:	00024820 	andeq	r4, r2, r0, lsr #16
   203d4:	00024814 	andeq	r4, r2, r4, lsl r8
   203d8:	000248a4 	andeq	r4, r2, r4, lsr #17

000203dc <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   203dc:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   203e0:	e92d0001 	stmfd	sp!, {r0}
   203e4:	e94d2000 	stmdb	sp, {sp}^
   203e8:	e24dd004 	sub	sp, sp, #4
   203ec:	e8bd0001 	ldmfd	sp!, {r0}
   203f0:	e9204000 	stmdb	r0!, {lr}
   203f4:	e1a0e000 	mov	lr, r0
   203f8:	e8bd0001 	ldmfd	sp!, {r0}
   203fc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20400:	e320f000 	nop	{0}
   20404:	e24ee03c 	sub	lr, lr, #60	@ 0x3c
   20408:	e14f0000 	mrs	r0, SPSR
   2040c:	e92e0001 	stmdb	lr!, {r0}
   20410:	e59f01d4 	ldr	r0, [pc, #468]	@ 205ec <vPortExitCritical+0x68>
   20414:	e5900000 	ldr	r0, [r0]
   20418:	e92e0001 	stmdb	lr!, {r0}
   2041c:	e59f01c4 	ldr	r0, [pc, #452]	@ 205e8 <vPortExitCritical+0x64>
   20420:	e5900000 	ldr	r0, [r0]
   20424:	e580e000 	str	lr, [r0]
   20428:	e59f3058 	ldr	r3, [pc, #88]	@ 20488 <vPortYieldProcessor+0xac>
   2042c:	e5933000 	ldr	r3, [r3]
   20430:	e59f3054 	ldr	r3, [pc, #84]	@ 2048c <vPortYieldProcessor+0xb0>
   20434:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   20438:	eb000a18 	bl	22ca0 <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   2043c:	e59f01a4 	ldr	r0, [pc, #420]	@ 205e8 <vPortExitCritical+0x64>
   20440:	e5900000 	ldr	r0, [r0]
   20444:	e590e000 	ldr	lr, [r0]
   20448:	e59f019c 	ldr	r0, [pc, #412]	@ 205ec <vPortExitCritical+0x68>
   2044c:	e8be0002 	ldm	lr!, {r1}
   20450:	e5801000 	str	r1, [r0]
   20454:	e8be0001 	ldm	lr!, {r0}
   20458:	e16ff000 	msr	SPSR_fsxc, r0
   2045c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20460:	e320f000 	nop	{0}
   20464:	e59ee03c 	ldr	lr, [lr, #60]	@ 0x3c
   20468:	e25ef004 	subs	pc, lr, #4
   2046c:	e320f000 	nop	{0}
   20470:	e320f000 	nop	{0}
   20474:	e59f300c 	ldr	r3, [pc, #12]	@ 20488 <vPortYieldProcessor+0xac>
   20478:	e5933000 	ldr	r3, [r3]
   2047c:	e59f3008 	ldr	r3, [pc, #8]	@ 2048c <vPortYieldProcessor+0xb0>
   20480:	e5933000 	ldr	r3, [r3]
}
   20484:	e320f000 	nop	{0}
   20488:	00024814 	andeq	r4, r2, r4, lsl r8
   2048c:	000248a4 	andeq	r4, r2, r4, lsr #17

00020490 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   20490:	e92d0001 	stmfd	sp!, {r0}
   20494:	e94d2000 	stmdb	sp, {sp}^
   20498:	e24dd004 	sub	sp, sp, #4
   2049c:	e8bd0001 	ldmfd	sp!, {r0}
   204a0:	e9204000 	stmdb	r0!, {lr}
   204a4:	e1a0e000 	mov	lr, r0
   204a8:	e8bd0001 	ldmfd	sp!, {r0}
   204ac:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   204b0:	e320f000 	nop	{0}
   204b4:	e24ee03c 	sub	lr, lr, #60	@ 0x3c
   204b8:	e14f0000 	mrs	r0, SPSR
   204bc:	e92e0001 	stmdb	lr!, {r0}
   204c0:	e59f0124 	ldr	r0, [pc, #292]	@ 205ec <vPortExitCritical+0x68>
   204c4:	e5900000 	ldr	r0, [r0]
   204c8:	e92e0001 	stmdb	lr!, {r0}
   204cc:	e59f0114 	ldr	r0, [pc, #276]	@ 205e8 <vPortExitCritical+0x64>
   204d0:	e5900000 	ldr	r0, [r0]
   204d4:	e580e000 	str	lr, [r0]
   204d8:	e59f3058 	ldr	r3, [pc, #88]	@ 20538 <vFreeRTOS_ISR+0xa8>
   204dc:	e5933000 	ldr	r3, [r3]
   204e0:	e59f3054 	ldr	r3, [pc, #84]	@ 2053c <vFreeRTOS_ISR+0xac>
   204e4:	e5933000 	ldr	r3, [r3]
	irqHandler();
   204e8:	eb000c23 	bl	2357c <irqHandler>
	portRESTORE_CONTEXT();	
   204ec:	e59f00f4 	ldr	r0, [pc, #244]	@ 205e8 <vPortExitCritical+0x64>
   204f0:	e5900000 	ldr	r0, [r0]
   204f4:	e590e000 	ldr	lr, [r0]
   204f8:	e59f00ec 	ldr	r0, [pc, #236]	@ 205ec <vPortExitCritical+0x68>
   204fc:	e8be0002 	ldm	lr!, {r1}
   20500:	e5801000 	str	r1, [r0]
   20504:	e8be0001 	ldm	lr!, {r0}
   20508:	e16ff000 	msr	SPSR_fsxc, r0
   2050c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20510:	e320f000 	nop	{0}
   20514:	e59ee03c 	ldr	lr, [lr, #60]	@ 0x3c
   20518:	e25ef004 	subs	pc, lr, #4
   2051c:	e320f000 	nop	{0}
   20520:	e320f000 	nop	{0}
   20524:	e59f300c 	ldr	r3, [pc, #12]	@ 20538 <vFreeRTOS_ISR+0xa8>
   20528:	e5933000 	ldr	r3, [r3]
   2052c:	e59f3008 	ldr	r3, [pc, #8]	@ 2053c <vFreeRTOS_ISR+0xac>
   20530:	e5933000 	ldr	r3, [r3]
}
   20534:	e320f000 	nop	{0}
   20538:	00024814 	andeq	r4, r2, r4, lsl r8
   2053c:	000248a4 	andeq	r4, r2, r4, lsr #17

00020540 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   20540:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20544:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   20548:	e92d0001 	stmfd	sp!, {r0}
   2054c:	e10f0000 	mrs	r0, CPSR
   20550:	e38000c0 	orr	r0, r0, #192	@ 0xc0
   20554:	e129f000 	msr	CPSR_fc, r0
   20558:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   2055c:	e59f301c 	ldr	r3, [pc, #28]	@ 20580 <vPortEnterCritical+0x40>
   20560:	e5933000 	ldr	r3, [r3]
   20564:	e2833001 	add	r3, r3, #1
   20568:	e59f2010 	ldr	r2, [pc, #16]	@ 20580 <vPortEnterCritical+0x40>
   2056c:	e5823000 	str	r3, [r2]
}
   20570:	e320f000 	nop	{0}
   20574:	e28bd000 	add	sp, fp, #0
   20578:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   2057c:	e12fff1e 	bx	lr
   20580:	00024814 	andeq	r4, r2, r4, lsl r8

00020584 <vPortExitCritical>:

void vPortExitCritical( void )
{
   20584:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20588:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   2058c:	e59f3050 	ldr	r3, [pc, #80]	@ 205e4 <vPortExitCritical+0x60>
   20590:	e5933000 	ldr	r3, [r3]
   20594:	e3530000 	cmp	r3, #0
   20598:	0a00000d 	beq	205d4 <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   2059c:	e59f3040 	ldr	r3, [pc, #64]	@ 205e4 <vPortExitCritical+0x60>
   205a0:	e5933000 	ldr	r3, [r3]
   205a4:	e2433001 	sub	r3, r3, #1
   205a8:	e59f2034 	ldr	r2, [pc, #52]	@ 205e4 <vPortExitCritical+0x60>
   205ac:	e5823000 	str	r3, [r2]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   205b0:	e59f302c 	ldr	r3, [pc, #44]	@ 205e4 <vPortExitCritical+0x60>
   205b4:	e5933000 	ldr	r3, [r3]
   205b8:	e3530000 	cmp	r3, #0
   205bc:	1a000004 	bne	205d4 <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   205c0:	e92d0001 	stmfd	sp!, {r0}
   205c4:	e10f0000 	mrs	r0, CPSR
   205c8:	e3c000c0 	bic	r0, r0, #192	@ 0xc0
   205cc:	e129f000 	msr	CPSR_fc, r0
   205d0:	e8bd0001 	ldmfd	sp!, {r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   205d4:	e320f000 	nop	{0}
   205d8:	e28bd000 	add	sp, fp, #0
   205dc:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   205e0:	e12fff1e 	bx	lr
   205e4:	00024814 	andeq	r4, r2, r4, lsl r8
   205e8:	000248a4 	andeq	r4, r2, r4, lsr #17
   205ec:	00024814 	andeq	r4, r2, r4, lsl r8

000205f0 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   205f0:	e92d4800 	push	{fp, lr}
   205f4:	e28db004 	add	fp, sp, #4
   205f8:	e24dd018 	sub	sp, sp, #24
   205fc:	e50b0010 	str	r0, [fp, #-16]
   20600:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
   20604:	e50b2018 	str	r2, [fp, #-24]	@ 0xffffffe8
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   20608:	e3a00038 	mov	r0, #56	@ 0x38
   2060c:	eb000e0c 	bl	23e44 <pvPortMalloc>
   20610:	e50b000c 	str	r0, [fp, #-12]
	if( pxCoRoutine )
   20614:	e51b300c 	ldr	r3, [fp, #-12]
   20618:	e3530000 	cmp	r3, #0
   2061c:	0a000044 	beq	20734 <xCoRoutineCreate+0x144>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   20620:	e59f3124 	ldr	r3, [pc, #292]	@ 2074c <xCoRoutineCreate+0x15c>
   20624:	e5933000 	ldr	r3, [r3]
   20628:	e3530000 	cmp	r3, #0
   2062c:	1a000003 	bne	20640 <xCoRoutineCreate+0x50>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   20630:	e59f2114 	ldr	r2, [pc, #276]	@ 2074c <xCoRoutineCreate+0x15c>
   20634:	e51b300c 	ldr	r3, [fp, #-12]
   20638:	e5823000 	str	r3, [r2]
			prvInitialiseCoRoutineLists();
   2063c:	eb000178 	bl	20c24 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   20640:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20644:	e3530001 	cmp	r3, #1
   20648:	9a000001 	bls	20654 <xCoRoutineCreate+0x64>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   2064c:	e3a03001 	mov	r3, #1
   20650:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   20654:	e51b300c 	ldr	r3, [fp, #-12]
   20658:	e3a02000 	mov	r2, #0
   2065c:	e1c323b4 	strh	r2, [r3, #52]	@ 0x34
		pxCoRoutine->uxPriority = uxPriority;
   20660:	e51b300c 	ldr	r3, [fp, #-12]
   20664:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20668:	e583202c 	str	r2, [r3, #44]	@ 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   2066c:	e51b300c 	ldr	r3, [fp, #-12]
   20670:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   20674:	e5832030 	str	r2, [r3, #48]	@ 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   20678:	e51b300c 	ldr	r3, [fp, #-12]
   2067c:	e51b2010 	ldr	r2, [fp, #-16]
   20680:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   20684:	e51b300c 	ldr	r3, [fp, #-12]
   20688:	e2833004 	add	r3, r3, #4
   2068c:	e1a00003 	mov	r0, r3
   20690:	eb0001ca 	bl	20dc0 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   20694:	e51b300c 	ldr	r3, [fp, #-12]
   20698:	e2833018 	add	r3, r3, #24
   2069c:	e1a00003 	mov	r0, r3
   206a0:	eb0001c6 	bl	20dc0 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   206a4:	e51b300c 	ldr	r3, [fp, #-12]
   206a8:	e51b200c 	ldr	r2, [fp, #-12]
   206ac:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   206b0:	e51b300c 	ldr	r3, [fp, #-12]
   206b4:	e51b200c 	ldr	r2, [fp, #-12]
   206b8:	e5832024 	str	r2, [r3, #36]	@ 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   206bc:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   206c0:	e2632005 	rsb	r2, r3, #5
   206c4:	e51b300c 	ldr	r3, [fp, #-12]
   206c8:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   206cc:	e51b300c 	ldr	r3, [fp, #-12]
   206d0:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   206d4:	e59f3074 	ldr	r3, [pc, #116]	@ 20750 <xCoRoutineCreate+0x160>
   206d8:	e5933000 	ldr	r3, [r3]
   206dc:	e1520003 	cmp	r2, r3
   206e0:	9a000003 	bls	206f4 <xCoRoutineCreate+0x104>
   206e4:	e51b300c 	ldr	r3, [fp, #-12]
   206e8:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   206ec:	e59f205c 	ldr	r2, [pc, #92]	@ 20750 <xCoRoutineCreate+0x160>
   206f0:	e5823000 	str	r3, [r2]
   206f4:	e51b300c 	ldr	r3, [fp, #-12]
   206f8:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   206fc:	e1a03002 	mov	r3, r2
   20700:	e1a03103 	lsl	r3, r3, #2
   20704:	e0833002 	add	r3, r3, r2
   20708:	e1a03103 	lsl	r3, r3, #2
   2070c:	e59f2040 	ldr	r2, [pc, #64]	@ 20754 <xCoRoutineCreate+0x164>
   20710:	e0832002 	add	r2, r3, r2
   20714:	e51b300c 	ldr	r3, [fp, #-12]
   20718:	e2833004 	add	r3, r3, #4
   2071c:	e1a01003 	mov	r1, r3
   20720:	e1a00002 	mov	r0, r2
   20724:	eb0001b0 	bl	20dec <vListInsertEnd>

		xReturn = pdPASS;
   20728:	e3a03001 	mov	r3, #1
   2072c:	e50b3008 	str	r3, [fp, #-8]
   20730:	ea000001 	b	2073c <xCoRoutineCreate+0x14c>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   20734:	e3e03000 	mvn	r3, #0
   20738:	e50b3008 	str	r3, [fp, #-8]
	}
	
	return xReturn;	
   2073c:	e51b3008 	ldr	r3, [fp, #-8]
}
   20740:	e1a00003 	mov	r0, r3
   20744:	e24bd004 	sub	sp, fp, #4
   20748:	e8bd8800 	pop	{fp, pc}
   2074c:	00024890 	muleq	r2, r0, r8
   20750:	00024894 	muleq	r2, r4, r8
   20754:	00024824 	andeq	r4, r2, r4, lsr #16

00020758 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   20758:	e92d4800 	push	{fp, lr}
   2075c:	e28db004 	add	fp, sp, #4
   20760:	e24dd010 	sub	sp, sp, #16
   20764:	e50b0010 	str	r0, [fp, #-16]
   20768:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   2076c:	e59f30b8 	ldr	r3, [pc, #184]	@ 2082c <vCoRoutineAddToDelayedList+0xd4>
   20770:	e5933000 	ldr	r3, [r3]
   20774:	e51b2010 	ldr	r2, [fp, #-16]
   20778:	e0823003 	add	r3, r2, r3
   2077c:	e50b3008 	str	r3, [fp, #-8]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   20780:	e59f30a8 	ldr	r3, [pc, #168]	@ 20830 <vCoRoutineAddToDelayedList+0xd8>
   20784:	e5933000 	ldr	r3, [r3]
   20788:	e2833004 	add	r3, r3, #4
   2078c:	e1a00003 	mov	r0, r3
   20790:	eb0001f1 	bl	20f5c <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   20794:	e59f3094 	ldr	r3, [pc, #148]	@ 20830 <vCoRoutineAddToDelayedList+0xd8>
   20798:	e5933000 	ldr	r3, [r3]
   2079c:	e51b2008 	ldr	r2, [fp, #-8]
   207a0:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   207a4:	e59f3080 	ldr	r3, [pc, #128]	@ 2082c <vCoRoutineAddToDelayedList+0xd4>
   207a8:	e5933000 	ldr	r3, [r3]
   207ac:	e51b2008 	ldr	r2, [fp, #-8]
   207b0:	e1520003 	cmp	r2, r3
   207b4:	2a000008 	bcs	207dc <vCoRoutineAddToDelayedList+0x84>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   207b8:	e59f3074 	ldr	r3, [pc, #116]	@ 20834 <vCoRoutineAddToDelayedList+0xdc>
   207bc:	e5932000 	ldr	r2, [r3]
   207c0:	e59f3068 	ldr	r3, [pc, #104]	@ 20830 <vCoRoutineAddToDelayedList+0xd8>
   207c4:	e5933000 	ldr	r3, [r3]
   207c8:	e2833004 	add	r3, r3, #4
   207cc:	e1a01003 	mov	r1, r3
   207d0:	e1a00002 	mov	r0, r2
   207d4:	eb0001aa 	bl	20e84 <vListInsert>
   207d8:	ea000007 	b	207fc <vCoRoutineAddToDelayedList+0xa4>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   207dc:	e59f3054 	ldr	r3, [pc, #84]	@ 20838 <vCoRoutineAddToDelayedList+0xe0>
   207e0:	e5932000 	ldr	r2, [r3]
   207e4:	e59f3044 	ldr	r3, [pc, #68]	@ 20830 <vCoRoutineAddToDelayedList+0xd8>
   207e8:	e5933000 	ldr	r3, [r3]
   207ec:	e2833004 	add	r3, r3, #4
   207f0:	e1a01003 	mov	r1, r3
   207f4:	e1a00002 	mov	r0, r2
   207f8:	eb0001a1 	bl	20e84 <vListInsert>
	}

	if( pxEventList )
   207fc:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20800:	e3530000 	cmp	r3, #0
   20804:	0a000005 	beq	20820 <vCoRoutineAddToDelayedList+0xc8>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   20808:	e59f3020 	ldr	r3, [pc, #32]	@ 20830 <vCoRoutineAddToDelayedList+0xd8>
   2080c:	e5933000 	ldr	r3, [r3]
   20810:	e2833018 	add	r3, r3, #24
   20814:	e1a01003 	mov	r1, r3
   20818:	e51b0014 	ldr	r0, [fp, #-20]	@ 0xffffffec
   2081c:	eb000198 	bl	20e84 <vListInsert>
	}
}
   20820:	e320f000 	nop	{0}
   20824:	e24bd004 	sub	sp, fp, #4
   20828:	e8bd8800 	pop	{fp, pc}
   2082c:	00024898 	muleq	r2, r8, r8
   20830:	00024890 	muleq	r2, r0, r8
   20834:	00024878 	andeq	r4, r2, r8, ror r8
   20838:	00024874 	andeq	r4, r2, r4, ror r8

0002083c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   2083c:	e92d4800 	push	{fp, lr}
   20840:	e28db004 	add	fp, sp, #4
   20844:	e24dd008 	sub	sp, sp, #8
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   20848:	ea00002c 	b	20900 <prvCheckPendingReadyList+0xc4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   2084c:	e92d0001 	stmfd	sp!, {r0}
   20850:	e10f0000 	mrs	r0, CPSR
   20854:	e38000c0 	orr	r0, r0, #192	@ 0xc0
   20858:	e129f000 	msr	CPSR_fc, r0
   2085c:	e8bd0001 	ldmfd	sp!, {r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   20860:	e59f30b8 	ldr	r3, [pc, #184]	@ 20920 <prvCheckPendingReadyList+0xe4>
   20864:	e593300c 	ldr	r3, [r3, #12]
   20868:	e593300c 	ldr	r3, [r3, #12]
   2086c:	e50b3008 	str	r3, [fp, #-8]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   20870:	e51b3008 	ldr	r3, [fp, #-8]
   20874:	e2833018 	add	r3, r3, #24
   20878:	e1a00003 	mov	r0, r3
   2087c:	eb0001b6 	bl	20f5c <vListRemove>
		}
		portENABLE_INTERRUPTS();
   20880:	e92d0001 	stmfd	sp!, {r0}
   20884:	e10f0000 	mrs	r0, CPSR
   20888:	e3c000c0 	bic	r0, r0, #192	@ 0xc0
   2088c:	e129f000 	msr	CPSR_fc, r0
   20890:	e8bd0001 	ldmfd	sp!, {r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   20894:	e51b3008 	ldr	r3, [fp, #-8]
   20898:	e2833004 	add	r3, r3, #4
   2089c:	e1a00003 	mov	r0, r3
   208a0:	eb0001ad 	bl	20f5c <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   208a4:	e51b3008 	ldr	r3, [fp, #-8]
   208a8:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   208ac:	e59f3070 	ldr	r3, [pc, #112]	@ 20924 <prvCheckPendingReadyList+0xe8>
   208b0:	e5933000 	ldr	r3, [r3]
   208b4:	e1520003 	cmp	r2, r3
   208b8:	9a000003 	bls	208cc <prvCheckPendingReadyList+0x90>
   208bc:	e51b3008 	ldr	r3, [fp, #-8]
   208c0:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   208c4:	e59f2058 	ldr	r2, [pc, #88]	@ 20924 <prvCheckPendingReadyList+0xe8>
   208c8:	e5823000 	str	r3, [r2]
   208cc:	e51b3008 	ldr	r3, [fp, #-8]
   208d0:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   208d4:	e1a03002 	mov	r3, r2
   208d8:	e1a03103 	lsl	r3, r3, #2
   208dc:	e0833002 	add	r3, r3, r2
   208e0:	e1a03103 	lsl	r3, r3, #2
   208e4:	e59f203c 	ldr	r2, [pc, #60]	@ 20928 <prvCheckPendingReadyList+0xec>
   208e8:	e0832002 	add	r2, r3, r2
   208ec:	e51b3008 	ldr	r3, [fp, #-8]
   208f0:	e2833004 	add	r3, r3, #4
   208f4:	e1a01003 	mov	r1, r3
   208f8:	e1a00002 	mov	r0, r2
   208fc:	eb00013a 	bl	20dec <vListInsertEnd>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   20900:	e59f3018 	ldr	r3, [pc, #24]	@ 20920 <prvCheckPendingReadyList+0xe4>
   20904:	e5933000 	ldr	r3, [r3]
   20908:	e3530000 	cmp	r3, #0
   2090c:	1affffce 	bne	2084c <prvCheckPendingReadyList+0x10>
	}
}
   20910:	e320f000 	nop	{0}
   20914:	e320f000 	nop	{0}
   20918:	e24bd004 	sub	sp, fp, #4
   2091c:	e8bd8800 	pop	{fp, pc}
   20920:	0002487c 	andeq	r4, r2, ip, ror r8
   20924:	00024894 	muleq	r2, r4, r8
   20928:	00024824 	andeq	r4, r2, r4, lsr #16

0002092c <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   2092c:	e92d4800 	push	{fp, lr}
   20930:	e28db004 	add	fp, sp, #4
   20934:	e24dd008 	sub	sp, sp, #8
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   20938:	eb0007e0 	bl	228c0 <xTaskGetTickCount>
   2093c:	e1a02000 	mov	r2, r0
   20940:	e59f319c 	ldr	r3, [pc, #412]	@ 20ae4 <prvCheckDelayedList+0x1b8>
   20944:	e5933000 	ldr	r3, [r3]
   20948:	e0423003 	sub	r3, r2, r3
   2094c:	e59f2194 	ldr	r2, [pc, #404]	@ 20ae8 <prvCheckDelayedList+0x1bc>
   20950:	e5823000 	str	r3, [r2]
	while( xPassedTicks )
   20954:	ea000057 	b	20ab8 <prvCheckDelayedList+0x18c>
	{
		xCoRoutineTickCount++;
   20958:	e59f318c 	ldr	r3, [pc, #396]	@ 20aec <prvCheckDelayedList+0x1c0>
   2095c:	e5933000 	ldr	r3, [r3]
   20960:	e2833001 	add	r3, r3, #1
   20964:	e59f2180 	ldr	r2, [pc, #384]	@ 20aec <prvCheckDelayedList+0x1c0>
   20968:	e5823000 	str	r3, [r2]
		xPassedTicks--;
   2096c:	e59f3174 	ldr	r3, [pc, #372]	@ 20ae8 <prvCheckDelayedList+0x1bc>
   20970:	e5933000 	ldr	r3, [r3]
   20974:	e2433001 	sub	r3, r3, #1
   20978:	e59f2168 	ldr	r2, [pc, #360]	@ 20ae8 <prvCheckDelayedList+0x1bc>
   2097c:	e5823000 	str	r3, [r2]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   20980:	e59f3164 	ldr	r3, [pc, #356]	@ 20aec <prvCheckDelayedList+0x1c0>
   20984:	e5933000 	ldr	r3, [r3]
   20988:	e3530000 	cmp	r3, #0
   2098c:	1a000042 	bne	20a9c <prvCheckDelayedList+0x170>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   20990:	e59f3158 	ldr	r3, [pc, #344]	@ 20af0 <prvCheckDelayedList+0x1c4>
   20994:	e5933000 	ldr	r3, [r3]
   20998:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   2099c:	e59f3150 	ldr	r3, [pc, #336]	@ 20af4 <prvCheckDelayedList+0x1c8>
   209a0:	e5933000 	ldr	r3, [r3]
   209a4:	e59f2144 	ldr	r2, [pc, #324]	@ 20af0 <prvCheckDelayedList+0x1c4>
   209a8:	e5823000 	str	r3, [r2]
			pxOverflowDelayedCoRoutineList = pxTemp;
   209ac:	e59f2140 	ldr	r2, [pc, #320]	@ 20af4 <prvCheckDelayedList+0x1c8>
   209b0:	e51b3008 	ldr	r3, [fp, #-8]
   209b4:	e5823000 	str	r3, [r2]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   209b8:	ea000037 	b	20a9c <prvCheckDelayedList+0x170>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   209bc:	e59f312c 	ldr	r3, [pc, #300]	@ 20af0 <prvCheckDelayedList+0x1c4>
   209c0:	e5933000 	ldr	r3, [r3]
   209c4:	e593300c 	ldr	r3, [r3, #12]
   209c8:	e593300c 	ldr	r3, [r3, #12]
   209cc:	e50b300c 	str	r3, [fp, #-12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   209d0:	e51b300c 	ldr	r3, [fp, #-12]
   209d4:	e5932004 	ldr	r2, [r3, #4]
   209d8:	e59f310c 	ldr	r3, [pc, #268]	@ 20aec <prvCheckDelayedList+0x1c0>
   209dc:	e5933000 	ldr	r3, [r3]
   209e0:	e1520003 	cmp	r2, r3
   209e4:	8a000032 	bhi	20ab4 <prvCheckDelayedList+0x188>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
   209e8:	e92d0001 	stmfd	sp!, {r0}
   209ec:	e10f0000 	mrs	r0, CPSR
   209f0:	e38000c0 	orr	r0, r0, #192	@ 0xc0
   209f4:	e129f000 	msr	CPSR_fc, r0
   209f8:	e8bd0001 	ldmfd	sp!, {r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   209fc:	e51b300c 	ldr	r3, [fp, #-12]
   20a00:	e2833004 	add	r3, r3, #4
   20a04:	e1a00003 	mov	r0, r3
   20a08:	eb000153 	bl	20f5c <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   20a0c:	e51b300c 	ldr	r3, [fp, #-12]
   20a10:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   20a14:	e3530000 	cmp	r3, #0
   20a18:	0a000003 	beq	20a2c <prvCheckDelayedList+0x100>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   20a1c:	e51b300c 	ldr	r3, [fp, #-12]
   20a20:	e2833018 	add	r3, r3, #24
   20a24:	e1a00003 	mov	r0, r3
   20a28:	eb00014b 	bl	20f5c <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   20a2c:	e92d0001 	stmfd	sp!, {r0}
   20a30:	e10f0000 	mrs	r0, CPSR
   20a34:	e3c000c0 	bic	r0, r0, #192	@ 0xc0
   20a38:	e129f000 	msr	CPSR_fc, r0
   20a3c:	e8bd0001 	ldmfd	sp!, {r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   20a40:	e51b300c 	ldr	r3, [fp, #-12]
   20a44:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   20a48:	e59f30a8 	ldr	r3, [pc, #168]	@ 20af8 <prvCheckDelayedList+0x1cc>
   20a4c:	e5933000 	ldr	r3, [r3]
   20a50:	e1520003 	cmp	r2, r3
   20a54:	9a000003 	bls	20a68 <prvCheckDelayedList+0x13c>
   20a58:	e51b300c 	ldr	r3, [fp, #-12]
   20a5c:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   20a60:	e59f2090 	ldr	r2, [pc, #144]	@ 20af8 <prvCheckDelayedList+0x1cc>
   20a64:	e5823000 	str	r3, [r2]
   20a68:	e51b300c 	ldr	r3, [fp, #-12]
   20a6c:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   20a70:	e1a03002 	mov	r3, r2
   20a74:	e1a03103 	lsl	r3, r3, #2
   20a78:	e0833002 	add	r3, r3, r2
   20a7c:	e1a03103 	lsl	r3, r3, #2
   20a80:	e59f2074 	ldr	r2, [pc, #116]	@ 20afc <prvCheckDelayedList+0x1d0>
   20a84:	e0832002 	add	r2, r3, r2
   20a88:	e51b300c 	ldr	r3, [fp, #-12]
   20a8c:	e2833004 	add	r3, r3, #4
   20a90:	e1a01003 	mov	r1, r3
   20a94:	e1a00002 	mov	r0, r2
   20a98:	eb0000d3 	bl	20dec <vListInsertEnd>
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   20a9c:	e59f304c 	ldr	r3, [pc, #76]	@ 20af0 <prvCheckDelayedList+0x1c4>
   20aa0:	e5933000 	ldr	r3, [r3]
   20aa4:	e5933000 	ldr	r3, [r3]
   20aa8:	e3530000 	cmp	r3, #0
   20aac:	1affffc2 	bne	209bc <prvCheckDelayedList+0x90>
   20ab0:	ea000000 	b	20ab8 <prvCheckDelayedList+0x18c>
				break;																				
   20ab4:	e320f000 	nop	{0}
	while( xPassedTicks )
   20ab8:	e59f3028 	ldr	r3, [pc, #40]	@ 20ae8 <prvCheckDelayedList+0x1bc>
   20abc:	e5933000 	ldr	r3, [r3]
   20ac0:	e3530000 	cmp	r3, #0
   20ac4:	1affffa3 	bne	20958 <prvCheckDelayedList+0x2c>
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   20ac8:	e59f301c 	ldr	r3, [pc, #28]	@ 20aec <prvCheckDelayedList+0x1c0>
   20acc:	e5933000 	ldr	r3, [r3]
   20ad0:	e59f200c 	ldr	r2, [pc, #12]	@ 20ae4 <prvCheckDelayedList+0x1b8>
   20ad4:	e5823000 	str	r3, [r2]
}
   20ad8:	e320f000 	nop	{0}
   20adc:	e24bd004 	sub	sp, fp, #4
   20ae0:	e8bd8800 	pop	{fp, pc}
   20ae4:	0002489c 	muleq	r2, ip, r8
   20ae8:	000248a0 	andeq	r4, r2, r0, lsr #17
   20aec:	00024898 	muleq	r2, r8, r8
   20af0:	00024874 	andeq	r4, r2, r4, ror r8
   20af4:	00024878 	andeq	r4, r2, r8, ror r8
   20af8:	00024894 	muleq	r2, r4, r8
   20afc:	00024824 	andeq	r4, r2, r4, lsr #16

00020b00 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   20b00:	e92d4800 	push	{fp, lr}
   20b04:	e28db004 	add	fp, sp, #4
   20b08:	e24dd008 	sub	sp, sp, #8
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   20b0c:	ebffff4a 	bl	2083c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   20b10:	ebffff85 	bl	2092c <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   20b14:	ea000008 	b	20b3c <vCoRoutineSchedule+0x3c>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   20b18:	e59f30f8 	ldr	r3, [pc, #248]	@ 20c18 <vCoRoutineSchedule+0x118>
   20b1c:	e5933000 	ldr	r3, [r3]
   20b20:	e3530000 	cmp	r3, #0
   20b24:	0a000038 	beq	20c0c <vCoRoutineSchedule+0x10c>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
   20b28:	e59f30e8 	ldr	r3, [pc, #232]	@ 20c18 <vCoRoutineSchedule+0x118>
   20b2c:	e5933000 	ldr	r3, [r3]
   20b30:	e2433001 	sub	r3, r3, #1
   20b34:	e59f20dc 	ldr	r2, [pc, #220]	@ 20c18 <vCoRoutineSchedule+0x118>
   20b38:	e5823000 	str	r3, [r2]
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   20b3c:	e59f30d4 	ldr	r3, [pc, #212]	@ 20c18 <vCoRoutineSchedule+0x118>
   20b40:	e5932000 	ldr	r2, [r3]
   20b44:	e59f10d0 	ldr	r1, [pc, #208]	@ 20c1c <vCoRoutineSchedule+0x11c>
   20b48:	e1a03002 	mov	r3, r2
   20b4c:	e1a03103 	lsl	r3, r3, #2
   20b50:	e0833002 	add	r3, r3, r2
   20b54:	e1a03103 	lsl	r3, r3, #2
   20b58:	e0813003 	add	r3, r1, r3
   20b5c:	e5933000 	ldr	r3, [r3]
   20b60:	e3530000 	cmp	r3, #0
   20b64:	0affffeb 	beq	20b18 <vCoRoutineSchedule+0x18>
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   20b68:	e59f30a8 	ldr	r3, [pc, #168]	@ 20c18 <vCoRoutineSchedule+0x118>
   20b6c:	e5932000 	ldr	r2, [r3]
   20b70:	e1a03002 	mov	r3, r2
   20b74:	e1a03103 	lsl	r3, r3, #2
   20b78:	e0833002 	add	r3, r3, r2
   20b7c:	e1a03103 	lsl	r3, r3, #2
   20b80:	e59f2094 	ldr	r2, [pc, #148]	@ 20c1c <vCoRoutineSchedule+0x11c>
   20b84:	e0833002 	add	r3, r3, r2
   20b88:	e50b3008 	str	r3, [fp, #-8]
   20b8c:	e51b3008 	ldr	r3, [fp, #-8]
   20b90:	e5933004 	ldr	r3, [r3, #4]
   20b94:	e5932004 	ldr	r2, [r3, #4]
   20b98:	e51b3008 	ldr	r3, [fp, #-8]
   20b9c:	e5832004 	str	r2, [r3, #4]
   20ba0:	e51b3008 	ldr	r3, [fp, #-8]
   20ba4:	e5932004 	ldr	r2, [r3, #4]
   20ba8:	e51b3008 	ldr	r3, [fp, #-8]
   20bac:	e2833008 	add	r3, r3, #8
   20bb0:	e1520003 	cmp	r2, r3
   20bb4:	1a000004 	bne	20bcc <vCoRoutineSchedule+0xcc>
   20bb8:	e51b3008 	ldr	r3, [fp, #-8]
   20bbc:	e5933004 	ldr	r3, [r3, #4]
   20bc0:	e5932004 	ldr	r2, [r3, #4]
   20bc4:	e51b3008 	ldr	r3, [fp, #-8]
   20bc8:	e5832004 	str	r2, [r3, #4]
   20bcc:	e51b3008 	ldr	r3, [fp, #-8]
   20bd0:	e5933004 	ldr	r3, [r3, #4]
   20bd4:	e593300c 	ldr	r3, [r3, #12]
   20bd8:	e59f2040 	ldr	r2, [pc, #64]	@ 20c20 <vCoRoutineSchedule+0x120>
   20bdc:	e5823000 	str	r3, [r2]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   20be0:	e59f3038 	ldr	r3, [pc, #56]	@ 20c20 <vCoRoutineSchedule+0x120>
   20be4:	e5933000 	ldr	r3, [r3]
   20be8:	e5933000 	ldr	r3, [r3]
   20bec:	e59f202c 	ldr	r2, [pc, #44]	@ 20c20 <vCoRoutineSchedule+0x120>
   20bf0:	e5920000 	ldr	r0, [r2]
   20bf4:	e59f2024 	ldr	r2, [pc, #36]	@ 20c20 <vCoRoutineSchedule+0x120>
   20bf8:	e5922000 	ldr	r2, [r2]
   20bfc:	e5922030 	ldr	r2, [r2, #48]	@ 0x30
   20c00:	e1a01002 	mov	r1, r2
   20c04:	e12fff33 	blx	r3

	return;
   20c08:	ea000000 	b	20c10 <vCoRoutineSchedule+0x110>
			return;
   20c0c:	e320f000 	nop	{0}
}
   20c10:	e24bd004 	sub	sp, fp, #4
   20c14:	e8bd8800 	pop	{fp, pc}
   20c18:	00024894 	muleq	r2, r4, r8
   20c1c:	00024824 	andeq	r4, r2, r4, lsr #16
   20c20:	00024890 	muleq	r2, r0, r8

00020c24 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   20c24:	e92d4800 	push	{fp, lr}
   20c28:	e28db004 	add	fp, sp, #4
   20c2c:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   20c30:	e3a03000 	mov	r3, #0
   20c34:	e50b3008 	str	r3, [fp, #-8]
   20c38:	ea00000b 	b	20c6c <prvInitialiseCoRoutineLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   20c3c:	e51b2008 	ldr	r2, [fp, #-8]
   20c40:	e1a03002 	mov	r3, r2
   20c44:	e1a03103 	lsl	r3, r3, #2
   20c48:	e0833002 	add	r3, r3, r2
   20c4c:	e1a03103 	lsl	r3, r3, #2
   20c50:	e59f205c 	ldr	r2, [pc, #92]	@ 20cb4 <prvInitialiseCoRoutineLists+0x90>
   20c54:	e0833002 	add	r3, r3, r2
   20c58:	e1a00003 	mov	r0, r3
   20c5c:	eb00003d 	bl	20d58 <vListInitialise>
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   20c60:	e51b3008 	ldr	r3, [fp, #-8]
   20c64:	e2833001 	add	r3, r3, #1
   20c68:	e50b3008 	str	r3, [fp, #-8]
   20c6c:	e51b3008 	ldr	r3, [fp, #-8]
   20c70:	e3530001 	cmp	r3, #1
   20c74:	9afffff0 	bls	20c3c <prvInitialiseCoRoutineLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   20c78:	e59f0038 	ldr	r0, [pc, #56]	@ 20cb8 <prvInitialiseCoRoutineLists+0x94>
   20c7c:	eb000035 	bl	20d58 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   20c80:	e59f0034 	ldr	r0, [pc, #52]	@ 20cbc <prvInitialiseCoRoutineLists+0x98>
   20c84:	eb000033 	bl	20d58 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   20c88:	e59f0030 	ldr	r0, [pc, #48]	@ 20cc0 <prvInitialiseCoRoutineLists+0x9c>
   20c8c:	eb000031 	bl	20d58 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   20c90:	e59f302c 	ldr	r3, [pc, #44]	@ 20cc4 <prvInitialiseCoRoutineLists+0xa0>
   20c94:	e59f201c 	ldr	r2, [pc, #28]	@ 20cb8 <prvInitialiseCoRoutineLists+0x94>
   20c98:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   20c9c:	e59f3024 	ldr	r3, [pc, #36]	@ 20cc8 <prvInitialiseCoRoutineLists+0xa4>
   20ca0:	e59f2014 	ldr	r2, [pc, #20]	@ 20cbc <prvInitialiseCoRoutineLists+0x98>
   20ca4:	e5832000 	str	r2, [r3]
}
   20ca8:	e320f000 	nop	{0}
   20cac:	e24bd004 	sub	sp, fp, #4
   20cb0:	e8bd8800 	pop	{fp, pc}
   20cb4:	00024824 	andeq	r4, r2, r4, lsr #16
   20cb8:	0002484c 	andeq	r4, r2, ip, asr #16
   20cbc:	00024860 	andeq	r4, r2, r0, ror #16
   20cc0:	0002487c 	andeq	r4, r2, ip, ror r8
   20cc4:	00024874 	andeq	r4, r2, r4, ror r8
   20cc8:	00024878 	andeq	r4, r2, r8, ror r8

00020ccc <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   20ccc:	e92d4800 	push	{fp, lr}
   20cd0:	e28db004 	add	fp, sp, #4
   20cd4:	e24dd010 	sub	sp, sp, #16
   20cd8:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   20cdc:	e51b3010 	ldr	r3, [fp, #-16]
   20ce0:	e593300c 	ldr	r3, [r3, #12]
   20ce4:	e593300c 	ldr	r3, [r3, #12]
   20ce8:	e50b300c 	str	r3, [fp, #-12]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   20cec:	e51b300c 	ldr	r3, [fp, #-12]
   20cf0:	e2833018 	add	r3, r3, #24
   20cf4:	e1a00003 	mov	r0, r3
   20cf8:	eb000097 	bl	20f5c <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   20cfc:	e51b300c 	ldr	r3, [fp, #-12]
   20d00:	e2833018 	add	r3, r3, #24
   20d04:	e1a01003 	mov	r1, r3
   20d08:	e59f0040 	ldr	r0, [pc, #64]	@ 20d50 <xCoRoutineRemoveFromEventList+0x84>
   20d0c:	eb000036 	bl	20dec <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   20d10:	e51b300c 	ldr	r3, [fp, #-12]
   20d14:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   20d18:	e59f3034 	ldr	r3, [pc, #52]	@ 20d54 <xCoRoutineRemoveFromEventList+0x88>
   20d1c:	e5933000 	ldr	r3, [r3]
   20d20:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   20d24:	e1520003 	cmp	r2, r3
   20d28:	3a000002 	bcc	20d38 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
   20d2c:	e3a03001 	mov	r3, #1
   20d30:	e50b3008 	str	r3, [fp, #-8]
   20d34:	ea000001 	b	20d40 <xCoRoutineRemoveFromEventList+0x74>
	}
	else
	{
		xReturn = pdFALSE;
   20d38:	e3a03000 	mov	r3, #0
   20d3c:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   20d40:	e51b3008 	ldr	r3, [fp, #-8]
}
   20d44:	e1a00003 	mov	r0, r3
   20d48:	e24bd004 	sub	sp, fp, #4
   20d4c:	e8bd8800 	pop	{fp, pc}
   20d50:	0002487c 	andeq	r4, r2, ip, ror r8
   20d54:	00024890 	muleq	r2, r0, r8

00020d58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   20d58:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20d5c:	e28db000 	add	fp, sp, #0
   20d60:	e24dd00c 	sub	sp, sp, #12
   20d64:	e50b0008 	str	r0, [fp, #-8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   20d68:	e51b3008 	ldr	r3, [fp, #-8]
   20d6c:	e2832008 	add	r2, r3, #8
   20d70:	e51b3008 	ldr	r3, [fp, #-8]
   20d74:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   20d78:	e51b3008 	ldr	r3, [fp, #-8]
   20d7c:	e3e02000 	mvn	r2, #0
   20d80:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   20d84:	e51b3008 	ldr	r3, [fp, #-8]
   20d88:	e2832008 	add	r2, r3, #8
   20d8c:	e51b3008 	ldr	r3, [fp, #-8]
   20d90:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   20d94:	e51b3008 	ldr	r3, [fp, #-8]
   20d98:	e2832008 	add	r2, r3, #8
   20d9c:	e51b3008 	ldr	r3, [fp, #-8]
   20da0:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   20da4:	e51b3008 	ldr	r3, [fp, #-8]
   20da8:	e3a02000 	mov	r2, #0
   20dac:	e5832000 	str	r2, [r3]
}
   20db0:	e320f000 	nop	{0}
   20db4:	e28bd000 	add	sp, fp, #0
   20db8:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20dbc:	e12fff1e 	bx	lr

00020dc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   20dc0:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20dc4:	e28db000 	add	fp, sp, #0
   20dc8:	e24dd00c 	sub	sp, sp, #12
   20dcc:	e50b0008 	str	r0, [fp, #-8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   20dd0:	e51b3008 	ldr	r3, [fp, #-8]
   20dd4:	e3a02000 	mov	r2, #0
   20dd8:	e5832010 	str	r2, [r3, #16]
}
   20ddc:	e320f000 	nop	{0}
   20de0:	e28bd000 	add	sp, fp, #0
   20de4:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20de8:	e12fff1e 	bx	lr

00020dec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   20dec:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20df0:	e28db000 	add	fp, sp, #0
   20df4:	e24dd014 	sub	sp, sp, #20
   20df8:	e50b0010 	str	r0, [fp, #-16]
   20dfc:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   20e00:	e51b3010 	ldr	r3, [fp, #-16]
   20e04:	e5933004 	ldr	r3, [r3, #4]
   20e08:	e50b3008 	str	r3, [fp, #-8]

	pxNewListItem->pxNext = pxIndex->pxNext;
   20e0c:	e51b3008 	ldr	r3, [fp, #-8]
   20e10:	e5932004 	ldr	r2, [r3, #4]
   20e14:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20e18:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   20e1c:	e51b3010 	ldr	r3, [fp, #-16]
   20e20:	e5932004 	ldr	r2, [r3, #4]
   20e24:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20e28:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   20e2c:	e51b3008 	ldr	r3, [fp, #-8]
   20e30:	e5933004 	ldr	r3, [r3, #4]
   20e34:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20e38:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   20e3c:	e51b3008 	ldr	r3, [fp, #-8]
   20e40:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20e44:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   20e48:	e51b3010 	ldr	r3, [fp, #-16]
   20e4c:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20e50:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   20e54:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20e58:	e51b2010 	ldr	r2, [fp, #-16]
   20e5c:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   20e60:	e51b3010 	ldr	r3, [fp, #-16]
   20e64:	e5933000 	ldr	r3, [r3]
   20e68:	e2832001 	add	r2, r3, #1
   20e6c:	e51b3010 	ldr	r3, [fp, #-16]
   20e70:	e5832000 	str	r2, [r3]
}
   20e74:	e320f000 	nop	{0}
   20e78:	e28bd000 	add	sp, fp, #0
   20e7c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20e80:	e12fff1e 	bx	lr

00020e84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   20e84:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20e88:	e28db000 	add	fp, sp, #0
   20e8c:	e24dd014 	sub	sp, sp, #20
   20e90:	e50b0010 	str	r0, [fp, #-16]
   20e94:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   20e98:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20e9c:	e5933000 	ldr	r3, [r3]
   20ea0:	e50b300c 	str	r3, [fp, #-12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   20ea4:	e51b300c 	ldr	r3, [fp, #-12]
   20ea8:	e3730001 	cmn	r3, #1
   20eac:	1a000003 	bne	20ec0 <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   20eb0:	e51b3010 	ldr	r3, [fp, #-16]
   20eb4:	e5933010 	ldr	r3, [r3, #16]
   20eb8:	e50b3008 	str	r3, [fp, #-8]
   20ebc:	ea00000c 	b	20ef4 <vListInsert+0x70>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   20ec0:	e51b3010 	ldr	r3, [fp, #-16]
   20ec4:	e2833008 	add	r3, r3, #8
   20ec8:	e50b3008 	str	r3, [fp, #-8]
   20ecc:	ea000002 	b	20edc <vListInsert+0x58>
   20ed0:	e51b3008 	ldr	r3, [fp, #-8]
   20ed4:	e5933004 	ldr	r3, [r3, #4]
   20ed8:	e50b3008 	str	r3, [fp, #-8]
   20edc:	e51b3008 	ldr	r3, [fp, #-8]
   20ee0:	e5933004 	ldr	r3, [r3, #4]
   20ee4:	e5933000 	ldr	r3, [r3]
   20ee8:	e51b200c 	ldr	r2, [fp, #-12]
   20eec:	e1520003 	cmp	r2, r3
   20ef0:	2afffff6 	bcs	20ed0 <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   20ef4:	e51b3008 	ldr	r3, [fp, #-8]
   20ef8:	e5932004 	ldr	r2, [r3, #4]
   20efc:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20f00:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   20f04:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20f08:	e5933004 	ldr	r3, [r3, #4]
   20f0c:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20f10:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   20f14:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20f18:	e51b2008 	ldr	r2, [fp, #-8]
   20f1c:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   20f20:	e51b3008 	ldr	r3, [fp, #-8]
   20f24:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   20f28:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   20f2c:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   20f30:	e51b2010 	ldr	r2, [fp, #-16]
   20f34:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   20f38:	e51b3010 	ldr	r3, [fp, #-16]
   20f3c:	e5933000 	ldr	r3, [r3]
   20f40:	e2832001 	add	r2, r3, #1
   20f44:	e51b3010 	ldr	r3, [fp, #-16]
   20f48:	e5832000 	str	r2, [r3]
}
   20f4c:	e320f000 	nop	{0}
   20f50:	e28bd000 	add	sp, fp, #0
   20f54:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20f58:	e12fff1e 	bx	lr

00020f5c <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   20f5c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   20f60:	e28db000 	add	fp, sp, #0
   20f64:	e24dd014 	sub	sp, sp, #20
   20f68:	e50b0010 	str	r0, [fp, #-16]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   20f6c:	e51b3010 	ldr	r3, [fp, #-16]
   20f70:	e5933004 	ldr	r3, [r3, #4]
   20f74:	e51b2010 	ldr	r2, [fp, #-16]
   20f78:	e5922008 	ldr	r2, [r2, #8]
   20f7c:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   20f80:	e51b3010 	ldr	r3, [fp, #-16]
   20f84:	e5933008 	ldr	r3, [r3, #8]
   20f88:	e51b2010 	ldr	r2, [fp, #-16]
   20f8c:	e5922004 	ldr	r2, [r2, #4]
   20f90:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   20f94:	e51b3010 	ldr	r3, [fp, #-16]
   20f98:	e5933010 	ldr	r3, [r3, #16]
   20f9c:	e50b3008 	str	r3, [fp, #-8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   20fa0:	e51b3008 	ldr	r3, [fp, #-8]
   20fa4:	e5933004 	ldr	r3, [r3, #4]
   20fa8:	e51b2010 	ldr	r2, [fp, #-16]
   20fac:	e1520003 	cmp	r2, r3
   20fb0:	1a000003 	bne	20fc4 <vListRemove+0x68>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   20fb4:	e51b3010 	ldr	r3, [fp, #-16]
   20fb8:	e5932008 	ldr	r2, [r3, #8]
   20fbc:	e51b3008 	ldr	r3, [fp, #-8]
   20fc0:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   20fc4:	e51b3010 	ldr	r3, [fp, #-16]
   20fc8:	e3a02000 	mov	r2, #0
   20fcc:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   20fd0:	e51b3008 	ldr	r3, [fp, #-8]
   20fd4:	e5933000 	ldr	r3, [r3]
   20fd8:	e2432001 	sub	r2, r3, #1
   20fdc:	e51b3008 	ldr	r3, [fp, #-8]
   20fe0:	e5832000 	str	r2, [r3]
}
   20fe4:	e320f000 	nop	{0}
   20fe8:	e28bd000 	add	sp, fp, #0
   20fec:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   20ff0:	e12fff1e 	bx	lr

00020ff4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   20ff4:	e92d4800 	push	{fp, lr}
   20ff8:	e28db004 	add	fp, sp, #4
   20ffc:	e24dd008 	sub	sp, sp, #8
   21000:	e50b0008 	str	r0, [fp, #-8]
   21004:	e50b100c 	str	r1, [fp, #-12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   21008:	ebfffd4c 	bl	20540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   2100c:	e51b3008 	ldr	r3, [fp, #-8]
   21010:	e5932000 	ldr	r2, [r3]
   21014:	e51b3008 	ldr	r3, [fp, #-8]
   21018:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   2101c:	e51b1008 	ldr	r1, [fp, #-8]
   21020:	e5911040 	ldr	r1, [r1, #64]	@ 0x40
   21024:	e0030391 	mul	r3, r1, r3
   21028:	e0822003 	add	r2, r2, r3
   2102c:	e51b3008 	ldr	r3, [fp, #-8]
   21030:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   21034:	e51b3008 	ldr	r3, [fp, #-8]
   21038:	e3a02000 	mov	r2, #0
   2103c:	e5832038 	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   21040:	e51b3008 	ldr	r3, [fp, #-8]
   21044:	e5932000 	ldr	r2, [r3]
   21048:	e51b3008 	ldr	r3, [fp, #-8]
   2104c:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   21050:	e51b3008 	ldr	r3, [fp, #-8]
   21054:	e5932000 	ldr	r2, [r3]
   21058:	e51b3008 	ldr	r3, [fp, #-8]
   2105c:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   21060:	e2433001 	sub	r3, r3, #1
   21064:	e51b1008 	ldr	r1, [fp, #-8]
   21068:	e5911040 	ldr	r1, [r1, #64]	@ 0x40
   2106c:	e0030391 	mul	r3, r1, r3
   21070:	e0822003 	add	r2, r2, r3
   21074:	e51b3008 	ldr	r3, [fp, #-8]
   21078:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   2107c:	e51b3008 	ldr	r3, [fp, #-8]
   21080:	e3e02000 	mvn	r2, #0
   21084:	e5832044 	str	r2, [r3, #68]	@ 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   21088:	e51b3008 	ldr	r3, [fp, #-8]
   2108c:	e3e02000 	mvn	r2, #0
   21090:	e5832048 	str	r2, [r3, #72]	@ 0x48

		if( xNewQueue == pdFALSE )
   21094:	e51b300c 	ldr	r3, [fp, #-12]
   21098:	e3530000 	cmp	r3, #0
   2109c:	1a00000c 	bne	210d4 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   210a0:	e51b3008 	ldr	r3, [fp, #-8]
   210a4:	e5933010 	ldr	r3, [r3, #16]
   210a8:	e3530000 	cmp	r3, #0
   210ac:	0a000010 	beq	210f4 <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   210b0:	e51b3008 	ldr	r3, [fp, #-8]
   210b4:	e2833010 	add	r3, r3, #16
   210b8:	e1a00003 	mov	r0, r3
   210bc:	eb000760 	bl	22e44 <xTaskRemoveFromEventList>
   210c0:	e1a03000 	mov	r3, r0
   210c4:	e3530001 	cmp	r3, #1
   210c8:	1a000009 	bne	210f4 <xQueueGenericReset+0x100>
				{
					portYIELD_WITHIN_API();
   210cc:	ef000000 	svc	0x00000000
   210d0:	ea000007 	b	210f4 <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   210d4:	e51b3008 	ldr	r3, [fp, #-8]
   210d8:	e2833010 	add	r3, r3, #16
   210dc:	e1a00003 	mov	r0, r3
   210e0:	ebffff1c 	bl	20d58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   210e4:	e51b3008 	ldr	r3, [fp, #-8]
   210e8:	e2833024 	add	r3, r3, #36	@ 0x24
   210ec:	e1a00003 	mov	r0, r3
   210f0:	ebffff18 	bl	20d58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   210f4:	ebfffd22 	bl	20584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   210f8:	e3a03001 	mov	r3, #1
}
   210fc:	e1a00003 	mov	r0, r3
   21100:	e24bd004 	sub	sp, fp, #4
   21104:	e8bd8800 	pop	{fp, pc}

00021108 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   21108:	e92d4800 	push	{fp, lr}
   2110c:	e28db004 	add	fp, sp, #4
   21110:	e24dd020 	sub	sp, sp, #32
   21114:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   21118:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
   2111c:	e1a03002 	mov	r3, r2
   21120:	e54b301d 	strb	r3, [fp, #-29]	@ 0xffffffe3
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   21124:	e3a03000 	mov	r3, #0
   21128:	e50b3008 	str	r3, [fp, #-8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   2112c:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21130:	e3530000 	cmp	r3, #0
   21134:	0a000021 	beq	211c0 <xQueueGenericCreate+0xb8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   21138:	e3a0004c 	mov	r0, #76	@ 0x4c
   2113c:	eb000b40 	bl	23e44 <pvPortMalloc>
   21140:	e50b000c 	str	r0, [fp, #-12]
		if( pxNewQueue != NULL )
   21144:	e51b300c 	ldr	r3, [fp, #-12]
   21148:	e3530000 	cmp	r3, #0
   2114c:	0a00001b 	beq	211c0 <xQueueGenericCreate+0xb8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   21150:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21154:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   21158:	e0030392 	mul	r3, r2, r3
   2115c:	e2833001 	add	r3, r3, #1
   21160:	e50b3010 	str	r3, [fp, #-16]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   21164:	e51b0010 	ldr	r0, [fp, #-16]
   21168:	eb000b35 	bl	23e44 <pvPortMalloc>
   2116c:	e1a02000 	mov	r2, r0
   21170:	e51b300c 	ldr	r3, [fp, #-12]
   21174:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   21178:	e51b300c 	ldr	r3, [fp, #-12]
   2117c:	e5933000 	ldr	r3, [r3]
   21180:	e3530000 	cmp	r3, #0
   21184:	0a00000b 	beq	211b8 <xQueueGenericCreate+0xb0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   21188:	e51b300c 	ldr	r3, [fp, #-12]
   2118c:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   21190:	e583203c 	str	r2, [r3, #60]	@ 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   21194:	e51b300c 	ldr	r3, [fp, #-12]
   21198:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   2119c:	e5832040 	str	r2, [r3, #64]	@ 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   211a0:	e3a01001 	mov	r1, #1
   211a4:	e51b000c 	ldr	r0, [fp, #-12]
   211a8:	ebffff91 	bl	20ff4 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   211ac:	e51b300c 	ldr	r3, [fp, #-12]
   211b0:	e50b3008 	str	r3, [fp, #-8]
   211b4:	ea000001 	b	211c0 <xQueueGenericCreate+0xb8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   211b8:	e51b000c 	ldr	r0, [fp, #-12]
   211bc:	eb000b92 	bl	2400c <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   211c0:	e51b3008 	ldr	r3, [fp, #-8]
}
   211c4:	e1a00003 	mov	r0, r3
   211c8:	e24bd004 	sub	sp, fp, #4
   211cc:	e8bd8800 	pop	{fp, pc}

000211d0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   211d0:	e92d4800 	push	{fp, lr}
   211d4:	e28db004 	add	fp, sp, #4
   211d8:	e24dd020 	sub	sp, sp, #32
   211dc:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   211e0:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
   211e4:	e50b2020 	str	r2, [fp, #-32]	@ 0xffffffe0
   211e8:	e50b3024 	str	r3, [fp, #-36]	@ 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   211ec:	e3a03000 	mov	r3, #0
   211f0:	e50b3008 	str	r3, [fp, #-8]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   211f4:	ebfffcd1 	bl	20540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   211f8:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   211fc:	e5932038 	ldr	r2, [r3, #56]	@ 0x38
   21200:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21204:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   21208:	e1520003 	cmp	r2, r3
   2120c:	2a000012 	bcs	2125c <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   21210:	e51b2024 	ldr	r2, [fp, #-36]	@ 0xffffffdc
   21214:	e51b101c 	ldr	r1, [fp, #-28]	@ 0xffffffe4
   21218:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   2121c:	eb00016a 	bl	217cc <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21220:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21224:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
   21228:	e3530000 	cmp	r3, #0
   2122c:	0a000007 	beq	21250 <xQueueGenericSend+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   21230:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21234:	e2833024 	add	r3, r3, #36	@ 0x24
   21238:	e1a00003 	mov	r0, r3
   2123c:	eb000700 	bl	22e44 <xTaskRemoveFromEventList>
   21240:	e1a03000 	mov	r3, r0
   21244:	e3530001 	cmp	r3, #1
   21248:	1a000000 	bne	21250 <xQueueGenericSend+0x80>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   2124c:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   21250:	ebfffccb 	bl	20584 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   21254:	e3a03001 	mov	r3, #1
   21258:	ea000042 	b	21368 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   2125c:	e51b3020 	ldr	r3, [fp, #-32]	@ 0xffffffe0
   21260:	e3530000 	cmp	r3, #0
   21264:	1a000002 	bne	21274 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   21268:	ebfffcc5 	bl	20584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   2126c:	e3a03000 	mov	r3, #0
   21270:	ea00003c 	b	21368 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
   21274:	e51b3008 	ldr	r3, [fp, #-8]
   21278:	e3530000 	cmp	r3, #0
   2127c:	1a000004 	bne	21294 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   21280:	e24b3010 	sub	r3, fp, #16
   21284:	e1a00003 	mov	r0, r3
   21288:	eb000733 	bl	22f5c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   2128c:	e3a03001 	mov	r3, #1
   21290:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   21294:	ebfffcba 	bl	20584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   21298:	eb000513 	bl	226ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   2129c:	ebfffca7 	bl	20540 <vPortEnterCritical>
   212a0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   212a4:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   212a8:	e3730001 	cmn	r3, #1
   212ac:	1a000002 	bne	212bc <xQueueGenericSend+0xec>
   212b0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   212b4:	e3a02000 	mov	r2, #0
   212b8:	e5832044 	str	r2, [r3, #68]	@ 0x44
   212bc:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   212c0:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   212c4:	e3730001 	cmn	r3, #1
   212c8:	1a000002 	bne	212d8 <xQueueGenericSend+0x108>
   212cc:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   212d0:	e3a02000 	mov	r2, #0
   212d4:	e5832048 	str	r2, [r3, #72]	@ 0x48
   212d8:	ebfffca9 	bl	20584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   212dc:	e24b2020 	sub	r2, fp, #32
   212e0:	e24b3010 	sub	r3, fp, #16
   212e4:	e1a01002 	mov	r1, r2
   212e8:	e1a00003 	mov	r0, r3
   212ec:	eb00072c 	bl	22fa4 <xTaskCheckForTimeOut>
   212f0:	e1a03000 	mov	r3, r0
   212f4:	e3530000 	cmp	r3, #0
   212f8:	1a000016 	bne	21358 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   212fc:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   21300:	eb000202 	bl	21b10 <prvIsQueueFull>
   21304:	e1a03000 	mov	r3, r0
   21308:	e3530000 	cmp	r3, #0
   2130c:	0a00000d 	beq	21348 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   21310:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21314:	e2833010 	add	r3, r3, #16
   21318:	e51b2020 	ldr	r2, [fp, #-32]	@ 0xffffffe0
   2131c:	e1a01002 	mov	r1, r2
   21320:	e1a00003 	mov	r0, r3
   21324:	eb00069f 	bl	22da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   21328:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   2132c:	eb000195 	bl	21988 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   21330:	eb0004f9 	bl	2271c <xTaskResumeAll>
   21334:	e1a03000 	mov	r3, r0
   21338:	e3530000 	cmp	r3, #0
   2133c:	1affffac 	bne	211f4 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
   21340:	ef000000 	svc	0x00000000
   21344:	eaffffaa 	b	211f4 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   21348:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   2134c:	eb00018d 	bl	21988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   21350:	eb0004f1 	bl	2271c <xTaskResumeAll>
   21354:	eaffffa6 	b	211f4 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   21358:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   2135c:	eb000189 	bl	21988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   21360:	eb0004ed 	bl	2271c <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   21364:	e3a03000 	mov	r3, #0
		}
	}
}
   21368:	e1a00003 	mov	r0, r3
   2136c:	e24bd004 	sub	sp, fp, #4
   21370:	e8bd8800 	pop	{fp, pc}

00021374 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   21374:	e92d4800 	push	{fp, lr}
   21378:	e28db004 	add	fp, sp, #4
   2137c:	e24dd018 	sub	sp, sp, #24
   21380:	e50b0010 	str	r0, [fp, #-16]
   21384:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
   21388:	e50b2018 	str	r2, [fp, #-24]	@ 0xffffffe8
   2138c:	e50b301c 	str	r3, [fp, #-28]	@ 0xffffffe4
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   21390:	e3a03000 	mov	r3, #0
   21394:	e50b300c 	str	r3, [fp, #-12]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   21398:	e51b3010 	ldr	r3, [fp, #-16]
   2139c:	e5932038 	ldr	r2, [r3, #56]	@ 0x38
   213a0:	e51b3010 	ldr	r3, [fp, #-16]
   213a4:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   213a8:	e1520003 	cmp	r2, r3
   213ac:	2a000021 	bcs	21438 <xQueueGenericSendFromISR+0xc4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   213b0:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   213b4:	e51b1014 	ldr	r1, [fp, #-20]	@ 0xffffffec
   213b8:	e51b0010 	ldr	r0, [fp, #-16]
   213bc:	eb000102 	bl	217cc <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   213c0:	e51b3010 	ldr	r3, [fp, #-16]
   213c4:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   213c8:	e3730001 	cmn	r3, #1
   213cc:	1a000011 	bne	21418 <xQueueGenericSendFromISR+0xa4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   213d0:	e51b3010 	ldr	r3, [fp, #-16]
   213d4:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
   213d8:	e3530000 	cmp	r3, #0
   213dc:	0a000012 	beq	2142c <xQueueGenericSendFromISR+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   213e0:	e51b3010 	ldr	r3, [fp, #-16]
   213e4:	e2833024 	add	r3, r3, #36	@ 0x24
   213e8:	e1a00003 	mov	r0, r3
   213ec:	eb000694 	bl	22e44 <xTaskRemoveFromEventList>
   213f0:	e1a03000 	mov	r3, r0
   213f4:	e3530000 	cmp	r3, #0
   213f8:	0a00000b 	beq	2142c <xQueueGenericSendFromISR+0xb8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   213fc:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21400:	e3530000 	cmp	r3, #0
   21404:	0a000008 	beq	2142c <xQueueGenericSendFromISR+0xb8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   21408:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   2140c:	e3a02001 	mov	r2, #1
   21410:	e5832000 	str	r2, [r3]
   21414:	ea000004 	b	2142c <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   21418:	e51b3010 	ldr	r3, [fp, #-16]
   2141c:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   21420:	e2832001 	add	r2, r3, #1
   21424:	e51b3010 	ldr	r3, [fp, #-16]
   21428:	e5832048 	str	r2, [r3, #72]	@ 0x48
			}

			xReturn = pdPASS;
   2142c:	e3a03001 	mov	r3, #1
   21430:	e50b3008 	str	r3, [fp, #-8]
   21434:	ea000001 	b	21440 <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   21438:	e3a03000 	mov	r3, #0
   2143c:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   21440:	e51b3008 	ldr	r3, [fp, #-8]
}
   21444:	e1a00003 	mov	r0, r3
   21448:	e24bd004 	sub	sp, fp, #4
   2144c:	e8bd8800 	pop	{fp, pc}

00021450 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   21450:	e92d4800 	push	{fp, lr}
   21454:	e28db004 	add	fp, sp, #4
   21458:	e24dd020 	sub	sp, sp, #32
   2145c:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   21460:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
   21464:	e50b2020 	str	r2, [fp, #-32]	@ 0xffffffe0
   21468:	e50b3024 	str	r3, [fp, #-36]	@ 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   2146c:	e3a03000 	mov	r3, #0
   21470:	e50b3008 	str	r3, [fp, #-8]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   21474:	ebfffc31 	bl	20540 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   21478:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   2147c:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21480:	e3530000 	cmp	r3, #0
   21484:	0a00002c 	beq	2153c <xQueueGenericReceive+0xec>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   21488:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   2148c:	e593300c 	ldr	r3, [r3, #12]
   21490:	e50b300c 	str	r3, [fp, #-12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   21494:	e51b101c 	ldr	r1, [fp, #-28]	@ 0xffffffe4
   21498:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   2149c:	eb000115 	bl	218f8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   214a0:	e51b3024 	ldr	r3, [fp, #-36]	@ 0xffffffdc
   214a4:	e3530000 	cmp	r3, #0
   214a8:	1a000011 	bne	214f4 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   214ac:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   214b0:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   214b4:	e2432001 	sub	r2, r3, #1
   214b8:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   214bc:	e5832038 	str	r2, [r3, #56]	@ 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   214c0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   214c4:	e5933010 	ldr	r3, [r3, #16]
   214c8:	e3530000 	cmp	r3, #0
   214cc:	0a000017 	beq	21530 <xQueueGenericReceive+0xe0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   214d0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   214d4:	e2833010 	add	r3, r3, #16
   214d8:	e1a00003 	mov	r0, r3
   214dc:	eb000658 	bl	22e44 <xTaskRemoveFromEventList>
   214e0:	e1a03000 	mov	r3, r0
   214e4:	e3530001 	cmp	r3, #1
   214e8:	1a000010 	bne	21530 <xQueueGenericReceive+0xe0>
						{
							portYIELD_WITHIN_API();
   214ec:	ef000000 	svc	0x00000000
   214f0:	ea00000e 	b	21530 <xQueueGenericReceive+0xe0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   214f4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   214f8:	e51b200c 	ldr	r2, [fp, #-12]
   214fc:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   21500:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21504:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
   21508:	e3530000 	cmp	r3, #0
   2150c:	0a000007 	beq	21530 <xQueueGenericReceive+0xe0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   21510:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21514:	e2833024 	add	r3, r3, #36	@ 0x24
   21518:	e1a00003 	mov	r0, r3
   2151c:	eb000648 	bl	22e44 <xTaskRemoveFromEventList>
   21520:	e1a03000 	mov	r3, r0
   21524:	e3530000 	cmp	r3, #0
   21528:	0a000000 	beq	21530 <xQueueGenericReceive+0xe0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   2152c:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   21530:	ebfffc13 	bl	20584 <vPortExitCritical>
				return pdPASS;
   21534:	e3a03001 	mov	r3, #1
   21538:	ea000042 	b	21648 <xQueueGenericReceive+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   2153c:	e51b3020 	ldr	r3, [fp, #-32]	@ 0xffffffe0
   21540:	e3530000 	cmp	r3, #0
   21544:	1a000002 	bne	21554 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   21548:	ebfffc0d 	bl	20584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   2154c:	e3a03000 	mov	r3, #0
   21550:	ea00003c 	b	21648 <xQueueGenericReceive+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
   21554:	e51b3008 	ldr	r3, [fp, #-8]
   21558:	e3530000 	cmp	r3, #0
   2155c:	1a000004 	bne	21574 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   21560:	e24b3014 	sub	r3, fp, #20
   21564:	e1a00003 	mov	r0, r3
   21568:	eb00067b 	bl	22f5c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   2156c:	e3a03001 	mov	r3, #1
   21570:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   21574:	ebfffc02 	bl	20584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   21578:	eb00045b 	bl	226ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   2157c:	ebfffbef 	bl	20540 <vPortEnterCritical>
   21580:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21584:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   21588:	e3730001 	cmn	r3, #1
   2158c:	1a000002 	bne	2159c <xQueueGenericReceive+0x14c>
   21590:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21594:	e3a02000 	mov	r2, #0
   21598:	e5832044 	str	r2, [r3, #68]	@ 0x44
   2159c:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   215a0:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   215a4:	e3730001 	cmn	r3, #1
   215a8:	1a000002 	bne	215b8 <xQueueGenericReceive+0x168>
   215ac:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   215b0:	e3a02000 	mov	r2, #0
   215b4:	e5832048 	str	r2, [r3, #72]	@ 0x48
   215b8:	ebfffbf1 	bl	20584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   215bc:	e24b2020 	sub	r2, fp, #32
   215c0:	e24b3014 	sub	r3, fp, #20
   215c4:	e1a01002 	mov	r1, r2
   215c8:	e1a00003 	mov	r0, r3
   215cc:	eb000674 	bl	22fa4 <xTaskCheckForTimeOut>
   215d0:	e1a03000 	mov	r3, r0
   215d4:	e3530000 	cmp	r3, #0
   215d8:	1a000016 	bne	21638 <xQueueGenericReceive+0x1e8>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   215dc:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   215e0:	eb000129 	bl	21a8c <prvIsQueueEmpty>
   215e4:	e1a03000 	mov	r3, r0
   215e8:	e3530000 	cmp	r3, #0
   215ec:	0a00000d 	beq	21628 <xQueueGenericReceive+0x1d8>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   215f0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   215f4:	e2833024 	add	r3, r3, #36	@ 0x24
   215f8:	e51b2020 	ldr	r2, [fp, #-32]	@ 0xffffffe0
   215fc:	e1a01002 	mov	r1, r2
   21600:	e1a00003 	mov	r0, r3
   21604:	eb0005e7 	bl	22da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   21608:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   2160c:	eb0000dd 	bl	21988 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   21610:	eb000441 	bl	2271c <xTaskResumeAll>
   21614:	e1a03000 	mov	r3, r0
   21618:	e3530000 	cmp	r3, #0
   2161c:	1affff94 	bne	21474 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
   21620:	ef000000 	svc	0x00000000
   21624:	eaffff92 	b	21474 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   21628:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   2162c:	eb0000d5 	bl	21988 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   21630:	eb000439 	bl	2271c <xTaskResumeAll>
   21634:	eaffff8e 	b	21474 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   21638:	e51b0018 	ldr	r0, [fp, #-24]	@ 0xffffffe8
   2163c:	eb0000d1 	bl	21988 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   21640:	eb000435 	bl	2271c <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   21644:	e3a03000 	mov	r3, #0
		}
	}
}
   21648:	e1a00003 	mov	r0, r3
   2164c:	e24bd004 	sub	sp, fp, #4
   21650:	e8bd8800 	pop	{fp, pc}

00021654 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   21654:	e92d4800 	push	{fp, lr}
   21658:	e28db004 	add	fp, sp, #4
   2165c:	e24dd018 	sub	sp, sp, #24
   21660:	e50b0010 	str	r0, [fp, #-16]
   21664:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
   21668:	e50b2018 	str	r2, [fp, #-24]	@ 0xffffffe8
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   2166c:	e3a03000 	mov	r3, #0
   21670:	e50b300c 	str	r3, [fp, #-12]
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   21674:	e51b3010 	ldr	r3, [fp, #-16]
   21678:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   2167c:	e3530000 	cmp	r3, #0
   21680:	0a000025 	beq	2171c <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   21684:	e51b1014 	ldr	r1, [fp, #-20]	@ 0xffffffec
   21688:	e51b0010 	ldr	r0, [fp, #-16]
   2168c:	eb000099 	bl	218f8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   21690:	e51b3010 	ldr	r3, [fp, #-16]
   21694:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21698:	e2432001 	sub	r2, r3, #1
   2169c:	e51b3010 	ldr	r3, [fp, #-16]
   216a0:	e5832038 	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   216a4:	e51b3010 	ldr	r3, [fp, #-16]
   216a8:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   216ac:	e3730001 	cmn	r3, #1
   216b0:	1a000011 	bne	216fc <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   216b4:	e51b3010 	ldr	r3, [fp, #-16]
   216b8:	e5933010 	ldr	r3, [r3, #16]
   216bc:	e3530000 	cmp	r3, #0
   216c0:	0a000012 	beq	21710 <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   216c4:	e51b3010 	ldr	r3, [fp, #-16]
   216c8:	e2833010 	add	r3, r3, #16
   216cc:	e1a00003 	mov	r0, r3
   216d0:	eb0005db 	bl	22e44 <xTaskRemoveFromEventList>
   216d4:	e1a03000 	mov	r3, r0
   216d8:	e3530000 	cmp	r3, #0
   216dc:	0a00000b 	beq	21710 <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   216e0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   216e4:	e3530000 	cmp	r3, #0
   216e8:	0a000008 	beq	21710 <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   216ec:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   216f0:	e3a02001 	mov	r2, #1
   216f4:	e5832000 	str	r2, [r3]
   216f8:	ea000004 	b	21710 <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   216fc:	e51b3010 	ldr	r3, [fp, #-16]
   21700:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   21704:	e2832001 	add	r2, r3, #1
   21708:	e51b3010 	ldr	r3, [fp, #-16]
   2170c:	e5832044 	str	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
   21710:	e3a03001 	mov	r3, #1
   21714:	e50b3008 	str	r3, [fp, #-8]
   21718:	ea000001 	b	21724 <xQueueReceiveFromISR+0xd0>
		}
		else
		{
			xReturn = pdFAIL;
   2171c:	e3a03000 	mov	r3, #0
   21720:	e50b3008 	str	r3, [fp, #-8]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   21724:	e51b3008 	ldr	r3, [fp, #-8]
}
   21728:	e1a00003 	mov	r0, r3
   2172c:	e24bd004 	sub	sp, fp, #4
   21730:	e8bd8800 	pop	{fp, pc}

00021734 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   21734:	e92d4800 	push	{fp, lr}
   21738:	e28db004 	add	fp, sp, #4
   2173c:	e24dd010 	sub	sp, sp, #16
   21740:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   21744:	ebfffb7d 	bl	20540 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   21748:	e51b3010 	ldr	r3, [fp, #-16]
   2174c:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21750:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21754:	ebfffb8a 	bl	20584 <vPortExitCritical>

	return uxReturn;
   21758:	e51b3008 	ldr	r3, [fp, #-8]
}
   2175c:	e1a00003 	mov	r0, r3
   21760:	e24bd004 	sub	sp, fp, #4
   21764:	e8bd8800 	pop	{fp, pc}

00021768 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   21768:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   2176c:	e28db000 	add	fp, sp, #0
   21770:	e24dd014 	sub	sp, sp, #20
   21774:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   21778:	e51b3010 	ldr	r3, [fp, #-16]
   2177c:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21780:	e50b3008 	str	r3, [fp, #-8]

	return uxReturn;
   21784:	e51b3008 	ldr	r3, [fp, #-8]
}
   21788:	e1a00003 	mov	r0, r3
   2178c:	e28bd000 	add	sp, fp, #0
   21790:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   21794:	e12fff1e 	bx	lr

00021798 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   21798:	e92d4800 	push	{fp, lr}
   2179c:	e28db004 	add	fp, sp, #4
   217a0:	e24dd008 	sub	sp, sp, #8
   217a4:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   217a8:	e51b3008 	ldr	r3, [fp, #-8]
   217ac:	e5933000 	ldr	r3, [r3]
   217b0:	e1a00003 	mov	r0, r3
   217b4:	eb000a14 	bl	2400c <vPortFree>
	vPortFree( pxQueue );
   217b8:	e51b0008 	ldr	r0, [fp, #-8]
   217bc:	eb000a12 	bl	2400c <vPortFree>
}
   217c0:	e320f000 	nop	{0}
   217c4:	e24bd004 	sub	sp, fp, #4
   217c8:	e8bd8800 	pop	{fp, pc}

000217cc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   217cc:	e92d4800 	push	{fp, lr}
   217d0:	e28db004 	add	fp, sp, #4
   217d4:	e24dd010 	sub	sp, sp, #16
   217d8:	e50b0008 	str	r0, [fp, #-8]
   217dc:	e50b100c 	str	r1, [fp, #-12]
   217e0:	e50b2010 	str	r2, [fp, #-16]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   217e4:	e51b3008 	ldr	r3, [fp, #-8]
   217e8:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   217ec:	e3530000 	cmp	r3, #0
   217f0:	0a000038 	beq	218d8 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   217f4:	e51b3010 	ldr	r3, [fp, #-16]
   217f8:	e3530000 	cmp	r3, #0
   217fc:	1a000018 	bne	21864 <prvCopyDataToQueue+0x98>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   21800:	e51b3008 	ldr	r3, [fp, #-8]
   21804:	e5930008 	ldr	r0, [r3, #8]
   21808:	e51b3008 	ldr	r3, [fp, #-8]
   2180c:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   21810:	e1a02003 	mov	r2, r3
   21814:	e51b100c 	ldr	r1, [fp, #-12]
   21818:	eb000ba7 	bl	246bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   2181c:	e51b3008 	ldr	r3, [fp, #-8]
   21820:	e5932008 	ldr	r2, [r3, #8]
   21824:	e51b3008 	ldr	r3, [fp, #-8]
   21828:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   2182c:	e0822003 	add	r2, r2, r3
   21830:	e51b3008 	ldr	r3, [fp, #-8]
   21834:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   21838:	e51b3008 	ldr	r3, [fp, #-8]
   2183c:	e5932008 	ldr	r2, [r3, #8]
   21840:	e51b3008 	ldr	r3, [fp, #-8]
   21844:	e5933004 	ldr	r3, [r3, #4]
   21848:	e1520003 	cmp	r2, r3
   2184c:	3a000021 	bcc	218d8 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   21850:	e51b3008 	ldr	r3, [fp, #-8]
   21854:	e5932000 	ldr	r2, [r3]
   21858:	e51b3008 	ldr	r3, [fp, #-8]
   2185c:	e5832008 	str	r2, [r3, #8]
   21860:	ea00001c 	b	218d8 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   21864:	e51b3008 	ldr	r3, [fp, #-8]
   21868:	e593000c 	ldr	r0, [r3, #12]
   2186c:	e51b3008 	ldr	r3, [fp, #-8]
   21870:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   21874:	e1a02003 	mov	r2, r3
   21878:	e51b100c 	ldr	r1, [fp, #-12]
   2187c:	eb000b8e 	bl	246bc <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   21880:	e51b3008 	ldr	r3, [fp, #-8]
   21884:	e593200c 	ldr	r2, [r3, #12]
   21888:	e51b3008 	ldr	r3, [fp, #-8]
   2188c:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   21890:	e2633000 	rsb	r3, r3, #0
   21894:	e0822003 	add	r2, r2, r3
   21898:	e51b3008 	ldr	r3, [fp, #-8]
   2189c:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   218a0:	e51b3008 	ldr	r3, [fp, #-8]
   218a4:	e593200c 	ldr	r2, [r3, #12]
   218a8:	e51b3008 	ldr	r3, [fp, #-8]
   218ac:	e5933000 	ldr	r3, [r3]
   218b0:	e1520003 	cmp	r2, r3
   218b4:	2a000007 	bcs	218d8 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   218b8:	e51b3008 	ldr	r3, [fp, #-8]
   218bc:	e5932004 	ldr	r2, [r3, #4]
   218c0:	e51b3008 	ldr	r3, [fp, #-8]
   218c4:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   218c8:	e2633000 	rsb	r3, r3, #0
   218cc:	e0822003 	add	r2, r2, r3
   218d0:	e51b3008 	ldr	r3, [fp, #-8]
   218d4:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   218d8:	e51b3008 	ldr	r3, [fp, #-8]
   218dc:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   218e0:	e2832001 	add	r2, r3, #1
   218e4:	e51b3008 	ldr	r3, [fp, #-8]
   218e8:	e5832038 	str	r2, [r3, #56]	@ 0x38
}
   218ec:	e320f000 	nop	{0}
   218f0:	e24bd004 	sub	sp, fp, #4
   218f4:	e8bd8800 	pop	{fp, pc}

000218f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   218f8:	e92d4800 	push	{fp, lr}
   218fc:	e28db004 	add	fp, sp, #4
   21900:	e24dd008 	sub	sp, sp, #8
   21904:	e50b0008 	str	r0, [fp, #-8]
   21908:	e50b100c 	str	r1, [fp, #-12]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   2190c:	e51b3008 	ldr	r3, [fp, #-8]
   21910:	e5933000 	ldr	r3, [r3]
   21914:	e3530000 	cmp	r3, #0
   21918:	0a000017 	beq	2197c <prvCopyDataFromQueue+0x84>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   2191c:	e51b3008 	ldr	r3, [fp, #-8]
   21920:	e593200c 	ldr	r2, [r3, #12]
   21924:	e51b3008 	ldr	r3, [fp, #-8]
   21928:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   2192c:	e0822003 	add	r2, r2, r3
   21930:	e51b3008 	ldr	r3, [fp, #-8]
   21934:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   21938:	e51b3008 	ldr	r3, [fp, #-8]
   2193c:	e593200c 	ldr	r2, [r3, #12]
   21940:	e51b3008 	ldr	r3, [fp, #-8]
   21944:	e5933004 	ldr	r3, [r3, #4]
   21948:	e1520003 	cmp	r2, r3
   2194c:	3a000003 	bcc	21960 <prvCopyDataFromQueue+0x68>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   21950:	e51b3008 	ldr	r3, [fp, #-8]
   21954:	e5932000 	ldr	r2, [r3]
   21958:	e51b3008 	ldr	r3, [fp, #-8]
   2195c:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   21960:	e51b3008 	ldr	r3, [fp, #-8]
   21964:	e593100c 	ldr	r1, [r3, #12]
   21968:	e51b3008 	ldr	r3, [fp, #-8]
   2196c:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   21970:	e1a02003 	mov	r2, r3
   21974:	e51b000c 	ldr	r0, [fp, #-12]
   21978:	eb000b4f 	bl	246bc <memcpy>
	}
}
   2197c:	e320f000 	nop	{0}
   21980:	e24bd004 	sub	sp, fp, #4
   21984:	e8bd8800 	pop	{fp, pc}

00021988 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   21988:	e92d4800 	push	{fp, lr}
   2198c:	e28db004 	add	fp, sp, #4
   21990:	e24dd008 	sub	sp, sp, #8
   21994:	e50b0008 	str	r0, [fp, #-8]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   21998:	ebfffae8 	bl	20540 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   2199c:	ea000010 	b	219e4 <prvUnlockQueue+0x5c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   219a0:	e51b3008 	ldr	r3, [fp, #-8]
   219a4:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
   219a8:	e3530000 	cmp	r3, #0
   219ac:	0a000011 	beq	219f8 <prvUnlockQueue+0x70>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   219b0:	e51b3008 	ldr	r3, [fp, #-8]
   219b4:	e2833024 	add	r3, r3, #36	@ 0x24
   219b8:	e1a00003 	mov	r0, r3
   219bc:	eb000520 	bl	22e44 <xTaskRemoveFromEventList>
   219c0:	e1a03000 	mov	r3, r0
   219c4:	e3530000 	cmp	r3, #0
   219c8:	0a000000 	beq	219d0 <prvUnlockQueue+0x48>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   219cc:	eb0005b1 	bl	23098 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   219d0:	e51b3008 	ldr	r3, [fp, #-8]
   219d4:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   219d8:	e2432001 	sub	r2, r3, #1
   219dc:	e51b3008 	ldr	r3, [fp, #-8]
   219e0:	e5832048 	str	r2, [r3, #72]	@ 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   219e4:	e51b3008 	ldr	r3, [fp, #-8]
   219e8:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   219ec:	e3530000 	cmp	r3, #0
   219f0:	caffffea 	bgt	219a0 <prvUnlockQueue+0x18>
   219f4:	ea000000 	b	219fc <prvUnlockQueue+0x74>
			}
			else
			{
				break;
   219f8:	e320f000 	nop	{0}
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   219fc:	e51b3008 	ldr	r3, [fp, #-8]
   21a00:	e3e02000 	mvn	r2, #0
   21a04:	e5832048 	str	r2, [r3, #72]	@ 0x48
	}
	taskEXIT_CRITICAL();
   21a08:	ebfffadd 	bl	20584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   21a0c:	ebfffacb 	bl	20540 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   21a10:	ea000010 	b	21a58 <prvUnlockQueue+0xd0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21a14:	e51b3008 	ldr	r3, [fp, #-8]
   21a18:	e5933010 	ldr	r3, [r3, #16]
   21a1c:	e3530000 	cmp	r3, #0
   21a20:	0a000011 	beq	21a6c <prvUnlockQueue+0xe4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21a24:	e51b3008 	ldr	r3, [fp, #-8]
   21a28:	e2833010 	add	r3, r3, #16
   21a2c:	e1a00003 	mov	r0, r3
   21a30:	eb000503 	bl	22e44 <xTaskRemoveFromEventList>
   21a34:	e1a03000 	mov	r3, r0
   21a38:	e3530000 	cmp	r3, #0
   21a3c:	0a000000 	beq	21a44 <prvUnlockQueue+0xbc>
				{
					vTaskMissedYield();
   21a40:	eb000594 	bl	23098 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   21a44:	e51b3008 	ldr	r3, [fp, #-8]
   21a48:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   21a4c:	e2432001 	sub	r2, r3, #1
   21a50:	e51b3008 	ldr	r3, [fp, #-8]
   21a54:	e5832044 	str	r2, [r3, #68]	@ 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   21a58:	e51b3008 	ldr	r3, [fp, #-8]
   21a5c:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   21a60:	e3530000 	cmp	r3, #0
   21a64:	caffffea 	bgt	21a14 <prvUnlockQueue+0x8c>
   21a68:	ea000000 	b	21a70 <prvUnlockQueue+0xe8>
			}
			else
			{
				break;
   21a6c:	e320f000 	nop	{0}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   21a70:	e51b3008 	ldr	r3, [fp, #-8]
   21a74:	e3e02000 	mvn	r2, #0
   21a78:	e5832044 	str	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
   21a7c:	ebfffac0 	bl	20584 <vPortExitCritical>
}
   21a80:	e320f000 	nop	{0}
   21a84:	e24bd004 	sub	sp, fp, #4
   21a88:	e8bd8800 	pop	{fp, pc}

00021a8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   21a8c:	e92d4800 	push	{fp, lr}
   21a90:	e28db004 	add	fp, sp, #4
   21a94:	e24dd010 	sub	sp, sp, #16
   21a98:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   21a9c:	ebfffaa7 	bl	20540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   21aa0:	e51b3010 	ldr	r3, [fp, #-16]
   21aa4:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21aa8:	e3530000 	cmp	r3, #0
   21aac:	03a03001 	moveq	r3, #1
   21ab0:	13a03000 	movne	r3, #0
   21ab4:	e6ef3073 	uxtb	r3, r3
   21ab8:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21abc:	ebfffab0 	bl	20584 <vPortExitCritical>

	return xReturn;
   21ac0:	e51b3008 	ldr	r3, [fp, #-8]
}
   21ac4:	e1a00003 	mov	r0, r3
   21ac8:	e24bd004 	sub	sp, fp, #4
   21acc:	e8bd8800 	pop	{fp, pc}

00021ad0 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   21ad0:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   21ad4:	e28db000 	add	fp, sp, #0
   21ad8:	e24dd014 	sub	sp, sp, #20
   21adc:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   21ae0:	e51b3010 	ldr	r3, [fp, #-16]
   21ae4:	e5933038 	ldr	r3, [r3, #56]	@ 0x38
   21ae8:	e3530000 	cmp	r3, #0
   21aec:	03a03001 	moveq	r3, #1
   21af0:	13a03000 	movne	r3, #0
   21af4:	e6ef3073 	uxtb	r3, r3
   21af8:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   21afc:	e51b3008 	ldr	r3, [fp, #-8]
}
   21b00:	e1a00003 	mov	r0, r3
   21b04:	e28bd000 	add	sp, fp, #0
   21b08:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   21b0c:	e12fff1e 	bx	lr

00021b10 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   21b10:	e92d4800 	push	{fp, lr}
   21b14:	e28db004 	add	fp, sp, #4
   21b18:	e24dd010 	sub	sp, sp, #16
   21b1c:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   21b20:	ebfffa86 	bl	20540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   21b24:	e51b3010 	ldr	r3, [fp, #-16]
   21b28:	e5932038 	ldr	r2, [r3, #56]	@ 0x38
   21b2c:	e51b3010 	ldr	r3, [fp, #-16]
   21b30:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   21b34:	e1520003 	cmp	r2, r3
   21b38:	03a03001 	moveq	r3, #1
   21b3c:	13a03000 	movne	r3, #0
   21b40:	e6ef3073 	uxtb	r3, r3
   21b44:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21b48:	ebfffa8d 	bl	20584 <vPortExitCritical>

	return xReturn;
   21b4c:	e51b3008 	ldr	r3, [fp, #-8]
}
   21b50:	e1a00003 	mov	r0, r3
   21b54:	e24bd004 	sub	sp, fp, #4
   21b58:	e8bd8800 	pop	{fp, pc}

00021b5c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   21b5c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   21b60:	e28db000 	add	fp, sp, #0
   21b64:	e24dd014 	sub	sp, sp, #20
   21b68:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   21b6c:	e51b3010 	ldr	r3, [fp, #-16]
   21b70:	e5932038 	ldr	r2, [r3, #56]	@ 0x38
   21b74:	e51b3010 	ldr	r3, [fp, #-16]
   21b78:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   21b7c:	e1520003 	cmp	r2, r3
   21b80:	03a03001 	moveq	r3, #1
   21b84:	13a03000 	movne	r3, #0
   21b88:	e6ef3073 	uxtb	r3, r3
   21b8c:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   21b90:	e51b3008 	ldr	r3, [fp, #-8]
}
   21b94:	e1a00003 	mov	r0, r3
   21b98:	e28bd000 	add	sp, fp, #0
   21b9c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   21ba0:	e12fff1e 	bx	lr

00021ba4 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   21ba4:	e92d4800 	push	{fp, lr}
   21ba8:	e28db004 	add	fp, sp, #4
   21bac:	e24dd028 	sub	sp, sp, #40	@ 0x28
   21bb0:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   21bb4:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
   21bb8:	e50b3024 	str	r3, [fp, #-36]	@ 0xffffffdc
   21bbc:	e1a03002 	mov	r3, r2
   21bc0:	e14b31be 	strh	r3, [fp, #-30]	@ 0xffffffe2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   21bc4:	e15b31be 	ldrh	r3, [fp, #-30]	@ 0xffffffe2
   21bc8:	e59b100c 	ldr	r1, [fp, #12]
   21bcc:	e1a00003 	mov	r0, r3
   21bd0:	eb000603 	bl	233e4 <prvAllocateTCBAndStack>
   21bd4:	e50b000c 	str	r0, [fp, #-12]

	if( pxNewTCB != NULL )
   21bd8:	e51b300c 	ldr	r3, [fp, #-12]
   21bdc:	e3530000 	cmp	r3, #0
   21be0:	0a000067 	beq	21d84 <xTaskGenericCreate+0x1e0>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   21be4:	e51b300c 	ldr	r3, [fp, #-12]
   21be8:	e5932030 	ldr	r2, [r3, #48]	@ 0x30
   21bec:	e15b31be 	ldrh	r3, [fp, #-30]	@ 0xffffffe2
   21bf0:	e2433107 	sub	r3, r3, #-1073741823	@ 0xc0000001
   21bf4:	e1a03103 	lsl	r3, r3, #2
   21bf8:	e0823003 	add	r3, r2, r3
   21bfc:	e50b3010 	str	r3, [fp, #-16]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   21c00:	e51b3010 	ldr	r3, [fp, #-16]
   21c04:	e3c33007 	bic	r3, r3, #7
   21c08:	e50b3010 	str	r3, [fp, #-16]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   21c0c:	e15b31be 	ldrh	r3, [fp, #-30]	@ 0xffffffe2
   21c10:	e58d3000 	str	r3, [sp]
   21c14:	e59b3010 	ldr	r3, [fp, #16]
   21c18:	e59b2004 	ldr	r2, [fp, #4]
   21c1c:	e51b101c 	ldr	r1, [fp, #-28]	@ 0xffffffe4
   21c20:	e51b000c 	ldr	r0, [fp, #-12]
   21c24:	eb000531 	bl	230f0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   21c28:	e51b2024 	ldr	r2, [fp, #-36]	@ 0xffffffdc
   21c2c:	e51b1018 	ldr	r1, [fp, #-24]	@ 0xffffffe8
   21c30:	e51b0010 	ldr	r0, [fp, #-16]
   21c34:	ebfff8f1 	bl	20000 <pxPortInitialiseStack>
   21c38:	e1a02000 	mov	r2, r0
   21c3c:	e51b300c 	ldr	r3, [fp, #-12]
   21c40:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   21c44:	e59b3008 	ldr	r3, [fp, #8]
   21c48:	e3530000 	cmp	r3, #0
   21c4c:	0a000002 	beq	21c5c <xTaskGenericCreate+0xb8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   21c50:	e59b3008 	ldr	r3, [fp, #8]
   21c54:	e51b200c 	ldr	r2, [fp, #-12]
   21c58:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   21c5c:	ebfffa37 	bl	20540 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   21c60:	e59f316c 	ldr	r3, [pc, #364]	@ 21dd4 <xTaskGenericCreate+0x230>
   21c64:	e5933000 	ldr	r3, [r3]
   21c68:	e2833001 	add	r3, r3, #1
   21c6c:	e59f2160 	ldr	r2, [pc, #352]	@ 21dd4 <xTaskGenericCreate+0x230>
   21c70:	e5823000 	str	r3, [r2]
			if( pxCurrentTCB == NULL )
   21c74:	e59f315c 	ldr	r3, [pc, #348]	@ 21dd8 <xTaskGenericCreate+0x234>
   21c78:	e5933000 	ldr	r3, [r3]
   21c7c:	e3530000 	cmp	r3, #0
   21c80:	1a000008 	bne	21ca8 <xTaskGenericCreate+0x104>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   21c84:	e59f214c 	ldr	r2, [pc, #332]	@ 21dd8 <xTaskGenericCreate+0x234>
   21c88:	e51b300c 	ldr	r3, [fp, #-12]
   21c8c:	e5823000 	str	r3, [r2]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   21c90:	e59f313c 	ldr	r3, [pc, #316]	@ 21dd4 <xTaskGenericCreate+0x230>
   21c94:	e5933000 	ldr	r3, [r3]
   21c98:	e3530001 	cmp	r3, #1
   21c9c:	1a00000e 	bne	21cdc <xTaskGenericCreate+0x138>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   21ca0:	eb000542 	bl	231b0 <prvInitialiseTaskLists>
   21ca4:	ea00000c 	b	21cdc <xTaskGenericCreate+0x138>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   21ca8:	e59f312c 	ldr	r3, [pc, #300]	@ 21ddc <xTaskGenericCreate+0x238>
   21cac:	e5933000 	ldr	r3, [r3]
   21cb0:	e3530000 	cmp	r3, #0
   21cb4:	1a000008 	bne	21cdc <xTaskGenericCreate+0x138>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   21cb8:	e59f3118 	ldr	r3, [pc, #280]	@ 21dd8 <xTaskGenericCreate+0x234>
   21cbc:	e5933000 	ldr	r3, [r3]
   21cc0:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   21cc4:	e59b2004 	ldr	r2, [fp, #4]
   21cc8:	e1520003 	cmp	r2, r3
   21ccc:	3a000002 	bcc	21cdc <xTaskGenericCreate+0x138>
					{
						pxCurrentTCB = pxNewTCB;
   21cd0:	e59f2100 	ldr	r2, [pc, #256]	@ 21dd8 <xTaskGenericCreate+0x234>
   21cd4:	e51b300c 	ldr	r3, [fp, #-12]
   21cd8:	e5823000 	str	r3, [r2]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   21cdc:	e51b300c 	ldr	r3, [fp, #-12]
   21ce0:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   21ce4:	e59f30f4 	ldr	r3, [pc, #244]	@ 21de0 <xTaskGenericCreate+0x23c>
   21ce8:	e5933000 	ldr	r3, [r3]
   21cec:	e1520003 	cmp	r2, r3
   21cf0:	9a000003 	bls	21d04 <xTaskGenericCreate+0x160>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   21cf4:	e51b300c 	ldr	r3, [fp, #-12]
   21cf8:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   21cfc:	e59f20dc 	ldr	r2, [pc, #220]	@ 21de0 <xTaskGenericCreate+0x23c>
   21d00:	e5823000 	str	r3, [r2]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   21d04:	e59f30d8 	ldr	r3, [pc, #216]	@ 21de4 <xTaskGenericCreate+0x240>
   21d08:	e5933000 	ldr	r3, [r3]
   21d0c:	e2833001 	add	r3, r3, #1
   21d10:	e59f20cc 	ldr	r2, [pc, #204]	@ 21de4 <xTaskGenericCreate+0x240>
   21d14:	e5823000 	str	r3, [r2]

			prvAddTaskToReadyQueue( pxNewTCB );
   21d18:	e51b300c 	ldr	r3, [fp, #-12]
   21d1c:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   21d20:	e59f30c0 	ldr	r3, [pc, #192]	@ 21de8 <xTaskGenericCreate+0x244>
   21d24:	e5933000 	ldr	r3, [r3]
   21d28:	e1520003 	cmp	r2, r3
   21d2c:	9a000003 	bls	21d40 <xTaskGenericCreate+0x19c>
   21d30:	e51b300c 	ldr	r3, [fp, #-12]
   21d34:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   21d38:	e59f20a8 	ldr	r2, [pc, #168]	@ 21de8 <xTaskGenericCreate+0x244>
   21d3c:	e5823000 	str	r3, [r2]
   21d40:	e51b300c 	ldr	r3, [fp, #-12]
   21d44:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   21d48:	e1a03002 	mov	r3, r2
   21d4c:	e1a03103 	lsl	r3, r3, #2
   21d50:	e0833002 	add	r3, r3, r2
   21d54:	e1a03103 	lsl	r3, r3, #2
   21d58:	e59f208c 	ldr	r2, [pc, #140]	@ 21dec <xTaskGenericCreate+0x248>
   21d5c:	e0832002 	add	r2, r3, r2
   21d60:	e51b300c 	ldr	r3, [fp, #-12]
   21d64:	e2833004 	add	r3, r3, #4
   21d68:	e1a01003 	mov	r1, r3
   21d6c:	e1a00002 	mov	r0, r2
   21d70:	ebfffc1d 	bl	20dec <vListInsertEnd>

			xReturn = pdPASS;
   21d74:	e3a03001 	mov	r3, #1
   21d78:	e50b3008 	str	r3, [fp, #-8]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   21d7c:	ebfffa00 	bl	20584 <vPortExitCritical>
   21d80:	ea000001 	b	21d8c <xTaskGenericCreate+0x1e8>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   21d84:	e3e03000 	mvn	r3, #0
   21d88:	e50b3008 	str	r3, [fp, #-8]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   21d8c:	e51b3008 	ldr	r3, [fp, #-8]
   21d90:	e3530001 	cmp	r3, #1
   21d94:	1a00000a 	bne	21dc4 <xTaskGenericCreate+0x220>
	{
		if( xSchedulerRunning != pdFALSE )
   21d98:	e59f303c 	ldr	r3, [pc, #60]	@ 21ddc <xTaskGenericCreate+0x238>
   21d9c:	e5933000 	ldr	r3, [r3]
   21da0:	e3530000 	cmp	r3, #0
   21da4:	0a000006 	beq	21dc4 <xTaskGenericCreate+0x220>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   21da8:	e59f3028 	ldr	r3, [pc, #40]	@ 21dd8 <xTaskGenericCreate+0x234>
   21dac:	e5933000 	ldr	r3, [r3]
   21db0:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   21db4:	e59b2004 	ldr	r2, [fp, #4]
   21db8:	e1520003 	cmp	r2, r3
   21dbc:	9a000000 	bls	21dc4 <xTaskGenericCreate+0x220>
			{
				portYIELD_WITHIN_API();
   21dc0:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   21dc4:	e51b3008 	ldr	r3, [fp, #-8]
}
   21dc8:	e1a00003 	mov	r0, r3
   21dcc:	e24bd004 	sub	sp, fp, #4
   21dd0:	e8bd8800 	pop	{fp, pc}
   21dd4:	0002497c 	andeq	r4, r2, ip, ror r9
   21dd8:	000248a4 	andeq	r4, r2, r4, lsr #17
   21ddc:	0002498c 	andeq	r4, r2, ip, lsl #19
   21de0:	00024984 	andeq	r4, r2, r4, lsl #19
   21de4:	000249a0 	andeq	r4, r2, r0, lsr #19
   21de8:	00024988 	andeq	r4, r2, r8, lsl #19
   21dec:	000248a8 	andeq	r4, r2, r8, lsr #17

00021df0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   21df0:	e92d4800 	push	{fp, lr}
   21df4:	e28db004 	add	fp, sp, #4
   21df8:	e24dd010 	sub	sp, sp, #16
   21dfc:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   21e00:	ebfff9ce 	bl	20540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   21e04:	e59f30d0 	ldr	r3, [pc, #208]	@ 21edc <vTaskDelete+0xec>
   21e08:	e5933000 	ldr	r3, [r3]
   21e0c:	e51b2010 	ldr	r2, [fp, #-16]
   21e10:	e1520003 	cmp	r2, r3
   21e14:	1a000001 	bne	21e20 <vTaskDelete+0x30>
			{
				pxTaskToDelete = NULL;
   21e18:	e3a03000 	mov	r3, #0
   21e1c:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   21e20:	e51b3010 	ldr	r3, [fp, #-16]
   21e24:	e3530000 	cmp	r3, #0
   21e28:	1a000002 	bne	21e38 <vTaskDelete+0x48>
   21e2c:	e59f30a8 	ldr	r3, [pc, #168]	@ 21edc <vTaskDelete+0xec>
   21e30:	e5933000 	ldr	r3, [r3]
   21e34:	ea000000 	b	21e3c <vTaskDelete+0x4c>
   21e38:	e51b3010 	ldr	r3, [fp, #-16]
   21e3c:	e50b3008 	str	r3, [fp, #-8]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   21e40:	e51b3008 	ldr	r3, [fp, #-8]
   21e44:	e2833004 	add	r3, r3, #4
   21e48:	e1a00003 	mov	r0, r3
   21e4c:	ebfffc42 	bl	20f5c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   21e50:	e51b3008 	ldr	r3, [fp, #-8]
   21e54:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   21e58:	e3530000 	cmp	r3, #0
   21e5c:	0a000003 	beq	21e70 <vTaskDelete+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   21e60:	e51b3008 	ldr	r3, [fp, #-8]
   21e64:	e2833018 	add	r3, r3, #24
   21e68:	e1a00003 	mov	r0, r3
   21e6c:	ebfffc3a 	bl	20f5c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   21e70:	e51b3008 	ldr	r3, [fp, #-8]
   21e74:	e2833004 	add	r3, r3, #4
   21e78:	e1a01003 	mov	r1, r3
   21e7c:	e59f005c 	ldr	r0, [pc, #92]	@ 21ee0 <vTaskDelete+0xf0>
   21e80:	ebfffbd9 	bl	20dec <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   21e84:	e59f3058 	ldr	r3, [pc, #88]	@ 21ee4 <vTaskDelete+0xf4>
   21e88:	e5933000 	ldr	r3, [r3]
   21e8c:	e2833001 	add	r3, r3, #1
   21e90:	e59f204c 	ldr	r2, [pc, #76]	@ 21ee4 <vTaskDelete+0xf4>
   21e94:	e5823000 	str	r3, [r2]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   21e98:	e59f3048 	ldr	r3, [pc, #72]	@ 21ee8 <vTaskDelete+0xf8>
   21e9c:	e5933000 	ldr	r3, [r3]
   21ea0:	e2833001 	add	r3, r3, #1
   21ea4:	e59f203c 	ldr	r2, [pc, #60]	@ 21ee8 <vTaskDelete+0xf8>
   21ea8:	e5823000 	str	r3, [r2]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   21eac:	ebfff9b4 	bl	20584 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   21eb0:	e59f3034 	ldr	r3, [pc, #52]	@ 21eec <vTaskDelete+0xfc>
   21eb4:	e5933000 	ldr	r3, [r3]
   21eb8:	e3530000 	cmp	r3, #0
   21ebc:	0a000003 	beq	21ed0 <vTaskDelete+0xe0>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   21ec0:	e51b3010 	ldr	r3, [fp, #-16]
   21ec4:	e3530000 	cmp	r3, #0
   21ec8:	1a000000 	bne	21ed0 <vTaskDelete+0xe0>
			{
				portYIELD_WITHIN_API();
   21ecc:	ef000000 	svc	0x00000000
			}
		}
	}
   21ed0:	e320f000 	nop	{0}
   21ed4:	e24bd004 	sub	sp, fp, #4
   21ed8:	e8bd8800 	pop	{fp, pc}
   21edc:	000248a4 	andeq	r4, r2, r4, lsr #17
   21ee0:	00024950 	andeq	r4, r2, r0, asr r9
   21ee4:	00024964 	andeq	r4, r2, r4, ror #18
   21ee8:	000249a0 	andeq	r4, r2, r0, lsr #19
   21eec:	0002498c 	andeq	r4, r2, ip, lsl #19

00021ef0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   21ef0:	e92d4800 	push	{fp, lr}
   21ef4:	e28db004 	add	fp, sp, #4
   21ef8:	e24dd018 	sub	sp, sp, #24
   21efc:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   21f00:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   21f04:	e3a03000 	mov	r3, #0
   21f08:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   21f0c:	eb0001f6 	bl	226ec <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   21f10:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21f14:	e5933000 	ldr	r3, [r3]
   21f18:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   21f1c:	e0823003 	add	r3, r2, r3
   21f20:	e50b300c 	str	r3, [fp, #-12]

			if( xTickCount < *pxPreviousWakeTime )
   21f24:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21f28:	e5932000 	ldr	r2, [r3]
   21f2c:	e59f30c4 	ldr	r3, [pc, #196]	@ 21ff8 <vTaskDelayUntil+0x108>
   21f30:	e5933000 	ldr	r3, [r3]
   21f34:	e1520003 	cmp	r2, r3
   21f38:	9a00000c 	bls	21f70 <vTaskDelayUntil+0x80>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   21f3c:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21f40:	e5933000 	ldr	r3, [r3]
   21f44:	e51b200c 	ldr	r2, [fp, #-12]
   21f48:	e1520003 	cmp	r2, r3
   21f4c:	2a000013 	bcs	21fa0 <vTaskDelayUntil+0xb0>
   21f50:	e59f30a0 	ldr	r3, [pc, #160]	@ 21ff8 <vTaskDelayUntil+0x108>
   21f54:	e5933000 	ldr	r3, [r3]
   21f58:	e51b200c 	ldr	r2, [fp, #-12]
   21f5c:	e1520003 	cmp	r2, r3
   21f60:	9a00000e 	bls	21fa0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   21f64:	e3a03001 	mov	r3, #1
   21f68:	e50b3008 	str	r3, [fp, #-8]
   21f6c:	ea00000b 	b	21fa0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   21f70:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21f74:	e5933000 	ldr	r3, [r3]
   21f78:	e51b200c 	ldr	r2, [fp, #-12]
   21f7c:	e1520003 	cmp	r2, r3
   21f80:	3a000004 	bcc	21f98 <vTaskDelayUntil+0xa8>
   21f84:	e59f306c 	ldr	r3, [pc, #108]	@ 21ff8 <vTaskDelayUntil+0x108>
   21f88:	e5933000 	ldr	r3, [r3]
   21f8c:	e51b200c 	ldr	r2, [fp, #-12]
   21f90:	e1520003 	cmp	r2, r3
   21f94:	9a000001 	bls	21fa0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   21f98:	e3a03001 	mov	r3, #1
   21f9c:	e50b3008 	str	r3, [fp, #-8]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   21fa0:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   21fa4:	e51b200c 	ldr	r2, [fp, #-12]
   21fa8:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   21fac:	e51b3008 	ldr	r3, [fp, #-8]
   21fb0:	e3530000 	cmp	r3, #0
   21fb4:	0a000006 	beq	21fd4 <vTaskDelayUntil+0xe4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   21fb8:	e59f303c 	ldr	r3, [pc, #60]	@ 21ffc <vTaskDelayUntil+0x10c>
   21fbc:	e5933000 	ldr	r3, [r3]
   21fc0:	e2833004 	add	r3, r3, #4
   21fc4:	e1a00003 	mov	r0, r3
   21fc8:	ebfffbe3 	bl	20f5c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   21fcc:	e51b000c 	ldr	r0, [fp, #-12]
   21fd0:	eb0004d5 	bl	2332c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   21fd4:	eb0001d0 	bl	2271c <xTaskResumeAll>
   21fd8:	e50b0010 	str	r0, [fp, #-16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   21fdc:	e51b3010 	ldr	r3, [fp, #-16]
   21fe0:	e3530000 	cmp	r3, #0
   21fe4:	1a000000 	bne	21fec <vTaskDelayUntil+0xfc>
		{
			portYIELD_WITHIN_API();
   21fe8:	ef000000 	svc	0x00000000
		}
	}
   21fec:	e320f000 	nop	{0}
   21ff0:	e24bd004 	sub	sp, fp, #4
   21ff4:	e8bd8800 	pop	{fp, pc}
   21ff8:	00024980 	andeq	r4, r2, r0, lsl #19
   21ffc:	000248a4 	andeq	r4, r2, r4, lsr #17

00022000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   22000:	e92d4800 	push	{fp, lr}
   22004:	e28db004 	add	fp, sp, #4
   22008:	e24dd010 	sub	sp, sp, #16
   2200c:	e50b0010 	str	r0, [fp, #-16]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   22010:	e3a03000 	mov	r3, #0
   22014:	e50b3008 	str	r3, [fp, #-8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   22018:	e51b3010 	ldr	r3, [fp, #-16]
   2201c:	e3530000 	cmp	r3, #0
   22020:	0a00000e 	beq	22060 <vTaskDelay+0x60>
		{
			vTaskSuspendAll();
   22024:	eb0001b0 	bl	226ec <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   22028:	e59f304c 	ldr	r3, [pc, #76]	@ 2207c <vTaskDelay+0x7c>
   2202c:	e5933000 	ldr	r3, [r3]
   22030:	e51b2010 	ldr	r2, [fp, #-16]
   22034:	e0823003 	add	r3, r2, r3
   22038:	e50b300c 	str	r3, [fp, #-12]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   2203c:	e59f303c 	ldr	r3, [pc, #60]	@ 22080 <vTaskDelay+0x80>
   22040:	e5933000 	ldr	r3, [r3]
   22044:	e2833004 	add	r3, r3, #4
   22048:	e1a00003 	mov	r0, r3
   2204c:	ebfffbc2 	bl	20f5c <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   22050:	e51b000c 	ldr	r0, [fp, #-12]
   22054:	eb0004b4 	bl	2332c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   22058:	eb0001af 	bl	2271c <xTaskResumeAll>
   2205c:	e50b0008 	str	r0, [fp, #-8]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   22060:	e51b3008 	ldr	r3, [fp, #-8]
   22064:	e3530000 	cmp	r3, #0
   22068:	1a000000 	bne	22070 <vTaskDelay+0x70>
		{
			portYIELD_WITHIN_API();
   2206c:	ef000000 	svc	0x00000000
		}
	}
   22070:	e320f000 	nop	{0}
   22074:	e24bd004 	sub	sp, fp, #4
   22078:	e8bd8800 	pop	{fp, pc}
   2207c:	00024980 	andeq	r4, r2, r0, lsl #19
   22080:	000248a4 	andeq	r4, r2, r4, lsr #17

00022084 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   22084:	e92d4800 	push	{fp, lr}
   22088:	e28db004 	add	fp, sp, #4
   2208c:	e24dd010 	sub	sp, sp, #16
   22090:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   22094:	ebfff929 	bl	20540 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   22098:	e51b3010 	ldr	r3, [fp, #-16]
   2209c:	e3530000 	cmp	r3, #0
   220a0:	1a000002 	bne	220b0 <uxTaskPriorityGet+0x2c>
   220a4:	e59f302c 	ldr	r3, [pc, #44]	@ 220d8 <uxTaskPriorityGet+0x54>
   220a8:	e5933000 	ldr	r3, [r3]
   220ac:	ea000000 	b	220b4 <uxTaskPriorityGet+0x30>
   220b0:	e51b3010 	ldr	r3, [fp, #-16]
   220b4:	e50b3008 	str	r3, [fp, #-8]
			uxReturn = pxTCB->uxPriority;
   220b8:	e51b3008 	ldr	r3, [fp, #-8]
   220bc:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   220c0:	e50b300c 	str	r3, [fp, #-12]
		}
		taskEXIT_CRITICAL();
   220c4:	ebfff92e 	bl	20584 <vPortExitCritical>

		return uxReturn;
   220c8:	e51b300c 	ldr	r3, [fp, #-12]
	}
   220cc:	e1a00003 	mov	r0, r3
   220d0:	e24bd004 	sub	sp, fp, #4
   220d4:	e8bd8800 	pop	{fp, pc}
   220d8:	000248a4 	andeq	r4, r2, r4, lsr #17

000220dc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   220dc:	e92d4800 	push	{fp, lr}
   220e0:	e28db004 	add	fp, sp, #4
   220e4:	e24dd018 	sub	sp, sp, #24
   220e8:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   220ec:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   220f0:	e3a03000 	mov	r3, #0
   220f4:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   220f8:	e51b301c 	ldr	r3, [fp, #-28]	@ 0xffffffe4
   220fc:	e3530004 	cmp	r3, #4
   22100:	9a000001 	bls	2210c <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   22104:	e3a03004 	mov	r3, #4
   22108:	e50b301c 	str	r3, [fp, #-28]	@ 0xffffffe4
		}

		taskENTER_CRITICAL();
   2210c:	ebfff90b 	bl	20540 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   22110:	e59f3160 	ldr	r3, [pc, #352]	@ 22278 <vTaskPrioritySet+0x19c>
   22114:	e5933000 	ldr	r3, [r3]
   22118:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   2211c:	e1520003 	cmp	r2, r3
   22120:	1a000001 	bne	2212c <vTaskPrioritySet+0x50>
			{
				pxTask = NULL;
   22124:	e3a03000 	mov	r3, #0
   22128:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   2212c:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   22130:	e3530000 	cmp	r3, #0
   22134:	1a000002 	bne	22144 <vTaskPrioritySet+0x68>
   22138:	e59f3138 	ldr	r3, [pc, #312]	@ 22278 <vTaskPrioritySet+0x19c>
   2213c:	e5933000 	ldr	r3, [r3]
   22140:	ea000000 	b	22148 <vTaskPrioritySet+0x6c>
   22144:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   22148:	e50b300c 	str	r3, [fp, #-12]
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   2214c:	e51b300c 	ldr	r3, [fp, #-12]
   22150:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22154:	e50b3010 	str	r3, [fp, #-16]
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   22158:	e51b2010 	ldr	r2, [fp, #-16]
   2215c:	e51b301c 	ldr	r3, [fp, #-28]	@ 0xffffffe4
   22160:	e1520003 	cmp	r2, r3
   22164:	0a00003f 	beq	22268 <vTaskPrioritySet+0x18c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   22168:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   2216c:	e51b3010 	ldr	r3, [fp, #-16]
   22170:	e1520003 	cmp	r2, r3
   22174:	9a000005 	bls	22190 <vTaskPrioritySet+0xb4>
				{
					if( pxTask != NULL )
   22178:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   2217c:	e3530000 	cmp	r3, #0
   22180:	0a000007 	beq	221a4 <vTaskPrioritySet+0xc8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   22184:	e3a03001 	mov	r3, #1
   22188:	e50b3008 	str	r3, [fp, #-8]
   2218c:	ea000004 	b	221a4 <vTaskPrioritySet+0xc8>
					}
				}
				else if( pxTask == NULL )
   22190:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   22194:	e3530000 	cmp	r3, #0
   22198:	1a000001 	bne	221a4 <vTaskPrioritySet+0xc8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   2219c:	e3a03001 	mov	r3, #1
   221a0:	e50b3008 	str	r3, [fp, #-8]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   221a4:	e51b300c 	ldr	r3, [fp, #-12]
   221a8:	e51b201c 	ldr	r2, [fp, #-28]	@ 0xffffffe4
   221ac:	e583202c 	str	r2, [r3, #44]	@ 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   221b0:	e51b301c 	ldr	r3, [fp, #-28]	@ 0xffffffe4
   221b4:	e2632005 	rsb	r2, r3, #5
   221b8:	e51b300c 	ldr	r3, [fp, #-12]
   221bc:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   221c0:	e51b300c 	ldr	r3, [fp, #-12]
   221c4:	e5931014 	ldr	r1, [r3, #20]
   221c8:	e51b2010 	ldr	r2, [fp, #-16]
   221cc:	e1a03002 	mov	r3, r2
   221d0:	e1a03103 	lsl	r3, r3, #2
   221d4:	e0833002 	add	r3, r3, r2
   221d8:	e1a03103 	lsl	r3, r3, #2
   221dc:	e59f2098 	ldr	r2, [pc, #152]	@ 2227c <vTaskPrioritySet+0x1a0>
   221e0:	e0833002 	add	r3, r3, r2
   221e4:	e1510003 	cmp	r1, r3
   221e8:	1a00001a 	bne	22258 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   221ec:	e51b300c 	ldr	r3, [fp, #-12]
   221f0:	e2833004 	add	r3, r3, #4
   221f4:	e1a00003 	mov	r0, r3
   221f8:	ebfffb57 	bl	20f5c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   221fc:	e51b300c 	ldr	r3, [fp, #-12]
   22200:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22204:	e59f3074 	ldr	r3, [pc, #116]	@ 22280 <vTaskPrioritySet+0x1a4>
   22208:	e5933000 	ldr	r3, [r3]
   2220c:	e1520003 	cmp	r2, r3
   22210:	9a000003 	bls	22224 <vTaskPrioritySet+0x148>
   22214:	e51b300c 	ldr	r3, [fp, #-12]
   22218:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   2221c:	e59f205c 	ldr	r2, [pc, #92]	@ 22280 <vTaskPrioritySet+0x1a4>
   22220:	e5823000 	str	r3, [r2]
   22224:	e51b300c 	ldr	r3, [fp, #-12]
   22228:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   2222c:	e1a03002 	mov	r3, r2
   22230:	e1a03103 	lsl	r3, r3, #2
   22234:	e0833002 	add	r3, r3, r2
   22238:	e1a03103 	lsl	r3, r3, #2
   2223c:	e59f2038 	ldr	r2, [pc, #56]	@ 2227c <vTaskPrioritySet+0x1a0>
   22240:	e0832002 	add	r2, r3, r2
   22244:	e51b300c 	ldr	r3, [fp, #-12]
   22248:	e2833004 	add	r3, r3, #4
   2224c:	e1a01003 	mov	r1, r3
   22250:	e1a00002 	mov	r0, r2
   22254:	ebfffae4 	bl	20dec <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   22258:	e51b3008 	ldr	r3, [fp, #-8]
   2225c:	e3530001 	cmp	r3, #1
   22260:	1a000000 	bne	22268 <vTaskPrioritySet+0x18c>
				{
					portYIELD_WITHIN_API();
   22264:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   22268:	ebfff8c5 	bl	20584 <vPortExitCritical>
	}
   2226c:	e320f000 	nop	{0}
   22270:	e24bd004 	sub	sp, fp, #4
   22274:	e8bd8800 	pop	{fp, pc}
   22278:	000248a4 	andeq	r4, r2, r4, lsr #17
   2227c:	000248a8 	andeq	r4, r2, r8, lsr #17
   22280:	00024988 	andeq	r4, r2, r8, lsl #19

00022284 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   22284:	e92d4800 	push	{fp, lr}
   22288:	e28db004 	add	fp, sp, #4
   2228c:	e24dd010 	sub	sp, sp, #16
   22290:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   22294:	ebfff8a9 	bl	20540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   22298:	e59f30d8 	ldr	r3, [pc, #216]	@ 22378 <vTaskSuspend+0xf4>
   2229c:	e5933000 	ldr	r3, [r3]
   222a0:	e51b2010 	ldr	r2, [fp, #-16]
   222a4:	e1520003 	cmp	r2, r3
   222a8:	1a000001 	bne	222b4 <vTaskSuspend+0x30>
			{
				pxTaskToSuspend = NULL;
   222ac:	e3a03000 	mov	r3, #0
   222b0:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   222b4:	e51b3010 	ldr	r3, [fp, #-16]
   222b8:	e3530000 	cmp	r3, #0
   222bc:	1a000002 	bne	222cc <vTaskSuspend+0x48>
   222c0:	e59f30b0 	ldr	r3, [pc, #176]	@ 22378 <vTaskSuspend+0xf4>
   222c4:	e5933000 	ldr	r3, [r3]
   222c8:	ea000000 	b	222d0 <vTaskSuspend+0x4c>
   222cc:	e51b3010 	ldr	r3, [fp, #-16]
   222d0:	e50b3008 	str	r3, [fp, #-8]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   222d4:	e51b3008 	ldr	r3, [fp, #-8]
   222d8:	e2833004 	add	r3, r3, #4
   222dc:	e1a00003 	mov	r0, r3
   222e0:	ebfffb1d 	bl	20f5c <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   222e4:	e51b3008 	ldr	r3, [fp, #-8]
   222e8:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   222ec:	e3530000 	cmp	r3, #0
   222f0:	0a000003 	beq	22304 <vTaskSuspend+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   222f4:	e51b3008 	ldr	r3, [fp, #-8]
   222f8:	e2833018 	add	r3, r3, #24
   222fc:	e1a00003 	mov	r0, r3
   22300:	ebfffb15 	bl	20f5c <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   22304:	e51b3008 	ldr	r3, [fp, #-8]
   22308:	e2833004 	add	r3, r3, #4
   2230c:	e1a01003 	mov	r1, r3
   22310:	e59f0064 	ldr	r0, [pc, #100]	@ 2237c <vTaskSuspend+0xf8>
   22314:	ebfffab4 	bl	20dec <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   22318:	ebfff899 	bl	20584 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   2231c:	e51b3010 	ldr	r3, [fp, #-16]
   22320:	e3530000 	cmp	r3, #0
   22324:	1a000010 	bne	2236c <vTaskSuspend+0xe8>
		{
			if( xSchedulerRunning != pdFALSE )
   22328:	e59f3050 	ldr	r3, [pc, #80]	@ 22380 <vTaskSuspend+0xfc>
   2232c:	e5933000 	ldr	r3, [r3]
   22330:	e3530000 	cmp	r3, #0
   22334:	0a000001 	beq	22340 <vTaskSuspend+0xbc>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   22338:	ef000000 	svc	0x00000000
				{
					vTaskSwitchContext();
				}
			}
		}
	}
   2233c:	ea00000a 	b	2236c <vTaskSuspend+0xe8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   22340:	e59f3034 	ldr	r3, [pc, #52]	@ 2237c <vTaskSuspend+0xf8>
   22344:	e5932000 	ldr	r2, [r3]
   22348:	e59f3034 	ldr	r3, [pc, #52]	@ 22384 <vTaskSuspend+0x100>
   2234c:	e5933000 	ldr	r3, [r3]
   22350:	e1520003 	cmp	r2, r3
   22354:	1a000003 	bne	22368 <vTaskSuspend+0xe4>
					pxCurrentTCB = NULL;
   22358:	e59f3018 	ldr	r3, [pc, #24]	@ 22378 <vTaskSuspend+0xf4>
   2235c:	e3a02000 	mov	r2, #0
   22360:	e5832000 	str	r2, [r3]
	}
   22364:	ea000000 	b	2236c <vTaskSuspend+0xe8>
					vTaskSwitchContext();
   22368:	eb00024c 	bl	22ca0 <vTaskSwitchContext>
	}
   2236c:	e320f000 	nop	{0}
   22370:	e24bd004 	sub	sp, fp, #4
   22374:	e8bd8800 	pop	{fp, pc}
   22378:	000248a4 	andeq	r4, r2, r4, lsr #17
   2237c:	00024968 	andeq	r4, r2, r8, ror #18
   22380:	0002498c 	andeq	r4, r2, ip, lsl #19
   22384:	0002497c 	andeq	r4, r2, ip, ror r9

00022388 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   22388:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   2238c:	e28db000 	add	fp, sp, #0
   22390:	e24dd014 	sub	sp, sp, #20
   22394:	e50b0010 	str	r0, [fp, #-16]
	portBASE_TYPE xReturn = pdFALSE;
   22398:	e3a03000 	mov	r3, #0
   2239c:	e50b3008 	str	r3, [fp, #-8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   223a0:	e51b3010 	ldr	r3, [fp, #-16]
   223a4:	e50b300c 	str	r3, [fp, #-12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   223a8:	e51b300c 	ldr	r3, [fp, #-12]
   223ac:	e5933014 	ldr	r3, [r3, #20]
   223b0:	e59f2044 	ldr	r2, [pc, #68]	@ 223fc <xTaskIsTaskSuspended+0x74>
   223b4:	e1530002 	cmp	r3, r2
   223b8:	1a00000a 	bne	223e8 <xTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   223bc:	e51b300c 	ldr	r3, [fp, #-12]
   223c0:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   223c4:	e59f2034 	ldr	r2, [pc, #52]	@ 22400 <xTaskIsTaskSuspended+0x78>
   223c8:	e1530002 	cmp	r3, r2
   223cc:	0a000005 	beq	223e8 <xTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   223d0:	e51b300c 	ldr	r3, [fp, #-12]
   223d4:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   223d8:	e3530000 	cmp	r3, #0
   223dc:	1a000001 	bne	223e8 <xTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
   223e0:	e3a03001 	mov	r3, #1
   223e4:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}

		return xReturn;
   223e8:	e51b3008 	ldr	r3, [fp, #-8]
	}
   223ec:	e1a00003 	mov	r0, r3
   223f0:	e28bd000 	add	sp, fp, #0
   223f4:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   223f8:	e12fff1e 	bx	lr
   223fc:	00024968 	andeq	r4, r2, r8, ror #18
   22400:	0002493c 	andeq	r4, r2, ip, lsr r9

00022404 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   22404:	e92d4800 	push	{fp, lr}
   22408:	e28db004 	add	fp, sp, #4
   2240c:	e24dd010 	sub	sp, sp, #16
   22410:	e50b0010 	str	r0, [fp, #-16]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   22414:	e51b3010 	ldr	r3, [fp, #-16]
   22418:	e50b3008 	str	r3, [fp, #-8]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   2241c:	e51b3008 	ldr	r3, [fp, #-8]
   22420:	e3530000 	cmp	r3, #0
   22424:	0a00002e 	beq	224e4 <vTaskResume+0xe0>
   22428:	e59f30c0 	ldr	r3, [pc, #192]	@ 224f0 <vTaskResume+0xec>
   2242c:	e5933000 	ldr	r3, [r3]
   22430:	e51b2008 	ldr	r2, [fp, #-8]
   22434:	e1520003 	cmp	r2, r3
   22438:	0a000029 	beq	224e4 <vTaskResume+0xe0>
		{
			taskENTER_CRITICAL();
   2243c:	ebfff83f 	bl	20540 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   22440:	e51b0008 	ldr	r0, [fp, #-8]
   22444:	ebffffcf 	bl	22388 <xTaskIsTaskSuspended>
   22448:	e1a03000 	mov	r3, r0
   2244c:	e3530001 	cmp	r3, #1
   22450:	1a000022 	bne	224e0 <vTaskResume+0xdc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   22454:	e51b3008 	ldr	r3, [fp, #-8]
   22458:	e2833004 	add	r3, r3, #4
   2245c:	e1a00003 	mov	r0, r3
   22460:	ebfffabd 	bl	20f5c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   22464:	e51b3008 	ldr	r3, [fp, #-8]
   22468:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   2246c:	e59f3080 	ldr	r3, [pc, #128]	@ 224f4 <vTaskResume+0xf0>
   22470:	e5933000 	ldr	r3, [r3]
   22474:	e1520003 	cmp	r2, r3
   22478:	9a000003 	bls	2248c <vTaskResume+0x88>
   2247c:	e51b3008 	ldr	r3, [fp, #-8]
   22480:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22484:	e59f2068 	ldr	r2, [pc, #104]	@ 224f4 <vTaskResume+0xf0>
   22488:	e5823000 	str	r3, [r2]
   2248c:	e51b3008 	ldr	r3, [fp, #-8]
   22490:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22494:	e1a03002 	mov	r3, r2
   22498:	e1a03103 	lsl	r3, r3, #2
   2249c:	e0833002 	add	r3, r3, r2
   224a0:	e1a03103 	lsl	r3, r3, #2
   224a4:	e59f204c 	ldr	r2, [pc, #76]	@ 224f8 <vTaskResume+0xf4>
   224a8:	e0832002 	add	r2, r3, r2
   224ac:	e51b3008 	ldr	r3, [fp, #-8]
   224b0:	e2833004 	add	r3, r3, #4
   224b4:	e1a01003 	mov	r1, r3
   224b8:	e1a00002 	mov	r0, r2
   224bc:	ebfffa4a 	bl	20dec <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   224c0:	e51b3008 	ldr	r3, [fp, #-8]
   224c4:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   224c8:	e59f3020 	ldr	r3, [pc, #32]	@ 224f0 <vTaskResume+0xec>
   224cc:	e5933000 	ldr	r3, [r3]
   224d0:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   224d4:	e1520003 	cmp	r2, r3
   224d8:	3a000000 	bcc	224e0 <vTaskResume+0xdc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   224dc:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   224e0:	ebfff827 	bl	20584 <vPortExitCritical>
		}
	}
   224e4:	e320f000 	nop	{0}
   224e8:	e24bd004 	sub	sp, fp, #4
   224ec:	e8bd8800 	pop	{fp, pc}
   224f0:	000248a4 	andeq	r4, r2, r4, lsr #17
   224f4:	00024988 	andeq	r4, r2, r8, lsl #19
   224f8:	000248a8 	andeq	r4, r2, r8, lsr #17

000224fc <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   224fc:	e92d4800 	push	{fp, lr}
   22500:	e28db004 	add	fp, sp, #4
   22504:	e24dd018 	sub	sp, sp, #24
   22508:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
	portBASE_TYPE xYieldRequired = pdFALSE;
   2250c:	e3a03000 	mov	r3, #0
   22510:	e50b3008 	str	r3, [fp, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   22514:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   22518:	e50b300c 	str	r3, [fp, #-12]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   2251c:	e3a03000 	mov	r3, #0
   22520:	e50b3010 	str	r3, [fp, #-16]
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   22524:	e51b000c 	ldr	r0, [fp, #-12]
   22528:	ebffff96 	bl	22388 <xTaskIsTaskSuspended>
   2252c:	e1a03000 	mov	r3, r0
   22530:	e3530001 	cmp	r3, #1
   22534:	1a00002e 	bne	225f4 <xTaskResumeFromISR+0xf8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22538:	e59f30c4 	ldr	r3, [pc, #196]	@ 22604 <xTaskResumeFromISR+0x108>
   2253c:	e5933000 	ldr	r3, [r3]
   22540:	e3530000 	cmp	r3, #0
   22544:	1a000025 	bne	225e0 <xTaskResumeFromISR+0xe4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   22548:	e51b300c 	ldr	r3, [fp, #-12]
   2254c:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22550:	e59f30b0 	ldr	r3, [pc, #176]	@ 22608 <xTaskResumeFromISR+0x10c>
   22554:	e5933000 	ldr	r3, [r3]
   22558:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   2255c:	e1520003 	cmp	r2, r3
   22560:	23a03001 	movcs	r3, #1
   22564:	33a03000 	movcc	r3, #0
   22568:	e6ef3073 	uxtb	r3, r3
   2256c:	e50b3008 	str	r3, [fp, #-8]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   22570:	e51b300c 	ldr	r3, [fp, #-12]
   22574:	e2833004 	add	r3, r3, #4
   22578:	e1a00003 	mov	r0, r3
   2257c:	ebfffa76 	bl	20f5c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   22580:	e51b300c 	ldr	r3, [fp, #-12]
   22584:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22588:	e59f307c 	ldr	r3, [pc, #124]	@ 2260c <xTaskResumeFromISR+0x110>
   2258c:	e5933000 	ldr	r3, [r3]
   22590:	e1520003 	cmp	r2, r3
   22594:	9a000003 	bls	225a8 <xTaskResumeFromISR+0xac>
   22598:	e51b300c 	ldr	r3, [fp, #-12]
   2259c:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   225a0:	e59f2064 	ldr	r2, [pc, #100]	@ 2260c <xTaskResumeFromISR+0x110>
   225a4:	e5823000 	str	r3, [r2]
   225a8:	e51b300c 	ldr	r3, [fp, #-12]
   225ac:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   225b0:	e1a03002 	mov	r3, r2
   225b4:	e1a03103 	lsl	r3, r3, #2
   225b8:	e0833002 	add	r3, r3, r2
   225bc:	e1a03103 	lsl	r3, r3, #2
   225c0:	e59f2048 	ldr	r2, [pc, #72]	@ 22610 <xTaskResumeFromISR+0x114>
   225c4:	e0832002 	add	r2, r3, r2
   225c8:	e51b300c 	ldr	r3, [fp, #-12]
   225cc:	e2833004 	add	r3, r3, #4
   225d0:	e1a01003 	mov	r1, r3
   225d4:	e1a00002 	mov	r0, r2
   225d8:	ebfffa03 	bl	20dec <vListInsertEnd>
   225dc:	ea000004 	b	225f4 <xTaskResumeFromISR+0xf8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   225e0:	e51b300c 	ldr	r3, [fp, #-12]
   225e4:	e2833018 	add	r3, r3, #24
   225e8:	e1a01003 	mov	r1, r3
   225ec:	e59f0020 	ldr	r0, [pc, #32]	@ 22614 <xTaskResumeFromISR+0x118>
   225f0:	ebfff9fd 	bl	20dec <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   225f4:	e51b3008 	ldr	r3, [fp, #-8]
	}
   225f8:	e1a00003 	mov	r0, r3
   225fc:	e24bd004 	sub	sp, fp, #4
   22600:	e8bd8800 	pop	{fp, pc}
   22604:	00024990 	muleq	r2, r0, r9
   22608:	000248a4 	andeq	r4, r2, r4, lsr #17
   2260c:	00024988 	andeq	r4, r2, r8, lsl #19
   22610:	000248a8 	andeq	r4, r2, r8, lsr #17
   22614:	0002493c 	andeq	r4, r2, ip, lsr r9

00022618 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   22618:	e92d4800 	push	{fp, lr}
   2261c:	e28db004 	add	fp, sp, #4
   22620:	e24dd018 	sub	sp, sp, #24
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   22624:	e3a03000 	mov	r3, #0
   22628:	e58d300c 	str	r3, [sp, #12]
   2262c:	e3a03000 	mov	r3, #0
   22630:	e58d3008 	str	r3, [sp, #8]
   22634:	e3a03000 	mov	r3, #0
   22638:	e58d3004 	str	r3, [sp, #4]
   2263c:	e3a03000 	mov	r3, #0
   22640:	e58d3000 	str	r3, [sp]
   22644:	e3a03000 	mov	r3, #0
   22648:	e3a02080 	mov	r2, #128	@ 0x80
   2264c:	e59f1050 	ldr	r1, [pc, #80]	@ 226a4 <vTaskStartScheduler+0x8c>
   22650:	e59f0050 	ldr	r0, [pc, #80]	@ 226a8 <vTaskStartScheduler+0x90>
   22654:	ebfffd52 	bl	21ba4 <xTaskGenericCreate>
   22658:	e50b0008 	str	r0, [fp, #-8]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   2265c:	e51b3008 	ldr	r3, [fp, #-8]
   22660:	e3530001 	cmp	r3, #1
   22664:	1a00000b 	bne	22698 <vTaskStartScheduler+0x80>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   22668:	e92d0001 	stmfd	sp!, {r0}
   2266c:	e10f0000 	mrs	r0, CPSR
   22670:	e38000c0 	orr	r0, r0, #192	@ 0xc0
   22674:	e129f000 	msr	CPSR_fc, r0
   22678:	e8bd0001 	ldmfd	sp!, {r0}

		xSchedulerRunning = pdTRUE;
   2267c:	e59f3028 	ldr	r3, [pc, #40]	@ 226ac <vTaskStartScheduler+0x94>
   22680:	e3a02001 	mov	r2, #1
   22684:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   22688:	e59f3020 	ldr	r3, [pc, #32]	@ 226b0 <vTaskStartScheduler+0x98>
   2268c:	e3a02000 	mov	r2, #0
   22690:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   22694:	ebfff6e9 	bl	20240 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   22698:	e320f000 	nop	{0}
   2269c:	e24bd004 	sub	sp, fp, #4
   226a0:	e8bd8800 	pop	{fp, pc}
   226a4:	000247d4 	ldrdeq	r4, [r2], -r4	@ <UNPREDICTABLE>
   226a8:	000230c0 	andeq	r3, r2, r0, asr #1
   226ac:	0002498c 	andeq	r4, r2, ip, lsl #19
   226b0:	00024980 	andeq	r4, r2, r0, lsl #19

000226b4 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   226b4:	e92d4800 	push	{fp, lr}
   226b8:	e28db004 	add	fp, sp, #4
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   226bc:	e92d0001 	stmfd	sp!, {r0}
   226c0:	e10f0000 	mrs	r0, CPSR
   226c4:	e38000c0 	orr	r0, r0, #192	@ 0xc0
   226c8:	e129f000 	msr	CPSR_fc, r0
   226cc:	e8bd0001 	ldmfd	sp!, {r0}
	xSchedulerRunning = pdFALSE;
   226d0:	e59f3010 	ldr	r3, [pc, #16]	@ 226e8 <vTaskEndScheduler+0x34>
   226d4:	e3a02000 	mov	r2, #0
   226d8:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   226dc:	ebfff6de 	bl	2025c <vPortEndScheduler>
}
   226e0:	e320f000 	nop	{0}
   226e4:	e8bd8800 	pop	{fp, pc}
   226e8:	0002498c 	andeq	r4, r2, ip, lsl #19

000226ec <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   226ec:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   226f0:	e28db000 	add	fp, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   226f4:	e59f301c 	ldr	r3, [pc, #28]	@ 22718 <vTaskSuspendAll+0x2c>
   226f8:	e5933000 	ldr	r3, [r3]
   226fc:	e2833001 	add	r3, r3, #1
   22700:	e59f2010 	ldr	r2, [pc, #16]	@ 22718 <vTaskSuspendAll+0x2c>
   22704:	e5823000 	str	r3, [r2]
}
   22708:	e320f000 	nop	{0}
   2270c:	e28bd000 	add	sp, fp, #0
   22710:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   22714:	e12fff1e 	bx	lr
   22718:	00024990 	muleq	r2, r0, r9

0002271c <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   2271c:	e92d4810 	push	{r4, fp, lr}
   22720:	e28db008 	add	fp, sp, #8
   22724:	e24dd00c 	sub	sp, sp, #12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   22728:	e3a03000 	mov	r3, #0
   2272c:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   22730:	ebfff782 	bl	20540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   22734:	e59f3164 	ldr	r3, [pc, #356]	@ 228a0 <xTaskResumeAll+0x184>
   22738:	e5933000 	ldr	r3, [r3]
   2273c:	e2433001 	sub	r3, r3, #1
   22740:	e59f2158 	ldr	r2, [pc, #344]	@ 228a0 <xTaskResumeAll+0x184>
   22744:	e5823000 	str	r3, [r2]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22748:	e59f3150 	ldr	r3, [pc, #336]	@ 228a0 <xTaskResumeAll+0x184>
   2274c:	e5933000 	ldr	r3, [r3]
   22750:	e3530000 	cmp	r3, #0
   22754:	1a00004c 	bne	2288c <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   22758:	e59f3144 	ldr	r3, [pc, #324]	@ 228a4 <xTaskResumeAll+0x188>
   2275c:	e5933000 	ldr	r3, [r3]
   22760:	e3530000 	cmp	r3, #0
   22764:	0a000048 	beq	2288c <xTaskResumeAll+0x170>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   22768:	e3a03000 	mov	r3, #0
   2276c:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   22770:	ea000023 	b	22804 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   22774:	e59f312c 	ldr	r3, [pc, #300]	@ 228a8 <xTaskResumeAll+0x18c>
   22778:	e593300c 	ldr	r3, [r3, #12]
   2277c:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   22780:	e2843018 	add	r3, r4, #24
   22784:	e1a00003 	mov	r0, r3
   22788:	ebfff9f3 	bl	20f5c <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   2278c:	e2843004 	add	r3, r4, #4
   22790:	e1a00003 	mov	r0, r3
   22794:	ebfff9f0 	bl	20f5c <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   22798:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   2279c:	e59f3108 	ldr	r3, [pc, #264]	@ 228ac <xTaskResumeAll+0x190>
   227a0:	e5933000 	ldr	r3, [r3]
   227a4:	e1520003 	cmp	r2, r3
   227a8:	9a000002 	bls	227b8 <xTaskResumeAll+0x9c>
   227ac:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
   227b0:	e59f20f4 	ldr	r2, [pc, #244]	@ 228ac <xTaskResumeAll+0x190>
   227b4:	e5823000 	str	r3, [r2]
   227b8:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   227bc:	e1a03002 	mov	r3, r2
   227c0:	e1a03103 	lsl	r3, r3, #2
   227c4:	e0833002 	add	r3, r3, r2
   227c8:	e1a03103 	lsl	r3, r3, #2
   227cc:	e59f20dc 	ldr	r2, [pc, #220]	@ 228b0 <xTaskResumeAll+0x194>
   227d0:	e0833002 	add	r3, r3, r2
   227d4:	e2842004 	add	r2, r4, #4
   227d8:	e1a01002 	mov	r1, r2
   227dc:	e1a00003 	mov	r0, r3
   227e0:	ebfff981 	bl	20dec <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   227e4:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   227e8:	e59f30c4 	ldr	r3, [pc, #196]	@ 228b4 <xTaskResumeAll+0x198>
   227ec:	e5933000 	ldr	r3, [r3]
   227f0:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   227f4:	e1520003 	cmp	r2, r3
   227f8:	3a000001 	bcc	22804 <xTaskResumeAll+0xe8>
					{
						xYieldRequired = pdTRUE;
   227fc:	e3a03001 	mov	r3, #1
   22800:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   22804:	e59f309c 	ldr	r3, [pc, #156]	@ 228a8 <xTaskResumeAll+0x18c>
   22808:	e5933000 	ldr	r3, [r3]
   2280c:	e3530000 	cmp	r3, #0
   22810:	1affffd7 	bne	22774 <xTaskResumeAll+0x58>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   22814:	e59f309c 	ldr	r3, [pc, #156]	@ 228b8 <xTaskResumeAll+0x19c>
   22818:	e5933000 	ldr	r3, [r3]
   2281c:	e3530000 	cmp	r3, #0
   22820:	0a00000c 	beq	22858 <xTaskResumeAll+0x13c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   22824:	ea000005 	b	22840 <xTaskResumeAll+0x124>
					{
						vTaskIncrementTick();
   22828:	eb000048 	bl	22950 <vTaskIncrementTick>
						--uxMissedTicks;
   2282c:	e59f3084 	ldr	r3, [pc, #132]	@ 228b8 <xTaskResumeAll+0x19c>
   22830:	e5933000 	ldr	r3, [r3]
   22834:	e2433001 	sub	r3, r3, #1
   22838:	e59f2078 	ldr	r2, [pc, #120]	@ 228b8 <xTaskResumeAll+0x19c>
   2283c:	e5823000 	str	r3, [r2]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   22840:	e59f3070 	ldr	r3, [pc, #112]	@ 228b8 <xTaskResumeAll+0x19c>
   22844:	e5933000 	ldr	r3, [r3]
   22848:	e3530000 	cmp	r3, #0
   2284c:	1afffff5 	bne	22828 <xTaskResumeAll+0x10c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   22850:	e3a03001 	mov	r3, #1
   22854:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   22858:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2285c:	e3530001 	cmp	r3, #1
   22860:	0a000003 	beq	22874 <xTaskResumeAll+0x158>
   22864:	e59f3050 	ldr	r3, [pc, #80]	@ 228bc <xTaskResumeAll+0x1a0>
   22868:	e5933000 	ldr	r3, [r3]
   2286c:	e3530001 	cmp	r3, #1
   22870:	1a000005 	bne	2288c <xTaskResumeAll+0x170>
				{
					xAlreadyYielded = pdTRUE;
   22874:	e3a03001 	mov	r3, #1
   22878:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   2287c:	e59f3038 	ldr	r3, [pc, #56]	@ 228bc <xTaskResumeAll+0x1a0>
   22880:	e3a02000 	mov	r2, #0
   22884:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   22888:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   2288c:	ebfff73c 	bl	20584 <vPortExitCritical>

	return xAlreadyYielded;
   22890:	e51b3010 	ldr	r3, [fp, #-16]
}
   22894:	e1a00003 	mov	r0, r3
   22898:	e24bd008 	sub	sp, fp, #8
   2289c:	e8bd8810 	pop	{r4, fp, pc}
   228a0:	00024990 	muleq	r2, r0, r9
   228a4:	0002497c 	andeq	r4, r2, ip, ror r9
   228a8:	0002493c 	andeq	r4, r2, ip, lsr r9
   228ac:	00024988 	andeq	r4, r2, r8, lsl #19
   228b0:	000248a8 	andeq	r4, r2, r8, lsr #17
   228b4:	000248a4 	andeq	r4, r2, r4, lsr #17
   228b8:	00024994 	muleq	r2, r4, r9
   228bc:	00024998 	muleq	r2, r8, r9

000228c0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   228c0:	e92d4800 	push	{fp, lr}
   228c4:	e28db004 	add	fp, sp, #4
   228c8:	e24dd008 	sub	sp, sp, #8
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   228cc:	ebfff71b 	bl	20540 <vPortEnterCritical>
	{
		xTicks = xTickCount;
   228d0:	e59f3018 	ldr	r3, [pc, #24]	@ 228f0 <xTaskGetTickCount+0x30>
   228d4:	e5933000 	ldr	r3, [r3]
   228d8:	e50b3008 	str	r3, [fp, #-8]
	}
	taskEXIT_CRITICAL();
   228dc:	ebfff728 	bl	20584 <vPortExitCritical>

	return xTicks;
   228e0:	e51b3008 	ldr	r3, [fp, #-8]
}
   228e4:	e1a00003 	mov	r0, r3
   228e8:	e24bd004 	sub	sp, fp, #4
   228ec:	e8bd8800 	pop	{fp, pc}
   228f0:	00024980 	andeq	r4, r2, r0, lsl #19

000228f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   228f4:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   228f8:	e28db000 	add	fp, sp, #0
   228fc:	e24dd00c 	sub	sp, sp, #12
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   22900:	e3a03000 	mov	r3, #0
   22904:	e50b3008 	str	r3, [fp, #-8]
	xReturn = xTickCount;
   22908:	e59f3018 	ldr	r3, [pc, #24]	@ 22928 <xTaskGetTickCountFromISR+0x34>
   2290c:	e5933000 	ldr	r3, [r3]
   22910:	e50b300c 	str	r3, [fp, #-12]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   22914:	e51b300c 	ldr	r3, [fp, #-12]
}
   22918:	e1a00003 	mov	r0, r3
   2291c:	e28bd000 	add	sp, fp, #0
   22920:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   22924:	e12fff1e 	bx	lr
   22928:	00024980 	andeq	r4, r2, r0, lsl #19

0002292c <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   2292c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   22930:	e28db000 	add	fp, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   22934:	e59f3010 	ldr	r3, [pc, #16]	@ 2294c <uxTaskGetNumberOfTasks+0x20>
   22938:	e5933000 	ldr	r3, [r3]
}
   2293c:	e1a00003 	mov	r0, r3
   22940:	e28bd000 	add	sp, fp, #0
   22944:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   22948:	e12fff1e 	bx	lr
   2294c:	0002497c 	andeq	r4, r2, ip, ror r9

00022950 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   22950:	e92d4800 	push	{fp, lr}
   22954:	e28db004 	add	fp, sp, #4
   22958:	e24dd010 	sub	sp, sp, #16
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   2295c:	e59f31e4 	ldr	r3, [pc, #484]	@ 22b48 <vTaskIncrementTick+0x1f8>
   22960:	e5933000 	ldr	r3, [r3]
   22964:	e3530000 	cmp	r3, #0
   22968:	1a00006d 	bne	22b24 <vTaskIncrementTick+0x1d4>
	{
		++xTickCount;
   2296c:	e59f31d8 	ldr	r3, [pc, #472]	@ 22b4c <vTaskIncrementTick+0x1fc>
   22970:	e5933000 	ldr	r3, [r3]
   22974:	e2833001 	add	r3, r3, #1
   22978:	e59f21cc 	ldr	r2, [pc, #460]	@ 22b4c <vTaskIncrementTick+0x1fc>
   2297c:	e5823000 	str	r3, [r2]
		if( xTickCount == ( portTickType ) 0U )
   22980:	e59f31c4 	ldr	r3, [pc, #452]	@ 22b4c <vTaskIncrementTick+0x1fc>
   22984:	e5933000 	ldr	r3, [r3]
   22988:	e3530000 	cmp	r3, #0
   2298c:	1a000020 	bne	22a14 <vTaskIncrementTick+0xc4>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   22990:	e59f31b8 	ldr	r3, [pc, #440]	@ 22b50 <vTaskIncrementTick+0x200>
   22994:	e5933000 	ldr	r3, [r3]
   22998:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   2299c:	e59f31b0 	ldr	r3, [pc, #432]	@ 22b54 <vTaskIncrementTick+0x204>
   229a0:	e5933000 	ldr	r3, [r3]
   229a4:	e59f21a4 	ldr	r2, [pc, #420]	@ 22b50 <vTaskIncrementTick+0x200>
   229a8:	e5823000 	str	r3, [r2]
			pxOverflowDelayedTaskList = pxTemp;
   229ac:	e59f21a0 	ldr	r2, [pc, #416]	@ 22b54 <vTaskIncrementTick+0x204>
   229b0:	e51b3008 	ldr	r3, [fp, #-8]
   229b4:	e5823000 	str	r3, [r2]
			xNumOfOverflows++;
   229b8:	e59f3198 	ldr	r3, [pc, #408]	@ 22b58 <vTaskIncrementTick+0x208>
   229bc:	e5933000 	ldr	r3, [r3]
   229c0:	e2833001 	add	r3, r3, #1
   229c4:	e59f218c 	ldr	r2, [pc, #396]	@ 22b58 <vTaskIncrementTick+0x208>
   229c8:	e5823000 	str	r3, [r2]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   229cc:	e59f317c 	ldr	r3, [pc, #380]	@ 22b50 <vTaskIncrementTick+0x200>
   229d0:	e5933000 	ldr	r3, [r3]
   229d4:	e5933000 	ldr	r3, [r3]
   229d8:	e3530000 	cmp	r3, #0
   229dc:	1a000003 	bne	229f0 <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   229e0:	e59f3174 	ldr	r3, [pc, #372]	@ 22b5c <vTaskIncrementTick+0x20c>
   229e4:	e3e02000 	mvn	r2, #0
   229e8:	e5832000 	str	r2, [r3]
   229ec:	ea000008 	b	22a14 <vTaskIncrementTick+0xc4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   229f0:	e59f3158 	ldr	r3, [pc, #344]	@ 22b50 <vTaskIncrementTick+0x200>
   229f4:	e5933000 	ldr	r3, [r3]
   229f8:	e593300c 	ldr	r3, [r3, #12]
   229fc:	e593300c 	ldr	r3, [r3, #12]
   22a00:	e50b300c 	str	r3, [fp, #-12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   22a04:	e51b300c 	ldr	r3, [fp, #-12]
   22a08:	e5933004 	ldr	r3, [r3, #4]
   22a0c:	e59f2148 	ldr	r2, [pc, #328]	@ 22b5c <vTaskIncrementTick+0x20c>
   22a10:	e5823000 	str	r3, [r2]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   22a14:	e59f3130 	ldr	r3, [pc, #304]	@ 22b4c <vTaskIncrementTick+0x1fc>
   22a18:	e5932000 	ldr	r2, [r3]
   22a1c:	e59f3138 	ldr	r3, [pc, #312]	@ 22b5c <vTaskIncrementTick+0x20c>
   22a20:	e5933000 	ldr	r3, [r3]
   22a24:	e1520003 	cmp	r2, r3
   22a28:	3a000043 	bcc	22b3c <vTaskIncrementTick+0x1ec>
   22a2c:	e59f311c 	ldr	r3, [pc, #284]	@ 22b50 <vTaskIncrementTick+0x200>
   22a30:	e5933000 	ldr	r3, [r3]
   22a34:	e5933000 	ldr	r3, [r3]
   22a38:	e3530000 	cmp	r3, #0
   22a3c:	1a000003 	bne	22a50 <vTaskIncrementTick+0x100>
   22a40:	e59f3114 	ldr	r3, [pc, #276]	@ 22b5c <vTaskIncrementTick+0x20c>
   22a44:	e3e02000 	mvn	r2, #0
   22a48:	e5832000 	str	r2, [r3]
   22a4c:	ea00003a 	b	22b3c <vTaskIncrementTick+0x1ec>
   22a50:	e59f30f8 	ldr	r3, [pc, #248]	@ 22b50 <vTaskIncrementTick+0x200>
   22a54:	e5933000 	ldr	r3, [r3]
   22a58:	e593300c 	ldr	r3, [r3, #12]
   22a5c:	e593300c 	ldr	r3, [r3, #12]
   22a60:	e50b300c 	str	r3, [fp, #-12]
   22a64:	e51b300c 	ldr	r3, [fp, #-12]
   22a68:	e5933004 	ldr	r3, [r3, #4]
   22a6c:	e50b3010 	str	r3, [fp, #-16]
   22a70:	e59f30d4 	ldr	r3, [pc, #212]	@ 22b4c <vTaskIncrementTick+0x1fc>
   22a74:	e5933000 	ldr	r3, [r3]
   22a78:	e51b2010 	ldr	r2, [fp, #-16]
   22a7c:	e1520003 	cmp	r2, r3
   22a80:	9a000003 	bls	22a94 <vTaskIncrementTick+0x144>
   22a84:	e59f20d0 	ldr	r2, [pc, #208]	@ 22b5c <vTaskIncrementTick+0x20c>
   22a88:	e51b3010 	ldr	r3, [fp, #-16]
   22a8c:	e5823000 	str	r3, [r2]
   22a90:	ea000029 	b	22b3c <vTaskIncrementTick+0x1ec>
   22a94:	e51b300c 	ldr	r3, [fp, #-12]
   22a98:	e2833004 	add	r3, r3, #4
   22a9c:	e1a00003 	mov	r0, r3
   22aa0:	ebfff92d 	bl	20f5c <vListRemove>
   22aa4:	e51b300c 	ldr	r3, [fp, #-12]
   22aa8:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   22aac:	e3530000 	cmp	r3, #0
   22ab0:	0a000003 	beq	22ac4 <vTaskIncrementTick+0x174>
   22ab4:	e51b300c 	ldr	r3, [fp, #-12]
   22ab8:	e2833018 	add	r3, r3, #24
   22abc:	e1a00003 	mov	r0, r3
   22ac0:	ebfff925 	bl	20f5c <vListRemove>
   22ac4:	e51b300c 	ldr	r3, [fp, #-12]
   22ac8:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22acc:	e59f308c 	ldr	r3, [pc, #140]	@ 22b60 <vTaskIncrementTick+0x210>
   22ad0:	e5933000 	ldr	r3, [r3]
   22ad4:	e1520003 	cmp	r2, r3
   22ad8:	9a000003 	bls	22aec <vTaskIncrementTick+0x19c>
   22adc:	e51b300c 	ldr	r3, [fp, #-12]
   22ae0:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22ae4:	e59f2074 	ldr	r2, [pc, #116]	@ 22b60 <vTaskIncrementTick+0x210>
   22ae8:	e5823000 	str	r3, [r2]
   22aec:	e51b300c 	ldr	r3, [fp, #-12]
   22af0:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22af4:	e1a03002 	mov	r3, r2
   22af8:	e1a03103 	lsl	r3, r3, #2
   22afc:	e0833002 	add	r3, r3, r2
   22b00:	e1a03103 	lsl	r3, r3, #2
   22b04:	e59f2058 	ldr	r2, [pc, #88]	@ 22b64 <vTaskIncrementTick+0x214>
   22b08:	e0832002 	add	r2, r3, r2
   22b0c:	e51b300c 	ldr	r3, [fp, #-12]
   22b10:	e2833004 	add	r3, r3, #4
   22b14:	e1a01003 	mov	r1, r3
   22b18:	e1a00002 	mov	r0, r2
   22b1c:	ebfff8b2 	bl	20dec <vListInsertEnd>
   22b20:	eaffffc1 	b	22a2c <vTaskIncrementTick+0xdc>
	}
	else
	{
		++uxMissedTicks;
   22b24:	e59f303c 	ldr	r3, [pc, #60]	@ 22b68 <vTaskIncrementTick+0x218>
   22b28:	e5933000 	ldr	r3, [r3]
   22b2c:	e2833001 	add	r3, r3, #1
   22b30:	e59f2030 	ldr	r2, [pc, #48]	@ 22b68 <vTaskIncrementTick+0x218>
   22b34:	e5823000 	str	r3, [r2]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   22b38:	eaffffff 	b	22b3c <vTaskIncrementTick+0x1ec>
   22b3c:	e320f000 	nop	{0}
   22b40:	e24bd004 	sub	sp, fp, #4
   22b44:	e8bd8800 	pop	{fp, pc}
   22b48:	00024990 	muleq	r2, r0, r9
   22b4c:	00024980 	andeq	r4, r2, r0, lsl #19
   22b50:	00024934 	andeq	r4, r2, r4, lsr r9
   22b54:	00024938 	andeq	r4, r2, r8, lsr r9
   22b58:	0002499c 	muleq	r2, ip, r9
   22b5c:	00024818 	andeq	r4, r2, r8, lsl r8
   22b60:	00024988 	andeq	r4, r2, r8, lsl #19
   22b64:	000248a8 	andeq	r4, r2, r8, lsr #17
   22b68:	00024994 	muleq	r2, r4, r9

00022b6c <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   22b6c:	e92d4800 	push	{fp, lr}
   22b70:	e28db004 	add	fp, sp, #4
   22b74:	e24dd010 	sub	sp, sp, #16
   22b78:	e50b0010 	str	r0, [fp, #-16]
   22b7c:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   22b80:	e51b3010 	ldr	r3, [fp, #-16]
   22b84:	e3530000 	cmp	r3, #0
   22b88:	1a000003 	bne	22b9c <vTaskSetApplicationTaskTag+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22b8c:	e59f3030 	ldr	r3, [pc, #48]	@ 22bc4 <vTaskSetApplicationTaskTag+0x58>
   22b90:	e5933000 	ldr	r3, [r3]
   22b94:	e50b3008 	str	r3, [fp, #-8]
   22b98:	ea000001 	b	22ba4 <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22b9c:	e51b3010 	ldr	r3, [fp, #-16]
   22ba0:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   22ba4:	ebfff665 	bl	20540 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   22ba8:	e51b3008 	ldr	r3, [fp, #-8]
   22bac:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   22bb0:	e5832044 	str	r2, [r3, #68]	@ 0x44
		taskEXIT_CRITICAL();
   22bb4:	ebfff672 	bl	20584 <vPortExitCritical>
	}
   22bb8:	e320f000 	nop	{0}
   22bbc:	e24bd004 	sub	sp, fp, #4
   22bc0:	e8bd8800 	pop	{fp, pc}
   22bc4:	000248a4 	andeq	r4, r2, r4, lsr #17

00022bc8 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   22bc8:	e92d4800 	push	{fp, lr}
   22bcc:	e28db004 	add	fp, sp, #4
   22bd0:	e24dd010 	sub	sp, sp, #16
   22bd4:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   22bd8:	e51b3010 	ldr	r3, [fp, #-16]
   22bdc:	e3530000 	cmp	r3, #0
   22be0:	1a000003 	bne	22bf4 <xTaskGetApplicationTaskTag+0x2c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22be4:	e59f3034 	ldr	r3, [pc, #52]	@ 22c20 <xTaskGetApplicationTaskTag+0x58>
   22be8:	e5933000 	ldr	r3, [r3]
   22bec:	e50b3008 	str	r3, [fp, #-8]
   22bf0:	ea000001 	b	22bfc <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22bf4:	e51b3010 	ldr	r3, [fp, #-16]
   22bf8:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   22bfc:	ebfff64f 	bl	20540 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   22c00:	e51b3008 	ldr	r3, [fp, #-8]
   22c04:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   22c08:	e50b300c 	str	r3, [fp, #-12]
		taskEXIT_CRITICAL();
   22c0c:	ebfff65c 	bl	20584 <vPortExitCritical>

		return xReturn;
   22c10:	e51b300c 	ldr	r3, [fp, #-12]
	}
   22c14:	e1a00003 	mov	r0, r3
   22c18:	e24bd004 	sub	sp, fp, #4
   22c1c:	e8bd8800 	pop	{fp, pc}
   22c20:	000248a4 	andeq	r4, r2, r4, lsr #17

00022c24 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   22c24:	e92d4800 	push	{fp, lr}
   22c28:	e28db004 	add	fp, sp, #4
   22c2c:	e24dd010 	sub	sp, sp, #16
   22c30:	e50b0010 	str	r0, [fp, #-16]
   22c34:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   22c38:	e51b3010 	ldr	r3, [fp, #-16]
   22c3c:	e3530000 	cmp	r3, #0
   22c40:	1a000003 	bne	22c54 <xTaskCallApplicationTaskHook+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22c44:	e59f3050 	ldr	r3, [pc, #80]	@ 22c9c <xTaskCallApplicationTaskHook+0x78>
   22c48:	e5933000 	ldr	r3, [r3]
   22c4c:	e50b3008 	str	r3, [fp, #-8]
   22c50:	ea000001 	b	22c5c <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22c54:	e51b3010 	ldr	r3, [fp, #-16]
   22c58:	e50b3008 	str	r3, [fp, #-8]
		}

		if( xTCB->pxTaskTag != NULL )
   22c5c:	e51b3008 	ldr	r3, [fp, #-8]
   22c60:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   22c64:	e3530000 	cmp	r3, #0
   22c68:	0a000005 	beq	22c84 <xTaskCallApplicationTaskHook+0x60>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   22c6c:	e51b3008 	ldr	r3, [fp, #-8]
   22c70:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   22c74:	e51b0014 	ldr	r0, [fp, #-20]	@ 0xffffffec
   22c78:	e12fff33 	blx	r3
   22c7c:	e50b000c 	str	r0, [fp, #-12]
   22c80:	ea000001 	b	22c8c <xTaskCallApplicationTaskHook+0x68>
		}
		else
		{
			xReturn = pdFAIL;
   22c84:	e3a03000 	mov	r3, #0
   22c88:	e50b300c 	str	r3, [fp, #-12]
		}

		return xReturn;
   22c8c:	e51b300c 	ldr	r3, [fp, #-12]
	}
   22c90:	e1a00003 	mov	r0, r3
   22c94:	e24bd004 	sub	sp, fp, #4
   22c98:	e8bd8800 	pop	{fp, pc}
   22c9c:	000248a4 	andeq	r4, r2, r4, lsr #17

00022ca0 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   22ca0:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   22ca4:	e28db000 	add	fp, sp, #0
   22ca8:	e24dd00c 	sub	sp, sp, #12
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   22cac:	e59f30e0 	ldr	r3, [pc, #224]	@ 22d94 <vTaskSwitchContext+0xf4>
   22cb0:	e5933000 	ldr	r3, [r3]
   22cb4:	e3530000 	cmp	r3, #0
   22cb8:	0a000008 	beq	22ce0 <vTaskSwitchContext+0x40>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   22cbc:	e59f30d4 	ldr	r3, [pc, #212]	@ 22d98 <vTaskSwitchContext+0xf8>
   22cc0:	e3a02001 	mov	r2, #1
   22cc4:	e5832000 	str	r2, [r3]
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   22cc8:	ea00002d 	b	22d84 <vTaskSwitchContext+0xe4>
			--uxTopReadyPriority;
   22ccc:	e59f30c8 	ldr	r3, [pc, #200]	@ 22d9c <vTaskSwitchContext+0xfc>
   22cd0:	e5933000 	ldr	r3, [r3]
   22cd4:	e2433001 	sub	r3, r3, #1
   22cd8:	e59f20bc 	ldr	r2, [pc, #188]	@ 22d9c <vTaskSwitchContext+0xfc>
   22cdc:	e5823000 	str	r3, [r2]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   22ce0:	e59f30b4 	ldr	r3, [pc, #180]	@ 22d9c <vTaskSwitchContext+0xfc>
   22ce4:	e5932000 	ldr	r2, [r3]
   22ce8:	e59f10b0 	ldr	r1, [pc, #176]	@ 22da0 <vTaskSwitchContext+0x100>
   22cec:	e1a03002 	mov	r3, r2
   22cf0:	e1a03103 	lsl	r3, r3, #2
   22cf4:	e0833002 	add	r3, r3, r2
   22cf8:	e1a03103 	lsl	r3, r3, #2
   22cfc:	e0813003 	add	r3, r1, r3
   22d00:	e5933000 	ldr	r3, [r3]
   22d04:	e3530000 	cmp	r3, #0
   22d08:	0affffef 	beq	22ccc <vTaskSwitchContext+0x2c>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   22d0c:	e59f3088 	ldr	r3, [pc, #136]	@ 22d9c <vTaskSwitchContext+0xfc>
   22d10:	e5932000 	ldr	r2, [r3]
   22d14:	e1a03002 	mov	r3, r2
   22d18:	e1a03103 	lsl	r3, r3, #2
   22d1c:	e0833002 	add	r3, r3, r2
   22d20:	e1a03103 	lsl	r3, r3, #2
   22d24:	e59f2074 	ldr	r2, [pc, #116]	@ 22da0 <vTaskSwitchContext+0x100>
   22d28:	e0833002 	add	r3, r3, r2
   22d2c:	e50b3008 	str	r3, [fp, #-8]
   22d30:	e51b3008 	ldr	r3, [fp, #-8]
   22d34:	e5933004 	ldr	r3, [r3, #4]
   22d38:	e5932004 	ldr	r2, [r3, #4]
   22d3c:	e51b3008 	ldr	r3, [fp, #-8]
   22d40:	e5832004 	str	r2, [r3, #4]
   22d44:	e51b3008 	ldr	r3, [fp, #-8]
   22d48:	e5932004 	ldr	r2, [r3, #4]
   22d4c:	e51b3008 	ldr	r3, [fp, #-8]
   22d50:	e2833008 	add	r3, r3, #8
   22d54:	e1520003 	cmp	r2, r3
   22d58:	1a000004 	bne	22d70 <vTaskSwitchContext+0xd0>
   22d5c:	e51b3008 	ldr	r3, [fp, #-8]
   22d60:	e5933004 	ldr	r3, [r3, #4]
   22d64:	e5932004 	ldr	r2, [r3, #4]
   22d68:	e51b3008 	ldr	r3, [fp, #-8]
   22d6c:	e5832004 	str	r2, [r3, #4]
   22d70:	e51b3008 	ldr	r3, [fp, #-8]
   22d74:	e5933004 	ldr	r3, [r3, #4]
   22d78:	e593300c 	ldr	r3, [r3, #12]
   22d7c:	e59f2020 	ldr	r2, [pc, #32]	@ 22da4 <vTaskSwitchContext+0x104>
   22d80:	e5823000 	str	r3, [r2]
}
   22d84:	e320f000 	nop	{0}
   22d88:	e28bd000 	add	sp, fp, #0
   22d8c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   22d90:	e12fff1e 	bx	lr
   22d94:	00024990 	muleq	r2, r0, r9
   22d98:	00024998 	muleq	r2, r8, r9
   22d9c:	00024988 	andeq	r4, r2, r8, lsl #19
   22da0:	000248a8 	andeq	r4, r2, r8, lsr #17
   22da4:	000248a4 	andeq	r4, r2, r4, lsr #17

00022da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   22da8:	e92d4800 	push	{fp, lr}
   22dac:	e28db004 	add	fp, sp, #4
   22db0:	e24dd010 	sub	sp, sp, #16
   22db4:	e50b0010 	str	r0, [fp, #-16]
   22db8:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   22dbc:	e59f3074 	ldr	r3, [pc, #116]	@ 22e38 <vTaskPlaceOnEventList+0x90>
   22dc0:	e5933000 	ldr	r3, [r3]
   22dc4:	e2833018 	add	r3, r3, #24
   22dc8:	e1a01003 	mov	r1, r3
   22dcc:	e51b0010 	ldr	r0, [fp, #-16]
   22dd0:	ebfff82b 	bl	20e84 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22dd4:	e59f305c 	ldr	r3, [pc, #92]	@ 22e38 <vTaskPlaceOnEventList+0x90>
   22dd8:	e5933000 	ldr	r3, [r3]
   22ddc:	e2833004 	add	r3, r3, #4
   22de0:	e1a00003 	mov	r0, r3
   22de4:	ebfff85c 	bl	20f5c <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   22de8:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   22dec:	e3730001 	cmn	r3, #1
   22df0:	1a000006 	bne	22e10 <vTaskPlaceOnEventList+0x68>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22df4:	e59f303c 	ldr	r3, [pc, #60]	@ 22e38 <vTaskPlaceOnEventList+0x90>
   22df8:	e5933000 	ldr	r3, [r3]
   22dfc:	e2833004 	add	r3, r3, #4
   22e00:	e1a01003 	mov	r1, r3
   22e04:	e59f0030 	ldr	r0, [pc, #48]	@ 22e3c <vTaskPlaceOnEventList+0x94>
   22e08:	ebfff7f7 	bl	20dec <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   22e0c:	ea000006 	b	22e2c <vTaskPlaceOnEventList+0x84>
			xTimeToWake = xTickCount + xTicksToWait;
   22e10:	e59f3028 	ldr	r3, [pc, #40]	@ 22e40 <vTaskPlaceOnEventList+0x98>
   22e14:	e5933000 	ldr	r3, [r3]
   22e18:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   22e1c:	e0823003 	add	r3, r2, r3
   22e20:	e50b3008 	str	r3, [fp, #-8]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   22e24:	e51b0008 	ldr	r0, [fp, #-8]
   22e28:	eb00013f 	bl	2332c <prvAddCurrentTaskToDelayedList>
}
   22e2c:	e320f000 	nop	{0}
   22e30:	e24bd004 	sub	sp, fp, #4
   22e34:	e8bd8800 	pop	{fp, pc}
   22e38:	000248a4 	andeq	r4, r2, r4, lsr #17
   22e3c:	00024968 	andeq	r4, r2, r8, ror #18
   22e40:	00024980 	andeq	r4, r2, r0, lsl #19

00022e44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   22e44:	e92d4800 	push	{fp, lr}
   22e48:	e28db004 	add	fp, sp, #4
   22e4c:	e24dd010 	sub	sp, sp, #16
   22e50:	e50b0010 	str	r0, [fp, #-16]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   22e54:	e51b3010 	ldr	r3, [fp, #-16]
   22e58:	e593300c 	ldr	r3, [r3, #12]
   22e5c:	e593300c 	ldr	r3, [r3, #12]
   22e60:	e50b300c 	str	r3, [fp, #-12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   22e64:	e51b300c 	ldr	r3, [fp, #-12]
   22e68:	e2833018 	add	r3, r3, #24
   22e6c:	e1a00003 	mov	r0, r3
   22e70:	ebfff839 	bl	20f5c <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22e74:	e59f30cc 	ldr	r3, [pc, #204]	@ 22f48 <xTaskRemoveFromEventList+0x104>
   22e78:	e5933000 	ldr	r3, [r3]
   22e7c:	e3530000 	cmp	r3, #0
   22e80:	1a00001b 	bne	22ef4 <xTaskRemoveFromEventList+0xb0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   22e84:	e51b300c 	ldr	r3, [fp, #-12]
   22e88:	e2833004 	add	r3, r3, #4
   22e8c:	e1a00003 	mov	r0, r3
   22e90:	ebfff831 	bl	20f5c <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   22e94:	e51b300c 	ldr	r3, [fp, #-12]
   22e98:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22e9c:	e59f30a8 	ldr	r3, [pc, #168]	@ 22f4c <xTaskRemoveFromEventList+0x108>
   22ea0:	e5933000 	ldr	r3, [r3]
   22ea4:	e1520003 	cmp	r2, r3
   22ea8:	9a000003 	bls	22ebc <xTaskRemoveFromEventList+0x78>
   22eac:	e51b300c 	ldr	r3, [fp, #-12]
   22eb0:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22eb4:	e59f2090 	ldr	r2, [pc, #144]	@ 22f4c <xTaskRemoveFromEventList+0x108>
   22eb8:	e5823000 	str	r3, [r2]
   22ebc:	e51b300c 	ldr	r3, [fp, #-12]
   22ec0:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22ec4:	e1a03002 	mov	r3, r2
   22ec8:	e1a03103 	lsl	r3, r3, #2
   22ecc:	e0833002 	add	r3, r3, r2
   22ed0:	e1a03103 	lsl	r3, r3, #2
   22ed4:	e59f2074 	ldr	r2, [pc, #116]	@ 22f50 <xTaskRemoveFromEventList+0x10c>
   22ed8:	e0832002 	add	r2, r3, r2
   22edc:	e51b300c 	ldr	r3, [fp, #-12]
   22ee0:	e2833004 	add	r3, r3, #4
   22ee4:	e1a01003 	mov	r1, r3
   22ee8:	e1a00002 	mov	r0, r2
   22eec:	ebfff7be 	bl	20dec <vListInsertEnd>
   22ef0:	ea000004 	b	22f08 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   22ef4:	e51b300c 	ldr	r3, [fp, #-12]
   22ef8:	e2833018 	add	r3, r3, #24
   22efc:	e1a01003 	mov	r1, r3
   22f00:	e59f004c 	ldr	r0, [pc, #76]	@ 22f54 <xTaskRemoveFromEventList+0x110>
   22f04:	ebfff7b8 	bl	20dec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   22f08:	e51b300c 	ldr	r3, [fp, #-12]
   22f0c:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
   22f10:	e59f3040 	ldr	r3, [pc, #64]	@ 22f58 <xTaskRemoveFromEventList+0x114>
   22f14:	e5933000 	ldr	r3, [r3]
   22f18:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   22f1c:	e1520003 	cmp	r2, r3
   22f20:	3a000002 	bcc	22f30 <xTaskRemoveFromEventList+0xec>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   22f24:	e3a03001 	mov	r3, #1
   22f28:	e50b3008 	str	r3, [fp, #-8]
   22f2c:	ea000001 	b	22f38 <xTaskRemoveFromEventList+0xf4>
	}
	else
	{
		xReturn = pdFALSE;
   22f30:	e3a03000 	mov	r3, #0
   22f34:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   22f38:	e51b3008 	ldr	r3, [fp, #-8]
}
   22f3c:	e1a00003 	mov	r0, r3
   22f40:	e24bd004 	sub	sp, fp, #4
   22f44:	e8bd8800 	pop	{fp, pc}
   22f48:	00024990 	muleq	r2, r0, r9
   22f4c:	00024988 	andeq	r4, r2, r8, lsl #19
   22f50:	000248a8 	andeq	r4, r2, r8, lsr #17
   22f54:	0002493c 	andeq	r4, r2, ip, lsr r9
   22f58:	000248a4 	andeq	r4, r2, r4, lsr #17

00022f5c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   22f5c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   22f60:	e28db000 	add	fp, sp, #0
   22f64:	e24dd00c 	sub	sp, sp, #12
   22f68:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   22f6c:	e59f3028 	ldr	r3, [pc, #40]	@ 22f9c <vTaskSetTimeOutState+0x40>
   22f70:	e5932000 	ldr	r2, [r3]
   22f74:	e51b3008 	ldr	r3, [fp, #-8]
   22f78:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   22f7c:	e59f301c 	ldr	r3, [pc, #28]	@ 22fa0 <vTaskSetTimeOutState+0x44>
   22f80:	e5932000 	ldr	r2, [r3]
   22f84:	e51b3008 	ldr	r3, [fp, #-8]
   22f88:	e5832004 	str	r2, [r3, #4]
}
   22f8c:	e320f000 	nop	{0}
   22f90:	e28bd000 	add	sp, fp, #0
   22f94:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   22f98:	e12fff1e 	bx	lr
   22f9c:	0002499c 	muleq	r2, ip, r9
   22fa0:	00024980 	andeq	r4, r2, r0, lsl #19

00022fa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   22fa4:	e92d4800 	push	{fp, lr}
   22fa8:	e28db004 	add	fp, sp, #4
   22fac:	e24dd010 	sub	sp, sp, #16
   22fb0:	e50b0010 	str	r0, [fp, #-16]
   22fb4:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   22fb8:	ebfff560 	bl	20540 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   22fbc:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   22fc0:	e5933000 	ldr	r3, [r3]
   22fc4:	e3730001 	cmn	r3, #1
   22fc8:	1a000002 	bne	22fd8 <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   22fcc:	e3a03000 	mov	r3, #0
   22fd0:	e50b3008 	str	r3, [fp, #-8]
   22fd4:	ea000028 	b	2307c <xTaskCheckForTimeOut+0xd8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   22fd8:	e51b3010 	ldr	r3, [fp, #-16]
   22fdc:	e5932000 	ldr	r2, [r3]
   22fe0:	e59f30a8 	ldr	r3, [pc, #168]	@ 23090 <xTaskCheckForTimeOut+0xec>
   22fe4:	e5933000 	ldr	r3, [r3]
   22fe8:	e1520003 	cmp	r2, r3
   22fec:	0a000008 	beq	23014 <xTaskCheckForTimeOut+0x70>
   22ff0:	e51b3010 	ldr	r3, [fp, #-16]
   22ff4:	e5932004 	ldr	r2, [r3, #4]
   22ff8:	e59f3094 	ldr	r3, [pc, #148]	@ 23094 <xTaskCheckForTimeOut+0xf0>
   22ffc:	e5933000 	ldr	r3, [r3]
   23000:	e1520003 	cmp	r2, r3
   23004:	8a000002 	bhi	23014 <xTaskCheckForTimeOut+0x70>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   23008:	e3a03001 	mov	r3, #1
   2300c:	e50b3008 	str	r3, [fp, #-8]
   23010:	ea000019 	b	2307c <xTaskCheckForTimeOut+0xd8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   23014:	e59f3078 	ldr	r3, [pc, #120]	@ 23094 <xTaskCheckForTimeOut+0xf0>
   23018:	e5932000 	ldr	r2, [r3]
   2301c:	e51b3010 	ldr	r3, [fp, #-16]
   23020:	e5933004 	ldr	r3, [r3, #4]
   23024:	e0422003 	sub	r2, r2, r3
   23028:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2302c:	e5933000 	ldr	r3, [r3]
   23030:	e1520003 	cmp	r2, r3
   23034:	2a00000e 	bcs	23074 <xTaskCheckForTimeOut+0xd0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   23038:	e59f3054 	ldr	r3, [pc, #84]	@ 23094 <xTaskCheckForTimeOut+0xf0>
   2303c:	e5932000 	ldr	r2, [r3]
   23040:	e51b3010 	ldr	r3, [fp, #-16]
   23044:	e5933004 	ldr	r3, [r3, #4]
   23048:	e0423003 	sub	r3, r2, r3
   2304c:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   23050:	e5922000 	ldr	r2, [r2]
   23054:	e0422003 	sub	r2, r2, r3
   23058:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2305c:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   23060:	e51b0010 	ldr	r0, [fp, #-16]
   23064:	ebffffbc 	bl	22f5c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   23068:	e3a03000 	mov	r3, #0
   2306c:	e50b3008 	str	r3, [fp, #-8]
   23070:	ea000001 	b	2307c <xTaskCheckForTimeOut+0xd8>
		}
		else
		{
			xReturn = pdTRUE;
   23074:	e3a03001 	mov	r3, #1
   23078:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	taskEXIT_CRITICAL();
   2307c:	ebfff540 	bl	20584 <vPortExitCritical>

	return xReturn;
   23080:	e51b3008 	ldr	r3, [fp, #-8]
}
   23084:	e1a00003 	mov	r0, r3
   23088:	e24bd004 	sub	sp, fp, #4
   2308c:	e8bd8800 	pop	{fp, pc}
   23090:	0002499c 	muleq	r2, ip, r9
   23094:	00024980 	andeq	r4, r2, r0, lsl #19

00023098 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   23098:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   2309c:	e28db000 	add	fp, sp, #0
	xMissedYield = pdTRUE;
   230a0:	e59f3014 	ldr	r3, [pc, #20]	@ 230bc <vTaskMissedYield+0x24>
   230a4:	e3a02001 	mov	r2, #1
   230a8:	e5832000 	str	r2, [r3]
}
   230ac:	e320f000 	nop	{0}
   230b0:	e28bd000 	add	sp, fp, #0
   230b4:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   230b8:	e12fff1e 	bx	lr
   230bc:	00024998 	muleq	r2, r8, r9

000230c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   230c0:	e92d4800 	push	{fp, lr}
   230c4:	e28db004 	add	fp, sp, #4
   230c8:	e24dd008 	sub	sp, sp, #8
   230cc:	e50b0008 	str	r0, [fp, #-8]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   230d0:	eb000066 	bl	23270 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   230d4:	e59f3010 	ldr	r3, [pc, #16]	@ 230ec <prvIdleTask+0x2c>
   230d8:	e5933000 	ldr	r3, [r3]
   230dc:	e3530001 	cmp	r3, #1
   230e0:	9afffffa 	bls	230d0 <prvIdleTask+0x10>
			{
				taskYIELD();
   230e4:	ef000000 	svc	0x00000000
		prvCheckTasksWaitingTermination();
   230e8:	eafffff8 	b	230d0 <prvIdleTask+0x10>
   230ec:	000248a8 	andeq	r4, r2, r8, lsr #17

000230f0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   230f0:	e92d4800 	push	{fp, lr}
   230f4:	e28db004 	add	fp, sp, #4
   230f8:	e24dd010 	sub	sp, sp, #16
   230fc:	e50b0008 	str	r0, [fp, #-8]
   23100:	e50b100c 	str	r1, [fp, #-12]
   23104:	e50b2010 	str	r2, [fp, #-16]
   23108:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   2310c:	e51b3008 	ldr	r3, [fp, #-8]
   23110:	e2833034 	add	r3, r3, #52	@ 0x34
   23114:	e3a02010 	mov	r2, #16
   23118:	e51b100c 	ldr	r1, [fp, #-12]
   2311c:	e1a00003 	mov	r0, r3
   23120:	eb0004f2 	bl	244f0 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   23124:	e51b3008 	ldr	r3, [fp, #-8]
   23128:	e3a02000 	mov	r2, #0
   2312c:	e5c32043 	strb	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   23130:	e51b3010 	ldr	r3, [fp, #-16]
   23134:	e3530004 	cmp	r3, #4
   23138:	9a000001 	bls	23144 <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   2313c:	e3a03004 	mov	r3, #4
   23140:	e50b3010 	str	r3, [fp, #-16]
	}

	pxTCB->uxPriority = uxPriority;
   23144:	e51b3008 	ldr	r3, [fp, #-8]
   23148:	e51b2010 	ldr	r2, [fp, #-16]
   2314c:	e583202c 	str	r2, [r3, #44]	@ 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   23150:	e51b3008 	ldr	r3, [fp, #-8]
   23154:	e2833004 	add	r3, r3, #4
   23158:	e1a00003 	mov	r0, r3
   2315c:	ebfff717 	bl	20dc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   23160:	e51b3008 	ldr	r3, [fp, #-8]
   23164:	e2833018 	add	r3, r3, #24
   23168:	e1a00003 	mov	r0, r3
   2316c:	ebfff713 	bl	20dc0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   23170:	e51b3008 	ldr	r3, [fp, #-8]
   23174:	e51b2008 	ldr	r2, [fp, #-8]
   23178:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   2317c:	e51b3010 	ldr	r3, [fp, #-16]
   23180:	e2632005 	rsb	r2, r3, #5
   23184:	e51b3008 	ldr	r3, [fp, #-8]
   23188:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   2318c:	e51b3008 	ldr	r3, [fp, #-8]
   23190:	e51b2008 	ldr	r2, [fp, #-8]
   23194:	e5832024 	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   23198:	e51b3008 	ldr	r3, [fp, #-8]
   2319c:	e3a02000 	mov	r2, #0
   231a0:	e5832044 	str	r2, [r3, #68]	@ 0x44
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   231a4:	e320f000 	nop	{0}
   231a8:	e24bd004 	sub	sp, fp, #4
   231ac:	e8bd8800 	pop	{fp, pc}

000231b0 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   231b0:	e92d4800 	push	{fp, lr}
   231b4:	e28db004 	add	fp, sp, #4
   231b8:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   231bc:	e3a03000 	mov	r3, #0
   231c0:	e50b3008 	str	r3, [fp, #-8]
   231c4:	ea00000b 	b	231f8 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   231c8:	e51b2008 	ldr	r2, [fp, #-8]
   231cc:	e1a03002 	mov	r3, r2
   231d0:	e1a03103 	lsl	r3, r3, #2
   231d4:	e0833002 	add	r3, r3, r2
   231d8:	e1a03103 	lsl	r3, r3, #2
   231dc:	e59f206c 	ldr	r2, [pc, #108]	@ 23250 <prvInitialiseTaskLists+0xa0>
   231e0:	e0833002 	add	r3, r3, r2
   231e4:	e1a00003 	mov	r0, r3
   231e8:	ebfff6da 	bl	20d58 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   231ec:	e51b3008 	ldr	r3, [fp, #-8]
   231f0:	e2833001 	add	r3, r3, #1
   231f4:	e50b3008 	str	r3, [fp, #-8]
   231f8:	e51b3008 	ldr	r3, [fp, #-8]
   231fc:	e3530004 	cmp	r3, #4
   23200:	9afffff0 	bls	231c8 <prvInitialiseTaskLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   23204:	e59f0048 	ldr	r0, [pc, #72]	@ 23254 <prvInitialiseTaskLists+0xa4>
   23208:	ebfff6d2 	bl	20d58 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   2320c:	e59f0044 	ldr	r0, [pc, #68]	@ 23258 <prvInitialiseTaskLists+0xa8>
   23210:	ebfff6d0 	bl	20d58 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   23214:	e59f0040 	ldr	r0, [pc, #64]	@ 2325c <prvInitialiseTaskLists+0xac>
   23218:	ebfff6ce 	bl	20d58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   2321c:	e59f003c 	ldr	r0, [pc, #60]	@ 23260 <prvInitialiseTaskLists+0xb0>
   23220:	ebfff6cc 	bl	20d58 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   23224:	e59f0038 	ldr	r0, [pc, #56]	@ 23264 <prvInitialiseTaskLists+0xb4>
   23228:	ebfff6ca 	bl	20d58 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   2322c:	e59f3034 	ldr	r3, [pc, #52]	@ 23268 <prvInitialiseTaskLists+0xb8>
   23230:	e59f201c 	ldr	r2, [pc, #28]	@ 23254 <prvInitialiseTaskLists+0xa4>
   23234:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   23238:	e59f302c 	ldr	r3, [pc, #44]	@ 2326c <prvInitialiseTaskLists+0xbc>
   2323c:	e59f2014 	ldr	r2, [pc, #20]	@ 23258 <prvInitialiseTaskLists+0xa8>
   23240:	e5832000 	str	r2, [r3]
}
   23244:	e320f000 	nop	{0}
   23248:	e24bd004 	sub	sp, fp, #4
   2324c:	e8bd8800 	pop	{fp, pc}
   23250:	000248a8 	andeq	r4, r2, r8, lsr #17
   23254:	0002490c 	andeq	r4, r2, ip, lsl #18
   23258:	00024920 	andeq	r4, r2, r0, lsr #18
   2325c:	0002493c 	andeq	r4, r2, ip, lsr r9
   23260:	00024950 	andeq	r4, r2, r0, asr r9
   23264:	00024968 	andeq	r4, r2, r8, ror #18
   23268:	00024934 	andeq	r4, r2, r4, lsr r9
   2326c:	00024938 	andeq	r4, r2, r8, lsr r9

00023270 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   23270:	e92d4800 	push	{fp, lr}
   23274:	e28db004 	add	fp, sp, #4
   23278:	e24dd008 	sub	sp, sp, #8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   2327c:	e59f309c 	ldr	r3, [pc, #156]	@ 23320 <prvCheckTasksWaitingTermination+0xb0>
   23280:	e5933000 	ldr	r3, [r3]
   23284:	e3530000 	cmp	r3, #0
   23288:	0a000021 	beq	23314 <prvCheckTasksWaitingTermination+0xa4>
		{
			vTaskSuspendAll();
   2328c:	ebfffd16 	bl	226ec <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   23290:	e59f308c 	ldr	r3, [pc, #140]	@ 23324 <prvCheckTasksWaitingTermination+0xb4>
   23294:	e5933000 	ldr	r3, [r3]
   23298:	e3530000 	cmp	r3, #0
   2329c:	03a03001 	moveq	r3, #1
   232a0:	13a03000 	movne	r3, #0
   232a4:	e6ef3073 	uxtb	r3, r3
   232a8:	e50b3008 	str	r3, [fp, #-8]
			xTaskResumeAll();
   232ac:	ebfffd1a 	bl	2271c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   232b0:	e51b3008 	ldr	r3, [fp, #-8]
   232b4:	e3530000 	cmp	r3, #0
   232b8:	1a000015 	bne	23314 <prvCheckTasksWaitingTermination+0xa4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   232bc:	ebfff49f 	bl	20540 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   232c0:	e59f305c 	ldr	r3, [pc, #92]	@ 23324 <prvCheckTasksWaitingTermination+0xb4>
   232c4:	e593300c 	ldr	r3, [r3, #12]
   232c8:	e593300c 	ldr	r3, [r3, #12]
   232cc:	e50b300c 	str	r3, [fp, #-12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   232d0:	e51b300c 	ldr	r3, [fp, #-12]
   232d4:	e2833004 	add	r3, r3, #4
   232d8:	e1a00003 	mov	r0, r3
   232dc:	ebfff71e 	bl	20f5c <vListRemove>
					--uxCurrentNumberOfTasks;
   232e0:	e59f3040 	ldr	r3, [pc, #64]	@ 23328 <prvCheckTasksWaitingTermination+0xb8>
   232e4:	e5933000 	ldr	r3, [r3]
   232e8:	e2433001 	sub	r3, r3, #1
   232ec:	e59f2034 	ldr	r2, [pc, #52]	@ 23328 <prvCheckTasksWaitingTermination+0xb8>
   232f0:	e5823000 	str	r3, [r2]
					--uxTasksDeleted;
   232f4:	e59f3024 	ldr	r3, [pc, #36]	@ 23320 <prvCheckTasksWaitingTermination+0xb0>
   232f8:	e5933000 	ldr	r3, [r3]
   232fc:	e2433001 	sub	r3, r3, #1
   23300:	e59f2018 	ldr	r2, [pc, #24]	@ 23320 <prvCheckTasksWaitingTermination+0xb0>
   23304:	e5823000 	str	r3, [r2]
				}
				taskEXIT_CRITICAL();
   23308:	ebfff49d 	bl	20584 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   2330c:	e51b000c 	ldr	r0, [fp, #-12]
   23310:	eb00005f 	bl	23494 <prvDeleteTCB>
			}
		}
	}
	#endif
}
   23314:	e320f000 	nop	{0}
   23318:	e24bd004 	sub	sp, fp, #4
   2331c:	e8bd8800 	pop	{fp, pc}
   23320:	00024964 	andeq	r4, r2, r4, ror #18
   23324:	00024950 	andeq	r4, r2, r0, asr r9
   23328:	0002497c 	andeq	r4, r2, ip, ror r9

0002332c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   2332c:	e92d4800 	push	{fp, lr}
   23330:	e28db004 	add	fp, sp, #4
   23334:	e24dd008 	sub	sp, sp, #8
   23338:	e50b0008 	str	r0, [fp, #-8]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   2333c:	e59f308c 	ldr	r3, [pc, #140]	@ 233d0 <prvAddCurrentTaskToDelayedList+0xa4>
   23340:	e5933000 	ldr	r3, [r3]
   23344:	e51b2008 	ldr	r2, [fp, #-8]
   23348:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   2334c:	e59f3080 	ldr	r3, [pc, #128]	@ 233d4 <prvAddCurrentTaskToDelayedList+0xa8>
   23350:	e5933000 	ldr	r3, [r3]
   23354:	e51b2008 	ldr	r2, [fp, #-8]
   23358:	e1520003 	cmp	r2, r3
   2335c:	2a000008 	bcs	23384 <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   23360:	e59f3070 	ldr	r3, [pc, #112]	@ 233d8 <prvAddCurrentTaskToDelayedList+0xac>
   23364:	e5932000 	ldr	r2, [r3]
   23368:	e59f3060 	ldr	r3, [pc, #96]	@ 233d0 <prvAddCurrentTaskToDelayedList+0xa4>
   2336c:	e5933000 	ldr	r3, [r3]
   23370:	e2833004 	add	r3, r3, #4
   23374:	e1a01003 	mov	r1, r3
   23378:	e1a00002 	mov	r0, r2
   2337c:	ebfff6c0 	bl	20e84 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
   23380:	ea00000f 	b	233c4 <prvAddCurrentTaskToDelayedList+0x98>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   23384:	e59f3050 	ldr	r3, [pc, #80]	@ 233dc <prvAddCurrentTaskToDelayedList+0xb0>
   23388:	e5932000 	ldr	r2, [r3]
   2338c:	e59f303c 	ldr	r3, [pc, #60]	@ 233d0 <prvAddCurrentTaskToDelayedList+0xa4>
   23390:	e5933000 	ldr	r3, [r3]
   23394:	e2833004 	add	r3, r3, #4
   23398:	e1a01003 	mov	r1, r3
   2339c:	e1a00002 	mov	r0, r2
   233a0:	ebfff6b7 	bl	20e84 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
   233a4:	e59f3034 	ldr	r3, [pc, #52]	@ 233e0 <prvAddCurrentTaskToDelayedList+0xb4>
   233a8:	e5933000 	ldr	r3, [r3]
   233ac:	e51b2008 	ldr	r2, [fp, #-8]
   233b0:	e1520003 	cmp	r2, r3
   233b4:	2a000002 	bcs	233c4 <prvAddCurrentTaskToDelayedList+0x98>
			xNextTaskUnblockTime = xTimeToWake;
   233b8:	e59f2020 	ldr	r2, [pc, #32]	@ 233e0 <prvAddCurrentTaskToDelayedList+0xb4>
   233bc:	e51b3008 	ldr	r3, [fp, #-8]
   233c0:	e5823000 	str	r3, [r2]
}
   233c4:	e320f000 	nop	{0}
   233c8:	e24bd004 	sub	sp, fp, #4
   233cc:	e8bd8800 	pop	{fp, pc}
   233d0:	000248a4 	andeq	r4, r2, r4, lsr #17
   233d4:	00024980 	andeq	r4, r2, r0, lsl #19
   233d8:	00024938 	andeq	r4, r2, r8, lsr r9
   233dc:	00024934 	andeq	r4, r2, r4, lsr r9
   233e0:	00024818 	andeq	r4, r2, r8, lsl r8

000233e4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   233e4:	e92d4800 	push	{fp, lr}
   233e8:	e28db004 	add	fp, sp, #4
   233ec:	e24dd010 	sub	sp, sp, #16
   233f0:	e1a03000 	mov	r3, r0
   233f4:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
   233f8:	e14b30be 	strh	r3, [fp, #-14]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   233fc:	e3a00048 	mov	r0, #72	@ 0x48
   23400:	eb00028f 	bl	23e44 <pvPortMalloc>
   23404:	e50b0008 	str	r0, [fp, #-8]

	if( pxNewTCB != NULL )
   23408:	e51b3008 	ldr	r3, [fp, #-8]
   2340c:	e3530000 	cmp	r3, #0
   23410:	0a00001b 	beq	23484 <prvAllocateTCBAndStack+0xa0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   23414:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   23418:	e3530000 	cmp	r3, #0
   2341c:	1a000005 	bne	23438 <prvAllocateTCBAndStack+0x54>
   23420:	e15b30be 	ldrh	r3, [fp, #-14]
   23424:	e1a03103 	lsl	r3, r3, #2
   23428:	e1a00003 	mov	r0, r3
   2342c:	eb000284 	bl	23e44 <pvPortMalloc>
   23430:	e1a03000 	mov	r3, r0
   23434:	ea000000 	b	2343c <prvAllocateTCBAndStack+0x58>
   23438:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2343c:	e51b2008 	ldr	r2, [fp, #-8]
   23440:	e5823030 	str	r3, [r2, #48]	@ 0x30

		if( pxNewTCB->pxStack == NULL )
   23444:	e51b3008 	ldr	r3, [fp, #-8]
   23448:	e5933030 	ldr	r3, [r3, #48]	@ 0x30
   2344c:	e3530000 	cmp	r3, #0
   23450:	1a000004 	bne	23468 <prvAllocateTCBAndStack+0x84>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   23454:	e51b0008 	ldr	r0, [fp, #-8]
   23458:	eb0002eb 	bl	2400c <vPortFree>
			pxNewTCB = NULL;
   2345c:	e3a03000 	mov	r3, #0
   23460:	e50b3008 	str	r3, [fp, #-8]
   23464:	ea000006 	b	23484 <prvAllocateTCBAndStack+0xa0>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   23468:	e51b3008 	ldr	r3, [fp, #-8]
   2346c:	e5930030 	ldr	r0, [r3, #48]	@ 0x30
   23470:	e15b30be 	ldrh	r3, [fp, #-14]
   23474:	e1a03103 	lsl	r3, r3, #2
   23478:	e1a02003 	mov	r2, r3
   2347c:	e3a010a5 	mov	r1, #165	@ 0xa5
   23480:	eb00044e 	bl	245c0 <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   23484:	e51b3008 	ldr	r3, [fp, #-8]
}
   23488:	e1a00003 	mov	r0, r3
   2348c:	e24bd004 	sub	sp, fp, #4
   23490:	e8bd8800 	pop	{fp, pc}

00023494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   23494:	e92d4800 	push	{fp, lr}
   23498:	e28db004 	add	fp, sp, #4
   2349c:	e24dd008 	sub	sp, sp, #8
   234a0:	e50b0008 	str	r0, [fp, #-8]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   234a4:	e51b3008 	ldr	r3, [fp, #-8]
   234a8:	e5933030 	ldr	r3, [r3, #48]	@ 0x30
   234ac:	e1a00003 	mov	r0, r3
   234b0:	eb0002d5 	bl	2400c <vPortFree>
		vPortFree( pxTCB );
   234b4:	e51b0008 	ldr	r0, [fp, #-8]
   234b8:	eb0002d3 	bl	2400c <vPortFree>
	}
   234bc:	e320f000 	nop	{0}
   234c0:	e24bd004 	sub	sp, fp, #4
   234c4:	e8bd8800 	pop	{fp, pc}

000234c8 <handleRange>:

// Remember which interrupts have been enabled:
static unsigned long enabled[3];

static void handleRange (unsigned long pending, const unsigned int base)
{
   234c8:	e92d4800 	push	{fp, lr}
   234cc:	e28db004 	add	fp, sp, #4
   234d0:	e24dd010 	sub	sp, sp, #16
   234d4:	e50b0010 	str	r0, [fp, #-16]
   234d8:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
	while (pending)
   234dc:	ea00001e 	b	2355c <handleRange+0x94>
	{
		// Get index of first set bit:
		unsigned int bit = 31 - __builtin_clz(pending);
   234e0:	e51b3010 	ldr	r3, [fp, #-16]
   234e4:	e16f3f13 	clz	r3, r3
   234e8:	e263301f 	rsb	r3, r3, #31
   234ec:	e50b3008 	str	r3, [fp, #-8]

		// Map to IRQ number:
		unsigned int irq = base + bit;
   234f0:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   234f4:	e51b3008 	ldr	r3, [fp, #-8]
   234f8:	e0823003 	add	r3, r2, r3
   234fc:	e50b300c 	str	r3, [fp, #-12]

		// Call interrupt handler, if enabled:
		if (g_VectorTable[irq].pfnHandler)
   23500:	e59f2070 	ldr	r2, [pc, #112]	@ 23578 <handleRange+0xb0>
   23504:	e51b300c 	ldr	r3, [fp, #-12]
   23508:	e7923183 	ldr	r3, [r2, r3, lsl #3]
   2350c:	e3530000 	cmp	r3, #0
   23510:	0a00000a 	beq	23540 <handleRange+0x78>
			g_VectorTable[irq].pfnHandler(irq, g_VectorTable[irq].pParam);
   23514:	e59f205c 	ldr	r2, [pc, #92]	@ 23578 <handleRange+0xb0>
   23518:	e51b300c 	ldr	r3, [fp, #-12]
   2351c:	e7922183 	ldr	r2, [r2, r3, lsl #3]
   23520:	e59f1050 	ldr	r1, [pc, #80]	@ 23578 <handleRange+0xb0>
   23524:	e51b300c 	ldr	r3, [fp, #-12]
   23528:	e1a03183 	lsl	r3, r3, #3
   2352c:	e0813003 	add	r3, r1, r3
   23530:	e5933004 	ldr	r3, [r3, #4]
   23534:	e1a01003 	mov	r1, r3
   23538:	e51b000c 	ldr	r0, [fp, #-12]
   2353c:	e12fff32 	blx	r2

		// Clear bit in bitfield:
		pending &= ~(1UL << bit);
   23540:	e3a02001 	mov	r2, #1
   23544:	e51b3008 	ldr	r3, [fp, #-8]
   23548:	e1a03312 	lsl	r3, r2, r3
   2354c:	e1e03003 	mvn	r3, r3
   23550:	e51b2010 	ldr	r2, [fp, #-16]
   23554:	e0033002 	and	r3, r3, r2
   23558:	e50b3010 	str	r3, [fp, #-16]
	while (pending)
   2355c:	e51b3010 	ldr	r3, [fp, #-16]
   23560:	e3530000 	cmp	r3, #0
   23564:	1affffdd 	bne	234e0 <handleRange+0x18>
	}
}
   23568:	e320f000 	nop	{0}
   2356c:	e320f000 	nop	{0}
   23570:	e24bd004 	sub	sp, fp, #4
   23574:	e8bd8800 	pop	{fp, pc}
   23578:	000249a4 	andeq	r4, r2, r4, lsr #19

0002357c <irqHandler>:
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler (void)
{
   2357c:	e92d4830 	push	{r4, r5, fp, lr}
   23580:	e28db00c 	add	fp, sp, #12
	register unsigned long ulMaskedStatus = pRegs->IRQBasic;
   23584:	e59f3088 	ldr	r3, [pc, #136]	@ 23614 <irqHandler+0x98>
   23588:	e5934000 	ldr	r4, [r3]

	// Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0):
	if (ulMaskedStatus & (1UL << 8))
   2358c:	e2043c01 	and	r3, r4, #256	@ 0x100
   23590:	e3530000 	cmp	r3, #0
   23594:	0a000007 	beq	235b8 <irqHandler+0x3c>
		handleRange(pRegs->Pending1 & enabled[0], 0);
   23598:	e59f3074 	ldr	r3, [pc, #116]	@ 23614 <irqHandler+0x98>
   2359c:	e5932004 	ldr	r2, [r3, #4]
   235a0:	e59f3070 	ldr	r3, [pc, #112]	@ 23618 <irqHandler+0x9c>
   235a4:	e5933000 	ldr	r3, [r3]
   235a8:	e0033002 	and	r3, r3, r2
   235ac:	e3a01000 	mov	r1, #0
   235b0:	e1a00003 	mov	r0, r3
   235b4:	ebffffc3 	bl	234c8 <handleRange>

	// Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32):
	if (ulMaskedStatus & (1UL << 9))
   235b8:	e2043c02 	and	r3, r4, #512	@ 0x200
   235bc:	e3530000 	cmp	r3, #0
   235c0:	0a000007 	beq	235e4 <irqHandler+0x68>
		handleRange(pRegs->Pending2 & enabled[1], 32);
   235c4:	e59f3048 	ldr	r3, [pc, #72]	@ 23614 <irqHandler+0x98>
   235c8:	e5932008 	ldr	r2, [r3, #8]
   235cc:	e59f3044 	ldr	r3, [pc, #68]	@ 23618 <irqHandler+0x9c>
   235d0:	e5933004 	ldr	r3, [r3, #4]
   235d4:	e0033002 	and	r3, r3, r2
   235d8:	e3a01020 	mov	r1, #32
   235dc:	e1a00003 	mov	r0, r3
   235e0:	ebffffb8 	bl	234c8 <handleRange>

	// Bits 7 through 0 in IRQBasic represent interrupts 64-71:
	if (ulMaskedStatus & 0xFF)
   235e4:	e6ef3074 	uxtb	r3, r4
   235e8:	e3530000 	cmp	r3, #0
   235ec:	0a000006 	beq	2360c <irqHandler+0x90>
		handleRange(ulMaskedStatus & 0xFF & enabled[2], 64);
   235f0:	e59f3020 	ldr	r3, [pc, #32]	@ 23618 <irqHandler+0x9c>
   235f4:	e5933008 	ldr	r3, [r3, #8]
   235f8:	e0033004 	and	r3, r3, r4
   235fc:	e6ef3073 	uxtb	r3, r3
   23600:	e3a01040 	mov	r1, #64	@ 0x40
   23604:	e1a00003 	mov	r0, r3
   23608:	ebffffae 	bl	234c8 <handleRange>
}
   2360c:	e320f000 	nop	{0}
   23610:	e8bd8830 	pop	{r4, r5, fp, pc}
   23614:	2000b200 	andcs	fp, r0, r0, lsl #4
   23618:	00024be4 	andeq	r4, r2, r4, ror #23

0002361c <irqUnblock>:

void irqUnblock (void)
{
   2361c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23620:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsie i" ::: "memory");
   23624:	f1080080 	cpsie	i
}
   23628:	e320f000 	nop	{0}
   2362c:	e28bd000 	add	sp, fp, #0
   23630:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23634:	e12fff1e 	bx	lr

00023638 <irqBlock>:

void irqBlock (void)
{
   23638:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   2363c:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsid i" ::: "memory");
   23640:	f10c0080 	cpsid	i
}
   23644:	e320f000 	nop	{0}
   23648:	e28bd000 	add	sp, fp, #0
   2364c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23650:	e12fff1e 	bx	lr

00023654 <irqRegister>:

void irqRegister (const unsigned int irq, FN_INTERRUPT_HANDLER pfnHandler, void *pParam)
{
   23654:	e92d4800 	push	{fp, lr}
   23658:	e28db004 	add	fp, sp, #4
   2365c:	e24dd010 	sub	sp, sp, #16
   23660:	e50b0008 	str	r0, [fp, #-8]
   23664:	e50b100c 	str	r1, [fp, #-12]
   23668:	e50b2010 	str	r2, [fp, #-16]
	if (irq < BCM2835_INTC_TOTAL_IRQ) {
   2366c:	e51b3008 	ldr	r3, [fp, #-8]
   23670:	e3530047 	cmp	r3, #71	@ 0x47
   23674:	8a00000b 	bhi	236a8 <irqRegister+0x54>
		irqBlock();
   23678:	ebffffee 	bl	23638 <irqBlock>
		g_VectorTable[irq].pfnHandler = pfnHandler;
   2367c:	e59f1030 	ldr	r1, [pc, #48]	@ 236b4 <irqRegister+0x60>
   23680:	e51b3008 	ldr	r3, [fp, #-8]
   23684:	e51b200c 	ldr	r2, [fp, #-12]
   23688:	e7812183 	str	r2, [r1, r3, lsl #3]
		g_VectorTable[irq].pParam     = pParam;
   2368c:	e59f2020 	ldr	r2, [pc, #32]	@ 236b4 <irqRegister+0x60>
   23690:	e51b3008 	ldr	r3, [fp, #-8]
   23694:	e1a03183 	lsl	r3, r3, #3
   23698:	e0823003 	add	r3, r2, r3
   2369c:	e51b2010 	ldr	r2, [fp, #-16]
   236a0:	e5832004 	str	r2, [r3, #4]
		irqUnblock();
   236a4:	ebffffdc 	bl	2361c <irqUnblock>
	}
}
   236a8:	e320f000 	nop	{0}
   236ac:	e24bd004 	sub	sp, fp, #4
   236b0:	e8bd8800 	pop	{fp, pc}
   236b4:	000249a4 	andeq	r4, r2, r4, lsr #19

000236b8 <irqEnable>:

void irqEnable (const unsigned int irq)
{
   236b8:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   236bc:	e28db000 	add	fp, sp, #0
   236c0:	e24dd014 	sub	sp, sp, #20
   236c4:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   236c8:	e51b3010 	ldr	r3, [fp, #-16]
   236cc:	e203301f 	and	r3, r3, #31
   236d0:	e3a02001 	mov	r2, #1
   236d4:	e1a03312 	lsl	r3, r2, r3
   236d8:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   236dc:	e51b3010 	ldr	r3, [fp, #-16]
   236e0:	e353001f 	cmp	r3, #31
   236e4:	8a000009 	bhi	23710 <irqEnable+0x58>
		pRegs->Enable1 = mask;
   236e8:	e59f2094 	ldr	r2, [pc, #148]	@ 23784 <irqEnable+0xcc>
   236ec:	e51b3008 	ldr	r3, [fp, #-8]
   236f0:	e5823010 	str	r3, [r2, #16]
		enabled[0] |= mask;
   236f4:	e59f308c 	ldr	r3, [pc, #140]	@ 23788 <irqEnable+0xd0>
   236f8:	e5932000 	ldr	r2, [r3]
   236fc:	e51b3008 	ldr	r3, [fp, #-8]
   23700:	e1823003 	orr	r3, r2, r3
   23704:	e59f207c 	ldr	r2, [pc, #124]	@ 23788 <irqEnable+0xd0>
   23708:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->EnableBasic = mask;
		enabled[2] |= mask;
	}
}
   2370c:	ea000018 	b	23774 <irqEnable+0xbc>
	else if (irq <= 63) {
   23710:	e51b3010 	ldr	r3, [fp, #-16]
   23714:	e353003f 	cmp	r3, #63	@ 0x3f
   23718:	8a000009 	bhi	23744 <irqEnable+0x8c>
		pRegs->Enable2 = mask;
   2371c:	e59f2060 	ldr	r2, [pc, #96]	@ 23784 <irqEnable+0xcc>
   23720:	e51b3008 	ldr	r3, [fp, #-8]
   23724:	e5823014 	str	r3, [r2, #20]
		enabled[1] |= mask;
   23728:	e59f3058 	ldr	r3, [pc, #88]	@ 23788 <irqEnable+0xd0>
   2372c:	e5932004 	ldr	r2, [r3, #4]
   23730:	e51b3008 	ldr	r3, [fp, #-8]
   23734:	e1823003 	orr	r3, r2, r3
   23738:	e59f2048 	ldr	r2, [pc, #72]	@ 23788 <irqEnable+0xd0>
   2373c:	e5823004 	str	r3, [r2, #4]
}
   23740:	ea00000b 	b	23774 <irqEnable+0xbc>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   23744:	e51b3010 	ldr	r3, [fp, #-16]
   23748:	e3530047 	cmp	r3, #71	@ 0x47
   2374c:	8a000008 	bhi	23774 <irqEnable+0xbc>
		pRegs->EnableBasic = mask;
   23750:	e59f202c 	ldr	r2, [pc, #44]	@ 23784 <irqEnable+0xcc>
   23754:	e51b3008 	ldr	r3, [fp, #-8]
   23758:	e5823018 	str	r3, [r2, #24]
		enabled[2] |= mask;
   2375c:	e59f3024 	ldr	r3, [pc, #36]	@ 23788 <irqEnable+0xd0>
   23760:	e5932008 	ldr	r2, [r3, #8]
   23764:	e51b3008 	ldr	r3, [fp, #-8]
   23768:	e1823003 	orr	r3, r2, r3
   2376c:	e59f2014 	ldr	r2, [pc, #20]	@ 23788 <irqEnable+0xd0>
   23770:	e5823008 	str	r3, [r2, #8]
}
   23774:	e320f000 	nop	{0}
   23778:	e28bd000 	add	sp, fp, #0
   2377c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23780:	e12fff1e 	bx	lr
   23784:	2000b200 	andcs	fp, r0, r0, lsl #4
   23788:	00024be4 	andeq	r4, r2, r4, ror #23

0002378c <irqDisable>:

void irqDisable (const unsigned int irq)
{
   2378c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23790:	e28db000 	add	fp, sp, #0
   23794:	e24dd014 	sub	sp, sp, #20
   23798:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   2379c:	e51b3010 	ldr	r3, [fp, #-16]
   237a0:	e203301f 	and	r3, r3, #31
   237a4:	e3a02001 	mov	r2, #1
   237a8:	e1a03312 	lsl	r3, r2, r3
   237ac:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   237b0:	e51b3010 	ldr	r3, [fp, #-16]
   237b4:	e353001f 	cmp	r3, #31
   237b8:	8a00000a 	bhi	237e8 <irqDisable+0x5c>
		pRegs->Disable1 = mask;
   237bc:	e59f20a0 	ldr	r2, [pc, #160]	@ 23864 <irqDisable+0xd8>
   237c0:	e51b3008 	ldr	r3, [fp, #-8]
   237c4:	e582301c 	str	r3, [r2, #28]
		enabled[0] &= ~mask;
   237c8:	e59f3098 	ldr	r3, [pc, #152]	@ 23868 <irqDisable+0xdc>
   237cc:	e5932000 	ldr	r2, [r3]
   237d0:	e51b3008 	ldr	r3, [fp, #-8]
   237d4:	e1e03003 	mvn	r3, r3
   237d8:	e0033002 	and	r3, r3, r2
   237dc:	e59f2084 	ldr	r2, [pc, #132]	@ 23868 <irqDisable+0xdc>
   237e0:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->DisableBasic = mask;
		enabled[2] &= ~mask;
	}
}
   237e4:	ea00001a 	b	23854 <irqDisable+0xc8>
	else if (irq <= 63) {
   237e8:	e51b3010 	ldr	r3, [fp, #-16]
   237ec:	e353003f 	cmp	r3, #63	@ 0x3f
   237f0:	8a00000a 	bhi	23820 <irqDisable+0x94>
		pRegs->Disable2 = mask;
   237f4:	e59f2068 	ldr	r2, [pc, #104]	@ 23864 <irqDisable+0xd8>
   237f8:	e51b3008 	ldr	r3, [fp, #-8]
   237fc:	e5823020 	str	r3, [r2, #32]
		enabled[1] &= ~mask;
   23800:	e59f3060 	ldr	r3, [pc, #96]	@ 23868 <irqDisable+0xdc>
   23804:	e5932004 	ldr	r2, [r3, #4]
   23808:	e51b3008 	ldr	r3, [fp, #-8]
   2380c:	e1e03003 	mvn	r3, r3
   23810:	e0033002 	and	r3, r3, r2
   23814:	e59f204c 	ldr	r2, [pc, #76]	@ 23868 <irqDisable+0xdc>
   23818:	e5823004 	str	r3, [r2, #4]
}
   2381c:	ea00000c 	b	23854 <irqDisable+0xc8>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   23820:	e51b3010 	ldr	r3, [fp, #-16]
   23824:	e3530047 	cmp	r3, #71	@ 0x47
   23828:	8a000009 	bhi	23854 <irqDisable+0xc8>
		pRegs->DisableBasic = mask;
   2382c:	e59f2030 	ldr	r2, [pc, #48]	@ 23864 <irqDisable+0xd8>
   23830:	e51b3008 	ldr	r3, [fp, #-8]
   23834:	e5823024 	str	r3, [r2, #36]	@ 0x24
		enabled[2] &= ~mask;
   23838:	e59f3028 	ldr	r3, [pc, #40]	@ 23868 <irqDisable+0xdc>
   2383c:	e5932008 	ldr	r2, [r3, #8]
   23840:	e51b3008 	ldr	r3, [fp, #-8]
   23844:	e1e03003 	mvn	r3, r3
   23848:	e0033002 	and	r3, r3, r2
   2384c:	e59f2014 	ldr	r2, [pc, #20]	@ 23868 <irqDisable+0xdc>
   23850:	e5823008 	str	r3, [r2, #8]
}
   23854:	e320f000 	nop	{0}
   23858:	e28bd000 	add	sp, fp, #0
   2385c:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23860:	e12fff1e 	bx	lr
   23864:	2000b200 	andcs	fp, r0, r0, lsl #4
   23868:	00024be4 	andeq	r4, r2, r4, ror #23

0002386c <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   2386c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23870:	e28db000 	add	fp, sp, #0
   23874:	e24dd01c 	sub	sp, sp, #28
   23878:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
   2387c:	e50b101c 	str	r1, [fp, #-28]	@ 0xffffffe4

	int offset = pinNum / 10;
   23880:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23884:	e59f20b4 	ldr	r2, [pc, #180]	@ 23940 <SetGpioFunction+0xd4>
   23888:	e0832392 	umull	r2, r3, r2, r3
   2388c:	e1a031a3 	lsr	r3, r3, #3
   23890:	e50b3008 	str	r3, [fp, #-8]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   23894:	e59f20a8 	ldr	r2, [pc, #168]	@ 23944 <SetGpioFunction+0xd8>
   23898:	e51b3008 	ldr	r3, [fp, #-8]
   2389c:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   238a0:	e50b300c 	str	r3, [fp, #-12]

	int item = pinNum % 10;
   238a4:	e51b1018 	ldr	r1, [fp, #-24]	@ 0xffffffe8
   238a8:	e59f3090 	ldr	r3, [pc, #144]	@ 23940 <SetGpioFunction+0xd4>
   238ac:	e0832193 	umull	r2, r3, r3, r1
   238b0:	e1a021a3 	lsr	r2, r3, #3
   238b4:	e1a03002 	mov	r3, r2
   238b8:	e1a03103 	lsl	r3, r3, #2
   238bc:	e0833002 	add	r3, r3, r2
   238c0:	e1a03083 	lsl	r3, r3, #1
   238c4:	e0412003 	sub	r2, r1, r3
   238c8:	e50b2010 	str	r2, [fp, #-16]
	val &= ~(0x7 << (item * 3));
   238cc:	e51b2010 	ldr	r2, [fp, #-16]
   238d0:	e1a03002 	mov	r3, r2
   238d4:	e1a03083 	lsl	r3, r3, #1
   238d8:	e0833002 	add	r3, r3, r2
   238dc:	e3a02007 	mov	r2, #7
   238e0:	e1a03312 	lsl	r3, r2, r3
   238e4:	e1e03003 	mvn	r3, r3
   238e8:	e1a02003 	mov	r2, r3
   238ec:	e51b300c 	ldr	r3, [fp, #-12]
   238f0:	e0033002 	and	r3, r3, r2
   238f4:	e50b300c 	str	r3, [fp, #-12]
	val |= ((funcNum & 0x7) << (item * 3));
   238f8:	e51b301c 	ldr	r3, [fp, #-28]	@ 0xffffffe4
   238fc:	e2031007 	and	r1, r3, #7
   23900:	e51b2010 	ldr	r2, [fp, #-16]
   23904:	e1a03002 	mov	r3, r2
   23908:	e1a03083 	lsl	r3, r3, #1
   2390c:	e0833002 	add	r3, r3, r2
   23910:	e1a03311 	lsl	r3, r1, r3
   23914:	e51b200c 	ldr	r2, [fp, #-12]
   23918:	e1823003 	orr	r3, r2, r3
   2391c:	e50b300c 	str	r3, [fp, #-12]
	pRegs->GPFSEL[offset] = val;
   23920:	e59f101c 	ldr	r1, [pc, #28]	@ 23944 <SetGpioFunction+0xd8>
   23924:	e51b3008 	ldr	r3, [fp, #-8]
   23928:	e51b200c 	ldr	r2, [fp, #-12]
   2392c:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   23930:	e320f000 	nop	{0}
   23934:	e28bd000 	add	sp, fp, #0
   23938:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   2393c:	e12fff1e 	bx	lr
   23940:	cccccccd 	stclgt	12, cr12, [ip], {205}	@ 0xcd
   23944:	20200000 	eorcs	r0, r0, r0

00023948 <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   23948:	e92d4800 	push	{fp, lr}
   2394c:	e28db004 	add	fp, sp, #4
   23950:	e24dd008 	sub	sp, sp, #8
   23954:	e50b0008 	str	r0, [fp, #-8]
   23958:	e1a03001 	mov	r3, r1
   2395c:	e54b3009 	strb	r3, [fp, #-9]
	SetGpioFunction(pinNum,dir);
   23960:	e55b3009 	ldrb	r3, [fp, #-9]
   23964:	e1a01003 	mov	r1, r3
   23968:	e51b0008 	ldr	r0, [fp, #-8]
   2396c:	ebffffbe 	bl	2386c <SetGpioFunction>
}
   23970:	e320f000 	nop	{0}
   23974:	e24bd004 	sub	sp, fp, #4
   23978:	e8bd8800 	pop	{fp, pc}

0002397c <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   2397c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23980:	e28db000 	add	fp, sp, #0
   23984:	e24dd014 	sub	sp, sp, #20
   23988:	e50b0010 	str	r0, [fp, #-16]
   2398c:	e50b1014 	str	r1, [fp, #-20]	@ 0xffffffec
	unsigned long offset=pinNum/32;
   23990:	e51b3010 	ldr	r3, [fp, #-16]
   23994:	e1a032a3 	lsr	r3, r3, #5
   23998:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask=(1<<(pinNum%32));
   2399c:	e51b3010 	ldr	r3, [fp, #-16]
   239a0:	e203301f 	and	r3, r3, #31
   239a4:	e3a02001 	mov	r2, #1
   239a8:	e1a03312 	lsl	r3, r2, r3
   239ac:	e50b300c 	str	r3, [fp, #-12]

	if(pinVal) {
   239b0:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   239b4:	e3530000 	cmp	r3, #0
   239b8:	0a00000e 	beq	239f8 <SetGpio+0x7c>
		pRegs->GPSET[offset]|=mask;
   239bc:	e59f206c 	ldr	r2, [pc, #108]	@ 23a30 <SetGpio+0xb4>
   239c0:	e51b3008 	ldr	r3, [fp, #-8]
   239c4:	e2833006 	add	r3, r3, #6
   239c8:	e1a03103 	lsl	r3, r3, #2
   239cc:	e0823003 	add	r3, r2, r3
   239d0:	e5932004 	ldr	r2, [r3, #4]
   239d4:	e59f1054 	ldr	r1, [pc, #84]	@ 23a30 <SetGpio+0xb4>
   239d8:	e51b300c 	ldr	r3, [fp, #-12]
   239dc:	e1822003 	orr	r2, r2, r3
   239e0:	e51b3008 	ldr	r3, [fp, #-8]
   239e4:	e2833006 	add	r3, r3, #6
   239e8:	e1a03103 	lsl	r3, r3, #2
   239ec:	e0813003 	add	r3, r1, r3
   239f0:	e5832004 	str	r2, [r3, #4]
	} else {
		pRegs->GPCLR[offset]|=mask;
	}
}
   239f4:	ea000009 	b	23a20 <SetGpio+0xa4>
		pRegs->GPCLR[offset]|=mask;
   239f8:	e59f2030 	ldr	r2, [pc, #48]	@ 23a30 <SetGpio+0xb4>
   239fc:	e51b3008 	ldr	r3, [fp, #-8]
   23a00:	e283300a 	add	r3, r3, #10
   23a04:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23a08:	e59f1020 	ldr	r1, [pc, #32]	@ 23a30 <SetGpio+0xb4>
   23a0c:	e51b300c 	ldr	r3, [fp, #-12]
   23a10:	e1822003 	orr	r2, r2, r3
   23a14:	e51b3008 	ldr	r3, [fp, #-8]
   23a18:	e283300a 	add	r3, r3, #10
   23a1c:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   23a20:	e320f000 	nop	{0}
   23a24:	e28bd000 	add	sp, fp, #0
   23a28:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23a2c:	e12fff1e 	bx	lr
   23a30:	20200000 	eorcs	r0, r0, r0

00023a34 <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   23a34:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23a38:	e28db000 	add	fp, sp, #0
   23a3c:	e24dd00c 	sub	sp, sp, #12
   23a40:	e50b0008 	str	r0, [fp, #-8]
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   23a44:	e59f2034 	ldr	r2, [pc, #52]	@ 23a80 <ReadGpio+0x4c>
   23a48:	e51b3008 	ldr	r3, [fp, #-8]
   23a4c:	e1a032a3 	lsr	r3, r3, #5
   23a50:	e283300c 	add	r3, r3, #12
   23a54:	e1a03103 	lsl	r3, r3, #2
   23a58:	e0823003 	add	r3, r2, r3
   23a5c:	e5932004 	ldr	r2, [r3, #4]
   23a60:	e51b3008 	ldr	r3, [fp, #-8]
   23a64:	e203301f 	and	r3, r3, #31
   23a68:	e1a03332 	lsr	r3, r2, r3
   23a6c:	e2033001 	and	r3, r3, #1
}
   23a70:	e1a00003 	mov	r0, r3
   23a74:	e28bd000 	add	sp, fp, #0
   23a78:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23a7c:	e12fff1e 	bx	lr
   23a80:	20200000 	eorcs	r0, r0, r0

00023a84 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   23a84:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23a88:	e28db000 	add	fp, sp, #0
   23a8c:	e24dd014 	sub	sp, sp, #20
   23a90:	e50b0010 	str	r0, [fp, #-16]
   23a94:	e1a03001 	mov	r3, r1
   23a98:	e54b3011 	strb	r3, [fp, #-17]	@ 0xffffffef
	unsigned long mask=(1<<pinNum);
   23a9c:	e3a02001 	mov	r2, #1
   23aa0:	e51b3010 	ldr	r3, [fp, #-16]
   23aa4:	e1a03312 	lsl	r3, r2, r3
   23aa8:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23aac:	e51b3010 	ldr	r3, [fp, #-16]
   23ab0:	e1a032a3 	lsr	r3, r3, #5
   23ab4:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   23ab8:	e55b3011 	ldrb	r3, [fp, #-17]	@ 0xffffffef
   23abc:	e3530006 	cmp	r3, #6
   23ac0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   23ac4:	ea000055 	b	23c20 <EnableGpioDetect+0x19c>
   23ac8:	00023c1c 	andeq	r3, r2, ip, lsl ip
   23acc:	00023ae4 	andeq	r3, r2, r4, ror #21
   23ad0:	00023b20 	andeq	r3, r2, r0, lsr #22
   23ad4:	00023b4c 	andeq	r3, r2, ip, asr #22
   23ad8:	00023b88 	andeq	r3, r2, r8, lsl #23
   23adc:	00023bb4 			@ <UNDEFINED> instruction: 0x00023bb4
   23ae0:	00023bf0 	strdeq	r3, [r2], -r0
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   23ae4:	e59f2144 	ldr	r2, [pc, #324]	@ 23c30 <EnableGpioDetect+0x1ac>
   23ae8:	e51b300c 	ldr	r3, [fp, #-12]
   23aec:	e2833012 	add	r3, r3, #18
   23af0:	e1a03103 	lsl	r3, r3, #2
   23af4:	e0823003 	add	r3, r2, r3
   23af8:	e5932004 	ldr	r2, [r3, #4]
   23afc:	e59f112c 	ldr	r1, [pc, #300]	@ 23c30 <EnableGpioDetect+0x1ac>
   23b00:	e51b3008 	ldr	r3, [fp, #-8]
   23b04:	e1822003 	orr	r2, r2, r3
   23b08:	e51b300c 	ldr	r3, [fp, #-12]
   23b0c:	e2833012 	add	r3, r3, #18
   23b10:	e1a03103 	lsl	r3, r3, #2
   23b14:	e0813003 	add	r3, r1, r3
   23b18:	e5832004 	str	r2, [r3, #4]
		break;
   23b1c:	ea00003f 	b	23c20 <EnableGpioDetect+0x19c>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   23b20:	e59f2108 	ldr	r2, [pc, #264]	@ 23c30 <EnableGpioDetect+0x1ac>
   23b24:	e51b300c 	ldr	r3, [fp, #-12]
   23b28:	e2833016 	add	r3, r3, #22
   23b2c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b30:	e59f10f8 	ldr	r1, [pc, #248]	@ 23c30 <EnableGpioDetect+0x1ac>
   23b34:	e51b3008 	ldr	r3, [fp, #-8]
   23b38:	e1822003 	orr	r2, r2, r3
   23b3c:	e51b300c 	ldr	r3, [fp, #-12]
   23b40:	e2833016 	add	r3, r3, #22
   23b44:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23b48:	ea000034 	b	23c20 <EnableGpioDetect+0x19c>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   23b4c:	e59f20dc 	ldr	r2, [pc, #220]	@ 23c30 <EnableGpioDetect+0x1ac>
   23b50:	e51b300c 	ldr	r3, [fp, #-12]
   23b54:	e2833018 	add	r3, r3, #24
   23b58:	e1a03103 	lsl	r3, r3, #2
   23b5c:	e0823003 	add	r3, r2, r3
   23b60:	e5932004 	ldr	r2, [r3, #4]
   23b64:	e59f10c4 	ldr	r1, [pc, #196]	@ 23c30 <EnableGpioDetect+0x1ac>
   23b68:	e51b3008 	ldr	r3, [fp, #-8]
   23b6c:	e1822003 	orr	r2, r2, r3
   23b70:	e51b300c 	ldr	r3, [fp, #-12]
   23b74:	e2833018 	add	r3, r3, #24
   23b78:	e1a03103 	lsl	r3, r3, #2
   23b7c:	e0813003 	add	r3, r1, r3
   23b80:	e5832004 	str	r2, [r3, #4]
		break;
   23b84:	ea000025 	b	23c20 <EnableGpioDetect+0x19c>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   23b88:	e59f20a0 	ldr	r2, [pc, #160]	@ 23c30 <EnableGpioDetect+0x1ac>
   23b8c:	e51b300c 	ldr	r3, [fp, #-12]
   23b90:	e283301c 	add	r3, r3, #28
   23b94:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b98:	e59f1090 	ldr	r1, [pc, #144]	@ 23c30 <EnableGpioDetect+0x1ac>
   23b9c:	e51b3008 	ldr	r3, [fp, #-8]
   23ba0:	e1822003 	orr	r2, r2, r3
   23ba4:	e51b300c 	ldr	r3, [fp, #-12]
   23ba8:	e283301c 	add	r3, r3, #28
   23bac:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23bb0:	ea00001a 	b	23c20 <EnableGpioDetect+0x19c>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   23bb4:	e59f2074 	ldr	r2, [pc, #116]	@ 23c30 <EnableGpioDetect+0x1ac>
   23bb8:	e51b300c 	ldr	r3, [fp, #-12]
   23bbc:	e283301e 	add	r3, r3, #30
   23bc0:	e1a03103 	lsl	r3, r3, #2
   23bc4:	e0823003 	add	r3, r2, r3
   23bc8:	e5932004 	ldr	r2, [r3, #4]
   23bcc:	e59f105c 	ldr	r1, [pc, #92]	@ 23c30 <EnableGpioDetect+0x1ac>
   23bd0:	e51b3008 	ldr	r3, [fp, #-8]
   23bd4:	e1822003 	orr	r2, r2, r3
   23bd8:	e51b300c 	ldr	r3, [fp, #-12]
   23bdc:	e283301e 	add	r3, r3, #30
   23be0:	e1a03103 	lsl	r3, r3, #2
   23be4:	e0813003 	add	r3, r1, r3
   23be8:	e5832004 	str	r2, [r3, #4]
		break;
   23bec:	ea00000b 	b	23c20 <EnableGpioDetect+0x19c>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   23bf0:	e59f2038 	ldr	r2, [pc, #56]	@ 23c30 <EnableGpioDetect+0x1ac>
   23bf4:	e51b300c 	ldr	r3, [fp, #-12]
   23bf8:	e2833022 	add	r3, r3, #34	@ 0x22
   23bfc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23c00:	e59f1028 	ldr	r1, [pc, #40]	@ 23c30 <EnableGpioDetect+0x1ac>
   23c04:	e51b3008 	ldr	r3, [fp, #-8]
   23c08:	e1822003 	orr	r2, r2, r3
   23c0c:	e51b300c 	ldr	r3, [fp, #-12]
   23c10:	e2833022 	add	r3, r3, #34	@ 0x22
   23c14:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23c18:	ea000000 	b	23c20 <EnableGpioDetect+0x19c>
	case DETECT_NONE:
		break;
   23c1c:	e320f000 	nop	{0}
	}
}
   23c20:	e320f000 	nop	{0}
   23c24:	e28bd000 	add	sp, fp, #0
   23c28:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23c2c:	e12fff1e 	bx	lr
   23c30:	20200000 	eorcs	r0, r0, r0

00023c34 <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   23c34:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23c38:	e28db000 	add	fp, sp, #0
   23c3c:	e24dd014 	sub	sp, sp, #20
   23c40:	e50b0010 	str	r0, [fp, #-16]
   23c44:	e1a03001 	mov	r3, r1
   23c48:	e54b3011 	strb	r3, [fp, #-17]	@ 0xffffffef
	unsigned long mask=~(1<<(pinNum%32));
   23c4c:	e51b3010 	ldr	r3, [fp, #-16]
   23c50:	e203301f 	and	r3, r3, #31
   23c54:	e3a02001 	mov	r2, #1
   23c58:	e1a03312 	lsl	r3, r2, r3
   23c5c:	e1e03003 	mvn	r3, r3
   23c60:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23c64:	e51b3010 	ldr	r3, [fp, #-16]
   23c68:	e1a032a3 	lsr	r3, r3, #5
   23c6c:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   23c70:	e55b3011 	ldrb	r3, [fp, #-17]	@ 0xffffffef
   23c74:	e3530006 	cmp	r3, #6
   23c78:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   23c7c:	ea000055 	b	23dd8 <DisableGpioDetect+0x1a4>
   23c80:	00023dd4 	ldrdeq	r3, [r2], -r4
   23c84:	00023c9c 	muleq	r2, ip, ip
   23c88:	00023cd8 	ldrdeq	r3, [r2], -r8
   23c8c:	00023d04 	andeq	r3, r2, r4, lsl #26
   23c90:	00023d40 	andeq	r3, r2, r0, asr #26
   23c94:	00023d6c 	andeq	r3, r2, ip, ror #26
   23c98:	00023da8 	andeq	r3, r2, r8, lsr #27
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   23c9c:	e59f2144 	ldr	r2, [pc, #324]	@ 23de8 <DisableGpioDetect+0x1b4>
   23ca0:	e51b300c 	ldr	r3, [fp, #-12]
   23ca4:	e2833012 	add	r3, r3, #18
   23ca8:	e1a03103 	lsl	r3, r3, #2
   23cac:	e0823003 	add	r3, r2, r3
   23cb0:	e5932004 	ldr	r2, [r3, #4]
   23cb4:	e59f112c 	ldr	r1, [pc, #300]	@ 23de8 <DisableGpioDetect+0x1b4>
   23cb8:	e51b3008 	ldr	r3, [fp, #-8]
   23cbc:	e0022003 	and	r2, r2, r3
   23cc0:	e51b300c 	ldr	r3, [fp, #-12]
   23cc4:	e2833012 	add	r3, r3, #18
   23cc8:	e1a03103 	lsl	r3, r3, #2
   23ccc:	e0813003 	add	r3, r1, r3
   23cd0:	e5832004 	str	r2, [r3, #4]
		break;
   23cd4:	ea00003f 	b	23dd8 <DisableGpioDetect+0x1a4>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   23cd8:	e59f2108 	ldr	r2, [pc, #264]	@ 23de8 <DisableGpioDetect+0x1b4>
   23cdc:	e51b300c 	ldr	r3, [fp, #-12]
   23ce0:	e2833016 	add	r3, r3, #22
   23ce4:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23ce8:	e59f10f8 	ldr	r1, [pc, #248]	@ 23de8 <DisableGpioDetect+0x1b4>
   23cec:	e51b3008 	ldr	r3, [fp, #-8]
   23cf0:	e0022003 	and	r2, r2, r3
   23cf4:	e51b300c 	ldr	r3, [fp, #-12]
   23cf8:	e2833016 	add	r3, r3, #22
   23cfc:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23d00:	ea000034 	b	23dd8 <DisableGpioDetect+0x1a4>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   23d04:	e59f20dc 	ldr	r2, [pc, #220]	@ 23de8 <DisableGpioDetect+0x1b4>
   23d08:	e51b300c 	ldr	r3, [fp, #-12]
   23d0c:	e2833018 	add	r3, r3, #24
   23d10:	e1a03103 	lsl	r3, r3, #2
   23d14:	e0823003 	add	r3, r2, r3
   23d18:	e5932004 	ldr	r2, [r3, #4]
   23d1c:	e59f10c4 	ldr	r1, [pc, #196]	@ 23de8 <DisableGpioDetect+0x1b4>
   23d20:	e51b3008 	ldr	r3, [fp, #-8]
   23d24:	e0022003 	and	r2, r2, r3
   23d28:	e51b300c 	ldr	r3, [fp, #-12]
   23d2c:	e2833018 	add	r3, r3, #24
   23d30:	e1a03103 	lsl	r3, r3, #2
   23d34:	e0813003 	add	r3, r1, r3
   23d38:	e5832004 	str	r2, [r3, #4]
		break;
   23d3c:	ea000025 	b	23dd8 <DisableGpioDetect+0x1a4>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   23d40:	e59f20a0 	ldr	r2, [pc, #160]	@ 23de8 <DisableGpioDetect+0x1b4>
   23d44:	e51b300c 	ldr	r3, [fp, #-12]
   23d48:	e283301c 	add	r3, r3, #28
   23d4c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23d50:	e59f1090 	ldr	r1, [pc, #144]	@ 23de8 <DisableGpioDetect+0x1b4>
   23d54:	e51b3008 	ldr	r3, [fp, #-8]
   23d58:	e0022003 	and	r2, r2, r3
   23d5c:	e51b300c 	ldr	r3, [fp, #-12]
   23d60:	e283301c 	add	r3, r3, #28
   23d64:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23d68:	ea00001a 	b	23dd8 <DisableGpioDetect+0x1a4>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   23d6c:	e59f2074 	ldr	r2, [pc, #116]	@ 23de8 <DisableGpioDetect+0x1b4>
   23d70:	e51b300c 	ldr	r3, [fp, #-12]
   23d74:	e283301e 	add	r3, r3, #30
   23d78:	e1a03103 	lsl	r3, r3, #2
   23d7c:	e0823003 	add	r3, r2, r3
   23d80:	e5932004 	ldr	r2, [r3, #4]
   23d84:	e59f105c 	ldr	r1, [pc, #92]	@ 23de8 <DisableGpioDetect+0x1b4>
   23d88:	e51b3008 	ldr	r3, [fp, #-8]
   23d8c:	e0022003 	and	r2, r2, r3
   23d90:	e51b300c 	ldr	r3, [fp, #-12]
   23d94:	e283301e 	add	r3, r3, #30
   23d98:	e1a03103 	lsl	r3, r3, #2
   23d9c:	e0813003 	add	r3, r1, r3
   23da0:	e5832004 	str	r2, [r3, #4]
		break;
   23da4:	ea00000b 	b	23dd8 <DisableGpioDetect+0x1a4>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   23da8:	e59f2038 	ldr	r2, [pc, #56]	@ 23de8 <DisableGpioDetect+0x1b4>
   23dac:	e51b300c 	ldr	r3, [fp, #-12]
   23db0:	e2833022 	add	r3, r3, #34	@ 0x22
   23db4:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23db8:	e59f1028 	ldr	r1, [pc, #40]	@ 23de8 <DisableGpioDetect+0x1b4>
   23dbc:	e51b3008 	ldr	r3, [fp, #-8]
   23dc0:	e0022003 	and	r2, r2, r3
   23dc4:	e51b300c 	ldr	r3, [fp, #-12]
   23dc8:	e2833022 	add	r3, r3, #34	@ 0x22
   23dcc:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23dd0:	ea000000 	b	23dd8 <DisableGpioDetect+0x1a4>
	case DETECT_NONE:
		break;
   23dd4:	e320f000 	nop	{0}
	}
}
   23dd8:	e320f000 	nop	{0}
   23ddc:	e28bd000 	add	sp, fp, #0
   23de0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23de4:	e12fff1e 	bx	lr
   23de8:	20200000 	eorcs	r0, r0, r0

00023dec <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   23dec:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   23df0:	e28db000 	add	fp, sp, #0
   23df4:	e24dd014 	sub	sp, sp, #20
   23df8:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   23dfc:	e51b3010 	ldr	r3, [fp, #-16]
   23e00:	e203301f 	and	r3, r3, #31
   23e04:	e3a02001 	mov	r2, #1
   23e08:	e1a03312 	lsl	r3, r2, r3
   23e0c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23e10:	e51b3010 	ldr	r3, [fp, #-16]
   23e14:	e1a032a3 	lsr	r3, r3, #5
   23e18:	e50b300c 	str	r3, [fp, #-12]

	pRegs->GPEDS[offset]=mask;
   23e1c:	e59f101c 	ldr	r1, [pc, #28]	@ 23e40 <ClearGpioInterrupt+0x54>
   23e20:	e51b300c 	ldr	r3, [fp, #-12]
   23e24:	e2833010 	add	r3, r3, #16
   23e28:	e51b2008 	ldr	r2, [fp, #-8]
   23e2c:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   23e30:	e320f000 	nop	{0}
   23e34:	e28bd000 	add	sp, fp, #0
   23e38:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   23e3c:	e12fff1e 	bx	lr
   23e40:	20200000 	eorcs	r0, r0, r0

00023e44 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   23e44:	e92d4800 	push	{fp, lr}
   23e48:	e28db004 	add	fp, sp, #4
   23e4c:	e24dd018 	sub	sp, sp, #24
   23e50:	e50b0018 	str	r0, [fp, #-24]	@ 0xffffffe8
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   23e54:	e3a03000 	mov	r3, #0
   23e58:	e50b3010 	str	r3, [fp, #-16]

	vTaskSuspendAll();
   23e5c:	ebfffa22 	bl	226ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   23e60:	e59f3194 	ldr	r3, [pc, #404]	@ 23ffc <pvPortMalloc+0x1b8>
   23e64:	e5933000 	ldr	r3, [r3]
   23e68:	e3530000 	cmp	r3, #0
   23e6c:	1a000000 	bne	23e74 <pvPortMalloc+0x30>
		{
			prvHeapInit();
   23e70:	eb000093 	bl	240c4 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   23e74:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23e78:	e3530000 	cmp	r3, #0
   23e7c:	0a00000c 	beq	23eb4 <pvPortMalloc+0x70>
		{
			xWantedSize += heapSTRUCT_SIZE;
   23e80:	e3a03010 	mov	r3, #16
   23e84:	e1a02003 	mov	r2, r3
   23e88:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23e8c:	e0833002 	add	r3, r3, r2
   23e90:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   23e94:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23e98:	e2033007 	and	r3, r3, #7
   23e9c:	e3530000 	cmp	r3, #0
   23ea0:	0a000003 	beq	23eb4 <pvPortMalloc+0x70>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   23ea4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23ea8:	e3c33007 	bic	r3, r3, #7
   23eac:	e2833008 	add	r3, r3, #8
   23eb0:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   23eb4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23eb8:	e3530000 	cmp	r3, #0
   23ebc:	0a000043 	beq	23fd0 <pvPortMalloc+0x18c>
   23ec0:	e3a02a01 	mov	r2, #4096	@ 0x1000
   23ec4:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23ec8:	e1530002 	cmp	r3, r2
   23ecc:	2a00003f 	bcs	23fd0 <pvPortMalloc+0x18c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   23ed0:	e59f3128 	ldr	r3, [pc, #296]	@ 24000 <pvPortMalloc+0x1bc>
   23ed4:	e50b300c 	str	r3, [fp, #-12]
			pxBlock = xStart.pxNextFreeBlock;
   23ed8:	e59f3120 	ldr	r3, [pc, #288]	@ 24000 <pvPortMalloc+0x1bc>
   23edc:	e5933000 	ldr	r3, [r3]
   23ee0:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   23ee4:	ea000004 	b	23efc <pvPortMalloc+0xb8>
			{
				pxPreviousBlock = pxBlock;
   23ee8:	e51b3008 	ldr	r3, [fp, #-8]
   23eec:	e50b300c 	str	r3, [fp, #-12]
				pxBlock = pxBlock->pxNextFreeBlock;
   23ef0:	e51b3008 	ldr	r3, [fp, #-8]
   23ef4:	e5933000 	ldr	r3, [r3]
   23ef8:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   23efc:	e51b3008 	ldr	r3, [fp, #-8]
   23f00:	e5933004 	ldr	r3, [r3, #4]
   23f04:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   23f08:	e1520003 	cmp	r2, r3
   23f0c:	9a000003 	bls	23f20 <pvPortMalloc+0xdc>
   23f10:	e51b3008 	ldr	r3, [fp, #-8]
   23f14:	e5933000 	ldr	r3, [r3]
   23f18:	e3530000 	cmp	r3, #0
   23f1c:	1afffff1 	bne	23ee8 <pvPortMalloc+0xa4>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   23f20:	e59f30d4 	ldr	r3, [pc, #212]	@ 23ffc <pvPortMalloc+0x1b8>
   23f24:	e5933000 	ldr	r3, [r3]
   23f28:	e51b2008 	ldr	r2, [fp, #-8]
   23f2c:	e1520003 	cmp	r2, r3
   23f30:	0a000026 	beq	23fd0 <pvPortMalloc+0x18c>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   23f34:	e51b300c 	ldr	r3, [fp, #-12]
   23f38:	e5933000 	ldr	r3, [r3]
   23f3c:	e3a02010 	mov	r2, #16
   23f40:	e0833002 	add	r3, r3, r2
   23f44:	e50b3010 	str	r3, [fp, #-16]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   23f48:	e51b3008 	ldr	r3, [fp, #-8]
   23f4c:	e5932000 	ldr	r2, [r3]
   23f50:	e51b300c 	ldr	r3, [fp, #-12]
   23f54:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   23f58:	e51b3008 	ldr	r3, [fp, #-8]
   23f5c:	e5932004 	ldr	r2, [r3, #4]
   23f60:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23f64:	e0423003 	sub	r3, r2, r3
   23f68:	e3a02010 	mov	r2, #16
   23f6c:	e1a02082 	lsl	r2, r2, #1
   23f70:	e1530002 	cmp	r3, r2
   23f74:	9a00000e 	bls	23fb4 <pvPortMalloc+0x170>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   23f78:	e51b2008 	ldr	r2, [fp, #-8]
   23f7c:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23f80:	e0823003 	add	r3, r2, r3
   23f84:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   23f88:	e51b3008 	ldr	r3, [fp, #-8]
   23f8c:	e5932004 	ldr	r2, [r3, #4]
   23f90:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23f94:	e0422003 	sub	r2, r2, r3
   23f98:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   23f9c:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   23fa0:	e51b3008 	ldr	r3, [fp, #-8]
   23fa4:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   23fa8:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   23fac:	e51b0014 	ldr	r0, [fp, #-20]	@ 0xffffffec
   23fb0:	eb000079 	bl	2419c <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   23fb4:	e59f3048 	ldr	r3, [pc, #72]	@ 24004 <pvPortMalloc+0x1c0>
   23fb8:	e5932000 	ldr	r2, [r3]
   23fbc:	e51b3008 	ldr	r3, [fp, #-8]
   23fc0:	e5933004 	ldr	r3, [r3, #4]
   23fc4:	e0423003 	sub	r3, r2, r3
   23fc8:	e59f2034 	ldr	r2, [pc, #52]	@ 24004 <pvPortMalloc+0x1c0>
   23fcc:	e5823000 	str	r3, [r2]
			}
		}
	}
	xTaskResumeAll();
   23fd0:	ebfff9d1 	bl	2271c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   23fd4:	e59f302c 	ldr	r3, [pc, #44]	@ 24008 <pvPortMalloc+0x1c4>
   23fd8:	e5932000 	ldr	r2, [r3]
   23fdc:	e51b3018 	ldr	r3, [fp, #-24]	@ 0xffffffe8
   23fe0:	e0823003 	add	r3, r2, r3
   23fe4:	e59f201c 	ldr	r2, [pc, #28]	@ 24008 <pvPortMalloc+0x1c4>
   23fe8:	e5823000 	str	r3, [r2]

	return pvReturn;
   23fec:	e51b3010 	ldr	r3, [fp, #-16]
}
   23ff0:	e1a00003 	mov	r0, r3
   23ff4:	e24bd004 	sub	sp, fp, #4
   23ff8:	e8bd8800 	pop	{fp, pc}
   23ffc:	00025bf8 	strdeq	r5, [r2], -r8
   24000:	00025bf0 	strdeq	r5, [r2], -r0
   24004:	0002481c 	andeq	r4, r2, ip, lsl r8
   24008:	00025bfc 	strdeq	r5, [r2], -ip

0002400c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   2400c:	e92d4800 	push	{fp, lr}
   24010:	e28db004 	add	fp, sp, #4
   24014:	e24dd010 	sub	sp, sp, #16
   24018:	e50b0010 	str	r0, [fp, #-16]
unsigned char *puc = ( unsigned char * ) pv;
   2401c:	e51b3010 	ldr	r3, [fp, #-16]
   24020:	e50b3008 	str	r3, [fp, #-8]
xBlockLink *pxLink;

	if( pv != NULL )
   24024:	e51b3010 	ldr	r3, [fp, #-16]
   24028:	e3530000 	cmp	r3, #0
   2402c:	0a000011 	beq	24078 <vPortFree+0x6c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   24030:	e3a03010 	mov	r3, #16
   24034:	e2633000 	rsb	r3, r3, #0
   24038:	e51b2008 	ldr	r2, [fp, #-8]
   2403c:	e0823003 	add	r3, r2, r3
   24040:	e50b3008 	str	r3, [fp, #-8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   24044:	e51b3008 	ldr	r3, [fp, #-8]
   24048:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
   2404c:	ebfff9a6 	bl	226ec <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   24050:	e51b300c 	ldr	r3, [fp, #-12]
   24054:	e5932004 	ldr	r2, [r3, #4]
   24058:	e59f3024 	ldr	r3, [pc, #36]	@ 24084 <vPortFree+0x78>
   2405c:	e5933000 	ldr	r3, [r3]
   24060:	e0823003 	add	r3, r2, r3
   24064:	e59f2018 	ldr	r2, [pc, #24]	@ 24084 <vPortFree+0x78>
   24068:	e5823000 	str	r3, [r2]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   2406c:	e51b000c 	ldr	r0, [fp, #-12]
   24070:	eb000049 	bl	2419c <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   24074:	ebfff9a8 	bl	2271c <xTaskResumeAll>
	}
}
   24078:	e320f000 	nop	{0}
   2407c:	e24bd004 	sub	sp, fp, #4
   24080:	e8bd8800 	pop	{fp, pc}
   24084:	0002481c 	andeq	r4, r2, ip, lsl r8

00024088 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   24088:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   2408c:	e28db000 	add	fp, sp, #0
	return xFreeBytesRemaining;
   24090:	e59f3010 	ldr	r3, [pc, #16]	@ 240a8 <xPortGetFreeHeapSize+0x20>
   24094:	e5933000 	ldr	r3, [r3]
}
   24098:	e1a00003 	mov	r0, r3
   2409c:	e28bd000 	add	sp, fp, #0
   240a0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   240a4:	e12fff1e 	bx	lr
   240a8:	0002481c 	andeq	r4, r2, ip, lsl r8

000240ac <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   240ac:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   240b0:	e28db000 	add	fp, sp, #0
	/* This just exists to keep the linker quiet. */
}
   240b4:	e320f000 	nop	{0}
   240b8:	e28bd000 	add	sp, fp, #0
   240bc:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   240c0:	e12fff1e 	bx	lr

000240c4 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   240c4:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   240c8:	e28db000 	add	fp, sp, #0
   240cc:	e24dd00c 	sub	sp, sp, #12
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   240d0:	e59f30b4 	ldr	r3, [pc, #180]	@ 2418c <prvHeapInit+0xc8>
   240d4:	e59f20b4 	ldr	r2, [pc, #180]	@ 24190 <prvHeapInit+0xcc>
   240d8:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   240dc:	e59f30a8 	ldr	r3, [pc, #168]	@ 2418c <prvHeapInit+0xc8>
   240e0:	e3a02000 	mov	r2, #0
   240e4:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   240e8:	e3a02a01 	mov	r2, #4096	@ 0x1000
   240ec:	e59f309c 	ldr	r3, [pc, #156]	@ 24190 <prvHeapInit+0xcc>
   240f0:	e0823003 	add	r3, r2, r3
   240f4:	e50b3008 	str	r3, [fp, #-8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   240f8:	e3a03010 	mov	r3, #16
   240fc:	e2633000 	rsb	r3, r3, #0
   24100:	e51b2008 	ldr	r2, [fp, #-8]
   24104:	e0823003 	add	r3, r2, r3
   24108:	e50b3008 	str	r3, [fp, #-8]
	pxEnd = ( void * ) pucHeapEnd;
   2410c:	e59f2080 	ldr	r2, [pc, #128]	@ 24194 <prvHeapInit+0xd0>
   24110:	e51b3008 	ldr	r3, [fp, #-8]
   24114:	e5823000 	str	r3, [r2]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   24118:	e59f3074 	ldr	r3, [pc, #116]	@ 24194 <prvHeapInit+0xd0>
   2411c:	e5933000 	ldr	r3, [r3]
   24120:	e3a02000 	mov	r2, #0
   24124:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   24128:	e59f3064 	ldr	r3, [pc, #100]	@ 24194 <prvHeapInit+0xd0>
   2412c:	e5933000 	ldr	r3, [r3]
   24130:	e3a02000 	mov	r2, #0
   24134:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   24138:	e59f3050 	ldr	r3, [pc, #80]	@ 24190 <prvHeapInit+0xcc>
   2413c:	e50b300c 	str	r3, [fp, #-12]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   24140:	e3a03a01 	mov	r3, #4096	@ 0x1000
   24144:	e3a02010 	mov	r2, #16
   24148:	e0432002 	sub	r2, r3, r2
   2414c:	e51b300c 	ldr	r3, [fp, #-12]
   24150:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   24154:	e59f3038 	ldr	r3, [pc, #56]	@ 24194 <prvHeapInit+0xd0>
   24158:	e5932000 	ldr	r2, [r3]
   2415c:	e51b300c 	ldr	r3, [fp, #-12]
   24160:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   24164:	e59f302c 	ldr	r3, [pc, #44]	@ 24198 <prvHeapInit+0xd4>
   24168:	e5933000 	ldr	r3, [r3]
   2416c:	e3a02010 	mov	r2, #16
   24170:	e0433002 	sub	r3, r3, r2
   24174:	e59f201c 	ldr	r2, [pc, #28]	@ 24198 <prvHeapInit+0xd4>
   24178:	e5823000 	str	r3, [r2]
}
   2417c:	e320f000 	nop	{0}
   24180:	e28bd000 	add	sp, fp, #0
   24184:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   24188:	e12fff1e 	bx	lr
   2418c:	00025bf0 	strdeq	r5, [r2], -r0
   24190:	00024bf0 	strdeq	r4, [r2], -r0
   24194:	00025bf8 	strdeq	r5, [r2], -r8
   24198:	0002481c 	andeq	r4, r2, ip, lsl r8

0002419c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   2419c:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   241a0:	e28db000 	add	fp, sp, #0
   241a4:	e24dd014 	sub	sp, sp, #20
   241a8:	e50b0010 	str	r0, [fp, #-16]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   241ac:	e59f3134 	ldr	r3, [pc, #308]	@ 242e8 <prvInsertBlockIntoFreeList+0x14c>
   241b0:	e50b3008 	str	r3, [fp, #-8]
   241b4:	ea000002 	b	241c4 <prvInsertBlockIntoFreeList+0x28>
   241b8:	e51b3008 	ldr	r3, [fp, #-8]
   241bc:	e5933000 	ldr	r3, [r3]
   241c0:	e50b3008 	str	r3, [fp, #-8]
   241c4:	e51b3008 	ldr	r3, [fp, #-8]
   241c8:	e5933000 	ldr	r3, [r3]
   241cc:	e51b2010 	ldr	r2, [fp, #-16]
   241d0:	e1520003 	cmp	r2, r3
   241d4:	8afffff7 	bhi	241b8 <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   241d8:	e51b3008 	ldr	r3, [fp, #-8]
   241dc:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   241e0:	e51b3008 	ldr	r3, [fp, #-8]
   241e4:	e5933004 	ldr	r3, [r3, #4]
   241e8:	e51b200c 	ldr	r2, [fp, #-12]
   241ec:	e0823003 	add	r3, r2, r3
   241f0:	e51b2010 	ldr	r2, [fp, #-16]
   241f4:	e1520003 	cmp	r2, r3
   241f8:	1a000008 	bne	24220 <prvInsertBlockIntoFreeList+0x84>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   241fc:	e51b3008 	ldr	r3, [fp, #-8]
   24200:	e5932004 	ldr	r2, [r3, #4]
   24204:	e51b3010 	ldr	r3, [fp, #-16]
   24208:	e5933004 	ldr	r3, [r3, #4]
   2420c:	e0822003 	add	r2, r2, r3
   24210:	e51b3008 	ldr	r3, [fp, #-8]
   24214:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   24218:	e51b3008 	ldr	r3, [fp, #-8]
   2421c:	e50b3010 	str	r3, [fp, #-16]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   24220:	e51b3010 	ldr	r3, [fp, #-16]
   24224:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   24228:	e51b3010 	ldr	r3, [fp, #-16]
   2422c:	e5933004 	ldr	r3, [r3, #4]
   24230:	e51b200c 	ldr	r2, [fp, #-12]
   24234:	e0822003 	add	r2, r2, r3
   24238:	e51b3008 	ldr	r3, [fp, #-8]
   2423c:	e5933000 	ldr	r3, [r3]
   24240:	e1520003 	cmp	r2, r3
   24244:	1a000018 	bne	242ac <prvInsertBlockIntoFreeList+0x110>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   24248:	e51b3008 	ldr	r3, [fp, #-8]
   2424c:	e5932000 	ldr	r2, [r3]
   24250:	e59f3094 	ldr	r3, [pc, #148]	@ 242ec <prvInsertBlockIntoFreeList+0x150>
   24254:	e5933000 	ldr	r3, [r3]
   24258:	e1520003 	cmp	r2, r3
   2425c:	0a00000d 	beq	24298 <prvInsertBlockIntoFreeList+0xfc>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   24260:	e51b3010 	ldr	r3, [fp, #-16]
   24264:	e5932004 	ldr	r2, [r3, #4]
   24268:	e51b3008 	ldr	r3, [fp, #-8]
   2426c:	e5933000 	ldr	r3, [r3]
   24270:	e5933004 	ldr	r3, [r3, #4]
   24274:	e0822003 	add	r2, r2, r3
   24278:	e51b3010 	ldr	r3, [fp, #-16]
   2427c:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   24280:	e51b3008 	ldr	r3, [fp, #-8]
   24284:	e5933000 	ldr	r3, [r3]
   24288:	e5932000 	ldr	r2, [r3]
   2428c:	e51b3010 	ldr	r3, [fp, #-16]
   24290:	e5832000 	str	r2, [r3]
   24294:	ea000008 	b	242bc <prvInsertBlockIntoFreeList+0x120>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   24298:	e59f304c 	ldr	r3, [pc, #76]	@ 242ec <prvInsertBlockIntoFreeList+0x150>
   2429c:	e5932000 	ldr	r2, [r3]
   242a0:	e51b3010 	ldr	r3, [fp, #-16]
   242a4:	e5832000 	str	r2, [r3]
   242a8:	ea000003 	b	242bc <prvInsertBlockIntoFreeList+0x120>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   242ac:	e51b3008 	ldr	r3, [fp, #-8]
   242b0:	e5932000 	ldr	r2, [r3]
   242b4:	e51b3010 	ldr	r3, [fp, #-16]
   242b8:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   242bc:	e51b2008 	ldr	r2, [fp, #-8]
   242c0:	e51b3010 	ldr	r3, [fp, #-16]
   242c4:	e1520003 	cmp	r2, r3
   242c8:	0a000002 	beq	242d8 <prvInsertBlockIntoFreeList+0x13c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   242cc:	e51b3008 	ldr	r3, [fp, #-8]
   242d0:	e51b2010 	ldr	r2, [fp, #-16]
   242d4:	e5832000 	str	r2, [r3]
	}
}
   242d8:	e320f000 	nop	{0}
   242dc:	e28bd000 	add	sp, fp, #0
   242e0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   242e4:	e12fff1e 	bx	lr
   242e8:	00025bf0 	strdeq	r5, [r2], -r0
   242ec:	00025bf8 	strdeq	r5, [r2], -r8

000242f0 <undefined_instruction>:
   242f0:	eafffffe 	b	242f0 <undefined_instruction>

000242f4 <prefetch_abort>:
   242f4:	eafffffe 	b	242f4 <prefetch_abort>

000242f8 <data_abort>:
   242f8:	eafffffe 	b	242f8 <data_abort>

000242fc <unused>:
   242fc:	eafffffe 	b	242fc <unused>

00024300 <fiq>:
   24300:	eafffffe 	b	24300 <fiq>

00024304 <hang>:
   24304:	eafffffe 	b	24304 <hang>

00024308 <uart_putc>:

#define UART0_BASE  0x101f1000
#define UART0_DR    (*(volatile unsigned int*)(UART0_BASE + 0x00))
#define UART0_FR    (*(volatile unsigned int*)(UART0_BASE + 0x18))

void uart_putc(char c) {
   24308:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   2430c:	e28db000 	add	fp, sp, #0
   24310:	e24dd00c 	sub	sp, sp, #12
   24314:	e1a03000 	mov	r3, r0
   24318:	e54b3005 	strb	r3, [fp, #-5]
    while (UART0_FR & (1 << 5)) ; // 等待发送 FIFO 非满
   2431c:	e320f000 	nop	{0}
   24320:	e59f3028 	ldr	r3, [pc, #40]	@ 24350 <uart_putc+0x48>
   24324:	e5933000 	ldr	r3, [r3]
   24328:	e2033020 	and	r3, r3, #32
   2432c:	e3530000 	cmp	r3, #0
   24330:	1afffffa 	bne	24320 <uart_putc+0x18>
    UART0_DR = c;
   24334:	e59f2018 	ldr	r2, [pc, #24]	@ 24354 <uart_putc+0x4c>
   24338:	e55b3005 	ldrb	r3, [fp, #-5]
   2433c:	e5823000 	str	r3, [r2]
}
   24340:	e320f000 	nop	{0}
   24344:	e28bd000 	add	sp, fp, #0
   24348:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   2434c:	e12fff1e 	bx	lr
   24350:	101f1018 	andsne	r1, pc, r8, lsl r0	@ <UNPREDICTABLE>
   24354:	101f1000 	andsne	r1, pc, r0

00024358 <uart_puts>:

void uart_puts(const char* s) {
   24358:	e92d4800 	push	{fp, lr}
   2435c:	e28db004 	add	fp, sp, #4
   24360:	e24dd008 	sub	sp, sp, #8
   24364:	e50b0008 	str	r0, [fp, #-8]
    while (*s) {
   24368:	ea000005 	b	24384 <uart_puts+0x2c>
        uart_putc(*s++);
   2436c:	e51b3008 	ldr	r3, [fp, #-8]
   24370:	e2832001 	add	r2, r3, #1
   24374:	e50b2008 	str	r2, [fp, #-8]
   24378:	e5d33000 	ldrb	r3, [r3]
   2437c:	e1a00003 	mov	r0, r3
   24380:	ebffffe0 	bl	24308 <uart_putc>
    while (*s) {
   24384:	e51b3008 	ldr	r3, [fp, #-8]
   24388:	e5d33000 	ldrb	r3, [r3]
   2438c:	e3530000 	cmp	r3, #0
   24390:	1afffff5 	bne	2436c <uart_puts+0x14>
    }
}
   24394:	e320f000 	nop	{0}
   24398:	e320f000 	nop	{0}
   2439c:	e24bd004 	sub	sp, fp, #4
   243a0:	e8bd8800 	pop	{fp, pc}

000243a4 <uart_init>:

void uart_init() {
   243a4:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   243a8:	e28db000 	add	fp, sp, #0
    // 对于 QEMU versatilepb 平台，一般 UART 默认已初始化
    // 你可以留空，或者设定波特率等（如 PL011 初始化）
}
   243ac:	e320f000 	nop	{0}
   243b0:	e28bd000 	add	sp, fp, #0
   243b4:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   243b8:	e12fff1e 	bx	lr

000243bc <task1>:

void task1(void *pParam) {
   243bc:	e92d4800 	push	{fp, lr}
   243c0:	e28db004 	add	fp, sp, #4
   243c4:	e24dd010 	sub	sp, sp, #16
   243c8:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   243cc:	e3a03000 	mov	r3, #0
   243d0:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   243d4:	e51b3008 	ldr	r3, [fp, #-8]
   243d8:	e2833001 	add	r3, r3, #1
   243dc:	e50b3008 	str	r3, [fp, #-8]
		SetGpio(16, 1);
   243e0:	e3a01001 	mov	r1, #1
   243e4:	e3a00010 	mov	r0, #16
   243e8:	ebfffd63 	bl	2397c <SetGpio>
		vTaskDelay(200);
   243ec:	e3a000c8 	mov	r0, #200	@ 0xc8
   243f0:	ebfff702 	bl	22000 <vTaskDelay>
		i++;
   243f4:	e320f000 	nop	{0}
   243f8:	eafffff5 	b	243d4 <task1+0x18>

000243fc <task2>:
	}
}

void task2(void *pParam) {
   243fc:	e92d4800 	push	{fp, lr}
   24400:	e28db004 	add	fp, sp, #4
   24404:	e24dd010 	sub	sp, sp, #16
   24408:	e50b0010 	str	r0, [fp, #-16]

	int i = 0;
   2440c:	e3a03000 	mov	r3, #0
   24410:	e50b3008 	str	r3, [fp, #-8]
	while(1) {
		i++;
   24414:	e51b3008 	ldr	r3, [fp, #-8]
   24418:	e2833001 	add	r3, r3, #1
   2441c:	e50b3008 	str	r3, [fp, #-8]
		vTaskDelay(100);
   24420:	e3a00064 	mov	r0, #100	@ 0x64
   24424:	ebfff6f5 	bl	22000 <vTaskDelay>
		SetGpio(16, 0);
   24428:	e3a01000 	mov	r1, #0
   2442c:	e3a00010 	mov	r0, #16
   24430:	ebfffd51 	bl	2397c <SetGpio>
		vTaskDelay(100);
   24434:	e3a00064 	mov	r0, #100	@ 0x64
   24438:	ebfff6f0 	bl	22000 <vTaskDelay>
		i++;
   2443c:	e320f000 	nop	{0}
   24440:	eafffff3 	b	24414 <task2+0x18>

00024444 <main>:
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
void main (void)
{
   24444:	e92d4800 	push	{fp, lr}
   24448:	e28db004 	add	fp, sp, #4
   2444c:	e24dd010 	sub	sp, sp, #16
    uart_init();
   24450:	ebffffd3 	bl	243a4 <uart_init>
    uart_puts("Hello from FreeRTOS!\n");
   24454:	e59f0080 	ldr	r0, [pc, #128]	@ 244dc <main+0x98>
   24458:	ebffffbe 	bl	24358 <uart_puts>

	SetGpioFunction(16, 1);			// RDY led
   2445c:	e3a01001 	mov	r1, #1
   24460:	e3a00010 	mov	r0, #16
   24464:	ebfffd00 	bl	2386c <SetGpioFunction>

	xTaskCreate(task1, "LED_0", 128, NULL, 0, NULL);
   24468:	e3a03000 	mov	r3, #0
   2446c:	e58d300c 	str	r3, [sp, #12]
   24470:	e3a03000 	mov	r3, #0
   24474:	e58d3008 	str	r3, [sp, #8]
   24478:	e3a03000 	mov	r3, #0
   2447c:	e58d3004 	str	r3, [sp, #4]
   24480:	e3a03000 	mov	r3, #0
   24484:	e58d3000 	str	r3, [sp]
   24488:	e3a03000 	mov	r3, #0
   2448c:	e3a02080 	mov	r2, #128	@ 0x80
   24490:	e59f1048 	ldr	r1, [pc, #72]	@ 244e0 <main+0x9c>
   24494:	e59f0048 	ldr	r0, [pc, #72]	@ 244e4 <main+0xa0>
   24498:	ebfff5c1 	bl	21ba4 <xTaskGenericCreate>
	xTaskCreate(task2, "LED_1", 128, NULL, 0, NULL);
   2449c:	e3a03000 	mov	r3, #0
   244a0:	e58d300c 	str	r3, [sp, #12]
   244a4:	e3a03000 	mov	r3, #0
   244a8:	e58d3008 	str	r3, [sp, #8]
   244ac:	e3a03000 	mov	r3, #0
   244b0:	e58d3004 	str	r3, [sp, #4]
   244b4:	e3a03000 	mov	r3, #0
   244b8:	e58d3000 	str	r3, [sp]
   244bc:	e3a03000 	mov	r3, #0
   244c0:	e3a02080 	mov	r2, #128	@ 0x80
   244c4:	e59f101c 	ldr	r1, [pc, #28]	@ 244e8 <main+0xa4>
   244c8:	e59f001c 	ldr	r0, [pc, #28]	@ 244ec <main+0xa8>
   244cc:	ebfff5b4 	bl	21ba4 <xTaskGenericCreate>

	vTaskStartScheduler();
   244d0:	ebfff850 	bl	22618 <vTaskStartScheduler>

	/*
	 *	We should never get here, but just in case something goes wrong,
	 *	we'll place the CPU into a safe loop.
	 */
	while(1) {
   244d4:	e320f000 	nop	{0}
   244d8:	eafffffd 	b	244d4 <main+0x90>
   244dc:	000247ec 	andeq	r4, r2, ip, ror #15
   244e0:	00024804 	andeq	r4, r2, r4, lsl #16
   244e4:	000243bc 			@ <UNDEFINED> instruction: 0x000243bc
   244e8:	0002480c 	andeq	r4, r2, ip, lsl #16
   244ec:	000243fc 	strdeq	r4, [r2], -ip

000244f0 <strncpy>:
   244f0:	e1803001 	orr	r3, r0, r1
   244f4:	e3520003 	cmp	r2, #3
   244f8:	e2033003 	and	r3, r3, #3
   244fc:	93a0c000 	movls	ip, #0
   24500:	83a0c001 	movhi	ip, #1
   24504:	e3530000 	cmp	r3, #0
   24508:	13a0c000 	movne	ip, #0
   2450c:	e35c0000 	cmp	ip, #0
   24510:	e92d4030 	push	{r4, r5, lr}
   24514:	01a0e000 	moveq	lr, r0
   24518:	1a000015 	bne	24574 <strncpy+0x84>
   2451c:	e2411001 	sub	r1, r1, #1
   24520:	ea000007 	b	24544 <strncpy+0x54>
   24524:	e1a0300e 	mov	r3, lr
   24528:	e5f1c001 	ldrb	ip, [r1, #1]!
   2452c:	e35c0000 	cmp	ip, #0
   24530:	e4c3c001 	strb	ip, [r3], #1
   24534:	e2424001 	sub	r4, r2, #1
   24538:	0a000005 	beq	24554 <strncpy+0x64>
   2453c:	e1a0e003 	mov	lr, r3
   24540:	e1a02004 	mov	r2, r4
   24544:	e3520000 	cmp	r2, #0
   24548:	1afffff5 	bne	24524 <strncpy+0x34>
   2454c:	e8bd4030 	pop	{r4, r5, lr}
   24550:	e12fff1e 	bx	lr
   24554:	e3540000 	cmp	r4, #0
   24558:	108ee002 	addne	lr, lr, r2
   2455c:	0afffffa 	beq	2454c <strncpy+0x5c>
   24560:	e4c3c001 	strb	ip, [r3], #1
   24564:	e153000e 	cmp	r3, lr
   24568:	1afffffc 	bne	24560 <strncpy+0x70>
   2456c:	e8bd4030 	pop	{r4, r5, lr}
   24570:	e12fff1e 	bx	lr
   24574:	e1a03001 	mov	r3, r1
   24578:	e1a0e000 	mov	lr, r0
   2457c:	e59f5034 	ldr	r5, [pc, #52]	@ 245b8 <strncpy+0xc8>
   24580:	e59f4034 	ldr	r4, [pc, #52]	@ 245bc <strncpy+0xcc>
   24584:	e1a01003 	mov	r1, r3
   24588:	e593c000 	ldr	ip, [r3]
   2458c:	e08c3005 	add	r3, ip, r5
   24590:	e1c3300c 	bic	r3, r3, ip
   24594:	e1130004 	tst	r3, r4
   24598:	e2813004 	add	r3, r1, #4
   2459c:	1affffde 	bne	2451c <strncpy+0x2c>
   245a0:	e2422004 	sub	r2, r2, #4
   245a4:	e3520003 	cmp	r2, #3
   245a8:	e48ec004 	str	ip, [lr], #4
   245ac:	8afffff4 	bhi	24584 <strncpy+0x94>
   245b0:	e1a01003 	mov	r1, r3
   245b4:	eaffffd8 	b	2451c <strncpy+0x2c>
   245b8:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   245bc:	80808080 	addhi	r8, r0, r0, lsl #1

000245c0 <memset>:
   245c0:	e3100003 	tst	r0, #3
   245c4:	e92d4030 	push	{r4, r5, lr}
   245c8:	0a000036 	beq	246a8 <memset+0xe8>
   245cc:	e3520000 	cmp	r2, #0
   245d0:	e2423001 	sub	r3, r2, #1
   245d4:	0a00002f 	beq	24698 <memset+0xd8>
   245d8:	e1a0e000 	mov	lr, r0
   245dc:	e20120ff 	and	r2, r1, #255	@ 0xff
   245e0:	ea000001 	b	245ec <memset+0x2c>
   245e4:	e2533001 	subs	r3, r3, #1
   245e8:	3a00002a 	bcc	24698 <memset+0xd8>
   245ec:	e4ce2001 	strb	r2, [lr], #1
   245f0:	e31e0003 	tst	lr, #3
   245f4:	1afffffa 	bne	245e4 <memset+0x24>
   245f8:	e3530003 	cmp	r3, #3
   245fc:	9a00001e 	bls	2467c <memset+0xbc>
   24600:	e201c0ff 	and	ip, r1, #255	@ 0xff
   24604:	e08cc40c 	add	ip, ip, ip, lsl #8
   24608:	e353000f 	cmp	r3, #15
   2460c:	e08cc80c 	add	ip, ip, ip, lsl #16
   24610:	9a000027 	bls	246b4 <memset+0xf4>
   24614:	e2432010 	sub	r2, r3, #16
   24618:	e3c2400f 	bic	r4, r2, #15
   2461c:	e28e5020 	add	r5, lr, #32
   24620:	e0855004 	add	r5, r5, r4
   24624:	e1a04222 	lsr	r4, r2, #4
   24628:	e28e2010 	add	r2, lr, #16
   2462c:	e502c010 	str	ip, [r2, #-16]
   24630:	e502c00c 	str	ip, [r2, #-12]
   24634:	e502c008 	str	ip, [r2, #-8]
   24638:	e502c004 	str	ip, [r2, #-4]
   2463c:	e2822010 	add	r2, r2, #16
   24640:	e1520005 	cmp	r2, r5
   24644:	1afffff8 	bne	2462c <memset+0x6c>
   24648:	e2842001 	add	r2, r4, #1
   2464c:	e313000c 	tst	r3, #12
   24650:	e08e2202 	add	r2, lr, r2, lsl #4
   24654:	e203300f 	and	r3, r3, #15
   24658:	0a000010 	beq	246a0 <memset+0xe0>
   2465c:	e243e004 	sub	lr, r3, #4
   24660:	e3cee003 	bic	lr, lr, #3
   24664:	e28ee004 	add	lr, lr, #4
   24668:	e082e00e 	add	lr, r2, lr
   2466c:	e482c004 	str	ip, [r2], #4
   24670:	e15e0002 	cmp	lr, r2
   24674:	1afffffc 	bne	2466c <memset+0xac>
   24678:	e2033003 	and	r3, r3, #3
   2467c:	e3530000 	cmp	r3, #0
   24680:	120110ff 	andne	r1, r1, #255	@ 0xff
   24684:	108e3003 	addne	r3, lr, r3
   24688:	0a000002 	beq	24698 <memset+0xd8>
   2468c:	e4ce1001 	strb	r1, [lr], #1
   24690:	e15e0003 	cmp	lr, r3
   24694:	1afffffc 	bne	2468c <memset+0xcc>
   24698:	e8bd4030 	pop	{r4, r5, lr}
   2469c:	e12fff1e 	bx	lr
   246a0:	e1a0e002 	mov	lr, r2
   246a4:	eafffff4 	b	2467c <memset+0xbc>
   246a8:	e1a0e000 	mov	lr, r0
   246ac:	e1a03002 	mov	r3, r2
   246b0:	eaffffd0 	b	245f8 <memset+0x38>
   246b4:	e1a0200e 	mov	r2, lr
   246b8:	eaffffe7 	b	2465c <memset+0x9c>

000246bc <memcpy>:
   246bc:	e352000f 	cmp	r2, #15
   246c0:	9a00000c 	bls	246f8 <memcpy+0x3c>
   246c4:	e1803001 	orr	r3, r0, r1
   246c8:	e3130003 	tst	r3, #3
   246cc:	11a03000 	movne	r3, r0
   246d0:	12422001 	subne	r2, r2, #1
   246d4:	0a00000c 	beq	2470c <memcpy+0x50>
   246d8:	e2822001 	add	r2, r2, #1
   246dc:	e2433001 	sub	r3, r3, #1
   246e0:	e0812002 	add	r2, r1, r2
   246e4:	e4d1c001 	ldrb	ip, [r1], #1
   246e8:	e1510002 	cmp	r1, r2
   246ec:	e5e3c001 	strb	ip, [r3, #1]!
   246f0:	1afffffb 	bne	246e4 <memcpy+0x28>
   246f4:	e12fff1e 	bx	lr
   246f8:	e3520000 	cmp	r2, #0
   246fc:	e1a03000 	mov	r3, r0
   24700:	e2422001 	sub	r2, r2, #1
   24704:	1afffff3 	bne	246d8 <memcpy+0x1c>
   24708:	e12fff1e 	bx	lr
   2470c:	e1a0c000 	mov	ip, r0
   24710:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24714:	e2427010 	sub	r7, r2, #16
   24718:	e3c7700f 	bic	r7, r7, #15
   2471c:	e2877010 	add	r7, r7, #16
   24720:	e281e010 	add	lr, r1, #16
   24724:	e0803007 	add	r3, r0, r7
   24728:	e51e8010 	ldr	r8, [lr, #-16]
   2472c:	e48c8010 	str	r8, [ip], #16
   24730:	e51e600c 	ldr	r6, [lr, #-12]
   24734:	e51e5008 	ldr	r5, [lr, #-8]
   24738:	e51e4004 	ldr	r4, [lr, #-4]
   2473c:	e15c0003 	cmp	ip, r3
   24740:	e50c600c 	str	r6, [ip, #-12]
   24744:	e50c5008 	str	r5, [ip, #-8]
   24748:	e50c4004 	str	r4, [ip, #-4]
   2474c:	e28ee010 	add	lr, lr, #16
   24750:	1afffff4 	bne	24728 <memcpy+0x6c>
   24754:	e312000c 	tst	r2, #12
   24758:	e202c00f 	and	ip, r2, #15
   2475c:	01a0200c 	moveq	r2, ip
   24760:	e0811007 	add	r1, r1, r7
   24764:	0a00000d 	beq	247a0 <memcpy+0xe4>
   24768:	e1a04001 	mov	r4, r1
   2476c:	e24cc004 	sub	ip, ip, #4
   24770:	e3cc6003 	bic	r6, ip, #3
   24774:	e1a0e12c 	lsr	lr, ip, #2
   24778:	e0836006 	add	r6, r3, r6
   2477c:	e243c004 	sub	ip, r3, #4
   24780:	e4945004 	ldr	r5, [r4], #4
   24784:	e5ac5004 	str	r5, [ip, #4]!
   24788:	e15c0006 	cmp	ip, r6
   2478c:	1afffffb 	bne	24780 <memcpy+0xc4>
   24790:	e28ec001 	add	ip, lr, #1
   24794:	e2022003 	and	r2, r2, #3
   24798:	e083310c 	add	r3, r3, ip, lsl #2
   2479c:	e081110c 	add	r1, r1, ip, lsl #2
   247a0:	e3520000 	cmp	r2, #0
   247a4:	e2422001 	sub	r2, r2, #1
   247a8:	12822001 	addne	r2, r2, #1
   247ac:	12433001 	subne	r3, r3, #1
   247b0:	10812002 	addne	r2, r1, r2
   247b4:	0a000003 	beq	247c8 <memcpy+0x10c>
   247b8:	e4d1c001 	ldrb	ip, [r1], #1
   247bc:	e1510002 	cmp	r1, r2
   247c0:	e5e3c001 	strb	ip, [r3, #1]!
   247c4:	1afffffb 	bne	247b8 <memcpy+0xfc>
   247c8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   247cc:	e12fff1e 	bx	lr

Disassembly of section .rodata:

000247d0 <pRegs>:
static volatile BCM2835_TIMER_REGS * const pRegs = (BCM2835_TIMER_REGS *) (portTIMER_BASE);
   247d0:	2000b400 	andcs	fp, r0, r0, lsl #8
   247d4:	454c4449 	strbmi	r4, [ip, #-1097]	@ 0xfffffbb7
   247d8:	00000000 	andeq	r0, r0, r0

000247dc <pRegs>:
static volatile BCM2835_INTC_REGS * const pRegs = (BCM2835_INTC_REGS *) (BCM2835_BASE_INTC);
   247dc:	2000b200 	andcs	fp, r0, r0, lsl #4

000247e0 <pRegs>:
volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);
   247e0:	20200000 	eorcs	r0, r0, r0

000247e4 <heapSTRUCT_SIZE>:
static const unsigned short heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( sizeof( xBlockLink ) % portBYTE_ALIGNMENT ) );
   247e4:	00000010 	andeq	r0, r0, r0, lsl r0

000247e8 <xTotalHeapSize>:
static const size_t xTotalHeapSize = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   247e8:	00001000 	andeq	r1, r0, r0
   247ec:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	@ 0xfffffee0
   247f0:	7266206f 	rsbvc	r2, r6, #111	@ 0x6f
   247f4:	46206d6f 	strtmi	r6, [r0], -pc, ror #26
   247f8:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
   247fc:	21534f54 	cmpcs	r3, r4, asr pc
   24800:	0000000a 	andeq	r0, r0, sl
   24804:	5f44454c 	svcpl	0x0044454c
   24808:	00000030 	andeq	r0, r0, r0, lsr r0
   2480c:	5f44454c 	svcpl	0x0044454c
   24810:	Address 0x24810 is out of bounds.


Disassembly of section .data:

00024814 <ulCriticalNesting>:
volatile unsigned long ulCriticalNesting = 9999UL;
   24814:	0000270f 	andeq	r2, r0, pc, lsl #14

00024818 <xNextTaskUnblockTime>:
PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
   24818:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff

0002481c <xFreeBytesRemaining>:
static size_t xFreeBytesRemaining = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   2481c:	00001000 	andeq	r1, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000026c 	andeq	r0, r0, ip, ror #4
       4:	04010005 	streq	r0, [r1], #-5
       8:	00000000 	andeq	r0, r0, r0
       c:	0000e60d 	andeq	lr, r0, sp, lsl #12
      10:	00221d00 	eoreq	r1, r2, r0, lsl #26
      14:	01b60000 			@ <UNDEFINED> instruction: 0x01b60000
      18:	00000000 	andeq	r0, r0, r0
      1c:	03440002 	movteq	r0, #16386	@ 0x4002
      20:	00000000 	andeq	r0, r0, r0
      24:	040e0000 	streq	r0, [lr], #-0
      28:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
      2c:	07040200 	streq	r0, [r4, -r0, lsl #4]
      30:	000006e8 	andeq	r0, r0, r8, ror #13
      34:	00002d09 	andeq	r2, r0, r9, lsl #26
      38:	05080200 	streq	r0, [r8, #-512]	@ 0xfffffe00
      3c:	0000016b 	andeq	r0, r0, fp, ror #2
      40:	f7040802 			@ <UNDEFINED> instruction: 0xf7040802
      44:	05000001 	streq	r0, [r0, #-1]
      48:	0000012c 	andeq	r0, r0, ip, lsr #2
      4c:	53104702 	tstpl	r0, #524288	@ 0x80000
      50:	06000000 	streq	r0, [r0], -r0
      54:	00000058 	andeq	r0, r0, r8, asr r0
      58:	0000630a 	andeq	r6, r0, sl, lsl #6
      5c:	00630300 	rsbeq	r0, r3, r0, lsl #6
      60:	0f000000 	svceq	0x00000000
      64:	00150504 	andseq	r0, r5, r4, lsl #10
      68:	61030000 	mrsvs	r0, (UNDEF: 3)
      6c:	0000711c 	andeq	r7, r0, ip, lsl r1
      70:	07040200 	streq	r0, [r4, -r0, lsl #4]
      74:	000006e3 	andeq	r0, r0, r3, ror #13
      78:	70050402 	andvc	r0, r5, r2, lsl #8
      7c:	02000001 	andeq	r0, r0, #1
      80:	06f70601 	ldrbteq	r0, [r7], r1, lsl #12
      84:	02020000 	andeq	r0, r2, #0
      88:	0000d307 	andeq	sp, r0, r7, lsl #6
      8c:	00710600 	rsbseq	r0, r1, r0, lsl #12
      90:	e2050000 	and	r0, r5, #0
      94:	04000001 	streq	r0, [r0], #-1
      98:	009e100b 	addseq	r1, lr, fp
      9c:	a3060000 	movwge	r0, #24576	@ 0x6000
      a0:	0a000000 	beq	a8 <_start-0xff58>
      a4:	000000b3 	strheq	r0, [r0], -r3
      a8:	00002d03 	andeq	r2, r0, r3, lsl #26
      ac:	00630300 	rsbeq	r0, r3, r0, lsl #6
      b0:	10000000 	andne	r0, r0, r0
      b4:	000000bf 	strheq	r0, [r0], -pc	@ <UNPREDICTABLE>
      b8:	10560124 	subsne	r0, r6, r4, lsr #2
      bc:	00000124 	andeq	r0, r0, r4, lsr #2
      c0:	444f4c01 	strbmi	r4, [pc], #-3073	@ c8 <_start-0xff38>
      c4:	00715700 	rsbseq	r5, r1, r0, lsl #14
      c8:	01000000 	mrseq	r0, (UNDEF: 0)
      cc:	004c4156 	subeq	r4, ip, r6, asr r1
      d0:	00007158 	andeq	r7, r0, r8, asr r1
      d4:	43010400 	movwmi	r0, #5120	@ 0x1400
      d8:	59004c54 	stmdbpl	r0, {r2, r4, r6, sl, fp, lr}
      dc:	00000071 	andeq	r0, r0, r1, ror r0
      e0:	4c430108 	stfmie	f0, [r3], {8}
      e4:	715a0049 	cmpvc	sl, r9, asr #32
      e8:	0c000000 	stceq	0, cr0, [r0], {-0}
      ec:	53495201 	movtpl	r5, #37377	@ 0x9201
      f0:	00715b00 	rsbseq	r5, r1, r0, lsl #22
      f4:	01100000 	tsteq	r0, r0
      f8:	0053494d 	subseq	r4, r3, sp, asr #18
      fc:	0000715c 	andeq	r7, r0, ip, asr r1
     100:	52011400 	andpl	r1, r1, #0, 8
     104:	5d00444c 	cfstrspl	mvf4, [r0, #-304]	@ 0xfffffed0
     108:	00000071 	andeq	r0, r0, r1, ror r0
     10c:	49440118 	stmdbmi	r4, {r3, r4, r8}^
     110:	715e0056 	cmpvc	lr, r6, asr r0
     114:	1c000000 	stcne	0, cr0, [r0], {-0}
     118:	544e4301 	strbpl	r4, [lr], #-769	@ 0xfffffcff
     11c:	00715f00 	rsbseq	r5, r1, r0, lsl #30
     120:	00200000 	eoreq	r0, r0, r0
     124:	0000c005 	andeq	ip, r0, r5
     128:	03600100 	cmneq	r0, #0, 2
     12c:	000000b3 	strheq	r0, [r0], -r3
     130:	00012411 	andeq	r2, r1, r1, lsl r4
     134:	019d0700 	orrseq	r0, sp, r0, lsl #14
     138:	2c620000 	stclcs	0, cr0, [r2], #-0
     13c:	0000014b 	andeq	r0, r0, fp, asr #2
     140:	47d00305 	ldrbmi	r0, [r0, r5, lsl #6]
     144:	30060002 	andcc	r0, r6, r2
     148:	09000001 	stmdbeq	r0, {r0}
     14c:	00000146 	andeq	r0, r0, r6, asr #2
     150:	00013808 	andeq	r3, r1, r8, lsl #16
     154:	06160400 	ldreq	r0, [r6], -r0, lsl #8
     158:	0001d80b 	andeq	sp, r1, fp, lsl #16
     15c:	01681300 	cmneq	r8, r0, lsl #6
     160:	34030000 	strcc	r0, [r3], #-0
     164:	00000000 	andeq	r0, r0, r0
     168:	0000a50b 	andeq	sl, r0, fp, lsl #10
     16c:	01821200 	orreq	r1, r2, r0, lsl #4
     170:	34030000 	strcc	r0, [r3], #-0
     174:	03000000 	movweq	r0, #0
     178:	00000092 	muleq	r0, r2, r0
     17c:	00006303 	andeq	r6, r0, r3, lsl #6
     180:	0c080000 	stceq	0, cr0, [r8], {-0}
     184:	04000000 	streq	r0, [r0], #-0
     188:	740c0615 	strvc	r0, [ip], #-1557	@ 0xfffff9eb
     18c:	d4000000 	strle	r0, [r0], #-0
     190:	01a30c04 			@ <UNDEFINED> instruction: 0x01a30c04
     194:	04930000 	ldreq	r0, [r3], #0
     198:	00017908 	andeq	r7, r1, r8, lsl #18
     19c:	0d6d0100 	stfeqe	f0, [sp, #-0]
     1a0:	00008712 	andeq	r8, r0, r2, lsl r7
     1a4:	0deb0100 	stfeqe	f0, [fp]
     1a8:	000202ac 	andeq	r0, r2, ip, lsr #5
     1ac:	00000098 	muleq	r0, r8, r0
     1b0:	01c59c01 	biceq	r9, r5, r1, lsl #24
     1b4:	2d070000 	stccs	0, cr0, [r7, #-0]
     1b8:	ed000002 	stc	0, cr0, [r0, #-8]
     1bc:	00007110 	andeq	r7, r0, r0, lsl r1
     1c0:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     1c4:	01551300 	cmpeq	r5, r0, lsl #6
     1c8:	dd010000 	stcle	0, cr0, [r1, #-0]
     1cc:	02027406 	andeq	r7, r2, #100663296	@ 0x6000000
     1d0:	00003800 	andeq	r3, r0, r0, lsl #16
     1d4:	f89c0100 			@ <UNDEFINED> instruction: 0xf89c0100
     1d8:	04000001 	streq	r0, [r0], #-1
     1dc:	00000000 	andeq	r0, r0, r0
     1e0:	002d1ddd 	ldrdeq	r1, [sp], -sp	@ <UNPREDICTABLE>
     1e4:	91020000 	mrsls	r0, (UNDEF: 2)
     1e8:	009e0474 	addseq	r0, lr, r4, ror r4
     1ec:	29dd0000 	ldmibcs	sp, {}^	@ <UNPREDICTABLE>
     1f0:	00000063 	andeq	r0, r0, r3, rrx
     1f4:	00709102 	rsbseq	r9, r0, r2, lsl #2
     1f8:	00014314 	andeq	r4, r1, r4, lsl r3
     1fc:	06d00100 	ldrbeq	r0, [r0], r0, lsl #2
     200:	0002025c 	andeq	r0, r2, ip, asr r2
     204:	00000018 	andeq	r0, r0, r8, lsl r0
     208:	03159c01 	tsteq	r5, #256	@ 0x100
     20c:	01000002 	tsteq	r0, r2
     210:	00780fc2 	rsbseq	r0, r8, r2, asr #31
     214:	02400000 	subeq	r0, r0, #0
     218:	001c0002 	andseq	r0, ip, r2
     21c:	9c010000 	stcls	0, cr0, [r1], {-0}
     220:	00021716 	andeq	r1, r2, r6, lsl r7
     224:	11770100 	cmnne	r7, r0, lsl #2
     228:	0000008d 	andeq	r0, r0, sp, lsl #1
     22c:	00020000 	andeq	r0, r2, r0
     230:	00000240 	andeq	r0, r0, r0, asr #4
     234:	5e049c01 	cdppl	12, 0, cr9, cr4, cr1, {0}
     238:	77000001 	strvc	r0, [r0, -r1]
     23c:	00008d38 	andeq	r8, r0, r8, lsr sp
     240:	6c910200 	lfmvs	f0, 4, [r1], {0}
     244:	00000504 	andeq	r0, r0, r4, lsl #10
     248:	47527700 	ldrbmi	r7, [r2, -r0, lsl #14]
     24c:	02000000 	andeq	r0, r0, #0
     250:	90046891 	mulls	r4, r1, r8
     254:	77000001 	strvc	r0, [r0, -r1]
     258:	00006360 	andeq	r6, r0, r0, ror #6
     25c:	64910200 	ldrvs	r0, [r1], #512	@ 0x200
     260:	0000b107 	andeq	fp, r0, r7, lsl #2
     264:	8d117900 	vldrhi.16	s14, [r1, #-0]	@ <UNPREDICTABLE>
     268:	02000000 	andeq	r0, r0, #0
     26c:	00007491 	muleq	r0, r1, r4
     270:	00000187 	andeq	r0, r0, r7, lsl #3
     274:	04010005 	streq	r0, [r1], #-5
     278:	00000172 	andeq	r0, r0, r2, ror r1
     27c:	0000e608 	andeq	lr, r0, r8, lsl #12
     280:	02611d00 	rsbeq	r1, r1, #0, 26
     284:	01b60000 			@ <UNDEFINED> instruction: 0x01b60000
     288:	03440000 	movteq	r0, #16384	@ 0x4000
     28c:	02a40002 	adceq	r0, r4, #2
     290:	02010000 	andeq	r0, r1, #0
     294:	04090000 	streq	r0, [r9], #-0
     298:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
     29c:	07040200 	streq	r0, [r4, -r0, lsl #4]
     2a0:	000006e8 	andeq	r0, r0, r8, ror #13
     2a4:	6b050802 	blvs	1422b4 <__bss_end+0x11c6b4>
     2a8:	02000001 	andeq	r0, r0, #1
     2ac:	01f70408 	mvnseq	r0, r8, lsl #8
     2b0:	04020000 	streq	r0, [r2], #-0
     2b4:	0006e307 	andeq	lr, r6, r7, lsl #6
     2b8:	00420400 	subeq	r0, r2, r0, lsl #8
     2bc:	04020000 	streq	r0, [r2], #-0
     2c0:	00017005 	andeq	r7, r1, r5
     2c4:	024f0500 	subeq	r0, pc, #0, 10
     2c8:	18650000 	stmdane	r5!, {}^	@ <UNPREDICTABLE>
     2cc:	00000049 	andeq	r0, r0, r9, asr #32
     2d0:	48140305 	ldmdami	r4, {r0, r2, r8, r9}
     2d4:	ea050002 	b	1402e4 <__bss_end+0x11a6e4>
     2d8:	73000002 	movwvc	r0, #2
     2dc:	00002605 	andeq	r2, r0, r5, lsl #12
     2e0:	20030500 	andcs	r0, r3, r0, lsl #10
     2e4:	0a000248 	beq	c0c <_start-0xf3f4>
     2e8:	000002f5 	strdeq	r0, [r0], -r5
     2ec:	060dbe01 	streq	fp, [sp], -r1, lsl #28
     2f0:	000002b6 			@ <UNDEFINED> instruction: 0x000002b6
     2f4:	020584fe 	andeq	r8, r5, #-33554432	@ 0xfe000000
     2f8:	00006400 	andeq	r6, r0, r0, lsl #8
     2fc:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     300:	0000023c 	andeq	r0, r0, ip, lsr r2
     304:	020540ee 	andeq	r4, r5, #238	@ 0xee
     308:	00004400 	andeq	r4, r0, r0, lsl #8
     30c:	0b9c0100 	bleq	fe700714 <_estack+0xf66e0714>
     310:	000002dc 	ldrdeq	r0, [r0], -ip
     314:	9006c101 	andls	ip, r6, r1, lsl #2
     318:	b0000204 	andlt	r0, r0, r4, lsl #4
     31c:	01000000 	mrseq	r0, (UNDEF: 0)
     320:	0000f69c 	muleq	r0, ip, r6
     324:	04900700 	ldreq	r0, [r0], #1792	@ 0x700
     328:	00580002 	subseq	r0, r8, r2
     32c:	00d70000 	sbcseq	r0, r7, r0
     330:	00010000 	andeq	r0, r1, r0
     334:	c2000003 	andgt	r0, r0, #3
     338:	000000fc 	strdeq	r0, [r0], -ip
     33c:	00024f01 	andeq	r4, r2, r1, lsl #30
     340:	0049c200 	subeq	ip, r9, r0, lsl #4
     344:	03000000 	movweq	r0, #0
     348:	000204ec 	andeq	r0, r2, ip, ror #9
     34c:	00000048 	andeq	r0, r0, r8, asr #32
     350:	00030001 	andeq	r0, r3, r1
     354:	00fcc400 	rscseq	ip, ip, r0, lsl #8
     358:	4f010000 	svcmi	0x00010000
     35c:	c4000002 	strgt	r0, [r0], #-2
     360:	00000049 	andeq	r0, r0, r9, asr #32
     364:	040c0000 	streq	r0, [ip], #-0
     368:	00000101 	andeq	r0, r0, r1, lsl #2
     36c:	0000f604 	andeq	pc, r0, r4, lsl #12
     370:	c80e0d00 	stmdagt	lr, {r8, sl, fp}
     374:	01000002 	tsteq	r0, r2
     378:	03dc069c 	bicseq	r0, ip, #156, 12	@ 0x9c00000
     37c:	00b40002 	adcseq	r0, r4, r2
     380:	9c010000 	stcls	0, cr0, [r1], {-0}
     384:	00000159 	andeq	r0, r0, r9, asr r1
     388:	0203e007 	andeq	lr, r3, #7
     38c:	00005800 	andeq	r5, r0, r0, lsl #16
     390:	00013a00 	andeq	r3, r1, r0, lsl #20
     394:	03000100 	movweq	r0, #256	@ 0x100
     398:	fca40000 	stc2	0, cr0, [r4]
     39c:	01000000 	mrseq	r0, (UNDEF: 0)
     3a0:	0000024f 	andeq	r0, r0, pc, asr #4
     3a4:	000049a4 	andeq	r4, r0, r4, lsr #19
     3a8:	3c030000 	stccc	0, cr0, [r3], {-0}
     3ac:	48000204 	stmdami	r0, {r2, r9}
     3b0:	01000000 	mrseq	r0, (UNDEF: 0)
     3b4:	00000300 	andeq	r0, r0, r0, lsl #6
     3b8:	0000fcaa 	andeq	pc, r0, sl, lsr #25
     3bc:	024f0100 	subeq	r0, pc, #0, 2
     3c0:	49aa0000 	stmibmi	sl!, {}	@ <UNPREDICTABLE>
     3c4:	00000000 	andeq	r0, r0, r0
     3c8:	01790f00 	cmneq	r9, r0, lsl #30
     3cc:	75010000 	strvc	r0, [r1, #-0]
     3d0:	02034406 	andeq	r4, r3, #100663296	@ 0x6000000
     3d4:	00009800 	andeq	r9, r0, r0, lsl #16
     3d8:	039c0100 	orrseq	r0, ip, #0, 2
     3dc:	0002036c 	andeq	r0, r2, ip, ror #6
     3e0:	00000048 	andeq	r0, r0, r8, asr #32
     3e4:	00030001 	andeq	r0, r3, r1
     3e8:	00fc8800 	rscseq	r8, ip, r0, lsl #16
     3ec:	4f010000 	svcmi	0x00010000
     3f0:	88000002 	stmdahi	r0, {r1}
     3f4:	00000049 	andeq	r0, r0, r9, asr #32
     3f8:	1d000000 	stcne	0, cr0, [r0, #-0]
     3fc:	05000005 	streq	r0, [r0, #-5]
     400:	6b040100 	blvs	100808 <__bss_end+0xdac08>
     404:	0f000002 	svceq	0x00000002
     408:	000000e6 	andeq	r0, r0, r6, ror #1
     40c:	0006161d 	andeq	r1, r6, sp, lsl r6
     410:	0001b600 	andeq	fp, r1, r0, lsl #12
     414:	0205f000 	andeq	pc, r5, #0
     418:	00076800 	andeq	r6, r7, r0, lsl #16
     41c:	0002dc00 	andeq	sp, r2, r0, lsl #24
     420:	05041000 	streq	r1, [r4, #-0]
     424:	00746e69 	rsbseq	r6, r4, r9, ror #28
     428:	0003b704 	andeq	fp, r3, r4, lsl #14
     42c:	17d60200 	ldrbne	r0, [r6, r0, lsl #4]
     430:	00000039 	andeq	r0, r0, r9, lsr r0
     434:	e8070405 	stmda	r7, {r0, r2, sl}
     438:	05000006 	streq	r0, [r0, #-6]
     43c:	016b0508 	cmneq	fp, r8, lsl #10
     440:	08050000 	stmdaeq	r5, {}	@ <UNPREDICTABLE>
     444:	0001f704 	andeq	pc, r1, r4, lsl #14
     448:	04041100 	streq	r1, [r4], #-256	@ 0xffffff00
     44c:	00000015 	andeq	r0, r0, r5, lsl r0
     450:	5c1c6103 	ldfpls	f6, [ip], {3}
     454:	05000000 	streq	r0, [r0, #-0]
     458:	06e30704 	strbteq	r0, [r3], r4, lsl #14
     45c:	5c0a0000 	stcpl	0, cr0, [sl], {-0}
     460:	05000000 	streq	r0, [r0, #-0]
     464:	01700504 	cmneq	r0, r4, lsl #10
     468:	a30b0000 	movwge	r0, #45056	@ 0xb000
     46c:	14000004 	strne	r0, [r0], #-4
     470:	be086904 	vmlalt.f16	s12, s16, s8	@ <UNPREDICTABLE>
     474:	01000000 	mrseq	r0, (UNDEF: 0)
     478:	0000047f 	andeq	r0, r0, pc, ror r4
     47c:	500f6b04 	andpl	r6, pc, r4, lsl #22
     480:	00000000 	andeq	r0, r0, r0
     484:	00056a01 	andeq	r6, r5, r1, lsl #20
     488:	1f6c0400 	svcne	0x006c0400
     48c:	000000c3 	andeq	r0, r0, r3, asr #1
     490:	03be0104 			@ <UNDEFINED> instruction: 0x03be0104
     494:	6d040000 	stcvs	0, cr0, [r4, #-0]
     498:	0000c31f 	andeq	ip, r0, pc, lsl r3
     49c:	30010800 	andcc	r0, r1, r0, lsl #16
     4a0:	04000004 	streq	r0, [r0], #-4
     4a4:	004e096e 	subeq	r0, lr, lr, ror #18
     4a8:	010c0000 	mrseq	r0, (UNDEF: 12)
     4ac:	00000517 	andeq	r0, r0, r7, lsl r5
     4b0:	4e096f04 	cdpmi	15, 0, cr6, cr9, cr4, {0}
     4b4:	10000000 	andne	r0, r0, r0
     4b8:	006f0a00 	rsbeq	r0, pc, r0, lsl #20
     4bc:	be060000 	cdplt	0, 0, cr0, cr6, cr0, {0}
     4c0:	04000000 	streq	r0, [r0], #-0
     4c4:	000005e7 	andeq	r0, r0, r7, ror #11
     4c8:	6f1b7104 	svcvs	0x001b7104
     4cc:	0a000000 	beq	4d4 <_start-0xfb2c>
     4d0:	000000c8 	andeq	r0, r0, r8, asr #1
     4d4:	0006a50b 	andeq	sl, r6, fp, lsl #10
     4d8:	73040c00 	movwvc	r0, #19456	@ 0x4c00
     4dc:	00010e08 	andeq	r0, r1, r8, lsl #28
     4e0:	047f0100 	ldrbteq	r0, [pc], #-256	@ 4e8 <_start-0xfb18>
     4e4:	75040000 	strvc	r0, [r4, #-0]
     4e8:	0000500f 	andeq	r5, r0, pc
     4ec:	6a010000 	bvs	404f4 <__bss_end+0x1a8f4>
     4f0:	04000005 	streq	r0, [r0], #-5
     4f4:	00c31e76 	sbceq	r1, r3, r6, ror lr
     4f8:	01040000 	mrseq	r0, (UNDEF: 4)
     4fc:	000003be 			@ <UNDEFINED> instruction: 0x000003be
     500:	c31e7704 	tstgt	lr, #4, 14	@ 0x100000
     504:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
     508:	04c10400 	strbeq	r0, [r1], #1024	@ 0x400
     50c:	79040000 	stmdbvc	r4, {}	@ <UNPREDICTABLE>
     510:	0000d920 	andeq	sp, r0, r0, lsr #18
     514:	010e0a00 	tsteq	lr, r0, lsl #20
     518:	790b0000 	stmdbvc	fp, {}	@ <UNPREDICTABLE>
     51c:	14000004 	strne	r0, [r0], #-4
     520:	54107e04 	ldrpl	r7, [r0], #-3588	@ 0xfffff1fc
     524:	01000001 	tsteq	r0, r1
     528:	000005d7 	ldrdeq	r0, [r0], -r7
     52c:	63228004 			@ <UNDEFINED> instruction: 0x63228004
     530:	00000000 	andeq	r0, r0, r0
     534:	00069d01 	andeq	r9, r6, r1, lsl #26
     538:	17810400 	strne	r0, [r1, r0, lsl #8]
     53c:	00000154 	andeq	r0, r0, r4, asr r1
     540:	060d0104 	streq	r0, [sp], -r4, lsl #2
     544:	82040000 	andhi	r0, r4, #0
     548:	00011a19 	andeq	r1, r1, r9, lsl sl
     54c:	06000800 	streq	r0, [r0], -r0, lsl #16
     550:	000000d4 	ldrdeq	r0, [r0], -r4
     554:	00077a04 	andeq	r7, r7, r4, lsl #20
     558:	03830400 	orreq	r0, r3, #0, 8
     55c:	0000011f 	andeq	r0, r0, pc, lsl r1
     560:	0001590d 	andeq	r5, r1, sp, lsl #18
     564:	06010500 	streq	r0, [r1], -r0, lsl #10
     568:	000006f7 	strdeq	r0, [r0], -r7
     56c:	d3070205 	movwle	r0, #29189	@ 0x7205
     570:	04000000 	streq	r0, [r0], #-0
     574:	00000468 	andeq	r0, r0, r8, ror #8
     578:	4e105305 	cdpmi	3, 1, cr5, cr0, cr5, {0}
     57c:	04000000 	streq	r0, [r0], #-0
     580:	00000559 	andeq	r0, r0, r9, asr r5
     584:	90105605 	andsls	r5, r0, r5, lsl #12
     588:	06000001 	streq	r0, [r0], -r1
     58c:	00000195 	muleq	r0, r5, r1
     590:	0001a512 	andeq	sl, r1, r2, lsl r5
     594:	01780300 	cmneq	r8, r0, lsl #6
     598:	5c030000 	stcpl	0, cr0, [r3], {-0}
     59c:	00000000 	andeq	r0, r0, r0
     5a0:	0005900b 	andeq	r9, r5, fp
     5a4:	58053800 	stmdapl	r5, {fp, ip, sp}
     5a8:	00020110 	andeq	r0, r2, r0, lsl r1
     5ac:	03ef0100 	mvneq	r0, #0, 2
     5b0:	5a050000 	bpl	1405b8 <__bss_end+0x11a9b8>
     5b4:	00018415 	andeq	r8, r1, r5, lsl r4
     5b8:	1f010000 	svcne	0x00010000
     5bc:	05000004 	streq	r0, [r0, #-4]
     5c0:	00c80f5b 	sbceq	r0, r8, fp, asr pc
     5c4:	01040000 	mrseq	r0, (UNDEF: 4)
     5c8:	000004f5 	strdeq	r0, [r0], -r5
     5cc:	c80f5c05 	stmdagt	pc, {r0, r2, sl, fp, ip, lr}	@ <UNPREDICTABLE>
     5d0:	18000000 	stmdane	r0, {}	@ <UNPREDICTABLE>
     5d4:	00069201 	andeq	r9, r6, r1, lsl #4
     5d8:	1a5d0500 	bne	17419e0 <__bss_end+0x171bde0>
     5dc:	0000005c 	andeq	r0, r0, ip, asr r0
     5e0:	03e7012c 	mvneq	r0, #44, 2
     5e4:	5e050000 	cdppl	0, 0, cr0, cr5, cr0, {0}
     5e8:	00005c1a 	andeq	r5, r0, sl, lsl ip
     5ec:	8d013000 	stchi	0, cr3, [r1, #-0]
     5f0:	05000003 	streq	r0, [r0, #-3]
     5f4:	0171135f 	cmneq	r1, pc, asr r3
     5f8:	00340000 	eorseq	r0, r4, r0
     5fc:	0006c204 	andeq	ip, r6, r4, lsl #4
     600:	03600500 	cmneq	r0, #0, 10
     604:	000001a5 	andeq	r0, r0, r5, lsr #3
     608:	00015913 	andeq	r5, r1, r3, lsl r9
     60c:	00021d00 	andeq	r1, r2, r0, lsl #26
     610:	00391400 	eorseq	r1, r9, r0, lsl #8
     614:	00010000 	andeq	r0, r1, r0
     618:	0003a102 	andeq	sl, r3, r2, lsl #2
     61c:	0d0e5100 	stfeqs	f5, [lr, #-0]
     620:	05000002 	streq	r0, [r0, #-2]
     624:	02482403 	subeq	r2, r8, #50331648	@ 0x3000000
     628:	05a90200 	streq	r0, [r9, #512]!	@ 0x200
     62c:	0e520000 	cdpeq	0, 5, cr0, cr2, cr0, {0}
     630:	00000159 	andeq	r0, r0, r9, asr r1
     634:	484c0305 	stmdami	ip, {r0, r2, r8, r9}^
     638:	c0020002 	andgt	r0, r2, r2
     63c:	53000005 	movwpl	r0, #5
     640:	0001590e 	andeq	r5, r1, lr, lsl #18
     644:	60030500 	andvs	r0, r3, r0, lsl #10
     648:	02000248 	andeq	r0, r0, #72, 4	@ 0x80000004
     64c:	0000035a 	andeq	r0, r0, sl, asr r3
     650:	02611054 	rsbeq	r1, r1, #84	@ 0x54
     654:	03050000 	movweq	r0, #20480	@ 0x5000
     658:	00024874 	andeq	r4, r2, r4, ror r8
     65c:	00015906 	andeq	r5, r1, r6, lsl #18
     660:	02610d00 	rsbeq	r0, r1, #0, 26
     664:	71020000 	mrsvc	r0, (UNDEF: 2)
     668:	55000005 	strpl	r0, [r0, #-5]
     66c:	00026110 	andeq	r6, r2, r0, lsl r1
     670:	78030500 	stmdavc	r3, {r8, sl}
     674:	02000248 	andeq	r0, r0, #72, 4	@ 0x80000004
     678:	00000523 	andeq	r0, r0, r3, lsr #10
     67c:	01590e56 	cmpeq	r9, r6, asr lr
     680:	03050000 	movweq	r0, #20480	@ 0x5000
     684:	0002487c 	andeq	r4, r2, ip, ror r8
     688:	00050415 	andeq	r0, r5, r5, lsl r4
     68c:	0b590100 	bleq	1640a94 <__bss_end+0x161ae94>
     690:	0000029f 	muleq	r0, pc, r2	@ <UNPREDICTABLE>
     694:	48900305 	ldmmi	r0, {r0, r2, r8, r9}
     698:	01060002 	tsteq	r6, r2
     69c:	02000002 	andeq	r0, r0, #2
     6a0:	00000676 	andeq	r0, r0, r6, ror r6
     6a4:	005c1f5a 	subseq	r1, ip, sl, asr pc
     6a8:	03050000 	movweq	r0, #20480	@ 0x5000
     6ac:	00024894 	muleq	r2, r4, r8
     6b0:	00066202 	andeq	r6, r6, r2, lsl #4
     6b4:	50155b00 	andspl	r5, r5, r0, lsl #22
     6b8:	05000000 	streq	r0, [r0, #-0]
     6bc:	02489803 	subeq	r9, r8, #196608	@ 0x30000
     6c0:	06530200 	ldrbeq	r0, [r3], -r0, lsl #4
     6c4:	2e5b0000 	cdpcs	0, 5, cr0, cr11, cr0, {0}
     6c8:	00000050 	andeq	r0, r0, r0, asr r0
     6cc:	489c0305 	ldmmi	ip, {r0, r2, r8, r9}
     6d0:	e8020002 	stmda	r2, {r1}
     6d4:	5b000004 	blpl	6ec <_start-0xf914>
     6d8:	00005042 	andeq	r5, r0, r2, asr #32
     6dc:	a0030500 	andge	r0, r3, r0, lsl #10
     6e0:	08000248 	stmdaeq	r0, {r3, r6, r9}
     6e4:	0000037d 	andeq	r0, r0, sp, ror r3
     6e8:	02f90111 	rscseq	r0, r9, #1073741828	@ 0x40000004
     6ec:	61030000 	mrsvs	r0, (UNDEF: 3)
     6f0:	00000002 	andeq	r0, r0, r2
     6f4:	00049116 	andeq	r9, r4, r6, lsl r1
     6f8:	03d80600 	bicseq	r0, r8, #0, 12
     6fc:	0000500e 	andeq	r5, r0, lr
     700:	03950800 	orrseq	r0, r5, #0, 16
     704:	01290000 			@ <UNDEFINED> instruction: 0x01290000
     708:	0000031c 	andeq	r0, r0, ip, lsl r3
     70c:	00026103 	andeq	r6, r2, r3, lsl #2
     710:	031c0300 	tsteq	ip, #0, 6
     714:	06000000 	streq	r0, [r0], -r0
     718:	000000c8 	andeq	r0, r0, r8, asr #1
     71c:	00040308 	andeq	r0, r4, r8, lsl #6
     720:	32014a00 	andcc	r4, r1, #0, 20
     724:	03000003 	movweq	r0, #3
     728:	0000031c 	andeq	r0, r0, ip, lsl r3
     72c:	04380800 	ldrteq	r0, [r8], #-2048	@ 0xfffff800
     730:	013e0000 	teqeq	lr, r0
     734:	00000348 	andeq	r0, r0, r8, asr #6
     738:	00026103 	andeq	r6, r2, r3, lsl #2
     73c:	031c0300 	tsteq	ip, #0, 6
     740:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
     744:	000006ca 	andeq	r0, r0, sl, asr #13
     748:	0359011c 	cmpeq	r9, #28, 2
     74c:	1c030000 	stcne	0, cr0, [r3], {-0}
     750:	00000003 	andeq	r0, r0, r3
     754:	0006b517 	andeq	fp, r6, r7, lsl r5
     758:	01700700 	cmneq	r0, r0, lsl #14
     75c:	00004e07 	andeq	r4, r0, r7, lsl #28
     760:	00037000 	andeq	r7, r3, r0
     764:	002d0300 	eoreq	r0, sp, r0, lsl #6
     768:	18000000 	stmdane	r0, {}	@ <UNPREDICTABLE>
     76c:	000003c9 	andeq	r0, r0, r9, asr #7
     770:	16016c01 	strne	r6, [r1], -r1, lsl #24
     774:	00000068 	andeq	r0, r0, r8, rrx
     778:	00020ccc 	andeq	r0, r2, ip, asr #25
     77c:	0000008c 	andeq	r0, r0, ip, lsl #1
     780:	03ba9c01 			@ <UNDEFINED> instruction: 0x03ba9c01
     784:	0d190000 	ldceq	0, cr0, [r9, #-0]
     788:	01000003 	tsteq	r0, r3
     78c:	ba42016c 	blt	1080d44 <__bss_end+0x105b144>
     790:	02000003 	andeq	r0, r0, #3
     794:	0f076c91 	svceq	0x00076c91
     798:	6e000004 	cdpvs	0, 0, cr0, cr0, cr4, {0}
     79c:	029f0a01 	addseq	r0, pc, #4096	@ 0x1000
     7a0:	91020000 	mrsls	r0, (UNDEF: 2)
     7a4:	09600770 	stmdbeq	r0!, {r4, r5, r6, r8, r9, sl}^
     7a8:	016f0000 	cmneq	pc, r0
     7ac:	00006816 	andeq	r6, r0, r6, lsl r8
     7b0:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     7b4:	01650600 	cmneq	r5, r0, lsl #12
     7b8:	f10e0000 	cpsid	, #0
     7bc:	58000005 	stmdapl	r0, {r0, r2}
     7c0:	020c2401 	andeq	r2, ip, #16777216	@ 0x1000000
     7c4:	0000a800 	andeq	sl, r0, r0, lsl #16
     7c8:	e49c0100 	ldr	r0, [ip], #256	@ 0x100
     7cc:	07000003 	streq	r0, [r0, -r3]
     7d0:	00000692 	muleq	r0, r2, r6
     7d4:	5c18015a 	ldfpls	f0, [r8], {90}	@ 0x5a
     7d8:	02000000 	andeq	r0, r0, #0
     7dc:	1a007491 	bne	1da28 <__module_entries_end+0xd984>
     7e0:	000004ae 	andeq	r0, r0, lr, lsr #9
     7e4:	06013a01 	streq	r3, [r1], -r1, lsl #20
     7e8:	00020b00 	andeq	r0, r2, r0, lsl #22
     7ec:	00000124 	andeq	r0, r0, r4, lsr #2
     7f0:	04159c01 	ldreq	r9, [r5], #-3073	@ 0xfffff3ff
     7f4:	680c0000 	stmdavs	ip, {}	@ <UNPREDICTABLE>
     7f8:	7800020b 	stmdavc	r0, {r0, r1, r3, r9}
     7fc:	07000000 	streq	r0, [r0, -r0]
     800:	0000045c 	andeq	r0, r0, ip, asr r4
     804:	6602014f 	strvs	r0, [r2], -pc, asr #2
     808:	02000002 	andeq	r0, r0, #2
     80c:	00007491 	muleq	r0, r1, r4
     810:	00032a0e 	andeq	r2, r3, lr, lsl #20
     814:	2c010000 	stccs	0, cr0, [r1], {-0}
     818:	d4000209 	strle	r0, [r0], #-521	@ 0xfffffdf7
     81c:	01000001 	tsteq	r0, r1
     820:	0004539c 	muleq	r4, ip, r3
     824:	048a0700 	streq	r0, [sl], #1792	@ 0x700
     828:	01020000 	mrseq	r0, (UNDEF: 2)
     82c:	00029f0a 	andeq	r9, r2, sl, lsl #30
     830:	70910200 	addsvc	r0, r1, r0, lsl #4
     834:	0209900c 	andeq	r9, r9, #12
     838:	00002800 	andeq	r2, r0, r0, lsl #16
     83c:	04550700 	ldrbeq	r0, [r5], #-1792	@ 0xfffff900
     840:	010d0000 	mrseq	r0, (UNDEF: 13)
     844:	0002610c 	andeq	r6, r2, ip, lsl #2
     848:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     84c:	cf1b0000 	svcgt	0x001b0000
     850:	01000004 	tsteq	r0, r4
     854:	083c0de9 	ldmdaeq	ip!, {r0, r3, r5, r6, r7, r8, sl, fp}
     858:	00f00002 	rscseq	r0, r0, r2
     85c:	9c010000 	stcls	0, cr0, [r1], {-0}
     860:	00000482 	andeq	r0, r0, r2, lsl #9
     864:	02084c0c 	andeq	r4, r8, #12, 24	@ 0xc00
     868:	0000b400 	andeq	fp, r0, r0, lsl #8
     86c:	040f0200 	streq	r0, [pc], #-512	@ 874 <_start-0xf78c>
     870:	0cf00000 	ldcleq	0, cr0, [r0]
     874:	0000029f 	muleq	r0, pc, r2	@ <UNPREDICTABLE>
     878:	00749102 	rsbseq	r9, r4, r2, lsl #2
     87c:	053e1c00 	ldreq	r1, [lr, #-3072]!	@ 0xfffff400
     880:	c3010000 	movwgt	r0, #4096	@ 0x1000
     884:	02075806 	andeq	r5, r7, #393216	@ 0x60000
     888:	0000e400 	andeq	lr, r0, r0, lsl #8
     88c:	c39c0100 	orrsgt	r0, ip, #0, 2
     890:	09000004 	stmdbeq	r0, {r2}
     894:	00000447 	andeq	r0, r0, r7, asr #8
     898:	00502fc3 	subseq	r2, r0, r3, asr #31
     89c:	91020000 	mrsls	r0, (UNDEF: 2)
     8a0:	030d096c 	movweq	r0, #55660	@ 0xd96c
     8a4:	45c30000 	strbmi	r0, [r3]
     8a8:	00000261 	andeq	r0, r0, r1, ror #4
     8ac:	02689102 	rsbeq	r9, r8, #-2147483648	@ 0x80000000
     8b0:	00000371 	andeq	r0, r0, r1, ror r3
     8b4:	00500ec5 	subseq	r0, r0, r5, asr #29
     8b8:	91020000 	mrsls	r0, (UNDEF: 2)
     8bc:	191d0074 	ldmdbne	sp, {r2, r4, r5, r6}
     8c0:	01000003 	tsteq	r0, r3
     8c4:	0068168a 	rsbeq	r1, r8, sl, lsl #13
     8c8:	05f00000 	ldrbeq	r0, [r0, #0]!
     8cc:	01680002 	cmneq	r8, r2
     8d0:	9c010000 	stcls	0, cr0, [r1], {-0}
     8d4:	00034a09 	andeq	r4, r3, r9, lsl #20
     8d8:	84398a00 	ldrthi	r8, [r9], #-2560	@ 0xfffff600
     8dc:	02000001 	andeq	r0, r0, #1
     8e0:	92096c91 	andls	r6, r9, #37120	@ 0x9100
     8e4:	8a000006 	bhi	904 <_start-0xf6fc>
     8e8:	00005c61 	andeq	r5, r0, r1, ror #24
     8ec:	68910200 	ldmvs	r1, {r9}
     8f0:	0003e709 	andeq	lr, r3, r9, lsl #14
     8f4:	5c848a00 	vstmiapl	r4, {s16-s15}
     8f8:	02000000 	andeq	r0, r0, #0
     8fc:	60026491 	mulvs	r2, r1, r4
     900:	8c000009 	stchi	0, cr0, [r0], {9}
     904:	00006816 	andeq	r6, r0, r6, lsl r8
     908:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     90c:	00033e02 	andeq	r3, r3, r2, lsl #28
     910:	9f0a8d00 	svcls	0x000a8d00
     914:	02000002 	andeq	r0, r0, #2
     918:	00007091 	muleq	r0, r1, r0
     91c:	0000027d 	andeq	r0, r0, sp, ror r2
     920:	04010005 	streq	r0, [r1], #-5
     924:	0000044f 	andeq	r0, r0, pc, asr #8
     928:	0000e60a 	andeq	lr, r0, sl, lsl #12
     92c:	07121d00 	ldreq	r1, [r2, -r0, lsl #26]
     930:	01b60000 			@ <UNDEFINED> instruction: 0x01b60000
     934:	0d580000 	ldcleq	0, cr0, [r8, #-0]
     938:	029c0002 	addseq	r0, ip, #2
     93c:	05e20000 	strbeq	r0, [r2, #0]!
     940:	04010000 	streq	r0, [r1], #-0
     944:	0006e807 	andeq	lr, r6, r7, lsl #16
     948:	05040b00 	streq	r0, [r4, #-2816]	@ 0xfffff500
     94c:	00746e69 	rsbseq	r6, r4, r9, ror #28
     950:	6b050801 	blvs	14295c <__bss_end+0x11cd5c>
     954:	01000001 	tsteq	r0, r1
     958:	01f70408 	mvnseq	r0, r8, lsl #8
     95c:	01010000 	mrseq	r0, (UNDEF: 1)
     960:	0006f706 	andeq	pc, r6, r6, lsl #14
     964:	08010100 	stmdaeq	r1, {r8}
     968:	000006f5 	strdeq	r0, [r0], -r5
     96c:	6f050201 	svcvs	0x00050201
     970:	01000007 	tsteq	r0, r7
     974:	00d30702 	sbcseq	r0, r3, r2, lsl #14
     978:	04010000 	streq	r0, [r1], #-0
     97c:	00017005 	andeq	r7, r1, r5
     980:	07040100 	streq	r0, [r4, -r0, lsl #2]
     984:	000006e3 	andeq	r0, r0, r3, ror #13
     988:	00006504 	andeq	r6, r0, r4, lsl #10
     98c:	07080100 	streq	r0, [r8, -r0, lsl #2]
     990:	000006de 	ldrdeq	r0, [r0], -lr
     994:	0101040c 	tsteq	r1, ip, lsl #8
     998:	0006fe08 	andeq	pc, r6, r8, lsl #28
     99c:	00150500 	andseq	r0, r5, r0, lsl #10
     9a0:	61030000 	mrsvs	r0, (UNDEF: 3)
     9a4:	0000651c 	andeq	r6, r0, ip, lsl r5
     9a8:	04a30900 	strteq	r0, [r3], #2304	@ 0x900
     9ac:	69140000 	ldmdbvs	r4, {}	@ <UNPREDICTABLE>
     9b0:	0000d608 	andeq	sp, r0, r8, lsl #12
     9b4:	047f0200 	ldrbteq	r0, [pc], #-512	@ 9bc <_start-0xf644>
     9b8:	0f6b0000 	svceq	0x006b0000
     9bc:	00000081 	andeq	r0, r0, r1, lsl #1
     9c0:	056a0200 	strbeq	r0, [sl, #-512]!	@ 0xfffffe00
     9c4:	1f6c0000 	svcne	0x006c0000
     9c8:	000000db 	ldrdeq	r0, [r0], -fp
     9cc:	03be0204 			@ <UNDEFINED> instruction: 0x03be0204
     9d0:	1f6d0000 	svcne	0x006d0000
     9d4:	000000db 	ldrdeq	r0, [r0], -fp
     9d8:	04300208 	ldrteq	r0, [r0], #-520	@ 0xfffffdf8
     9dc:	096e0000 	stmdbeq	lr!, {}^	@ <UNPREDICTABLE>
     9e0:	00000078 	andeq	r0, r0, r8, ror r0
     9e4:	0517020c 	ldreq	r0, [r7, #-524]	@ 0xfffffdf4
     9e8:	096f0000 	stmdbeq	pc!, {}^	@ <UNPREDICTABLE>
     9ec:	00000078 	andeq	r0, r0, r8, ror r0
     9f0:	8d040010 	stchi	0, cr0, [r4, #-64]	@ 0xffffffc0
     9f4:	06000000 	streq	r0, [r0], -r0
     9f8:	000000d6 	ldrdeq	r0, [r0], -r6
     9fc:	0005e705 	andeq	lr, r5, r5, lsl #14
     a00:	1b710200 	blne	1c41208 <__bss_end+0x1c1b608>
     a04:	0000008d 	andeq	r0, r0, sp, lsl #1
     a08:	0000e004 	andeq	lr, r0, r4
     a0c:	06a50900 	strteq	r0, [r5], r0, lsl #18
     a10:	730c0000 	movwvc	r0, #49152	@ 0xc000
     a14:	00012208 	andeq	r2, r1, r8, lsl #4
     a18:	047f0200 	ldrbteq	r0, [pc], #-512	@ a20 <_start-0xf5e0>
     a1c:	0f750000 	svceq	0x00750000
     a20:	00000081 	andeq	r0, r0, r1, lsl #1
     a24:	056a0200 	strbeq	r0, [sl, #-512]!	@ 0xfffffe00
     a28:	1e760000 	cdpne	0, 7, cr0, cr6, cr0, {0}
     a2c:	000000db 	ldrdeq	r0, [r0], -fp
     a30:	03be0204 			@ <UNDEFINED> instruction: 0x03be0204
     a34:	1e770000 	cdpne	0, 7, cr0, cr7, cr0, {0}
     a38:	000000db 	ldrdeq	r0, [r0], -fp
     a3c:	c1050008 	tstgt	r5, r8
     a40:	02000004 	andeq	r0, r0, #4
     a44:	00f12079 	rscseq	r2, r1, r9, ror r0
     a48:	22040000 	andcs	r0, r4, #0
     a4c:	09000001 	stmdbeq	r0, {r0}
     a50:	00000479 	andeq	r0, r0, r9, ror r4
     a54:	64107e14 	ldrvs	r7, [r0], #-3604	@ 0xfffff1ec
     a58:	02000001 	andeq	r0, r0, #1
     a5c:	000005d7 	ldrdeq	r0, [r0], -r7
     a60:	006c2280 	rsbeq	r2, ip, r0, lsl #5
     a64:	02000000 	andeq	r0, r0, #0
     a68:	0000069d 	muleq	r0, sp, r6
     a6c:	01641781 	cmneq	r4, r1, lsl #15
     a70:	02040000 	andeq	r0, r4, #0
     a74:	0000060d 	andeq	r0, r0, sp, lsl #12
     a78:	012e1982 	smlawbeq	lr, r2, r9, r1
     a7c:	00080000 	andeq	r0, r8, r0
     a80:	0000ec06 	andeq	lr, r0, r6, lsl #24
     a84:	077a0500 	ldrbeq	r0, [sl, -r0, lsl #10]!
     a88:	83020000 	movwhi	r0, #8192	@ 0x2000
     a8c:	00013303 	andeq	r3, r1, r3, lsl #6
     a90:	04030700 	streq	r0, [r3], #-1792	@ 0xfffff900
     a94:	5cb70000 	ldcpl	0, cr0, [r7]
     a98:	9800020f 	stmdals	r0, {r0, r1, r2, r3, r9}
     a9c:	01000000 	mrseq	r0, (UNDEF: 0)
     aa0:	0001a69c 	muleq	r1, ip, r6
     aa4:	07030300 	streq	r0, [r3, -r0, lsl #6]
     aa8:	1eb70000 	cdpne	0, 11, cr0, cr7, cr0, {0}
     aac:	000001a6 	andeq	r0, r0, r6, lsr #3
     ab0:	086c9102 	stmdaeq	ip!, {r1, r8, ip, pc}^
     ab4:	00000779 	andeq	r0, r0, r9, ror r7
     ab8:	01ab09b9 			@ <UNDEFINED> instruction: 0x01ab09b9
     abc:	91020000 	mrsls	r0, (UNDEF: 2)
     ac0:	e0060074 	and	r0, r6, r4, ror r0
     ac4:	06000000 	streq	r0, [r0], -r0
     ac8:	00000169 	andeq	r0, r0, r9, ror #2
     acc:	00039507 	andeq	r9, r3, r7, lsl #10
     ad0:	0e847e00 	cdpeq	14, 8, cr7, cr4, cr0, {0}
     ad4:	00d80002 	sbcseq	r0, r8, r2
     ad8:	9c010000 	stcls	0, cr0, [r1], {-0}
     adc:	000001fd 	strdeq	r0, [r0], -sp
     ae0:	00077903 	andeq	r7, r7, r3, lsl #18
     ae4:	ab1a7e00 	blge	6a02ec <__bss_end+0x67a6ec>
     ae8:	02000001 	andeq	r0, r0, #1
     aec:	80036c91 	mulhi	r3, r1, ip
     af0:	7e000007 	cdpvc	0, 0, cr0, cr0, cr7, {0}
     af4:	0001a62d 	andeq	sl, r1, sp, lsr #12
     af8:	68910200 	ldmvs	r1, {r9}
     afc:	00076408 	andeq	r6, r7, r8, lsl #8
     b00:	64158000 	ldrvs	r8, [r5], #-0
     b04:	02000001 	andeq	r0, r0, #1
     b08:	4b087491 	blmi	21dd54 <__bss_end+0x1f8154>
     b0c:	81000007 	tsthi	r0, r7
     b10:	0000810e 	andeq	r8, r0, lr, lsl #2
     b14:	70910200 	addsvc	r0, r1, r0, lsl #4
     b18:	04380700 	ldrteq	r0, [r8], #-1792	@ 0xfffff900
     b1c:	ec670000 	stcl	0, cr0, [r7], #-0
     b20:	9800020d 	stmdals	r0, {r0, r2, r3, r9}
     b24:	01000000 	mrseq	r0, (UNDEF: 0)
     b28:	00023c9c 	muleq	r2, ip, ip
     b2c:	07790300 	ldrbeq	r0, [r9, -r0, lsl #6]!
     b30:	1d670000 	stclne	0, cr0, [r7, #-0]
     b34:	000001ab 	andeq	r0, r0, fp, lsr #3
     b38:	036c9102 	cmneq	ip, #-2147483648	@ 0x80000000
     b3c:	00000780 	andeq	r0, r0, r0, lsl #15
     b40:	01a63067 			@ <UNDEFINED> instruction: 0x01a63067
     b44:	91020000 	mrsls	r0, (UNDEF: 2)
     b48:	069d0868 	ldreq	r0, [sp], r8, ror #16
     b4c:	16690000 	strbtne	r0, [r9], -r0
     b50:	00000164 	andeq	r0, r0, r4, ror #2
     b54:	00749102 	rsbseq	r9, r4, r2, lsl #2
     b58:	0006ca07 	andeq	ip, r6, r7, lsl #20
     b5c:	0dc06000 	stcleq	0, cr6, [r0]
     b60:	002c0002 	eoreq	r0, ip, r2
     b64:	9c010000 	stcls	0, cr0, [r1], {-0}
     b68:	0000025f 	andeq	r0, r0, pc, asr r2
     b6c:	00075d03 	andeq	r5, r7, r3, lsl #26
     b70:	a6266000 	strtge	r6, [r6], -r0
     b74:	02000001 	andeq	r0, r0, #1
     b78:	0d007491 	cfstrseq	mvf7, [r0, #-580]	@ 0xfffffdbc
     b7c:	0000037d 	andeq	r0, r0, sp, ror r3
     b80:	58064c01 	stmdapl	r6, {r0, sl, fp, lr}
     b84:	6800020d 	stmdavs	r0, {r0, r2, r3, r9}
     b88:	01000000 	mrseq	r0, (UNDEF: 0)
     b8c:	0779039c 			@ <UNDEFINED> instruction: 0x0779039c
     b90:	1e4c0000 	cdpne	0, 4, cr0, cr12, cr0, {0}
     b94:	000001ab 	andeq	r0, r0, fp, lsr #3
     b98:	00749102 	rsbseq	r9, r4, r2, lsl #2
     b9c:	00083f00 	andeq	r3, r8, r0, lsl #30
     ba0:	01000500 	tsteq	r0, r0, lsl #10
     ba4:	00051e04 	andeq	r1, r5, r4, lsl #28
     ba8:	00e61300 	rsceq	r1, r6, r0, lsl #6
     bac:	061d0000 	ldreq	r0, [sp], -r0
     bb0:	b6000009 	strlt	r0, [r0], -r9
     bb4:	f4000001 	vst4.8	{d0-d3}, [r0], r1
     bb8:	b000020f 	andlt	r0, r0, pc, lsl #4
     bbc:	af00000b 	svcge	0x0000000b
     bc0:	07000007 	streq	r0, [r0, -r7]
     bc4:	000003b7 			@ <UNDEFINED> instruction: 0x000003b7
     bc8:	3217d602 	andscc	sp, r7, #2097152	@ 0x200000
     bcc:	05000000 	streq	r0, [r0, #-0]
     bd0:	06e80704 	strbteq	r0, [r8], r4, lsl #14
     bd4:	04140000 	ldreq	r0, [r4], #-0
     bd8:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
     bdc:	05080500 	streq	r0, [r8, #-1280]	@ 0xfffffb00
     be0:	0000016b 	andeq	r0, r0, fp, ror #2
     be4:	f7040805 			@ <UNDEFINED> instruction: 0xf7040805
     be8:	05000001 	streq	r0, [r0, #-1]
     bec:	06f70601 	ldrbteq	r0, [r7], r1, lsl #12
     bf0:	01050000 	mrseq	r0, (UNDEF: 5)
     bf4:	0006f508 	andeq	pc, r6, r8, lsl #10
     bf8:	05020500 	streq	r0, [r2, #-1280]	@ 0xfffffb00
     bfc:	0000076f 	andeq	r0, r0, pc, ror #14
     c00:	d3070205 	movwle	r0, #29189	@ 0x7205
     c04:	05000000 	streq	r0, [r0, #-0]
     c08:	01700504 	cmneq	r0, r4, lsl #10
     c0c:	6a0a0000 	bvs	280c14 <__bss_end+0x25b014>
     c10:	05000000 	streq	r0, [r0, #-0]
     c14:	06e30704 	strbteq	r0, [r3], r4, lsl #14
     c18:	760a0000 	strvc	r0, [sl], -r0
     c1c:	05000000 	streq	r0, [r0, #-0]
     c20:	06de0708 	ldrbeq	r0, [lr], r8, lsl #14
     c24:	04150000 	ldreq	r0, [r5], #-0
     c28:	00008908 	andeq	r8, r0, r8, lsl #18
     c2c:	08010500 	stmdaeq	r1, {r8, sl}
     c30:	000006fe 	strdeq	r0, [r0], -lr
     c34:	0000a106 	andeq	sl, r0, r6, lsl #2
     c38:	00970800 	addseq	r0, r7, r0, lsl #16
     c3c:	07160000 	ldreq	r0, [r6, -r0]
     c40:	00000015 	andeq	r0, r0, r5, lsl r0
     c44:	761c6103 	ldrvc	r6, [ip], -r3, lsl #2
     c48:	0b000000 	bleq	c50 <_start-0xf3b0>
     c4c:	000004a3 	andeq	r0, r0, r3, lsr #9
     c50:	08690414 	stmdaeq	r9!, {r2, r4, sl}^
     c54:	000000fd 	strdeq	r0, [r0], -sp
     c58:	00047f02 	andeq	r7, r4, r2, lsl #30
     c5c:	0f6b0400 	svceq	0x006b0400
     c60:	000000a2 	andeq	r0, r0, r2, lsr #1
     c64:	056a0200 	strbeq	r0, [sl, #-512]!	@ 0xfffffe00
     c68:	6c040000 	stcvs	0, cr0, [r4], {-0}
     c6c:	0001021f 	andeq	r0, r1, pc, lsl r2
     c70:	be020400 	cfcpyslt	mvf0, mvf2
     c74:	04000003 	streq	r0, [r0], #-3
     c78:	01021f6d 	tsteq	r2, sp, ror #30
     c7c:	02080000 	andeq	r0, r8, #0
     c80:	00000430 	andeq	r0, r0, r0, lsr r4
     c84:	89096e04 	stmdbhi	r9, {r2, r9, sl, fp, sp, lr}
     c88:	0c000000 	stceq	0, cr0, [r0], {-0}
     c8c:	00051702 	andeq	r1, r5, r2, lsl #14
     c90:	096f0400 	stmdbeq	pc!, {sl}^	@ <UNPREDICTABLE>
     c94:	00000089 	andeq	r0, r0, r9, lsl #1
     c98:	ae0a0010 	mcrge	0, 0, r0, cr10, cr0, {0}
     c9c:	06000000 	streq	r0, [r0], -r0
     ca0:	000000fd 	strdeq	r0, [r0], -sp
     ca4:	0005e707 	andeq	lr, r5, r7, lsl #14
     ca8:	1b710400 	blne	1c41cb0 <__bss_end+0x1c1c0b0>
     cac:	000000ae 	andeq	r0, r0, lr, lsr #1
     cb0:	0001070a 	andeq	r0, r1, sl, lsl #14
     cb4:	06a50b00 	strteq	r0, [r5], r0, lsl #22
     cb8:	040c0000 	streq	r0, [ip], #-0
     cbc:	014d0873 	hvceq	53379	@ 0xd083
     cc0:	7f020000 	svcvc	0x00020000
     cc4:	04000004 	streq	r0, [r0], #-4
     cc8:	00a20f75 	adceq	r0, r2, r5, ror pc
     ccc:	02000000 	andeq	r0, r0, #0
     cd0:	0000056a 	andeq	r0, r0, sl, ror #10
     cd4:	021e7604 	andseq	r7, lr, #4, 12	@ 0x400000
     cd8:	04000001 	streq	r0, [r0], #-1
     cdc:	0003be02 	andeq	fp, r3, r2, lsl #28
     ce0:	1e770400 	cdpne	4, 7, cr0, cr7, cr0, {0}
     ce4:	00000102 	andeq	r0, r0, r2, lsl #2
     ce8:	c1070008 	tstgt	r7, r8
     cec:	04000004 	streq	r0, [r0], #-4
     cf0:	01182079 	tsteq	r8, r9, ror r0
     cf4:	4d0a0000 	stcmi	0, cr0, [sl, #-0]
     cf8:	0b000001 	bleq	d04 <_start-0xf2fc>
     cfc:	00000479 	andeq	r0, r0, r9, ror r4
     d00:	107e0414 	rsbsne	r0, lr, r4, lsl r4
     d04:	00000193 	muleq	r0, r3, r1
     d08:	0005d702 	andeq	sp, r5, r2, lsl #14
     d0c:	22800400 	addcs	r0, r0, #0, 8
     d10:	0000007d 	andeq	r0, r0, sp, ror r0
     d14:	069d0200 	ldreq	r0, [sp], r0, lsl #4
     d18:	81040000 	mrshi	r0, (UNDEF: 4)
     d1c:	00019317 	andeq	r9, r1, r7, lsl r3
     d20:	0d020400 	cfstrseq	mvf0, [r2, #-0]
     d24:	04000006 	streq	r0, [r0], #-6
     d28:	01591982 	cmpeq	r9, r2, lsl #19
     d2c:	00080000 	andeq	r0, r8, r0
     d30:	00011306 	andeq	r1, r1, r6, lsl #6
     d34:	077a0700 	ldrbeq	r0, [sl, -r0, lsl #14]!
     d38:	83040000 	movwhi	r0, #16384	@ 0x4000
     d3c:	00015e03 	andeq	r5, r1, r3, lsl #28
     d40:	01980800 	orrseq	r0, r8, r0, lsl #16
     d44:	5a0b0000 	bpl	2c0d4c <__bss_end+0x29b14c>
     d48:	08000008 	stmdaeq	r0, {r3}
     d4c:	d1106805 	tstle	r0, r5, lsl #16
     d50:	02000001 	andeq	r0, r0, #1
     d54:	000008b0 			@ <UNDEFINED> instruction: 0x000008b0
     d58:	6a106a05 	bvs	41b574 <__bss_end+0x3f5974>
     d5c:	00000000 	andeq	r0, r0, r0
     d60:	0008e902 	andeq	lr, r8, r2, lsl #18
     d64:	106b0500 	rsbne	r0, fp, r0, lsl #10
     d68:	000000a2 	andeq	r0, r0, r2, lsr #1
     d6c:	52070004 	andpl	r0, r7, #4
     d70:	05000009 	streq	r0, [r0, #-9]
     d74:	01a9036c 			@ <UNDEFINED> instruction: 0x01a9036c
     d78:	120b0000 	andne	r0, fp, #0
     d7c:	4c00000a 	stcmi	0, cr0, [r0], {10}
     d80:	7a107901 	bvc	41f18c <__bss_end+0x3f958c>
     d84:	02000002 	andeq	r0, r0, #2
     d88:	000008e2 	andeq	r0, r0, r2, ror #17
     d8c:	7a0f7b01 	bvc	3df998 <__bss_end+0x3b9d98>
     d90:	00000002 	andeq	r0, r0, r2
     d94:	000ad302 	andeq	sp, sl, r2, lsl #6
     d98:	0f7c0100 	svceq	0x007c0100
     d9c:	0000027a 	andeq	r0, r0, sl, ror r2
     da0:	0b370204 	bleq	dc15b8 <__bss_end+0xd9b9b8>
     da4:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
     da8:	00027a0f 	andeq	r7, r2, pc, lsl #20
     dac:	a5020800 	strge	r0, [r2, #-2048]	@ 0xfffff800
     db0:	01000008 	tsteq	r0, r8
     db4:	027a0f7f 	rsbseq	r0, sl, #508	@ 0x1fc
     db8:	020c0000 	andeq	r0, ip, #0
     dbc:	00000b09 	andeq	r0, r0, r9, lsl #22
     dc0:	98088101 	stmdals	r8, {r0, r8, pc}
     dc4:	10000001 	andne	r0, r0, r1
     dc8:	0009ba02 	andeq	fp, r9, r2, lsl #20
     dcc:	08820100 	stmeq	r2, {r8}
     dd0:	00000198 	muleq	r0, r8, r1
     dd4:	0a750224 	beq	1d4166c <__bss_end+0x1d1ba6c>
     dd8:	84010000 	strhi	r0, [r1], #-0
     ddc:	00007d22 	andeq	r7, r0, r2, lsr #26
     de0:	a3023800 	movwge	r3, #10240	@ 0x2800
     de4:	01000009 	tsteq	r0, r9
     de8:	00761985 	rsbseq	r1, r6, r5, lsl #19
     dec:	023c0000 	eorseq	r0, ip, #0
     df0:	00000b41 	andeq	r0, r0, r1, asr #22
     df4:	76198601 	ldrvc	r8, [r9], -r1, lsl #12
     df8:	40000000 	andmi	r0, r0, r0
     dfc:	000acb02 	andeq	ip, sl, r2, lsl #22
     e00:	20880100 	addcs	r0, r8, r0, lsl #2
     e04:	00000071 	andeq	r0, r0, r1, ror r0
     e08:	0a310244 	beq	c41720 <__bss_end+0xc1bb20>
     e0c:	89010000 	stmdbhi	r1, {}	@ <UNPREDICTABLE>
     e10:	00007120 	andeq	r7, r0, r0, lsr #2
     e14:	06004800 	streq	r4, [r0], -r0, lsl #16
     e18:	0000004e 	andeq	r0, r0, lr, asr #32
     e1c:	0009fd07 	andeq	pc, r9, r7, lsl #26
     e20:	03900100 	orrseq	r0, r0, #0, 2
     e24:	000001dd 	ldrdeq	r0, [r0], -sp
     e28:	00096807 	andeq	r6, r9, r7, lsl #16
     e2c:	12980100 	addsne	r0, r8, #0, 2
     e30:	0000029c 	muleq	r0, ip, r2
     e34:	00028b08 	andeq	r8, r2, r8, lsl #22
     e38:	027f0600 	rsbseq	r0, pc, #0, 12
     e3c:	9c080000 	stcls	0, cr0, [r8], {-0}
     e40:	10000002 	andne	r0, r0, r2
     e44:	00000a4d 	andeq	r0, r0, sp, asr #20
     e48:	9e1704ea 	cdpls	4, 1, cr0, cr7, cr10, {7}
     e4c:	06000008 	streq	r0, [r0], -r8
     e50:	0089091f 	addeq	r0, r9, pc, lsl r9
     e54:	02cd0000 	sbceq	r0, sp, #0
     e58:	89040000 	stmdbhi	r4, {}	@ <UNPREDICTABLE>
     e5c:	04000000 	streq	r0, [r0], #-0
     e60:	00000097 	muleq	r0, r7, r0
     e64:	00002604 	andeq	r2, r0, r4, lsl #12
     e68:	22180000 	andscs	r0, r8, #0
     e6c:	0500000a 	streq	r0, [r0, #-10]
     e70:	6a1603be 	bvs	581d70 <__bss_end+0x55c170>
     e74:	0c000000 	stceq	0, cr0, [r0], {-0}
     e78:	000008cc 	andeq	r0, r0, ip, asr #17
     e7c:	f104aa05 			@ <UNDEFINED> instruction: 0xf104aa05
     e80:	04000002 	streq	r0, [r0], #-2
     e84:	000002f6 	strdeq	r0, [r0], -r6
     e88:	0000a204 	andeq	sl, r0, r4, lsl #4
     e8c:	a4060000 	strge	r0, [r6], #-0
     e90:	08000001 	stmdaeq	r0, {r0}
     e94:	000002f1 	strdeq	r0, [r0], -r1
     e98:	000ada0d 	andeq	sp, sl, sp, lsl #20
     e9c:	04e40500 	strbteq	r0, [r4], #1280	@ 0x500
     ea0:	00006a0f 	andeq	r6, r0, pc, lsl #20
     ea4:	00031700 	andeq	r1, r3, r0, lsl #14
     ea8:	031c0400 	tsteq	ip, #0, 8
     eac:	26040000 	strcs	r0, [r4], -r0
     eb0:	00000003 	andeq	r0, r0, r3
     eb4:	0001d106 	andeq	sp, r1, r6, lsl #2
     eb8:	03170800 	tsteq	r7, #0, 16
     ebc:	a2060000 	andge	r0, r6, #0
     ec0:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
     ec4:	00000321 	andeq	r0, r0, r1, lsr #6
     ec8:	000af910 	andeq	pc, sl, r0, lsl r9	@ <UNPREDICTABLE>
     ecc:	0c038a00 			@ <UNDEFINED> instruction: 0x0c038a00
     ed0:	00000b4c 	andeq	r0, r0, ip, asr #22
     ed4:	4404de05 	strmi	sp, [r4], #-3589	@ 0xfffff1fb
     ed8:	04000003 	streq	r0, [r0], #-3
     edc:	0000031c 	andeq	r0, r0, ip, lsl r3
     ee0:	09750c00 	ldmdbeq	r5!, {sl, fp}^
     ee4:	71070000 	mrsvc	r0, (UNDEF: 7)
     ee8:	00035601 	andeq	r5, r3, r1, lsl #12
     eec:	00890400 	addeq	r0, r9, r0, lsl #8
     ef0:	0d000000 	stceq	0, cr0, [r0, #-0]
     ef4:	000006b5 			@ <UNDEFINED> instruction: 0x000006b5
     ef8:	07017007 	streq	r7, [r1, -r7]
     efc:	00000089 	andeq	r0, r0, r9, lsl #1
     f00:	0000036d 	andeq	r0, r0, sp, ror #6
     f04:	00002604 	andeq	r2, r0, r4, lsl #12
     f08:	b6110000 	ldrlt	r0, [r1], -r0
     f0c:	fd000002 	stc2	0, cr0, [r0, #-8]
     f10:	00037d0c 	andeq	r7, r3, ip, lsl #26
     f14:	01110400 	tsteq	r1, r0, lsl #8
     f18:	00000385 	andeq	r0, r0, r5, lsl #7
     f1c:	00038504 	andeq	r8, r3, r4, lsl #10
     f20:	98060000 	stmdals	r6, {}	@ <UNPREDICTABLE>
     f24:	0d000001 	stceq	0, cr0, [r0, #-4]
     f28:	00000aa3 	andeq	r0, r0, r3, lsr #21
     f2c:	1604ca05 	strne	ip, [r4], -r5, lsl #20
     f30:	0000006a 	andeq	r0, r0, sl, rrx
     f34:	000003a1 	andeq	r0, r0, r1, lsr #7
     f38:	0002f604 	andeq	pc, r2, r4, lsl #12
     f3c:	3c110000 	ldccc	0, cr0, [r1], {-0}
     f40:	fc000002 	stc2	0, cr0, [r0], {2}
     f44:	0007b30e 	andeq	fp, r7, lr, lsl #6
     f48:	16056900 	strne	r6, [r5], -r0, lsl #18
     f4c:	0000006a 	andeq	r0, r0, sl, rrx
     f50:	00021b5c 	andeq	r1, r2, ip, asr fp
     f54:	00000048 	andeq	r0, r0, r8, asr #32
     f58:	03e09c01 	mvneq	r9, #256	@ 0x100
     f5c:	2f010000 	svccs	0x00010000
     f60:	6900000b 	stmdbvs	r0, {r0, r1, r3}
     f64:	02974305 	addseq	r4, r7, #335544320	@ 0x14000000
     f68:	91020000 	mrsls	r0, (UNDEF: 2)
     f6c:	0960036c 	stmdbeq	r0!, {r2, r3, r5, r6, r8, r9}^
     f70:	056b0000 	strbeq	r0, [fp, #-0]!
     f74:	00006a16 	andeq	r6, r0, r6, lsl sl
     f78:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     f7c:	09941200 	ldmibeq	r4, {r9, ip}
     f80:	055d0000 	ldrbeq	r0, [sp, #-0]
     f84:	0000006a 	andeq	r0, r0, sl, rrx
     f88:	00021b10 	andeq	r1, r2, r0, lsl fp
     f8c:	0000004c 	andeq	r0, r0, ip, asr #32
     f90:	04189c01 	ldreq	r9, [r8], #-3073	@ 0xfffff3ff
     f94:	2f010000 	svccs	0x00010000
     f98:	5d00000b 	stcpl	0, cr0, [r0, #-44]	@ 0xffffffd4
     f9c:	02974005 	addseq	r4, r7, #5
     fa0:	91020000 	mrsls	r0, (UNDEF: 2)
     fa4:	0960036c 	stmdbeq	r0!, {r2, r3, r5, r6, r8, r9}^
     fa8:	055f0000 	ldrbeq	r0, [pc, #-0]	@ fb0 <_start-0xf050>
     fac:	00006a16 	andeq	r6, r0, r6, lsl sl
     fb0:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
     fb4:	07fd0e00 	ldrbeq	r0, [sp, r0, lsl #28]!
     fb8:	05520000 	ldrbeq	r0, [r2, #-0]
     fbc:	00006a16 	andeq	r6, r0, r6, lsl sl
     fc0:	021ad000 	andseq	sp, sl, #0
     fc4:	00004000 	andeq	r4, r0, r0
     fc8:	519c0100 	orrspl	r0, ip, r0, lsl #2
     fcc:	01000004 	tsteq	r0, r4
     fd0:	00000b2f 	andeq	r0, r0, pc, lsr #22
     fd4:	97440552 	smlsldls	r0, r4, r2, r5
     fd8:	02000002 	andeq	r0, r0, #2
     fdc:	60036c91 	mulvs	r3, r1, ip
     fe0:	54000009 	strpl	r0, [r0], #-9
     fe4:	006a1605 	rsbeq	r1, sl, r5, lsl #12
     fe8:	91020000 	mrsls	r0, (UNDEF: 2)
     fec:	17120074 			@ <UNDEFINED> instruction: 0x17120074
     ff0:	46000008 	strmi	r0, [r0], -r8
     ff4:	00006a05 	andeq	r6, r0, r5, lsl #20
     ff8:	021a8c00 	andseq	r8, sl, #0, 24
     ffc:	00004400 	andeq	r4, r0, r0, lsl #8
    1000:	899c0100 	ldmibhi	ip, {r8}
    1004:	01000004 	tsteq	r0, r4
    1008:	00000b2f 	andeq	r0, r0, pc, lsr #22
    100c:	97410546 	strbls	r0, [r1, -r6, asr #10]
    1010:	02000002 	andeq	r0, r0, #2
    1014:	60036c91 	mulvs	r3, r1, ip
    1018:	48000009 	stmdami	r0, {r0, r3}
    101c:	006a1605 	rsbeq	r1, sl, r5, lsl #12
    1020:	91020000 	mrsls	r0, (UNDEF: 2)
    1024:	bc0f0074 	stclt	0, cr0, [pc], {116}	@ 0x74
    1028:	0600000a 	streq	r0, [r0], -sl
    102c:	02198805 	andseq	r8, r9, #327680	@ 0x50000
    1030:	00010400 	andeq	r0, r1, r0, lsl #8
    1034:	ae9c0100 	fmlgee	f0, f4, f0
    1038:	01000004 	tsteq	r0, r4
    103c:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1040:	8b2a0506 	blhi	a82460 <__bss_end+0xa5c860>
    1044:	02000002 	andeq	r0, r0, #2
    1048:	0f007491 	svceq	0x00007491
    104c:	00000827 	andeq	r0, r0, r7, lsr #16
    1050:	18f804f8 	ldmne	r8!, {r3, r4, r5, r6, r7, sl}^
    1054:	00900002 	addseq	r0, r0, r2
    1058:	9c010000 	stcls	0, cr0, [r1], {-0}
    105c:	000004e2 	andeq	r0, r0, r2, ror #9
    1060:	000b2f01 	andeq	r2, fp, r1, lsl #30
    1064:	3204f800 	andcc	pc, r4, #0, 16
    1068:	000002a1 	andeq	r0, r0, r1, lsr #5
    106c:	01749102 	cmneq	r4, r2, lsl #2
    1070:	00000a87 	andeq	r0, r0, r7, lsl #21
    1074:	974704f8 			@ <UNDEFINED> instruction: 0x974704f8
    1078:	02000000 	andeq	r0, r0, #0
    107c:	0f007091 	svceq	0x00007091
    1080:	00000847 	andeq	r0, r0, r7, asr #16
    1084:	17cc04d2 			@ <UNDEFINED> instruction: 0x17cc04d2
    1088:	012c0002 			@ <UNDEFINED> instruction: 0x012c0002
    108c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1090:	00000525 	andeq	r0, r0, r5, lsr #10
    1094:	000b2f01 	andeq	r2, fp, r1, lsl #30
    1098:	2904d200 	stmdbcs	r4, {r9, ip, lr, pc}
    109c:	0000029c 	muleq	r0, ip, r2
    10a0:	01749102 	cmneq	r4, r2, lsl #2
    10a4:	000009ef 	andeq	r0, r0, pc, ror #19
    10a8:	973e04d2 			@ <UNDEFINED> instruction: 0x973e04d2
    10ac:	02000000 	andeq	r0, r0, #0
    10b0:	ef017091 	svc	0x00017091
    10b4:	d200000a 	andle	r0, r0, #10
    10b8:	006a5b04 	rsbeq	r5, sl, r4, lsl #22
    10bc:	91020000 	mrsls	r0, (UNDEF: 2)
    10c0:	bf19006c 	svclt	0x0019006c
    10c4:	01000008 	tsteq	r0, r8
    10c8:	980604a9 	stmdals	r6, {r0, r3, r5, r7, sl}
    10cc:	34000217 	strcc	r0, [r0], #-535	@ 0xfffffde9
    10d0:	01000000 	mrseq	r0, (UNDEF: 0)
    10d4:	00054c9c 	muleq	r5, ip, ip
    10d8:	0b2f0100 	bleq	bc14e0 <__bss_end+0xb9b8e0>
    10dc:	04a90000 	strteq	r0, [r9], #0
    10e0:	00028b21 	andeq	r8, r2, r1, lsr #22
    10e4:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    10e8:	09d10e00 	ldmibeq	r1, {r9, sl, fp}^
    10ec:	049d0000 	ldreq	r0, [sp], #0
    10f0:	00007618 	andeq	r7, r0, r8, lsl r6
    10f4:	02176800 	andseq	r6, r7, #0, 16
    10f8:	00003000 	andeq	r3, r0, r0
    10fc:	859c0100 	ldrhi	r0, [ip, #256]	@ 0x100
    1100:	01000005 	tsteq	r0, r5
    1104:	00000b2f 	andeq	r0, r0, pc, lsr #22
    1108:	974a049d 			@ <UNDEFINED> instruction: 0x974a049d
    110c:	02000002 	andeq	r0, r0, #2
    1110:	5f036c91 	svcpl	0x00036c91
    1114:	9f000009 	svcls	0x00000009
    1118:	00761804 	rsbseq	r1, r6, r4, lsl #16
    111c:	91020000 	mrsls	r0, (UNDEF: 2)
    1120:	cc090074 	stcgt	0, cr0, [r9], {116}	@ 0x74
    1124:	8f000007 	svchi	0x00000007
    1128:	00761804 	rsbseq	r1, r6, r4, lsl #16
    112c:	17340000 	ldrne	r0, [r4, -r0]!
    1130:	00340002 	eorseq	r0, r4, r2
    1134:	9c010000 	stcls	0, cr0, [r1], {-0}
    1138:	000005be 			@ <UNDEFINED> instruction: 0x000005be
    113c:	000b2f01 	andeq	r2, fp, r1, lsl #30
    1140:	43048f00 	movwmi	r8, #20224	@ 0x4f00
    1144:	00000297 	muleq	r0, r7, r2
    1148:	036c9102 	cmneq	ip, #-2147483648	@ 0x80000000
    114c:	0000095f 	andeq	r0, r0, pc, asr r9
    1150:	76180491 			@ <UNDEFINED> instruction: 0x76180491
    1154:	02000000 	andeq	r0, r0, #0
    1158:	09007491 	stmdbeq	r0, {r0, r4, r7, sl, ip, sp, lr}
    115c:	0000097f 	andeq	r0, r0, pc, ror r9
    1160:	6a160456 	bvs	5822c0 <__bss_end+0x55c6c0>
    1164:	54000000 	strpl	r0, [r0], #-0
    1168:	e0000216 	and	r0, r0, r6, lsl r2
    116c:	01000000 	mrseq	r0, (UNDEF: 0)
    1170:	0006249c 	muleq	r6, ip, r4
    1174:	0b2f0100 	bleq	bc157c <__bss_end+0xb9b97c>
    1178:	04560000 	ldrbeq	r0, [r6], #-0
    117c:	00028b39 	andeq	r8, r2, r9, lsr fp
    1180:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1184:	000a8701 	andeq	r8, sl, r1, lsl #14
    1188:	4f045600 	svcmi	0x00045600
    118c:	0000008b 	andeq	r0, r0, fp, lsl #1
    1190:	01689102 	cmneq	r8, r2, lsl #2
    1194:	000007e3 	andeq	r0, r0, r3, ror #15
    1198:	246f0456 	strbtcs	r0, [pc], #-1110	@ 11a0 <_start-0xee60>
    119c:	02000006 	andeq	r0, r0, #6
    11a0:	60036491 	mulvs	r3, r1, r4
    11a4:	58000009 	stmdapl	r0, {r0, r3}
    11a8:	006a1604 	rsbeq	r1, sl, r4, lsl #12
    11ac:	91020000 	mrsls	r0, (UNDEF: 2)
    11b0:	0a5e0374 	beq	1781f88 <__bss_end+0x175c388>
    11b4:	04590000 	ldrbeq	r0, [r9], #-0
    11b8:	00007618 	andeq	r7, r0, r8, lsl r6
    11bc:	70910200 	addsvc	r0, r1, r0, lsl #4
    11c0:	006a0600 	rsbeq	r0, sl, r0, lsl #12
    11c4:	64090000 	strvs	r0, [r9], #-0
    11c8:	c1000008 	tstgt	r0, r8
    11cc:	006a1603 	rsbeq	r1, sl, r3, lsl #12
    11d0:	14500000 	ldrbne	r0, [r0], #-0
    11d4:	02040002 	andeq	r0, r4, #2
    11d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    11dc:	000006ad 	andeq	r0, r0, sp, lsr #13
    11e0:	000b2f01 	andeq	r2, fp, r1, lsl #30
    11e4:	3903c100 	stmdbcc	r3, {r8, lr, pc}
    11e8:	0000028b 	andeq	r0, r0, fp, lsl #5
    11ec:	01649102 	cmneq	r4, r2, lsl #2
    11f0:	00000a87 	andeq	r0, r0, r7, lsl #21
    11f4:	8b4f03c1 	blhi	13c2100 <__bss_end+0x139c500>
    11f8:	02000000 	andeq	r0, r0, #0
    11fc:	78016091 	stmdavc	r1, {r0, r4, r7, sp, lr}
    1200:	c1000010 	tstgt	r0, r0, lsl r0
    1204:	00a26603 	adceq	r6, r2, r3, lsl #12
    1208:	91020000 	mrsls	r0, (UNDEF: 2)
    120c:	08f9015c 	ldmeq	r9!, {r2, r3, r4, r6, r8}^
    1210:	03c10000 	biceq	r0, r1, #0
    1214:	00006a82 	andeq	r6, r0, r2, lsl #21
    1218:	58910200 	ldmpl	r1, {r9}
    121c:	000a0403 	andeq	r0, sl, r3, lsl #8
    1220:	1603c300 	strne	ip, [r3], -r0, lsl #6
    1224:	0000006a 	andeq	r0, r0, sl, rrx
    1228:	03749102 	cmneq	r4, #-2147483648	@ 0x80000000
    122c:	00000c40 	andeq	r0, r0, r0, asr #24
    1230:	d10e03c4 	smlabtle	lr, r4, r3, r0
    1234:	02000001 	andeq	r0, r0, #1
    1238:	87036891 			@ <UNDEFINED> instruction: 0x87036891
    123c:	c5000008 	strgt	r0, [r0, #-8]
    1240:	027a0e03 	rsbseq	r0, sl, #3, 28	@ 0x30
    1244:	91020000 	mrsls	r0, (UNDEF: 2)
    1248:	8e090070 	mcrhi	0, 0, r0, cr9, cr0, {3}
    124c:	86000007 	strhi	r0, [r0], -r7
    1250:	006a1603 	rsbeq	r1, sl, r3, lsl #12
    1254:	13740000 	cmnne	r4, #0
    1258:	00dc0002 	sbcseq	r0, ip, r2
    125c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1260:	00000722 	andeq	r0, r0, r2, lsr #14
    1264:	000b2f01 	andeq	r2, fp, r1, lsl #30
    1268:	3d038600 	stccc	6, cr8, [r3, #-0]
    126c:	0000028b 	andeq	r0, r0, fp, lsl #5
    1270:	016c9102 	cmneq	ip, r2, lsl #2
    1274:	000009ef 	andeq	r0, r0, pc, ror #19
    1278:	9c590386 	mrrcls	3, 8, r0, r9, cr6
    127c:	02000000 	andeq	r0, r0, #0
    1280:	e3016891 	movw	r6, #6289	@ 0x1891
    1284:	86000007 	strhi	r0, [r0], -r7
    1288:	06247e03 	strteq	r7, [r4], -r3, lsl #28
    128c:	91020000 	mrsls	r0, (UNDEF: 2)
    1290:	08790164 	ldmdaeq	r9!, {r2, r5, r6, r8}^
    1294:	03860000 	orreq	r0, r6, #0
    1298:	00006aa7 	andeq	r6, r0, r7, lsr #21
    129c:	60910200 	addsvs	r0, r1, r0, lsl #4
    12a0:	00096003 	andeq	r6, r9, r3
    12a4:	16038800 	strne	r8, [r3], -r0, lsl #16
    12a8:	0000006a 	andeq	r0, r0, sl, rrx
    12ac:	03749102 	cmneq	r4, #-2147483648	@ 0x80000000
    12b0:	00000a5e 	andeq	r0, r0, lr, asr sl
    12b4:	76180389 	ldrvc	r0, [r8], -r9, lsl #7
    12b8:	02000000 	andeq	r0, r0, #0
    12bc:	09007091 	stmdbeq	r0, {r0, r4, r7, ip, sp, lr}
    12c0:	00000940 	andeq	r0, r0, r0, asr #18
    12c4:	6a160241 	bvs	581bd0 <__bss_end+0x55bfd0>
    12c8:	d0000000 	andle	r0, r0, r0
    12cc:	a4000211 	strge	r0, [r0], #-529	@ 0xfffffdef
    12d0:	01000001 	tsteq	r0, r1
    12d4:	0007979c 	muleq	r7, ip, r7
    12d8:	0b2f0100 	bleq	bc16e0 <__bss_end+0xb9bae0>
    12dc:	02410000 	subeq	r0, r1, #0
    12e0:	00028b36 	andeq	r8, r2, r6, lsr fp
    12e4:	64910200 	ldrvs	r0, [r1], #512	@ 0x200
    12e8:	0009ef01 	andeq	lr, r9, r1, lsl #30
    12ec:	52024100 	andpl	r4, r2, #0, 2
    12f0:	0000009c 	muleq	r0, ip, r0
    12f4:	01609102 	cmneq	r0, r2, lsl #2
    12f8:	00001078 	andeq	r1, r0, r8, ror r0
    12fc:	a26e0241 	rsbge	r0, lr, #268435460	@ 0x10000004
    1300:	02000000 	andeq	r0, r0, #0
    1304:	79015c91 	stmdbvc	r1, {r0, r4, r7, sl, fp, ip, lr}
    1308:	41000008 	tstmi	r0, r8
    130c:	006a8a02 	rsbeq	r8, sl, r2, lsl #20
    1310:	91020000 	mrsls	r0, (UNDEF: 2)
    1314:	0a040358 	beq	10207c <__bss_end+0xdc47c>
    1318:	02430000 	subeq	r0, r3, #0
    131c:	00006a16 	andeq	r6, r0, r6, lsl sl
    1320:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    1324:	000c4003 	andeq	r4, ip, r3
    1328:	0e024400 	cfcpyseq	mvf4, mvf2
    132c:	000001d1 	ldrdeq	r0, [r0], -r1
    1330:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1334:	000a3909 	andeq	r3, sl, r9, lsl #18
    1338:	0e014200 	cdpeq	2, 0, cr4, cr1, cr0, {0}
    133c:	0000028b 	andeq	r0, r0, fp, lsl #5
    1340:	00021108 	andeq	r1, r2, r8, lsl #2
    1344:	000000c8 	andeq	r0, r0, r8, asr #1
    1348:	080c9c01 	stmdaeq	ip, {r0, sl, fp, ip, pc}
    134c:	ac010000 	stcge	0, cr0, [r1], {-0}
    1350:	42000009 	andmi	r0, r0, #9
    1354:	00763a01 	rsbseq	r3, r6, r1, lsl #20
    1358:	91020000 	mrsls	r0, (UNDEF: 2)
    135c:	0b410164 	bleq	10418f4 <__bss_end+0x101bcf4>
    1360:	01420000 	mrseq	r0, (UNDEF: 66)
    1364:	00007660 	andeq	r7, r0, r0, ror #12
    1368:	60910200 	addsvs	r0, r1, r0, lsl #4
    136c:	0007a701 	andeq	sl, r7, r1, lsl #14
    1370:	7a014200 	bvc	51b78 <__bss_end+0x2bf78>
    1374:	00000055 	andeq	r0, r0, r5, asr r0
    1378:	035f9102 	cmpeq	pc, #-2147483648	@ 0x80000000
    137c:	0000083c 	andeq	r0, r0, ip, lsr r8
    1380:	9c090144 	stflss	f0, [r9], {68}	@ 0x44
    1384:	02000002 	andeq	r0, r0, #2
    1388:	1d037091 	stcne	0, cr7, [r3, #-580]	@ 0xfffffdbc
    138c:	4500000b 	strmi	r0, [r0, #-11]
    1390:	00260801 	eoreq	r0, r6, r1, lsl #16
    1394:	91020000 	mrsls	r0, (UNDEF: 2)
    1398:	0960036c 	stmdbeq	r0!, {r2, r3, r5, r6, r8, r9}^
    139c:	01460000 	mrseq	r0, (UNDEF: 70)
    13a0:	00028b0e 	andeq	r8, r2, lr, lsl #22
    13a4:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    13a8:	0a901a00 	beq	fe407bb0 <_estack+0xf63e7bb0>
    13ac:	17010000 	strne	r0, [r1, -r0]
    13b0:	006a0f01 	rsbeq	r0, sl, r1, lsl #30
    13b4:	0ff40000 	svceq	0x00f40000
    13b8:	01140002 	tsteq	r4, r2
    13bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    13c0:	000b2f01 	andeq	r2, fp, r1, lsl #30
    13c4:	30011700 	andcc	r1, r1, r0, lsl #14
    13c8:	0000028b 	andeq	r0, r0, fp, lsl #5
    13cc:	01749102 	cmneq	r4, r2, lsl #2
    13d0:	0000083d 	andeq	r0, r0, sp, lsr r8
    13d4:	6a470117 	bvs	11c1838 <__bss_end+0x119bc38>
    13d8:	02000000 	andeq	r0, r0, #0
    13dc:	00007091 	muleq	r0, r1, r0
    13e0:	00000e59 	andeq	r0, r0, r9, asr lr
    13e4:	04010005 	streq	r0, [r1], #-5
    13e8:	000006f5 	strdeq	r0, [r0], -r5
    13ec:	0000e619 	andeq	lr, r0, r9, lsl r6
    13f0:	0b9f1d00 	bleq	fe7c87f8 <_estack+0xf67a87f8>
    13f4:	01b60000 			@ <UNDEFINED> instruction: 0x01b60000
    13f8:	1ba40000 	blne	fe901400 <_estack+0xf68e1400>
    13fc:	19240002 	stmdbne	r4!, {r1}
    1400:	0d100000 	ldceq	0, cr0, [r0, #-0]
    1404:	01080000 	mrseq	r0, (UNDEF: 8)
    1408:	0006f706 	andeq	pc, r6, r6, lsl #14
    140c:	00260700 	eoreq	r0, r6, r0, lsl #14
    1410:	01080000 	mrseq	r0, (UNDEF: 8)
    1414:	0006f508 	andeq	pc, r6, r8, lsl #10
    1418:	05020800 	streq	r0, [r2, #-2048]	@ 0xfffff800
    141c:	0000076f 	andeq	r0, r0, pc, ror #14
    1420:	d3070208 	movwle	r0, #29192	@ 0x7208
    1424:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    1428:	01700504 	cmneq	r0, r4, lsl #10
    142c:	470c0000 	strmi	r0, [ip, -r0]
    1430:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    1434:	06e30704 	strbteq	r0, [r3], r4, lsl #14
    1438:	530c0000 	movwpl	r0, #49152	@ 0xc000
    143c:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    1440:	016b0508 	cmneq	fp, r8, lsl #10
    1444:	08080000 	stmdaeq	r8, {}	@ <UNPREDICTABLE>
    1448:	0006de07 	andeq	sp, r6, r7, lsl #28
    144c:	05041a00 	streq	r1, [r4, #-2560]	@ 0xfffff600
    1450:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1454:	e8070408 	stmda	r7, {r3, sl}
    1458:	09000006 	stmdbeq	r0, {r1, r2}
    145c:	000003b7 			@ <UNDEFINED> instruction: 0x000003b7
    1460:	7417d602 	ldrvc	sp, [r7], #-1538	@ 0xfffff9fe
    1464:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    1468:	01f70408 	mvnseq	r0, r8, lsl #8
    146c:	041b0000 	ldreq	r0, [fp], #-0
    1470:	00009506 	andeq	r9, r0, r6, lsl #10
    1474:	08010800 	stmdaeq	r1, {fp}
    1478:	000006fe 	strdeq	r0, [r0], -lr
    147c:	00009507 	andeq	r9, r0, r7, lsl #10
    1480:	009c0600 	addseq	r0, ip, r0, lsl #12
    1484:	2c090000 	stccs	0, cr0, [r9], {-0}
    1488:	03000001 	movweq	r0, #1
    148c:	00b21047 	adcseq	r1, r2, r7, asr #32
    1490:	b7060000 	strlt	r0, [r6, -r0]
    1494:	1c000000 	stcne	0, cr0, [r0], {-0}
    1498:	000000c2 	andeq	r0, r0, r2, asr #1
    149c:	00008e04 	andeq	r8, r0, r4, lsl #28
    14a0:	15090000 	strne	r0, [r9, #-0]
    14a4:	04000000 	streq	r0, [r0], #-0
    14a8:	00531c61 	subseq	r1, r3, r1, ror #24
    14ac:	c20c0000 	andgt	r0, ip, #0
    14b0:	09000000 	stmdbeq	r0, {}	@ <UNPREDICTABLE>
    14b4:	00000d79 	andeq	r0, r0, r9, ror sp
    14b8:	df195705 	svcle	0x00195705
    14bc:	06000000 	streq	r0, [r0], -r0
    14c0:	000000e4 	andeq	r0, r0, r4, ror #1
    14c4:	0000471d 	andeq	r4, r0, sp, lsl r7
    14c8:	0000f300 	andeq	pc, r0, r0, lsl #6
    14cc:	008e0400 	addeq	r0, lr, r0, lsl #8
    14d0:	0d000000 	stceq	0, cr0, [r0, #-0]
    14d4:	000004a3 	andeq	r0, r0, r3, lsr #9
    14d8:	08690614 	stmdaeq	r9!, {r2, r4, r9, sl}^
    14dc:	00000142 	andeq	r0, r0, r2, asr #2
    14e0:	00047f03 	andeq	r7, r4, r3, lsl #30
    14e4:	0f6b0600 	svceq	0x006b0600
    14e8:	000000c2 	andeq	r0, r0, r2, asr #1
    14ec:	056a0300 	strbeq	r0, [sl, #-768]!	@ 0xfffffd00
    14f0:	6c060000 	stcvs	0, cr0, [r6], {-0}
    14f4:	0001471f 	andeq	r4, r1, pc, lsl r7
    14f8:	be030400 	cfcpyslt	mvf0, mvf3
    14fc:	06000003 	streq	r0, [r0], -r3
    1500:	01471f6d 	cmpeq	r7, sp, ror #30
    1504:	03080000 	movweq	r0, #32768	@ 0x8000
    1508:	00000430 	andeq	r0, r0, r0, lsr r4
    150c:	8e096e06 	cdphi	14, 0, cr6, cr9, cr6, {0}
    1510:	0c000000 	stceq	0, cr0, [r0], {-0}
    1514:	00051703 	andeq	r1, r5, r3, lsl #14
    1518:	096f0600 	stmdbeq	pc!, {r9, sl}^	@ <UNPREDICTABLE>
    151c:	0000008e 	andeq	r0, r0, lr, lsl #1
    1520:	f30c0010 	vqadd.u8	d0, d12, d0
    1524:	06000000 	streq	r0, [r0], -r0
    1528:	00000142 	andeq	r0, r0, r2, asr #2
    152c:	0005e709 	andeq	lr, r5, r9, lsl #14
    1530:	1b710600 	blne	1c42d38 <__bss_end+0x1c1d138>
    1534:	000000f3 	strdeq	r0, [r0], -r3
    1538:	00014c0c 	andeq	r4, r1, ip, lsl #24
    153c:	06a50d00 	strteq	r0, [r5], r0, lsl #26
    1540:	060c0000 	streq	r0, [ip], -r0
    1544:	01920873 	orrseq	r0, r2, r3, ror r8
    1548:	7f030000 	svcvc	0x00030000
    154c:	06000004 	streq	r0, [r0], -r4
    1550:	00c20f75 	sbceq	r0, r2, r5, ror pc
    1554:	03000000 	movweq	r0, #0
    1558:	0000056a 	andeq	r0, r0, sl, ror #10
    155c:	471e7606 	ldrmi	r7, [lr, -r6, lsl #12]
    1560:	04000001 	streq	r0, [r0], #-1
    1564:	0003be03 	andeq	fp, r3, r3, lsl #28
    1568:	1e770600 	cdpne	6, 7, cr0, cr7, cr0, {0}
    156c:	00000147 	andeq	r0, r0, r7, asr #2
    1570:	c1090008 	tstgt	r9, r8
    1574:	06000004 	streq	r0, [r0], -r4
    1578:	015d2079 	cmpeq	sp, r9, ror r0
    157c:	920c0000 	andls	r0, ip, #0
    1580:	0d000001 	stceq	0, cr0, [r0, #-4]
    1584:	00000479 	andeq	r0, r0, r9, ror r4
    1588:	107e0614 	rsbsne	r0, lr, r4, lsl r6
    158c:	000001d8 	ldrdeq	r0, [r0], -r8
    1590:	0005d703 	andeq	sp, r5, r3, lsl #14
    1594:	22800600 	addcs	r0, r0, #0, 12
    1598:	0000005a 	andeq	r0, r0, sl, asr r0
    159c:	069d0300 	ldreq	r0, [sp], r0, lsl #6
    15a0:	81060000 	mrshi	r0, (UNDEF: 6)
    15a4:	0001d817 	andeq	sp, r1, r7, lsl r8
    15a8:	0d030400 	cfstrseq	mvf0, [r3, #-0]
    15ac:	06000006 	streq	r0, [r0], -r6
    15b0:	019e1982 	orrseq	r1, lr, r2, lsl #19
    15b4:	00080000 	andeq	r0, r8, r0
    15b8:	00015806 	andeq	r5, r1, r6, lsl #16
    15bc:	077a0900 	ldrbeq	r0, [sl, -r0, lsl #18]!
    15c0:	83060000 	movwhi	r0, #24576	@ 0x6000
    15c4:	0001a303 	andeq	sl, r1, r3, lsl #6
    15c8:	01dd0700 	bicseq	r0, sp, r0, lsl #14
    15cc:	81090000 	mrshi	r0, (UNDEF: 9)
    15d0:	0700000c 	streq	r0, [r0, -ip]
    15d4:	008e1063 	addeq	r1, lr, r3, rrx
    15d8:	5a0d0000 	bpl	3415e0 <__bss_end+0x31b9e0>
    15dc:	08000008 	stmdaeq	r0, {r3}
    15e0:	22106807 	andscs	r6, r0, #458752	@ 0x70000
    15e4:	03000002 	movweq	r0, #2
    15e8:	000008b0 			@ <UNDEFINED> instruction: 0x000008b0
    15ec:	47106a07 	ldrmi	r6, [r0, -r7, lsl #20]
    15f0:	00000000 	andeq	r0, r0, r0
    15f4:	0008e903 	andeq	lr, r8, r3, lsl #18
    15f8:	106b0700 	rsbne	r0, fp, r0, lsl #14
    15fc:	000000c2 	andeq	r0, r0, r2, asr #1
    1600:	52090004 	andpl	r0, r9, #4
    1604:	07000009 	streq	r0, [r0, -r9]
    1608:	01fa036c 	mvnseq	r0, ip, ror #6
    160c:	c60d0000 	strgt	r0, [sp], -r0
    1610:	0c00000d 	stceq	0, cr0, [r0], {13}
    1614:	63107107 	tstvs	r0, #-1073741823	@ 0xc0000001
    1618:	03000002 	movweq	r0, #2
    161c:	000010c0 	andeq	r1, r0, r0, asr #1
    1620:	8e087307 	cdphi	3, 0, cr7, cr8, cr7, {0}
    1624:	00000000 	andeq	r0, r0, r0
    1628:	000ed703 	andeq	sp, lr, r3, lsl #14
    162c:	10740700 	rsbsne	r0, r4, r0, lsl #14
    1630:	00000053 	andeq	r0, r0, r3, asr r0
    1634:	0e410304 	cdpeq	3, 4, cr0, cr1, cr4, {0}
    1638:	75070000 	strvc	r0, [r7, #-0]
    163c:	00005310 	andeq	r5, r0, r0, lsl r3
    1640:	09000800 	stmdbeq	r0, {fp}
    1644:	00000f78 	andeq	r0, r0, r8, ror pc
    1648:	2e037607 	cfmadd32cs	mvax0, mvfx7, mvfx3, mvfx7
    164c:	07000002 	streq	r0, [r0, -r2]
    1650:	00000263 	andeq	r0, r0, r3, ror #4
    1654:	00002d06 	andeq	r2, r0, r6, lsl #26
    1658:	02740700 	rsbseq	r0, r4, #0, 14
    165c:	53060000 	movwpl	r0, #24576	@ 0x6000
    1660:	0d000000 	stceq	0, cr0, [r0, #-0]
    1664:	00000caa 	andeq	r0, r0, sl, lsr #25
    1668:	10660148 	rsbne	r0, r6, r8, asr #2
    166c:	000002ec 	andeq	r0, r0, ip, ror #5
    1670:	00015e03 	andeq	r5, r1, r3, lsl #28
    1674:	1b680100 	blne	1a01a7c <__bss_end+0x19dbe7c>
    1678:	000002ec 	andeq	r0, r0, ip, ror #5
    167c:	041f0300 	ldreq	r0, [pc], #-768	@ 1684 <_start-0xe97c>
    1680:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1684:	00014c0f 	andeq	r4, r1, pc, lsl #24
    1688:	f5030400 			@ <UNDEFINED> instruction: 0xf5030400
    168c:	01000004 	tsteq	r0, r4
    1690:	014c0f6f 	cmpeq	ip, pc, ror #30
    1694:	03180000 	tsteq	r8, #0
    1698:	00000692 	muleq	r0, r2, r6
    169c:	53197001 	tstpl	r9, #1
    16a0:	2c000000 	stccs	0, cr0, [r0], {-0}
    16a4:	000e0d03 	andeq	r0, lr, r3, lsl #26
    16a8:	14710100 	ldrbtne	r0, [r1], #-256	@ 0xffffff00
    16ac:	0000027e 	andeq	r0, r0, lr, ror r2
    16b0:	10510330 	subsne	r0, r1, r0, lsr r3
    16b4:	72010000 	andvc	r0, r1, #0
    16b8:	0002f111 	andeq	pc, r2, r1, lsl r1	@ <UNPREDICTABLE>
    16bc:	12033400 	andne	r3, r3, #0, 8
    16c0:	0100000c 	tsteq	r0, ip
    16c4:	00d31486 	sbcseq	r1, r3, r6, lsl #9
    16c8:	00440000 	subeq	r0, r4, r0
    16cc:	00005a06 	andeq	r5, r0, r6, lsl #20
    16d0:	00261100 	eoreq	r1, r6, r0, lsl #2
    16d4:	03010000 	movweq	r0, #4096	@ 0x1000
    16d8:	74120000 	ldrvc	r0, [r2], #-0
    16dc:	0f000000 	svceq	0x00000000
    16e0:	0d720900 			@ <UNDEFINED> instruction: 0x0d720900
    16e4:	93010000 	movwls	r0, #4096	@ 0x1000
    16e8:	00028303 	andeq	r8, r2, r3, lsl #6
    16ec:	03010700 	movweq	r0, #5888	@ 0x1700
    16f0:	001e0000 	andseq	r0, lr, r0
    16f4:	01000003 	tsteq	r0, r3
    16f8:	0329239f 			@ <UNDEFINED> instruction: 0x0329239f
    16fc:	03050000 	movweq	r0, #20480	@ 0x5000
    1700:	000248a4 	andeq	r4, r2, r4, lsr #17
    1704:	00030106 	andeq	r0, r3, r6, lsl #2
    1708:	03240c00 			@ <UNDEFINED> instruction: 0x03240c00
    170c:	dd110000 	ldcle	0, cr0, [r1, #-0]
    1710:	3e000001 	cdpcc	0, 0, cr0, cr0, cr1, {0}
    1714:	12000003 	andne	r0, r0, #3
    1718:	00000074 	andeq	r0, r0, r4, ror r0
    171c:	be050004 	cdplt	0, 0, cr0, cr5, cr4, {0}
    1720:	a300000f 	movwge	r0, #15
    1724:	00032e1e 	andeq	r2, r3, lr, lsl lr
    1728:	a8030500 	stmdage	r3, {r8, sl}
    172c:	05000248 	streq	r0, [r0, #-584]	@ 0xfffffdb8
    1730:	00000fe7 	andeq	r0, r0, r7, ror #31
    1734:	01dd1ea4 	bicseq	r1, sp, r4, lsr #29
    1738:	03050000 	movweq	r0, #20480	@ 0x5000
    173c:	0002490c 	andeq	r4, r2, ip, lsl #18
    1740:	000ff905 	andeq	pc, pc, r5, lsl #18
    1744:	dd1ea500 	cfldr32le	mvfx10, [lr, #-0]
    1748:	05000001 	streq	r0, [r0, #-1]
    174c:	02492003 	subeq	r2, r9, #3
    1750:	0dfb0500 	cfldr64eq	mvdx0, [fp]
    1754:	29a60000 	stmibcs	r6!, {}	@ <UNPREDICTABLE>
    1758:	00000387 	andeq	r0, r0, r7, lsl #7
    175c:	49340305 	ldmdbmi	r4!, {r0, r2, r8, r9}
    1760:	dd060002 	stcle	0, cr0, [r6, #-8]
    1764:	0c000001 	stceq	0, cr0, [r0], {1}
    1768:	00000382 	andeq	r0, r0, r2, lsl #7
    176c:	00038207 	andeq	r8, r3, r7, lsl #4
    1770:	0e270500 	cfsh64eq	mvdx0, mvdx7, #0
    1774:	29a70000 	stmibcs	r7!, {}	@ <UNPREDICTABLE>
    1778:	00000387 	andeq	r0, r0, r7, lsl #7
    177c:	49380305 	ldmdbmi	r8!, {r0, r2, r8, r9}
    1780:	66050002 	strvs	r0, [r5], -r2
    1784:	a800000e 	stmdage	r0, {r1, r2, r3}
    1788:	0001dd1e 	andeq	sp, r1, lr, lsl sp
    178c:	3c030500 	cfstr32cc	mvfx0, [r3], {-0}
    1790:	05000249 	streq	r0, [r0, #-585]	@ 0xfffffdb7
    1794:	00000e78 	andeq	r0, r0, r8, ror lr
    1798:	01dd1fac 	bicseq	r1, sp, ip, lsr #31
    179c:	03050000 	movweq	r0, #20480	@ 0x5000
    17a0:	00024950 	andeq	r4, r2, r0, asr r9
    17a4:	000bd905 	andeq	sp, fp, r5, lsl #18
    17a8:	5a39ad00 	bpl	e6cbb0 <__bss_end+0xe46fb0>
    17ac:	05000000 	streq	r0, [r0, #-0]
    17b0:	02496403 	subeq	r6, r9, #50331648	@ 0x3000000
    17b4:	0bf70500 	bleq	ffdc2bbc <_estack+0xf7da2bbc>
    17b8:	1fb30000 	svcne	0x00b30000
    17bc:	000001dd 	ldrdeq	r0, [r0], -sp
    17c0:	49680305 	stmdbmi	r8!, {r0, r2, r8, r9}^
    17c4:	88050002 	stmdahi	r5, {r1}
    17c8:	be00000b 	cdplt	0, 0, cr0, cr0, cr11, {0}
    17cc:	00005a38 	andeq	r5, r0, r8, lsr sl
    17d0:	7c030500 	cfstr32vc	mvfx0, [r3], {-0}
    17d4:	05000249 	streq	r0, [r0, #-585]	@ 0xfffffdb7
    17d8:	00001022 	andeq	r1, r0, r2, lsr #32
    17dc:	00ce2ebf 	strheq	r2, [lr], #239	@ 0xef
    17e0:	03050000 	movweq	r0, #20480	@ 0x5000
    17e4:	00024980 	andeq	r4, r2, r0, lsl #19
    17e8:	000e1505 	andeq	r1, lr, r5, lsl #10
    17ec:	532fc000 			@ <UNDEFINED> instruction: 0x532fc000
    17f0:	05000000 	streq	r0, [r0, #-0]
    17f4:	02498403 	subeq	r8, r9, #50331648	@ 0x3000000
    17f8:	0eb10500 	cdpeq	5, 11, cr0, cr1, cr0, {0}
    17fc:	38c10000 	stmiacc	r1, {}^	@ <UNPREDICTABLE>
    1800:	0000005a 	andeq	r0, r0, sl, asr r0
    1804:	49880305 	stmibmi	r8, {r0, r2, r8, r9}
    1808:	14050002 	strne	r0, [r5], #-2
    180c:	c200000f 	andgt	r0, r0, #15
    1810:	00004e36 	andeq	r4, r0, r6, lsr lr
    1814:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
    1818:	05000249 	streq	r0, [r0, #-585]	@ 0xfffffdb7
    181c:	00000d3a 	andeq	r0, r0, sl, lsr sp
    1820:	005a38c3 	subseq	r3, sl, r3, asr #17
    1824:	03050000 	movweq	r0, #20480	@ 0x5000
    1828:	00024990 	muleq	r2, r0, r9
    182c:	00103405 	andseq	r3, r0, r5, lsl #8
    1830:	5a38c400 	bpl	e32838 <__bss_end+0xe0cc38>
    1834:	05000000 	streq	r0, [r0, #-0]
    1838:	02499403 	subeq	r9, r9, #50331648	@ 0x3000000
    183c:	0de20500 	cfstr64eq	mvdx0, [r2]
    1840:	2fc50000 	svccs	0x00c50000
    1844:	0000004e 	andeq	r0, r0, lr, asr #32
    1848:	49980305 	ldmibmi	r8, {r0, r2, r8, r9}
    184c:	0b050002 	bleq	14185c <__bss_end+0x11bc5c>
    1850:	c6000010 			@ <UNDEFINED> instruction: 0xc6000010
    1854:	00004e2f 	andeq	r4, r0, pc, lsr #28
    1858:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
    185c:	05000249 	streq	r0, [r0, #-585]	@ 0xfffffdb7
    1860:	00000fb1 			@ <UNDEFINED> instruction: 0x00000fb1
    1864:	00532fc7 	subseq	r2, r3, r7, asr #31
    1868:	03050000 	movweq	r0, #20480	@ 0x5000
    186c:	000249a0 	andeq	r4, r2, r0, lsr #19
    1870:	000e9c05 	andeq	r9, lr, r5, lsl #24
    1874:	c225c800 	eorgt	ip, r5, #0, 16
    1878:	05000000 	streq	r0, [r0, #-0]
    187c:	02481803 	subeq	r1, r8, #196608	@ 0x30000
    1880:	102d1300 	eorne	r1, sp, r0, lsl #6
    1884:	09210000 	stmdbeq	r1!, {}	@ <UNPREDICTABLE>
    1888:	0000008e 	andeq	r0, r0, lr, lsl #1
    188c:	000004c0 	andeq	r0, r0, r0, asr #9
    1890:	00008e04 	andeq	r8, r0, r4, lsl #28
    1894:	006d0400 	rsbeq	r0, sp, r0, lsl #8
    1898:	7b040000 	blvc	1018a0 <__bss_end+0xdbca0>
    189c:	00000000 	andeq	r0, r0, r0
    18a0:	0009750e 	andeq	r7, r9, lr, lsl #10
    18a4:	01710900 	cmneq	r1, r0, lsl #18
    18a8:	000004d2 	ldrdeq	r0, [r0], -r2
    18ac:	00008e04 	andeq	r8, r0, r4, lsl #28
    18b0:	b5140000 	ldrlt	r0, [r4, #-0]
    18b4:	70000006 	andvc	r0, r0, r6
    18b8:	008e0701 	addeq	r0, lr, r1, lsl #14
    18bc:	04e80000 	strbteq	r0, [r8], #0
    18c0:	7b040000 	blvc	1018c8 <__bss_end+0xdbcc8>
    18c4:	00000000 	andeq	r0, r0, r0
    18c8:	00037d0e 	andeq	r7, r3, lr, lsl #26
    18cc:	01110600 	tsteq	r1, r0, lsl #12
    18d0:	000004fa 	strdeq	r0, [r0], -sl
    18d4:	00038204 	andeq	r8, r3, r4, lsl #4
    18d8:	ca0e0000 	bgt	3818e0 <__bss_end+0x35bce0>
    18dc:	06000006 	streq	r0, [r0], -r6
    18e0:	050c011c 	streq	r0, [ip, #-284]	@ 0xfffffee4
    18e4:	0c040000 	stceq	0, cr0, [r4], {-0}
    18e8:	00000005 	andeq	r0, r0, r5
    18ec:	00014c06 	andeq	r4, r1, r6, lsl #24
    18f0:	0c0a1300 	stceq	3, cr1, [sl], {-0}
    18f4:	082c0000 	stmdaeq	ip!, {}	@ <UNPREDICTABLE>
    18f8:	00000090 	muleq	r0, r0, r0
    18fc:	00000530 	andeq	r0, r0, r0, lsr r5
    1900:	00009004 	andeq	r9, r0, r4
    1904:	00a10400 	adceq	r0, r1, r0, lsl #8
    1908:	7b040000 	blvc	101910 <__bss_end+0xdbd10>
    190c:	00000000 	andeq	r0, r0, r0
    1910:	0003950e 	andeq	r9, r3, lr, lsl #10
    1914:	01290600 			@ <UNDEFINED> instruction: 0x01290600
    1918:	00000547 	andeq	r0, r0, r7, asr #10
    191c:	00038204 	andeq	r8, r3, r4, lsl #4
    1920:	050c0400 	streq	r0, [ip, #-1024]	@ 0xfffffc00
    1924:	1f000000 	svcne	0x00000000
    1928:	00000143 	andeq	r0, r0, r3, asr #2
    192c:	06018009 	streq	r8, [r1], -r9
    1930:	00020320 	andeq	r0, r2, r0, lsr #6
    1934:	01790900 	cmneq	r9, r0, lsl #18
    1938:	0000470f 	andeq	r4, r0, pc, lsl #14
    193c:	04030e00 	streq	r0, [r3], #-3584	@ 0xfffff200
    1940:	4a060000 	bmi	181948 <__bss_end+0x15bd48>
    1944:	00056f01 	andeq	r6, r5, r1, lsl #30
    1948:	050c0400 	streq	r0, [ip, #-1024]	@ 0xfffffc00
    194c:	15000000 	strne	r0, [r0, #-0]
    1950:	000002b6 			@ <UNDEFINED> instruction: 0x000002b6
    1954:	04380efd 	ldrteq	r0, [r8], #-3837	@ 0xfffff103
    1958:	3e060000 	cdpcc	0, 0, cr0, cr6, cr0, {0}
    195c:	00058c01 	andeq	r8, r5, r1, lsl #24
    1960:	03820400 	orreq	r0, r2, #0, 8
    1964:	0c040000 	stceq	0, cr0, [r4], {-0}
    1968:	00000005 	andeq	r0, r0, r5
    196c:	00023c15 	andeq	r3, r2, r5, lsl ip
    1970:	1714fc00 	ldrne	pc, [r4, -r0, lsl #24]
    1974:	6a000002 	bvs	1984 <_start-0xe67c>
    1978:	027e1201 	rsbseq	r1, lr, #268435456	@ 0x10000000
    197c:	05b20000 	ldreq	r0, [r2, #0]!
    1980:	7e040000 	cdpvc	0, 0, cr0, cr4, cr0, {0}
    1984:	04000002 	streq	r0, [r0], #-2
    1988:	000000a6 	andeq	r0, r0, r6, lsr #1
    198c:	00008e04 	andeq	r8, r0, r4, lsl #28
    1990:	d50f0000 	strle	r0, [pc, #-0]	@ 1998 <_start-0xe668>
    1994:	2900000d 	stmdbcs	r0, {r0, r2, r3}
    1998:	34940e09 	ldrcc	r0, [r4], #3593	@ 0xe09
    199c:	00340002 	eorseq	r0, r4, r2
    19a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    19a4:	000005d8 	ldrdeq	r0, [r0], -r8
    19a8:	000d8a02 	andeq	r8, sp, r2, lsl #20
    19ac:	24092900 	strcs	r2, [r9], #-2304	@ 0xfffff700
    19b0:	00000324 	andeq	r0, r0, r4, lsr #6
    19b4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19b8:	000ce021 	andeq	lr, ip, r1, lsr #32
    19bc:	086a0100 	stmdaeq	sl!, {r8}^
    19c0:	00032410 	andeq	r2, r3, r0, lsl r4
    19c4:	0233e400 	eorseq	lr, r3, #0, 8
    19c8:	0000b000 	andeq	fp, r0, r0
    19cc:	219c0100 	orrscs	r0, ip, r0, lsl #2
    19d0:	02000006 	andeq	r0, r0, #6
    19d4:	00000cf7 	strdeq	r0, [r0], -r7
    19d8:	4037086a 	eorsmi	r0, r7, sl, ror #16
    19dc:	02000000 	andeq	r0, r0, #0
    19e0:	04026e91 	streq	r6, [r2], #-3729	@ 0xfffff16f
    19e4:	6a00000d 	bvs	1a20 <_start-0xe5e0>
    19e8:	027e5508 	rsbseq	r5, lr, #8, 10	@ 0x2000000
    19ec:	91020000 	mrsls	r0, (UNDEF: 2)
    19f0:	0cbe0168 	ldfeqs	f0, [lr], #416	@ 0x1a0
    19f4:	086c0000 	stmdaeq	ip!, {}^	@ <UNPREDICTABLE>
    19f8:	00032409 	andeq	r2, r3, r9, lsl #8
    19fc:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    1a00:	0f860f00 	svceq	0x00860f00
    1a04:	08500000 	ldmdaeq	r0, {}^	@ <UNPREDICTABLE>
    1a08:	02332c0d 	eorseq	r2, r3, #3328	@ 0xd00
    1a0c:	0000b800 	andeq	fp, r0, r0, lsl #16
    1a10:	479c0100 	ldrmi	r0, [ip, r0, lsl #2]
    1a14:	02000006 	andeq	r0, r0, #6
    1a18:	00000371 	andeq	r0, r0, r1, ror r3
    1a1c:	c23a0850 	eorsgt	r0, sl, #80, 16	@ 0x500000
    1a20:	02000000 	andeq	r0, r0, #0
    1a24:	0f007491 	svceq	0x00007491
    1a28:	00000f58 	andeq	r0, r0, r8, asr pc
    1a2c:	700d082d 	andvc	r0, sp, sp, lsr #16
    1a30:	bc000232 	sfmlt	f0, 4, [r0], {50}	@ 0x32
    1a34:	01000000 	mrseq	r0, (UNDEF: 0)
    1a38:	0006909c 	muleq	r6, ip, r0
    1a3c:	327c1000 	rsbscc	r1, ip, #0
    1a40:	00980002 	addseq	r0, r8, r2
    1a44:	5a010000 	bpl	41a4c <__bss_end+0x1be4c>
    1a48:	3100000c 	tstcc	r0, ip
    1a4c:	00471108 	subeq	r1, r7, r8, lsl #2
    1a50:	91020000 	mrsls	r0, (UNDEF: 2)
    1a54:	32bc1074 	adcscc	r1, ip, #116	@ 0x74
    1a58:	00580002 	subseq	r0, r8, r2
    1a5c:	8a010000 	bhi	41a64 <__bss_end+0x1be64>
    1a60:	3d00000d 	stccc	0, cr0, [r0, #-52]	@ 0xffffffcc
    1a64:	03240d08 			@ <UNDEFINED> instruction: 0x03240d08
    1a68:	91020000 	mrsls	r0, (UNDEF: 2)
    1a6c:	00000070 	andeq	r0, r0, r0, ror r0
    1a70:	0010ce0f 	andseq	ip, r0, pc, lsl #28
    1a74:	0d080d00 	stceq	13, cr0, [r8, #-0]
    1a78:	000231b0 			@ <UNDEFINED> instruction: 0x000231b0
    1a7c:	000000c0 	andeq	r0, r0, r0, asr #1
    1a80:	06b69c01 	ldrteq	r9, [r6], r1, lsl #24
    1a84:	92010000 	andls	r0, r1, #0
    1a88:	0f000006 	svceq	0x00000006
    1a8c:	00531808 	subseq	r1, r3, r8, lsl #16
    1a90:	91020000 	mrsls	r0, (UNDEF: 2)
    1a94:	610f0074 	tstvs	pc, r4, ror r0	@ <UNPREDICTABLE>
    1a98:	b700000b 	strlt	r0, [r0, -fp]
    1a9c:	30f00d07 	rscscc	r0, r0, r7, lsl #26
    1aa0:	00c00002 	sbceq	r0, r0, r2
    1aa4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aa8:	00000718 	andeq	r0, r0, r8, lsl r7
    1aac:	000d8a02 	andeq	r8, sp, r2, lsl #20
    1ab0:	3007b700 	andcc	fp, r7, r0, lsl #14
    1ab4:	00000324 	andeq	r0, r0, r4, lsr #6
    1ab8:	02749102 	rsbseq	r9, r4, #-2147483648	@ 0x80000000
    1abc:	00001097 	muleq	r0, r7, r0
    1ac0:	795107b7 	ldmdbvc	r1, {r0, r1, r2, r4, r5, r7, r8, r9, sl}^
    1ac4:	02000002 	andeq	r0, r0, #2
    1ac8:	92027091 	andls	r7, r2, #145	@ 0x91
    1acc:	b7000006 	strlt	r0, [r0, -r6]
    1ad0:	00537007 	subseq	r7, r3, r7
    1ad4:	91020000 	mrsls	r0, (UNDEF: 2)
    1ad8:	0e5d026c 	cdpeq	2, 5, cr0, cr13, cr12, {3}
    1adc:	07b70000 	ldreq	r0, [r7, r0]!
    1ae0:	00071d98 	muleq	r7, r8, sp
    1ae4:	68910200 	ldmvs	r1, {r9}
    1ae8:	000cf702 	andeq	pc, ip, r2, lsl #14
    1aec:	b107b700 	tstlt	r7, r0, lsl #14
    1af0:	00000040 	andeq	r0, r0, r0, asr #32
    1af4:	00009102 	andeq	r9, r0, r2, lsl #2
    1af8:	00026f06 	andeq	r6, r2, r6, lsl #30
    1afc:	07180700 	ldreq	r0, [r8, -r0, lsl #14]
    1b00:	ef0f0000 	svc	0x000f0000
    1b04:	7600000d 	strvc	r0, [r0], -sp
    1b08:	30c00807 	sbccc	r0, r0, r7, lsl #16
    1b0c:	00300002 	eorseq	r0, r0, r2
    1b10:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b14:	00000748 	andeq	r0, r0, r8, asr #14
    1b18:	00019002 	andeq	r9, r1, r2
    1b1c:	08077600 	stmdaeq	r7, {r9, sl, ip, sp, lr}
    1b20:	0000008e 	andeq	r0, r0, lr, lsl #1
    1b24:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1b28:	000a4d16 	andeq	r4, sl, r6, lsl sp
    1b2c:	98074200 	stmdals	r7, {r9, lr}
    1b30:	28000230 	stmdacs	r0, {r4, r5, r9}
    1b34:	01000000 	mrseq	r0, (UNDEF: 0)
    1b38:	0ada0b9c 	beq	ff6849b0 <_estack+0xf76649b0>
    1b3c:	07140000 	ldreq	r0, [r4, -r0]
    1b40:	0000470f 	andeq	r4, r0, pc, lsl #14
    1b44:	022fa400 	eoreq	sl, pc, #0, 8
    1b48:	0000f400 	andeq	pc, r0, r0, lsl #8
    1b4c:	a19c0100 	orrsge	r0, ip, r0, lsl #2
    1b50:	02000007 	andeq	r0, r0, #7
    1b54:	00000c3f 	andeq	r0, r0, pc, lsr ip
    1b58:	a63a0714 			@ <UNDEFINED> instruction: 0xa63a0714
    1b5c:	02000007 	andeq	r0, r0, #7
    1b60:	77026c91 			@ <UNDEFINED> instruction: 0x77026c91
    1b64:	14000010 	strne	r0, [r0], #-16
    1b68:	07b05a07 	ldreq	r5, [r0, r7, lsl #20]!
    1b6c:	91020000 	mrsls	r0, (UNDEF: 2)
    1b70:	09600168 	stmdbeq	r0!, {r3, r5, r6, r8}^
    1b74:	07160000 	ldreq	r0, [r6, -r0]
    1b78:	0000470f 	andeq	r4, r0, pc, lsl #14
    1b7c:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    1b80:	02220600 	eoreq	r0, r2, #0, 12
    1b84:	a1070000 	mrsge	r0, (UNDEF: 7)
    1b88:	06000007 	streq	r0, [r0], -r7
    1b8c:	000000c2 	andeq	r0, r0, r2, asr #1
    1b90:	0007ab07 	andeq	sl, r7, r7, lsl #22
    1b94:	0b4c1700 	bleq	130779c <__bss_end+0x12e1b9c>
    1b98:	070c0000 	streq	r0, [ip, -r0]
    1b9c:	00022f5c 	andeq	r2, r2, ip, asr pc
    1ba0:	00000048 	andeq	r0, r0, r8, asr #32
    1ba4:	07da9c01 	ldrbeq	r9, [sl, r1, lsl #24]
    1ba8:	3f020000 	svccc	0x00020000
    1bac:	0c00000c 	stceq	0, cr0, [r0], {12}
    1bb0:	07a63107 	streq	r3, [r6, r7, lsl #2]!
    1bb4:	91020000 	mrsls	r0, (UNDEF: 2)
    1bb8:	a30b0074 	movwge	r0, #45172	@ 0xb074
    1bbc:	d900000a 	stmdble	r0, {r1, r3}
    1bc0:	00471606 	subeq	r1, r7, r6, lsl #12
    1bc4:	2e440000 	cdpcs	0, 4, cr0, cr4, cr0, {0}
    1bc8:	01180002 	tsteq	r8, r2
    1bcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bd0:	00000822 	andeq	r0, r0, r2, lsr #16
    1bd4:	00030d02 	andeq	r0, r3, r2, lsl #26
    1bd8:	4406d900 	strmi	sp, [r6], #-2304	@ 0xfffff700
    1bdc:	00000827 	andeq	r0, r0, r7, lsr #16
    1be0:	016c9102 	cmneq	ip, r2, lsl #2
    1be4:	00000ef5 	strdeq	r0, [r0], -r5
    1be8:	240906db 	strcs	r0, [r9], #-1755	@ 0xfffff925
    1bec:	02000003 	andeq	r0, r0, #3
    1bf0:	60017091 	mulvs	r1, r1, r0
    1bf4:	dc000009 	stcle	0, cr0, [r0], {9}
    1bf8:	00470f06 	subeq	r0, r7, r6, lsl #30
    1bfc:	91020000 	mrsls	r0, (UNDEF: 2)
    1c00:	e9060074 	stmdb	r6, {r2, r4, r5, r6}
    1c04:	07000001 	streq	r0, [r0, -r1]
    1c08:	00000822 	andeq	r0, r0, r2, lsr #16
    1c0c:	0008cc0a 	andeq	ip, r8, sl, lsl #24
    1c10:	06068700 	streq	r8, [r6], -r0, lsl #14
    1c14:	00022da8 	andeq	r2, r2, r8, lsr #27
    1c18:	0000009c 	muleq	r0, ip, r0
    1c1c:	08709c01 	ldmdaeq	r0!, {r0, sl, fp, ip, pc}^
    1c20:	0d020000 	stceq	0, cr0, [r2, #-0]
    1c24:	87000003 	strhi	r0, [r0, -r3]
    1c28:	08273106 	stmdaeq	r7!, {r1, r2, r8, ip, sp}
    1c2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1c30:	1078026c 	rsbsne	r0, r8, ip, ror #4
    1c34:	06870000 	streq	r0, [r7], r0
    1c38:	0000c24b 	andeq	ip, r0, fp, asr #4
    1c3c:	68910200 	ldmvs	r1, {r9}
    1c40:	00037101 	andeq	r7, r3, r1, lsl #2
    1c44:	0e068900 	vmlaeq.f16	s16, s12, s0	@ <UNPREDICTABLE>
    1c48:	000000c2 	andeq	r0, r0, r2, asr #1
    1c4c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1c50:	00007417 	andeq	r7, r0, r7, lsl r4
    1c54:	a0064b00 	andge	r4, r6, r0, lsl #22
    1c58:	0800022c 	stmdaeq	r0, {r2, r3, r5, r9}
    1c5c:	01000001 	tsteq	r0, r1
    1c60:	00089f9c 	muleq	r8, ip, pc	@ <UNPREDICTABLE>
    1c64:	2d0c1000 	stccs	0, cr1, [ip, #-0]
    1c68:	00780002 	rsbseq	r0, r8, r2
    1c6c:	5c010000 	stcpl	0, cr0, [r1], {-0}
    1c70:	7c000004 	stcvc	0, cr0, [r0], {4}
    1c74:	038c0306 	orreq	r0, ip, #402653184	@ 0x18000000
    1c78:	91020000 	mrsls	r0, (UNDEF: 2)
    1c7c:	0b000074 	bleq	1e54 <_start-0xe1ac>
    1c80:	00000c8d 	andeq	r0, r0, sp, lsl #25
    1c84:	4710062d 	ldrmi	r0, [r0, -sp, lsr #12]
    1c88:	24000000 	strcs	r0, [r0], #-0
    1c8c:	7c00022c 	sfmvc	f0, 4, [r0], {44}	@ 0x2c
    1c90:	01000000 	mrseq	r0, (UNDEF: 0)
    1c94:	0008f69c 	muleq	r8, ip, r6
    1c98:	0d280200 	sfmeq	f0, 4, [r8, #-0]
    1c9c:	062d0000 	strteq	r0, [sp], -r0
    1ca0:	0001ee3a 	andeq	lr, r1, sl, lsr lr
    1ca4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1ca8:	000d2e02 	andeq	r2, sp, r2, lsl #28
    1cac:	47062d00 	strmi	r2, [r6, -r0, lsl #26]
    1cb0:	0000008e 	andeq	r0, r0, lr, lsl #1
    1cb4:	01689102 	cmneq	r8, r2, lsl #2
    1cb8:	00000d8b 	andeq	r0, r0, fp, lsl #27
    1cbc:	240a062f 	strcs	r0, [sl], #-1583	@ 0xfffff9d1
    1cc0:	02000003 	andeq	r0, r0, #3
    1cc4:	60017491 	mulvs	r1, r1, r4
    1cc8:	30000009 	andcc	r0, r0, r9
    1ccc:	00471006 	subeq	r1, r7, r6
    1cd0:	91020000 	mrsls	r0, (UNDEF: 2)
    1cd4:	5c0b0070 	stcpl	0, cr0, [fp], {112}	@ 0x70
    1cd8:	10000010 	andne	r0, r0, r0, lsl r0
    1cdc:	00d31306 	sbcseq	r1, r3, r6, lsl #6
    1ce0:	2bc80000 	blcs	ff201ce8 <_estack+0xf71e1ce8>
    1ce4:	005c0002 	subseq	r0, ip, r2
    1ce8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1cec:	0000093e 	andeq	r0, r0, lr, lsr r9
    1cf0:	000d2802 	andeq	r2, sp, r2, lsl #16
    1cf4:	3b061000 	blcc	185cfc <__bss_end+0x1600fc>
    1cf8:	000001ee 	andeq	r0, r0, lr, ror #3
    1cfc:	016c9102 	cmneq	ip, r2, lsl #2
    1d00:	00000d8b 	andeq	r0, r0, fp, lsl #27
    1d04:	240a0612 	strcs	r0, [sl], #-1554	@ 0xfffff9ee
    1d08:	02000003 	andeq	r0, r0, #3
    1d0c:	60017491 	mulvs	r1, r1, r4
    1d10:	13000009 	movwne	r0, #9
    1d14:	00d31306 	sbcseq	r1, r3, r6, lsl #6
    1d18:	91020000 	mrsls	r0, (UNDEF: 2)
    1d1c:	ab0a0070 	blge	281ee4 <__bss_end+0x25c2e4>
    1d20:	f600000d 			@ <UNDEFINED> instruction: 0xf600000d
    1d24:	2b6c0705 	blcs	1b03940 <__bss_end+0x1addd40>
    1d28:	005c0002 	subseq	r0, ip, r2
    1d2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d30:	00000982 	andeq	r0, r0, r2, lsl #19
    1d34:	000d2802 	andeq	r2, sp, r2, lsl #16
    1d38:	2f05f600 	svccs	0x0005f600
    1d3c:	000001ee 	andeq	r0, r0, lr, ror #3
    1d40:	026c9102 	rsbeq	r9, ip, #-2147483648	@ 0x80000000
    1d44:	00000be8 	andeq	r0, r0, r8, ror #23
    1d48:	d34705f6 	movtle	r0, #30198	@ 0x75f6
    1d4c:	02000000 	andeq	r0, r0, #0
    1d50:	8b016891 	blhi	5bf9c <__bss_end+0x3639c>
    1d54:	f800000d 			@ <UNDEFINED> instruction: 0xf800000d
    1d58:	03240a05 			@ <UNDEFINED> instruction: 0x03240a05
    1d5c:	91020000 	mrsls	r0, (UNDEF: 2)
    1d60:	a30a0074 	movwge	r0, #41076	@ 0xa074
    1d64:	a9000001 	stmdbge	r0, {r0}
    1d68:	29500605 	ldmdbcs	r0, {r0, r2, r9, sl}^
    1d6c:	021c0002 	andseq	r0, ip, #2
    1d70:	9c010000 	stcls	0, cr0, [r1], {-0}
    1d74:	000009de 	ldrdeq	r0, [r0], -lr
    1d78:	000d8a01 	andeq	r8, sp, r1, lsl #20
    1d7c:	0a05ab00 	beq	16c984 <__bss_end+0x146d84>
    1d80:	00000324 	andeq	r0, r0, r4, lsr #6
    1d84:	22709102 	rsbscs	r9, r0, #-2147483648	@ 0x80000000
    1d88:	00022990 	muleq	r2, r0, r9
    1d8c:	00000084 	andeq	r0, r0, r4, lsl #1
    1d90:	000009c4 	andeq	r0, r0, r4, asr #19
    1d94:	00045501 	andeq	r5, r4, r1, lsl #10
    1d98:	0b05b500 	bleq	16f1a0 <__bss_end+0x1495a0>
    1d9c:	00000382 	andeq	r0, r0, r2, lsl #7
    1da0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1da4:	022a1410 	eoreq	r1, sl, #16, 8	@ 0x10000000
    1da8:	00011000 	andeq	r1, r1, r0
    1dac:	047f0100 	ldrbteq	r0, [pc], #-256	@ 1db4 <_start-0xe24c>
    1db0:	05d60000 	ldrbeq	r0, [r6]
    1db4:	0000c203 	andeq	ip, r0, r3, lsl #4
    1db8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1dbc:	d0230000 	eorle	r0, r3, r0
    1dc0:	0100000f 	tsteq	r0, pc
    1dc4:	531804f7 	tstpl	r8, #-150994944	@ 0xf7000000
    1dc8:	2c000000 	stccs	0, cr0, [r0], {-0}
    1dcc:	24000229 	strcs	r0, [r0], #-553	@ 0xfffffdd7
    1dd0:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd4:	0cc7189c 	stcleq	8, cr1, [r7], {156}	@ 0x9c
    1dd8:	04ea0000 	strbteq	r0, [sl], #0
    1ddc:	0000c20e 	andeq	ip, r0, lr, lsl #4
    1de0:	0228f400 	eoreq	pc, r8, #0, 8
    1de4:	00003800 	andeq	r3, r0, r0, lsl #16
    1de8:	2e9c0100 	fmlcse	f0, f4, f0
    1dec:	0100000a 	tsteq	r0, sl
    1df0:	00000960 	andeq	r0, r0, r0, ror #18
    1df4:	c20e04ec 	andgt	r0, lr, #236, 8	@ 0xec000000
    1df8:	02000000 	andeq	r0, r0, #0
    1dfc:	5e017091 	mcrpl	0, 0, r7, cr1, cr1, {4}
    1e00:	ed00000a 	stc	0, cr0, [r0, #-40]	@ 0xffffffd8
    1e04:	00531804 	subseq	r1, r3, r4, lsl #16
    1e08:	91020000 	mrsls	r0, (UNDEF: 2)
    1e0c:	910b0074 	tstls	fp, r4, ror r0
    1e10:	db000004 	blle	1e28 <_start-0xe1d8>
    1e14:	00c20e04 	sbceq	r0, r2, r4, lsl #28
    1e18:	28c00000 	stmiacs	r0, {}^	@ <UNPREDICTABLE>
    1e1c:	00340002 	eorseq	r0, r4, r2
    1e20:	9c010000 	stcls	0, cr0, [r1], {-0}
    1e24:	00000a58 	andeq	r0, r0, r8, asr sl
    1e28:	00101b01 	andseq	r1, r0, r1, lsl #22
    1e2c:	0e04dd00 	cdpeq	13, 0, cr13, cr4, cr0, {0}
    1e30:	000000c2 	andeq	r0, r0, r2, asr #1
    1e34:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1e38:	000a220b 	andeq	r2, sl, fp, lsl #4
    1e3c:	16048400 	strne	r8, [r4], -r0, lsl #8
    1e40:	00000047 	andeq	r0, r0, r7, asr #32
    1e44:	0002271c 	andeq	r2, r2, ip, lsl r7
    1e48:	000001a4 	andeq	r0, r0, r4, lsr #3
    1e4c:	0aa99c01 	beq	fea68e58 <_estack+0xf6a48e58>
    1e50:	8a010000 	bhi	41e58 <__bss_end+0x1c258>
    1e54:	8600000d 	strhi	r0, [r0], -sp
    1e58:	03241204 			@ <UNDEFINED> instruction: 0x03241204
    1e5c:	54010000 	strpl	r0, [r1], #-0
    1e60:	000c2f01 	andeq	r2, ip, r1, lsl #30
    1e64:	16048700 	strne	r8, [r4], -r0, lsl #14
    1e68:	00000047 	andeq	r0, r0, r7, asr #32
    1e6c:	106c9102 	rsbne	r9, ip, r2, lsl #2
    1e70:	00022768 	andeq	r2, r2, r8, ror #14
    1e74:	00000124 	andeq	r0, r0, r4, lsr #2
    1e78:	000d9001 	andeq	r9, sp, r1
    1e7c:	13049a00 	movwne	r9, #18944	@ 0x4a00
    1e80:	00000047 	andeq	r0, r0, r7, asr #32
    1e84:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1e88:	0af91600 	beq	ffe47690 <_estack+0xf7e27690>
    1e8c:	047c0000 	ldrbteq	r0, [ip], #-0
    1e90:	000226ec 	andeq	r2, r2, ip, ror #13
    1e94:	00000030 	andeq	r0, r0, r0, lsr r0
    1e98:	26249c01 	strtcs	r9, [r4], -r1, lsl #24
    1e9c:	0100000f 	tsteq	r0, pc
    1ea0:	b4060471 	strlt	r0, [r6], #-1137	@ 0xfffffb8f
    1ea4:	38000226 	stmdacc	r0, {r1, r2, r5, r9}
    1ea8:	01000000 	mrseq	r0, (UNDEF: 0)
    1eac:	0d130a9c 	vldreq	s0, [r3, #-624]	@ 0xfffffd90
    1eb0:	04300000 	ldrteq	r0, [r0], #-0
    1eb4:	02261806 	eoreq	r1, r6, #393216	@ 0x60000
    1eb8:	00009c00 	andeq	r9, r0, r0, lsl #24
    1ebc:	f39c0100 	vaddw.u16	q0, q6, d0
    1ec0:	0100000a 	tsteq	r0, sl
    1ec4:	00000960 	andeq	r0, r0, r0, ror #18
    1ec8:	470f0432 	smladxmi	pc, r2, r4, r0	@ <UNPREDICTABLE>
    1ecc:	02000000 	andeq	r0, r0, #0
    1ed0:	0b007491 	bleq	1f11c <__module_entries_end+0xf078>
    1ed4:	00000f38 	andeq	r0, r0, r8, lsr pc
    1ed8:	47100402 	ldrmi	r0, [r0, -r2, lsl #8]
    1edc:	fc000000 	stc2	0, cr0, [r0], {-0}
    1ee0:	1c000224 	sfmne	f0, 4, [r0], {36}	@ 0x24
    1ee4:	01000001 	tsteq	r0, r1
    1ee8:	000b4a9c 	muleq	fp, ip, sl
    1eec:	0c670200 	sfmeq	f0, 2, [r7], #-0
    1ef0:	04020000 	streq	r0, [r2], #-0
    1ef4:	0001ee30 	andeq	lr, r1, r0, lsr lr
    1ef8:	64910200 	ldrvs	r0, [r1], #512	@ 0x200
    1efc:	000d9001 	andeq	r9, sp, r1
    1f00:	10040400 	andne	r0, r4, r0, lsl #8
    1f04:	00000047 	andeq	r0, r0, r7, asr #32
    1f08:	01749102 	cmneq	r4, r2, lsl #2
    1f0c:	00000d8a 	andeq	r0, r0, sl, lsl #27
    1f10:	240a0405 	strcs	r0, [sl], #-1029	@ 0xfffffbfb
    1f14:	02000003 	andeq	r0, r0, #3
    1f18:	5e017091 	mcrpl	0, 0, r7, cr1, cr1, {4}
    1f1c:	0600000a 	streq	r0, [r0], -sl
    1f20:	00531904 	subseq	r1, r3, r4, lsl #18
    1f24:	91020000 	mrsls	r0, (UNDEF: 2)
    1f28:	9f0a006c 	svcls	0x000a006c
    1f2c:	d500000d 	strle	r0, [r0, #-13]
    1f30:	24040703 	strcs	r0, [r4], #-1795	@ 0xfffff8fd
    1f34:	00f80002 	rscseq	r0, r8, r2
    1f38:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f3c:	00000b7f 	andeq	r0, r0, pc, ror fp
    1f40:	000c6702 	andeq	r6, ip, r2, lsl #14
    1f44:	2003d500 	andcs	sp, r3, r0, lsl #10
    1f48:	000001ee 	andeq	r0, r0, lr, ror #3
    1f4c:	016c9102 	cmneq	ip, r2, lsl #2
    1f50:	00000d8a 	andeq	r0, r0, sl, lsl #27
    1f54:	240a03d7 	strcs	r0, [sl], #-983	@ 0xfffffc29
    1f58:	02000003 	andeq	r0, r0, #3
    1f5c:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    1f60:	00000d5d 	andeq	r0, r0, sp, asr sp
    1f64:	471703b3 			@ <UNDEFINED> instruction: 0x471703b3
    1f68:	88000000 	stmdahi	r0, {}	@ <UNPREDICTABLE>
    1f6c:	7c000223 	sfmvc	f0, 4, [r0], {35}	@ 0x23
    1f70:	01000000 	mrseq	r0, (UNDEF: 0)
    1f74:	000bc79c 	muleq	fp, ip, r7
    1f78:	0d280200 	sfmeq	f0, 4, [r8, #-0]
    1f7c:	03b30000 			@ <UNDEFINED> instruction: 0x03b30000
    1f80:	0001ee39 	andeq	lr, r1, r9, lsr lr
    1f84:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1f88:	00096001 	andeq	r6, r9, r1
    1f8c:	1003b500 	andne	fp, r3, r0, lsl #10
    1f90:	00000047 	andeq	r0, r0, r7, asr #32
    1f94:	01749102 	cmneq	r4, r2, lsl #2
    1f98:	00000d8a 	andeq	r0, r0, sl, lsl #27
    1f9c:	cc1703b6 	ldcgt	3, cr0, [r7], {182}	@ 0xb6
    1fa0:	0200000b 	andeq	r0, r0, #11
    1fa4:	06007091 			@ <UNDEFINED> instruction: 0x06007091
    1fa8:	0000030d 	andeq	r0, r0, sp, lsl #6
    1fac:	000bc707 	andeq	ip, fp, r7, lsl #14
    1fb0:	0b7b0a00 	bleq	1ec47b8 <__bss_end+0x1e9ebb8>
    1fb4:	03730000 	cmneq	r3, #0
    1fb8:	02228407 	eoreq	r8, r2, #117440512	@ 0x7000000
    1fbc:	00010400 	andeq	r0, r1, r0, lsl #8
    1fc0:	069c0100 	ldreq	r0, [ip], r0, lsl #2
    1fc4:	0200000c 	andeq	r0, r0, #12
    1fc8:	000010b0 	strheq	r1, [r0], -r0
    1fcc:	ee210373 	mcr	3, 1, r0, cr1, cr3, {3}
    1fd0:	02000001 	andeq	r0, r0, #1
    1fd4:	8a016c91 	bhi	5d220 <__bss_end+0x37620>
    1fd8:	7500000d 	strvc	r0, [r0, #-13]
    1fdc:	03240a03 			@ <UNDEFINED> instruction: 0x03240a03
    1fe0:	91020000 	mrsls	r0, (UNDEF: 2)
    1fe4:	490a0074 	stmdbmi	sl, {r2, r4, r5, r6}
    1fe8:	0700000c 	streq	r0, [r0, -ip]
    1fec:	20dc0703 	sbcscs	r0, ip, r3, lsl #14
    1ff0:	01a80002 			@ <UNDEFINED> instruction: 0x01a80002
    1ff4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ff8:	00000c68 	andeq	r0, r0, r8, ror #24
    1ffc:	000d2702 	andeq	r2, sp, r2, lsl #14
    2000:	25030700 	strcs	r0, [r3, #-1792]	@ 0xfffff900
    2004:	000001ee 	andeq	r0, r0, lr, ror #3
    2008:	02649102 	rsbeq	r9, r4, #-2147483648	@ 0x80000000
    200c:	00000ee7 	andeq	r0, r0, r7, ror #29
    2010:	53440307 	movtpl	r0, #17159	@ 0x4307
    2014:	02000000 	andeq	r0, r0, #0
    2018:	8a016091 	bhi	5a264 <__bss_end+0x34664>
    201c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    2020:	03240a03 			@ <UNDEFINED> instruction: 0x03240a03
    2024:	91020000 	mrsls	r0, (UNDEF: 2)
    2028:	10850170 	addne	r0, r5, r0, ror r1
    202c:	030a0000 	movweq	r0, #40960	@ 0xa000
    2030:	00005319 	andeq	r5, r0, r9, lsl r3
    2034:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2038:	000d9001 	andeq	r9, sp, r1
    203c:	10030b00 	andne	r0, r3, r0, lsl #22
    2040:	00000047 	andeq	r0, r0, r7, asr #32
    2044:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2048:	00109e0b 	andseq	r9, r0, fp, lsl #28
    204c:	1902f100 	stmdbne	r2, {r8, ip, sp, lr, pc}
    2050:	00000053 	andeq	r0, r0, r3, asr r0
    2054:	00022084 	andeq	r2, r2, r4, lsl #1
    2058:	00000058 	andeq	r0, r0, r8, asr r0
    205c:	0cb09c01 	ldceq	12, cr9, [r0], #4
    2060:	27020000 	strcs	r0, [r2, -r0]
    2064:	f100000d 	cps	#13
    2068:	01ee3802 	mvneq	r3, r2, lsl #16
    206c:	91020000 	mrsls	r0, (UNDEF: 2)
    2070:	0d8a016c 	stfeqs	f0, [sl, #432]	@ 0x1b0
    2074:	02f30000 	rscseq	r0, r3, #0
    2078:	0003240a 	andeq	r2, r3, sl, lsl #8
    207c:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    2080:	00095f01 	andeq	r5, r9, r1, lsl #30
    2084:	1902f400 	stmdbne	r2, {sl, ip, sp, lr, pc}
    2088:	00000053 	andeq	r0, r0, r3, asr r0
    208c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2090:	000c760a 	andeq	r7, ip, sl, lsl #12
    2094:	0702c300 	streq	ip, [r2, -r0, lsl #6]
    2098:	00022000 	andeq	r2, r2, r0
    209c:	00000084 	andeq	r0, r0, r4, lsl #1
    20a0:	0cf49c01 	ldcleq	12, cr9, [r4], #4
    20a4:	47020000 	strmi	r0, [r2, -r0]
    20a8:	c3000004 	movwgt	r0, #4
    20ac:	00c22002 	sbceq	r2, r2, r2
    20b0:	91020000 	mrsls	r0, (UNDEF: 2)
    20b4:	0371016c 	cmneq	r1, #108, 2
    20b8:	02c50000 	sbceq	r0, r5, #0
    20bc:	0000c20f 	andeq	ip, r0, pc, lsl #4
    20c0:	70910200 	addsvc	r0, r1, r0, lsl #4
    20c4:	000c2f01 	andeq	r2, ip, r1, lsl #30
    20c8:	1702c600 	strne	ip, [r2, -r0, lsl #12]
    20cc:	00000047 	andeq	r0, r0, r7, asr #32
    20d0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    20d4:	000f040a 	andeq	r0, pc, sl, lsl #8
    20d8:	07028200 	streq	r8, [r2, -r0, lsl #4]
    20dc:	00021ef0 	strdeq	r1, [r2], -r0
    20e0:	00000110 	andeq	r0, r0, r0, lsl r1
    20e4:	0d569c01 	ldcleq	12, cr9, [r6, #-4]
    20e8:	c4020000 	strgt	r0, [r2], #-0
    20ec:	8200000e 	andhi	r0, r0, #14
    20f0:	07b02d02 	ldreq	r2, [r0, r2, lsl #26]!
    20f4:	91020000 	mrsls	r0, (UNDEF: 2)
    20f8:	10420264 	subne	r0, r2, r4, ror #4
    20fc:	02820000 	addeq	r0, r2, #0
    2100:	0000c24e 	andeq	ip, r0, lr, asr #4
    2104:	60910200 	addsvs	r0, r1, r0, lsl #4
    2108:	00037101 	andeq	r7, r3, r1, lsl #2
    210c:	0f028400 	svceq	0x00028400
    2110:	000000c2 	andeq	r0, r0, r2, asr #1
    2114:	01709102 	cmneq	r0, r2, lsl #2
    2118:	00000c2f 	andeq	r0, r0, pc, lsr #24
    211c:	47100285 	ldrmi	r0, [r0, -r5, lsl #5]
    2120:	02000000 	andeq	r0, r0, #0
    2124:	4b016c91 	blmi	5d370 <__bss_end+0x37770>
    2128:	8500000f 	strhi	r0, [r0, #-15]
    212c:	00472102 	subeq	r2, r7, r2, lsl #2
    2130:	91020000 	mrsls	r0, (UNDEF: 2)
    2134:	a50a0074 	strge	r0, [sl, #-116]	@ 0xffffff8c
    2138:	4000000f 	andmi	r0, r0, pc
    213c:	1df00702 	ldclne	7, cr0, [r0, #8]!
    2140:	01000002 	tsteq	r0, r2
    2144:	9c010000 	stcls	0, cr0, [r1], {-0}
    2148:	00000d8b 	andeq	r0, r0, fp, lsl #27
    214c:	000e4e02 	andeq	r4, lr, r2, lsl #28
    2150:	20024000 	andcs	r4, r2, r0
    2154:	000001ee 	andeq	r0, r0, lr, ror #3
    2158:	016c9102 	cmneq	ip, r2, lsl #2
    215c:	00000d8a 	andeq	r0, r0, sl, lsl #27
    2160:	240a0242 	strcs	r0, [sl], #-578	@ 0xfffffdbe
    2164:	02000003 	andeq	r0, r0, #3
    2168:	0b007491 	bleq	1f3b4 <__module_entries_end+0xf310>
    216c:	00000c1c 	andeq	r0, r0, ip, lsl ip
    2170:	4716019b 			@ <UNDEFINED> instruction: 0x4716019b
    2174:	a4000000 	strge	r0, [r0], #-0
    2178:	4c00021b 	sfmmi	f0, 4, [r0], {27}
    217c:	01000002 	tsteq	r0, r2
    2180:	000e579c 	muleq	lr, ip, r7
    2184:	0e910200 	cdpeq	2, 9, cr0, cr1, cr0, {0}
    2188:	019b0000 	orrseq	r0, fp, r0
    218c:	0000a636 	andeq	sl, r0, r6, lsr r6
    2190:	64910200 	ldrvs	r0, [r1], #512	@ 0x200
    2194:	00109702 	andseq	r9, r0, r2, lsl #14
    2198:	5c019b00 			@ <UNDEFINED> instruction: 0x5c019b00
    219c:	00000279 	andeq	r0, r0, r9, ror r2
    21a0:	02609102 	rsbeq	r9, r0, #-2147483648	@ 0x80000000
    21a4:	00000cf7 	strdeq	r0, [r0], -r7
    21a8:	4073019b 			@ <UNDEFINED> instruction: 0x4073019b
    21ac:	02000000 	andeq	r0, r0, #0
    21b0:	90025e91 	mulls	r2, r1, lr
    21b4:	9b000001 	blls	21c0 <_start-0xde40>
    21b8:	008e8701 	addeq	r8, lr, r1, lsl #14
    21bc:	91020000 	mrsls	r0, (UNDEF: 2)
    21c0:	06920258 			@ <UNDEFINED> instruction: 0x06920258
    21c4:	019b0000 	orrseq	r0, fp, r0
    21c8:	000053ac 	andeq	r5, r0, ip, lsr #7
    21cc:	00910200 	addseq	r0, r1, r0, lsl #4
    21d0:	000d4f02 	andeq	r4, sp, r2, lsl #30
    21d4:	c5019b00 	strgt	r9, [r1, #-2816]	@ 0xfffff500
    21d8:	00000e57 	andeq	r0, r0, r7, asr lr
    21dc:	02049102 	andeq	r9, r4, #-2147483648	@ 0x80000000
    21e0:	00000d04 	andeq	r0, r0, r4, lsl #26
    21e4:	7ee4019b 	mcrvc	1, 7, r0, cr4, cr11, {4}
    21e8:	02000002 	andeq	r0, r0, #2
    21ec:	5d250891 	stcpl	8, cr0, [r5, #-580]!	@ 0xfffffdbc
    21f0:	0100000e 	tsteq	r0, lr
    21f4:	0110019b 			@ <UNDEFINED> instruction: 0x0110019b
    21f8:	0000071d 	andeq	r0, r0, sp, lsl r7
    21fc:	010c9102 	tsteq	ip, r2, lsl #2
    2200:	00000960 	andeq	r0, r0, r0, ror #18
    2204:	4716019d 			@ <UNDEFINED> instruction: 0x4716019d
    2208:	02000000 	andeq	r0, r0, #0
    220c:	be017491 	mcrlt	4, 0, r7, cr1, cr1, {4}
    2210:	9e00000c 	cdpls	0, 0, cr0, cr0, cr12, {0}
    2214:	03240a01 			@ <UNDEFINED> instruction: 0x03240a01
    2218:	91020000 	mrsls	r0, (UNDEF: 2)
    221c:	1be41070 	blne	ff9063e4 <_estack+0xf78e63e4>
    2220:	019c0002 	orrseq	r0, ip, r2
    2224:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    2228:	a9000001 	stmdbge	r0, {r0}
    222c:	027e1301 	rsbseq	r1, lr, #67108864	@ 0x4000000
    2230:	91020000 	mrsls	r0, (UNDEF: 2)
    2234:	0600006c 	streq	r0, [r0], -ip, rrx
    2238:	000001ee 	andeq	r0, r0, lr, ror #3
    223c:	0002b300 	andeq	fp, r2, r0, lsl #6
    2240:	01000500 	tsteq	r0, r0, lsl #10
    2244:	00098604 	andeq	r8, r9, r4, lsl #12
    2248:	00e61100 	rsceq	r1, r6, r0, lsl #2
    224c:	581d0000 	ldmdapl	sp, {}	@ <UNPREDICTABLE>
    2250:	b6000011 			@ <UNDEFINED> instruction: 0xb6000011
    2254:	c8000001 	stmdagt	r0, {r0}
    2258:	a4000234 	strge	r0, [r0], #-564	@ 0xfffffdcc
    225c:	61000003 	tstvs	r0, r3
    2260:	04000015 	streq	r0, [r0], #-21	@ 0xffffffeb
    2264:	000001e2 	andeq	r0, r0, r2, ror #3
    2268:	32100b02 	andscc	r0, r0, #2048	@ 0x800
    226c:	06000000 	streq	r0, [r0], -r0
    2270:	00000037 	andeq	r0, r0, r7, lsr r0
    2274:	00004712 	andeq	r4, r0, r2, lsl r7
    2278:	00470700 	subeq	r0, r7, r0, lsl #14
    227c:	51070000 	mrspl	r0, (UNDEF: 7)
    2280:	00000000 	andeq	r0, r0, r0
    2284:	0006e808 	andeq	lr, r6, r8, lsl #16
    2288:	00470900 	subeq	r0, r7, r0, lsl #18
    228c:	04130000 	ldreq	r0, [r3], #-0
    2290:	0d02080a 	stceq	8, cr0, [r2, #-40]	@ 0xffffffd8
    2294:	00000076 	andeq	r0, r0, r6, ror r0
    2298:	00114d01 	andseq	r4, r1, r1, lsl #26
    229c:	180e0200 	stmdane	lr, {r9}
    22a0:	00000026 	andeq	r0, r0, r6, lsr #32
    22a4:	009e0100 	addseq	r0, lr, r0, lsl #2
    22a8:	0f020000 	svceq	0x00020000
    22ac:	0000510f 	andeq	r5, r0, pc, lsl #2
    22b0:	04000400 	streq	r0, [r0], #-1024	@ 0xfffffc00
    22b4:	000011be 			@ <UNDEFINED> instruction: 0x000011be
    22b8:	53031002 	movwpl	r1, #12290	@ 0x3002
    22bc:	0b000000 	bleq	22c4 <_start-0xdd3c>
    22c0:	00000076 	andeq	r0, r0, r6, ror r0
    22c4:	00000092 	muleq	r0, r2, r0
    22c8:	0000470c 	andeq	r4, r0, ip, lsl #14
    22cc:	02004700 	andeq	r4, r0, #0, 14
    22d0:	000011b0 			@ <UNDEFINED> instruction: 0x000011b0
    22d4:	00821909 	addeq	r1, r2, r9, lsl #18
    22d8:	03050000 	movweq	r0, #20480	@ 0x5000
    22dc:	000249a4 	andeq	r4, r2, r4, lsr #19
    22e0:	0c01280a 	stceq	8, cr2, [r1], {10}
    22e4:	0000012e 	andeq	r0, r0, lr, lsr #2
    22e8:	0011d701 	andseq	sp, r1, r1, lsl #14
    22ec:	100d0100 	andne	r0, sp, r0, lsl #2
    22f0:	0000012e 	andeq	r0, r0, lr, lsr #2
    22f4:	118d0100 	orrne	r0, sp, r0, lsl #2
    22f8:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    22fc:	00012e10 	andeq	r2, r1, r0, lsl lr
    2300:	e5010400 	str	r0, [r1, #-1024]	@ 0xfffffc00
    2304:	01000010 	tsteq	r0, r0, lsl r0
    2308:	012e100f 			@ <UNDEFINED> instruction: 0x012e100f
    230c:	01080000 	mrseq	r0, (UNDEF: 8)
    2310:	00001129 	andeq	r1, r0, r9, lsr #2
    2314:	2e101001 	cdpcs	0, 1, cr1, cr0, cr1, {0}
    2318:	0c000001 	stceq	0, cr0, [r0], {1}
    231c:	0011ec01 	andseq	lr, r1, r1, lsl #24
    2320:	10110100 	andsne	r0, r1, r0, lsl #2
    2324:	0000012e 	andeq	r0, r0, lr, lsr #2
    2328:	11960110 	orrsne	r0, r6, r0, lsl r1
    232c:	12010000 	andne	r0, r1, #0
    2330:	00012e10 	andeq	r2, r1, r0, lsl lr
    2334:	e0011400 	and	r1, r1, r0, lsl #8
    2338:	01000011 	tsteq	r0, r1, lsl r0
    233c:	012e1013 			@ <UNDEFINED> instruction: 0x012e1013
    2340:	01180000 	tsteq	r8, r0
    2344:	0000119e 	muleq	r0, lr, r1
    2348:	2e101401 	cfmulscs	mvf1, mvf0, mvf1
    234c:	1c000001 	stcne	0, cr0, [r0], {1}
    2350:	0011a701 	andseq	sl, r1, r1, lsl #14
    2354:	10150100 	andsne	r0, r5, r0, lsl #2
    2358:	0000012e 	andeq	r0, r0, lr, lsr #2
    235c:	10ee0120 	rscne	r0, lr, r0, lsr #2
    2360:	16010000 	strne	r0, [r1], -r0
    2364:	00012e10 	andeq	r2, r1, r0, lsl lr
    2368:	08002400 	stmdaeq	r0, {sl, sp}
    236c:	000006e3 	andeq	r0, r0, r3, ror #13
    2370:	0010fb04 	andseq	pc, r0, r4, lsl #22
    2374:	03170100 	tsteq	r7, #0, 2
    2378:	000000a3 	andeq	r0, r0, r3, lsr #1
    237c:	00013314 	andeq	r3, r1, r4, lsl r3
    2380:	019d0200 	orrseq	r0, sp, r0, lsl #4
    2384:	2b190000 	blcs	64238c <__bss_end+0x61c78c>
    2388:	0000015a 	andeq	r0, r0, sl, asr r1
    238c:	47dc0305 	ldrbmi	r0, [ip, r5, lsl #6]
    2390:	3f060002 	svccc	0x00060002
    2394:	09000001 	stmdbeq	r0, {r0}
    2398:	00000155 	andeq	r0, r0, r5, asr r1
    239c:	00012e0b 	andeq	r2, r1, fp, lsl #28
    23a0:	00016f00 	andeq	r6, r1, r0, lsl #30
    23a4:	00470c00 	subeq	r0, r7, r0, lsl #24
    23a8:	00020000 	andeq	r0, r2, r0
    23ac:	00112102 	andseq	r2, r1, r2, lsl #2
    23b0:	5f161c00 	svcpl	0x00161c00
    23b4:	05000001 	streq	r0, [r0, #-1]
    23b8:	024be403 	subeq	lr, fp, #50331648	@ 0x3000000
    23bc:	11420d00 	cmpne	r2, r0, lsl #26
    23c0:	8c6d0000 	stclhi	0, cr0, [sp], #-0
    23c4:	e0000237 	and	r0, r0, r7, lsr r2
    23c8:	01000000 	mrseq	r0, (UNDEF: 0)
    23cc:	0001b19c 	muleq	r1, ip, r1
    23d0:	72690500 	rsbvc	r0, r9, #0, 10
    23d4:	256d0071 	strbcs	r0, [sp, #-113]!	@ 0xffffff8f
    23d8:	0000004c 	andeq	r0, r0, ip, asr #32
    23dc:	026c9102 	rsbeq	r9, ip, #-2147483648	@ 0x80000000
    23e0:	0000113d 	andeq	r1, r0, sp, lsr r1
    23e4:	012e106f 			@ <UNDEFINED> instruction: 0x012e106f
    23e8:	91020000 	mrsls	r0, (UNDEF: 2)
    23ec:	d80d0074 	stmdale	sp, {r2, r4, r5, r6}
    23f0:	5b000001 	blpl	23fc <_start-0xdc04>
    23f4:	000236b8 			@ <UNDEFINED> instruction: 0x000236b8
    23f8:	000000d4 	ldrdeq	r0, [r0], -r4
    23fc:	01e29c01 	mvneq	r9, r1, lsl #24
    2400:	69050000 	stmdbvs	r5, {}	@ <UNPREDICTABLE>
    2404:	5b007172 	blpl	1e9d4 <__module_entries_end+0xe930>
    2408:	00004c24 	andeq	r4, r0, r4, lsr #24
    240c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2410:	00113d02 	andseq	r3, r1, r2, lsl #26
    2414:	2e105d00 	cdpcs	13, 1, cr5, cr0, cr0, {0}
    2418:	02000001 	andeq	r0, r0, #1
    241c:	0e007491 	mcreq	4, 0, r7, cr0, cr1, {4}
    2420:	000000a5 	andeq	r0, r0, r5, lsr #1
    2424:	02365451 	eorseq	r5, r6, #1358954496	@ 0x51000000
    2428:	00006400 	andeq	r6, r0, r0, lsl #8
    242c:	219c0100 	orrscs	r0, ip, r0, lsl #2
    2430:	05000002 	streq	r0, [r0, #-2]
    2434:	00717269 	rsbseq	r7, r1, r9, ror #4
    2438:	004c2651 	subeq	r2, ip, r1, asr r6
    243c:	91020000 	mrsls	r0, (UNDEF: 2)
    2440:	114d0374 	hvcne	53300	@ 0xd034
    2444:	40510000 	subsmi	r0, r1, r0
    2448:	00000026 	andeq	r0, r0, r6, lsr #32
    244c:	03709102 	cmneq	r0, #-2147483648	@ 0x80000000
    2450:	0000009e 	muleq	r0, lr, r0
    2454:	00515251 	subseq	r5, r1, r1, asr r2
    2458:	91020000 	mrsls	r0, (UNDEF: 2)
    245c:	0c0f006c 	stceq	0, cr0, [pc], {108}	@ 0x6c
    2460:	4c000000 	stcmi	0, cr0, [r0], {-0}
    2464:	00023638 	andeq	r3, r2, r8, lsr r6
    2468:	0000001c 	andeq	r0, r0, ip, lsl r0
    246c:	380f9c01 	stmdacc	pc, {r0, sl, fp, ip, pc}	@ <UNPREDICTABLE>
    2470:	47000001 	strmi	r0, [r0, -r1]
    2474:	0002361c 	andeq	r3, r2, ip, lsl r6
    2478:	0000001c 	andeq	r0, r0, ip, lsl r0
    247c:	f50e9c01 			@ <UNDEFINED> instruction: 0xf50e9c01
    2480:	36000002 	strcc	r0, [r0], -r2
    2484:	0002357c 	andeq	r3, r2, ip, ror r5
    2488:	000000a0 	andeq	r0, r0, r0, lsr #1
    248c:	02639c01 	rsbeq	r9, r3, #256	@ 0x100
    2490:	0d020000 	stceq	0, cr0, [r2, #-0]
    2494:	38000011 	stmdacc	r0, {r0, r4}
    2498:	00012e19 	andeq	r2, r1, r9, lsl lr
    249c:	00540100 	subseq	r0, r4, r0, lsl #2
    24a0:	00113115 	andseq	r3, r1, r5, lsl r1
    24a4:	0d1e0100 	ldfeqs	f0, [lr, #-0]
    24a8:	000234c8 	andeq	r3, r2, r8, asr #9
    24ac:	000000b4 	strheq	r0, [r0], -r4
    24b0:	cf039c01 	svcgt	0x00039c01
    24b4:	1e000011 	mcrne	0, 0, r0, cr0, cr1, {0}
    24b8:	00012e28 	andeq	r2, r1, r8, lsr #28
    24bc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    24c0:	00111c03 	andseq	r1, r1, r3, lsl #24
    24c4:	4c441e00 	mcrrmi	14, 0, r1, r4, cr0
    24c8:	02000000 	andeq	r0, r0, #0
    24cc:	e0166891 	muls	r6, r1, r8
    24d0:	7c000234 	sfmvc	f0, 4, [r0], {52}	@ 0x34
    24d4:	10000000 	andne	r0, r0, r0
    24d8:	00746962 	rsbseq	r6, r4, r2, ror #18
    24dc:	00004723 	andeq	r4, r0, r3, lsr #14
    24e0:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    24e4:	71726910 	cmnvc	r2, r0, lsl r9
    24e8:	00472600 	subeq	r2, r7, r0, lsl #12
    24ec:	91020000 	mrsls	r0, (UNDEF: 2)
    24f0:	00000070 	andeq	r0, r0, r0, ror r0
    24f4:	000003e0 	andeq	r0, r0, r0, ror #7
    24f8:	04010005 	streq	r0, [r1], #-5
    24fc:	00000ad6 	ldrdeq	r0, [r0], -r6
    2500:	0000e60a 	andeq	lr, r0, sl, lsl #12
    2504:	13501d00 	cmpne	r0, #0, 26
    2508:	01b60000 			@ <UNDEFINED> instruction: 0x01b60000
    250c:	386c0000 	stmdacc	ip!, {}^	@ <UNPREDICTABLE>
    2510:	05d80002 	ldrbeq	r0, [r8, #2]
    2514:	16e50000 	strbtne	r0, [r5], r0
    2518:	a3090000 	movwge	r0, #36864	@ 0x9000
    251c:	5f000012 	svcpl	0x00000012
    2520:	47000000 	strmi	r0, [r0, -r0]
    2524:	0000005f 	andeq	r0, r0, pc, asr r0
    2528:	0012f004 	andseq	pc, r2, r4
    252c:	0b040000 	bleq	102534 <__bss_end+0xdc934>
    2530:	01000013 	tsteq	r0, r3, lsl r0
    2534:	0013f104 	andseq	pc, r3, r4, lsl #2
    2538:	e4040200 	str	r0, [r4], #-512	@ 0xfffffe00
    253c:	03000012 	movweq	r0, #18
    2540:	00131904 	andseq	r1, r3, r4, lsl #18
    2544:	49040400 	stmdbmi	r4, {sl}
    2548:	05000012 	streq	r0, [r0, #-18]	@ 0xffffffee
    254c:	00125d04 	andseq	r5, r2, r4, lsl #26
    2550:	06000600 	streq	r0, [r0], -r0, lsl #12
    2554:	06f50801 	ldrbteq	r0, [r5], r1, lsl #16
    2558:	cd090000 	stcgt	0, cr0, [r9, #-0]
    255c:	5f000012 	svcpl	0x00000012
    2560:	5a000000 	bpl	2568 <_start-0xda98>
    2564:	00000081 	andeq	r0, r0, r1, lsl #1
    2568:	0012dc04 	andseq	sp, r2, r4, lsl #24
    256c:	1e040000 	cdpne	0, 0, cr0, cr4, cr0, {0}
    2570:	01000014 	tsteq	r0, r4, lsl r0
    2574:	01a00b00 	lsleq	r0, r0, #22
    2578:	0193094a 	orrseq	r0, r3, sl, asr #18
    257c:	92010000 	andls	r0, r1, #0
    2580:	4b000013 	blmi	25d4 <_start-0xda2c>
    2584:	00000193 	muleq	r0, r3, r1
    2588:	13990100 	orrsne	r0, r9, #0, 2
    258c:	aa4c0000 	bge	1302594 <__bss_end+0x12dc994>
    2590:	18000001 	stmdane	r0, {r0}
    2594:	0011f401 	andseq	pc, r1, r1, lsl #8
    2598:	01b14d00 			@ <UNDEFINED> instruction: 0x01b14d00
    259c:	011c0000 	tsteq	ip, r0
    25a0:	000013a4 	andeq	r1, r0, r4, lsr #7
    25a4:	0001aa4e 	andeq	sl, r1, lr, asr #20
    25a8:	32012400 	andcc	r2, r1, #0, 8
    25ac:	4f000012 	svcmi	0x00000012
    25b0:	000001b1 			@ <UNDEFINED> instruction: 0x000001b1
    25b4:	13af0128 			@ <UNDEFINED> instruction: 0x13af0128
    25b8:	aa500000 	bge	14025c0 <__bss_end+0x13dc9c0>
    25bc:	30000001 	andcc	r0, r0, r1
    25c0:	00132401 	andseq	r2, r3, r1, lsl #8
    25c4:	01b15100 			@ <UNDEFINED> instruction: 0x01b15100
    25c8:	01340000 	teqeq	r4, r0
    25cc:	000013ba 			@ <UNDEFINED> instruction: 0x000013ba
    25d0:	0001aa52 	andeq	sl, r1, r2, asr sl
    25d4:	38013c00 	stmdacc	r1, {sl, fp, ip, sp}
    25d8:	53000013 	movwpl	r0, #19
    25dc:	000001b1 			@ <UNDEFINED> instruction: 0x000001b1
    25e0:	123e0140 	eorsne	r0, lr, #64, 2
    25e4:	aa540000 	bge	15025ec <__bss_end+0x14dc9ec>
    25e8:	48000001 	stmdami	r0, {r0}
    25ec:	00133201 	andseq	r3, r3, r1, lsl #4
    25f0:	01b15500 			@ <UNDEFINED> instruction: 0x01b15500
    25f4:	014c0000 	mrseq	r0, (UNDEF: 76)
    25f8:	000013c5 	andeq	r1, r0, r5, asr #7
    25fc:	0001aa56 	andeq	sl, r1, r6, asr sl
    2600:	d6015400 	strle	r5, [r1], -r0, lsl #8
    2604:	57000012 	smladpl	r0, r2, r0, r0
    2608:	000001b1 			@ <UNDEFINED> instruction: 0x000001b1
    260c:	13d00158 	bicsne	r0, r0, #88, 2
    2610:	aa580000 	bge	1602618 <__bss_end+0x15dca18>
    2614:	60000001 	andvs	r0, r0, r1
    2618:	00123801 	andseq	r3, r2, r1, lsl #16
    261c:	01b15900 			@ <UNDEFINED> instruction: 0x01b15900
    2620:	01640000 	cmneq	r4, r0
    2624:	000013db 	ldrdeq	r1, [r0], -fp
    2628:	0001aa5a 	andeq	sl, r1, sl, asr sl
    262c:	fc016c00 	stc2	12, cr6, [r1], {-0}
    2630:	5b000012 	blpl	2680 <_start-0xd980>
    2634:	000001b1 			@ <UNDEFINED> instruction: 0x000001b1
    2638:	13e60170 	mvnne	r0, #112, 2
    263c:	aa5c0000 	bge	1702644 <__bss_end+0x16dca44>
    2640:	78000001 	stmdavc	r0, {r0}
    2644:	0012b601 	andseq	fp, r2, r1, lsl #12
    2648:	01b15d00 			@ <UNDEFINED> instruction: 0x01b15d00
    264c:	017c0000 	cmneq	ip, r0
    2650:	00001408 	andeq	r1, r0, r8, lsl #8
    2654:	0001aa5e 	andeq	sl, r1, lr, asr sl
    2658:	85018400 	strhi	r8, [r1, #-1024]	@ 0xfffffc00
    265c:	5f000012 	svcpl	0x00000012
    2660:	000001b1 			@ <UNDEFINED> instruction: 0x000001b1
    2664:	14130188 	ldrne	r0, [r3], #-392	@ 0xfffffe78
    2668:	aa600000 	bge	1802670 <__bss_end+0x17dca70>
    266c:	90000001 	andls	r0, r0, r1
    2670:	00129d01 	andseq	r9, r2, r1, lsl #26
    2674:	01c16100 	biceq	r6, r1, r0, lsl #2
    2678:	01940000 	orrseq	r0, r4, r0
    267c:	00001302 	andeq	r1, r0, r2, lsl #6
    2680:	0001b162 	andeq	fp, r1, r2, ror #2
    2684:	07009800 	streq	r9, [r0, -r0, lsl #16]
    2688:	000001aa 	andeq	r0, r0, sl, lsr #3
    268c:	000001a3 	andeq	r0, r0, r3, lsr #3
    2690:	0001a308 	andeq	sl, r1, r8, lsl #6
    2694:	06000500 	streq	r0, [r0], -r0, lsl #10
    2698:	06e80704 	strbteq	r0, [r8], r4, lsl #14
    269c:	04060000 	streq	r0, [r6], #-0
    26a0:	0006e307 	andeq	lr, r6, r7, lsl #6
    26a4:	01aa0700 			@ <UNDEFINED> instruction: 0x01aa0700
    26a8:	01c10000 	biceq	r0, r1, r0
    26ac:	a3080000 	movwge	r0, #32768	@ 0x8000
    26b0:	01000001 	tsteq	r0, r1
    26b4:	01aa0700 			@ <UNDEFINED> instruction: 0x01aa0700
    26b8:	01d10000 	bicseq	r0, r1, r0
    26bc:	a3080000 	movwge	r0, #32768	@ 0x8000
    26c0:	00000001 	andeq	r0, r0, r1
    26c4:	11fa0c00 	mvnsne	r0, r0, lsl #24
    26c8:	64010000 	strvs	r0, [r1], #-0
    26cc:	00008103 	andeq	r8, r0, r3, lsl #2
    26d0:	01d10d00 	bicseq	r0, r1, r0, lsl #26
    26d4:	9d0e0000 	stcls	0, cr0, [lr, #-0]
    26d8:	01000001 	tsteq	r0, r1
    26dc:	01fa2466 	mvnseq	r2, r6, ror #8
    26e0:	03050000 	movweq	r0, #20480	@ 0x5000
    26e4:	000247e0 	andeq	r4, r2, r0, ror #15
    26e8:	01dd040f 	bicseq	r0, sp, pc, lsl #8
    26ec:	f4100000 			@ <UNDEFINED> instruction: 0xf4100000
    26f0:	05000001 	streq	r0, [r0, #-1]
    26f4:	00001272 	andeq	r1, r0, r2, ror r2
    26f8:	023decc2 	eorseq	lr, sp, #49664	@ 0xc200
    26fc:	00005800 	andeq	r5, r0, r0, lsl #16
    2700:	3e9c0100 	fmlcce	f0, f4, f0
    2704:	02000002 	andeq	r0, r0, #2
    2708:	00001211 	andeq	r1, r0, r1, lsl r2
    270c:	01a326c2 			@ <UNDEFINED> instruction: 0x01a326c2
    2710:	91020000 	mrsls	r0, (UNDEF: 2)
    2714:	113d036c 	teqne	sp, ip, ror #6
    2718:	10c40000 	sbcne	r0, r4, r0
    271c:	000001aa 	andeq	r0, r0, sl, lsr #3
    2720:	03749102 	cmneq	r4, #-2147483648	@ 0x80000000
    2724:	0000138b 	andeq	r1, r0, fp, lsl #7
    2728:	01aa10c5 			@ <UNDEFINED> instruction: 0x01aa10c5
    272c:	91020000 	mrsls	r0, (UNDEF: 2)
    2730:	3e050070 	mcrcc	0, 0, r0, cr5, cr0, {3}
    2734:	a5000013 	strge	r0, [r0, #-19]	@ 0xffffffed
    2738:	00023c34 	andeq	r3, r2, r4, lsr ip
    273c:	000001b8 			@ <UNDEFINED> instruction: 0x000001b8
    2740:	028b9c01 	addeq	r9, fp, #256	@ 0x100
    2744:	11020000 	mrsne	r0, (UNDEF: 2)
    2748:	a5000012 	strge	r0, [r0, #-18]	@ 0xffffffee
    274c:	0001a325 	andeq	sl, r1, r5, lsr #6
    2750:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2754:	00138602 	andseq	r8, r3, r2, lsl #12
    2758:	263ea500 	ldrtcs	sl, [lr], -r0, lsl #10
    275c:	02000000 	andeq	r0, r0, #0
    2760:	3d036b91 	vstrcc	d6, [r3, #-580]	@ 0xfffffdbc
    2764:	a7000011 	smladge	r0, r1, r0, r0
    2768:	0001aa10 	andeq	sl, r1, r0, lsl sl
    276c:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    2770:	00138b03 	andseq	r8, r3, r3, lsl #22
    2774:	aa10a800 	bge	42c77c <__bss_end+0x406b7c>
    2778:	02000001 	andeq	r0, r0, #1
    277c:	05007091 	streq	r7, [r0, #-145]	@ 0xffffff6f
    2780:	0000128c 	andeq	r1, r0, ip, lsl #5
    2784:	023a8488 	eorseq	r8, sl, #136, 8	@ 0x88000000
    2788:	0001b000 	andeq	fp, r1, r0
    278c:	d89c0100 	ldmle	ip, {r8}
    2790:	02000002 	andeq	r0, r0, #2
    2794:	00001211 	andeq	r1, r0, r1, lsl r2
    2798:	01a32488 			@ <UNDEFINED> instruction: 0x01a32488
    279c:	91020000 	mrsls	r0, (UNDEF: 2)
    27a0:	1386026c 	orrne	r0, r6, #108, 4	@ 0xc0000006
    27a4:	3d880000 	stccc	0, cr0, [r8]
    27a8:	00000026 	andeq	r0, r0, r6, lsr #32
    27ac:	036b9102 	cmneq	fp, #-2147483648	@ 0x80000000
    27b0:	0000113d 	andeq	r1, r0, sp, lsr r1
    27b4:	01aa108a 			@ <UNDEFINED> instruction: 0x01aa108a
    27b8:	91020000 	mrsls	r0, (UNDEF: 2)
    27bc:	138b0374 	orrne	r0, fp, #116, 6	@ 0xd0000001
    27c0:	108b0000 	addne	r0, fp, r0
    27c4:	000001aa 	andeq	r0, r0, sl, lsr #3
    27c8:	00709102 	rsbseq	r9, r0, r2, lsl #2
    27cc:	00121811 	andseq	r1, r2, r1, lsl r8
    27d0:	05840100 	streq	r0, [r4, #256]	@ 0x100
    27d4:	00000301 	andeq	r0, r0, r1, lsl #6
    27d8:	00023a34 	andeq	r3, r2, r4, lsr sl
    27dc:	00000050 	andeq	r0, r0, r0, asr r0
    27e0:	03019c01 	movweq	r9, #7169	@ 0x1c01
    27e4:	11020000 	mrsne	r0, (UNDEF: 2)
    27e8:	84000012 	strhi	r0, [r0], #-18	@ 0xffffffee
    27ec:	0001a31b 	andeq	sl, r1, fp, lsl r3
    27f0:	74910200 	ldrvc	r0, [r1], #512	@ 0x200
    27f4:	05041200 	streq	r1, [r4, #-512]	@ 0xfffffe00
    27f8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    27fc:	00140005 	andseq	r0, r4, r5
    2800:	397c7900 	ldmdbcc	ip!, {r8, fp, ip, sp, lr}^
    2804:	00b80002 	adcseq	r0, r8, r2
    2808:	9c010000 	stcls	0, cr0, [r1], {-0}
    280c:	00000355 	andeq	r0, r0, r5, asr r3
    2810:	00121102 	andseq	r1, r2, r2, lsl #2
    2814:	a31b7900 	tstge	fp, #0, 18
    2818:	02000001 	andeq	r0, r0, #1
    281c:	af026c91 	svcge	0x00026c91
    2820:	79000012 	stmdbvc	r0, {r1, r4}
    2824:	0001a330 	andeq	sl, r1, r0, lsr r3
    2828:	68910200 	ldmvs	r1, {r9}
    282c:	00138b03 	andseq	r8, r3, r3, lsl #22
    2830:	aa107a00 	bge	421038 <__bss_end+0x3fb438>
    2834:	02000001 	andeq	r0, r0, #1
    2838:	3d037491 	cfstrscc	mvf7, [r3, #-580]	@ 0xfffffdbc
    283c:	7b000011 	blvc	2888 <_start-0xd778>
    2840:	0001aa10 	andeq	sl, r1, r0, lsl sl
    2844:	70910200 	addsvc	r0, r1, r0, lsl #4
    2848:	12211300 	eorne	r1, r1, #0, 6
    284c:	75010000 	strvc	r0, [r1, #-0]
    2850:	02394806 	eorseq	r4, r9, #393216	@ 0x60000
    2854:	00003400 	andeq	r3, r0, r0, lsl #8
    2858:	899c0100 	ldmibhi	ip, {r8}
    285c:	02000003 	andeq	r0, r0, #3
    2860:	00001211 	andeq	r1, r0, r1, lsl r2
    2864:	01a32475 			@ <UNDEFINED> instruction: 0x01a32475
    2868:	91020000 	mrsls	r0, (UNDEF: 2)
    286c:	69641474 	stmdbvs	r4!, {r2, r4, r5, r6, sl, ip}^
    2870:	75010072 	strvc	r0, [r1, #-114]	@ 0xffffff8e
    2874:	0000663a 	andeq	r6, r0, sl, lsr r6
    2878:	73910200 	orrsvc	r0, r1, #0, 4
    287c:	12bd1500 	adcsne	r1, sp, #0, 10
    2880:	69010000 	stmdbvs	r1, {}	@ <UNPREDICTABLE>
    2884:	02386c06 	eorseq	r6, r8, #1536	@ 0x600
    2888:	0000dc00 	andeq	sp, r0, r0, lsl #24
    288c:	029c0100 	addseq	r0, ip, #0, 2
    2890:	00001211 	andeq	r1, r0, r1, lsl r2
    2894:	01a32369 			@ <UNDEFINED> instruction: 0x01a32369
    2898:	91020000 	mrsls	r0, (UNDEF: 2)
    289c:	132a0264 			@ <UNDEFINED> instruction: 0x132a0264
    28a0:	38690000 	stmdacc	r9!, {}^	@ <UNPREDICTABLE>
    28a4:	000001a3 	andeq	r0, r0, r3, lsr #3
    28a8:	03609102 	cmneq	r0, #-2147483648	@ 0x80000000
    28ac:	0000138b 	andeq	r1, r0, fp, lsl #7
    28b0:	0301066b 	movweq	r0, #5739	@ 0x166b
    28b4:	91020000 	mrsls	r0, (UNDEF: 2)
    28b8:	61761674 	cmnvs	r6, r4, ror r6
    28bc:	6d01006c 	stcvs	0, cr0, [r1, #-432]	@ 0xfffffe50
    28c0:	0001aa10 	andeq	sl, r1, r0, lsl sl
    28c4:	70910200 	addsvc	r0, r1, r0, lsl #4
    28c8:	00120c03 	andseq	r0, r2, r3, lsl #24
    28cc:	01066f00 	tsteq	r6, r0, lsl #30
    28d0:	02000003 	andeq	r0, r0, #3
    28d4:	00006c91 	muleq	r0, r1, ip
    28d8:	000002e3 	andeq	r0, r0, r3, ror #5
    28dc:	04010005 	streq	r0, [r1], #-5
    28e0:	00000c43 	andeq	r0, r0, r3, asr #24
    28e4:	0000e60a 	andeq	lr, r0, sl, lsl #12
    28e8:	14a91d00 	strtne	r1, [r9], #3328	@ 0xd00
    28ec:	01b60000 			@ <UNDEFINED> instruction: 0x01b60000
    28f0:	3e440000 	cdpcc	0, 4, cr0, cr4, cr0, {0}
    28f4:	04ac0002 	strteq	r0, [ip], #2
    28f8:	18ca0000 	stmiane	sl, {}^	@ <UNPREDICTABLE>
    28fc:	b7050000 	strlt	r0, [r5, -r0]
    2900:	02000003 	andeq	r0, r0, #3
    2904:	003717d6 	ldrsbteq	r1, [r7], -r6
    2908:	26060000 	strcs	r0, [r6], -r0
    290c:	01000000 	mrseq	r0, (UNDEF: 0)
    2910:	06e80704 	strbteq	r0, [r8], r4, lsl #14
    2914:	040b0000 	streq	r0, [fp], #-0
    2918:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
    291c:	05080100 	streq	r0, [r8, #-256]	@ 0xffffff00
    2920:	0000016b 	andeq	r0, r0, fp, ror #2
    2924:	f7040801 			@ <UNDEFINED> instruction: 0xf7040801
    2928:	01000001 	tsteq	r0, r1
    292c:	06f70601 	ldrbteq	r0, [r7], r1, lsl #12
    2930:	01010000 	mrseq	r0, (UNDEF: 1)
    2934:	0006f508 	andeq	pc, r6, r8, lsl #10
    2938:	05020100 	streq	r0, [r2, #-256]	@ 0xffffff00
    293c:	0000076f 	andeq	r0, r0, pc, ror #14
    2940:	d3070201 	movwle	r0, #29185	@ 0x7201
    2944:	06000000 	streq	r0, [r0], -r0
    2948:	00000068 	andeq	r0, r0, r8, rrx
    294c:	70050401 	andvc	r0, r5, r1, lsl #8
    2950:	01000001 	tsteq	r0, r1
    2954:	06e30704 	strbteq	r0, [r3], r4, lsl #14
    2958:	08010000 	stmdaeq	r1, {}	@ <UNPREDICTABLE>
    295c:	0006de07 	andeq	sp, r6, r7, lsl #28
    2960:	03040c00 	movweq	r0, #19456	@ 0x4c00
    2964:	0000005a 	andeq	r0, r0, sl, asr r0
    2968:	fe080101 	cdp2	1, 0, cr0, cr8, cr1, {0}
    296c:	0d000006 	stceq	0, cr0, [r0, #-24]	@ 0xffffffe8
    2970:	00001490 	muleq	r0, r0, r4
    2974:	5c011000 	stcpl	0, cr1, [r1], {-0}
    2978:	0000bc0e 	andeq	fp, r0, lr, lsl #24
    297c:	14a20700 	strtne	r0, [r2], #1792	@ 0x700
    2980:	175f0000 	ldrbne	r0, [pc, -r0]
    2984:	000000c3 	andeq	r0, r0, r3, asr #1
    2988:	00149b07 	andseq	r9, r4, r7, lsl #22
    298c:	c8106300 	ldmdagt	r0, {r8, r9, sp, lr}
    2990:	00000000 	andeq	r0, r0, r0
    2994:	fc040801 	stc2	8, cr0, [r4], {1}
    2998:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
    299c:	000000bc 	strheq	r0, [r0], -ip
    29a0:	00005a0f 	andeq	r5, r0, pc, lsl #20
    29a4:	0000d900 	andeq	sp, r0, r0, lsl #18
    29a8:	00371000 	eorseq	r1, r7, r0
    29ac:	0fff0000 	svceq	0x00ff0000
    29b0:	15010200 	strne	r0, [r1, #-512]	@ 0xfffffe00
    29b4:	03640000 	cmneq	r4, #0
    29b8:	00000097 	muleq	r0, r7, r0
    29bc:	4bf00305 	blmi	ffc035d8 <_estack+0xf7be35d8>
    29c0:	57110002 	ldrpl	r0, [r1, -r2]
    29c4:	08000014 	stmdaeq	r0, {r2, r4}
    29c8:	10106801 	andsne	r6, r0, r1, lsl #16
    29cc:	08000001 	stmdaeq	r0, {r0}
    29d0:	000015a6 	andeq	r1, r0, r6, lsr #11
    29d4:	0110176a 	tsteq	r0, sl, ror #14
    29d8:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    29dc:	000014f6 	strdeq	r1, [r0], -r6
    29e0:	0026096b 	eoreq	r0, r6, fp, ror #18
    29e4:	00040000 	andeq	r0, r4, r0
    29e8:	0000ea03 	andeq	lr, r0, r3, lsl #20
    29ec:	15620500 	strbne	r0, [r2, #-1280]!	@ 0xfffffb00
    29f0:	6c010000 	stcvs	0, cr0, [r1], {-0}
    29f4:	0000ea03 	andeq	lr, r0, r3, lsl #20
    29f8:	154b0200 	strbne	r0, [fp, #-512]	@ 0xfffffe00
    29fc:	1d820000 	stcne	0, cr0, [r2]
    2a00:	0000006f 	andeq	r0, r0, pc, rrx
    2a04:	47e40305 	strbmi	r0, [r4, r5, lsl #6]!
    2a08:	1d020002 	stcne	0, cr0, [r2, #-8]
    2a0c:	85000015 	strhi	r0, [r0, #-21]	@ 0xffffffeb
    2a10:	00003215 	andeq	r3, r0, r5, lsl r2
    2a14:	e8030500 	stmda	r3, {r8, sl}
    2a18:	02000247 	andeq	r0, r0, #1879048196	@ 0x70000004
    2a1c:	0000155b 	andeq	r1, r0, fp, asr r5
    2a20:	01151388 	tsteq	r5, r8, lsl #7
    2a24:	03050000 	movweq	r0, #20480	@ 0x5000
    2a28:	00025bf0 	strdeq	r5, [r2], -r0
    2a2c:	00150702 	andseq	r0, r5, r2, lsl #14
    2a30:	651c8800 	ldrvs	r8, [ip, #-2048]	@ 0xfffff800
    2a34:	05000001 	streq	r0, [r0, #-1]
    2a38:	025bf803 	subseq	pc, fp, #196608	@ 0x30000
    2a3c:	01150300 	tsteq	r5, r0, lsl #6
    2a40:	83020000 	movwhi	r0, #8192	@ 0x2000
    2a44:	8c000015 	stchi	0, cr0, [r0], {21}
    2a48:	0000260f 	andeq	r2, r0, pc, lsl #12
    2a4c:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    2a50:	12000248 	andne	r0, r0, #72, 4	@ 0x80000004
    2a54:	0000156d 	andeq	r1, r0, sp, ror #10
    2a58:	26089101 	strcs	r9, [r8], -r1, lsl #2
    2a5c:	05000000 	streq	r0, [r0, #-0]
    2a60:	025bfc03 	subseq	pc, fp, #768	@ 0x300
    2a64:	0a221300 	beq	88766c <__bss_end+0x861a6c>
    2a68:	be030000 	cdplt	0, 0, cr0, cr3, cr0, {0}
    2a6c:	00741603 	rsbseq	r1, r4, r3, lsl #12
    2a70:	f9140000 			@ <UNDEFINED> instruction: 0xf9140000
    2a74:	0300000a 	movweq	r0, #10
    2a78:	0906038a 	stmdbeq	r6, {r1, r3, r7, r8, r9}
    2a7c:	00001427 	andeq	r1, r0, r7, lsr #8
    2a80:	419c0134 	orrsmi	r0, ip, r4, lsr r1
    2a84:	01540002 	cmpeq	r4, r2
    2a88:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a8c:	000001e8 	andeq	r0, r0, r8, ror #3
    2a90:	0015c115 	andseq	ip, r5, r5, lsl r1
    2a94:	01340100 	teqeq	r4, r0, lsl #2
    2a98:	00016535 	andeq	r6, r1, r5, lsr r5
    2a9c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2aa0:	00076404 	andeq	r6, r7, r4, lsl #8
    2aa4:	0d013600 	stceq	6, cr3, [r1, #-0]
    2aa8:	00000165 	andeq	r0, r0, r5, ror #2
    2aac:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    2ab0:	00637570 	rsbeq	r7, r3, r0, ror r5
    2ab4:	10013701 	andne	r3, r1, r1, lsl #14
    2ab8:	0000008b 	andeq	r0, r0, fp, lsl #1
    2abc:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2ac0:	00146409 	andseq	r6, r4, r9, lsl #8
    2ac4:	c4011300 	strgt	r1, [r1], #-768	@ 0xfffffd00
    2ac8:	d8000240 	stmdale	r0, {r6, r9}
    2acc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ad0:	00021c9c 	muleq	r2, ip, ip
    2ad4:	147f0400 	ldrbtne	r0, [pc], #-1024	@ 2adc <_start-0xd524>
    2ad8:	01150000 	tsteq	r5, r0
    2adc:	0001650d 	andeq	r6, r1, sp, lsl #10
    2ae0:	70910200 	addsvc	r0, r1, r0, lsl #4
    2ae4:	0015b604 	andseq	fp, r5, r4, lsl #12
    2ae8:	10011600 	andne	r1, r1, r0, lsl #12
    2aec:	0000008b 	andeq	r0, r0, fp, lsl #1
    2af0:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2af4:	00153517 	andseq	r3, r5, r7, lsl r5
    2af8:	010d0100 	mrseq	r0, (UNDEF: 29)
    2afc:	0240ac06 	subeq	sl, r0, #1536	@ 0x600
    2b00:	00001800 	andeq	r1, r0, r0, lsl #16
    2b04:	189c0100 	ldmne	ip, {r8}
    2b08:	00001442 	andeq	r1, r0, r2, asr #8
    2b0c:	08010701 	stmdaeq	r1, {r0, r8, r9, sl}
    2b10:	00000026 	andeq	r0, r0, r6, lsr #32
    2b14:	00024088 	andeq	r4, r2, r8, lsl #1
    2b18:	00000024 	andeq	r0, r0, r4, lsr #32
    2b1c:	75199c01 	ldrvc	r9, [r9, #-3073]	@ 0xfffff3ff
    2b20:	01000009 	tsteq	r0, r9
    2b24:	400c06ee 	andmi	r0, ip, lr, ror #13
    2b28:	007c0002 	rsbseq	r0, ip, r2
    2b2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b30:	00000288 	andeq	r0, r0, r8, lsl #5
    2b34:	0076701a 	rsbseq	r7, r6, sl, lsl r0
    2b38:	8917ee01 	ldmdbhi	r7, {r0, r9, sl, fp, sp, lr, pc}
    2b3c:	02000000 	andeq	r0, r0, #0
    2b40:	701b6c91 	mulsvc	fp, r1, ip
    2b44:	01006375 	tsteq	r0, r5, ror r3
    2b48:	008b10f0 	strdeq	r1, [fp], r0
    2b4c:	91020000 	mrsls	r0, (UNDEF: 2)
    2b50:	14780274 	ldrbtne	r0, [r8], #-628	@ 0xfffffd8c
    2b54:	0df10000 	ldcleq	0, cr0, [r1]
    2b58:	00000165 	andeq	r0, r0, r5, ror #2
    2b5c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2b60:	0006b51c 	andeq	fp, r6, ip, lsl r5
    2b64:	07920100 	ldreq	r0, [r2, r0, lsl #2]
    2b68:	00000089 	andeq	r0, r0, r9, lsl #1
    2b6c:	00023e44 	andeq	r3, r2, r4, asr #28
    2b70:	000001c8 	andeq	r0, r0, r8, asr #3
    2b74:	771d9c01 	ldrvc	r9, [sp, -r1, lsl #24]
    2b78:	01000015 	tsteq	r0, r5, lsl r0
    2b7c:	00261c92 	mlaeq	r6, r2, ip, r1
    2b80:	91020000 	mrsls	r0, (UNDEF: 2)
    2b84:	14700264 	ldrbtne	r0, [r0], #-612	@ 0xfffffd9c
    2b88:	0d940000 	ldceq	0, cr0, [r4]
    2b8c:	00000165 	andeq	r0, r0, r5, ror #2
    2b90:	02749102 	rsbseq	r9, r4, #-2147483648	@ 0x80000000
    2b94:	0000150d 	andeq	r1, r0, sp, lsl #10
    2b98:	01651794 			@ <UNDEFINED> instruction: 0x01651794
    2b9c:	91020000 	mrsls	r0, (UNDEF: 2)
    2ba0:	15970270 	ldrne	r0, [r7, #624]	@ 0x270
    2ba4:	29940000 	ldmibcs	r4, {}	@ <UNPREDICTABLE>
    2ba8:	00000165 	andeq	r0, r0, r5, ror #2
    2bac:	02689102 	rsbeq	r9, r8, #-2147483648	@ 0x80000000
    2bb0:	0000152c 	andeq	r1, r0, ip, lsr #10
    2bb4:	00890795 	umulleq	r0, r9, r5, r7
    2bb8:	91020000 	mrsls	r0, (UNDEF: 2)
    2bbc:	4d00006c 	stcmi	0, cr0, [r0, #-432]	@ 0xfffffe50
    2bc0:	05000002 	streq	r0, [r0, #-2]
    2bc4:	2a040100 	bcs	102fcc <__bss_end+0xdd3cc>
    2bc8:	0c00000e 	stceq	0, cr0, [r0], {14}
    2bcc:	000000e6 	andeq	r0, r0, r6, ror #1
    2bd0:	0015d11d 	andseq	sp, r5, sp, lsl r1
    2bd4:	0001b600 	andeq	fp, r1, r0, lsl #12
    2bd8:	02430800 	subeq	r0, r3, #0, 16
    2bdc:	0001e800 	andeq	lr, r1, r0, lsl #16
    2be0:	001b2900 	andseq	r2, fp, r0, lsl #18
    2be4:	05040d00 	streq	r0, [r4, #-3328]	@ 0xfffff300
    2be8:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2bec:	e8070402 	stmda	r7, {r1, sl}
    2bf0:	02000006 	andeq	r0, r0, #6
    2bf4:	016b0508 	cmneq	fp, r8, lsl #10
    2bf8:	08020000 	stmdaeq	r2, {}	@ <UNPREDICTABLE>
    2bfc:	0001f704 	andeq	pc, r1, r4, lsl #14
    2c00:	012c0500 			@ <UNDEFINED> instruction: 0x012c0500
    2c04:	47020000 	strmi	r0, [r2, -r0]
    2c08:	00004e10 	andeq	r4, r0, r0, lsl lr
    2c0c:	00530300 	subseq	r0, r3, r0, lsl #6
    2c10:	5e0e0000 	cdppl	0, 0, cr0, cr14, cr0, {0}
    2c14:	01000000 	mrseq	r0, (UNDEF: 0)
    2c18:	0000005e 	andeq	r0, r0, lr, asr r0
    2c1c:	05040f00 	streq	r0, [r4, #-3840]	@ 0xfffff100
    2c20:	00000015 	andeq	r0, r0, r5, lsl r0
    2c24:	6c1c6103 	ldfvss	f6, [ip], {3}
    2c28:	02000000 	andeq	r0, r0, #0
    2c2c:	06e30704 	strbteq	r0, [r3], r4, lsl #14
    2c30:	04020000 	streq	r0, [r2], #-0
    2c34:	00017005 	andeq	r7, r1, r5
    2c38:	0c810500 	cfstr32eq	mvfx0, [r1], {0}
    2c3c:	63040000 	movwvs	r0, #16384	@ 0x4000
    2c40:	00005e10 	andeq	r5, r0, r0, lsl lr
    2c44:	0dc61000 	stcleq	0, cr1, [r6]
    2c48:	040c0000 	streq	r0, [ip], #-0
    2c4c:	00b81071 	adcseq	r1, r8, r1, ror r0
    2c50:	c0060000 	andgt	r0, r6, r0
    2c54:	73000010 	movwvc	r0, #16
    2c58:	00005e08 	andeq	r5, r0, r8, lsl #28
    2c5c:	d7060000 	strle	r0, [r6, -r0]
    2c60:	7400000e 	strvc	r0, [r0], #-14
    2c64:	00006c10 	andeq	r6, r0, r0, lsl ip
    2c68:	41060400 	tstmi	r6, r0, lsl #8
    2c6c:	7500000e 	strvc	r0, [r0, #-14]
    2c70:	00006c10 	andeq	r6, r0, r0, lsl ip
    2c74:	05000800 	streq	r0, [r0, #-2048]	@ 0xfffff800
    2c78:	00000f78 	andeq	r0, r0, r8, ror pc
    2c7c:	86037604 	strhi	r7, [r3], -r4, lsl #12
    2c80:	04000000 	streq	r0, [r0], #-0
    2c84:	000000b8 	strheq	r0, [r0], -r8
    2c88:	0000da03 	andeq	sp, r0, r3, lsl #20
    2c8c:	00c90400 	sbceq	r0, r9, r0, lsl #8
    2c90:	01020000 	mrseq	r0, (UNDEF: 2)
    2c94:	0006f706 	andeq	pc, r6, r6, lsl #14
    2c98:	00d30400 	sbcseq	r0, r3, r0, lsl #8
    2c9c:	02020000 	andeq	r0, r2, #0
    2ca0:	0000d307 	andeq	sp, r0, r7, lsl #6
    2ca4:	006c0300 	rsbeq	r0, ip, r0, lsl #6
    2ca8:	01020000 	mrseq	r0, (UNDEF: 2)
    2cac:	0006f508 	andeq	pc, r6, r8, lsl #10
    2cb0:	0d131100 	ldfeqs	f1, [r3, #-0]
    2cb4:	22040000 	andcs	r0, r4, #0
    2cb8:	1c120603 	ldcne	6, cr0, [r2], {3}
    2cbc:	0400000c 	streq	r0, [r0], #-12
    2cc0:	73160502 	tstvc	r6, #8388608	@ 0x800000
    2cc4:	35000000 	strcc	r0, [r0, #-0]
    2cc8:	01000001 	tsteq	r0, r1
    2ccc:	00000042 	andeq	r0, r0, r2, asr #32
    2cd0:	0000ce01 	andeq	ip, r0, r1, lsl #28
    2cd4:	00df0100 	sbcseq	r0, pc, r0, lsl #2
    2cd8:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    2cdc:	01000000 	mrseq	r0, (UNDEF: 0)
    2ce0:	0000006c 	andeq	r0, r0, ip, rrx
    2ce4:	00013501 	andeq	r3, r1, r1, lsl #10
    2ce8:	00e60100 	rsceq	r0, r6, r0, lsl #2
    2cec:	3f010000 	svccc	0x00010000
    2cf0:	00000001 	andeq	r0, r0, r1
    2cf4:	00007a03 	andeq	r7, r0, r3, lsl #20
    2cf8:	00c40300 	sbceq	r0, r4, r0, lsl #6
    2cfc:	3a040000 	bcc	102d04 <__bss_end+0xdd104>
    2d00:	08000001 	stmdaeq	r0, {r0}
    2d04:	000012bd 			@ <UNDEFINED> instruction: 0x000012bd
    2d08:	00015960 	andeq	r5, r1, r0, ror #18
    2d0c:	002d0100 	eoreq	r0, sp, r0, lsl #2
    2d10:	2d010000 	stccs	0, cr0, [r1, #-0]
    2d14:	00000000 	andeq	r0, r0, r0
    2d18:	000c7613 	andeq	r7, ip, r3, lsl r6
    2d1c:	01f00400 	mvnseq	r0, r0, lsl #8
    2d20:	00016c06 	andeq	r6, r1, r6, lsl #24
    2d24:	00600100 	rsbeq	r0, r0, r0, lsl #2
    2d28:	08000000 	stmdaeq	r0, {}	@ <UNPREDICTABLE>
    2d2c:	00001400 	andeq	r1, r0, r0, lsl #8
    2d30:	00018165 	andeq	r8, r1, r5, ror #2
    2d34:	002d0100 	eoreq	r0, sp, r0, lsl #2
    2d38:	2d010000 	stccs	0, cr0, [r1, #-0]
    2d3c:	00000000 	andeq	r0, r0, r0
    2d40:	00160f14 	andseq	r0, r6, r4, lsl pc
    2d44:	067a0100 	ldrbteq	r0, [sl], -r0, lsl #2
    2d48:	00024444 	andeq	r4, r2, r4, asr #8
    2d4c:	000000ac 	andeq	r0, r0, ip, lsr #1
    2d50:	09079c01 	stmdbeq	r7, {r0, sl, fp, ip, pc}
    2d54:	68000016 	stmdavs	r0, {r1, r2, r4}
    2d58:	000243fc 	strdeq	r4, [r2], -ip
    2d5c:	00000048 	andeq	r0, r0, r8, asr #32
    2d60:	01c09c01 	biceq	r9, r0, r1, lsl #24
    2d64:	9e090000 	cdpls	0, 0, cr0, cr9, cr0, {0}
    2d68:	68000000 	stmdavs	r0, {}	@ <UNPREDICTABLE>
    2d6c:	0000005e 	andeq	r0, r0, lr, asr r0
    2d70:	0a6c9102 	beq	1b27180 <__bss_end+0x1b01580>
    2d74:	266a0069 	strbtcs	r0, [sl], -r9, rrx
    2d78:	02000000 	andeq	r0, r0, #0
    2d7c:	07007491 			@ <UNDEFINED> instruction: 0x07007491
    2d80:	00001614 	andeq	r1, r0, r4, lsl r6
    2d84:	0243bc5e 	subeq	fp, r3, #24064	@ 0x5e00
    2d88:	00004000 	andeq	r4, r0, r0
    2d8c:	ed9c0100 	ldfs	f0, [ip]
    2d90:	09000001 	stmdbeq	r0, {r0}
    2d94:	0000009e 	muleq	r0, lr, r0
    2d98:	00005e5e 	andeq	r5, r0, lr, asr lr
    2d9c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2da0:	6000690a 	andvs	r6, r0, sl, lsl #18
    2da4:	00000026 	andeq	r0, r0, r6, lsr #32
    2da8:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2dac:	0015ff15 	andseq	pc, r5, r5, lsl pc	@ <UNPREDICTABLE>
    2db0:	06590100 	ldrbeq	r0, [r9], -r0, lsl #2
    2db4:	000243a4 	andeq	r4, r2, r4, lsr #7
    2db8:	00000018 	andeq	r0, r0, r8, lsl r0
    2dbc:	24079c01 	strcs	r9, [r7], #-3073	@ 0xfffff3ff
    2dc0:	53000016 	movwpl	r0, #22
    2dc4:	00024358 	andeq	r4, r2, r8, asr r3
    2dc8:	0000004c 	andeq	r0, r0, ip, asr #32
    2dcc:	02209c01 	eoreq	r9, r0, #256	@ 0x100
    2dd0:	730b0000 	movwvc	r0, #45056	@ 0xb000
    2dd4:	201c5300 	andscs	r5, ip, r0, lsl #6
    2dd8:	02000002 	andeq	r0, r0, #2
    2ddc:	03007491 	movweq	r7, #1169	@ 0x491
    2de0:	0000022c 	andeq	r0, r0, ip, lsr #4
    2de4:	fe080102 	cdp2	1, 0, cr0, cr8, cr2, {0}
    2de8:	04000006 	streq	r0, [r0], #-6
    2dec:	00000225 	andeq	r0, r0, r5, lsr #4
    2df0:	00161a16 	andseq	r1, r6, r6, lsl sl
    2df4:	064e0100 	strbeq	r0, [lr], -r0, lsl #2
    2df8:	00024308 	andeq	r4, r2, r8, lsl #6
    2dfc:	00000050 	andeq	r0, r0, r0, asr r0
    2e00:	630b9c01 	movwvs	r9, #48129	@ 0xbc01
    2e04:	25154e00 	ldrcs	r4, [r5, #-3584]	@ 0xfffff200
    2e08:	02000002 	andeq	r0, r0, #2
    2e0c:	00007791 	muleq	r0, r1, r7
    2e10:	00000146 	andeq	r0, r0, r6, asr #2
    2e14:	04010005 	streq	r0, [r1], #-5
    2e18:	00000fa2 	andeq	r0, r0, r2, lsr #31
    2e1c:	0016c208 	andseq	ip, r6, r8, lsl #4
    2e20:	164a1d00 	strbne	r1, [sl], -r0, lsl #26
    2e24:	167c0000 	ldrbtne	r0, [ip], -r0
    2e28:	44f00000 	ldrbtmi	r0, [r0], #0
    2e2c:	00d00002 	sbcseq	r0, r0, r2
    2e30:	1ce40000 	stclne	0, cr0, [r4]
    2e34:	08010000 	stmdaeq	r1, {}	@ <UNPREDICTABLE>
    2e38:	0006de07 	andeq	sp, r6, r7, lsl #28
    2e3c:	07040100 	streq	r0, [r4, -r0, lsl #2]
    2e40:	000006e8 	andeq	r0, r0, r8, ror #13
    2e44:	69050409 	stmdbvs	r5, {r0, r3, sl}
    2e48:	0a00746e 	beq	20008 <pxPortInitialiseStack+0x8>
    2e4c:	000003b7 			@ <UNDEFINED> instruction: 0x000003b7
    2e50:	2d17d602 	ldccs	6, cr13, [r7, #-8]
    2e54:	01000000 	mrseq	r0, (UNDEF: 0)
    2e58:	016b0508 	cmneq	fp, r8, lsl #10
    2e5c:	08010000 	stmdaeq	r1, {}	@ <UNPREDICTABLE>
    2e60:	0001f704 	andeq	pc, r1, r4, lsl #14
    2e64:	06010100 	streq	r0, [r1], -r0, lsl #2
    2e68:	000006f7 	strdeq	r0, [r0], -r7
    2e6c:	f5080101 			@ <UNDEFINED> instruction: 0xf5080101
    2e70:	01000006 	tsteq	r0, r6
    2e74:	076f0502 	strbeq	r0, [pc, -r2, lsl #10]!
    2e78:	02010000 	andeq	r0, r1, #0
    2e7c:	0000d307 	andeq	sp, r0, r7, lsl #6
    2e80:	05040100 	streq	r0, [r4, #-256]	@ 0xffffff00
    2e84:	00000170 	andeq	r0, r0, r0, ror r1
    2e88:	00007103 	andeq	r7, r0, r3, lsl #2
    2e8c:	07040100 	streq	r0, [r4, -r0, lsl #2]
    2e90:	000006e3 	andeq	r0, r0, r3, ror #13
    2e94:	00008e02 	andeq	r8, r0, r2, lsl #28
    2e98:	00840400 	addeq	r0, r4, r0, lsl #8
    2e9c:	01010000 	mrseq	r0, (UNDEF: 1)
    2ea0:	0006fe08 	andeq	pc, r6, r8, lsl #28
    2ea4:	008e0300 	addeq	r0, lr, r0, lsl #6
    2ea8:	95020000 	strls	r0, [r2, #-0]
    2eac:	04000000 	streq	r0, [r0], #-0
    2eb0:	0000009a 	muleq	r0, sl, r0
    2eb4:	000c0a0b 	andeq	r0, ip, fp, lsl #20
    2eb8:	082c0300 	stmdaeq	ip!, {r8, r9}
    2ebc:	00000084 	andeq	r0, r0, r4, lsl #1
    2ec0:	000244f0 	strdeq	r4, [r2], -r0
    2ec4:	000000d0 	ldrdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
    2ec8:	013f9c01 	teqeq	pc, r1, lsl #24
    2ecc:	330c0000 	movwcc	r0, #49152	@ 0xc000
    2ed0:	01000016 	tsteq	r0, r6, lsl r0
    2ed4:	00891b3e 	addeq	r1, r9, lr, lsr fp
    2ed8:	50010000 	andpl	r0, r1, r0
    2edc:	00162e05 	andseq	r2, r6, r5, lsl #28
    2ee0:	9f193f00 	svcls	0x00193f00
    2ee4:	14000000 	strne	r0, [r0], #-0
    2ee8:	0c000000 	stceq	0, cr0, [r0], {-0}
    2eec:	05000000 	streq	r0, [r0, #-0]
    2ef0:	00001644 	andeq	r1, r0, r4, asr #12
    2ef4:	003b0940 	eorseq	r0, fp, r0, asr #18
    2ef8:	004e0000 	subeq	r0, lr, r0
    2efc:	00400000 	subeq	r0, r0, r0
    2f00:	64060000 	strvs	r0, [r6], #-0
    2f04:	53007473 	movwpl	r7, #1139	@ 0x473
    2f08:	00008409 	andeq	r8, r0, r9, lsl #8
    2f0c:	00008b00 	andeq	r8, r0, r0, lsl #22
    2f10:	00007b00 	andeq	r7, r0, r0, lsl #22
    2f14:	72730600 	rsbsvc	r0, r3, #0, 12
    2f18:	0f540063 	svceq	0x00540063
    2f1c:	0000009a 	muleq	r0, sl, r0
    2f20:	000000c3 	andeq	r0, r0, r3, asr #1
    2f24:	000000b9 	strheq	r0, [r0], -r9
    2f28:	00163807 	andseq	r3, r6, r7, lsl #16
    2f2c:	3f095500 	svccc	0x00095500
    2f30:	eb000001 	bl	2f3c <_start-0xd0c4>
    2f34:	e5000000 	str	r0, [r0, #-0]
    2f38:	07000000 	streq	r0, [r0, -r0]
    2f3c:	00001670 	andeq	r1, r0, r0, ror r6
    2f40:	01440f56 	cmpeq	r4, r6, asr pc
    2f44:	01090000 	mrseq	r0, (UNDEF: 9)
    2f48:	01030000 	mrseq	r0, (UNDEF: 3)
    2f4c:	02000000 	andeq	r0, r0, #0
    2f50:	00000071 	andeq	r0, r0, r1, ror r0
    2f54:	00007802 	andeq	r7, r0, r2, lsl #16
    2f58:	01310000 	teqeq	r1, r0
    2f5c:	00050000 	andeq	r0, r5, r0
    2f60:	10600401 	rsbne	r0, r0, r1, lsl #8
    2f64:	c2060000 	andgt	r0, r6, #0
    2f68:	1d000016 	stcne	0, cr0, [r0, #-88]	@ 0xffffffa8
    2f6c:	0000172f 	andeq	r1, r0, pc, lsr #14
    2f70:	0000167c 	andeq	r1, r0, ip, ror r6
    2f74:	000245c0 	andeq	r4, r2, r0, asr #11
    2f78:	000000fc 	strdeq	r0, [r0], -ip
    2f7c:	00001e74 	andeq	r1, r0, r4, ror lr
    2f80:	de070801 	cdple	8, 0, cr0, cr7, cr1, {0}
    2f84:	01000006 	tsteq	r0, r6
    2f88:	06e80704 	strbteq	r0, [r8], r4, lsl #14
    2f8c:	04070000 	streq	r0, [r7], #-0
    2f90:	746e6905 	strbtvc	r6, [lr], #-2309	@ 0xfffff6fb
    2f94:	03b70800 			@ <UNDEFINED> instruction: 0x03b70800
    2f98:	d6020000 	strle	r0, [r2], -r0
    2f9c:	00002d17 	andeq	r2, r0, r7, lsl sp
    2fa0:	05080100 	streq	r0, [r8, #-256]	@ 0xffffff00
    2fa4:	0000016b 	andeq	r0, r0, fp, ror #2
    2fa8:	f7040801 			@ <UNDEFINED> instruction: 0xf7040801
    2fac:	01000001 	tsteq	r0, r1
    2fb0:	06f70601 	ldrbteq	r0, [r7], r1, lsl #12
    2fb4:	01010000 	mrseq	r0, (UNDEF: 1)
    2fb8:	0006f508 	andeq	pc, r6, r8, lsl #10
    2fbc:	05020100 	streq	r0, [r2, #-256]	@ 0xffffff00
    2fc0:	0000076f 	andeq	r0, r0, pc, ror #14
    2fc4:	d3070201 	movwle	r0, #29185	@ 0x7201
    2fc8:	01000000 	mrseq	r0, (UNDEF: 0)
    2fcc:	01700504 	cmneq	r0, r4, lsl #10
    2fd0:	04010000 	streq	r0, [r1], #-0
    2fd4:	0006e307 	andeq	lr, r6, r7, lsl #6
    2fd8:	03040900 	movweq	r0, #18688	@ 0x4900
    2fdc:	00000086 	andeq	r0, r0, r6, lsl #1
    2fe0:	fe080101 	cdp2	1, 0, cr0, cr8, cr1, {0}
    2fe4:	0a000006 	beq	3004 <_start-0xcffc>
    2fe8:	0000102d 	andeq	r1, r0, sp, lsr #32
    2fec:	7f092103 	svcvc	0x00092103
    2ff0:	c0000000 	andgt	r0, r0, r0
    2ff4:	fc000245 	stc2	2, cr0, [r0], {69}	@ 0x45
    2ff8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ffc:	00012f9c 	muleq	r1, ip, pc	@ <UNPREDICTABLE>
    3000:	006d0b00 	rsbeq	r0, sp, r0, lsl #22
    3004:	7f0f2601 	svcvc	0x000f2601
    3008:	01000000 	mrseq	r0, (UNDEF: 0)
    300c:	00630450 	rsbeq	r0, r3, r0, asr r4
    3010:	00340627 	eorseq	r0, r4, r7, lsr #12
    3014:	01310000 	teqeq	r1, r0
    3018:	012b0000 			@ <UNDEFINED> instruction: 0x012b0000
    301c:	6e040000 	cdpvs	0, 0, cr0, cr4, cr0, {0}
    3020:	3b092800 	blcc	24d028 <__bss_end+0x227428>
    3024:	5f000000 	svcpl	0x00000000
    3028:	4f000001 	svcmi	0x00000001
    302c:	02000001 	andeq	r0, r0, #1
    3030:	092a0073 	stmdbeq	sl!, {r0, r1, r4, r5, r6}
    3034:	00000081 	andeq	r0, r0, r1, lsl #1
    3038:	000001a6 	andeq	r0, r0, r6, lsr #3
    303c:	00000192 	muleq	r0, r2, r1
    3040:	2d006902 	vstrcs.16	s12, [r0, #-4]	@ <UNPREDICTABLE>
    3044:	00002d10 	andeq	r2, r0, r0, lsl sp
    3048:	0001f000 	andeq	pc, r1, r0
    304c:	0001ea00 	andeq	lr, r1, r0, lsl #20
    3050:	17540500 	ldrbne	r0, [r4, -r0, lsl #10]
    3054:	112e0000 			@ <UNDEFINED> instruction: 0x112e0000
    3058:	00000078 	andeq	r0, r0, r8, ror r0
    305c:	00000213 	andeq	r0, r0, r3, lsl r2
    3060:	0000020b 	andeq	r0, r0, fp, lsl #4
    3064:	00172205 	andseq	r2, r7, r5, lsl #4
    3068:	2f122f00 	svccs	0x00122f00
    306c:	4e000001 	cdpmi	0, 0, cr0, cr0, cr1, {0}
    3070:	36000002 	strcc	r0, [r0], -r2
    3074:	02000002 	andeq	r0, r0, #2
    3078:	10300064 	eorsne	r0, r0, r4, rrx
    307c:	0000002d 	andeq	r0, r0, sp, lsr #32
    3080:	000002ae 	andeq	r0, r0, lr, lsr #5
    3084:	000002a4 	andeq	r0, r0, r4, lsr #5
    3088:	00780300 	rsbseq	r0, r8, r0, lsl #6
    308c:	4e000000 	cdpmi	0, 0, cr0, cr0, cr0, {0}
    3090:	05000001 	streq	r0, [r0, #-1]
    3094:	17040100 	strne	r0, [r4, -r0, lsl #2]
    3098:	08000011 	stmdaeq	r0, {r0, r4}
    309c:	000016c2 	andeq	r1, r0, r2, asr #13
    30a0:	0017601d 	andseq	r6, r7, sp, lsl r0
    30a4:	00167c00 	andseq	r7, r6, r0, lsl #24
    30a8:	0246bc00 	subeq	fp, r6, #0, 24
    30ac:	00011400 	andeq	r1, r1, r0, lsl #8
    30b0:	00202d00 	eoreq	r2, r0, r0, lsl #26
    30b4:	07080100 	streq	r0, [r8, -r0, lsl #2]
    30b8:	000006de 	ldrdeq	r0, [r0], -lr
    30bc:	e8070401 	stmda	r7, {r0, sl}
    30c0:	09000006 	stmdbeq	r0, {r1, r2}
    30c4:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    30c8:	b70a0074 	smlsdxlt	sl, r4, r0, r0
    30cc:	03000003 	movweq	r0, #3
    30d0:	002d17d6 	ldrdeq	r1, [sp], -r6	@ <UNPREDICTABLE>
    30d4:	08010000 	stmdaeq	r1, {}	@ <UNPREDICTABLE>
    30d8:	00016b05 	andeq	r6, r1, r5, lsl #22
    30dc:	04080100 	streq	r0, [r8], #-256	@ 0xffffff00
    30e0:	000001f7 	strdeq	r0, [r0], -r7
    30e4:	f7060101 			@ <UNDEFINED> instruction: 0xf7060101
    30e8:	01000006 	tsteq	r0, r6
    30ec:	06f50801 	ldrbteq	r0, [r5], r1, lsl #16
    30f0:	02010000 	andeq	r0, r1, #0
    30f4:	00076f05 	andeq	r6, r7, r5, lsl #30
    30f8:	07020100 	streq	r0, [r2, -r0, lsl #2]
    30fc:	000000d3 	ldrdeq	r0, [r0], -r3
    3100:	70050401 	andvc	r0, r5, r1, lsl #8
    3104:	03000001 	movweq	r0, #1
    3108:	00000071 	andeq	r0, r0, r1, ror r0
    310c:	e3070401 	movw	r0, #29697	@ 0x7401
    3110:	0b000006 	bleq	3130 <_start-0xced0>
    3114:	00840404 	addeq	r0, r4, r4, lsl #8
    3118:	90020000 	andls	r0, r2, r0
    311c:	01000000 	mrseq	r0, (UNDEF: 0)
    3120:	06fe0801 	ldrbteq	r0, [lr], r1, lsl #16
    3124:	90030000 	andls	r0, r3, r0
    3128:	02000000 	andeq	r0, r0, #0
    312c:	00000097 	muleq	r0, r7, r0
    3130:	0000ab02 	andeq	sl, r0, r2, lsl #22
    3134:	00a10400 	adceq	r0, r1, r0, lsl #8
    3138:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    313c:	0000089e 	muleq	r0, lr, r8
    3140:	84091f04 	strhi	r1, [r9], #-3844	@ 0xfffff0fc
    3144:	bc000000 	stclt	0, cr0, [r0], {-0}
    3148:	14000246 	strne	r0, [r0], #-582	@ 0xfffffdba
    314c:	01000001 	tsteq	r0, r1
    3150:	0001479c 	muleq	r1, ip, r7
    3154:	16330e00 	ldrtne	r0, [r3], -r0, lsl #28
    3158:	31020000 	mrscc	r0, (UNDEF: 2)
    315c:	0000861a 	andeq	r8, r0, sl, lsl r6
    3160:	05500100 	ldrbeq	r0, [r0, #-256]	@ 0xffffff00
    3164:	0000162e 	andeq	r1, r0, lr, lsr #12
    3168:	00a61932 	adceq	r1, r6, r2, lsr r9
    316c:	02fc0000 	rscseq	r0, ip, #0
    3170:	02f40000 	rscseq	r0, r4, #0
    3174:	5b050000 	blpl	14317c <__bss_end+0x11d57c>
    3178:	33000017 	movwcc	r0, #23
    317c:	00003b09 	andeq	r3, r0, r9, lsl #22
    3180:	00033000 	andeq	r3, r3, r0
    3184:	00032600 	andeq	r2, r3, r0, lsl #12
    3188:	73640600 	cmnvc	r4, #0, 12
    318c:	09420074 	stmdbeq	r2, {r2, r4, r5, r6}^
    3190:	0000008b 	andeq	r0, r0, fp, lsl #1
    3194:	00000368 	andeq	r0, r0, r8, ror #6
    3198:	0000035e 	andeq	r0, r0, lr, asr r3
    319c:	63727306 	cmnvs	r2, #402653184	@ 0x18000000
    31a0:	9c0f4300 	stcls	3, cr4, [pc], {-0}
    31a4:	93000000 	movwls	r0, #0
    31a8:	85000003 	strhi	r0, [r0, #-3]
    31ac:	07000003 	streq	r0, [r0, -r3]
    31b0:	00001638 	andeq	r1, r0, r8, lsr r6
    31b4:	01470944 	cmpeq	r7, r4, asr #18
    31b8:	03d50000 	bicseq	r0, r5, #0
    31bc:	03cd0000 	biceq	r0, sp, #0
    31c0:	70070000 	andvc	r0, r7, r0
    31c4:	45000016 	strmi	r0, [r0, #-22]	@ 0xffffffea
    31c8:	00014c0f 	andeq	r4, r1, pc, lsl #24
    31cc:	00040500 	andeq	r0, r4, r0, lsl #10
    31d0:	0003f300 	andeq	pc, r3, r0, lsl #6
    31d4:	71020000 	mrsvc	r0, (UNDEF: 2)
    31d8:	02000000 	andeq	r0, r0, #0
    31dc:	00000078 	andeq	r0, r0, r8, ror r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	03000d01 	movweq	r0, #3329	@ 0xd01
       4:	01213a08 			@ <UNDEFINED> instruction: 0x01213a08
       8:	21390b3b 	teqcs	r9, fp, lsr fp
       c:	38134910 	ldmdacc	r3, {r4, r8, fp, lr}
      10:	0200000b 	andeq	r0, r0, #11
      14:	0b0b0024 	bleq	2c00ac <__bss_end+0x29a4ac>
      18:	0e030b3e 	vmoveq.16	d3[0], r0
      1c:	05030000 	streq	r0, [r3, #-0]
      20:	00134900 	andseq	r4, r3, r0, lsl #18
      24:	00050400 	andeq	r0, r5, r0, lsl #8
      28:	213a0e03 	teqcs	sl, r3, lsl #28
      2c:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
      30:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
      34:	05000018 	streq	r0, [r0, #-24]	@ 0xffffffe8
      38:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
      3c:	0b3b0b3a 	bleq	ec2d2c <__bss_end+0xe9d12c>
      40:	13490b39 	movtne	r0, #39737	@ 0x9b39
      44:	0f060000 	svceq	0x00060000
      48:	04210b00 	strteq	r0, [r1], #-2816	@ 0xfffff500
      4c:	00001349 	andeq	r1, r0, r9, asr #6
      50:	03003407 	movweq	r3, #1031	@ 0x407
      54:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
      58:	0b390b3b 	bleq	e42d4c <__bss_end+0xe1d14c>
      5c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
      60:	2e080000 	cdpcs	0, 0, cr0, cr8, cr0, {0}
      64:	03193f00 	tsteq	r9, #0, 30
      68:	3b0b3a0e 	blcc	2ce8a8 <__bss_end+0x2a8ca8>
      6c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
      70:	00193c19 	andseq	r3, r9, r9, lsl ip
      74:	00260900 	eoreq	r0, r6, r0, lsl #18
      78:	00001349 	andeq	r1, r0, r9, asr #6
      7c:	2701150a 	strcs	r1, [r1, -sl, lsl #10]
      80:	00130119 	andseq	r0, r3, r9, lsl r1
      84:	012e0b00 			@ <UNDEFINED> instruction: 0x012e0b00
      88:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
      8c:	3b04213a 	blcc	10857c <__bss_end+0xe297c>
      90:	0621390b 	strteq	r3, [r1], -fp, lsl #18
      94:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
      98:	00001301 	andeq	r1, r0, r1, lsl #6
      9c:	3f002e0c 	svccc	0x00002e0c
      a0:	3a0e0319 	bcc	380d0c <__bss_end+0x35b10c>
      a4:	053b0521 	ldreq	r0, [fp, #-1313]!	@ 0xfffffadf
      a8:	27062139 	smladxcs	r6, r9, r1, r2
      ac:	00193c19 	andseq	r3, r9, r9, lsl ip
      b0:	01110d00 	tsteq	r1, r0, lsl #26
      b4:	0b130e25 	bleq	4c3950 <__bss_end+0x49dd50>
      b8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
      bc:	06120111 			@ <UNDEFINED> instruction: 0x06120111
      c0:	00001710 	andeq	r1, r0, r0, lsl r7
      c4:	0b00240e 	bleq	9104 <_start-0x6efc>
      c8:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
      cc:	0f000008 	svceq	0x00000008
      d0:	0b0b000f 	bleq	2c0114 <__bss_end+0x29a514>
      d4:	13100000 	tstne	r0, #0
      d8:	0b0e0301 	bleq	380ce4 <__bss_end+0x35b0e4>
      dc:	3b0b3a0b 	blcc	2ce910 <__bss_end+0x2a8d10>
      e0:	010b390b 	tsteq	fp, fp, lsl #18
      e4:	11000013 	tstne	r0, r3, lsl r0
      e8:	13490035 	movtne	r0, #36917	@ 0x9035
      ec:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
      f0:	3a0e0301 	bcc	380cfc <__bss_end+0x35b0fc>
      f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      f8:	1119270b 	tstne	r9, fp, lsl #14
      fc:	40061201 	andmi	r1, r6, r1, lsl #4
     100:	01197c18 	tsteq	r9, r8, lsl ip
     104:	13000013 	movwne	r0, #19
     108:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     10c:	0b3a0e03 	bleq	e83920 <__bss_end+0xe5dd20>
     110:	0b390b3b 	bleq	e42e04 <__bss_end+0xe1d204>
     114:	01111927 	tsteq	r1, r7, lsr #18
     118:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     11c:	1301197c 	movwne	r1, #6524	@ 0x197c
     120:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     124:	03193f00 	tsteq	r9, #0, 30
     128:	3b0b3a0e 	blcc	2ce968 <__bss_end+0x2a8d68>
     12c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     130:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     134:	7a184006 	bvc	610154 <__bss_end+0x5ea554>
     138:	15000019 	strne	r0, [r0, #-25]	@ 0xffffffe7
     13c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	@ <UNPREDICTABLE>
     140:	0b3a0e03 	bleq	e83954 <__bss_end+0xe5dd54>
     144:	0b390b3b 	bleq	e42e38 <__bss_end+0xe1d238>
     148:	13491927 	movtne	r1, #39207	@ 0x9927
     14c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     150:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     154:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     158:	03193f01 	tsteq	r9, #1, 30
     15c:	3b0b3a0e 	blcc	2ce99c <__bss_end+0x2a8d9c>
     160:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     164:	11134919 	tstne	r3, r9, lsl r9
     168:	40061201 	andmi	r1, r6, r1, lsl #4
     16c:	00197a18 	andseq	r7, r9, r8, lsl sl
     170:	34010000 	strcc	r0, [r1], #-0
     174:	3a0e0300 	bcc	380d7c <__bss_end+0x35b17c>
     178:	0b3b0121 	bleq	ec0604 <__bss_end+0xe9aa04>
     17c:	49022139 	stmdbmi	r2, {r0, r3, r4, r5, r8, sp}
     180:	3c193f13 	ldccc	15, cr3, [r9], {19}
     184:	02000019 	andeq	r0, r0, #25
     188:	0b0b0024 	bleq	2c0220 <__bss_end+0x29a620>
     18c:	0e030b3e 	vmoveq.16	d3[0], r0
     190:	0b030000 	bleq	c0198 <__bss_end+0x9a598>
     194:	12011101 	andne	r1, r1, #1073741824	@ 0x40000000
     198:	04000006 	streq	r0, [r0], #-6
     19c:	13490035 	movtne	r0, #36917	@ 0x9035
     1a0:	34050000 	strcc	r0, [r5], #-0
     1a4:	3a0e0300 	bcc	380dac <__bss_end+0x35b1ac>
     1a8:	0b3b0121 	bleq	ec0634 <__bss_end+0xe9aa34>
     1ac:	13490b39 	movtne	r0, #39737	@ 0x9b39
     1b0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1b4:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     1b8:	03193f00 	tsteq	r9, #0, 30
     1bc:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     1c0:	21390b3b 	teqcs	r9, fp, lsr fp
     1c4:	11192706 	tstne	r9, r6, lsl #14
     1c8:	40061201 	andmi	r1, r6, r1, lsl #4
     1cc:	00197a18 	andseq	r7, r9, r8, lsl sl
     1d0:	010b0700 	tsteq	fp, r0, lsl #14
     1d4:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     1d8:	00001301 	andeq	r1, r0, r1, lsl #6
     1dc:	25011108 	strcs	r1, [r1, #-264]	@ 0xfffffef8
     1e0:	030b130e 	movweq	r1, #45838	@ 0xb30e
     1e4:	110e1b0e 	tstne	lr, lr, lsl #22
     1e8:	10061201 	andne	r1, r6, r1, lsl #4
     1ec:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
     1f0:	0b0b0024 	bleq	2c0288 <__bss_end+0x29a688>
     1f4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     1f8:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     1fc:	03193f00 	tsteq	r9, #0, 30
     200:	3b0b3a0e 	blcc	2cea40 <__bss_end+0x2a8e40>
     204:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     208:	00193c19 	andseq	r3, r9, r9, lsl ip
     20c:	012e0b00 			@ <UNDEFINED> instruction: 0x012e0b00
     210:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     214:	0b3b0b3a 	bleq	ec2f04 <__bss_end+0xe9d304>
     218:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     21c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     220:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     224:	00001301 	andeq	r1, r0, r1, lsl #6
     228:	0b000f0c 	bleq	3e60 <_start-0xc1a0>
     22c:	0013490b 	andseq	r4, r3, fp, lsl #18
     230:	00350d00 	eorseq	r0, r5, r0, lsl #26
     234:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
     238:	03193f01 	tsteq	r9, #1, 30
     23c:	3b0b3a0e 	blcc	2cea7c <__bss_end+0x2a8e7c>
     240:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     244:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     248:	7a184006 	bvc	610268 <__bss_end+0x5ea668>
     24c:	00130119 	andseq	r0, r3, r9, lsl r1
     250:	012e0f00 			@ <UNDEFINED> instruction: 0x012e0f00
     254:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     258:	0b3b0b3a 	bleq	ec2f48 <__bss_end+0xe9d348>
     25c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     260:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     264:	197a1840 	ldmdbne	sl!, {r6, fp, ip}^
     268:	01000000 	mrseq	r0, (UNDEF: 0)
     26c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     270:	0b3b0b3a 	bleq	ec2f60 <__bss_end+0xe9d360>
     274:	13490b39 	movtne	r0, #39737	@ 0x9b39
     278:	00000b38 	andeq	r0, r0, r8, lsr fp
     27c:	03003402 	movweq	r3, #1026	@ 0x402
     280:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     284:	0b390b3b 	bleq	e42f78 <__bss_end+0xe1d378>
     288:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     28c:	05030000 	streq	r0, [r3, #-0]
     290:	00134900 	andseq	r4, r3, r0, lsl #18
     294:	00160400 	andseq	r0, r6, r0, lsl #8
     298:	0b3a0e03 	bleq	e83aac <__bss_end+0xe5deac>
     29c:	0b390b3b 	bleq	e42f90 <__bss_end+0xe1d390>
     2a0:	00001349 	andeq	r1, r0, r9, asr #6
     2a4:	0b002405 	bleq	92c0 <_start-0x6d40>
     2a8:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
     2ac:	0600000e 	streq	r0, [r0], -lr
     2b0:	210b000f 	tstcs	fp, pc
     2b4:	00134904 	andseq	r4, r3, r4, lsl #18
     2b8:	00340700 	eorseq	r0, r4, r0, lsl #14
     2bc:	213a0e03 	teqcs	sl, r3, lsl #28
     2c0:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
     2c4:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     2c8:	08000018 	stmdaeq	r0, {r3, r4}
     2cc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     2d0:	213a0e03 	teqcs	sl, r3, lsl #28
     2d4:	39053b04 	stmdbcc	r5, {r2, r8, r9, fp, ip, sp}
     2d8:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
     2dc:	1301193c 	movwne	r1, #6460	@ 0x193c
     2e0:	05090000 	streq	r0, [r9, #-0]
     2e4:	3a0e0300 	bcc	380eec <__bss_end+0x35b2ec>
     2e8:	0b3b0121 	bleq	ec0774 <__bss_end+0xe9ab74>
     2ec:	13490b39 	movtne	r0, #39737	@ 0x9b39
     2f0:	00001802 	andeq	r1, r0, r2, lsl #16
     2f4:	4900350a 	stmdbmi	r0, {r1, r3, r8, sl, ip, sp}
     2f8:	0b000013 	bleq	34c <_start-0xfcb4>
     2fc:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     300:	0b3a0b0b 	bleq	e82f34 <__bss_end+0xe5d334>
     304:	0b390b3b 	bleq	e42ff8 <__bss_end+0xe1d3f8>
     308:	00001301 	andeq	r1, r0, r1, lsl #6
     30c:	11010b0c 	tstne	r1, ip, lsl #22
     310:	00061201 	andeq	r1, r6, r1, lsl #4
     314:	00260d00 	eoreq	r0, r6, r0, lsl #26
     318:	00001349 	andeq	r1, r0, r9, asr #6
     31c:	03012e0e 	movweq	r2, #7694	@ 0x1e0e
     320:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     324:	2139053b 	teqcs	r9, fp, lsr r5
     328:	1119270d 	tstne	r9, sp, lsl #14
     32c:	40061201 	andmi	r1, r6, r1, lsl #4
     330:	01197c18 	tsteq	r9, r8, lsl ip
     334:	0f000013 	svceq	0x00000013
     338:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     33c:	0e030b13 	vmoveq.32	d3[0], r0
     340:	01110e1b 	tsteq	r1, fp, lsl lr
     344:	17100612 			@ <UNDEFINED> instruction: 0x17100612
     348:	24100000 	ldrcs	r0, [r0], #-0
     34c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     350:	0008030b 	andeq	r0, r8, fp, lsl #6
     354:	000f1100 	andeq	r1, pc, r0, lsl #2
     358:	00000b0b 	andeq	r0, r0, fp, lsl #22
     35c:	27011512 	smladcs	r1, r2, r5, r1
     360:	00130119 	andseq	r0, r3, r9, lsl r1
     364:	01011300 	mrseq	r1, SP_irq
     368:	13011349 	movwne	r1, #4937	@ 0x1349
     36c:	21140000 	tstcs	r4, r0
     370:	2f134900 	svccs	0x00134900
     374:	1500000b 	strne	r0, [r0, #-11]
     378:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     37c:	0b3b0b3a 	bleq	ec306c <__bss_end+0xe9d46c>
     380:	13490b39 	movtne	r0, #39737	@ 0x9b39
     384:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     388:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     38c:	03193f00 	tsteq	r9, #0, 30
     390:	3b0b3a0e 	blcc	2cebd0 <__bss_end+0x2a8fd0>
     394:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     398:	3c134919 			@ <UNDEFINED> instruction: 0x3c134919
     39c:	17000019 	smladne	r0, r9, r0, r0
     3a0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     3a4:	0b3a0e03 	bleq	e83bb8 <__bss_end+0xe5dfb8>
     3a8:	0b39053b 	bleq	e4189c <__bss_end+0xe1bc9c>
     3ac:	13491927 	movtne	r1, #39207	@ 0x9927
     3b0:	1301193c 	movwne	r1, #6460	@ 0x193c
     3b4:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     3b8:	03193f01 	tsteq	r9, #1, 30
     3bc:	3b0b3a0e 	blcc	2cebfc <__bss_end+0x2a8ffc>
     3c0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     3c4:	11134919 	tstne	r3, r9, lsl r9
     3c8:	40061201 	andmi	r1, r6, r1, lsl #4
     3cc:	01197c18 	tsteq	r9, r8, lsl ip
     3d0:	19000013 	stmdbne	r0, {r0, r1, r4}
     3d4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     3d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     3dc:	13490b39 	movtne	r0, #39737	@ 0x9b39
     3e0:	00001802 	andeq	r1, r0, r2, lsl #16
     3e4:	3f012e1a 	svccc	0x00012e1a
     3e8:	3a0e0319 	bcc	381054 <__bss_end+0x35b454>
     3ec:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     3f0:	1119270b 	tstne	r9, fp, lsl #14
     3f4:	40061201 	andmi	r1, r6, r1, lsl #4
     3f8:	01197c18 	tsteq	r9, r8, lsl ip
     3fc:	1b000013 	blne	450 <_start-0xfbb0>
     400:	0e03012e 	adfeqsp	f0, f3, #0.5
     404:	0b3b0b3a 	bleq	ec30f4 <__bss_end+0xe9d4f4>
     408:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     40c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     410:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     414:	00001301 	andeq	r1, r0, r1, lsl #6
     418:	3f012e1c 	svccc	0x00012e1c
     41c:	3a0e0319 	bcc	381088 <__bss_end+0x35b488>
     420:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     424:	1119270b 	tstne	r9, fp, lsl #14
     428:	40061201 	andmi	r1, r6, r1, lsl #4
     42c:	01197c18 	tsteq	r9, r8, lsl ip
     430:	1d000013 	stcne	0, cr0, [r0, #-76]	@ 0xffffffb4
     434:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     438:	0b3a0e03 	bleq	e83c4c <__bss_end+0xe5e04c>
     43c:	0b390b3b 	bleq	e43130 <__bss_end+0xe1d530>
     440:	13491927 	movtne	r1, #39207	@ 0x9927
     444:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     448:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     44c:	01000000 	mrseq	r0, (UNDEF: 0)
     450:	0b0b0024 	bleq	2c04e8 <__bss_end+0x29a8e8>
     454:	0e030b3e 	vmoveq.16	d3[0], r0
     458:	0d020000 	stceq	0, cr0, [r2, #-0]
     45c:	3a0e0300 	bcc	381064 <__bss_end+0x35b464>
     460:	0b3b0221 	bleq	ec0cec <__bss_end+0xe9b0ec>
     464:	13490b39 	movtne	r0, #39737	@ 0x9b39
     468:	00000b38 	andeq	r0, r0, r8, lsr fp
     46c:	03000503 	movweq	r0, #1283	@ 0x503
     470:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     474:	0b390b3b 	bleq	e43168 <__bss_end+0xe1d568>
     478:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     47c:	35040000 	strcc	r0, [r4, #-0]
     480:	00134900 	andseq	r4, r3, r0, lsl #18
     484:	00160500 	andseq	r0, r6, r0, lsl #10
     488:	0b3a0e03 	bleq	e83c9c <__bss_end+0xe5e09c>
     48c:	0b390b3b 	bleq	e43180 <__bss_end+0xe1d580>
     490:	00001349 	andeq	r1, r0, r9, asr #6
     494:	0b000f06 	bleq	40b4 <_start-0xbf4c>
     498:	13490421 	movtne	r0, #37921	@ 0x9421
     49c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     4a0:	03193f01 	tsteq	r9, #1, 30
     4a4:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     4a8:	21390b3b 	teqcs	r9, fp, lsr fp
     4ac:	11192706 	tstne	r9, r6, lsl #14
     4b0:	40061201 	andmi	r1, r6, r1, lsl #4
     4b4:	01197a18 	tsteq	r9, r8, lsl sl
     4b8:	08000013 	stmdaeq	r0, {r0, r1, r4}
     4bc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     4c0:	3b01213a 	blcc	489b0 <__bss_end+0x22db0>
     4c4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     4c8:	00180213 	andseq	r0, r8, r3, lsl r2
     4cc:	01130900 	tsteq	r3, r0, lsl #18
     4d0:	0b0b0e03 	bleq	2c3ce4 <__bss_end+0x29e0e4>
     4d4:	3b02213a 	blcc	889c4 <__bss_end+0x62dc4>
     4d8:	010b390b 	tsteq	fp, fp, lsl #18
     4dc:	0a000013 	beq	530 <_start-0xfad0>
     4e0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     4e4:	0e030b13 	vmoveq.32	d3[0], r0
     4e8:	01110e1b 	tsteq	r1, fp, lsl lr
     4ec:	17100612 			@ <UNDEFINED> instruction: 0x17100612
     4f0:	240b0000 	strcs	r0, [fp], #-0
     4f4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     4f8:	0008030b 	andeq	r0, r8, fp, lsl #6
     4fc:	000f0c00 	andeq	r0, pc, r0, lsl #24
     500:	00000b0b 	andeq	r0, r0, fp, lsl #22
     504:	3f012e0d 	svccc	0x00012e0d
     508:	3a0e0319 	bcc	381174 <__bss_end+0x35b574>
     50c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     510:	1119270b 	tstne	r9, fp, lsl #14
     514:	40061201 	andmi	r1, r6, r1, lsl #4
     518:	00197a18 	andseq	r7, r9, r8, lsl sl
     51c:	05010000 	streq	r0, [r1, #-0]
     520:	3a0e0300 	bcc	381128 <__bss_end+0x35b528>
     524:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     528:	13490b39 	movtne	r0, #39737	@ 0x9b39
     52c:	00001802 	andeq	r1, r0, r2, lsl #16
     530:	03000d02 	movweq	r0, #3330	@ 0xd02
     534:	3b0b3a0e 	blcc	2ced74 <__bss_end+0x2a9174>
     538:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     53c:	000b3813 	andeq	r3, fp, r3, lsl r8
     540:	00340300 	eorseq	r0, r4, r0, lsl #6
     544:	213a0e03 	teqcs	sl, r3, lsl #28
     548:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
     54c:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     550:	04000018 	streq	r0, [r0], #-24	@ 0xffffffe8
     554:	13490005 	movtne	r0, #36869	@ 0x9005
     558:	24050000 	strcs	r0, [r5], #-0
     55c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     560:	000e030b 	andeq	r0, lr, fp, lsl #6
     564:	000f0600 	andeq	r0, pc, r0, lsl #12
     568:	4904210b 	stmdbmi	r4, {r0, r1, r3, r8, sp}
     56c:	07000013 	smladeq	r0, r3, r0, r0
     570:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     574:	0b3b0b3a 	bleq	ec3264 <__bss_end+0xe9d664>
     578:	13490b39 	movtne	r0, #39737	@ 0x9b39
     57c:	26080000 	strcs	r0, [r8], -r0
     580:	00134900 	andseq	r4, r3, r0, lsl #18
     584:	012e0900 			@ <UNDEFINED> instruction: 0x012e0900
     588:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     58c:	3b01213a 	blcc	48a7c <__bss_end+0x22e7c>
     590:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     594:	11134919 	tstne	r3, r9, lsl r9
     598:	40061201 	andmi	r1, r6, r1, lsl #4
     59c:	01197c18 	tsteq	r9, r8, lsl ip
     5a0:	0a000013 	beq	5f4 <_start-0xfa0c>
     5a4:	13490035 	movtne	r0, #36917	@ 0x9035
     5a8:	130b0000 	movwne	r0, #45056	@ 0xb000
     5ac:	0b0e0301 	bleq	3811b8 <__bss_end+0x35b5b8>
     5b0:	3b0b3a0b 	blcc	2cede4 <__bss_end+0x2a91e4>
     5b4:	010b390b 	tsteq	fp, fp, lsl #18
     5b8:	0c000013 	stceq	0, cr0, [r0], {19}
     5bc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     5c0:	0b3a0e03 	bleq	e83dd4 <__bss_end+0xe5e1d4>
     5c4:	2139053b 	teqcs	r9, fp, lsr r5
     5c8:	3c192706 	ldccc	7, cr2, [r9], {6}
     5cc:	00130119 	andseq	r0, r3, r9, lsl r1
     5d0:	012e0d00 			@ <UNDEFINED> instruction: 0x012e0d00
     5d4:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     5d8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     5dc:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     5e0:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     5e4:	00001301 	andeq	r1, r0, r1, lsl #6
     5e8:	3f012e0e 	svccc	0x00012e0e
     5ec:	3a0e0319 	bcc	381258 <__bss_end+0x35b658>
     5f0:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     5f4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     5f8:	01111349 	tsteq	r1, r9, asr #6
     5fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     600:	1301197a 	movwne	r1, #6522	@ 0x197a
     604:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     608:	3a0e0301 	bcc	381214 <__bss_end+0x35b614>
     60c:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     610:	270d2139 	smladxcs	sp, r9, r1, r2
     614:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     618:	7c184006 	ldcvc	0, cr4, [r8], {6}
     61c:	00130119 	andseq	r0, r3, r9, lsl r1
     620:	002e1000 	eoreq	r1, lr, r0
     624:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     628:	3b05213a 	blcc	148b18 <__bss_end+0x122f18>
     62c:	06213905 	strteq	r3, [r1], -r5, lsl #18
     630:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     634:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     638:	03193f00 	tsteq	r9, #0, 30
     63c:	03213a0e 			@ <UNDEFINED> instruction: 0x03213a0e
     640:	21390b3b 	teqcs	r9, fp, lsr fp
     644:	3c19270d 	ldccc	7, cr2, [r9], {13}
     648:	12000019 	andne	r0, r0, #25
     64c:	0e03012e 	adfeqsp	f0, f3, #0.5
     650:	3b01213a 	blcc	48b40 <__bss_end+0x22f40>
     654:	1d213905 			@ <UNDEFINED> instruction: 0x1d213905
     658:	13491927 	movtne	r1, #39207	@ 0x9927
     65c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     660:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     664:	00001301 	andeq	r1, r0, r1, lsl #6
     668:	25011113 	strcs	r1, [r1, #-275]	@ 0xfffffeed
     66c:	030b130e 	movweq	r1, #45838	@ 0xb30e
     670:	110e1b0e 	tstne	lr, lr, lsl #22
     674:	10061201 	andne	r1, r6, r1, lsl #4
     678:	14000017 	strne	r0, [r0], #-23	@ 0xffffffe9
     67c:	0b0b0024 	bleq	2c0714 <__bss_end+0x29ab14>
     680:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     684:	0f150000 	svceq	0x00150000
     688:	000b0b00 	andeq	r0, fp, r0, lsl #22
     68c:	00261600 	eoreq	r1, r6, r0, lsl #12
     690:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     694:	03193f01 	tsteq	r9, #1, 30
     698:	3b0b3a0e 	blcc	2ceed8 <__bss_end+0x2a92d8>
     69c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     6a0:	3c134919 			@ <UNDEFINED> instruction: 0x3c134919
     6a4:	00130119 	andseq	r0, r3, r9, lsl r1
     6a8:	002e1800 	eoreq	r1, lr, r0, lsl #16
     6ac:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     6b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     6b4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     6b8:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     6bc:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     6c0:	03193f01 	tsteq	r9, #1, 30
     6c4:	3b0b3a0e 	blcc	2cef04 <__bss_end+0x2a9304>
     6c8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     6cc:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     6d0:	7c184006 	ldcvc	0, cr4, [r8], {6}
     6d4:	00130119 	andseq	r0, r3, r9, lsl r1
     6d8:	012e1a00 			@ <UNDEFINED> instruction: 0x012e1a00
     6dc:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     6e0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     6e4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     6e8:	01111349 	tsteq	r1, r9, asr #6
     6ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     6f0:	0000197c 	andeq	r1, r0, ip, ror r9
     6f4:	00340100 	eorseq	r0, r4, r0, lsl #2
     6f8:	213a0e03 	teqcs	sl, r3, lsl #28
     6fc:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
     700:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     704:	02000018 	andeq	r0, r0, #24
     708:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     70c:	3b01213a 	blcc	48bfc <__bss_end+0x22ffc>
     710:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     714:	00180213 	andseq	r0, r8, r3, lsl r2
     718:	000d0300 	andeq	r0, sp, r0, lsl #6
     71c:	0b3a0e03 	bleq	e83f30 <__bss_end+0xe5e330>
     720:	0b390b3b 	bleq	e43414 <__bss_end+0xe1d814>
     724:	0b381349 	bleq	e05450 <__bss_end+0xddf850>
     728:	05040000 	streq	r0, [r4, #-0]
     72c:	00134900 	andseq	r4, r3, r0, lsl #18
     730:	00340500 	eorseq	r0, r4, r0, lsl #10
     734:	213a0e03 	teqcs	sl, r3, lsl #28
     738:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     73c:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     740:	06000018 			@ <UNDEFINED> instruction: 0x06000018
     744:	210b000f 	tstcs	fp, pc
     748:	00134904 	andseq	r4, r3, r4, lsl #18
     74c:	00260700 	eoreq	r0, r6, r0, lsl #14
     750:	00001349 	andeq	r1, r0, r9, asr #6
     754:	0b002408 	bleq	977c <_start-0x6884>
     758:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
     75c:	0900000e 	stmdbeq	r0, {r1, r2, r3}
     760:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     764:	0b3b0b3a 	bleq	ec3454 <__bss_end+0xe9d854>
     768:	13490b39 	movtne	r0, #39737	@ 0x9b39
     76c:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     770:	03193f01 	tsteq	r9, #1, 30
     774:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     778:	0b39053b 	bleq	e41c6c <__bss_end+0xe1c06c>
     77c:	01111927 	tsteq	r1, r7, lsr #18
     780:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     784:	1301197c 	movwne	r1, #6524	@ 0x197c
     788:	2e0b0000 	cdpcs	0, 0, cr0, cr11, cr0, {0}
     78c:	03193f01 	tsteq	r9, #1, 30
     790:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     794:	0b39053b 	bleq	e41c88 <__bss_end+0xe1c088>
     798:	13491927 	movtne	r1, #39207	@ 0x9927
     79c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     7a0:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     7a4:	00001301 	andeq	r1, r0, r1, lsl #6
     7a8:	4900350c 	stmdbmi	r0, {r2, r3, r8, sl, ip, sp}
     7ac:	0d000013 	stceq	0, cr0, [r0, #-76]	@ 0xffffffb4
     7b0:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     7b4:	0b3a0b0b 	bleq	e833e8 <__bss_end+0xe5d7e8>
     7b8:	0b390b3b 	bleq	e434ac <__bss_end+0xe1d8ac>
     7bc:	00001301 	andeq	r1, r0, r1, lsl #6
     7c0:	3f012e0e 	svccc	0x00012e0e
     7c4:	3a0e0319 	bcc	381430 <__bss_end+0x35b830>
     7c8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7cc:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
     7d0:	1301193c 	movwne	r1, #6460	@ 0x193c
     7d4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     7d8:	3a0e0301 	bcc	3813e4 <__bss_end+0x35b7e4>
     7dc:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     7e0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     7e4:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     7e8:	197c1840 	ldmdbne	ip!, {r6, fp, ip}^
     7ec:	00001301 	andeq	r1, r0, r1, lsl #6
     7f0:	11010b10 	tstne	r1, r0, lsl fp
     7f4:	00061201 	andeq	r1, r6, r1, lsl #4
     7f8:	01011100 	mrseq	r1, (UNDEF: 17)
     7fc:	13011349 	movwne	r1, #4937	@ 0x1349
     800:	21120000 	tstcs	r2, r0
     804:	2f134900 	svccs	0x00134900
     808:	1300000b 	movwne	r0, #11
     80c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     810:	213a0e03 	teqcs	sl, r3, lsl #28
     814:	390b3b08 	stmdbcc	fp, {r3, r8, r9, fp, ip, sp}
     818:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     81c:	01193c13 	tsteq	r9, r3, lsl ip
     820:	14000013 	strne	r0, [r0], #-19	@ 0xffffffed
     824:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     828:	213a0e03 	teqcs	sl, r3, lsl #28
     82c:	39053b09 	stmdbcc	r5, {r0, r3, r8, r9, fp, ip, sp}
     830:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     834:	01193c13 	tsteq	r9, r3, lsl ip
     838:	15000013 	strne	r0, [r0, #-19]	@ 0xffffffed
     83c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	@ <UNPREDICTABLE>
     840:	213a0e03 	teqcs	sl, r3, lsl #28
     844:	390b3b04 	stmdbcc	fp, {r2, r8, r9, fp, ip, sp}
     848:	19270d21 	stmdbne	r7!, {r0, r5, r8, sl, fp}
     84c:	0000193c 	andeq	r1, r0, ip, lsr r9
     850:	3f002e16 	svccc	0x00002e16
     854:	3a0e0319 	bcc	3814c0 <__bss_end+0x35b8c0>
     858:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     85c:	27062139 	smladxcs	r6, r9, r1, r2
     860:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     864:	7a184006 	bvc	610884 <__bss_end+0x5eac84>
     868:	17000019 	smladne	r0, r9, r0, r0
     86c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     870:	213a0e03 	teqcs	sl, r3, lsl #28
     874:	39053b01 	stmdbcc	r5, {r0, r8, r9, fp, ip, sp}
     878:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
     87c:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     880:	197a1840 	ldmdbne	sl!, {r6, fp, ip}^
     884:	00001301 	andeq	r1, r0, r1, lsl #6
     888:	3f012e18 	svccc	0x00012e18
     88c:	3a0e0319 	bcc	3814f8 <__bss_end+0x35b8f8>
     890:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     894:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     898:	01111349 	tsteq	r1, r9, asr #6
     89c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8a0:	1301197a 	movwne	r1, #6522	@ 0x197a
     8a4:	11190000 	tstne	r9, r0
     8a8:	130e2501 	movwne	r2, #58625	@ 0xe501
     8ac:	1b0e030b 	blne	3814e0 <__bss_end+0x35b8e0>
     8b0:	1201110e 	andne	r1, r1, #-2147483645	@ 0x80000003
     8b4:	00171006 	andseq	r1, r7, r6
     8b8:	00241a00 	eoreq	r1, r4, r0, lsl #20
     8bc:	0b3e0b0b 	bleq	f834f0 <__bss_end+0xf5d8f0>
     8c0:	00000803 	andeq	r0, r0, r3, lsl #16
     8c4:	0b000f1b 	bleq	4538 <_start-0xbac8>
     8c8:	1c00000b 	stcne	0, cr0, [r0], {11}
     8cc:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     8d0:	00001301 	andeq	r1, r0, r1, lsl #6
     8d4:	2701151d 	smladcs	r1, sp, r5, r1
     8d8:	01134919 	tsteq	r3, r9, lsl r9
     8dc:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     8e0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8e4:	0b3b0b3a 	bleq	ec35d4 <__bss_end+0xe9d9d4>
     8e8:	13490b39 	movtne	r0, #39737	@ 0x9b39
     8ec:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     8f0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     8f4:	03193f00 	tsteq	r9, #0, 30
     8f8:	3b0b3a0e 	blcc	2cf138 <__bss_end+0x2a9538>
     8fc:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     900:	00193c19 	andseq	r3, r9, r9, lsl ip
     904:	002e2000 	eoreq	r2, lr, r0
     908:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     90c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     910:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     914:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     918:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     91c:	3a0e0301 	bcc	381528 <__bss_end+0x35b928>
     920:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     924:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     928:	12011113 	andne	r1, r1, #-1073741820	@ 0xc0000004
     92c:	7c184006 	ldcvc	0, cr4, [r8], {6}
     930:	00130119 	andseq	r0, r3, r9, lsl r1
     934:	010b2200 	mrseq	r2, R11_fiq
     938:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     93c:	00001301 	andeq	r1, r0, r1, lsl #6
     940:	3f002e23 	svccc	0x00002e23
     944:	3a0e0319 	bcc	3815b0 <__bss_end+0x35b9b0>
     948:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     94c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     950:	12011113 	andne	r1, r1, #-1073741820	@ 0xc0000004
     954:	7a184006 	bvc	610974 <__bss_end+0x5ead74>
     958:	24000019 	strcs	r0, [r0], #-25	@ 0xffffffe7
     95c:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	@ <UNPREDICTABLE>
     960:	0b3a0e03 	bleq	e84174 <__bss_end+0xe5e574>
     964:	0b39053b 	bleq	e41e58 <__bss_end+0xe1c258>
     968:	01111927 	tsteq	r1, r7, lsr #18
     96c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     970:	0000197c 	andeq	r1, r0, ip, ror r9
     974:	03000525 	movweq	r0, #1317	@ 0x525
     978:	3b0b3a0e 	blcc	2cf1b8 <__bss_end+0x2a95b8>
     97c:	49053905 	stmdbmi	r5, {r0, r2, r8, fp, ip, sp}
     980:	00180213 	andseq	r0, r8, r3, lsl r2
     984:	0d010000 	stceq	0, cr0, [r1, #-0]
     988:	3a0e0300 	bcc	381590 <__bss_end+0x35b990>
     98c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     990:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     994:	0200000b 	andeq	r0, r0, #11
     998:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     99c:	3b01213a 	blcc	48e8c <__bss_end+0x2328c>
     9a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     9a4:	00180213 	andseq	r0, r8, r3, lsl r2
     9a8:	00050300 	andeq	r0, r5, r0, lsl #6
     9ac:	213a0e03 	teqcs	sl, r3, lsl #28
     9b0:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     9b4:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     9b8:	04000018 	streq	r0, [r0], #-24	@ 0xffffffe8
     9bc:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     9c0:	0b3b0b3a 	bleq	ec36b0 <__bss_end+0xe9dab0>
     9c4:	13490b39 	movtne	r0, #39737	@ 0x9b39
     9c8:	05050000 	streq	r0, [r5, #-0]
     9cc:	3a080300 	bcc	2015d4 <__bss_end+0x1db9d4>
     9d0:	0b3b0121 	bleq	ec0e5c <__bss_end+0xe9b25c>
     9d4:	13490b39 	movtne	r0, #39737	@ 0x9b39
     9d8:	00001802 	andeq	r1, r0, r2, lsl #16
     9dc:	0b000f06 	bleq	45fc <_start-0xba04>
     9e0:	13490421 	movtne	r0, #37921	@ 0x9421
     9e4:	05070000 	streq	r0, [r7, #-0]
     9e8:	00134900 	andseq	r4, r3, r0, lsl #18
     9ec:	00240800 	eoreq	r0, r4, r0, lsl #16
     9f0:	3e04210b 	adfccs	f2, f4, #3.0
     9f4:	0e030721 	cdpeq	7, 0, cr0, cr3, cr1, {1}
     9f8:	26090000 	strcs	r0, [r9], -r0
     9fc:	00134900 	andseq	r4, r3, r0, lsl #18
     a00:	01130a00 	tsteq	r3, r0, lsl #20
     a04:	0b3a0b0b 	bleq	e83638 <__bss_end+0xe5da38>
     a08:	21390b3b 	teqcs	r9, fp, lsr fp
     a0c:	00130109 	andseq	r0, r3, r9, lsl #2
     a10:	01010b00 	tsteq	r1, r0, lsl #22
     a14:	13011349 	movwne	r1, #4937	@ 0x1349
     a18:	210c0000 	mrscs	r0, (UNDEF: 12)
     a1c:	2f134900 	svccs	0x00134900
     a20:	0d00000b 	stceq	0, cr0, [r0, #-44]	@ 0xffffffd4
     a24:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     a28:	213a0e03 	teqcs	sl, r3, lsl #28
     a2c:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     a30:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
     a34:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     a38:	197a1840 	ldmdbne	sl!, {r6, fp, ip}^
     a3c:	00001301 	andeq	r1, r0, r1, lsl #6
     a40:	3f012e0e 	svccc	0x00012e0e
     a44:	3a0e0319 	bcc	3816b0 <__bss_end+0x35bab0>
     a48:	0b3b0121 	bleq	ec0ed4 <__bss_end+0xe9b2d4>
     a4c:	27062139 	smladxcs	r6, r9, r1, r2
     a50:	12011119 	andne	r1, r1, #1073741830	@ 0x40000006
     a54:	7c184006 	ldcvc	0, cr4, [r8], {6}
     a58:	00130119 	andseq	r0, r3, r9, lsl r1
     a5c:	002e0f00 	eoreq	r0, lr, r0, lsl #30
     a60:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     a64:	3b01213a 	blcc	48f54 <__bss_end+0x23354>
     a68:	0621390b 	strteq	r3, [r1], -fp, lsl #18
     a6c:	01111927 	tsteq	r1, r7, lsr #18
     a70:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a74:	0000197a 	andeq	r1, r0, sl, ror r9
     a78:	03003410 	movweq	r3, #1040	@ 0x410
     a7c:	01213a08 			@ <UNDEFINED> instruction: 0x01213a08
     a80:	21390b3b 	teqcs	r9, fp, lsr fp
     a84:	02134910 	andseq	r4, r3, #16, 18	@ 0x40000
     a88:	11000018 	tstne	r0, r8, lsl r0
     a8c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     a90:	0e030b13 	vmoveq.32	d3[0], r0
     a94:	01110e1b 	tsteq	r1, fp, lsl lr
     a98:	17100612 			@ <UNDEFINED> instruction: 0x17100612
     a9c:	15120000 	ldrne	r0, [r2, #-0]
     aa0:	01192701 	tsteq	r9, r1, lsl #14
     aa4:	13000013 	movwne	r0, #19
     aa8:	0b0b000f 	bleq	2c0aec <__bss_end+0x29aeec>
     aac:	35140000 	ldrcc	r0, [r4, #-0]
     ab0:	00134900 	andseq	r4, r3, r0, lsl #18
     ab4:	012e1500 			@ <UNDEFINED> instruction: 0x012e1500
     ab8:	0b3a0e03 	bleq	e842cc <__bss_end+0xe5e6cc>
     abc:	0b390b3b 	bleq	e437b0 <__bss_end+0xe1dbb0>
     ac0:	01111927 	tsteq	r1, r7, lsr #18
     ac4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ac8:	0000197c 	andeq	r1, r0, ip, ror r9
     acc:	11010b16 	tstne	r1, r6, lsl fp
     ad0:	00061201 	andeq	r1, r6, r1, lsl #4
     ad4:	0d010000 	stceq	0, cr0, [r1, #-0]
     ad8:	3a0e0300 	bcc	3816e0 <__bss_end+0x35bae0>
     adc:	0b3b0121 	bleq	ec0f68 <__bss_end+0xe9b368>
     ae0:	49102139 	ldmdbmi	r0, {r0, r3, r4, r5, r8, sp}
     ae4:	000b3813 	andeq	r3, fp, r3, lsl r8
     ae8:	00050200 	andeq	r0, r5, r0, lsl #4
     aec:	213a0e03 	teqcs	sl, r3, lsl #28
     af0:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     af4:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     af8:	03000018 	movweq	r0, #24
     afc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b00:	3b01213a 	blcc	48ff0 <__bss_end+0x233f0>
     b04:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     b08:	00180213 	andseq	r0, r8, r3, lsl r2
     b0c:	00280400 	eoreq	r0, r8, r0, lsl #8
     b10:	0b1c0e03 	bleq	704324 <__bss_end+0x6de724>
     b14:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
     b18:	03193f01 	tsteq	r9, #1, 30
     b1c:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     b20:	21390b3b 	teqcs	r9, fp, lsr fp
     b24:	11192706 	tstne	r9, r6, lsl #14
     b28:	40061201 	andmi	r1, r6, r1, lsl #4
     b2c:	01197a18 	tsteq	r9, r8, lsl sl
     b30:	06000013 			@ <UNDEFINED> instruction: 0x06000013
     b34:	0b0b0024 	bleq	2c0bcc <__bss_end+0x29afcc>
     b38:	0e030b3e 	vmoveq.16	d3[0], r0
     b3c:	01070000 	mrseq	r0, (UNDEF: 7)
     b40:	01134901 	tsteq	r3, r1, lsl #18
     b44:	08000013 	stmdaeq	r0, {r0, r1, r4}
     b48:	13490021 	movtne	r0, #36897	@ 0x9021
     b4c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     b50:	03010409 	movweq	r0, #5129	@ 0x1409
     b54:	07213e0e 	streq	r3, [r1, -lr, lsl #28]!
     b58:	4901210b 	stmdbmi	r1, {r0, r1, r3, r8, sp}
     b5c:	02213a13 	eoreq	r3, r1, #77824	@ 0x13000
     b60:	21390b3b 	teqcs	r9, fp, lsr fp
     b64:	00130106 	andseq	r0, r3, r6, lsl #2
     b68:	01110a00 	tsteq	r1, r0, lsl #20
     b6c:	0b130e25 	bleq	4c4408 <__bss_end+0x49e808>
     b70:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     b74:	06120111 			@ <UNDEFINED> instruction: 0x06120111
     b78:	00001710 	andeq	r1, r0, r0, lsl r7
     b7c:	0b01130b 	bleq	457b0 <__bss_end+0x1fbb0>
     b80:	3b0b3a0b 	blcc	2cf3b4 <__bss_end+0x2a97b4>
     b84:	010b390b 	tsteq	fp, fp, lsl #18
     b88:	0c000013 	stceq	0, cr0, [r0], {19}
     b8c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     b90:	0b3b0b3a 	bleq	ec3880 <__bss_end+0xe9dc80>
     b94:	13490b39 	movtne	r0, #39737	@ 0x9b39
     b98:	350d0000 	strcc	r0, [sp, #-0]
     b9c:	00134900 	andseq	r4, r3, r0, lsl #18
     ba0:	00340e00 	eorseq	r0, r4, r0, lsl #28
     ba4:	0b3a0e03 	bleq	e843b8 <__bss_end+0xe5e7b8>
     ba8:	0b390b3b 	bleq	e4389c <__bss_end+0xe1dc9c>
     bac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	@ <UNPREDICTABLE>
     bb0:	00001802 	andeq	r1, r0, r2, lsl #16
     bb4:	0b000f0f 	bleq	47f8 <_start-0xb808>
     bb8:	0013490b 	andseq	r4, r3, fp, lsl #18
     bbc:	00261000 	eoreq	r1, r6, r0
     bc0:	00001349 	andeq	r1, r0, r9, asr #6
     bc4:	3f012e11 	svccc	0x00012e11
     bc8:	3a0e0319 	bcc	381834 <__bss_end+0x35bc34>
     bcc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bd0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     bd4:	12011113 	andne	r1, r1, #-1073741820	@ 0xc0000004
     bd8:	7a184006 	bvc	610bf8 <__bss_end+0x5eaff8>
     bdc:	00130119 	andseq	r0, r3, r9, lsl r1
     be0:	00241200 	eoreq	r1, r4, r0, lsl #4
     be4:	0b3e0b0b 	bleq	f83818 <__bss_end+0xf5dc18>
     be8:	00000803 	andeq	r0, r0, r3, lsl #16
     bec:	3f012e13 	svccc	0x00012e13
     bf0:	3a0e0319 	bcc	38185c <__bss_end+0x35bc5c>
     bf4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     bf8:	1119270b 	tstne	r9, fp, lsl #14
     bfc:	40061201 	andmi	r1, r6, r1, lsl #4
     c00:	01197c18 	tsteq	r9, r8, lsl ip
     c04:	14000013 	strne	r0, [r0], #-19	@ 0xffffffed
     c08:	08030005 	stmdaeq	r3, {r0, r2}
     c0c:	0b3b0b3a 	bleq	ec38fc <__bss_end+0xe9dcfc>
     c10:	13490b39 	movtne	r0, #39737	@ 0x9b39
     c14:	00001802 	andeq	r1, r0, r2, lsl #16
     c18:	3f012e15 	svccc	0x00012e15
     c1c:	3a0e0319 	bcc	381888 <__bss_end+0x35bc88>
     c20:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c24:	1119270b 	tstne	r9, fp, lsl #14
     c28:	40061201 	andmi	r1, r6, r1, lsl #4
     c2c:	00197a18 	andseq	r7, r9, r8, lsl sl
     c30:	00341600 	eorseq	r1, r4, r0, lsl #12
     c34:	0b3a0803 	bleq	e82c48 <__bss_end+0xe5d048>
     c38:	0b390b3b 	bleq	e4392c <__bss_end+0xe1dd2c>
     c3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c40:	01000000 	mrseq	r0, (UNDEF: 0)
     c44:	0b0b0024 	bleq	2c0cdc <__bss_end+0x29b0dc>
     c48:	0e030b3e 	vmoveq.16	d3[0], r0
     c4c:	34020000 	strcc	r0, [r2], #-0
     c50:	3a0e0300 	bcc	381858 <__bss_end+0x35bc58>
     c54:	0b3b0121 	bleq	ec10e0 <__bss_end+0xe9b4e0>
     c58:	13490b39 	movtne	r0, #39737	@ 0x9b39
     c5c:	00001802 	andeq	r1, r0, r2, lsl #16
     c60:	0b000f03 	bleq	4874 <_start-0xb78c>
     c64:	13490421 	movtne	r0, #37921	@ 0x9421
     c68:	34040000 	strcc	r0, [r4], #-0
     c6c:	3a0e0300 	bcc	381874 <__bss_end+0x35bc74>
     c70:	053b0121 	ldreq	r0, [fp, #-289]!	@ 0xfffffedf
     c74:	13490b39 	movtne	r0, #39737	@ 0x9b39
     c78:	00001802 	andeq	r1, r0, r2, lsl #16
     c7c:	03001605 	movweq	r1, #1541	@ 0x605
     c80:	3b0b3a0e 	blcc	2cf4c0 <__bss_end+0x2a98c0>
     c84:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     c88:	06000013 			@ <UNDEFINED> instruction: 0x06000013
     c8c:	13490026 	movtne	r0, #36902	@ 0x9026
     c90:	0d070000 	stceq	0, cr0, [r7, #-0]
     c94:	3a0e0300 	bcc	38189c <__bss_end+0x35bc9c>
     c98:	0b3b0121 	bleq	ec1124 <__bss_end+0xe9b524>
     c9c:	13490b39 	movtne	r0, #39737	@ 0x9b39
     ca0:	0d080000 	stceq	0, cr0, [r8, #-0]
     ca4:	3a0e0300 	bcc	3818ac <__bss_end+0x35bcac>
     ca8:	0b3b0121 	bleq	ec1134 <__bss_end+0xe9b534>
     cac:	13490b39 	movtne	r0, #39737	@ 0x9b39
     cb0:	00000b38 	andeq	r0, r0, r8, lsr fp
     cb4:	03012e09 	movweq	r2, #7689	@ 0x1e09
     cb8:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     cbc:	2139053b 	teqcs	r9, fp, lsr r5
     cc0:	1119270d 	tstne	r9, sp, lsl #14
     cc4:	40061201 	andmi	r1, r6, r1, lsl #4
     cc8:	01197a18 	tsteq	r9, r8, lsl sl
     ccc:	0a000013 	beq	d20 <_start-0xf2e0>
     cd0:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     cd4:	0e030b13 	vmoveq.32	d3[0], r0
     cd8:	01110e1b 	tsteq	r1, fp, lsl lr
     cdc:	17100612 			@ <UNDEFINED> instruction: 0x17100612
     ce0:	240b0000 	strcs	r0, [fp], #-0
     ce4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     ce8:	0008030b 	andeq	r0, r8, fp, lsl #6
     cec:	000f0c00 	andeq	r0, pc, r0, lsl #24
     cf0:	00000b0b 	andeq	r0, r0, fp, lsl #22
     cf4:	0301170d 	movweq	r1, #5901	@ 0x170d
     cf8:	3a050b0e 	bcc	143938 <__bss_end+0x11dd38>
     cfc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d00:	0013010b 	andseq	r0, r3, fp, lsl #2
     d04:	00350e00 	eorseq	r0, r5, r0, lsl #28
     d08:	00001349 	andeq	r1, r0, r9, asr #6
     d0c:	4901010f 	stmdbmi	r1, {r0, r1, r2, r3, r8}
     d10:	00130113 	andseq	r0, r3, r3, lsl r1
     d14:	00211000 	eoreq	r1, r1, r0
     d18:	052f1349 	streq	r1, [pc, #-841]!	@ 9d7 <_start-0xf629>
     d1c:	13110000 	tstne	r1, #0
     d20:	0b0e0301 	bleq	38192c <__bss_end+0x35bd2c>
     d24:	3b0b3a0b 	blcc	2cf558 <__bss_end+0x2a9958>
     d28:	010b390b 	tsteq	fp, fp, lsl #18
     d2c:	12000013 	andne	r0, r0, #19
     d30:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     d34:	0b3b0b3a 	bleq	ec3a24 <__bss_end+0xe9de24>
     d38:	13490b39 	movtne	r0, #39737	@ 0x9b39
     d3c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     d40:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     d44:	03193f00 	tsteq	r9, #0, 30
     d48:	3b0b3a0e 	blcc	2cf588 <__bss_end+0x2a9988>
     d4c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     d50:	3c134919 			@ <UNDEFINED> instruction: 0x3c134919
     d54:	14000019 	strne	r0, [r0], #-25	@ 0xffffffe7
     d58:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	@ <UNPREDICTABLE>
     d5c:	0b3a0e03 	bleq	e84570 <__bss_end+0xe5e970>
     d60:	0b39053b 	bleq	e42254 <__bss_end+0xe1c654>
     d64:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     d68:	05150000 	ldreq	r0, [r5, #-0]
     d6c:	3a0e0300 	bcc	381974 <__bss_end+0x35bd74>
     d70:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d74:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     d78:	16000018 			@ <UNDEFINED> instruction: 0x16000018
     d7c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     d80:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     d84:	13490b39 	movtne	r0, #39737	@ 0x9b39
     d88:	00001802 	andeq	r1, r0, r2, lsl #16
     d8c:	3f002e17 	svccc	0x00002e17
     d90:	3a0e0319 	bcc	3819fc <__bss_end+0x35bdfc>
     d94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d98:	1119270b 	tstne	r9, fp, lsl #14
     d9c:	40061201 	andmi	r1, r6, r1, lsl #4
     da0:	00197a18 	andseq	r7, r9, r8, lsl sl
     da4:	002e1800 	eoreq	r1, lr, r0, lsl #16
     da8:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     dac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     db0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     db4:	01111349 	tsteq	r1, r9, asr #6
     db8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     dbc:	0000197a 	andeq	r1, r0, sl, ror r9
     dc0:	3f012e19 	svccc	0x00012e19
     dc4:	3a0e0319 	bcc	381a30 <__bss_end+0x35be30>
     dc8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     dcc:	1119270b 	tstne	r9, fp, lsl #14
     dd0:	40061201 	andmi	r1, r6, r1, lsl #4
     dd4:	01197c18 	tsteq	r9, r8, lsl ip
     dd8:	1a000013 	bne	e2c <_start-0xf1d4>
     ddc:	08030005 	stmdaeq	r3, {r0, r2}
     de0:	0b3b0b3a 	bleq	ec3ad0 <__bss_end+0xe9ded0>
     de4:	13490b39 	movtne	r0, #39737	@ 0x9b39
     de8:	00001802 	andeq	r1, r0, r2, lsl #16
     dec:	0300341b 	movweq	r3, #1051	@ 0x41b
     df0:	3b0b3a08 	blcc	2cf618 <__bss_end+0x2a9a18>
     df4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     df8:	00180213 	andseq	r0, r8, r3, lsl r2
     dfc:	012e1c00 			@ <UNDEFINED> instruction: 0x012e1c00
     e00:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     e04:	0b3b0b3a 	bleq	ec3af4 <__bss_end+0xe9def4>
     e08:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     e0c:	01111349 	tsteq	r1, r9, asr #6
     e10:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e14:	0000197c 	andeq	r1, r0, ip, ror r9
     e18:	0300051d 	movweq	r0, #1309	@ 0x51d
     e1c:	3b0b3a0e 	blcc	2cf65c <__bss_end+0x2a9a5c>
     e20:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e24:	00180213 	andseq	r0, r8, r3, lsl r2
     e28:	05010000 	streq	r0, [r1, #-0]
     e2c:	00134900 	andseq	r4, r3, r0, lsl #18
     e30:	00240200 	eoreq	r0, r4, r0, lsl #4
     e34:	0b3e0b0b 	bleq	f83a68 <__bss_end+0xf5de68>
     e38:	00000e03 	andeq	r0, r0, r3, lsl #28
     e3c:	0b000f03 	bleq	4a50 <_start-0xb5b0>
     e40:	13490421 	movtne	r0, #37921	@ 0x9421
     e44:	26040000 	strcs	r0, [r4], -r0
     e48:	00134900 	andseq	r4, r3, r0, lsl #18
     e4c:	00160500 	andseq	r0, r6, r0, lsl #10
     e50:	0b3a0e03 	bleq	e84664 <__bss_end+0xe5ea64>
     e54:	0b390b3b 	bleq	e43b48 <__bss_end+0xe1df48>
     e58:	00001349 	andeq	r1, r0, r9, asr #6
     e5c:	03000d06 	movweq	r0, #3334	@ 0xd06
     e60:	04213a0e 	strteq	r3, [r1], #-2574	@ 0xfffff5f2
     e64:	0b390b3b 	bleq	e43b58 <__bss_end+0xe1df58>
     e68:	0b381349 	bleq	e05b94 <__bss_end+0xddff94>
     e6c:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     e70:	03193f01 	tsteq	r9, #1, 30
     e74:	01213a0e 			@ <UNDEFINED> instruction: 0x01213a0e
     e78:	21390b3b 	teqcs	r9, fp, lsr fp
     e7c:	11192706 	tstne	r9, r6, lsl #14
     e80:	40061201 	andmi	r1, r6, r1, lsl #4
     e84:	01197c18 	tsteq	r9, r8, lsl ip
     e88:	08000013 	stmdaeq	r0, {r0, r1, r4}
     e8c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     e90:	213a0e03 	teqcs	sl, r3, lsl #28
     e94:	390b3b05 	stmdbcc	fp, {r0, r2, r8, r9, fp, ip, sp}
     e98:	19270621 	stmdbne	r7!, {r0, r5, r9, sl}
     e9c:	1301193c 	movwne	r1, #6460	@ 0x193c
     ea0:	05090000 	streq	r0, [r9, #-0]
     ea4:	3a0e0300 	bcc	381aac <__bss_end+0x35beac>
     ea8:	0b3b0121 	bleq	ec1334 <__bss_end+0xe9b734>
     eac:	49122139 	ldmdbmi	r2, {r0, r3, r4, r5, r8, sp}
     eb0:	00180213 	andseq	r0, r8, r3, lsl r2
     eb4:	00340a00 	eorseq	r0, r4, r0, lsl #20
     eb8:	213a0803 	teqcs	sl, r3, lsl #16
     ebc:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     ec0:	13490621 	movtne	r0, #38433	@ 0x9621
     ec4:	00001802 	andeq	r1, r0, r2, lsl #16
     ec8:	0300050b 	movweq	r0, #1291	@ 0x50b
     ecc:	01213a08 			@ <UNDEFINED> instruction: 0x01213a08
     ed0:	0b390b3b 	bleq	e43bc4 <__bss_end+0xe1dfc4>
     ed4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     ed8:	110c0000 	mrsne	r0, (UNDEF: 12)
     edc:	130e2501 	movwne	r2, #58625	@ 0xe501
     ee0:	1b0e030b 	blne	381b14 <__bss_end+0x35bf14>
     ee4:	1201110e 	andne	r1, r1, #-2147483645	@ 0x80000003
     ee8:	00171006 	andseq	r1, r7, r6
     eec:	00240d00 	eoreq	r0, r4, r0, lsl #26
     ef0:	0b3e0b0b 	bleq	f83b24 <__bss_end+0xf5df24>
     ef4:	00000803 	andeq	r0, r0, r3, lsl #16
     ef8:	2701150e 	strcs	r1, [r1, -lr, lsl #10]
     efc:	00130119 	andseq	r0, r3, r9, lsl r1
     f00:	000f0f00 	andeq	r0, pc, r0, lsl #30
     f04:	00000b0b 	andeq	r0, r0, fp, lsl #22
     f08:	03011310 	movweq	r1, #4880	@ 0x1310
     f0c:	3a0b0b0e 	bcc	2c3b4c <__bss_end+0x29df4c>
     f10:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f14:	0013010b 	andseq	r0, r3, fp, lsl #2
     f18:	002e1100 	eoreq	r1, lr, r0, lsl #2
     f1c:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     f20:	053b0b3a 	ldreq	r0, [fp, #-2874]!	@ 0xfffff4c6
     f24:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     f28:	0000193c 	andeq	r1, r0, ip, lsr r9
     f2c:	3f012e12 	svccc	0x00012e12
     f30:	3a0e0319 	bcc	381b9c <__bss_end+0x35bf9c>
     f34:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f38:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     f3c:	01193c13 	tsteq	r9, r3, lsl ip
     f40:	13000013 	movwne	r0, #19
     f44:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	@ <UNPREDICTABLE>
     f48:	0b3a0e03 	bleq	e8475c <__bss_end+0xe5eb5c>
     f4c:	0b39053b 	bleq	e42440 <__bss_end+0xe1c840>
     f50:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
     f54:	00001301 	andeq	r1, r0, r1, lsl #6
     f58:	3f002e14 	svccc	0x00002e14
     f5c:	3a0e0319 	bcc	381bc8 <__bss_end+0x35bfc8>
     f60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f64:	1119270b 	tstne	r9, fp, lsl #14
     f68:	40061201 	andmi	r1, r6, r1, lsl #4
     f6c:	00197c18 	andseq	r7, r9, r8, lsl ip
     f70:	002e1500 	eoreq	r1, lr, r0, lsl #10
     f74:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
     f78:	0b3b0b3a 	bleq	ec3c68 <__bss_end+0xe9e068>
     f7c:	01110b39 	tsteq	r1, r9, lsr fp
     f80:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f84:	0000197a 	andeq	r1, r0, sl, ror r9
     f88:	3f012e16 	svccc	0x00012e16
     f8c:	3a0e0319 	bcc	381bf8 <__bss_end+0x35bff8>
     f90:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f94:	1119270b 	tstne	r9, fp, lsl #14
     f98:	40061201 	andmi	r1, r6, r1, lsl #4
     f9c:	00197a18 	andseq	r7, r9, r8, lsl sl
     fa0:	24010000 	strcs	r0, [r1], #-0
     fa4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     fa8:	000e030b 	andeq	r0, lr, fp, lsl #6
     fac:	000f0200 	andeq	r0, pc, r0, lsl #4
     fb0:	4904210b 	stmdbmi	r4, {r0, r1, r3, r8, sp}
     fb4:	03000013 	movweq	r0, #19
     fb8:	13490026 	movtne	r0, #36902	@ 0x9026
     fbc:	37040000 	strcc	r0, [r4, -r0]
     fc0:	00134900 	andseq	r4, r3, r0, lsl #18
     fc4:	00050500 	andeq	r0, r5, r0, lsl #10
     fc8:	213a0e03 	teqcs	sl, r3, lsl #28
     fcc:	390b3b01 	stmdbcc	fp, {r0, r8, r9, fp, ip, sp}
     fd0:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
     fd4:	1742b717 	smlaldne	fp, r2, r7, r7
     fd8:	34060000 	strcc	r0, [r6], #-0
     fdc:	3a080300 	bcc	201be4 <__bss_end+0x1dbfe4>
     fe0:	0b3b0121 	bleq	ec146c <__bss_end+0xe9b86c>
     fe4:	13490b39 	movtne	r0, #39737	@ 0x9b39
     fe8:	42b71702 	adcsmi	r1, r7, #524288	@ 0x80000
     fec:	07000017 	smladeq	r0, r7, r0, r0
     ff0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     ff4:	3b01213a 	blcc	494e4 <__bss_end+0x238e4>
     ff8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ffc:	b7170213 			@ <UNDEFINED> instruction: 0xb7170213
    1000:	00001742 	andeq	r1, r0, r2, asr #14
    1004:	25011108 	strcs	r1, [r1, #-264]	@ 0xfffffef8
    1008:	030b130e 	movweq	r1, #45838	@ 0xb30e
    100c:	110e1b0e 	tstne	lr, lr, lsl #22
    1010:	10061201 	andne	r1, r6, r1, lsl #4
    1014:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    1018:	0b0b0024 	bleq	2c10b0 <__bss_end+0x29b4b0>
    101c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1020:	160a0000 	strne	r0, [sl], -r0
    1024:	3a0e0300 	bcc	381c2c <__bss_end+0x35c02c>
    1028:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    102c:	0013490b 	andseq	r4, r3, fp, lsl #18
    1030:	012e0b00 			@ <UNDEFINED> instruction: 0x012e0b00
    1034:	0e03193f 			@ <UNDEFINED> instruction: 0x0e03193f
    1038:	0b3b0b3a 	bleq	ec3d28 <__bss_end+0xe9e128>
    103c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1040:	01111349 	tsteq	r1, r9, asr #6
    1044:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1048:	1301197a 	movwne	r1, #6522	@ 0x197a
    104c:	050c0000 	streq	r0, [ip, #-0]
    1050:	3a0e0300 	bcc	381c58 <__bss_end+0x35c058>
    1054:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1058:	0213490b 	andseq	r4, r3, #180224	@ 0x2c000
    105c:	00000018 	andeq	r0, r0, r8, lsl r0
    1060:	0b002401 	bleq	a06c <_start-0x5f94>
    1064:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
    1068:	0200000e 	andeq	r0, r0, #14
    106c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1070:	3b01213a 	blcc	49560 <__bss_end+0x23960>
    1074:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1078:	b7170213 			@ <UNDEFINED> instruction: 0xb7170213
    107c:	00001742 	andeq	r1, r0, r2, asr #14
    1080:	0b000f03 	bleq	4c94 <_start-0xb36c>
    1084:	13490421 	movtne	r0, #37921	@ 0x9421
    1088:	05040000 	streq	r0, [r4, #-0]
    108c:	3a080300 	bcc	201c94 <__bss_end+0x1dc094>
    1090:	0b3b0121 	bleq	ec151c <__bss_end+0xe9b91c>
    1094:	13490b39 	movtne	r0, #39737	@ 0x9b39
    1098:	42b71702 	adcsmi	r1, r7, #524288	@ 0x80000
    109c:	05000017 	streq	r0, [r0, #-23]	@ 0xffffffe9
    10a0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10a4:	3b01213a 	blcc	49594 <__bss_end+0x23994>
    10a8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    10ac:	b7170213 			@ <UNDEFINED> instruction: 0xb7170213
    10b0:	00001742 	andeq	r1, r0, r2, asr #14
    10b4:	25011106 	strcs	r1, [r1, #-262]	@ 0xfffffefa
    10b8:	030b130e 	movweq	r1, #45838	@ 0xb30e
    10bc:	110e1b0e 	tstne	lr, lr, lsl #22
    10c0:	10061201 	andne	r1, r6, r1, lsl #4
    10c4:	07000017 	smladeq	r0, r7, r0, r0
    10c8:	0b0b0024 	bleq	2c1160 <__bss_end+0x29b560>
    10cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    10d0:	16080000 	strne	r0, [r8], -r0
    10d4:	3a0e0300 	bcc	381cdc <__bss_end+0x35c0dc>
    10d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    10e0:	000f0900 	andeq	r0, pc, r0, lsl #18
    10e4:	00000b0b 	andeq	r0, r0, fp, lsl #22
    10e8:	3f012e0a 	svccc	0x00012e0a
    10ec:	3a0e0319 	bcc	381d58 <__bss_end+0x35c158>
    10f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10f4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    10f8:	12011113 	andne	r1, r1, #-1073741820	@ 0xc0000004
    10fc:	7a184006 	bvc	61111c <__bss_end+0x5eb51c>
    1100:	00130119 	andseq	r0, r3, r9, lsl r1
    1104:	00050b00 	andeq	r0, r5, r0, lsl #22
    1108:	0b3a0803 	bleq	e8311c <__bss_end+0xe5d51c>
    110c:	0b390b3b 	bleq	e43e00 <__bss_end+0xe1e200>
    1110:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1114:	01000000 	mrseq	r0, (UNDEF: 0)
    1118:	0b0b0024 	bleq	2c11b0 <__bss_end+0x29b5b0>
    111c:	0e030b3e 	vmoveq.16	d3[0], r0
    1120:	0f020000 	svceq	0x00020000
    1124:	04210b00 	strteq	r0, [r1], #-2816	@ 0xfffff500
    1128:	00001349 	andeq	r1, r0, r9, asr #6
    112c:	49002603 	stmdbmi	r0, {r0, r1, r9, sl, sp}
    1130:	04000013 	streq	r0, [r0], #-19	@ 0xffffffed
    1134:	13490037 	movtne	r0, #36919	@ 0x9037
    1138:	05050000 	streq	r0, [r5, #-0]
    113c:	3a0e0300 	bcc	381d44 <__bss_end+0x35c144>
    1140:	0b3b0221 	bleq	ec19cc <__bss_end+0xe9bdcc>
    1144:	13490b39 	movtne	r0, #39737	@ 0x9b39
    1148:	42b71702 	adcsmi	r1, r7, #524288	@ 0x80000
    114c:	06000017 			@ <UNDEFINED> instruction: 0x06000017
    1150:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1154:	3b02213a 	blcc	89644 <__bss_end+0x63a44>
    1158:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    115c:	b7170213 			@ <UNDEFINED> instruction: 0xb7170213
    1160:	00001742 	andeq	r1, r0, r2, asr #14
    1164:	03003407 	movweq	r3, #1031	@ 0x407
    1168:	02213a0e 	eoreq	r3, r1, #57344	@ 0xe000
    116c:	0b390b3b 	bleq	e43e60 <__bss_end+0xe1e260>
    1170:	17021349 	strne	r1, [r2, -r9, asr #6]
    1174:	001742b7 			@ <UNDEFINED> instruction: 0x001742b7
    1178:	01110800 	tsteq	r1, r0, lsl #16
    117c:	0b130e25 	bleq	4c4a18 <__bss_end+0x49ee18>
    1180:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1184:	06120111 			@ <UNDEFINED> instruction: 0x06120111
    1188:	00001710 	andeq	r1, r0, r0, lsl r7
    118c:	0b002409 	bleq	a1b8 <_start-0x5e48>
    1190:	030b3e0b 	movweq	r3, #48651	@ 0xbe0b
    1194:	0a000008 	beq	11bc <_start-0xee44>
    1198:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    119c:	0b3b0b3a 	bleq	ec3e8c <__bss_end+0xe9e28c>
    11a0:	13490b39 	movtne	r0, #39737	@ 0x9b39
    11a4:	0f0b0000 	svceq	0x000b0000
    11a8:	000b0b00 	andeq	r0, fp, r0, lsl #22
    11ac:	00260c00 	eoreq	r0, r6, r0, lsl #24
    11b0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
    11b4:	03193f01 	tsteq	r9, #1, 30
    11b8:	3b0b3a0e 	blcc	2cf9f8 <__bss_end+0x2a9df8>
    11bc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    11c0:	11134919 	tstne	r3, r9, lsl r9
    11c4:	40061201 	andmi	r1, r6, r1, lsl #4
    11c8:	01197a18 	tsteq	r9, r8, lsl sl
    11cc:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    11d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    11d4:	0b3b0b3a 	bleq	ec3ec4 <__bss_end+0xe9e2c4>
    11d8:	13490b39 	movtne	r0, #39737	@ 0x9b39
    11dc:	00001802 	andeq	r1, r0, r2, lsl #16
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00020000 	andeq	r0, r2, r0
  14:	00000344 	andeq	r0, r0, r4, asr #6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02700002 	rsbseq	r0, r0, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00020344 	andeq	r0, r2, r4, asr #6
  34:	000002a4 	andeq	r0, r0, r4, lsr #5
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03fb0002 	mvnseq	r0, #2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000205f0 	strdeq	r0, [r2], -r0	@ <UNPREDICTABLE>
  54:	00000768 	andeq	r0, r0, r8, ror #14
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	091c0002 	ldmdbeq	ip, {r1}
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00020d58 	andeq	r0, r2, r8, asr sp
  74:	0000029c 	muleq	r0, ip, r2
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0b9d0002 	bleq	fe740094 <_estack+0xf6720094>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00020ff4 	strdeq	r0, [r2], -r4
  94:	00000bb0 			@ <UNDEFINED> instruction: 0x00000bb0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	13e00002 	mvnne	r0, #2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00021ba4 	andeq	r1, r2, r4, lsr #23
  b4:	00001924 	andeq	r1, r0, r4, lsr #18
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	223d0002 	eorscs	r0, sp, #2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000234c8 	andeq	r3, r2, r8, asr #9
  d4:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	24f40002 	ldrbtcs	r0, [r4], #2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	0002386c 	andeq	r3, r2, ip, ror #16
  f4:	000005d8 	ldrdeq	r0, [r0], -r8
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	28d80002 	ldmcs	r8, {r1}^
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00023e44 	andeq	r3, r2, r4, asr #28
 114:	000004ac 	andeq	r0, r0, ip, lsr #9
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	2bbf0002 	blcs	fefc0134 <_estack+0xf6fa0134>
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00024308 	andeq	r4, r2, r8, lsl #6
 134:	000001e8 	andeq	r0, r0, r8, ror #3
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	2e100002 	cdpcs	0, 1, cr0, cr0, cr2, {0}
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	000244f0 	strdeq	r4, [r2], -r0
 154:	000000d0 	ldrdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	2f5a0002 	svccs	0x005a0002
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	000245c0 	andeq	r4, r2, r0, asr #11
 174:	000000fc 	strdeq	r0, [r0], -ip
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	308f0002 	addcc	r0, pc, r2
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	000246bc 			@ <UNDEFINED> instruction: 0x000246bc
 194:	00000114 	andeq	r0, r0, r4, lsl r1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000001fd 	strdeq	r0, [r0], -sp
       4:	01010003 	tsteq	r1, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
      20:	7868792f 	stmdavc	r8!, {r0, r1, r2, r3, r5, r8, fp, ip, sp, lr}^
      24:	2f534f2f 	svccs	0x00534f2f
      28:	70736152 	rsbsvc	r6, r3, r2, asr r1
      2c:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
      30:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
      34:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
      38:	534f5452 	movtpl	r5, #62546	@ 0xf452
      3c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
      40:	4f545265 	svcmi	0x00545265
      44:	6f532f53 	svcvs	0x00532f53
      48:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
      4c:	726f702f 	rsbvc	r7, pc, #47	@ 0x2f
      50:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
      54:	43472f65 	movtmi	r2, #32613	@ 0x7f65
      58:	61522f43 	cmpvs	r2, r3, asr #30
      5c:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
      60:	50797272 	rsbspl	r7, r9, r2, ror r2
      64:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	@ <UNPREDICTABLE>
      68:	2f656d6f 	svccs	0x00656d6f
      6c:	2f786879 	svccs	0x00786879
      70:	522f534f 	eorpl	r5, pc, #1006632961	@ 0x3c000001
      74:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
      78:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      7c:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
      80:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
      84:	2f534f54 	svccs	0x00534f54
      88:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
      8c:	534f5452 	movtpl	r5, #62546	@ 0xf452
      90:	756f532f 	strbvc	r5, [pc, #-815]!	@ fffffd69 <_estack+0xf7fdfd69>
      94:	2f656372 	svccs	0x00656372
      98:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
      9c:	00656475 	rsbeq	r6, r5, r5, ror r4
      a0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ ffffffec <_estack+0xf7fdffec>
      a4:	68792f65 	ldmdavs	r9!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
      a8:	534f2f78 	movtpl	r2, #65400	@ 0xff78
      ac:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
      b0:	72656270 	rsbvc	r6, r5, #112, 4
      b4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
      b8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
      bc:	4f545265 	svcmi	0x00545265
      c0:	65442f53 	strbvs	r2, [r4, #-3923]	@ 0xfffff0ad
      c4:	442f6f6d 	strtmi	r6, [pc], #-3949	@ cc <_start-0xff34>
      c8:	65766972 	ldrbvs	r6, [r6, #-2418]!	@ 0xfffff68e
      cc:	00007372 	andeq	r7, r0, r2, ror r3
      d0:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
      d4:	0100632e 	tsteq	r0, lr, lsr #6
      d8:	72700000 	rsbsvc	r0, r0, #0
      dc:	65646a6f 	strbvs	r6, [r4, #-2671]!	@ 0xfffff591
      e0:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
      e4:	00000200 	andeq	r0, r0, r0, lsl #4
      e8:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
      ec:	7263616d 	rsbvc	r6, r3, #1073741851	@ 0x4000001b
      f0:	00682e6f 	rsbeq	r2, r8, pc, ror #28
      f4:	69000001 	stmdbvs	r0, {r0}
      f8:	682e7172 	stmdavs	lr!, {r1, r4, r5, r6, r8, ip, sp, lr}
      fc:	00000300 	andeq	r0, r0, r0, lsl #6
     100:	6b736174 	blvs	1cd86d8 <__bss_end+0x1cb2ad8>
     104:	0200682e 	andeq	r6, r0, #3014656	@ 0x2e0000
     108:	05000000 	streq	r0, [r0, #-0]
     10c:	02050001 	andeq	r0, r5, #1
     110:	00020000 	andeq	r0, r2, r0
     114:	0100f703 	tsteq	r0, r3, lsl #14	@ <UNPREDICTABLE>
     118:	05bd1005 	ldreq	r1, [sp, #5]!
     11c:	12054e0e 	andne	r4, r5, #14, 28	@ 0xe0
     120:	2e2c056e 	cfsh64cs	mvdx0, mvdx12, #62
     124:	052e1005 	streq	r1, [lr, #-5]!
     128:	10054b0e 	andne	r4, r5, lr, lsl #22
     12c:	670e0568 	strvs	r0, [lr, -r8, ror #10]
     130:	05671205 	strbeq	r1, [r7, #-517]!	@ 0xfffffdfb
     134:	0e052e10 	mcreq	14, 0, r2, cr5, cr0, {0}
     138:	6710054b 	ldrvs	r0, [r0, -fp, asr #10]
     13c:	05670e05 	strbeq	r0, [r7, #-3589]!	@ 0xfffff1fb
     140:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     144:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     148:	05670e05 	strbeq	r0, [r7, #-3589]!	@ 0xfffff1fb
     14c:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     150:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     154:	05670e05 	strbeq	r0, [r7, #-3589]!	@ 0xfffff1fb
     158:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     15c:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     160:	05670e05 	strbeq	r0, [r7, #-3589]!	@ 0xfffff1fb
     164:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     168:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     16c:	05670e05 	strbeq	r0, [r7, #-3589]!	@ 0xfffff1fb
     170:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     174:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     178:	05670e05 	strbeq	r0, [r7, #-3589]!	@ 0xfffff1fb
     17c:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     180:	6a120567 	bvs	481724 <__bss_end+0x45bb24>
     184:	052e1005 	streq	r1, [lr, #-5]!
     188:	10054b0e 	andne	r4, r5, lr, lsl #22
     18c:	6808056a 	stmdavs	r8, {r1, r3, r5, r6, r8, sl}
     190:	052e2105 	streq	r2, [lr, #-261]!	@ 0xfffffefb
     194:	03052e04 	movweq	r2, #24068	@ 0x5e04
     198:	4a11054d 	bmi	4416d4 <__bss_end+0x41bad4>
     19c:	05690e05 	strbeq	r0, [r9, #-3589]!	@ 0xfffff1fb
     1a0:	09056c10 	stmdbeq	r5, {r4, sl, fp, sp, lr}
     1a4:	2f010568 	svccs	0x00010568
     1a8:	05162202 	ldreq	r2, [r6, #-514]	@ 0xfffffdfe
     1ac:	05314d02 	ldreq	r4, [r1, #-3330]!	@ 0xfffff2fe
     1b0:	01053109 	tsteq	r5, r9, lsl #2
     1b4:	034d4e2f 	movteq	r4, #56879	@ 0xde2f
     1b8:	0205820a 	andeq	r8, r5, #-1610612736	@ 0xa0000000
     1bc:	0705319f 			@ <UNDEFINED> instruction: 0x0705319f
     1c0:	2e0d0531 	mcrcs	5, 0, r0, cr13, cr1, {1}
     1c4:	884b0105 	stmdahi	fp, {r0, r2, r8}^
     1c8:	056b1105 	strbeq	r1, [fp, #-261]!	@ 0xfffffefb
     1cc:	4a0a0302 	bmi	280ddc <__bss_end+0x25b1dc>
     1d0:	05300705 	ldreq	r0, [r0, #-1797]!	@ 0xfffff8fb
     1d4:	07052e0d 	streq	r2, [r5, -sp, lsl #28]
     1d8:	2e0d054b 	cfsh32cs	mvfx0, mvfx13, #43
     1dc:	054b0705 	strbeq	r0, [fp, #-1797]	@ 0xfffff8fb
     1e0:	07052e0d 	streq	r2, [r5, -sp, lsl #28]
     1e4:	2e0d054b 	cfsh32cs	mvfx0, mvfx13, #43
     1e8:	054b0705 	strbeq	r0, [fp, #-1797]	@ 0xfffff8fb
     1ec:	07052e0d 	streq	r2, [r5, -sp, lsl #28]
     1f0:	2e0d054b 	cfsh32cs	mvfx0, mvfx13, #43
     1f4:	844c0205 	strbhi	r0, [ip], #-517	@ 0xfffffdfb
     1f8:	2f01054c 	svccs	0x0001054c
     1fc:	01000e02 	tsteq	r0, r2, lsl #28
     200:	0000d701 	andeq	sp, r0, r1, lsl #14
     204:	6b000300 	blvs	e0c <_start-0xf1f4>
     208:	02000000 	andeq	r0, r0, #0
     20c:	0d0efb01 	vstreq	d15, [lr, #-4]
     210:	01010100 	mrseq	r0, (UNDEF: 17)
     214:	00000001 	andeq	r0, r0, r1
     218:	01000001 	tsteq	r0, r1
     21c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ 168 <_start-0xfe98>
     220:	68792f65 	ldmdavs	r9!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
     224:	534f2f78 	movtpl	r2, #65400	@ 0xff78
     228:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
     22c:	72656270 	rsbvc	r6, r5, #112, 4
     230:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     234:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
     238:	4f545265 	svcmi	0x00545265
     23c:	72462f53 	subvc	r2, r6, #332	@ 0x14c
     240:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     244:	532f534f 			@ <UNDEFINED> instruction: 0x532f534f
     248:	6372756f 	cmnvs	r2, #465567744	@ 0x1bc00000
     24c:	6f702f65 	svcvs	0x00702f65
     250:	62617472 	rsbvs	r7, r1, #1912602624	@ 0x72000000
     254:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     258:	522f4343 	eorpl	r4, pc, #201326593	@ 0xc000001
     25c:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     260:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     264:	00006950 	andeq	r6, r0, r0, asr r9
     268:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
     26c:	2e727369 	cdpcs	3, 7, cr7, cr2, cr9, {3}
     270:	00010063 	andeq	r0, r1, r3, rrx
     274:	01050000 	mrseq	r0, (UNDEF: 5)
     278:	44020500 	strmi	r0, [r2], #-1280	@ 0xfffffb00
     27c:	03000203 	movweq	r0, #515	@ 0x203
     280:	050100f5 	streq	r0, [r1, #-245]	@ 0xffffff0b
     284:	0205520c 	andeq	r5, r5, #12, 4	@ 0xc0000000
     288:	342f2fa0 	strtcc	r2, [pc], #-4000	@ 290 <_start-0xfd70>
     28c:	05132402 	ldreq	r2, [r3, #-1026]	@ 0xfffffbfe
     290:	0e036c01 	cdpeq	12, 0, cr6, cr3, cr1, {0}
     294:	160205d6 			@ <UNDEFINED> instruction: 0x160205d6
     298:	152c0231 	strne	r0, [ip, #-561]!	@ 0xfffffdcf
     29c:	02010531 	andeq	r0, r1, #205520896	@ 0xc400000
     2a0:	1c051324 	stcne	3, cr1, [r5], {36}	@ 0x24
     2a4:	05661603 	strbeq	r1, [r6, #-1539]!	@ 0xfffff9fd
     2a8:	2c021302 	stccs	3, cr1, [r2], {2}
     2ac:	01052f13 	tsteq	r5, r3, lsl pc
     2b0:	03132402 	tsteq	r3, #33554432	@ 0x2000000
     2b4:	0205662a 	andeq	r6, r5, #44040192	@ 0x2a00000
     2b8:	0313054c 	tsteq	r3, #76, 10	@ 0x13000000
     2bc:	01059e0a 	tsteq	r5, sl, lsl #28
     2c0:	1805a19f 	stmdane	r5, {r0, r1, r2, r3, r4, r7, r8, sp, pc}
     2c4:	4a04054b 	bmi	1017f8 <__bss_end+0xdbbf8>
     2c8:	054d1405 	strbeq	r1, [sp, #-1029]	@ 0xfffffbfb
     2cc:	0505a219 	streq	sl, [r5, #-537]	@ 0xfffffde7
     2d0:	4d04054a 	cfstr32mi	mvfx0, [r4, #-296]	@ 0xfffffed8
     2d4:	02a60105 	adceq	r0, r6, #1073741825	@ 0x40000001
     2d8:	0101000e 	tsteq	r1, lr
     2dc:	00000302 	andeq	r0, r0, r2, lsl #6
     2e0:	014d0003 	cmpeq	sp, r3
     2e4:	01020000 	mrseq	r0, (UNDEF: 2)
     2e8:	000d0efb 	strdeq	r0, [sp], -fp
     2ec:	01010101 	tsteq	r1, r1, lsl #2
     2f0:	01000000 	mrseq	r0, (UNDEF: 0)
     2f4:	2f010000 	svccs	0x00010000
     2f8:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     2fc:	7868792f 	stmdavc	r8!, {r0, r1, r2, r3, r5, r8, fp, ip, sp, lr}^
     300:	2f534f2f 	svccs	0x00534f2f
     304:	70736152 	rsbsvc	r6, r3, r2, asr r1
     308:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     30c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
     310:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     314:	534f5452 	movtpl	r5, #62546	@ 0xf452
     318:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
     31c:	4f545265 	svcmi	0x00545265
     320:	6f532f53 	svcvs	0x00532f53
     324:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
     328:	73752f00 	cmnvc	r5, #0, 30
     32c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     330:	63672f62 	cmnvs	r7, #392	@ 0x188
     334:	72612f63 	rsbvc	r2, r1, #396	@ 0x18c
     338:	6f6e2d6d 	svcvs	0x006e2d6d
     33c:	652d656e 	strvs	r6, [sp, #-1390]!	@ 0xfffffa92
     340:	2f696261 	svccs	0x00696261
     344:	322e3331 	eorcc	r3, lr, #-1006632960	@ 0xc4000000
     348:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	@ <UNPREDICTABLE>
     34c:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
     350:	2f006564 	svccs	0x00006564
     354:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     358:	7868792f 	stmdavc	r8!, {r0, r1, r2, r3, r5, r8, fp, ip, sp, lr}^
     35c:	2f534f2f 	svccs	0x00534f2f
     360:	70736152 	rsbsvc	r6, r3, r2, asr r1
     364:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     368:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
     36c:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     370:	534f5452 	movtpl	r5, #62546	@ 0xf452
     374:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
     378:	4f545265 	svcmi	0x00545265
     37c:	6f532f53 	svcvs	0x00532f53
     380:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
     384:	726f702f 	rsbvc	r7, pc, #47	@ 0x2f
     388:	6c626174 	stfvse	f6, [r2], #-464	@ 0xfffffe30
     38c:	43472f65 	movtmi	r2, #32613	@ 0x7f65
     390:	61522f43 	cmpvs	r2, r3, asr #30
     394:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     398:	50797272 	rsbspl	r7, r9, r2, ror r2
     39c:	682f0069 	stmdavs	pc!, {r0, r3, r5, r6}	@ <UNPREDICTABLE>
     3a0:	2f656d6f 	svccs	0x00656d6f
     3a4:	2f786879 	svccs	0x00786879
     3a8:	522f534f 	eorpl	r5, pc, #1006632961	@ 0x3c000001
     3ac:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     3b0:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     3b4:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     3b8:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     3bc:	2f534f54 	svccs	0x00534f54
     3c0:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     3c4:	534f5452 	movtpl	r5, #62546	@ 0xf452
     3c8:	756f532f 	strbvc	r5, [pc, #-815]!	@ a1 <_start-0xff5f>
     3cc:	2f656372 	svccs	0x00656372
     3d0:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
     3d4:	00656475 	rsbeq	r6, r5, r5, ror r4
     3d8:	6f726300 	svcvs	0x00726300
     3dc:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     3e0:	00632e65 	rsbeq	r2, r3, r5, ror #28
     3e4:	73000001 	movwvc	r0, #1
     3e8:	65646474 	strbvs	r6, [r4, #-1140]!	@ 0xfffffb8c
     3ec:	00682e66 	rsbeq	r2, r8, r6, ror #28
     3f0:	70000002 	andvc	r0, r0, r2
     3f4:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	@ 0xfffffe44
     3f8:	6f726361 	svcvs	0x00726361
     3fc:	0300682e 	movweq	r6, #2094	@ 0x82e
     400:	696c0000 	stmdbvs	ip!, {}^	@ <UNPREDICTABLE>
     404:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     408:	00000400 	andeq	r0, r0, r0, lsl #8
     40c:	756f7263 	strbvc	r7, [pc, #-611]!	@ 1b1 <_start-0xfe4f>
     410:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     414:	0400682e 	streq	r6, [r0], #-2094	@ 0xfffff7d2
     418:	61740000 	cmnvs	r4, r0
     41c:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     420:	00000400 	andeq	r0, r0, r0, lsl #8
     424:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
     428:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
     42c:	0400682e 	streq	r6, [r0], #-2094	@ 0xfffff7d2
     430:	05000000 	streq	r0, [r0, #-0]
     434:	02050001 	andeq	r0, r5, #1
     438:	000205f0 	strdeq	r0, [r2], -r0	@ <UNPREDICTABLE>
     43c:	01018a03 	tsteq	r1, r3, lsl #20
     440:	05bf1e05 	ldreq	r1, [pc, #3589]!	@ 124d <_start-0xedb3>
     444:	1a056704 	bne	15a05c <__bss_end+0x13445c>
     448:	4a05056a 	bmi	1419f8 <__bss_end+0x11bdf8>
     44c:	054c1705 	strbeq	r1, [ip, #-1797]	@ 0xfffff8fb
     450:	05056704 	streq	r6, [r5, #-1796]	@ 0xfffff8fc
     454:	680f0532 	stmdavs	pc, {r1, r4, r5, r8, sl}	@ <UNPREDICTABLE>
     458:	054e1805 	strbeq	r1, [lr, #-2053]	@ 0xfffff7fb
     45c:	1805671b 	stmdane	r5, {r0, r1, r3, r4, r8, r9, sl, sp, lr}
     460:	67240567 	strvs	r0, [r4, -r7, ror #10]!
     464:	83690305 	cmnhi	r9, #335544320	@ 0x14000000
     468:	86696787 	strbthi	r6, [r9], -r7, lsl #15
     46c:	01040200 	mrseq	r0, R12_usr
     470:	0200ba06 	andeq	fp, r0, #24576	@ 0x6000
     474:	05820304 	streq	r0, [r2, #772]	@ 0x304
     478:	9208060b 	andls	r0, r8, #11534336	@ 0xb00000
     47c:	4d09056a 	cfstr32mi	mvfx0, [r9, #-424]	@ 0xfffffe58
     480:	be2f0105 	suflte	f0, f7, f5
     484:	05a32405 	streq	r2, [r3, #1029]!	@ 0x405
     488:	34054a0e 	strcc	r4, [r5], #-2574	@ 0xfffff5f2
     48c:	4a02056b 	bmi	81a40 <__bss_end+0x5be40>
     490:	84120569 	ldrhi	r0, [r2], #-1385	@ 0xfffffa97
     494:	054a0405 	strbeq	r0, [sl, #-1029]	@ 0xfffffbfb
     498:	61056a03 	tstvs	r5, r3, lsl #20
     49c:	4a03054a 	bmi	c19cc <__bss_end+0x9bdcc>
     4a0:	4a5905a4 	bmi	1641b38 <__bss_end+0x161bf38>
     4a4:	054a0305 	strbeq	r0, [sl, #-773]	@ 0xfffffcfb
     4a8:	32058504 	andcc	r8, r5, #4, 10	@ 0x1000000
     4ac:	4a03056a 	bmi	c1a5c <__bss_end+0x9be5c>
     4b0:	da840105 	ble	fe1008cc <_estack+0xf60e08cc>
     4b4:	056a0705 	strbeq	r0, [sl, #-1797]!	@ 0xfffff8fb
     4b8:	24053303 	strcs	r3, [r5], #-771	@ 0xfffffcfd
     4bc:	4a1405a0 	bmi	501b44 <__bss_end+0x4dbf44>
     4c0:	054b0405 	strbeq	r0, [fp, #-1029]	@ 0xfffffbfb
     4c4:	83a08403 	movhi	r8, #50331648	@ 0x3000000
     4c8:	01040200 	mrseq	r0, R12_usr
     4cc:	0200ba06 	andeq	fp, r0, #24576	@ 0x6000
     4d0:	05820304 	streq	r0, [r2, #772]	@ 0x304
     4d4:	73030609 	movwvc	r0, #13833	@ 0x3609
     4d8:	3a059008 	bcc	164500 <__bss_end+0x13e900>
     4dc:	0301054a 	movweq	r0, #5450	@ 0x154a
     4e0:	05da4a0f 	ldrbeq	r4, [sl, #2575]	@ 0xa0f
     4e4:	25056911 	strcs	r6, [r5, #-2321]	@ 0xfffff6ef
     4e8:	01040200 	mrseq	r0, R12_usr
     4ec:	000f054a 	andeq	r0, pc, sl, asr #10
     4f0:	66010402 	strvs	r0, [r1], -r2, lsl #8
     4f4:	054b0705 	strbeq	r0, [fp, #-1797]	@ 0xfffff8fb
     4f8:	0f053016 	svceq	0x00053016
     4fc:	a11b059f 			@ <UNDEFINED> instruction: 0xa11b059f
     500:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
     504:	1b05500b 	blne	154538 <__bss_end+0x12e938>
     508:	83230567 			@ <UNDEFINED> instruction: 0x83230567
     50c:	056a0805 	strbeq	r0, [sl, #-2053]!	@ 0xfffff7fb
     510:	0b05301b 	bleq	14c584 <__bss_end+0x126984>
     514:	4c1e0566 	cfldr32mi	mvfx0, [lr], {102}	@ 0x66
     518:	054a1c05 	strbeq	r1, [sl, #-3077]	@ 0xfffff3fb
     51c:	04054a06 	streq	r4, [r5], #-2566	@ 0xfffff5fa
     520:	a5050550 	strge	r0, [r5, #-1360]	@ 0xfffffab0
     524:	05851f05 	streq	r1, [r5, #3845]	@ 0xf05
     528:	06054a07 	streq	r4, [r5], -r7, lsl #20
     52c:	8504054c 	strhi	r0, [r4, #-1356]	@ 0xfffffab4
     530:	040200a0 	streq	r0, [r2], #-160	@ 0xffffff60
     534:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     538:	82030402 	andhi	r0, r3, #33554432	@ 0x2000000
     53c:	03060a05 	movweq	r0, #27141	@ 0x6a05
     540:	05900865 	ldreq	r0, [r0, #2149]	@ 0x865
     544:	05056636 	streq	r6, [r5, #-1590]	@ 0xfffff9ca
     548:	0309056d 	movweq	r0, #38253	@ 0x956d
     54c:	11052e67 	tstne	r5, r7, ror #28
     550:	05823103 	streq	r3, [r2, #259]	@ 0x103
     554:	40088301 	andmi	r8, r8, r1, lsl #6
     558:	31680205 	cmncc	r8, r5, lsl #4
     55c:	05310705 	ldreq	r0, [r1, #-1797]!	@ 0xfffff8fb
     560:	05053023 	streq	r3, [r5, #-35]	@ 0xffffffdd
     564:	4f03054a 	svcmi	0x0003054a
     568:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
     56c:	0302059e 	movweq	r0, #9630	@ 0x259e
     570:	0058080c 	subseq	r0, r8, ip, lsl #16
     574:	06010402 	streq	r0, [r1], -r2, lsl #8
     578:	00122802 	andseq	r2, r2, r2, lsl #16
     57c:	9e030402 	cdpls	4, 0, cr0, cr3, cr2, {0}
     580:	a1061605 	tstge	r6, r5, lsl #12
     584:	059e5505 	ldreq	r5, [lr, #1285]	@ 0x505
     588:	02054a16 	andeq	r4, r5, #90112	@ 0x16000
     58c:	03040568 	movweq	r0, #17768	@ 0x4568
     590:	01052e74 	tsteq	r5, r4, ror lr
     594:	a22e0d03 	eorge	r0, lr, #3, 26	@ 0xc0
     598:	05691205 	strbeq	r1, [r9, #-517]!	@ 0xfffffdfb
     59c:	03054a02 	movweq	r4, #23042	@ 0x5a02
     5a0:	004f0530 	subeq	r0, pc, r0, lsr r5	@ <UNPREDICTABLE>
     5a4:	08030402 	stmdaeq	r3, {r1, sl}
     5a8:	0022051e 	eoreq	r0, r2, lr, lsl r5
     5ac:	66010402 	strvs	r0, [r1], -r2, lsl #8
     5b0:	4b6b0205 	blmi	1ac0dcc <__bss_end+0x1a9b1cc>
     5b4:	4e19054b 	cfmac32mi	mvfx0, mvfx9, mvfx11
     5b8:	05672105 	strbeq	r2, [r7, #-261]!	@ 0xfffffefb
     5bc:	24086701 	strcs	r6, [r8], #-1793	@ 0xfffff8ff
     5c0:	05892205 	streq	r2, [r9, #517]	@ 0x205
     5c4:	02054a12 	andeq	r4, r5, #73728	@ 0x12000
     5c8:	1505834b 	strne	r8, [r5, #-843]	@ 0xfffffcb5
     5cc:	4a3705a0 	bmi	dc1c54 <__bss_end+0xd9c054>
     5d0:	05660405 	strbeq	r0, [r6, #-1029]!	@ 0xfffffbfb
     5d4:	056a4c0b 	strbeq	r4, [sl, #-3083]!	@ 0xfffff3f5
     5d8:	01054d09 	tsteq	r5, r9, lsl #26
     5dc:	000a022f 	andeq	r0, sl, pc, lsr #4
     5e0:	01c90101 	biceq	r0, r9, r1, lsl #2
     5e4:	00030000 	andeq	r0, r3, r0
     5e8:	000000ed 	andeq	r0, r0, sp, ror #1
     5ec:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     5f0:	0101000d 	tsteq	r1, sp
     5f4:	00000101 	andeq	r0, r0, r1, lsl #2
     5f8:	00000100 	andeq	r0, r0, r0, lsl #2
     5fc:	6f682f01 	svcvs	0x00682f01
     600:	792f656d 	stmdbvc	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
     604:	4f2f7868 	svcmi	0x002f7868
     608:	61522f53 	cmpvs	r2, r3, asr pc
     60c:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     610:	50797272 	rsbspl	r7, r9, r2, ror r2
     614:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     618:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     61c:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     620:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     624:	2f534f54 	svccs	0x00534f54
     628:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     62c:	2f006563 	svccs	0x00006563
     630:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     634:	7868792f 	stmdavc	r8!, {r0, r1, r2, r3, r5, r8, fp, ip, sp, lr}^
     638:	2f534f2f 	svccs	0x00534f2f
     63c:	70736152 	rsbsvc	r6, r3, r2, asr r1
     640:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     644:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
     648:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     64c:	534f5452 	movtpl	r5, #62546	@ 0xf452
     650:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
     654:	4f545265 	svcmi	0x00545265
     658:	6f532f53 	svcvs	0x00532f53
     65c:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
     660:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
     664:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
     668:	6f682f00 	svcvs	0x00682f00
     66c:	792f656d 	stmdbvc	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
     670:	4f2f7868 	svcmi	0x002f7868
     674:	61522f53 	cmpvs	r2, r3, asr pc
     678:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     67c:	50797272 	rsbspl	r7, r9, r2, ror r2
     680:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     684:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     688:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     68c:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     690:	2f534f54 	svccs	0x00534f54
     694:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     698:	702f6563 	eorvc	r6, pc, r3, ror #10
     69c:	6174726f 	cmnvs	r4, pc, ror #4
     6a0:	2f656c62 	svccs	0x00656c62
     6a4:	2f434347 	svccs	0x00434347
     6a8:	70736152 	rsbsvc	r6, r3, r2, asr r1
     6ac:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     6b0:	00695079 	rsbeq	r5, r9, r9, ror r0
     6b4:	73696c00 	cmnvc	r9, #0, 24
     6b8:	00632e74 	rsbeq	r2, r3, r4, ror lr
     6bc:	6c000001 	stcvs	0, cr0, [r0], {1}
     6c0:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     6c4:	00020068 	andeq	r0, r2, r8, rrx
     6c8:	726f7000 	rsbvc	r7, pc, #0
     6cc:	63616d74 	cmnvs	r1, #116, 26	@ 0x1d00
     6d0:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     6d4:	00000300 	andeq	r0, r0, r0, lsl #6
     6d8:	00010500 	andeq	r0, r1, r0, lsl #10
     6dc:	0d580205 	lfmeq	f0, 2, [r8, #-20]	@ 0xffffffec
     6e0:	cc030002 	stcgt	0, cr0, [r3], {2}
     6e4:	24050100 	strcs	r0, [r5], #-256	@ 0xffffff00
     6e8:	4a120586 	bmi	481d08 <__bss_end+0x45c108>
     6ec:	054e1e05 	strbeq	r1, [lr, #-3589]	@ 0xfffff1fb
     6f0:	1a056a2c 	bne	15afa8 <__bss_end+0x1353a8>
     6f4:	4b30054a 	blmi	c01c24 <__bss_end+0xbdc024>
     6f8:	054a1e05 	strbeq	r1, [sl, #-3589]	@ 0xfffff1fb
     6fc:	01054c1a 	tsteq	r5, sl, lsl ip
     700:	16058667 	strne	r8, [r5], -r7, ror #12
     704:	67010584 	strvs	r0, [r1, -r4, lsl #11]
     708:	a50a0586 	strge	r0, [sl, #-1414]	@ 0xfffffa7a
     70c:	05682105 	strbeq	r2, [r8, #-261]!	@ 0xfffffefb
     710:	24054a18 	strcs	r4, [r5], #-2584	@ 0xfffff5e8
     714:	4a1c054b 	bmi	701c48 <__bss_end+0x6dc048>
     718:	054b0905 	strbeq	r0, [fp, #-2309]	@ 0xfffff6fb
     71c:	12054a1e 	andne	r4, r5, #122880	@ 0x1e000
     720:	1d05674b 	stcne	7, cr6, [r5, #-300]	@ 0xfffffed4
     724:	680a0569 	stmdavs	sl, {r0, r3, r5, r6, r8, sl}
     728:	054a1d05 	strbeq	r1, [sl, #-3333]	@ 0xfffff2fb
     72c:	05866701 	streq	r6, [r6, #1793]	@ 0x701
     730:	0405a314 	streq	sl, [r5], #-788	@ 0xfffffcec
     734:	05660903 	strbeq	r0, [r6, #-2307]!	@ 0xfffff6fd
     738:	1305680e 	movwne	r6, #22542	@ 0x580e
     73c:	05821403 	streq	r1, [r2, #1027]	@ 0x403
     740:	7c056603 	stcvc	6, cr6, [r5], {3}
     744:	03040200 	movweq	r0, #16896	@ 0x4200
     748:	0046052e 	subeq	r0, r6, lr, lsr #10
     74c:	66010402 	strvs	r0, [r1], -r2, lsl #8
     750:	02004e05 	andeq	r4, r0, #5, 28	@ 0x50
     754:	054a0104 	strbeq	r0, [sl, #-260]	@ 0xfffffefc
     758:	0402005b 	streq	r0, [r2], #-91	@ 0xffffffa5
     75c:	24052e01 	strcs	r2, [r5], #-3585	@ 0xfffff1ff
     760:	4a18056d 	bmi	601d1c <__bss_end+0x5dc11c>
     764:	054b0f05 	strbeq	r0, [fp, #-3845]	@ 0xfffff0fb
     768:	1c054a24 			@ <UNDEFINED> instruction: 0x1c054a24
     76c:	6715054b 	ldrvs	r0, [r5, -fp, asr #10]
     770:	056a1d05 	strbeq	r1, [sl, #-3333]!	@ 0xfffff2fb
     774:	1d05680a 	stcne	8, cr6, [r5, #-40]	@ 0xffffffd8
     778:	6701054a 	strvs	r0, [r1, -sl, asr #10]
     77c:	85100586 	ldrhi	r0, [r0, #-1414]	@ 0xfffffa7a
     780:	054a3505 	strbeq	r3, [sl, #-1285]	@ 0xfffffafb
     784:	10054a25 	andne	r4, r5, r5, lsr #20
     788:	4a35052f 	bmi	d41c4c <__bss_end+0xd1c04c>
     78c:	054a2505 	strbeq	r2, [sl, #-1285]	@ 0xfffffafb
     790:	0c053209 	sfmeq	f3, 4, [r5], {9}
     794:	4a040569 	bmi	101d40 <__bss_end+0xdc140>
     798:	05682305 	strbeq	r2, [r8, #-773]!	@ 0xfffffcfb
     79c:	1e054a13 			@ <UNDEFINED> instruction: 0x1e054a13
     7a0:	670a054d 	strvs	r0, [sl, -sp, asr #10]
     7a4:	054a1d05 	strbeq	r1, [sl, #-3333]	@ 0xfffff2fb
     7a8:	08026701 	stmdaeq	r2, {r0, r8, r9, sl, sp, lr}
     7ac:	5d010100 	stfpls	f0, [r1, #-0]
     7b0:	03000005 	movweq	r0, #5
     7b4:	00015c00 	andeq	r5, r1, r0, lsl #24
     7b8:	fb010200 	blx	40fc2 <__bss_end+0x1b3c2>
     7bc:	01000d0e 	tsteq	r0, lr, lsl #26
     7c0:	00010101 	andeq	r0, r1, r1, lsl #2
     7c4:	00010000 	andeq	r0, r1, r0
     7c8:	682f0100 	stmdavs	pc!, {r8}	@ <UNPREDICTABLE>
     7cc:	2f656d6f 	svccs	0x00656d6f
     7d0:	2f786879 	svccs	0x00786879
     7d4:	522f534f 	eorpl	r5, pc, #1006632961	@ 0x3c000001
     7d8:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     7dc:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     7e0:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     7e4:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     7e8:	2f534f54 	svccs	0x00534f54
     7ec:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     7f0:	534f5452 	movtpl	r5, #62546	@ 0xf452
     7f4:	756f532f 	strbvc	r5, [pc, #-815]!	@ 4cd <_start-0xfb33>
     7f8:	00656372 	rsbeq	r6, r5, r2, ror r3
     7fc:	7273752f 	rsbsvc	r7, r3, #197132288	@ 0xbc00000
     800:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
     804:	6363672f 	cmnvs	r3, #12320768	@ 0xbc0000
     808:	6d72612f 	ldfvse	f6, [r2, #-188]!	@ 0xffffff44
     80c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
     810:	61652d65 	cmnvs	r5, r5, ror #26
     814:	312f6962 			@ <UNDEFINED> instruction: 0x312f6962
     818:	2e322e33 	mrccs	14, 1, r2, cr2, cr3, {1}
     81c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
     820:	64756c63 	ldrbtvs	r6, [r5], #-3171	@ 0xfffff39d
     824:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	@ <UNPREDICTABLE>
     828:	2f656d6f 	svccs	0x00656d6f
     82c:	2f786879 	svccs	0x00786879
     830:	522f534f 	eorpl	r5, pc, #1006632961	@ 0x3c000001
     834:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     838:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     83c:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     840:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     844:	2f534f54 	svccs	0x00534f54
     848:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     84c:	534f5452 	movtpl	r5, #62546	@ 0xf452
     850:	756f532f 	strbvc	r5, [pc, #-815]!	@ 529 <_start-0xfad7>
     854:	2f656372 	svccs	0x00656372
     858:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
     85c:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
     860:	4343472f 	movtmi	r4, #14127	@ 0x372f
     864:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
     868:	72656270 	rsbvc	r6, r5, #112, 4
     86c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     870:	6f682f00 	svcvs	0x00682f00
     874:	792f656d 	stmdbvc	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
     878:	4f2f7868 	svcmi	0x002f7868
     87c:	61522f53 	cmpvs	r2, r3, asr pc
     880:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     884:	50797272 	rsbspl	r7, r9, r2, ror r2
     888:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     88c:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     890:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     894:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     898:	2f534f54 	svccs	0x00534f54
     89c:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     8a0:	692f6563 	stmdbvs	pc!, {r0, r1, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
     8a4:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
     8a8:	2f006564 	svccs	0x00006564
     8ac:	2f727375 	svccs	0x00727375
     8b0:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
     8b4:	2f656475 	svccs	0x00656475
     8b8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
     8bc:	00006269 	andeq	r6, r0, r9, ror #4
     8c0:	75657571 	strbvc	r7, [r5, #-1393]!	@ 0xfffffa8f
     8c4:	00632e65 	rsbeq	r2, r3, r5, ror #28
     8c8:	73000001 	movwvc	r0, #1
     8cc:	65646474 	strbvs	r6, [r4, #-1140]!	@ 0xfffffb8c
     8d0:	00682e66 	rsbeq	r2, r8, r6, ror #28
     8d4:	70000002 	andvc	r0, r0, r2
     8d8:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	@ 0xfffffe44
     8dc:	6f726361 	svcvs	0x00726361
     8e0:	0300682e 	movweq	r6, #2094	@ 0x82e
     8e4:	696c0000 	stmdbvs	ip!, {}^	@ <UNPREDICTABLE>
     8e8:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     8ec:	00000400 	andeq	r0, r0, r0, lsl #8
     8f0:	6b736174 	blvs	1cd8ec8 <__bss_end+0x1cb32c8>
     8f4:	0400682e 	streq	r6, [r0], #-2094	@ 0xfffff7d2
     8f8:	74730000 	ldrbtvc	r0, [r3], #-0
     8fc:	676e6972 			@ <UNDEFINED> instruction: 0x676e6972
     900:	0500682e 	streq	r6, [r0, #-2094]	@ 0xfffff7d2
     904:	6f700000 	svcvs	0x00700000
     908:	62617472 	rsbvs	r7, r1, #1912602624	@ 0x72000000
     90c:	682e656c 	stmdavs	lr!, {r2, r3, r5, r6, r8, sl, sp, lr}
     910:	00000400 	andeq	r0, r0, r0, lsl #8
     914:	00010500 	andeq	r0, r1, r0, lsl #10
     918:	0ff40205 	svceq	0x00f40205
     91c:	97030002 	strls	r0, [r3, -r2]
     920:	02050102 	andeq	r0, r5, #-2147483648	@ 0x80000000
     924:	301c05a1 	andscc	r0, ip, r1, lsr #11
     928:	054a3005 	strbeq	r3, [sl, #-5]
     92c:	3b054a44 	blcc	153244 <__bss_end+0x12d644>
     930:	2e25054a 	cfsh64cs	mvdx0, mvdx5, #42
     934:	052e1305 	streq	r1, [lr, #-773]!	@ 0xfffffcfb
     938:	1f054b1e 	svcne	0x00054b1e
     93c:	4a160567 	bmi	581ee0 <__bss_end+0x55c2e0>
     940:	054b2005 	strbeq	r2, [fp, #-5]
     944:	41054a36 	tstmi	r5, r6, lsr sl
     948:	2e6c054a 	cdpcs	5, 6, cr0, cr12, cr10, {2}
     94c:	054a6305 	strbeq	r6, [sl, #-773]	@ 0xfffffcfb
     950:	17052e29 	strne	r2, [r5, -r9, lsr #28]
     954:	4b14052e 	blmi	501e14 <__bss_end+0x4dc214>
     958:	68050567 	stmdavs	r5, {r0, r1, r2, r5, r6, r8, sl}
     95c:	056d0805 	strbeq	r0, [sp, #-2053]!	@ 0xfffff7fb
     960:	23054a06 	movwcs	r4, #23046	@ 0x5a06
     964:	4a09054c 	bmi	241e9c <__bss_end+0x21c29c>
     968:	02000705 	andeq	r0, r0, #1310720	@ 0x140000
     96c:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
     970:	04054c06 	streq	r4, [r5], #-3078	@ 0xfffff3fa
     974:	02058351 	andeq	r8, r5, #1140850689	@ 0x44000001
     978:	32090585 	andcc	r0, r9, #557842432	@ 0x21400000
     97c:	6a2f0105 	bvs	bc0d98 <__bss_end+0xb9b198>
     980:	05d90e05 	ldrbeq	r0, [r9, #3589]	@ 0xe05
     984:	1d055104 	stfnes	f5, [r5, #-16]
     988:	67050568 	strvs	r0, [r5, -r8, ror #10]
     98c:	056a3305 	strbeq	r3, [sl, #-773]!	@ 0xfffffcfb
     990:	2b056616 	blcs	15a1f0 <__bss_end+0x1345f0>
     994:	0017054c 	andseq	r0, r7, ip, asr #10
     998:	66010402 	strvs	r0, [r1], -r2, lsl #8
     99c:	054b1205 	strbeq	r1, [fp, #-517]	@ 0xfffffdfb
     9a0:	1a054a06 	bne	1531c0 <__bss_end+0x12d5c0>
     9a4:	671c054e 	ldrvs	r0, [ip, -lr, asr #10]
     9a8:	05670505 	strbeq	r0, [r7, #-1285]!	@ 0xfffffafb
     9ac:	05056e0d 	streq	r6, [r5, #-3597]	@ 0xfffff1f3
     9b0:	5109056b 	tstpl	r9, fp, ror #10
     9b4:	032f0105 			@ <UNDEFINED> instruction: 0x032f0105
     9b8:	056601d0 	strbeq	r0, [r6, #-464]!	@ 0xfffffe30
     9bc:	0305d716 	movweq	sp, #22294	@ 0x5716
     9c0:	054a0b03 	strbeq	r0, [sl, #-2819]	@ 0xfffff4fd
     9c4:	2c05320f 	sfmcs	f3, 4, [r5], {15}
     9c8:	4a06054a 	bmi	181ef8 <__bss_end+0x15c2f8>
     9cc:	054d0505 	strbeq	r0, [sp, #-1285]	@ 0xfffffafb
     9d0:	07058609 	streq	r8, [r5, -r9, lsl #12]
     9d4:	4c24054a 	cfstr32mi	mvfx0, [r4], #-296	@ 0xfffffed8
     9d8:	054a0a05 	strbeq	r0, [sl, #-2565]	@ 0xfffff5fb
     9dc:	04020008 	streq	r0, [r2], #-8
     9e0:	07056601 	streq	r6, [r5, -r1, lsl #12]
     9e4:	32050550 	andcc	r0, r5, #80, 10	@ 0x14000000
     9e8:	05320c05 	ldreq	r0, [r2, #-3077]!	@ 0xfffff3fb
     9ec:	07054e16 	smladeq	r5, r6, lr, r4
     9f0:	4e06052e 	cfsh32mi	mvfx0, mvfx6, #30
     9f4:	05330d05 	ldreq	r0, [r3, #-3333]!	@ 0xfffff2fb
     9f8:	06054c0c 	streq	r4, [r5], -ip, lsl #24
     9fc:	6714056a 	ldrvs	r0, [r4, -sl, ror #10]
     a00:	334e0305 	movtcc	r0, #58117	@ 0xe305
     a04:	0402002f 	streq	r0, [r2], #-47	@ 0xffffffd1
     a08:	002e0601 	eoreq	r0, lr, r1, lsl #12
     a0c:	d6030402 	strle	r0, [r3], -r2, lsl #8
     a10:	04040200 	streq	r0, [r4], #-512	@ 0xfffffe00
     a14:	04020082 	streq	r0, [r2], #-130	@ 0xffffff7e
     a18:	07056606 	streq	r6, [r5, -r6, lsl #12]
     a1c:	05053106 	streq	r3, [r5, #-262]	@ 0xfffffefa
     a20:	01040200 	mrseq	r0, R12_usr
     a24:	4c0805ba 	cfstr32mi	mvfx0, [r8], {186}	@ 0xba
     a28:	02000605 	andeq	r0, r0, #5242880	@ 0x500000
     a2c:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
     a30:	05054d1c 	streq	r4, [r5, #-3356]	@ 0xfffff2e4
     a34:	0905894a 	stmdbeq	r5, {r1, r3, r6, r8, fp, pc}
     a38:	00070551 	andeq	r0, r7, r1, asr r5
     a3c:	4a010402 	bmi	41a4c <__bss_end+0x1be4c>
     a40:	054c0605 	strbeq	r0, [ip, #-1541]	@ 0xfffff9fb
     a44:	0e055005 	cdpeq	0, 0, cr5, cr5, cr5, {0}
     a48:	5004054b 	andpl	r0, r4, fp, asr #10
     a4c:	054b0d05 	strbeq	r0, [fp, #-3333]	@ 0xfffff2fb
     a50:	0105330b 	tsteq	r5, fp, lsl #6
     a54:	01d20331 	bicseq	r0, r2, r1, lsr r3
     a58:	03190566 	tsteq	r9, #427819008	@ 0x19800000
     a5c:	0e05d60c 	cfmadd32eq	mvax0, mvfx13, mvfx5, mvfx12
     a60:	4a2b054c 	bmi	ac1f98 <__bss_end+0xa9c398>
     a64:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
     a68:	0f054e04 	svceq	0x00054e04
     a6c:	4a060586 	bmi	18208c <__bss_end+0x15c48c>
     a70:	054c0905 	strbeq	r0, [ip, #-2309]	@ 0xfffff6fb
     a74:	24054a07 	strcs	r4, [r5], #-2567	@ 0xfffff5f9
     a78:	4a0a054c 	bmi	281fb0 <__bss_end+0x25c3b0>
     a7c:	02000805 	andeq	r0, r0, #327680	@ 0x50000
     a80:	05660104 	strbeq	r0, [r6, #-260]!	@ 0xfffffefc
     a84:	23054e09 	movwcs	r4, #24073	@ 0x5e09
     a88:	03100568 	tsteq	r0, #104, 10	@ 0x1a000000
     a8c:	05058209 	streq	r8, [r5, #-521]	@ 0xfffffdf7
     a90:	690c054a 	stmdbvs	ip, {r1, r3, r6, r8, sl}
     a94:	4f09056b 	svcmi	0x0009056b
     a98:	6a2f0105 	bvs	bc0eb4 <__bss_end+0xb9b2b4>
     a9c:	05d71605 	ldrbeq	r1, [r7, #1541]	@ 0x605
     aa0:	4a0d0303 	bmi	3416b4 <__bss_end+0x31bab4>
     aa4:	05320f05 	ldreq	r0, [r2, #-3845]!	@ 0xfffff0fb
     aa8:	1c054a06 			@ <UNDEFINED> instruction: 0x1c054a06
     aac:	6805054d 	stmdavs	r5, {r0, r2, r3, r6, r8, sl}
     ab0:	05680705 	strbeq	r0, [r8, #-1797]!	@ 0xfffff8fb
     ab4:	06056b11 			@ <UNDEFINED> instruction: 0x06056b11
     ab8:	030a054a 	movweq	r0, #42314	@ 0xa54a
     abc:	0805660d 	stmdaeq	r5, {r0, r2, r3, r9, sl, sp, lr}
     ac0:	4c25054a 	cfstr32mi	mvfx0, [r5], #-296	@ 0xfffffed8
     ac4:	054a0b05 	strbeq	r0, [sl, #-2821]	@ 0xfffff4fb
     ac8:	04020009 	streq	r0, [r2], #-9
     acc:	08056601 	stmdaeq	r5, {r0, r9, sl, sp, lr}
     ad0:	031a054c 	tsteq	sl, #76, 10	@ 0x13000000
     ad4:	0a054a0a 	beq	153304 <__bss_end+0x12d704>
     ad8:	4a08056a 	bmi	202088 <__bss_end+0x1dc488>
     adc:	054e2505 	strbeq	r2, [lr, #-1285]	@ 0xfffffafb
     ae0:	09054a0b 	stmdbeq	r5, {r0, r1, r3, r9, fp, lr}
     ae4:	01040200 	mrseq	r0, R12_usr
     ae8:	4d080566 	cfstr32mi	mvfx0, [r8, #-408]	@ 0xfffffe68
     aec:	05330505 	ldreq	r0, [r3, #-1285]!	@ 0xfffffafb
     af0:	16052f0c 	strne	r2, [r5], -ip, lsl #30
     af4:	2e07054e 	cfsh32cs	mvfx0, mvfx7, #46
     af8:	054e0605 	strbeq	r0, [lr, #-1541]	@ 0xfffff9fb
     afc:	0c05300d 	stceq	0, cr3, [r5], {13}
     b00:	6a06054c 	bvs	182038 <__bss_end+0x15c438>
     b04:	05671405 	strbeq	r1, [r7, #-1029]!	@ 0xfffffbfb
     b08:	2f334e03 	svccs	0x00334e03
     b0c:	01040200 	mrseq	r0, R12_usr
     b10:	02002e06 	andeq	r2, r0, #6, 28	@ 0x60
     b14:	00d60304 	sbcseq	r0, r6, r4, lsl #6
     b18:	82040402 	andhi	r0, r4, #33554432	@ 0x2000000
     b1c:	06040200 	streq	r0, [r4], -r0, lsl #4
     b20:	06070566 	streq	r0, [r7], -r6, ror #10
     b24:	00050531 	andeq	r0, r5, r1, lsr r5
     b28:	ba010402 	blt	41b38 <__bss_end+0x1bf38>
     b2c:	054c0805 	strbeq	r0, [ip, #-2053]	@ 0xfffff7fb
     b30:	04020006 	streq	r0, [r2], #-6
     b34:	1c056601 	stcne	6, cr6, [r5], {1}
     b38:	054a1103 	strbeq	r1, [sl, #-259]	@ 0xfffffefd
     b3c:	05834a05 	streq	r4, [r3, #2565]	@ 0xa05
     b40:	07054b09 	streq	r4, [r5, -r9, lsl #22]
     b44:	01040200 	mrseq	r0, R12_usr
     b48:	4c06054a 	cfstr32mi	mvfx0, [r6], {74}	@ 0x4a
     b4c:	05500505 	ldrbeq	r0, [r0, #-1285]	@ 0xfffffafb
     b50:	04054b0e 	streq	r4, [r5], #-2830	@ 0xfffff4f2
     b54:	4b0d054f 	blmi	342098 <__bss_end+0x31c498>
     b58:	05300b05 	ldreq	r0, [r0, #-2821]!	@ 0xfffff4fb
     b5c:	056a3101 	strbeq	r3, [sl, #-257]!	@ 0xfffffeff
     b60:	0e05c119 	mcreq	1, 0, ip, cr5, cr9, {0}
     b64:	4a05054d 	bmi	1420a0 <__bss_end+0x11c4a0>
     b68:	054e0405 	strbeq	r0, [lr, #-1029]	@ 0xfffffbfb
     b6c:	0405670f 	streq	r6, [r5], #-1807	@ 0xfffff8f1
     b70:	6b0f054a 	blvs	3c20a0 <__bss_end+0x39c4a0>
     b74:	054a0605 	strbeq	r0, [sl, #-1541]	@ 0xfffff9fb
     b78:	07054c09 	streq	r4, [r5, -r9, lsl #24]
     b7c:	4c24054a 	cfstr32mi	mvfx0, [r4], #-296	@ 0xfffffed8
     b80:	054a0a05 	strbeq	r0, [sl, #-2565]	@ 0xfffff5fb
     b84:	04020008 	streq	r0, [r2], #-8
     b88:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
     b8c:	6823054e 	stmdavs	r3!, {r1, r2, r3, r6, r8, sl}
     b90:	09031005 	stmdbeq	r3, {r0, r2, ip}
     b94:	4a050582 	bmi	1421a4 <__bss_end+0x11c5a4>
     b98:	6a690c05 	bvs	1a43bb4 <__bss_end+0x1a1dfb4>
     b9c:	05500905 	ldrbeq	r0, [r0, #-2309]	@ 0xfffff6fb
     ba0:	056a2f01 	strbeq	r2, [sl, #-3841]!	@ 0xfffff0ff
     ba4:	0c058702 	stceq	7, cr8, [r5], {2}
     ba8:	6702052f 	strvs	r0, [r2, -pc, lsr #10]
     bac:	05300905 	ldreq	r0, [r0, #-2309]!	@ 0xfffff6fb
     bb0:	056a2f01 	strbeq	r2, [sl, #-3841]!	@ 0xfffff0ff
     bb4:	0905870b 	stmdbeq	r5, {r0, r1, r3, r8, r9, sl, pc}
     bb8:	2f010568 	svccs	0x00010568
     bbc:	87140586 	ldrhi	r0, [r4, -r6, lsl #11]
     bc0:	4b4a0205 	blmi	12813dc <__bss_end+0x125b7dc>
     bc4:	034b0105 	movteq	r0, #45317	@ 0xb105
     bc8:	0d056622 	stceq	6, cr6, [r5, #-136]	@ 0xffffff78
     bcc:	4a0405bb 	bmi	1022c0 <__bss_end+0xdc6c0>
     bd0:	0d030905 	vstreq.16	s0, [r3, #-10]	@ <UNPREDICTABLE>
     bd4:	681d054a 	ldmdavs	sp, {r1, r3, r6, r8, sl}
     bd8:	054a4d05 	strbeq	r4, [sl, #-3333]	@ 0xfffff2fb
     bdc:	0a054a03 	beq	1533f0 <__bss_end+0x12d7f0>
     be0:	4a200567 	bmi	802184 <__bss_end+0x7dc584>
     be4:	054a1605 	strbeq	r1, [sl, #-1541]	@ 0xfffff9fb
     be8:	2405670e 	strcs	r6, [r5], #-1806	@ 0xfffff8f2
     bec:	4a05054a 	bmi	14211c <__bss_end+0x11c51c>
     bf0:	054c2005 	strbeq	r2, [ip, #-5]
     bf4:	1d054a17 	vstrne	s8, [r5, #-92]	@ 0xffffffa4
     bf8:	4a4e056b 	bmi	13821ac <__bss_end+0x135c5ac>
     bfc:	054a0305 	strbeq	r0, [sl, #-773]	@ 0xfffffcfb
     c00:	2105670a 	tstcs	r5, sl, lsl #14
     c04:	4a17054a 	bmi	5c2134 <__bss_end+0x59c534>
     c08:	05830e05 	streq	r0, [r3, #3589]	@ 0xe05
     c0c:	05054a24 	streq	r4, [r5, #-2596]	@ 0xfffff5dc
     c10:	4c23054a 	cfstr32mi	mvfx0, [r3], #-296	@ 0xfffffed8
     c14:	054a3505 	strbeq	r3, [sl, #-1285]	@ 0xfffffafb
     c18:	18054a2c 	stmdane	r5, {r2, r3, r5, r9, fp, lr}
     c1c:	4e0d054a 	cfsh32mi	mvfx0, mvfx13, #42
     c20:	054a0205 	strbeq	r0, [sl, #-517]	@ 0xfffffdfb
     c24:	056a6701 	strbeq	r6, [sl, #-1793]!	@ 0xfffff8ff
     c28:	04059f0d 	streq	r9, [r5], #-3853	@ 0xfffff0f3
     c2c:	4c0a054a 	cfstr32mi	mvfx0, [sl], {74}	@ 0x4a
     c30:	054a2105 	strbeq	r2, [sl, #-261]	@ 0xfffffefb
     c34:	0e054a17 			@ <UNDEFINED> instruction: 0x0e054a17
     c38:	4a250567 	bmi	9421dc <__bss_end+0x91c5dc>
     c3c:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
     c40:	18054c21 	stmdane	r5, {r0, r5, sl, fp, lr}
     c44:	4c32054a 	cfldr32mi	mvfx0, [r2], #-296	@ 0xfffffed8
     c48:	054a5405 	strbeq	r5, [sl, #-1029]	@ 0xfffffbfb
     c4c:	01054a03 	tsteq	r5, r3, lsl #20
     c50:	02056a68 	andeq	r6, r5, #104, 20	@ 0x68000
     c54:	31080589 	smlabbcc	r8, r9, r5, r0
     c58:	4a060532 	bmi	182128 <__bss_end+0x15c528>
     c5c:	054e2305 	strbeq	r2, [lr, #-773]	@ 0xfffffcfb
     c60:	07054a09 	streq	r4, [r5, -r9, lsl #20]
     c64:	01040200 	mrseq	r0, R12_usr
     c68:	4e060566 	cfsh32mi	mvfx0, mvfx6, #54
     c6c:	05311005 	ldreq	r1, [r1, #-5]!
     c70:	11054a05 	tstne	r5, r5, lsl #20
     c74:	05667103 	strbeq	r7, [r6, #-259]!	@ 0xfffffefd
     c78:	05054a1b 	streq	r4, [r5, #-2587]	@ 0xfffff5e5
     c7c:	05661303 	strbeq	r1, [r6, #-771]!	@ 0xfffffcfd
     c80:	02053214 	andeq	r3, r5, #20, 4	@ 0x40000001
     c84:	08053168 	stmdaeq	r5, {r3, r5, r6, r8, ip, sp}
     c88:	06053030 			@ <UNDEFINED> instruction: 0x06053030
     c8c:	4c23054a 	cfstr32mi	mvfx0, [r3], #-296	@ 0xfffffed8
     c90:	054a0905 	strbeq	r0, [sl, #-2309]	@ 0xfffff6fb
     c94:	04020007 	streq	r0, [r2], #-7
     c98:	06056601 	streq	r6, [r5], -r1, lsl #12
     c9c:	3110054c 	tstcc	r0, ip, asr #10
     ca0:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
     ca4:	66770311 			@ <UNDEFINED> instruction: 0x66770311
     ca8:	054a1b05 	strbeq	r1, [sl, #-2821]	@ 0xfffff4fb
     cac:	660d0305 	strvs	r0, [sp], -r5, lsl #6
     cb0:	05321405 	ldreq	r1, [r2, #-1029]!	@ 0xfffffbfb
     cb4:	01056802 	tsteq	r5, r2, lsl #16
     cb8:	02056a2f 	andeq	r6, r5, #192512	@ 0x2f000
     cbc:	2f160585 	svccs	0x00160585
     cc0:	054a2a05 	strbeq	r2, [sl, #-2565]	@ 0xfffff5fb
     cc4:	0205820b 	andeq	r8, r5, #-1342177280	@ 0xb0000000
     cc8:	3009052f 	andcc	r0, r9, pc, lsr #10
     ccc:	6a2f0105 	bvs	bc10e8 <__bss_end+0xb9b4e8>
     cd0:	05861505 	streq	r1, [r6, #1285]	@ 0x505
     cd4:	0a054a29 	beq	153580 <__bss_end+0x12d980>
     cd8:	30090582 	andcc	r0, r9, r2, lsl #11
     cdc:	862f0105 	strthi	r0, [pc], -r5, lsl #2
     ce0:	05850205 	streq	r0, [r5, #517]	@ 0x205
     ce4:	34052f16 	strcc	r2, [r5], #-3862	@ 0xfffff0ea
     ce8:	4a2a054a 	bmi	a82218 <__bss_end+0xa5c618>
     cec:	05820b05 	streq	r0, [r2, #2821]	@ 0xb05
     cf0:	09052f02 	stmdbeq	r5, {r1, r8, r9, sl, fp, sp}
     cf4:	2f010530 	svccs	0x00010530
     cf8:	8615056a 	ldrhi	r0, [r5], -sl, ror #10
     cfc:	054a3305 	strbeq	r3, [sl, #-773]	@ 0xfffffcfb
     d00:	0a054a29 	beq	1535ac <__bss_end+0x12d9ac>
     d04:	30090582 	andcc	r0, r9, r2, lsl #11
     d08:	022f0105 	eoreq	r0, pc, #1073741825	@ 0x40000001
     d0c:	01010008 	tsteq	r1, r8
     d10:	0000084d 	andeq	r0, r0, sp, asr #16
     d14:	01780003 	cmneq	r8, r3
     d18:	01020000 	mrseq	r0, (UNDEF: 2)
     d1c:	000d0efb 	strdeq	r0, [sp], -fp
     d20:	01010101 	tsteq	r1, r1, lsl #2
     d24:	01000000 	mrseq	r0, (UNDEF: 0)
     d28:	2f010000 	svccs	0x00010000
     d2c:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     d30:	7868792f 	stmdavc	r8!, {r0, r1, r2, r3, r5, r8, fp, ip, sp, lr}^
     d34:	2f534f2f 	svccs	0x00534f2f
     d38:	70736152 	rsbsvc	r6, r3, r2, asr r1
     d3c:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     d40:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
     d44:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     d48:	534f5452 	movtpl	r5, #62546	@ 0xf452
     d4c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
     d50:	4f545265 	svcmi	0x00545265
     d54:	6f532f53 	svcvs	0x00532f53
     d58:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
     d5c:	73752f00 	cmnvc	r5, #0, 30
     d60:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     d64:	63672f62 	cmnvs	r7, #392	@ 0x188
     d68:	72612f63 	rsbvc	r2, r1, #396	@ 0x18c
     d6c:	6f6e2d6d 	svcvs	0x006e2d6d
     d70:	652d656e 	strvs	r6, [sp, #-1390]!	@ 0xfffffa92
     d74:	2f696261 	svccs	0x00696261
     d78:	322e3331 	eorcc	r3, lr, #-1006632960	@ 0xc4000000
     d7c:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	@ <UNPREDICTABLE>
     d80:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
     d84:	2f006564 	svccs	0x00006564
     d88:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     d8c:	7868792f 	stmdavc	r8!, {r0, r1, r2, r3, r5, r8, fp, ip, sp, lr}^
     d90:	2f534f2f 	svccs	0x00534f2f
     d94:	70736152 	rsbsvc	r6, r3, r2, asr r1
     d98:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     d9c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
     da0:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     da4:	534f5452 	movtpl	r5, #62546	@ 0xf452
     da8:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
     dac:	4f545265 	svcmi	0x00545265
     db0:	6f532f53 	svcvs	0x00532f53
     db4:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
     db8:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
     dbc:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
     dc0:	6f682f00 	svcvs	0x00682f00
     dc4:	792f656d 	stmdbvc	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
     dc8:	4f2f7868 	svcmi	0x002f7868
     dcc:	61522f53 	cmpvs	r2, r3, asr pc
     dd0:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     dd4:	50797272 	rsbspl	r7, r9, r2, ror r2
     dd8:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     ddc:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     de0:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     de4:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     de8:	2f534f54 	svccs	0x00534f54
     dec:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     df0:	702f6563 	eorvc	r6, pc, r3, ror #10
     df4:	6174726f 	cmnvs	r4, pc, ror #4
     df8:	2f656c62 	svccs	0x00656c62
     dfc:	2f434347 	svccs	0x00434347
     e00:	70736152 	rsbsvc	r6, r3, r2, asr r1
     e04:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     e08:	00695079 	rsbeq	r5, r9, r9, ror r0
     e0c:	7273752f 	rsbsvc	r7, r3, #197132288	@ 0xbc00000
     e10:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
     e14:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
     e18:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
     e1c:	0062696c 	rsbeq	r6, r2, ip, ror #18
     e20:	73617400 	cmnvc	r1, #0, 8
     e24:	632e736b 			@ <UNDEFINED> instruction: 0x632e736b
     e28:	00000100 	andeq	r0, r0, r0, lsl #2
     e2c:	64647473 	strbtvs	r7, [r4], #-1139	@ 0xfffffb8d
     e30:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     e34:	00000200 	andeq	r0, r0, r0, lsl #4
     e38:	6a6f7270 	bvs	1bdd800 <__bss_end+0x1bb7c00>
     e3c:	73666564 	cmnvc	r6, #100, 10	@ 0x19000000
     e40:	0300682e 	movweq	r6, #2094	@ 0x82e
     e44:	6f700000 	svcvs	0x00700000
     e48:	616d7472 	smcvs	55106	@ 0xd742
     e4c:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     e50:	00040068 	andeq	r0, r4, r8, rrx
     e54:	65724600 	ldrbvs	r4, [r2, #-1536]!	@ 0xfffffa00
     e58:	4f545265 	svcmi	0x00545265
     e5c:	00682e53 	rsbeq	r2, r8, r3, asr lr
     e60:	6c000003 	stcvs	0, cr0, [r0], {3}
     e64:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     e68:	00030068 	andeq	r0, r3, r8, rrx
     e6c:	73617400 	cmnvc	r1, #0, 8
     e70:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     e74:	73000003 	movwvc	r0, #3
     e78:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     e7c:	00682e67 	rsbeq	r2, r8, r7, ror #28
     e80:	70000005 	andvc	r0, r0, r5
     e84:	6174726f 	cmnvs	r4, pc, ror #4
     e88:	2e656c62 	cdpcs	12, 6, cr6, cr5, cr2, {3}
     e8c:	00030068 	andeq	r0, r3, r8, rrx
     e90:	01050000 	mrseq	r0, (UNDEF: 5)
     e94:	a4020500 	strge	r0, [r2], #-1280	@ 0xfffffb00
     e98:	0300021b 	movweq	r0, #539	@ 0x21b
     e9c:	0501039b 	streq	r0, [r1, #-923]	@ 0xfffffc65
     ea0:	f209030d 	vcgt.s8	d0, d9, d13
     ea4:	05a00405 	streq	r0, [r0, #1029]!	@ 0x405
     ea8:	6618031b 			@ <UNDEFINED> instruction: 0x6618031b
     eac:	054a2505 	strbeq	r2, [sl, #-1285]	@ 0xfffffafb
     eb0:	2c056611 	stccs	6, cr6, [r5], {17}
     eb4:	2e55054b 	cdpcs	5, 5, cr0, cr5, cr11, {2}
     eb8:	052e1105 	streq	r1, [lr, #-261]!	@ 0xfffffefb
     ebc:	2e140303 	cdpcs	3, 1, cr0, cr4, cr3, {0}
     ec0:	0c031d05 	stceq	13, cr1, [r3], {5}
     ec4:	001b05d6 			@ <UNDEFINED> instruction: 0x001b05d6
     ec8:	9e010402 	cdpls	4, 0, cr0, cr1, cr2, {0}
     ecc:	05510505 	ldrbeq	r0, [r1, #-1285]	@ 0xfffffafb
     ed0:	03056b13 	movweq	r6, #23315	@ 0x5b13
     ed4:	301a056b 	andscc	r0, sl, fp, ror #10
     ed8:	059f1505 	ldreq	r1, [pc, #1285]	@ 13e5 <_start-0xec1b>
     edc:	12054a06 	andne	r4, r5, #24576	@ 0x6000
     ee0:	6820054e 	stmdavs	r0!, {r1, r2, r3, r6, r8, sl}
     ee4:	054a0705 	strbeq	r0, [sl, #-1797]	@ 0xfffff8fb
     ee8:	1b054f06 	blne	154b08 <__bss_end+0x12ef08>
     eec:	4a070552 	bmi	1c243c <__bss_end+0x19c83c>
     ef0:	054c1605 	strbeq	r1, [ip, #-1541]	@ 0xfffff9fb
     ef4:	14056608 	strne	r6, [r5], #-1544	@ 0xfffff9f8
     ef8:	6d100568 	cfldr32vs	mvfx0, [r0, #-416]	@ 0xfffffe60
     efc:	054a1d05 	strbeq	r1, [sl, #-3333]	@ 0xfffff2fb
     f00:	21054a06 	tstcs	r5, r6, lsl #20
     f04:	4a17054c 	bmi	5c243c <__bss_end+0x59c83c>
     f08:	09031005 	stmdbeq	r3, {r0, r2, ip}
     f0c:	a004054a 	andge	r0, r4, sl, asr #10
     f10:	01040200 	mrseq	r0, R12_usr
     f14:	0200ba06 	andeq	fp, r0, #24576	@ 0x6000
     f18:	05820304 	streq	r0, [r2, #772]	@ 0x304
     f1c:	9208060c 	andls	r0, r8, #12, 12	@ 0xc00000
     f20:	054e0305 	strbeq	r0, [lr, #-773]	@ 0xfffffcfb
     f24:	04054e0b 	streq	r4, [r5], #-3595	@ 0xfffff1f5
     f28:	6819054e 	ldmdavs	r9, {r1, r2, r3, r6, r8, sl}
     f2c:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
     f30:	06054e14 			@ <UNDEFINED> instruction: 0x06054e14
     f34:	68050566 	stmdavs	r5, {r1, r2, r5, r6, r8, sl}
     f38:	05330905 	ldreq	r0, [r3, #-2309]!	@ 0xfffff6fb
     f3c:	02052f01 	andeq	r2, r5, #1, 30
     f40:	03054208 	movweq	r4, #21000	@ 0x5208
     f44:	32170585 	andscc	r0, r7, #557842432	@ 0x21400000
     f48:	054a0605 	strbeq	r0, [sl, #-1541]	@ 0xfffff9fb
     f4c:	0c056814 	stceq	8, cr6, [r5], {20}
     f50:	0402004e 	streq	r0, [r2], #-78	@ 0xffffffb2
     f54:	00660601 	rsbeq	r0, r6, r1, lsl #12
     f58:	66020402 	strvs	r0, [r2], -r2, lsl #8
     f5c:	02000a05 	andeq	r0, r0, #20480	@ 0x5000
     f60:	2e060404 	cdpcs	4, 0, cr0, cr6, cr4, {0}
     f64:	05340405 	ldreq	r0, [r4, #-1029]!	@ 0xfffffbfb
     f68:	0605851d 			@ <UNDEFINED> instruction: 0x0605851d
     f6c:	4c05054a 	cfstr32mi	mvfx0, [r5], {74}	@ 0x4a
     f70:	a3850405 	orrge	r0, r5, #83886080	@ 0x5000000
     f74:	05a21005 	streq	r1, [r2, #5]!
     f78:	1905a203 	stmdbne	r5, {r0, r1, r9, sp, pc}
     f7c:	4a050531 	bmi	142448 <__bss_end+0x11c848>
     f80:	054c0605 	strbeq	r0, [ip, #-1541]	@ 0xfffff9fb
     f84:	02056805 	andeq	r6, r5, #327680	@ 0x50000
     f88:	f2100331 	vcge.s16	d0, d0, d17
     f8c:	05a02105 	streq	r2, [r0, #261]!	@ 0x105
     f90:	12054f03 	andne	r4, r5, #3, 30
     f94:	4a100531 	bmi	402460 <__bss_end+0x3dc860>
     f98:	05681505 	strbeq	r1, [r8, #-1285]!	@ 0xfffffafb
     f9c:	06054a13 			@ <UNDEFINED> instruction: 0x06054a13
     fa0:	5119054a 	tstpl	r9, sl, asr #10
     fa4:	054a0705 	strbeq	r0, [sl, #-1797]	@ 0xfffff8fb
     fa8:	04020040 	streq	r0, [r2], #-64	@ 0xffffffc0
     fac:	2f056601 	svccs	0x00056601
     fb0:	01040200 	mrseq	r0, R12_usr
     fb4:	6813054a 	ldmdavs	r3, {r1, r3, r6, r8, sl}
     fb8:	056e1905 	strbeq	r1, [lr, #-2309]!	@ 0xfffff6fb
     fbc:	40054a07 	andmi	r4, r5, r7, lsl #20
     fc0:	01040200 	mrseq	r0, R12_usr
     fc4:	002f0566 	eoreq	r0, pc, r6, ror #10
     fc8:	4a010402 	bmi	41fd8 <__bss_end+0x1c3d8>
     fcc:	05681305 	strbeq	r1, [r8, #-773]!	@ 0xfffffcfb
     fd0:	06054f18 			@ <UNDEFINED> instruction: 0x06054f18
     fd4:	6d310568 	cfldr32vs	mvfx0, [r1, #-416]!	@ 0xfffffe60
     fd8:	674a0505 	strbvs	r0, [sl, -r5, lsl #10]
     fdc:	054d1505 	strbeq	r1, [sp, #-1285]	@ 0xfffffafb
     fe0:	04054e05 	streq	r4, [r5], #-3589	@ 0xfffff1fb
     fe4:	30020568 	andcc	r0, r2, r8, ror #10
     fe8:	841705a6 	ldrhi	r0, [r7], #-1446	@ 0xfffffa5a
     fec:	054d0505 	strbeq	r0, [sp, #-1285]	@ 0xfffffafb
     ff0:	1e056804 	cdpne	8, 0, cr6, cr5, cr4, {0}
     ff4:	052e0e03 	streq	r0, [lr, #-3587]!	@ 0xfffff1fd
     ff8:	31054a11 	tstcc	r5, r1, lsl sl
     ffc:	4a05056b 	bmi	1425b0 <__bss_end+0x11c9b0>
    1000:	4c160567 	cfldr32mi	mvfx0, [r6], {103}	@ 0x67
    1004:	054f0505 	strbeq	r0, [pc, #-1285]	@ b07 <_start-0xf4f9>
    1008:	02056804 	andeq	r6, r5, #4, 16	@ 0x40000
    100c:	0305a630 	movweq	sl, #22064	@ 0x5630
    1010:	320c0586 	andcc	r0, ip, #562036736	@ 0x21800000
    1014:	01040200 	mrseq	r0, R12_usr
    1018:	02006606 	andeq	r6, r0, #6291456	@ 0x600000
    101c:	05660204 	strbeq	r0, [r6, #-516]!	@ 0xfffffdfc
    1020:	0402000a 	streq	r0, [r2], #-10
    1024:	052e0604 	streq	r0, [lr, #-1540]!	@ 0xfffff9fc
    1028:	03052f0d 	movweq	r2, #24333	@ 0x5f0d
    102c:	300a0568 	andcc	r0, sl, r8, ror #10
    1030:	8a2f0205 	bhi	bc184c <__bss_end+0xb9bc4c>
    1034:	05a11005 	streq	r1, [r1, #5]!
    1038:	12054f05 	andne	r4, r5, #5, 30
    103c:	4d030568 	cfstr32mi	mvfx0, [r3, #-416]	@ 0xfffffe60
    1040:	05300f05 	ldreq	r0, [r0, #-3845]!	@ 0xfffff0fb
    1044:	0c054a06 			@ <UNDEFINED> instruction: 0x0c054a06
    1048:	02004f68 	andeq	r4, r0, #104, 30	@ 0x1a0
    104c:	66060104 	strvs	r0, [r6], -r4, lsl #2
    1050:	02040200 	andeq	r0, r4, #0, 4
    1054:	000a0566 	andeq	r0, sl, r6, ror #10
    1058:	06040402 	streq	r0, [r4], -r2, lsl #8
    105c:	0317052e 	tsteq	r7, #192937984	@ 0xb800000
    1060:	06052e0a 	streq	r2, [r5], -sl, lsl #28
    1064:	8607056a 	strhi	r0, [r7], -sl, ror #10
    1068:	05840805 	streq	r0, [r4, #2053]	@ 0x805
    106c:	0c056c16 	stceq	12, cr6, [r5], {22}
    1070:	6a150569 	bvs	54261c <__bss_end+0x51ca1c>
    1074:	13031805 	movwne	r1, #14341	@ 0x3805
    1078:	6a05054a 	bvs	1425a8 <__bss_end+0x11c9a8>
    107c:	05880905 	streq	r0, [r8, #2309]	@ 0x905
    1080:	05200807 	streq	r0, [r0, #-2055]!	@ 0xfffff7f9
    1084:	00834f06 	addeq	r4, r3, r6, lsl #30
    1088:	06010402 	streq	r0, [r1], -r2, lsl #8
    108c:	040200ba 	streq	r0, [r2], #-186	@ 0xffffff46
    1090:	07058203 	streq	r8, [r5, -r3, lsl #4]
    1094:	05930806 	ldreq	r0, [r3, #2054]	@ 0x806
    1098:	03056806 	movweq	r6, #22534	@ 0x5806
    109c:	2f020532 	svccs	0x00020532
    10a0:	850305c2 	strhi	r0, [r3, #-1474]	@ 0xfffffa3e
    10a4:	05321805 	ldreq	r1, [r2, #-2053]!	@ 0xfffff7fb
    10a8:	15054a06 	strne	r4, [r5, #-2566]	@ 0xfffff5fa
    10ac:	4e0c0568 	cfsh32mi	mvfx0, mvfx12, #56
    10b0:	01040200 	mrseq	r0, R12_usr
    10b4:	02006606 	andeq	r6, r0, #6291456	@ 0x600000
    10b8:	05660204 	strbeq	r0, [r6, #-516]!	@ 0xfffffdfc
    10bc:	0402000a 	streq	r0, [r2], #-10
    10c0:	052e0604 	streq	r0, [lr, #-1540]!	@ 0xfffff9fc
    10c4:	1d053304 	stcne	3, cr3, [r5, #-16]
    10c8:	4a060585 	bmi	1826e4 <__bss_end+0x15cae4>
    10cc:	054c0505 	strbeq	r0, [ip, #-1285]	@ 0xfffffafb
    10d0:	03058504 	movweq	r8, #21764	@ 0x5504
    10d4:	300505a0 	andcc	r0, r5, r0, lsr #11
    10d8:	05681a05 	strbeq	r1, [r8, #-2565]!	@ 0xfffff5fb
    10dc:	05054a06 	streq	r4, [r5, #-2566]	@ 0xfffff5fa
    10e0:	0302054d 	movweq	r0, #9549	@ 0x254d
    10e4:	09052e15 	stmdbeq	r5, {r0, r2, r4, r9, sl, fp, sp}
    10e8:	052e7203 	streq	r7, [lr, #-515]!	@ 0xfffffdfd
    10ec:	07054a38 	smladxeq	r5, r8, sl, r4
    10f0:	5013054a 	andspl	r0, r3, sl, asr #10
    10f4:	056e0205 	strbeq	r0, [lr, #-517]!	@ 0xfffffdfb
    10f8:	02052a06 	andeq	r2, r5, #24576	@ 0x6000
    10fc:	1005de32 	andne	sp, r5, r2, lsr lr
    1100:	4b170583 	blmi	5c2714 <__bss_end+0x59cb14>
    1104:	05510705 	ldrbeq	r0, [r1, #-1797]	@ 0xfffff8fb
    1108:	08054a05 	stmdaeq	r5, {r0, r2, r9, fp, lr}
    110c:	4a060569 	bmi	1826b8 <__bss_end+0x15cab8>
    1110:	056c0905 	strbeq	r0, [ip, #-2309]!	@ 0xfffff6fb
    1114:	0e054a07 	vmlaeq.f32	s8, s10, s14
    1118:	4f0a054c 	svcmi	0x000a054c
    111c:	c22f0205 	eorgt	r0, pc, #1342177280	@ 0x50000000
    1120:	058a0905 	streq	r0, [sl, #2309]	@ 0x905
    1124:	24054e05 	strcs	r4, [r5], #-3589	@ 0xfffff1fb
    1128:	01040200 	mrseq	r0, R12_usr
    112c:	00190566 	andseq	r0, r9, r6, ror #10
    1130:	4a010402 	bmi	42140 <__bss_end+0x1c540>
    1134:	05680405 	strbeq	r0, [r8, #-1029]!	@ 0xfffffbfb
    1138:	07053009 	streq	r3, [r5, -r9]
    113c:	01040200 	mrseq	r0, R12_usr
    1140:	50060566 	andpl	r0, r6, r6, ror #10
    1144:	04020083 	streq	r0, [r2], #-131	@ 0xffffff7d
    1148:	00ba0601 	adcseq	r0, sl, r1, lsl #12
    114c:	82030402 	andhi	r0, r3, #33554432	@ 0x2000000
    1150:	08060f05 	stmdaeq	r6, {r0, r2, r8, r9, sl, fp}
    1154:	4a2b0593 	bmi	ac27a8 <__bss_end+0xa9cba8>
    1158:	05660805 	strbeq	r0, [r6, #-2053]!	@ 0xfffff7fb
    115c:	04054e07 	streq	r4, [r5], #-3591	@ 0xfffff1f9
    1160:	30020532 	andcc	r0, r2, r2, lsr r5
    1164:	05ba0903 	ldreq	r0, [sl, #2307]!	@ 0x903
    1168:	09058310 	stmdbeq	r5, {r4, r8, r9, pc}
    116c:	4c1a0550 	cfldr32mi	mvfx0, [sl], {80}	@ 0x50
    1170:	054c0805 	strbeq	r0, [ip, #-2053]	@ 0xfffff7fb
    1174:	04020006 	streq	r0, [r2], #-6
    1178:	1e056601 	cfmadd32ne	mvax0, mvfx6, mvfx5, mvfx1
    117c:	4a07054e 	bmi	1c26bc <__bss_end+0x19cabc>
    1180:	054c1e05 	strbeq	r1, [ip, #-3589]	@ 0xfffff1fb
    1184:	2b054a3a 	blcs	153a74 <__bss_end+0x12de74>
    1188:	82150566 	andshi	r0, r5, #427819008	@ 0x19800000
    118c:	832f0605 			@ <UNDEFINED> instruction: 0x832f0605
    1190:	01040200 	mrseq	r0, R12_usr
    1194:	0200ba06 	andeq	fp, r0, #24576	@ 0x6000
    1198:	06820304 	streq	r0, [r2], r4, lsl #6
    119c:	0a05b308 	beq	16ddc4 <__bss_end+0x1481c4>
    11a0:	2f0205a4 	svccs	0x000205a4
    11a4:	0d030105 	stfeqs	f0, [r3, #-20]	@ 0xffffffec
    11a8:	030d05f2 	movweq	r0, #54770	@ 0xd5f2
    11ac:	0405660d 	streq	r6, [r5], #-1549	@ 0xfffff9f3
    11b0:	ac080d03 	stcge	13, cr0, [r8], {3}
    11b4:	0a030305 	beq	c1dd0 <__bss_end+0x9c1d0>
    11b8:	a0150566 	andsge	r0, r5, r6, ror #10
    11bc:	05670e05 	strbeq	r0, [r7, #-3589]!	@ 0xfffff1fb
    11c0:	66090307 	strvs	r0, [r9], -r7, lsl #6
    11c4:	0d030105 	stfeqs	f0, [r3, #-20]	@ 0xffffffec
    11c8:	0205da2e 	andeq	sp, r5, #188416	@ 0x2e000
    11cc:	9f14054e 	svcls	0x0014054e
    11d0:	05670205 	strbeq	r0, [r7, #-517]!	@ 0xfffffdfb
    11d4:	056a2f01 	strbeq	r2, [sl, #-3841]!	@ 0xfffff0ff
    11d8:	01054d02 	tsteq	r5, r2, lsl #26
    11dc:	1605a29f 			@ <UNDEFINED> instruction: 0x1605a29f
    11e0:	03020568 	movweq	r0, #9576	@ 0x2568
    11e4:	03054a0b 	movweq	r4, #23051	@ 0x5a0b
    11e8:	a01c0530 	andsge	r0, ip, r0, lsr r5
    11ec:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
    11f0:	06054c1f 			@ <UNDEFINED> instruction: 0x06054c1f
    11f4:	4c13054a 	cfldr32mi	mvfx0, [r3], {74}	@ 0x4a
    11f8:	054e0a05 	strbeq	r0, [lr, #-2565]	@ 0xfffff5fb
    11fc:	0c05301b 	stceq	0, cr3, [r5], {27}
    1200:	2f06054a 	svccs	0x0006054a
    1204:	02006767 	andeq	r6, r0, #27000832	@ 0x19c0000
    1208:	9e060104 	adflss	f0, f6, f4
    120c:	03040200 	movweq	r0, #16896	@ 0x4200
    1210:	060f0566 	streq	r0, [pc], -r6, ror #10
    1214:	2b055c08 	blcs	15823c <__bss_end+0x13263c>
    1218:	6608052e 	strvs	r0, [r8], -lr, lsr #10
    121c:	054c1605 	strbeq	r1, [ip, #-1541]	@ 0xfffff9fb
    1220:	4a75030c 	bmi	1d41e58 <__bss_end+0x1d1c258>
    1224:	054a4005 	strbeq	r4, [sl, #-5]
    1228:	4a120317 	bmi	481e8c <__bss_end+0x45c28c>
    122c:	054a0705 	strbeq	r0, [sl, #-1797]	@ 0xfffff8fb
    1230:	07054c0b 	streq	r4, [r5, -fp, lsl #24]
    1234:	1b052f30 	blne	14cefc <__bss_end+0x1272fc>
    1238:	0316059b 	tsteq	r6, #650117120	@ 0x26c00000
    123c:	0705820b 	streq	r8, [r5, -fp, lsl #4]
    1240:	0038054f 	eorseq	r0, r8, pc, asr #10
    1244:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1248:	02002605 	andeq	r2, r0, #5242880	@ 0x500000
    124c:	054a0104 	strbeq	r0, [sl, #-260]	@ 0xfffffefc
    1250:	13054c16 	movwne	r4, #23574	@ 0x5c16
    1254:	6706054b 	strvs	r0, [r6, -fp, asr #10]
    1258:	05330205 	ldreq	r0, [r3, #-517]!	@ 0xfffffdfb
    125c:	01053009 	tsteq	r5, r9
    1260:	080e032f 	stmdaeq	lr, {r0, r1, r2, r3, r5, r8, r9}
    1264:	6a020558 	bvs	827cc <__bss_end+0x5cbcc>
    1268:	05300a05 	ldreq	r0, [r0, #-2565]!	@ 0xfffff5fb
    126c:	09056802 	stmdbeq	r5, {r1, fp, sp, lr}
    1270:	2f010530 	svccs	0x00010530
    1274:	6a190586 	bvs	642894 <__bss_end+0x61cc94>
    1278:	054b0a05 	strbeq	r0, [fp, #-2565]	@ 0xfffff5fb
    127c:	01056909 	tsteq	r5, r9, lsl #18
    1280:	0905a22f 	stmdbeq	r5, {r0, r1, r2, r3, r5, r9, sp, pc}
    1284:	4b01054d 	blmi	427c0 <__bss_end+0x1cbc0>
    1288:	9e01ae03 	cdpls	14, 0, cr10, cr1, cr3, {0}
    128c:	056c1b05 	strbeq	r1, [ip, #-2821]!	@ 0xfffff4fb
    1290:	03054a04 	movweq	r4, #23044	@ 0x5a04
    1294:	9f12054c 	svcls	0x0012054c
    1298:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
    129c:	4a09030b 	bmi	241ed0 <__bss_end+0x21c2d0>
    12a0:	05671605 	strbeq	r1, [r7, #-1541]!	@ 0xfffff9fb
    12a4:	1305831e 	movwne	r8, #21278	@ 0x531e
    12a8:	a0080567 	andge	r0, r8, r7, ror #10
    12ac:	05660605 	strbeq	r0, [r6, #-1541]!	@ 0xfffff9fb
    12b0:	058a511a 	streq	r5, [sl, #282]	@ 0x11a
    12b4:	1c05660b 	stcne	6, cr6, [r5], {11}
    12b8:	4a1a054b 	bmi	6827ec <__bss_end+0x65cbec>
    12bc:	004f0305 	subeq	r0, pc, r5, lsl #6
    12c0:	060c0402 	streq	r0, [ip], -r2, lsl #8
    12c4:	040200ba 	streq	r0, [r2], #-186	@ 0xffffff46
    12c8:	00669e02 	rsbeq	r9, r6, r2, lsl #28
    12cc:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    12d0:	04040200 	streq	r0, [r4], #-512	@ 0xfffffe00
    12d4:	00669008 	rsbeq	r9, r6, r8
    12d8:	2e050402 	cdpcs	4, 0, cr0, cr5, cr2, {0}
    12dc:	01040200 	mrseq	r0, R12_usr
    12e0:	04020082 	streq	r0, [r2], #-130	@ 0xffffff7e
    12e4:	02008206 	andeq	r8, r0, #1610612736	@ 0x60000000
    12e8:	00820804 	addeq	r0, r2, r4, lsl #16
    12ec:	ba090402 	blt	2422fc <__bss_end+0x21c6fc>
    12f0:	0b040200 	bleq	101af8 <__bss_end+0xdbef8>
    12f4:	06900882 	ldreq	r0, [r0], r2, lsl #17
    12f8:	03010532 	movweq	r0, #5426	@ 0x1532
    12fc:	02059e17 	andeq	r9, r5, #368	@ 0x170
    1300:	05059608 	streq	r9, [r5, #-1544]	@ 0xfffff9f8
    1304:	680905a2 	stmdavs	r9, {r1, r5, r7, r8, sl}
    1308:	4f030586 	svcmi	0x00030586
    130c:	052f1405 	streq	r1, [pc, #-1029]!	@ f0f <_start-0xf0f1>
    1310:	02056703 	andeq	r6, r5, #786432	@ 0xc0000
    1314:	05058a2f 	streq	r8, [r5, #-2607]	@ 0xfffff5d1
    1318:	68090587 	stmdavs	r9, {r0, r1, r2, r7, r8, sl}
    131c:	4f030586 	svcmi	0x00030586
    1320:	052f0c05 	streq	r0, [pc, #-3077]!	@ 723 <_start-0xf8dd>
    1324:	0a056703 	beq	15af38 <__bss_end+0x135338>
    1328:	2f020530 	svccs	0x00020530
    132c:	a305058a 	movwge	r0, #21898	@ 0x558a
    1330:	86680905 	strbthi	r0, [r8], -r5, lsl #18
    1334:	054d0b05 	strbeq	r0, [sp, #-2821]	@ 0xfffff4fb
    1338:	12054a05 	andne	r4, r5, #20480	@ 0x5000
    133c:	4a0e054c 	bmi	382874 <__bss_end+0x35cc74>
    1340:	05860c05 	streq	r0, [r6, #3077]	@ 0xc05
    1344:	02054d0a 	andeq	r4, r5, #640	@ 0x280
    1348:	8801052f 	stmdahi	r1, {r0, r1, r2, r3, r5, r8, sl}
    134c:	05671b05 	strbeq	r1, [r7, #-2821]!	@ 0xfffff4fb
    1350:	10054a04 	andne	r4, r5, r4, lsl #20
    1354:	0301054e 	movweq	r0, #5454	@ 0x154e
    1358:	04056633 	streq	r6, [r5], #-1587	@ 0xfffff9cd
    135c:	052e6e03 	streq	r6, [lr, #-3587]!	@ 0xfffff1fd
    1360:	03059b0a 	movweq	r9, #23306	@ 0x5b0a
    1364:	58080d03 	stmdapl	r8, {r0, r1, r8, sl, fp}
    1368:	01040200 	mrseq	r0, R12_usr
    136c:	12280206 	eorne	r0, r8, #1610612736	@ 0x60000000
    1370:	03040200 	movweq	r0, #16896	@ 0x4200
    1374:	0601059e 			@ <UNDEFINED> instruction: 0x0601059e
    1378:	052408a6 	streq	r0, [r4, #-2214]!	@ 0xfffff75a
    137c:	9e0b0347 	cdpls	3, 0, cr0, cr11, cr7, {2}
    1380:	054a0205 	strbeq	r0, [sl, #-517]	@ 0xfffffdfb
    1384:	0205872e 	andeq	r8, r5, #12058624	@ 0xb80000
    1388:	6b05054a 	blvs	1428b8 <__bss_end+0x11ccb8>
    138c:	056b5405 	strbeq	r5, [fp, #-1029]!	@ 0xfffffbfb
    1390:	01054a04 	tsteq	r5, r4, lsl #20
    1394:	05821203 	streq	r1, [r2, #515]	@ 0x203
    1398:	2e74031d 	mrccs	3, 3, r0, cr4, cr13, {0}
    139c:	054a1005 	strbeq	r1, [sl, #-5]
    13a0:	01056704 	tsteq	r5, r4, lsl #14
    13a4:	034a0b03 	movteq	r0, #43779	@ 0xab03
    13a8:	2005ba26 	andcs	fp, r5, r6, lsr #20
    13ac:	05821103 	streq	r1, [r2, #259]	@ 0x103
    13b0:	02054a11 	andeq	r4, r5, #69632	@ 0x11000
    13b4:	841b054c 	ldrhi	r0, [fp], #-1356	@ 0xfffffab4
    13b8:	054a0405 	strbeq	r0, [sl, #-1029]	@ 0xfffffbfb
    13bc:	00834c03 	addeq	r4, r3, r3, lsl #24
    13c0:	06010402 	streq	r0, [r1], -r2, lsl #8
    13c4:	040200ba 	streq	r0, [r2], #-186	@ 0xffffff46
    13c8:	08068203 	stmdaeq	r6, {r0, r1, r9, pc}
    13cc:	a11405b2 			@ <UNDEFINED> instruction: 0xa11405b2
    13d0:	054a3005 	strbeq	r3, [sl, #-5]
    13d4:	0b056604 	bleq	15abec <__bss_end+0x134fec>
    13d8:	09056a50 	stmdbeq	r5, {r4, r6, r9, fp, sp, lr}
    13dc:	2f01054d 	svccs	0x0001054d
    13e0:	841c05f6 	ldrhi	r0, [ip], #-1526	@ 0xfffffa0a
    13e4:	05831d05 	streq	r1, [r3, #3333]	@ 0xd05
    13e8:	05be8301 	ldreq	r8, [lr, #769]!	@ 0x301
    13ec:	0805a402 	stmdaeq	r5, {r1, sl, sp, pc}
    13f0:	4a060534 	bmi	1828c8 <__bss_end+0x15ccc8>
    13f4:	054c0d05 	strbeq	r0, [ip, #-3333]	@ 0xfffff2fb
    13f8:	19056b25 	stmdbne	r5, {r0, r2, r5, r8, r9, fp, sp, lr}
    13fc:	4a05054a 	bmi	14292c <__bss_end+0x11cd2c>
    1400:	02007605 	andeq	r7, r0, #5242880	@ 0x500000
    1404:	054a0104 	strbeq	r0, [sl, #-260]	@ 0xfffffefc
    1408:	0402003d 	streq	r0, [r2], #-61	@ 0xffffffc3
    140c:	38054a01 	stmdacc	r5, {r0, r9, fp, lr}
    1410:	01040200 	mrseq	r0, R12_usr
    1414:	500c054a 	andpl	r0, ip, sl, asr #10
    1418:	05682105 	strbeq	r2, [r8, #-261]!	@ 0xfffffefb
    141c:	0e054a59 			@ <UNDEFINED> instruction: 0x0e054a59
    1420:	2e71054a 	cdpcs	5, 7, cr0, cr1, cr10, {2}
    1424:	054a0a05 	strbeq	r0, [sl, #-2565]	@ 0xfffff5fb
    1428:	50054d18 	andpl	r4, r5, r8, lsl sp
    142c:	4a34054a 	bmi	d0295c <__bss_end+0xcdcd5c>
    1430:	052e0405 	streq	r0, [lr, #-1029]!	@ 0xfffffbfb
    1434:	04054a13 	streq	r4, [r5], #-2579	@ 0xfffff5ed
    1438:	4b0c0567 	blmi	3029dc <__bss_end+0x2dcddc>
    143c:	4d02056a 	cfstr32mi	mvfx0, [r2, #-424]	@ 0xfffffe58
    1440:	05300905 	ldreq	r0, [r0, #-2309]!	@ 0xfffff6fb
    1444:	05a22f01 	streq	r2, [r2, #3841]!	@ 0xf01
    1448:	01054b0f 	tsteq	r5, pc, lsl #22
    144c:	9e320367 	cdpls	3, 3, cr0, cr2, cr7, {3}
    1450:	05890305 	streq	r0, [r9, #773]	@ 0x305
    1454:	2e170308 	cdpcs	3, 1, cr0, cr7, cr8, {0}
    1458:	054a0605 	strbeq	r0, [sl, #-1541]	@ 0xfffff9fb
    145c:	03054c05 	movweq	r4, #23557	@ 0x5c05
    1460:	052e6703 	streq	r6, [lr, #-1795]!	@ 0xfffff8fd
    1464:	4a3a0301 	bmi	e82070 <__bss_end+0xe5c470>
    1468:	05db1705 	ldrbeq	r1, [fp, #1797]	@ 0x705
    146c:	59054a03 	stmdbpl	r5, {r0, r1, r9, fp, lr}
    1470:	6a040585 	bvs	102a8c <__bss_end+0xdce8c>
    1474:	05680e05 	strbeq	r0, [r8, #-3589]!	@ 0xfffff1fb
    1478:	02054d14 	andeq	r4, r5, #20, 26	@ 0x500
    147c:	6986836d 	stmibvs	r6, {r0, r2, r3, r5, r6, r8, r9, pc}
    1480:	03140583 	tsteq	r4, #549453824	@ 0x20c00000
    1484:	0105660a 	tsteq	r5, sl, lsl #12
    1488:	03661403 	cmneq	r6, #50331648	@ 0x3000000
    148c:	12056617 	andne	r6, r5, #24117248	@ 0x1700000
    1490:	4a020569 	bmi	82a3c <__bss_end+0x5ce3c>
    1494:	05300305 	ldreq	r0, [r0, #-773]!	@ 0xfffffcfb
    1498:	04020060 	streq	r0, [r2], #-96	@ 0xffffffa0
    149c:	051e0803 	ldreq	r0, [lr, #-2051]	@ 0xfffff7fd
    14a0:	0402003e 	streq	r0, [r2], #-62	@ 0xffffffc2
    14a4:	02056601 	andeq	r6, r5, #1048576	@ 0x100000
    14a8:	054b4b6b 	strbeq	r4, [fp, #-2923]	@ 0xfffff495
    14ac:	05504e03 	ldrbeq	r4, [r0, #-3587]	@ 0xfffff1fd
    14b0:	1c055014 	stcne	0, cr5, [r5], {20}
    14b4:	67010567 	strvs	r0, [r1, -r7, ror #10]
    14b8:	16055c08 	strne	r5, [r5], -r8, lsl #24
    14bc:	4a05056d 	bmi	142a78 <__bss_end+0x11ce78>
    14c0:	054c0405 	strbeq	r0, [ip, #-1029]	@ 0xfffffbfb
    14c4:	12052f14 	andne	r2, r5, #20, 30	@ 0x50
    14c8:	2f0405ba 	svccs	0x000405ba
    14cc:	05300605 	ldreq	r0, [r0, #-1541]!	@ 0xfffff9fb
    14d0:	1b056a05 	blne	15bcec <__bss_end+0x1360ec>
    14d4:	4a0c0530 	bmi	30299c <__bss_end+0x2dcd9c>
    14d8:	834b0605 	movthi	r0, #46597	@ 0xb605
    14dc:	a005059f 	mulge	r5, pc, r5	@ <UNPREDICTABLE>
    14e0:	4f010530 	svcmi	0x00010530
    14e4:	840205be 	strhi	r0, [r2], #-1470	@ 0xfffffa42
    14e8:	05841205 	streq	r1, [r4, #517]	@ 0x205
    14ec:	03054a04 	movweq	r4, #23044	@ 0x5a04
    14f0:	4a560569 	bmi	1582a9c <__bss_end+0x155ce9c>
    14f4:	054a0305 	strbeq	r0, [sl, #-773]	@ 0xfffffcfb
    14f8:	820f0301 	andhi	r0, pc, #67108864	@ 0x4000000
    14fc:	76030305 	strvc	r0, [r3], -r5, lsl #6
    1500:	4a4e052e 	bmi	13829c0 <__bss_end+0x135cdc0>
    1504:	054a0305 	strbeq	r0, [sl, #-773]	@ 0xfffffcfb
    1508:	05058713 	streq	r8, [r5, #-1811]	@ 0xfffff8ed
    150c:	6819054a 	ldmdavs	r9, {r1, r3, r6, r8, sl}
    1510:	f6690105 			@ <UNDEFINED> instruction: 0xf6690105
    1514:	05bf1a05 	ldreq	r1, [pc, #2565]!	@ 1f21 <_start-0xe0df>
    1518:	17056804 	strne	r6, [r5, -r4, lsl #16]
    151c:	002c056b 	eoreq	r0, ip, fp, ror #10
    1520:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1524:	02001705 	andeq	r1, r0, #1310720	@ 0x140000
    1528:	05ba0204 	ldreq	r0, [sl, #516]!	@ 0x204
    152c:	04020015 	streq	r0, [r2], #-21	@ 0xffffffeb
    1530:	0f052e04 	svceq	0x00052e04
    1534:	4a05054c 	bmi	142a6c <__bss_end+0x11ce6c>
    1538:	054d0405 	strbeq	r0, [sp, #-1029]	@ 0xfffffbfb
    153c:	14054b0d 	strne	r4, [r5], #-2829	@ 0xfffff4f3
    1540:	4a3b056b 	bmi	ec2af4 <__bss_end+0xe9cef4>
    1544:	052e0405 	streq	r0, [lr, #-1029]!	@ 0xfffffbfb
    1548:	820a0309 	andhi	r0, sl, #603979776	@ 0x24000000
    154c:	052f0105 	streq	r0, [pc, #-261]!	@ 144f <_start-0xebb1>
    1550:	019d0302 	orrseq	r0, sp, r2, lsl #6
    1554:	8a030566 	bhi	c2af4 <__bss_end+0x9cef4>
    1558:	4b020583 	blmi	82b6c <__bss_end+0x5cf6c>
    155c:	01000602 	tsteq	r0, r2, lsl #12
    1560:	00018001 	andeq	r8, r1, r1
    1564:	54000300 	strpl	r0, [r0], #-768	@ 0xfffffd00
    1568:	02000000 	andeq	r0, r0, #0
    156c:	0d0efb01 	vstreq	d15, [lr, #-4]
    1570:	01010100 	mrseq	r0, (UNDEF: 17)
    1574:	00000001 	andeq	r0, r0, r1
    1578:	01000001 	tsteq	r0, r1
    157c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ 14c8 <_start-0xeb38>
    1580:	68792f65 	ldmdavs	r9!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1584:	534f2f78 	movtpl	r2, #65400	@ 0xff78
    1588:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
    158c:	72656270 	rsbvc	r6, r5, #112, 4
    1590:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1594:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
    1598:	4f545265 	svcmi	0x00545265
    159c:	65442f53 	strbvs	r2, [r4, #-3923]	@ 0xfffff0ad
    15a0:	442f6f6d 	strtmi	r6, [pc], #-3949	@ 15a8 <_start-0xea58>
    15a4:	65766972 	ldrbvs	r6, [r6, #-2418]!	@ 0xfffff68e
    15a8:	00007372 	andeq	r7, r0, r2, ror r3
    15ac:	2e717269 	cdpcs	2, 7, cr7, cr1, cr9, {3}
    15b0:	00010063 	andeq	r0, r1, r3, rrx
    15b4:	71726900 	cmnvc	r2, r0, lsl #18
    15b8:	0100682e 	tsteq	r0, lr, lsr #16
    15bc:	05000000 	streq	r0, [r0, #-0]
    15c0:	02050001 	andeq	r0, r5, #1
    15c4:	000234c8 	andeq	r3, r2, r8, asr #9
    15c8:	05011e03 	streq	r1, [r1, #-3587]	@ 0xfffff1fd
    15cc:	1b059f08 	blne	1691f4 <__bss_end+0x1435f4>
    15d0:	00190531 	andseq	r0, r9, r1, lsr r5
    15d4:	4a010402 	bmi	425e4 <__bss_end+0x1c9e4>
    15d8:	02001005 	andeq	r1, r0, #5
    15dc:	312e0104 			@ <UNDEFINED> instruction: 0x312e0104
    15e0:	05851905 	streq	r1, [r5, #2309]	@ 0x905
    15e4:	16056606 	strne	r6, [r5], -r6, lsl #12
    15e8:	6604054b 	strvs	r0, [r4], -fp, asr #10
    15ec:	05f51405 	ldrbeq	r1, [r5, #1029]!	@ 0x405
    15f0:	0b05660e 	bleq	15ae30 <__bss_end+0x135230>
    15f4:	0309052e 	movweq	r0, #38190	@ 0x952e
    15f8:	01056673 	tsteq	r5, r3, ror r6
    15fc:	a6660f03 	strbtge	r0, [r6], -r3, lsl #30
    1600:	054b2f05 	strbeq	r2, [fp, #-3845]	@ 0xfffff0fb
    1604:	15052e19 	strne	r2, [r5, #-3609]	@ 0xfffff1e7
    1608:	2e050531 	mcrcs	5, 0, r0, cr5, cr1, {1}
    160c:	054b1405 	strbeq	r1, [fp, #-1029]	@ 0xfffffbfb
    1610:	03054a28 	movweq	r4, #23080	@ 0x5a28
    1614:	8515054a 	ldrhi	r0, [r5, #-1354]	@ 0xfffffab6
    1618:	052e0505 	streq	r0, [lr, #-1285]!	@ 0xfffffafb
    161c:	28054b14 	stmdacs	r5, {r2, r4, r8, r9, fp, lr}
    1620:	4a03054a 	bmi	c2b50 <__bss_end+0x9cf50>
    1624:	05851505 	streq	r1, [r5, #1285]	@ 0x505
    1628:	2e052e05 	cdpcs	14, 0, cr2, cr5, cr5, {0}
    162c:	4a25054b 	bmi	942b60 <__bss_end+0x91cf60>
    1630:	052e0305 	streq	r0, [lr, #-773]!	@ 0xfffffcfb
    1634:	05858301 	streq	r8, [r5, #769]	@ 0x301
    1638:	01054b02 	tsteq	r5, r2, lsl #22
    163c:	0205852f 	andeq	r8, r5, #197132288	@ 0xbc00000
    1640:	2f01054b 	svccs	0x0001054b
    1644:	bb050585 	bllt	142c60 <__bss_end+0x11d060>
    1648:	05670305 	strbeq	r0, [r7, #-773]!	@ 0xfffffcfb
    164c:	05832f21 	streq	r2, [r3, #3873]	@ 0xf21
    1650:	0105bb03 	tsteq	r5, r3, lsl #22
    1654:	23058530 	movwcs	r8, #21808	@ 0x5530
    1658:	4a100583 	bmi	402c6c <__bss_end+0x3dd06c>
    165c:	05680505 	strbeq	r0, [r8, #-1285]!	@ 0xfffffafb
    1660:	12056708 	andne	r6, r5, #8, 14	@ 0x200000
    1664:	4b0a052e 	blmi	282b24 <__bss_end+0x25cf24>
    1668:	054a0e05 	strbeq	r0, [sl, #-3589]	@ 0xfffff1fb
    166c:	820a0301 	andhi	r0, sl, #67108864	@ 0x4000000
    1670:	78030a05 	stmdavc	r3, {r0, r2, r9, fp}
    1674:	6708052e 	strvs	r0, [r8, -lr, lsr #10]
    1678:	052e1205 	streq	r1, [lr, #-517]!	@ 0xfffffdfb
    167c:	0e054b0a 	vmlaeq.f64	d4, d5, d10
    1680:	8801054a 	stmdahi	r1, {r1, r3, r6, r8, sl}
    1684:	052a0a05 	streq	r0, [sl, #-2565]!	@ 0xfffff5fb
    1688:	16056708 	strne	r6, [r5], -r8, lsl #14
    168c:	4b0a052e 	blmi	282b4c <__bss_end+0x25cf4c>
    1690:	054a0e05 	strbeq	r0, [sl, #-3589]	@ 0xfffff1fb
    1694:	05bd8401 	ldreq	r8, [sp, #1025]!	@ 0x401
    1698:	10058323 	andne	r8, r5, r3, lsr #6
    169c:	6805054a 	stmdavs	r5, {r1, r3, r6, r8, sl}
    16a0:	05670805 	strbeq	r0, [r7, #-2053]!	@ 0xfffff7fb
    16a4:	0a052e13 	beq	14cef8 <__bss_end+0x1272f8>
    16a8:	4a11054b 	bmi	442bdc <__bss_end+0x41cfdc>
    16ac:	054a0e05 	strbeq	r0, [sl, #-3589]	@ 0xfffff1fb
    16b0:	660a0301 	strvs	r0, [sl], -r1, lsl #6
    16b4:	78030a05 	stmdavc	r3, {r0, r2, r9, fp}
    16b8:	6708052e 	strvs	r0, [r8, -lr, lsr #10]
    16bc:	052e1305 	streq	r1, [lr, #-773]!	@ 0xfffffcfb
    16c0:	11054b0a 	tstne	r5, sl, lsl #22
    16c4:	4a0e054a 	bmi	382bf4 <__bss_end+0x35cff4>
    16c8:	056c0105 	strbeq	r0, [ip, #-261]!	@ 0xfffffefb
    16cc:	08052a0a 	stmdaeq	r5, {r1, r3, r9, fp, sp}
    16d0:	2e170567 	cfmsc32cs	mvfx0, mvfx7, mvfx7
    16d4:	054b0a05 	strbeq	r0, [fp, #-2565]	@ 0xfffff5fb
    16d8:	0e054a11 			@ <UNDEFINED> instruction: 0x0e054a11
    16dc:	6801054a 	stmdavs	r1, {r1, r3, r6, r8, sl}
    16e0:	01000c02 	tsteq	r0, r2, lsl #24
    16e4:	0001e101 	andeq	lr, r1, r1, lsl #2
    16e8:	56000300 	strpl	r0, [r0], -r0, lsl #6
    16ec:	02000000 	andeq	r0, r0, #0
    16f0:	0d0efb01 	vstreq	d15, [lr, #-4]
    16f4:	01010100 	mrseq	r0, (UNDEF: 17)
    16f8:	00000001 	andeq	r0, r0, r1
    16fc:	01000001 	tsteq	r0, r1
    1700:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ 164c <_start-0xe9b4>
    1704:	68792f65 	ldmdavs	r9!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1708:	534f2f78 	movtpl	r2, #65400	@ 0xff78
    170c:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
    1710:	72656270 	rsbvc	r6, r5, #112, 4
    1714:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1718:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
    171c:	4f545265 	svcmi	0x00545265
    1720:	65442f53 	strbvs	r2, [r4, #-3923]	@ 0xfffff0ad
    1724:	442f6f6d 	strtmi	r6, [pc], #-3949	@ 172c <_start-0xe8d4>
    1728:	65766972 	ldrbvs	r6, [r6, #-2418]!	@ 0xfffff68e
    172c:	00007372 	andeq	r7, r0, r2, ror r3
    1730:	6f697067 	svcvs	0x00697067
    1734:	0100632e 	tsteq	r0, lr, lsr #6
    1738:	70670000 	rsbvc	r0, r7, r0
    173c:	682e6f69 	stmdavs	lr!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}
    1740:	00000100 	andeq	r0, r0, r0, lsl #2
    1744:	00410500 	subeq	r0, r1, r0, lsl #10
    1748:	386c0205 	stmdacc	ip!, {r0, r2, r9}^
    174c:	e8030002 	stmda	r3, {r1}
    1750:	16050100 	strne	r0, [r5], -r0, lsl #2
    1754:	820605a0 	andhi	r0, r6, #160, 10	@ 0x28000000
    1758:	05301b05 	ldreq	r1, [r0, #-2821]!	@ 0xfffff4fb
    175c:	14052e10 	strne	r2, [r5], #-3600	@ 0xfffff1f0
    1760:	08060568 	stmdaeq	r6, {r3, r5, r6, r8, sl}
    1764:	2f180520 	svccs	0x00180520
    1768:	05820f05 	streq	r0, [r2, #3845]	@ 0xf05
    176c:	06054a09 	streq	r4, [r5], -r9, lsl #20
    1770:	6713054a 	ldrvs	r0, [r3, -sl, asr #10]
    1774:	054a2305 	strbeq	r2, [sl, #-773]	@ 0xfffffcfb
    1778:	0605821a 			@ <UNDEFINED> instruction: 0x0605821a
    177c:	6707052e 	strvs	r0, [r7, -lr, lsr #10]
    1780:	052e1805 	streq	r1, [lr, #-2053]!	@ 0xfffff7fb
    1784:	3f056701 	svccc	0x00056701
    1788:	bb0205bc 	bllt	82e80 <__bss_end+0x5d280>
    178c:	05830105 	streq	r0, [r3, #261]	@ 0x105
    1790:	10056838 	andne	r6, r5, r8, lsr r8
    1794:	6720059f 			@ <UNDEFINED> instruction: 0x6720059f
    1798:	054a1705 	strbeq	r1, [sl, #-1797]	@ 0xfffff8fb
    179c:	04054a10 	streq	r4, [r5], #-2576	@ 0xfffff5f0
    17a0:	67080530 	smladxvs	r8, r0, r5, r0
    17a4:	052e0f05 	streq	r0, [lr, #-3845]!	@ 0xfffff0fb
    17a8:	17059e08 	strne	r9, [r5, -r8, lsl #28]
    17ac:	da01052e 	ble	42c6c <__bss_end+0x1d06c>
    17b0:	052c0805 	streq	r0, [ip, #-2053]!	@ 0xfffff7fb
    17b4:	08052e0f 	stmdaeq	r5, {r0, r1, r2, r3, r9, sl, fp, sp}
    17b8:	2e170566 	cfmsc32cs	mvfx0, mvfx7, mvfx6
    17bc:	05a00105 	streq	r0, [r0, #261]!	@ 0x105
    17c0:	1005a023 	andne	sl, r5, r3, lsr #32
    17c4:	2e1e0583 	cdpcs	5, 1, cr0, cr14, cr3, {4}
    17c8:	054a1705 	strbeq	r1, [sl, #-1797]	@ 0xfffff8fb
    17cc:	2305822c 	movwcs	r8, #21036	@ 0x522c
    17d0:	2e31054a 	cdpcs	5, 3, cr0, cr1, cr10, {2}
    17d4:	a12f0105 			@ <UNDEFINED> instruction: 0xa12f0105
    17d8:	05bb1705 	ldreq	r1, [fp, #1797]!	@ 0x705
    17dc:	052f6610 	streq	r6, [pc, #-1552]!	@ 11d4 <_start-0xee2c>
    17e0:	08056802 	stmdaeq	r5, {r1, fp, sp, lr}
    17e4:	0f055a08 	svceq	0x00055a08
    17e8:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    17ec:	052e1705 	streq	r1, [lr, #-1797]!	@ 0xfffff8fb
    17f0:	0805d703 	stmdaeq	r5, {r0, r1, r8, r9, sl, ip, lr, pc}
    17f4:	2e0f0530 	cfmv64hrcs	mvdx15, r0
    17f8:	05660805 	strbeq	r0, [r6, #-2053]!	@ 0xfffff7fb
    17fc:	03052e17 	movweq	r2, #24087	@ 0x5e17
    1800:	3008059f 	mulcc	r8, pc, r5	@ <UNPREDICTABLE>
    1804:	052e0f05 	streq	r0, [lr, #-3845]!	@ 0xfffff0fb
    1808:	17059e08 	strne	r9, [r5, -r8, lsl #28]
    180c:	d703052e 	strle	r0, [r3, -lr, lsr #10]
    1810:	05300805 	ldreq	r0, [r0, #-2053]!	@ 0xfffff7fb
    1814:	08052e0f 	stmdaeq	r5, {r0, r1, r2, r3, r9, sl, fp, sp}
    1818:	2e170566 	cfmsc32cs	mvfx0, mvfx7, mvfx6
    181c:	059f0305 	ldreq	r0, [pc, #773]	@ 1b29 <_start-0xe4d7>
    1820:	10053008 	andne	r3, r5, r8
    1824:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    1828:	052e1805 	streq	r1, [lr, #-2053]!	@ 0xfffff7fb
    182c:	0805d703 	stmdaeq	r5, {r0, r1, r8, r9, sl, ip, lr, pc}
    1830:	2e100530 	cfmvr64hcs	r0, mvdx0
    1834:	05660805 	strbeq	r0, [r6, #-2053]!	@ 0xfffff7fb
    1838:	03052e18 	movweq	r2, #24088	@ 0x5e18
    183c:	0105309f 	swpeq	r3, pc, [r5]	@ <UNPREDICTABLE>
    1840:	2105a130 	tstcs	r5, r0, lsr r1
    1844:	4a1805bb 	bmi	602f38 <__bss_end+0x5dd338>
    1848:	054a1505 	strbeq	r1, [sl, #-1285]	@ 0xfffffafb
    184c:	052f2e10 	streq	r2, [pc, #-3600]!	@ a44 <_start-0xf5bc>
    1850:	08056802 	stmdaeq	r5, {r1, fp, sp, lr}
    1854:	0f055a08 	svceq	0x00055a08
    1858:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    185c:	052e1705 	streq	r1, [lr, #-1797]!	@ 0xfffff8fb
    1860:	0805d703 	stmdaeq	r5, {r0, r1, r8, r9, sl, ip, lr, pc}
    1864:	2e0f0530 	cfmv64hrcs	mvdx15, r0
    1868:	05660805 	strbeq	r0, [r6, #-2053]!	@ 0xfffff7fb
    186c:	03052e17 	movweq	r2, #24087	@ 0x5e17
    1870:	3008059f 	mulcc	r8, pc, r5	@ <UNPREDICTABLE>
    1874:	052e0f05 	streq	r0, [lr, #-3845]!	@ 0xfffff0fb
    1878:	17059e08 	strne	r9, [r5, -r8, lsl #28]
    187c:	d703052e 	strle	r0, [r3, -lr, lsr #10]
    1880:	05300805 	ldreq	r0, [r0, #-2053]!	@ 0xfffff7fb
    1884:	08052e0f 	stmdaeq	r5, {r0, r1, r2, r3, r9, sl, fp, sp}
    1888:	2e170566 	cfmsc32cs	mvfx0, mvfx7, mvfx6
    188c:	059f0305 	ldreq	r0, [pc, #773]	@ 1b99 <_start-0xe467>
    1890:	10053008 	andne	r3, r5, r8
    1894:	9e08052e 	cfsh32ls	mvfx0, mvfx8, #30
    1898:	052e1805 	streq	r1, [lr, #-2053]!	@ 0xfffff7fb
    189c:	0805d703 	stmdaeq	r5, {r0, r1, r8, r9, sl, ip, lr, pc}
    18a0:	2e100530 	cfmvr64hcs	r0, mvdx0
    18a4:	05660805 	strbeq	r0, [r6, #-2053]!	@ 0xfffff7fb
    18a8:	03052e18 	movweq	r2, #24088	@ 0x5e18
    18ac:	0105309f 	swpeq	r3, pc, [r5]	@ <UNPREDICTABLE>
    18b0:	2005a130 	andcs	sl, r5, r0, lsr r1
    18b4:	4a170583 	bmi	5c2ec8 <__bss_end+0x59d2c8>
    18b8:	2f4a1005 	svccs	0x004a1005
    18bc:	05680705 	strbeq	r0, [r8, #-1797]!	@ 0xfffff8fb
    18c0:	01052e16 	tsteq	r5, r6, lsl lr
    18c4:	000a0283 	andeq	r0, sl, r3, lsl #5
    18c8:	025b0101 	subseq	r0, fp, #1073741824	@ 0x40000000
    18cc:	00030000 	andeq	r0, r3, r0
    18d0:	000000dd 	ldrdeq	r0, [r0], -sp
    18d4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    18d8:	0101000d 	tsteq	r1, sp
    18dc:	00000101 	andeq	r0, r0, r1, lsl #2
    18e0:	00000100 	andeq	r0, r0, r0, lsl #2
    18e4:	6f682f01 	svcvs	0x00682f01
    18e8:	792f656d 	stmdbvc	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
    18ec:	4f2f7868 	svcmi	0x002f7868
    18f0:	61522f53 	cmpvs	r2, r3, asr pc
    18f4:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
    18f8:	50797272 	rsbspl	r7, r9, r2, ror r2
    18fc:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
    1900:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
    1904:	2f2f534f 	svccs	0x002f534f
    1908:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
    190c:	534f5452 	movtpl	r5, #62546	@ 0xf452
    1910:	756f532f 	strbvc	r5, [pc, #-815]!	@ 15e9 <_start-0xea17>
    1914:	2f656372 	svccs	0x00656372
    1918:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
    191c:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
    1920:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	@ 0xffffff44
    1924:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
    1928:	73752f00 	cmnvc	r5, #0, 30
    192c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    1930:	63672f62 	cmnvs	r7, #392	@ 0x188
    1934:	72612f63 	rsbvc	r2, r1, #396	@ 0x18c
    1938:	6f6e2d6d 	svcvs	0x006e2d6d
    193c:	652d656e 	strvs	r6, [sp, #-1390]!	@ 0xfffffa92
    1940:	2f696261 	svccs	0x00696261
    1944:	322e3331 	eorcc	r3, lr, #-1006632960	@ 0xc4000000
    1948:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	@ <UNPREDICTABLE>
    194c:	756c636e 	strbvc	r6, [ip, #-878]!	@ 0xfffffc92
    1950:	2f006564 	svccs	0x00006564
    1954:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
    1958:	7868792f 	stmdavc	r8!, {r0, r1, r2, r3, r5, r8, fp, ip, sp, lr}^
    195c:	2f534f2f 	svccs	0x00534f2f
    1960:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1964:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
    1968:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
    196c:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
    1970:	534f5452 	movtpl	r5, #62546	@ 0xf452
    1974:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
    1978:	4f545265 	svcmi	0x00545265
    197c:	6f532f53 	svcvs	0x00532f53
    1980:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
    1984:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
    1988:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
    198c:	65680000 	strbvs	r0, [r8, #-0]!
    1990:	345f7061 	ldrbcc	r7, [pc], #-97	@ 1998 <_start-0xe668>
    1994:	0100632e 	tsteq	r0, lr, lsr #6
    1998:	74730000 	ldrbtvc	r0, [r3], #-0
    199c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    19a0:	0200682e 	andeq	r6, r0, #3014656	@ 0x2e0000
    19a4:	61740000 	cmnvs	r4, r0
    19a8:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    19ac:	00000300 	andeq	r0, r0, r0, lsl #6
    19b0:	00010500 	andeq	r0, r1, r0, lsl #10
    19b4:	3e440205 	cdpcc	2, 4, cr0, cr4, cr5, {0}
    19b8:	92030002 	andls	r0, r3, #2
    19bc:	07050101 	streq	r0, [r5, -r1, lsl #2]
    19c0:	4c020584 	cfstr32mi	mvfx0, [r2], {132}	@ 0x84
    19c4:	05320d05 	ldreq	r0, [r2, #-3333]!	@ 0xfffff2fb
    19c8:	04054a05 	streq	r4, [r5], #-2565	@ 0xfffff5fb
    19cc:	3305054c 	movwcc	r0, #21836	@ 0x554c
    19d0:	05681005 	strbeq	r1, [r8, #-5]!
    19d4:	0605a214 			@ <UNDEFINED> instruction: 0x0605a214
    19d8:	4d11054a 	cfldr32mi	mvfx0, [r1, #-296]	@ 0xfffffed8
    19dc:	05860505 	streq	r0, [r6, #1285]	@ 0x505
    19e0:	0402002c 	streq	r0, [r2], #-44	@ 0xffffffd4
    19e4:	1b056601 	blne	15b1f0 <__bss_end+0x1355f0>
    19e8:	01040200 	mrseq	r0, R12_usr
    19ec:	6a14052e 	bvs	502eac <__bss_end+0x4dd2ac>
    19f0:	054b0c05 	strbeq	r0, [fp, #-3077]	@ 0xfffff3fb
    19f4:	15056709 	strne	r6, [r5, #-1801]	@ 0xfffff8f7
    19f8:	4b0d0530 	blmi	342ec0 <__bss_end+0x31d2c0>
    19fc:	05631405 	strbeq	r1, [r3, #-1029]!	@ 0xfffffbfb
    1a00:	3d054a31 	vstrcc	s8, [r5, #-196]	@ 0xffffff3c
    1a04:	01040200 	mrseq	r0, R12_usr
    1a08:	00310566 	eorseq	r0, r1, r6, ror #10
    1a0c:	4a010402 	bmi	42a1c <__bss_end+0x1ce1c>
    1a10:	05521005 	ldrbeq	r1, [r2, #-5]
    1a14:	42054a06 	andmi	r4, r5, #24576	@ 0x6000
    1a18:	4a10056a 	bmi	402fc8 <__bss_end+0x3dd3c8>
    1a1c:	052e0e05 	streq	r0, [lr, #-3589]!	@ 0xfffff1fb
    1a20:	26054e2f 	strcs	r4, [r5], -pc, lsr #28
    1a24:	4d12054a 	cfldr32mi	mvfx0, [r2, #-296]	@ 0xfffffed8
    1a28:	054a1f05 	strbeq	r1, [sl, #-3845]	@ 0xfffff0fb
    1a2c:	07054a31 	smladxeq	r5, r1, sl, r4
    1a30:	4f15054a 	svcmi	0x0015054a
    1a34:	05862a05 	streq	r2, [r6, #2565]	@ 0xa05
    1a38:	21054a37 	tstcs	r5, r7, lsr sl
    1a3c:	4b1a054a 	blmi	682f6c <__bss_end+0x65d36c>
    1a40:	05690605 	strbeq	r0, [r9, #-1541]!	@ 0xfffff9fb
    1a44:	23054d19 	movwcs	r4, #23833	@ 0x5d19
    1a48:	4a19054a 	bmi	642f78 <__bss_end+0x61d378>
    1a4c:	056a0205 	strbeq	r0, [sl, #-517]!	@ 0xfffffdfb
    1a50:	2e0c030c 	cdpcs	3, 0, cr0, cr12, cr12, {0}
    1a54:	05bc0905 	ldreq	r0, [ip, #2309]!	@ 0x905
    1a58:	05da2f01 	ldrbeq	r2, [sl, #3841]	@ 0xf01
    1a5c:	04058310 	streq	r8, [r5], #-784	@ 0xfffffcf0
    1a60:	6a07054d 	bvs	1c2f9c <__bss_end+0x19d39c>
    1a64:	05a10a05 	streq	r0, [r1, #2565]!	@ 0xa05
    1a68:	21054c03 	tstcs	r5, r3, lsl #24
    1a6c:	4a180531 	bmi	602f38 <__bss_end+0x5dd338>
    1a70:	059f0405 	ldreq	r0, [pc, #1029]	@ 1e7d <_start-0xe183>
    1a74:	01054c03 	tsteq	r5, r3, lsl #24
    1a78:	09058630 	stmdbeq	r5, {r4, r5, r9, sl, pc}
    1a7c:	4b01054b 	blmi	42fb0 <__bss_end+0x1d3b0>
    1a80:	05864ca2 	streq	r4, [r6, #3234]	@ 0xca2
    1a84:	66090319 			@ <UNDEFINED> instruction: 0x66090319
    1a88:	05671405 	strbeq	r1, [r7, #-1029]!	@ 0xfffffbfb
    1a8c:	0d056a1c 	vstreq	s12, [r5, #-112]	@ 0xffffff90
    1a90:	0805672e 	stmdaeq	r5, {r1, r2, r3, r5, r8, r9, sl, sp, lr}
    1a94:	6807059f 	stmdavs	r7, {r0, r1, r2, r3, r4, r7, r8, sl}
    1a98:	054a1405 	strbeq	r1, [sl, #-1029]	@ 0xfffffbfb
    1a9c:	19054b07 	stmdbne	r5, {r0, r1, r2, r8, r9, fp, lr}
    1aa0:	4e13054a 	cfmac32mi	mvfx0, mvfx3, mvfx10
    1aa4:	054b3005 	strbeq	r3, [fp, #-5]
    1aa8:	2405661f 	strcs	r6, [r5], #-1567	@ 0xfffff9e1
    1aac:	8516054b 	ldrhi	r0, [r6, #-1355]	@ 0xfffffab5
    1ab0:	f6bb0105 			@ <UNDEFINED> instruction: 0xf6bb0105
    1ab4:	05881205 	streq	r1, [r8, #517]	@ 0x205
    1ab8:	57054a02 	strpl	r4, [r5, -r2, lsl #20]
    1abc:	03040200 	movweq	r0, #16896	@ 0x4200
    1ac0:	0027052e 	eoreq	r0, r7, lr, lsr #10
    1ac4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1ac8:	02003905 	andeq	r3, r0, #81920	@ 0x14000
    1acc:	054a0104 	strbeq	r0, [sl, #-260]	@ 0xfffffefc
    1ad0:	18056d06 	stmdane	r5, {r1, r2, r8, sl, fp, sp, lr}
    1ad4:	4a0c054b 	bmi	303008 <__bss_end+0x2dd408>
    1ad8:	054a0405 	strbeq	r0, [sl, #-1029]	@ 0xfffffbfb
    1adc:	2c05680d 	stccs	8, cr6, [r5], {13}
    1ae0:	4a1a054a 	bmi	683010 <__bss_end+0x65d410>
    1ae4:	05671305 	strbeq	r1, [r7, #-773]!	@ 0xfffffcfb
    1ae8:	1d054f06 	stcne	15, cr4, [r5, #-24]	@ 0xffffffe8
    1aec:	4a0c054b 	bmi	303020 <__bss_end+0x2dd420>
    1af0:	054a4d05 	strbeq	r4, [sl, #-3333]	@ 0xfffff2fb
    1af4:	11054a04 	tstne	r5, r4, lsl #20
    1af8:	4a23054c 	bmi	8c3030 <__bss_end+0x89d430>
    1afc:	054a0505 	strbeq	r0, [sl, #-1285]	@ 0xfffffafb
    1b00:	2d054d13 	stccs	13, cr4, [r5, #-76]	@ 0xffffffb4
    1b04:	4a3e054a 	bmi	f83034 <__bss_end+0xf5d434>
    1b08:	052e2005 	streq	r2, [lr, #-5]!
    1b0c:	42056731 	andmi	r6, r5, #12845056	@ 0xc40000
    1b10:	2e25054a 	cfsh64cs	mvdx0, mvdx5, #42
    1b14:	a330056a 	teqge	r0, #444596224	@ 0x1a800000
    1b18:	054a2405 	strbeq	r2, [sl, #-1029]	@ 0xfffffbfb
    1b1c:	1f055104 	svcne	0x00055104
    1b20:	68010584 	stmdavs	r1, {r2, r7, r8, sl}
    1b24:	01000c02 	tsteq	r0, r2, lsl #24
    1b28:	0001b701 	andeq	fp, r1, r1, lsl #14
    1b2c:	29000300 	stmdbcs	r0, {r8, r9}
    1b30:	02000001 	andeq	r0, r0, #1
    1b34:	0d0efb01 	vstreq	d15, [lr, #-4]
    1b38:	01010100 	mrseq	r0, (UNDEF: 17)
    1b3c:	00000001 	andeq	r0, r0, r1
    1b40:	01000001 	tsteq	r0, r1
    1b44:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ 1a90 <_start-0xe570>
    1b48:	68792f65 	ldmdavs	r9!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1b4c:	534f2f78 	movtpl	r2, #65400	@ 0xff78
    1b50:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
    1b54:	72656270 	rsbvc	r6, r5, #112, 4
    1b58:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1b5c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
    1b60:	4f545265 	svcmi	0x00545265
    1b64:	65442f53 	strbvs	r2, [r4, #-3923]	@ 0xfffff0ad
    1b68:	2f006f6d 	svccs	0x00006f6d
    1b6c:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
    1b70:	7868792f 	stmdavc	r8!, {r0, r1, r2, r3, r5, r8, fp, ip, sp, lr}^
    1b74:	2f534f2f 	svccs	0x00534f2f
    1b78:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1b7c:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
    1b80:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
    1b84:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
    1b88:	534f5452 	movtpl	r5, #62546	@ 0xf452
    1b8c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
    1b90:	4f545265 	svcmi	0x00545265
    1b94:	6f532f53 	svcvs	0x00532f53
    1b98:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
    1b9c:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
    1ba0:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
    1ba4:	6f682f00 	svcvs	0x00682f00
    1ba8:	792f656d 	stmdbvc	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
    1bac:	4f2f7868 	svcmi	0x002f7868
    1bb0:	61522f53 	cmpvs	r2, r3, asr pc
    1bb4:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
    1bb8:	50797272 	rsbspl	r7, r9, r2, ror r2
    1bbc:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
    1bc0:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
    1bc4:	462f534f 	strtmi	r5, [pc], -pc, asr #6
    1bc8:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
    1bcc:	2f534f54 	svccs	0x00534f54
    1bd0:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
    1bd4:	702f6563 	eorvc	r6, pc, r3, ror #10
    1bd8:	6174726f 	cmnvs	r4, pc, ror #4
    1bdc:	2f656c62 	svccs	0x00656c62
    1be0:	2f434347 	svccs	0x00434347
    1be4:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1be8:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
    1bec:	00695079 	rsbeq	r5, r9, r9, ror r0
    1bf0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ 1b3c <_start-0xe4c4>
    1bf4:	68792f65 	ldmdavs	r9!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1bf8:	534f2f78 	movtpl	r2, #65400	@ 0xff78
    1bfc:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
    1c00:	72656270 	rsbvc	r6, r5, #112, 4
    1c04:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1c08:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
    1c0c:	4f545265 	svcmi	0x00545265
    1c10:	65442f53 	strbvs	r2, [r4, #-3923]	@ 0xfffff0ad
    1c14:	442f6f6d 	strtmi	r6, [pc], #-3949	@ 1c1c <_start-0xe3e4>
    1c18:	65766972 	ldrbvs	r6, [r6, #-2418]!	@ 0xfffff68e
    1c1c:	00007372 	andeq	r7, r0, r2, ror r3
    1c20:	6e69616d 	powvsez	f6, f1, #5.0
    1c24:	0100632e 	tsteq	r0, lr, lsr #6
    1c28:	72700000 	rsbsvc	r0, r0, #0
    1c2c:	65646a6f 	strbvs	r6, [r4, #-2671]!	@ 0xfffff591
    1c30:	682e7366 	stmdavs	lr!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}
    1c34:	00000200 	andeq	r0, r0, r0, lsl #4
    1c38:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
    1c3c:	7263616d 	rsbvc	r6, r3, #1073741851	@ 0x4000001b
    1c40:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1c44:	74000003 	strvc	r0, [r0], #-3
    1c48:	2e6b7361 	cdpcs	3, 6, cr7, cr11, cr1, {3}
    1c4c:	00020068 	andeq	r0, r2, r8, rrx
    1c50:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    1c54:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1c58:	00000004 	andeq	r0, r0, r4
    1c5c:	05001805 	streq	r1, [r0, #-2053]	@ 0xfffff7fb
    1c60:	02430802 	subeq	r0, r3, #131072	@ 0x20000
    1c64:	00cd0300 	sbceq	r0, sp, r0, lsl #6
    1c68:	9f0b0501 	svcls	0x000b0501
    1c6c:	02000c05 	andeq	r0, r0, #1280	@ 0x500
    1c70:	052e0104 	streq	r0, [lr, #-260]!	@ 0xfffffefc
    1c74:	04020015 	streq	r0, [r2], #-21	@ 0xffffffeb
    1c78:	0c054a01 			@ <UNDEFINED> instruction: 0x0c054a01
    1c7c:	01040200 	mrseq	r0, R12_usr
    1c80:	4b05052e 	blmi	143140 <__bss_end+0x11d540>
    1c84:	052e0e05 	streq	r0, [lr, #-3589]!	@ 0xfffff1fb
    1c88:	1f054b01 	svcne	0x00054b01
    1c8c:	830b05bc 	movwhi	r0, #46524	@ 0xb5bc
    1c90:	052f1505 	streq	r1, [pc, #-1285]!	@ 1793 <_start-0xe86d>
    1c94:	0c056609 	stceq	6, cr6, [r5], {9}
    1c98:	85010565 	strhi	r0, [r1, #-1381]	@ 0xfffffa9b
    1c9c:	05841205 	streq	r1, [r4, #517]	@ 0x205
    1ca0:	1a054d01 	bne	1550ac <__bss_end+0x12f4ac>
    1ca4:	84060584 	strhi	r0, [r6], #-1412	@ 0xfffffa7c
    1ca8:	054c0405 	strbeq	r0, [ip, #-1029]	@ 0xfffffbfb
    1cac:	02006703 	andeq	r6, r0, #786432	@ 0xc0000
    1cb0:	05670104 	strbeq	r0, [r7, #-260]!	@ 0xfffffefc
    1cb4:	1a054804 	bne	153ccc <__bss_end+0x12e0cc>
    1cb8:	84060550 	strhi	r0, [r6], #-1360	@ 0xfffffab0
    1cbc:	054c0405 	strbeq	r0, [ip, #-1029]	@ 0xfffffbfb
    1cc0:	004b6703 	subeq	r6, fp, r3, lsl #14
    1cc4:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    1cc8:	05470405 	strbeq	r0, [r7, #-1029]	@ 0xfffffbfb
    1ccc:	4a0f0301 	bmi	3c28d8 <__bss_end+0x39ccd8>
    1cd0:	2f670505 	svccs	0x00670505
    1cd4:	684c0205 	stmdavs	ip, {r0, r2, r9}^
    1cd8:	92089108 	andls	r9, r8, #8, 2
    1cdc:	02340705 	eorseq	r0, r4, #1310720	@ 0x140000
    1ce0:	0101000e 	tsteq	r1, lr
    1ce4:	0000018c 	andeq	r0, r0, ip, lsl #3
    1ce8:	00bd0003 	adcseq	r0, sp, r3
    1cec:	01020000 	mrseq	r0, (UNDEF: 2)
    1cf0:	000d0efb 	strdeq	r0, [sp], -fp
    1cf4:	01010101 	tsteq	r1, r1, lsl #2
    1cf8:	01000000 	mrseq	r0, (UNDEF: 0)
    1cfc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1d00:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1d04:	2f2e2e2f 	svccs	0x002e2e2f
    1d08:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    1d0c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	@ 1b70 <_start-0xe490>
    1d10:	2f636269 	svccs	0x00636269
    1d14:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1d18:	2f00676e 	svccs	0x0000676e
    1d1c:	2f727375 	svccs	0x00727375
    1d20:	2f62696c 	svccs	0x0062696c
    1d24:	2f636367 	svccs	0x00636367
    1d28:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	@ 0xfffffe7c
    1d2c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	@ 0xfffff092
    1d30:	6261652d 	rsbvs	r6, r1, #188743680	@ 0xb400000
    1d34:	33312f69 	teqcc	r1, #420	@ 0x1a4
    1d38:	312e322e 			@ <UNDEFINED> instruction: 0x312e322e
    1d3c:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
    1d40:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
    1d44:	75622f00 	strbvc	r2, [r2, #-3840]!	@ 0xfffff100
    1d48:	2f646c69 	svccs	0x00646c69
    1d4c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    1d50:	332d6269 			@ <UNDEFINED> instruction: 0x332d6269
    1d54:	4a305638 	bmi	c1763c <__bss_end+0xbf1a3c>
    1d58:	656e2f43 	strbvs	r2, [lr, #-3907]!	@ 0xfffff0bd
    1d5c:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    1d60:	342e342d 	strtcc	r3, [lr], #-1069	@ 0xfffffbd3
    1d64:	322e302e 	eorcc	r3, lr, #46	@ 0x2e
    1d68:	31333230 	teqcc	r3, r0, lsr r2
    1d6c:	2f313332 	svccs	0x00313332
    1d70:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    1d74:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	@ 1bd8 <_start-0xe428>
    1d78:	2f636269 	svccs	0x00636269
    1d7c:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
    1d80:	00656475 	rsbeq	r6, r5, r5, ror r4
    1d84:	72747300 	rsbsvc	r7, r4, #0, 6
    1d88:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    1d8c:	0100632e 	tsteq	r0, lr, lsr #6
    1d90:	74730000 	ldrbtvc	r0, [r3], #-0
    1d94:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    1d98:	0200682e 	andeq	r6, r0, #3014656	@ 0x2e0000
    1d9c:	74730000 	ldrbtvc	r0, [r3], #-0
    1da0:	676e6972 			@ <UNDEFINED> instruction: 0x676e6972
    1da4:	0300682e 	movweq	r6, #2094	@ 0x82e
    1da8:	05000000 	streq	r0, [r0, #-0]
    1dac:	02050001 	andeq	r0, r5, #1
    1db0:	000244f0 	strdeq	r4, [r2], -r0
    1db4:	0100c003 	tsteq	r0, r3
    1db8:	12030305 	andne	r0, r3, #335544320	@ 0x14000000
    1dbc:	13131301 	tstne	r3, #67108864	@ 0x4000000
    1dc0:	06080515 			@ <UNDEFINED> instruction: 0x06080515
    1dc4:	001d0501 	andseq	r0, sp, r1, lsl #10
    1dc8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    1dcc:	052e0605 	streq	r0, [lr, #-1541]!	@ 0xfffff9fb
    1dd0:	0402001d 	streq	r0, [r2], #-29	@ 0xffffffe3
    1dd4:	01052e01 	tsteq	r5, r1, lsl #28
    1dd8:	059e6803 	ldreq	r6, [lr, #2051]	@ 0x803
    1ddc:	2e120309 	cdpcs	3, 1, cr0, cr2, cr9, {0}
    1de0:	02001d05 	andeq	r1, r0, #320	@ 0x140
    1de4:	00340104 	eorseq	r0, r4, r4, lsl #2
    1de8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    1dec:	14031005 	strne	r1, [r3], #-5
    1df0:	2e15054a 	cfmac32cs	mvfx0, mvfx5, mvfx10
    1df4:	052e0a05 	streq	r0, [lr, #-2565]!	@ 0xfffff5fb
    1df8:	07052e13 	smladeq	r5, r3, lr, r2
    1dfc:	052f062d 	streq	r0, [pc, #-1581]!	@ 17d7 <_start-0xe829>
    1e00:	0501060a 	streq	r0, [r1, #-1546]	@ 0xfffff9f6
    1e04:	07052e10 	smladeq	r5, r0, lr, r2
    1e08:	052e062d 	streq	r0, [lr, #-1581]!	@ 0xfffff9d3
    1e0c:	01051010 	tsteq	r5, r0, lsl r0
    1e10:	4a0c0306 	bmi	302a30 <__bss_end+0x2dce30>
    1e14:	45061205 	strmi	r1, [r6, #-517]	@ 0xfffffdfb
    1e18:	05050106 	streq	r0, [r5, #-262]	@ 0xfffffefa
    1e1c:	0c056706 	stceq	7, cr6, [r5], {6}
    1e20:	12050106 	andne	r0, r5, #-2147483647	@ 0x80000001
    1e24:	01062d06 	tsteq	r6, r6, lsl #26
    1e28:	2e4f0105 	dvfcse	f0, f7, f5
    1e2c:	0313052e 	tsteq	r3, #192937984	@ 0xb800000
    1e30:	2d052e65 	stccs	14, cr2, [r5, #-404]	@ 0xfffffe6c
    1e34:	01040200 	mrseq	r0, R12_usr
    1e38:	00290533 	eoreq	r0, r9, r3, lsr r5
    1e3c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    1e40:	30060405 	andcc	r0, r6, r5, lsl #8
    1e44:	2d050106 	stfcss	f0, [r5, #-24]	@ 0xffffffe8
    1e48:	01040200 	mrseq	r0, R12_usr
    1e4c:	0402002c 	streq	r0, [r2], #-44	@ 0xffffffd4
    1e50:	29054a01 	stmdbcs	r5, {r0, r9, fp, lr}
    1e54:	01040200 	mrseq	r0, R12_usr
    1e58:	680a052e 	stmdavs	sl, {r1, r2, r3, r5, r8, sl}
    1e5c:	2f060405 	svccs	0x00060405
    1e60:	0f062905 	svceq	0x00062905
    1e64:	05311305 	ldreq	r1, [r1, #-773]!	@ 0xfffffcfb
    1e68:	052b0629 	streq	r0, [fp, #-1577]!	@ 0xfffff9d7
    1e6c:	02310621 	eorseq	r0, r1, #34603008	@ 0x2100000
    1e70:	01010008 	tsteq	r1, r8
    1e74:	000001b5 			@ <UNDEFINED> instruction: 0x000001b5
    1e78:	00bc0003 	adcseq	r0, ip, r3
    1e7c:	01020000 	mrseq	r0, (UNDEF: 2)
    1e80:	000d0efb 	strdeq	r0, [sp], -fp
    1e84:	01010101 	tsteq	r1, r1, lsl #2
    1e88:	01000000 	mrseq	r0, (UNDEF: 0)
    1e8c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    1e90:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1e94:	2f2e2e2f 	svccs	0x002e2e2f
    1e98:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    1e9c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	@ 1d00 <_start-0xe300>
    1ea0:	2f636269 	svccs	0x00636269
    1ea4:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1ea8:	2f00676e 	svccs	0x0000676e
    1eac:	2f727375 	svccs	0x00727375
    1eb0:	2f62696c 	svccs	0x0062696c
    1eb4:	2f636367 	svccs	0x00636367
    1eb8:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	@ 0xfffffe7c
    1ebc:	656e6f6e 	strbvs	r6, [lr, #-3950]!	@ 0xfffff092
    1ec0:	6261652d 	rsbvs	r6, r1, #188743680	@ 0xb400000
    1ec4:	33312f69 	teqcc	r1, #420	@ 0x1a4
    1ec8:	312e322e 			@ <UNDEFINED> instruction: 0x312e322e
    1ecc:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
    1ed0:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
    1ed4:	75622f00 	strbvc	r2, [r2, #-3840]!	@ 0xfffff100
    1ed8:	2f646c69 	svccs	0x00646c69
    1edc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    1ee0:	332d6269 			@ <UNDEFINED> instruction: 0x332d6269
    1ee4:	4a305638 	bmi	c177cc <__bss_end+0xbf1bcc>
    1ee8:	656e2f43 	strbvs	r2, [lr, #-3907]!	@ 0xfffff0bd
    1eec:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    1ef0:	342e342d 	strtcc	r3, [lr], #-1069	@ 0xfffffbd3
    1ef4:	322e302e 	eorcc	r3, lr, #46	@ 0x2e
    1ef8:	31333230 	teqcc	r3, r0, lsr r2
    1efc:	2f313332 	svccs	0x00313332
    1f00:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    1f04:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	@ 1d68 <_start-0xe298>
    1f08:	2f636269 	svccs	0x00636269
    1f0c:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
    1f10:	00656475 	rsbeq	r6, r5, r5, ror r4
    1f14:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    1f18:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    1f1c:	00010063 	andeq	r0, r1, r3, rrx
    1f20:	64747300 	ldrbtvs	r7, [r4], #-768	@ 0xfffffd00
    1f24:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    1f28:	00020068 	andeq	r0, r2, r8, rrx
    1f2c:	72747300 	rsbsvc	r7, r4, #0, 6
    1f30:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    1f34:	00030068 	andeq	r0, r3, r8, rrx
    1f38:	01050000 	mrseq	r0, (UNDEF: 5)
    1f3c:	c0020500 	andgt	r0, r2, r0, lsl #10
    1f40:	03000245 	movweq	r0, #581	@ 0x245
    1f44:	03050128 	movweq	r0, #20776	@ 0x5128
    1f48:	13131513 	tstne	r3, #79691776	@ 0x4c00000
    1f4c:	0a051513 	beq	1473a0 <__bss_end+0x1217a0>
    1f50:	06010501 	streq	r0, [r1], -r1, lsl #10
    1f54:	052e7603 	streq	r7, [lr, #-1539]!	@ 0xfffff9fd
    1f58:	2e0a030a 	cdpcs	3, 0, cr0, cr10, cr10, {0}
    1f5c:	30060705 	andcc	r0, r6, r5, lsl #14
    1f60:	01060a05 	tsteq	r6, r5, lsl #20
    1f64:	052e0c05 	streq	r0, [lr, #-3077]!	@ 0xfffff3fb
    1f68:	09052e0a 	stmdbeq	r5, {r1, r3, r9, sl, fp, sp}
    1f6c:	052e7503 	streq	r7, [lr, #-1283]!	@ 0xfffffafd
    1f70:	2e0c0310 	mcrcs	3, 0, r0, cr12, cr0, {0}
    1f74:	2d0a052e 	cfstr32cs	mvfx0, [sl, #-184]	@ 0xffffff48
    1f78:	0607052e 	streq	r0, [r7], -lr, lsr #10
    1f7c:	1309052e 	movwne	r0, #38190	@ 0x952e
    1f80:	01060e05 	tsteq	r6, r5, lsl #28
    1f84:	2b060a05 	blcs	1847a0 <__bss_end+0x15eba0>
    1f88:	05520305 	ldrbeq	r0, [r2, #-773]	@ 0xfffffcfb
    1f8c:	05010606 	streq	r0, [r1, #-1542]	@ 0xfffff9fa
    1f90:	164d0607 	strbne	r0, [sp], -r7, lsl #12
    1f94:	06100513 			@ <UNDEFINED> instruction: 0x06100513
    1f98:	03016d03 	movweq	r6, #7427	@ 0x1d03
    1f9c:	07054a18 	smladeq	r5, r8, sl, r4
    1fa0:	16054606 	strne	r4, [r5], -r6, lsl #12
    1fa4:	01040200 	mrseq	r0, R12_usr
    1fa8:	16100501 	ldrne	r0, [r0], -r1, lsl #10
    1fac:	0b052e06 	bleq	14d7cc <__bss_end+0x127bcc>
    1fb0:	1b05bc06 	blne	170fd0 <__bss_end+0x14b3d0>
    1fb4:	0b050106 	bleq	1423d4 <__bss_end+0x11c7d4>
    1fb8:	1b052f06 	blne	14dbd8 <__bss_end+0x127fd8>
    1fbc:	0b050106 	bleq	1423dc <__bss_end+0x11c7dc>
    1fc0:	1b052f06 	blne	14dbe0 <__bss_end+0x127fe0>
    1fc4:	0b050106 	bleq	1423e4 <__bss_end+0x11c7e4>
    1fc8:	1b052f06 	blne	14dbe8 <__bss_end+0x127fe8>
    1fcc:	0b050106 	bleq	1423ec <__bss_end+0x11c7ec>
    1fd0:	10052f06 	andne	r2, r5, r6, lsl #30
    1fd4:	06017a03 	streq	r7, [r1], -r3, lsl #20
    1fd8:	09034a2e 	stmdbeq	r3, {r1, r2, r3, r5, r9, fp, lr}
    1fdc:	0666062e 	strbteq	r0, [r6], -lr, lsr #12
    1fe0:	0b052e2e 	bleq	14d8a0 <__bss_end+0x127ca0>
    1fe4:	1b056806 	blne	15c004 <__bss_end+0x136404>
    1fe8:	0b050106 	bleq	142408 <__bss_end+0x11c808>
    1fec:	10052f06 	andne	r2, r5, r6, lsl #30
    1ff0:	054a060f 	strbeq	r0, [sl, #-1551]	@ 0xfffff9f1
    1ff4:	0b03060a 	bleq	c3824 <__bss_end+0x9dc24>
    1ff8:	0501062e 	streq	r0, [r1, #-1582]	@ 0xfffff9d2
    1ffc:	2e5a0310 	mrccs	3, 2, r0, cr10, cr0, {0}
    2000:	030a052e 	movweq	r0, #42286	@ 0xa52e
    2004:	05052e26 	streq	r2, [r5, #-3622]	@ 0xfffff1da
    2008:	0a052f06 	beq	14dc28 <__bss_end+0x128028>
    200c:	2d060106 	stfcss	f0, [r6, #-24]	@ 0xffffffe8
    2010:	01050106 	tsteq	r5, r6, lsl #2
    2014:	0309054e 	movweq	r0, #38222	@ 0x954e
    2018:	032e4a77 			@ <UNDEFINED> instruction: 0x032e4a77
    201c:	0a052e53 	beq	14d970 <__bss_end+0x127d70>
    2020:	052e0903 	streq	r0, [lr, #-2307]!	@ 0xfffff6fd
    2024:	4a0b0314 	bmi	2c2c7c <__bss_end+0x29d07c>
    2028:	01000402 	tsteq	r0, r2, lsl #8
    202c:	0001e901 	andeq	lr, r1, r1, lsl #18
    2030:	00000300 	andeq	r0, r0, r0, lsl #6
    2034:	02000001 	andeq	r0, r0, #1
    2038:	0d0efb01 	vstreq	d15, [lr, #-4]
    203c:	01010100 	mrseq	r0, (UNDEF: 17)
    2040:	00000001 	andeq	r0, r0, r1
    2044:	01000001 	tsteq	r0, r1
    2048:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    204c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2050:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2054:	2f62696c 	svccs	0x0062696c
    2058:	6362696c 	cmnvs	r2, #108, 18	@ 0x1b0000
    205c:	63616d2f 	cmnvs	r1, #3008	@ 0xbc0
    2060:	656e6968 	strbvs	r6, [lr, #-2408]!	@ 0xfffff698
    2064:	6d72612f 	ldfvse	f6, [r2, #-188]!	@ 0xffffff44
    2068:	2f2e2e00 	svccs	0x002e2e00
    206c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2070:	656e2f2e 	strbvs	r2, [lr, #-3886]!	@ 0xfffff0d2
    2074:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    2078:	62696c2f 	rsbvs	r6, r9, #12032	@ 0x2f00
    207c:	616d2f63 	cmnvs	sp, r3, ror #30
    2080:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    2084:	72612f65 	rsbvc	r2, r1, #404	@ 0x194
    2088:	2e2e2f6d 	cdpcs	15, 2, cr2, cr14, cr13, {3}
    208c:	2f2e2e2f 	svccs	0x002e2e2f
    2090:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2094:	2f00676e 	svccs	0x0000676e
    2098:	2f727375 	svccs	0x00727375
    209c:	2f62696c 	svccs	0x0062696c
    20a0:	2f636367 	svccs	0x00636367
    20a4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	@ 0xfffffe7c
    20a8:	656e6f6e 	strbvs	r6, [lr, #-3950]!	@ 0xfffff092
    20ac:	6261652d 	rsbvs	r6, r1, #188743680	@ 0xb400000
    20b0:	33312f69 	teqcc	r1, #420	@ 0x1a4
    20b4:	312e322e 			@ <UNDEFINED> instruction: 0x312e322e
    20b8:	636e692f 	cmnvs	lr, #770048	@ 0xbc000
    20bc:	6564756c 	strbvs	r7, [r4, #-1388]!	@ 0xfffffa94
    20c0:	75622f00 	strbvc	r2, [r2, #-3840]!	@ 0xfffff100
    20c4:	2f646c69 	svccs	0x00646c69
    20c8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    20cc:	332d6269 			@ <UNDEFINED> instruction: 0x332d6269
    20d0:	4a305638 	bmi	c179b8 <__bss_end+0xbf1db8>
    20d4:	656e2f43 	strbvs	r2, [lr, #-3907]!	@ 0xfffff0bd
    20d8:	62696c77 	rsbvs	r6, r9, #30464	@ 0x7700
    20dc:	342e342d 	strtcc	r3, [lr], #-1069	@ 0xfffffbd3
    20e0:	322e302e 	eorcc	r3, lr, #46	@ 0x2e
    20e4:	31333230 	teqcc	r3, r0, lsr r2
    20e8:	2f313332 	svccs	0x00313332
    20ec:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    20f0:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	@ 1f54 <_start-0xe0ac>
    20f4:	2f636269 	svccs	0x00636269
    20f8:	6c636e69 	stclvs	14, cr6, [r3], #-420	@ 0xfffffe5c
    20fc:	00656475 	rsbeq	r6, r5, r5, ror r4
    2100:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    2104:	2d797063 	ldclcs	0, cr7, [r9, #-396]!	@ 0xfffffe74
    2108:	62757473 	rsbsvs	r7, r5, #1929379840	@ 0x73000000
    210c:	0100632e 	tsteq	r0, lr, lsr #6
    2110:	656d0000 	strbvs	r0, [sp, #-0]!
    2114:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    2118:	0200632e 	andeq	r6, r0, #-1207959552	@ 0xb8000000
    211c:	74730000 	ldrbtvc	r0, [r3], #-0
    2120:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    2124:	0300682e 	movweq	r6, #2094	@ 0x82e
    2128:	74730000 	ldrbtvc	r0, [r3], #-0
    212c:	676e6972 			@ <UNDEFINED> instruction: 0x676e6972
    2130:	0400682e 	streq	r6, [r0], #-2094	@ 0xfffff7d2
    2134:	04000000 	streq	r0, [r0], #-0
    2138:	00010502 	andeq	r0, r1, r2, lsl #10
    213c:	46bc0205 	ldrtmi	r0, [ip], r5, lsl #4
    2140:	33030002 	movwcc	r0, #12290	@ 0x3002
    2144:	03030501 	movweq	r0, #13569	@ 0x3501
    2148:	1313010e 	tstne	r3, #-2147483645	@ 0x80000003
    214c:	06051613 			@ <UNDEFINED> instruction: 0x06051613
    2150:	1c050106 	stfnes	f0, [r5], {6}
    2154:	01040200 	mrseq	r0, R12_usr
    2158:	0018054a 	andseq	r0, r8, sl, asr #10
    215c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    2160:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
    2164:	030e052e 	movweq	r0, #58670	@ 0xe52e
    2168:	18052e22 	stmdane	r5, {r1, r5, r9, sl, fp, sp}
    216c:	01040200 	mrseq	r0, R12_usr
    2170:	002e6503 	eoreq	r6, lr, r3, lsl #10
    2174:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    2178:	03060505 	movweq	r0, #25861	@ 0x6505
    217c:	0c05661c 	stceq	6, cr6, [r5], {28}
    2180:	0a050106 	beq	1425a0 <__bss_end+0x11c9a0>
    2184:	2f0c052d 	svccs	0x000c052d
    2188:	2d060a05 	vstrcs	s0, [r6, #-20]	@ 0xffffffec
    218c:	054a0106 	strbeq	r0, [sl, #-262]	@ 0xfffffefa
    2190:	2e5e0309 	cdpcs	3, 5, cr0, cr14, cr9, {0}
    2194:	03060a05 	movweq	r0, #27141	@ 0x6a05
    2198:	0e052e22 	cdpeq	14, 0, cr2, cr5, cr2, {1}
    219c:	0a050106 	beq	1425bc <__bss_end+0x11c9bc>
    21a0:	13052e2e 	movwne	r2, #24110	@ 0x5e2e
    21a4:	052e6703 	streq	r6, [lr, #-1795]!	@ 0xfffff8fd
    21a8:	2e690301 	cdpcs	3, 6, cr0, cr9, cr1, {0}
    21ac:	03060b05 	movweq	r0, #27397	@ 0x6b05
    21b0:	1a05ba1d 	bne	170a2c <__bss_end+0x14ae2c>
    21b4:	1c050106 	stfnes	f0, [r5], {6}
    21b8:	060b054a 	streq	r0, [fp], -sl, asr #10
    21bc:	05131367 	ldreq	r1, [r3, #-871]	@ 0xfffffc99
    21c0:	050d0613 	streq	r0, [sp, #-1555]	@ 0xfffff9ed
    21c4:	0b05301a 	bleq	14e234 <__bss_end+0x128634>
    21c8:	13056a06 	movwne	r6, #23046	@ 0x5a06
    21cc:	06017a03 	streq	r7, [r1], -r3, lsl #20
    21d0:	2e0a032e 	cdpcs	3, 0, cr0, cr10, cr14, {1}
    21d4:	054a064a 	strbeq	r0, [sl, #-1610]	@ 0xfffff9b6
    21d8:	1a05d80b 	bne	17820c <__bss_end+0x15260c>
    21dc:	052e0106 	streq	r0, [lr, #-262]!	@ 0xfffffefa
    21e0:	052f060b 	streq	r0, [pc, #-1547]!	@ 1bdd <_start-0xe423>
    21e4:	0b050f13 	bleq	145e38 <__bss_end+0x120238>
    21e8:	052f8906 	streq	r8, [pc, #-2310]!	@ 18ea <_start-0xe716>
    21ec:	0531060a 	ldreq	r0, [r1, #-1546]!	@ 0xfffff9f6
    21f0:	2e2e060e 	cfmadda32cs	mvax0, mvax0, mvfx14, mvfx14
    21f4:	0a052e2e 	beq	14dab4 <__bss_end+0x127eb4>
    21f8:	0605052e 	streq	r0, [r5], -lr, lsr #10
    21fc:	060c052f 	streq	r0, [ip], -pc, lsr #10
    2200:	2d0a0501 	cfstr32cs	mvfx0, [sl, #-4]
    2204:	052f0c05 	streq	r0, [pc, #-3077]!	@ 1607 <_start-0xe9f9>
    2208:	062d060a 	strteq	r0, [sp], -sl, lsl #12
    220c:	06030501 	streq	r0, [r3], -r1, lsl #10
    2210:	06010531 			@ <UNDEFINED> instruction: 0x06010531
    2214:	00040214 	andeq	r0, r4, r4, lsl r2
    2218:	Address 0x2218 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	42717269 	rsbsmi	r7, r1, #-1879048186	@ 0x90000006
      10:	6b636f6c 	blvs	18dbdc8 <__bss_end+0x18b61c8>
      14:	726f7000 	rsbvc	r7, pc, #0
      18:	63695474 	cmnvs	r9, #116, 8	@ 0x74000000
      1c:	7079546b 	rsbsvc	r5, r9, fp, ror #8
      20:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	@ <UNPREDICTABLE>
      24:	2f656d6f 	svccs	0x00656d6f
      28:	2f786879 	svccs	0x00786879
      2c:	522f534f 	eorpl	r5, pc, #1006632961	@ 0x3c000001
      30:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
      34:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      38:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
      3c:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
      40:	2f534f54 	svccs	0x00534f54
      44:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
      48:	534f5452 	movtpl	r5, #62546	@ 0xf452
      4c:	756f532f 	strbvc	r5, [pc, #-815]!	@ fffffd25 <_estack+0xf7fdfd25>
      50:	2f656372 	svccs	0x00656372
      54:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
      58:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
      5c:	4343472f 	movtmi	r4, #14127	@ 0x372f
      60:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
      64:	72656270 	rsbvc	r6, r5, #112, 4
      68:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
      6c:	726f702f 	rsbvc	r7, pc, #47	@ 0x2f
      70:	00632e74 	rsbeq	r2, r3, r4, ror lr
      74:	73615476 	cmnvc	r1, #1979711488	@ 0x76000000
      78:	6977536b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6, r8, r9, ip, lr}^
      7c:	43686374 	cmnmi	r8, #116, 6	@ 0xd0000001
      80:	65746e6f 	ldrbvs	r6, [r4, #-3695]!	@ 0xfffff191
      84:	70007478 	andvc	r7, r0, r8, ror r4
      88:	65537672 	ldrbvs	r7, [r3, #-1650]	@ 0xfffff98e
      8c:	54707574 	ldrbtpl	r7, [r0], #-1396	@ 0xfffffa8c
      90:	72656d69 	rsbvc	r6, r5, #6720	@ 0x1a40
      94:	65746e49 	ldrbvs	r6, [r4, #-3657]!	@ 0xfffff1b7
      98:	70757272 	rsbsvc	r7, r5, r2, ror r2
      9c:	50700074 	rsbspl	r0, r0, r4, ror r0
      a0:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	@ 0xfffffe7c
      a4:	71726900 	cmnvc	r2, r0, lsl #18
      a8:	69676552 	stmdbvs	r7!, {r1, r4, r6, r8, sl, sp, lr}^
      ac:	72657473 	rsbvc	r7, r5, #1929379840	@ 0x73000000
      b0:	4f787000 	svcmi	0x00787000
      b4:	69676972 	stmdbvs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
      b8:	546c616e 	strbtpl	r6, [ip], #-366	@ 0xfffffe92
      bc:	5f00534f 	svcpl	0x0000534f
      c0:	324d4342 	subcc	r4, sp, #134217729	@ 0x8000001
      c4:	5f353338 	svcpl	0x00353338
      c8:	454d4954 	strbmi	r4, [sp, #-2388]	@ 0xfffff6ac
      cc:	45525f52 	ldrbmi	r5, [r2, #-3922]	@ 0xfffff0ae
      d0:	73005347 	movwvc	r5, #839	@ 0x347
      d4:	74726f68 	ldrbtvc	r6, [r2], #-3944	@ 0xfffff098
      d8:	736e7520 	cmnvc	lr, #32, 10	@ 0x8000000
      dc:	656e6769 	strbvs	r6, [lr, #-1897]!	@ 0xfffff897
      e0:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      e4:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
      e8:	31432055 	qdaddcc	r2, r5, r3
      ec:	33312037 	teqcc	r1, #55	@ 0x37
      f0:	312e322e 			@ <UNDEFINED> instruction: 0x312e322e
      f4:	32303220 	eorscc	r3, r0, #32, 4
      f8:	30303133 	eorscc	r3, r0, r3, lsr r1
      fc:	6d2d2039 	stcvs	0, cr2, [sp, #-228]!	@ 0xffffff1c
     100:	616f6c66 	cmnvs	pc, r6, ror #24
     104:	62612d74 	rsbvs	r2, r1, #116, 26	@ 0x1d00
     108:	6f733d69 	svcvs	0x00733d69
     10c:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	@ 0xfffffe68
     110:	6d72616d 	ldfvse	f6, [r2, #-436]!	@ 0xfffffe4c
     114:	616d2d20 	cmnvs	sp, r0, lsr #26
     118:	3d686372 	stclcc	3, cr6, [r8, #-456]!	@ 0xfffffe38
     11c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
     120:	2d207a36 	vstmdbcs	r0!, {s14-s67}
     124:	672d2067 	strvs	r2, [sp, -r7, rrx]!
     128:	00672d20 	rsbeq	r2, r7, r0, lsr #26
     12c:	41546470 	cmpmi	r4, r0, ror r4
     130:	435f4b53 	cmpmi	pc, #84992	@ 0x14c00
     134:	0045444f 	subeq	r4, r5, pc, asr #8
     138:	55717269 	ldrbpl	r7, [r1, #-617]!	@ 0xfffffd97
     13c:	6f6c626e 	svcvs	0x006c626e
     140:	76006b63 	strvc	r6, [r0], -r3, ror #22
     144:	74726f50 	ldrbtvc	r6, [r2], #-3920	@ 0xfffff0b0
     148:	53646e45 	cmnpl	r4, #1104	@ 0x450
     14c:	64656863 	strbtvs	r6, [r5], #-2147	@ 0xfffff79d
     150:	72656c75 	rsbvc	r6, r5, #29952	@ 0x7500
     154:	69547600 	ldmdbvs	r4, {r9, sl, ip, sp, lr}^
     158:	53496b63 	movtpl	r6, #39779	@ 0x9b63
     15c:	78700052 	ldmdavc	r0!, {r1, r4, r6}^
     160:	4f706f54 	svcmi	0x00706f54
     164:	61745366 	cmnvs	r4, r6, ror #6
     168:	6c006b63 			@ <UNDEFINED> instruction: 0x6c006b63
     16c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     170:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     174:	746e6920 	strbtvc	r6, [lr], #-2336	@ 0xfffff6e0
     178:	6f507600 	svcvs	0x00507600
     17c:	53497472 	movtpl	r7, #38002	@ 0x9472
     180:	61745352 	cmnvs	r4, r2, asr r3
     184:	69467472 	stmdbvs	r6, {r1, r4, r5, r6, sl, ip, sp, lr}^
     188:	54747372 	ldrbtpl	r7, [r4], #-882	@ 0xfffffc8e
     18c:	006b7361 	rsbeq	r7, fp, r1, ror #6
     190:	61507670 	cmpvs	r0, r0, ror r6
     194:	656d6172 	strbvs	r6, [sp, #-370]!	@ 0xfffffe8e
     198:	73726574 	cmnvc	r2, #116, 10	@ 0x1d000000
     19c:	65527000 	ldrbvs	r7, [r2, #-0]
     1a0:	76007367 	strvc	r7, [r0], -r7, ror #6
     1a4:	6b736154 	blvs	1cd86fc <__bss_end+0x1cb2afc>
     1a8:	72636e49 	rsbvc	r6, r3, #1168	@ 0x490
     1ac:	6e656d65 	cdpvs	13, 6, cr6, cr5, cr5, {3}
     1b0:	63695474 	cmnvs	r9, #116, 8	@ 0x74000000
     1b4:	682f006b 	stmdavs	pc!, {r0, r1, r3, r5, r6}	@ <UNPREDICTABLE>
     1b8:	2f656d6f 	svccs	0x00656d6f
     1bc:	2f786879 	svccs	0x00786879
     1c0:	522f534f 	eorpl	r5, pc, #1006632961	@ 0x3c000001
     1c4:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     1c8:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     1cc:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     1d0:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     1d4:	00534f54 	subseq	r4, r3, r4, asr pc
     1d8:	45717269 	ldrbmi	r7, [r1, #-617]!	@ 0xfffffd97
     1dc:	6c62616e 	stfvse	f6, [r2], #-440	@ 0xfffffe48
     1e0:	4e460065 	cdpmi	0, 4, cr0, cr6, cr5, {3}
     1e4:	544e495f 	strbpl	r4, [lr], #-2399	@ 0xfffff6a1
     1e8:	55525245 	ldrbpl	r5, [r2, #-581]	@ 0xfffffdbb
     1ec:	485f5450 	ldmdami	pc, {r4, r6, sl, ip, lr}^	@ <UNPREDICTABLE>
     1f0:	4c444e41 	mcrrmi	14, 4, r4, r4, cr1
     1f4:	6c005245 	sfmvs	f5, 4, [r0], {69}	@ 0x45
     1f8:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     1fc:	62756f64 	rsbsvs	r6, r5, #100, 30	@ 0x190
     200:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     204:	74726f50 	ldrbtvc	r6, [r2], #-3920	@ 0xfffff0b0
     208:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
     20c:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
     210:	6c756465 	cfldrdvs	mvd6, [r5], #-404	@ 0xfffffe6c
     214:	70007265 	andvc	r7, r0, r5, ror #4
     218:	726f5078 	rsbvc	r5, pc, #120	@ 0x78
     21c:	696e4974 	stmdbvs	lr!, {r2, r4, r5, r6, r8, fp, lr}^
     220:	6c616974 			@ <UNDEFINED> instruction: 0x6c616974
     224:	53657369 	cmnpl	r5, #-1543503871	@ 0xa4000001
     228:	6b636174 	blvs	18d8800 <__bss_end+0x18b2c00>
     22c:	436c7500 	cmnmi	ip, #0, 10
     230:	61706d6f 	cmnvs	r0, pc, ror #26
     234:	614d6572 	hvcvs	54866	@ 0xd652
     238:	00686374 	rsbeq	r6, r8, r4, ror r3
     23c:	726f5076 	rsbvc	r5, pc, #118	@ 0x76
     240:	746e4574 	strbtvc	r4, [lr], #-1396	@ 0xfffffa8c
     244:	72437265 	subvc	r7, r3, #1342177286	@ 0x50000006
     248:	63697469 	cmnvs	r9, #1761607680	@ 0x69000000
     24c:	75006c61 	strvc	r6, [r0, #-3169]	@ 0xfffff39f
     250:	6972436c 	ldmdbvs	r2!, {r2, r3, r5, r6, r8, r9, lr}^
     254:	61636974 	smcvs	13972	@ 0x3694
     258:	73654e6c 	cmnvc	r5, #108, 28	@ 0x6c0
     25c:	676e6974 			@ <UNDEFINED> instruction: 0x676e6974
     260:	6f682f00 	svcvs	0x00682f00
     264:	792f656d 	stmdbvc	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
     268:	4f2f7868 	svcmi	0x002f7868
     26c:	61522f53 	cmpvs	r2, r3, asr pc
     270:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
     274:	50797272 	rsbspl	r7, r9, r2, ror r2
     278:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
     27c:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
     280:	462f534f 	strtmi	r5, [pc], -pc, asr #6
     284:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     288:	2f534f54 	svccs	0x00534f54
     28c:	72756f53 	rsbsvc	r6, r5, #332	@ 0x14c
     290:	702f6563 	eorvc	r6, pc, r3, ror #10
     294:	6174726f 	cmnvs	r4, pc, ror #4
     298:	2f656c62 	svccs	0x00656c62
     29c:	2f434347 	svccs	0x00434347
     2a0:	70736152 	rsbsvc	r6, r3, r2, asr r1
     2a4:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     2a8:	2f695079 	svccs	0x00695079
     2ac:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
     2b0:	2e727369 	cdpcs	3, 7, cr7, cr2, cr9, {3}
     2b4:	50760063 	rsbspl	r0, r6, r3, rrx
     2b8:	4574726f 	ldrbmi	r7, [r4, #-623]!	@ 0xfffffd91
     2bc:	43746978 	cmnmi	r4, #120, 18	@ 0x1e0000
     2c0:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     2c4:	006c6163 	rsbeq	r6, ip, r3, ror #2
     2c8:	726f5076 	rsbvc	r5, pc, #118	@ 0x76
     2cc:	65695974 	strbvs	r5, [r9, #-2420]!	@ 0xfffff68c
     2d0:	7250646c 	subsvc	r6, r0, #108, 8	@ 0x6c000000
     2d4:	7365636f 	cmnvc	r5, #-1140850687	@ 0xbc000001
     2d8:	00726f73 	rsbseq	r6, r2, r3, ror pc
     2dc:	65724676 	ldrbvs	r4, [r2, #-1654]!	@ 0xfffff98a
     2e0:	4f545265 	svcmi	0x00545265
     2e4:	53495f53 	movtpl	r5, #40787	@ 0x9f53
     2e8:	5f670052 	svcpl	0x00670052
     2ec:	61745362 	cmnvs	r4, r2, ror #6
     2f0:	64657472 	strbtvs	r7, [r5], #-1138	@ 0xfffffb8e
     2f4:	71726900 	cmnvc	r2, r0, lsl #18
     2f8:	646e6148 	strbtvs	r6, [lr], #-328	@ 0xfffffeb8
     2fc:	0072656c 	rsbseq	r6, r2, ip, ror #10
     300:	75437870 	strbvc	r7, [r3, #-2160]	@ 0xfffff790
     304:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     308:	42435474 	submi	r5, r3, #116, 8	@ 0x74000000
     30c:	45787000 	ldrbmi	r7, [r8, #-0]!
     310:	746e6576 	strbtvc	r6, [lr], #-1398	@ 0xfffffa8a
     314:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     318:	6f437800 	svcvs	0x00437800
     31c:	74756f52 	ldrbtvc	r6, [r5], #-3922	@ 0xfffff0ae
     320:	43656e69 	cmnmi	r5, #1680	@ 0x690
     324:	74616572 	strbtvc	r6, [r1], #-1394	@ 0xfffffa8e
     328:	72700065 	rsbsvc	r0, r0, #101	@ 0x65
     32c:	65684376 	strbvs	r4, [r8, #-886]!	@ 0xfffffc8a
     330:	65446b63 	strbvs	r6, [r4, #-2915]	@ 0xfffff49d
     334:	6579616c 	ldrbvs	r6, [r9, #-364]!	@ 0xfffffe94
     338:	73694c64 	cmnvc	r9, #100, 24	@ 0x6400
     33c:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     340:	6f526f43 	svcvs	0x00526f43
     344:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     348:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     34c:	6f526f43 	svcvs	0x00526f43
     350:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     354:	646f4365 	strbtvs	r4, [pc], #-869	@ 35c <_start-0xfca4>
     358:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     35c:	616c6544 	cmnvs	ip, r4, asr #10
     360:	43646579 	cmnmi	r4, #507510784	@ 0x1e400000
     364:	756f526f 	strbvc	r5, [pc, #-623]!	@ fd <_start-0xff03>
     368:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     36c:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     370:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     374:	6f54656d 	svcvs	0x0054656d
     378:	656b6157 	strbvs	r6, [fp, #-343]!	@ 0xfffffea9
     37c:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     380:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     384:	61697469 	cmnvs	r9, r9, ror #8
     388:	6573696c 	ldrbvs	r6, [r3, #-2412]!	@ 0xfffff694
     38c:	53787500 	cmnpl	r8, #0, 10
     390:	65746174 	ldrbvs	r6, [r4, #-372]!	@ 0xfffffe8c
     394:	694c7600 	stmdbvs	ip, {r9, sl, ip, sp, lr}^
     398:	6e497473 	mcrvs	4, 2, r7, cr9, cr3, {3}
     39c:	74726573 	ldrbtvc	r6, [r2], #-1395	@ 0xfffffa8d
     3a0:	52787000 	rsbspl	r7, r8, #0
     3a4:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     3a8:	6f526f43 	svcvs	0x00526f43
     3ac:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     3b0:	73694c65 	cmnvc	r9, #25856	@ 0x6500
     3b4:	73007374 	movwvc	r7, #884	@ 0x374
     3b8:	5f657a69 	svcpl	0x00657a69
     3bc:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     3c0:	76657250 			@ <UNDEFINED> instruction: 0x76657250
     3c4:	73756f69 	cmnvc	r5, #420	@ 0x1a4
     3c8:	6f437800 	svcvs	0x00437800
     3cc:	74756f52 	ldrbtvc	r6, [r5], #-3922	@ 0xfffff0ae
     3d0:	52656e69 	rsbpl	r6, r5, #1680	@ 0x690
     3d4:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     3d8:	6f724665 	svcvs	0x00724665
     3dc:	6576456d 	ldrbvs	r4, [r6, #-1389]!	@ 0xfffffa93
     3e0:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     3e4:	75007473 	strvc	r7, [r0, #-1139]	@ 0xfffffb8d
     3e8:	646e4978 	strbtvs	r4, [lr], #-2424	@ 0xfffff688
     3ec:	70007865 	andvc	r7, r0, r5, ror #16
     3f0:	526f4378 	rsbpl	r4, pc, #120, 6	@ 0xe0000001
     3f4:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     3f8:	7546656e 	strbvc	r6, [r6, #-1390]	@ 0xfffffa92
     3fc:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     400:	76006e6f 	strvc	r6, [r0], -pc, ror #28
     404:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     408:	6f6d6552 	svcvs	0x006d6552
     40c:	70006576 	andvc	r6, r0, r6, ror r5
     410:	626e5578 	rsbvs	r5, lr, #120, 10	@ 0x1e000000
     414:	6b636f6c 	blvs	18dc1cc <__bss_end+0x18b65cc>
     418:	52436465 	subpl	r6, r3, #1694498816	@ 0x65000000
     41c:	78004243 	stmdavc	r0, {r0, r1, r6, r9, lr}
     420:	656e6547 	strbvs	r6, [lr, #-1351]!	@ 0xfffffab9
     424:	4c636972 			@ <UNDEFINED> instruction: 0x4c636972
     428:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     42c:	006d6574 	rsbeq	r6, sp, r4, ror r5
     430:	774f7670 	smlsldxvc	r7, pc, r0, r6	@ <UNPREDICTABLE>
     434:	0072656e 	rsbseq	r6, r2, lr, ror #10
     438:	73694c76 	cmnvc	r9, #30208	@ 0x7600
     43c:	736e4974 	cmnvc	lr, #116, 18	@ 0x1d0000
     440:	45747265 	ldrbmi	r7, [r4, #-613]!	@ 0xfffffd9b
     444:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     448:	6b636954 	blvs	18da9a0 <__bss_end+0x18b4da0>
     44c:	446f5473 	strbtmi	r5, [pc], #-1139	@ 454 <_start-0xfbac>
     450:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     454:	54787000 	ldrbtpl	r7, [r8], #-0
     458:	00706d65 	rsbseq	r6, r0, r5, ror #26
     45c:	6f437870 	svcvs	0x00437870
     460:	4c74736e 	ldclmi	3, cr7, [r4], #-440	@ 0xfffffe48
     464:	00747369 	rsbseq	r7, r4, r9, ror #6
     468:	526f4378 	rsbpl	r4, pc, #120, 6	@ 0xe0000001
     46c:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     470:	6148656e 	cmpvs	r8, lr, ror #10
     474:	656c646e 	strbvs	r6, [ip, #-1134]!	@ 0xfffffb92
     478:	494c7800 	stmdbmi	ip, {fp, ip, sp, lr}^
     47c:	78005453 	stmdavc	r0, {r0, r1, r4, r6, sl, ip, lr}
     480:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	@ 0xfffffedc
     484:	756c6156 	strbvc	r6, [ip, #-342]!	@ 0xfffffeaa
     488:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     48c:	42435243 	submi	r5, r3, #805306372	@ 0x30000004
     490:	61547800 	cmpvs	r4, r0, lsl #16
     494:	65476b73 	strbvs	r6, [r7, #-2931]	@ 0xfffff48d
     498:	63695474 	cmnvs	r9, #116, 8	@ 0x74000000
     49c:	756f436b 	strbvc	r4, [pc, #-875]!	@ 139 <_start-0xfec7>
     4a0:	7800746e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     4a4:	5453494c 	ldrbpl	r4, [r3], #-2380	@ 0xfffff6b4
     4a8:	4554495f 	ldrbmi	r4, [r4, #-2399]	@ 0xfffff6a1
     4ac:	4376004d 	cmnmi	r6, #77	@ 0x4d
     4b0:	756f526f 	strbvc	r5, [pc, #-623]!	@ 249 <_start-0xfdb7>
     4b4:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     4b8:	65686353 	strbvs	r6, [r8, #-851]!	@ 0xfffffcad
     4bc:	656c7564 	strbvs	r7, [ip, #-1380]!	@ 0xfffffa9c
     4c0:	694d7800 	stmdbvs	sp, {fp, ip, sp, lr}^
     4c4:	694c696e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     4c8:	74497473 	strbvc	r7, [r9], #-1139	@ 0xfffffb8d
     4cc:	70006d65 	andvc	r6, r0, r5, ror #26
     4d0:	68437672 	stmdavs	r3, {r1, r4, r5, r6, r9, sl, ip, sp, lr}^
     4d4:	506b6365 	rsbpl	r6, fp, r5, ror #6
     4d8:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     4dc:	6552676e 	ldrbvs	r6, [r2, #-1902]	@ 0xfffff892
     4e0:	4c796461 	cfldrdmi	mvd6, [r9], #-388	@ 0xfffffe7c
     4e4:	00747369 	rsbseq	r7, r4, r9, ror #6
     4e8:	73615078 	cmnvc	r1, #120	@ 0x78
     4ec:	54646573 	strbtpl	r6, [r4], #-1395	@ 0xfffffa8d
     4f0:	736b6369 	cmnvc	fp, #-1543503871	@ 0xa4000001
     4f4:	76457800 	strbvc	r7, [r5], -r0, lsl #16
     4f8:	4c746e65 	ldclmi	14, cr6, [r4], #-404	@ 0xfffffe6c
     4fc:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     500:	006d6574 	rsbeq	r6, sp, r4, ror r5
     504:	75437870 	strbvc	r7, [r3, #-2160]	@ 0xfffff790
     508:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     50c:	526f4374 	rsbpl	r4, pc, #116, 6	@ 0xd0000001
     510:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     514:	7000656e 	andvc	r6, r0, lr, ror #10
     518:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     51c:	6e696174 	mcrvs	1, 3, r6, cr9, cr4, {3}
     520:	78007265 	stmdavc	r0, {r0, r2, r5, r6, r9, ip, sp, lr}
     524:	646e6550 	strbtvs	r6, [lr], #-1360	@ 0xfffffab0
     528:	52676e69 	rsbpl	r6, r7, #1680	@ 0x690
     52c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     530:	6f526f43 	svcvs	0x00526f43
     534:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     538:	73694c65 	cmnvc	r9, #25856	@ 0x6500
     53c:	43760074 	cmnmi	r6, #116	@ 0x74
     540:	756f526f 	strbvc	r5, [pc, #-623]!	@ 2d9 <_start-0xfd27>
     544:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     548:	54646441 	strbtpl	r6, [r4], #-1089	@ 0xfffffbbf
     54c:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	@ 0xfffffe44
     550:	64657961 	strbtvs	r7, [r5], #-2401	@ 0xfffff69f
     554:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     558:	43726300 	cmnmi	r2, #0, 6
     55c:	554f524f 	strbpl	r5, [pc, #-591]	@ 315 <_start-0xfceb>
     560:	454e4954 	strbmi	r4, [lr, #-2388]	@ 0xfffff6ac
     564:	444f435f 	strbmi	r4, [pc], #-863	@ 56c <_start-0xfa94>
     568:	78700045 	ldmdavc	r0!, {r0, r2, r6}^
     56c:	7478654e 	ldrbtvc	r6, [r8], #-1358	@ 0xfffffab2
     570:	4f787000 	svcmi	0x00787000
     574:	66726576 			@ <UNDEFINED> instruction: 0x66726576
     578:	44776f6c 	ldrbtmi	r6, [r7], #-3948	@ 0xfffff094
     57c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     580:	6f436465 	svcvs	0x00436465
     584:	74756f52 	ldrbtvc	r6, [r5], #-3922	@ 0xfffff0ae
     588:	4c656e69 	stclmi	14, cr6, [r5], #-420	@ 0xfffffe5c
     58c:	00747369 	rsbseq	r7, r4, r9, ror #6
     590:	43726f63 	cmnmi	r2, #396	@ 0x18c
     594:	756f526f 	strbvc	r5, [pc, #-623]!	@ 32d <_start-0xfcd3>
     598:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     59c:	746e6f43 	strbtvc	r6, [lr], #-3907	@ 0xfffff0bd
     5a0:	426c6f72 	rsbmi	r6, ip, #456	@ 0x1c8
     5a4:	6b636f6c 	blvs	18dc35c <__bss_end+0x18b675c>
     5a8:	65447800 	strbvs	r7, [r4, #-2048]	@ 0xfffff800
     5ac:	6579616c 	ldrbvs	r6, [r9, #-364]!	@ 0xfffffe94
     5b0:	526f4364 	rsbpl	r4, pc, #100, 6	@ 0x90000001
     5b4:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     5b8:	694c656e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     5bc:	00317473 	eorseq	r7, r1, r3, ror r4
     5c0:	6c654478 	cfstrdvs	mvd4, [r5], #-480	@ 0xfffffe20
     5c4:	64657961 	strbtvs	r7, [r5], #-2401	@ 0xfffff69f
     5c8:	6f526f43 	svcvs	0x00526f43
     5cc:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     5d0:	73694c65 	cmnvc	r9, #25856	@ 0x6500
     5d4:	75003274 	strvc	r3, [r0, #-628]	@ 0xfffffd8c
     5d8:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	@ 0xfffffe20
     5dc:	4f726562 	svcmi	0x00726562
     5e0:	65744966 	ldrbvs	r4, [r4, #-2406]!	@ 0xfffff69a
     5e4:	7800736d 	stmdavc	r0, {r0, r2, r3, r5, r6, r8, r9, ip, sp, lr}
     5e8:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     5ec:	6d657449 	cfstrdvs	mvd7, [r5, #-292]!	@ 0xfffffedc
     5f0:	76727000 	ldrbtvc	r7, [r2], -r0
     5f4:	74696e49 	strbtvc	r6, [r9], #-3657	@ 0xfffff1b7
     5f8:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     5fc:	6f436573 	svcvs	0x00436573
     600:	74756f52 	ldrbtvc	r6, [r5], #-3922	@ 0xfffff0ae
     604:	4c656e69 	stclmi	14, cr6, [r5], #-420	@ 0xfffffe5c
     608:	73747369 	cmnvc	r4, #-1543503871	@ 0xa4000001
     60c:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     610:	6e457473 	mcrvs	4, 2, r7, cr5, cr3, {3}
     614:	682f0064 	stmdavs	pc!, {r2, r5, r6}	@ <UNPREDICTABLE>
     618:	2f656d6f 	svccs	0x00656d6f
     61c:	2f786879 	svccs	0x00786879
     620:	522f534f 	eorpl	r5, pc, #1006632961	@ 0x3c000001
     624:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     628:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     62c:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     630:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     634:	2f534f54 	svccs	0x00534f54
     638:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     63c:	534f5452 	movtpl	r5, #62546	@ 0xf452
     640:	756f532f 	strbvc	r5, [pc, #-815]!	@ 319 <_start-0xfce7>
     644:	2f656372 	svccs	0x00656372
     648:	756f7263 	strbvc	r7, [pc, #-611]!	@ 3ed <_start-0xfc13>
     64c:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     650:	7800632e 	stmdavc	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
     654:	7473614c 	ldrbtvc	r6, [r3], #-332	@ 0xfffffeb4
     658:	6b636954 	blvs	18dabb0 <__bss_end+0x18b4fb0>
     65c:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     660:	43780074 	cmnmi	r8, #116	@ 0x74
     664:	756f526f 	strbvc	r5, [pc, #-623]!	@ 3fd <_start-0xfc03>
     668:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     66c:	6b636954 	blvs	18dabc4 <__bss_end+0x18b4fc4>
     670:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
     674:	78750074 	ldmdavc	r5!, {r2, r4, r5, r6}^
     678:	43706f54 	cmnmi	r0, #84, 30	@ 0x150
     67c:	756f526f 	strbvc	r5, [pc, #-623]!	@ 415 <_start-0xfbeb>
     680:	656e6974 	strbvs	r6, [lr, #-2420]!	@ 0xfffff68c
     684:	64616552 	strbtvs	r6, [r1], #-1362	@ 0xfffffaae
     688:	69725079 	ldmdbvs	r2!, {r0, r3, r4, r5, r6, ip, lr}^
     68c:	7469726f 	strbtvc	r7, [r9], #-623	@ 0xfffffd91
     690:	78750079 	ldmdavc	r5!, {r0, r3, r4, r5, r6}^
     694:	6f697250 	svcvs	0x00697250
     698:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     69c:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     6a0:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     6a4:	494d7800 	stmdbmi	sp, {fp, ip, sp, lr}^
     6a8:	4c5f494e 	mrrcmi	9, 4, r4, pc, cr14	@ <UNPREDICTABLE>
     6ac:	5f545349 	svcpl	0x00545349
     6b0:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	@ 0xfffffedc
     6b4:	50767000 	rsbspl	r7, r6, r0
     6b8:	4d74726f 	lfmmi	f7, 2, [r4, #-444]!	@ 0xfffffe44
     6bc:	6f6c6c61 	svcvs	0x006c6c61
     6c0:	6f630063 	svcvs	0x00630063
     6c4:	43524372 	cmpmi	r2, #-939524095	@ 0xc8000001
     6c8:	4c760042 	ldclmi	0, cr0, [r6], #-264	@ 0xfffffef8
     6cc:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     6d0:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     6d4:	73696c61 	cmnvc	r9, #24832	@ 0x6100
     6d8:	65744965 	ldrbvs	r4, [r4, #-2405]!	@ 0xfffff69b
     6dc:	6f6c006d 	svcvs	0x006c006d
     6e0:	6c20676e 	stcvs	7, cr6, [r0], #-440	@ 0xfffffe48
     6e4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     6e8:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     6ec:	64656e67 	strbtvs	r6, [r5], #-3687	@ 0xfffff199
     6f0:	746e6920 	strbtvc	r6, [lr], #-2336	@ 0xfffff6e0
     6f4:	736e7500 	cmnvc	lr, #0, 10
     6f8:	656e6769 	strbvs	r6, [lr, #-1897]!	@ 0xfffff897
     6fc:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
     700:	70007261 	andvc	r7, r0, r1, ror #4
     704:	65744978 	ldrbvs	r4, [r4, #-2424]!	@ 0xfffff688
     708:	526f546d 	rsbpl	r5, pc, #1828716544	@ 0x6d000000
     70c:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     710:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	@ <UNPREDICTABLE>
     714:	2f656d6f 	svccs	0x00656d6f
     718:	2f786879 	svccs	0x00786879
     71c:	522f534f 	eorpl	r5, pc, #1006632961	@ 0x3c000001
     720:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     724:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     728:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     72c:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     730:	2f534f54 	svccs	0x00534f54
     734:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     738:	534f5452 	movtpl	r5, #62546	@ 0xf452
     73c:	756f532f 	strbvc	r5, [pc, #-815]!	@ 415 <_start-0xfbeb>
     740:	2f656372 	svccs	0x00656372
     744:	7473696c 	ldrbtvc	r6, [r3], #-2412	@ 0xfffff694
     748:	7800632e 	stmdavc	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
     74c:	756c6156 	strbvc	r6, [ip, #-342]!	@ 0xfffffeaa
     750:	49664f65 	stmdbmi	r6!, {r0, r2, r5, r6, r8, r9, sl, fp, lr}^
     754:	7265736e 	rsbvc	r7, r5, #-1207959551	@ 0xb8000001
     758:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
     75c:	49787000 	ldmdbmi	r8!, {ip, sp, lr}^
     760:	006d6574 	rsbeq	r6, sp, r4, ror r5
     764:	74497870 	strbvc	r7, [r9], #-2160	@ 0xfffff790
     768:	74617265 	strbtvc	r7, [r1], #-613	@ 0xfffffd9b
     76c:	7300726f 	movwvc	r7, #623	@ 0x26f
     770:	74726f68 	ldrbtvc	r6, [r2], #-3944	@ 0xfffff098
     774:	746e6920 	strbtvc	r6, [lr], #-2336	@ 0xfffff6e0
     778:	4c787000 	ldclmi	0, cr7, [r8], #-0
     77c:	00747369 	rsbseq	r7, r4, r9, ror #6
     780:	654e7870 	strbvs	r7, [lr, #-2160]	@ 0xfffff790
     784:	73694c77 	cmnvc	r9, #30464	@ 0x7700
     788:	65744974 	ldrbvs	r4, [r4, #-2420]!	@ 0xfffff68c
     78c:	5178006d 	cmnpl	r8, sp, rrx
     790:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     794:	656e6547 	strbvs	r6, [lr, #-1351]!	@ 0xfffffab9
     798:	53636972 	cmnpl	r3, #1867776	@ 0x1c8000
     79c:	46646e65 	strbtmi	r6, [r4], -r5, ror #28
     7a0:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     7a4:	75005253 	strvc	r5, [r0, #-595]	@ 0xfffffdad
     7a8:	65755163 	ldrbvs	r5, [r5, #-355]!	@ 0xfffffe9d
     7ac:	79546575 	ldmdbvc	r4, {r0, r2, r4, r5, r6, r8, sl, sp, lr}^
     7b0:	78006570 	stmdavc	r0, {r4, r5, r6, r8, sl, sp, lr}
     7b4:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     7b8:	51734965 	cmnpl	r3, r5, ror #18
     7bc:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     7c0:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	@ 0xfffffee8
     7c4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	@ 6b4 <_start-0xf94c>
     7c8:	00525349 	subseq	r5, r2, r9, asr #6
     7cc:	75517875 	ldrbvc	r7, [r1, #-2165]	@ 0xfffff78b
     7d0:	4d657565 	cfstr64mi	mvdx7, [r5, #-404]!	@ 0xfffffe6c
     7d4:	61737365 	cmnvs	r3, r5, ror #6
     7d8:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     7dc:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     7e0:	7000676e 	andvc	r6, r0, lr, ror #14
     7e4:	67694878 			@ <UNDEFINED> instruction: 0x67694878
     7e8:	50726568 	rsbspl	r6, r2, r8, ror #10
     7ec:	726f6972 	rsbvc	r6, pc, #1867776	@ 0x1c8000
     7f0:	54797469 	ldrbtpl	r7, [r9], #-1129	@ 0xfffffb97
     7f4:	576b7361 	strbpl	r7, [fp, -r1, ror #6]!
     7f8:	6e656b6f 	vnmulvs.f64	d22, d5, d31
     7fc:	75517800 	ldrbvc	r7, [r1, #-2048]	@ 0xfffff800
     800:	49657565 	stmdbmi	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
     804:	65755173 	ldrbvs	r5, [r5, #-371]!	@ 0xfffffe8d
     808:	6d456575 	cfstr64vs	mvdx6, [r5, #-468]	@ 0xfffffe2c
     80c:	46797470 			@ <UNDEFINED> instruction: 0x46797470
     810:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     814:	70005253 	andvc	r5, r0, r3, asr r2
     818:	73497672 	movtvc	r7, #38514	@ 0x9672
     81c:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     820:	706d4565 	rsbvc	r4, sp, r5, ror #10
     824:	70007974 	andvc	r7, r0, r4, ror r9
     828:	6f437672 	svcvs	0x00437672
     82c:	61447970 	hvcvs	18320	@ 0x4790
     830:	72466174 	subvc	r6, r6, #116, 2
     834:	75516d6f 	ldrbvc	r6, [r1, #-3439]	@ 0xfffff291
     838:	00657565 	rsbeq	r7, r5, r5, ror #10
     83c:	654e7870 	strbvs	r7, [lr, #-2160]	@ 0xfffff790
     840:	65755177 	ldrbvs	r5, [r5, #-375]!	@ 0xfffffe89
     844:	70006575 	andvc	r6, r0, r5, ror r5
     848:	6f437672 	svcvs	0x00437672
     84c:	61447970 	hvcvs	18320	@ 0x4790
     850:	6f546174 	svcvs	0x00546174
     854:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     858:	54780065 	ldrbtpl	r0, [r8], #-101	@ 0xffffff9b
     85c:	5f454d49 	svcpl	0x00454d49
     860:	0054554f 	subseq	r5, r4, pc, asr #10
     864:	65755178 	ldrbvs	r5, [r5, #-376]!	@ 0xfffffe88
     868:	65476575 	strbvs	r6, [r7, #-1397]	@ 0xfffffa8b
     86c:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     870:	63655263 	cmnvs	r5, #805306374	@ 0x30000006
     874:	65766965 	ldrbvs	r6, [r6, #-2405]!	@ 0xfffff69b
     878:	6f437800 	svcvs	0x00437800
     87c:	6f507970 	svcvs	0x00507970
     880:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     884:	70006e6f 	andvc	r6, r0, pc, ror #28
     888:	69724f63 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, r9, sl, fp, lr}^
     88c:	616e6967 	cmnvs	lr, r7, ror #18
     890:	6165526c 	cmnvs	r5, ip, ror #4
     894:	736f5064 	cmnvc	pc, #100	@ 0x64
     898:	6f697469 	svcvs	0x00697469
     89c:	656d006e 	strbvs	r0, [sp, #-110]!	@ 0xffffff92
     8a0:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
     8a4:	52637000 	rsbpl	r7, r3, #0
     8a8:	46646165 	strbtmi	r6, [r4], -r5, ror #2
     8ac:	006d6f72 	rsbeq	r6, sp, r2, ror pc
     8b0:	65764f78 	ldrbvs	r4, [r6, #-3960]!	@ 0xfffff088
     8b4:	6f6c6672 	svcvs	0x006c6672
     8b8:	756f4377 	strbvc	r4, [pc, #-887]!	@ 549 <_start-0xfab7>
     8bc:	7600746e 	strvc	r7, [r0], -lr, ror #8
     8c0:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     8c4:	6c654465 	cfstrdvs	mvd4, [r5], #-404	@ 0xfffffe6c
     8c8:	00657465 	rsbeq	r7, r5, r5, ror #8
     8cc:	73615476 	cmnvc	r1, #1979711488	@ 0x76000000
     8d0:	616c506b 	cmnvs	ip, fp, rrx
     8d4:	6e4f6563 	cdpvs	5, 4, cr6, cr15, cr3, {3}
     8d8:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     8dc:	73694c74 	cmnvc	r9, #116, 24	@ 0x7400
     8e0:	63700074 	cmnvs	r0, #116	@ 0x74
     8e4:	64616548 	strbtvs	r6, [r1], #-1352	@ 0xfffffab8
     8e8:	69547800 	ldmdbvs	r4, {fp, ip, sp, lr}^
     8ec:	6e4f656d 	cdpvs	5, 4, cr6, cr15, cr13, {3}
     8f0:	65746e45 	ldrbvs	r6, [r4, #-3653]!	@ 0xfffff1bb
     8f4:	676e6972 			@ <UNDEFINED> instruction: 0x676e6972
     8f8:	754a7800 	strbvc	r7, [sl, #-2048]	@ 0xfffff800
     8fc:	65507473 	ldrbvs	r7, [r0, #-1139]	@ 0xfffffb8d
     900:	6e696b65 	vnmulvs.f64	d22, d9, d21
     904:	682f0067 	stmdavs	pc!, {r0, r1, r2, r5, r6}	@ <UNPREDICTABLE>
     908:	2f656d6f 	svccs	0x00656d6f
     90c:	2f786879 	svccs	0x00786879
     910:	522f534f 	eorpl	r5, pc, #1006632961	@ 0x3c000001
     914:	62707361 	rsbsvs	r7, r0, #-2080374783	@ 0x84000001
     918:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     91c:	462d6950 			@ <UNDEFINED> instruction: 0x462d6950
     920:	52656572 	rsbpl	r6, r5, #478150656	@ 0x1c800000
     924:	2f534f54 	svccs	0x00534f54
     928:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     92c:	534f5452 	movtpl	r5, #62546	@ 0xf452
     930:	756f532f 	strbvc	r5, [pc, #-815]!	@ 609 <_start-0xf9f7>
     934:	2f656372 	svccs	0x00656372
     938:	75657571 	strbvc	r7, [r5, #-1393]!	@ 0xfffffa8f
     93c:	00632e65 	rsbeq	r2, r3, r5, ror #28
     940:	65755178 	ldrbvs	r5, [r5, #-376]!	@ 0xfffffe88
     944:	65476575 	strbvs	r6, [r7, #-1397]	@ 0xfffffa8b
     948:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     94c:	6e655363 	cdpvs	3, 6, cr5, cr5, cr3, {3}
     950:	54780064 	ldrbtpl	r0, [r8], #-100	@ 0xffffff9c
     954:	4f656d69 	svcmi	0x00656d69
     958:	79547475 	ldmdbvc	r4, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
     95c:	75006570 	strvc	r6, [r0, #-1392]	@ 0xfffffa90
     960:	74655278 	strbtvc	r5, [r5], #-632	@ 0xfffffd88
     964:	006e7275 	rsbeq	r7, lr, r5, ror r2
     968:	65755178 	ldrbvs	r5, [r5, #-376]!	@ 0xfffffe88
     96c:	61486575 	hvcvs	34389	@ 0x8655
     970:	656c646e 	strbvs	r6, [ip, #-1134]!	@ 0xfffffb92
     974:	6f507600 	svcvs	0x00507600
     978:	72467472 	subvc	r7, r6, #1912602624	@ 0x72000000
     97c:	78006565 	stmdavc	r0, {r0, r2, r5, r6, r8, sl, sp, lr}
     980:	75657551 	strbvc	r7, [r5, #-1361]!	@ 0xfffffaaf
     984:	63655265 	cmnvs	r5, #1342177286	@ 0x50000006
     988:	65766965 	ldrbvs	r6, [r6, #-2405]!	@ 0xfffff69b
     98c:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	@ 87c <_start-0xf784>
     990:	00525349 	subseq	r5, r2, r9, asr #6
     994:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     998:	65755173 	ldrbvs	r5, [r5, #-371]!	@ 0xfffffe8d
     99c:	75466575 	strbvc	r6, [r6, #-1397]	@ 0xfffffa8b
     9a0:	75006c6c 	strvc	r6, [r0, #-3180]	@ 0xfffff394
     9a4:	6e654c78 	mcrvs	12, 3, r4, cr5, cr8, {3}
     9a8:	00687467 	rsbeq	r7, r8, r7, ror #8
     9ac:	75517875 	ldrbvc	r7, [r1, #-2165]	@ 0xfffff78b
     9b0:	4c657565 	cfstr64mi	mvdx7, [r5], #-404	@ 0xfffffe6c
     9b4:	74676e65 	strbtvc	r6, [r7], #-3685	@ 0xfffff19b
     9b8:	54780068 	ldrbtpl	r0, [r8], #-104	@ 0xffffff98
     9bc:	736b7361 	cmnvc	fp, #-2080374783	@ 0x84000001
     9c0:	74696157 	strbtvc	r6, [r9], #-343	@ 0xfffffea9
     9c4:	54676e69 	strbtpl	r6, [r7], #-3689	@ 0xfffff197
     9c8:	6365526f 	cmnvs	r5, #-268435450	@ 0xf0000006
     9cc:	65766965 	ldrbvs	r6, [r6, #-2405]!	@ 0xfffff69b
     9d0:	51787500 	cmnpl	r8, r0, lsl #10
     9d4:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     9d8:	7373654d 	cmnvc	r3, #322961408	@ 0x13400000
     9dc:	73656761 	cmnvc	r5, #25427968	@ 0x1840000
     9e0:	74696157 	strbtvc	r6, [r9], #-343	@ 0xfffffea9
     9e4:	46676e69 	strbtmi	r6, [r7], -r9, ror #28
     9e8:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     9ec:	70005253 	andvc	r5, r0, r3, asr r2
     9f0:	65744976 	ldrbvs	r4, [r4, #-2422]!	@ 0xfffff68a
     9f4:	516f546d 	cmnpl	pc, sp, ror #8
     9f8:	65756575 	ldrbvs	r6, [r5, #-1397]!	@ 0xfffffa8b
     9fc:	55517800 	ldrbpl	r7, [r1, #-2048]	@ 0xfffff800
     a00:	00455545 	subeq	r5, r5, r5, asr #10
     a04:	746e4578 	strbtvc	r4, [lr], #-1400	@ 0xfffffa88
     a08:	69547972 	ldmdbvs	r4, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     a0c:	6553656d 	ldrbvs	r6, [r3, #-1389]	@ 0xfffffa93
     a10:	75510074 	ldrbvc	r0, [r1, #-116]	@ 0xffffff8c
     a14:	44657565 	strbtmi	r7, [r5], #-1381	@ 0xfffffa9b
     a18:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
     a1c:	6f697469 	svcvs	0x00697469
     a20:	5478006e 	ldrbtpl	r0, [r8], #-110	@ 0xffffff92
     a24:	526b7361 	rsbpl	r7, fp, #-2080374783	@ 0x84000001
     a28:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	@ 0xfffffe6c
     a2c:	6c6c4165 	stfvse	f4, [ip], #-404	@ 0xfffffe6c
     a30:	78547800 	ldmdavc	r4, {fp, ip, sp, lr}^
     a34:	6b636f4c 	blvs	18dc76c <__bss_end+0x18b6b6c>
     a38:	75517800 	ldrbvc	r7, [r1, #-2048]	@ 0xfffff800
     a3c:	47657565 	strbmi	r7, [r5, -r5, ror #10]!
     a40:	72656e65 	rsbvc	r6, r5, #1616	@ 0x650
     a44:	72436369 	subvc	r6, r3, #-1543503871	@ 0xa4000001
     a48:	65746165 	ldrbvs	r6, [r4, #-357]!	@ 0xfffffe9b
     a4c:	61547600 	cmpvs	r4, r0, lsl #12
     a50:	694d6b73 	stmdbvs	sp, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     a54:	64657373 	strbtvs	r7, [r5], #-883	@ 0xfffffc8d
     a58:	6c656959 			@ <UNDEFINED> instruction: 0x6c656959
     a5c:	78750064 	ldmdavc	r5!, {r2, r5, r6}^
     a60:	65766153 	ldrbvs	r6, [r6, #-339]!	@ 0xfffffead
     a64:	746e4964 	strbtvc	r4, [lr], #-2404	@ 0xfffff69c
     a68:	75727265 	ldrbvc	r7, [r2, #-613]!	@ 0xfffffd9b
     a6c:	74537470 	ldrbvc	r7, [r3], #-1136	@ 0xfffffb90
     a70:	73757461 	cmnvc	r5, #1627389952	@ 0x61000000
     a74:	4d787500 	cfldr64mi	mvdx7, [r8, #-0]
     a78:	61737365 	cmnvs	r3, r5, ror #6
     a7c:	57736567 	ldrbpl	r6, [r3, -r7, ror #10]!
     a80:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     a84:	7000676e 	andvc	r6, r0, lr, ror #14
     a88:	66754276 			@ <UNDEFINED> instruction: 0x66754276
     a8c:	00726566 	rsbseq	r6, r2, r6, ror #10
     a90:	65755178 	ldrbvs	r5, [r5, #-376]!	@ 0xfffffe88
     a94:	65476575 	strbvs	r6, [r7, #-1397]	@ 0xfffffa8b
     a98:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     a9c:	73655263 	cmnvc	r5, #805306374	@ 0x30000006
     aa0:	78007465 	stmdavc	r0, {r0, r2, r5, r6, sl, ip, sp, lr}
     aa4:	6b736154 	blvs	1cd8ffc <__bss_end+0x1cb33fc>
     aa8:	6f6d6552 	svcvs	0x006d6552
     aac:	72466576 	subvc	r6, r6, #494927872	@ 0x1d800000
     ab0:	76456d6f 	strbvc	r6, [r5], -pc, ror #26
     ab4:	4c746e65 	ldclmi	14, cr6, [r4], #-404	@ 0xfffffe6c
     ab8:	00747369 	rsbseq	r7, r4, r9, ror #6
     abc:	55767270 	ldrbpl	r7, [r6, #-624]!	@ 0xfffffd90
     ac0:	636f6c6e 	cmnvs	pc, #28160	@ 0x6e00
     ac4:	6575516b 	ldrbvs	r5, [r5, #-363]!	@ 0xfffffe95
     ac8:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     acc:	6f4c7852 	svcvs	0x004c7852
     ad0:	70006b63 	andvc	r6, r0, r3, ror #22
     ad4:	69615463 	stmdbvs	r1!, {r0, r1, r5, r6, sl, ip, lr}^
     ad8:	5478006c 	ldrbtpl	r0, [r8], #-108	@ 0xffffff94
     adc:	436b7361 	cmnmi	fp, #-2080374783	@ 0x84000001
     ae0:	6b636568 	blvs	18da088 <__bss_end+0x18b4488>
     ae4:	54726f46 	ldrbtpl	r6, [r2], #-3910	@ 0xfffff0ba
     ae8:	4f656d69 	svcmi	0x00656d69
     aec:	78007475 	stmdavc	r0, {r0, r2, r4, r5, r6, sl, ip, sp, lr}
     af0:	69736f50 	ldmdbvs	r3!, {r4, r6, r8, r9, sl, fp, sp, lr}^
     af4:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
     af8:	61547600 	cmpvs	r4, r0, lsl #12
     afc:	75536b73 	ldrbvc	r6, [r3, #-2931]	@ 0xfffff48d
     b00:	6e657073 	mcrvs	0, 3, r7, cr5, cr3, {3}
     b04:	6c6c4164 	stfvse	f4, [ip], #-400	@ 0xfffffe70
     b08:	61547800 	cmpvs	r4, r0, lsl #16
     b0c:	57736b73 			@ <UNDEFINED> instruction: 0x57736b73
     b10:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
     b14:	6f54676e 	svcvs	0x0054676e
     b18:	646e6553 	strbtvs	r6, [lr], #-1363	@ 0xfffffaad
     b1c:	75517800 	ldrbvc	r7, [r1, #-2048]	@ 0xfffff800
     b20:	53657565 	cmnpl	r5, #423624704	@ 0x19400000
     b24:	49657a69 	stmdbmi	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
     b28:	7479426e 	ldrbtvc	r4, [r9], #-622	@ 0xfffffd92
     b2c:	70007365 	andvc	r7, r0, r5, ror #6
     b30:	65755178 	ldrbvs	r5, [r5, #-376]!	@ 0xfffffe88
     b34:	70006575 	andvc	r6, r0, r5, ror r5
     b38:	69725763 	ldmdbvs	r2!, {r0, r1, r5, r6, r8, r9, sl, ip, lr}^
     b3c:	6f546574 	svcvs	0x00546574
     b40:	49787500 	ldmdbmi	r8!, {r8, sl, ip, sp, lr}^
     b44:	536d6574 	cmnpl	sp, #116, 10	@ 0x1d000000
     b48:	00657a69 	rsbeq	r7, r5, r9, ror #20
     b4c:	73615476 	cmnvc	r1, #1979711488	@ 0x76000000
     b50:	7465536b 	strbtvc	r5, [r5], #-875	@ 0xfffffc95
     b54:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
     b58:	5374754f 	cmnpl	r4, #331350016	@ 0x13c00000
     b5c:	65746174 	ldrbvs	r6, [r4, #-372]!	@ 0xfffffe8c
     b60:	76727000 	ldrbtvc	r7, [r2], -r0
     b64:	74696e49 	strbtvc	r6, [r9], #-3657	@ 0xfffff1b7
     b68:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     b6c:	43546573 	cmpmi	r4, #482344960	@ 0x1cc00000
     b70:	72615642 	rsbvc	r5, r1, #69206016	@ 0x4200000
     b74:	6c626169 	stfvse	f6, [r2], #-420	@ 0xfffffe5c
     b78:	76007365 	strvc	r7, [r0], -r5, ror #6
     b7c:	6b736154 	blvs	1cd90d4 <__bss_end+0x1cb34d4>
     b80:	70737553 	rsbsvc	r7, r3, r3, asr r5
     b84:	00646e65 	rsbeq	r6, r4, r5, ror #28
     b88:	75437875 	strbvc	r7, [r3, #-2165]	@ 0xfffff78b
     b8c:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     b90:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	@ 0xfffffe30
     b94:	4f726562 	svcmi	0x00726562
     b98:	73615466 	cmnvc	r1, #1711276032	@ 0x66000000
     b9c:	2f00736b 	svccs	0x0000736b
     ba0:	656d6f68 	strbvs	r6, [sp, #-3944]!	@ 0xfffff098
     ba4:	7868792f 	stmdavc	r8!, {r0, r1, r2, r3, r5, r8, fp, ip, sp, lr}^
     ba8:	2f534f2f 	svccs	0x00534f2f
     bac:	70736152 	rsbsvc	r6, r3, r2, asr r1
     bb0:	72726562 	rsbsvc	r6, r2, #411041792	@ 0x18800000
     bb4:	2d695079 	stclcs	0, cr5, [r9, #-484]!	@ 0xfffffe1c
     bb8:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
     bbc:	534f5452 	movtpl	r5, #62546	@ 0xf452
     bc0:	6572462f 	ldrbvs	r4, [r2, #-1583]!	@ 0xfffff9d1
     bc4:	4f545265 	svcmi	0x00545265
     bc8:	6f532f53 	svcvs	0x00532f53
     bcc:	65637275 	strbvs	r7, [r3, #-629]!	@ 0xfffffd8b
     bd0:	7361742f 	cmnvc	r1, #788529152	@ 0x2f000000
     bd4:	632e736b 			@ <UNDEFINED> instruction: 0x632e736b
     bd8:	54787500 	ldrbtpl	r7, [r8], #-1280	@ 0xfffffb00
     bdc:	736b7361 	cmnvc	fp, #-2080374783	@ 0x84000001
     be0:	656c6544 	strbvs	r6, [ip, #-1348]!	@ 0xfffffabc
     be4:	00646574 	rsbeq	r6, r4, r4, ror r5
     be8:	6f487870 	svcvs	0x00487870
     bec:	75466b6f 	strbvc	r6, [r6, #-2927]	@ 0xfffff491
     bf0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     bf4:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     bf8:	70737553 	rsbsvc	r7, r3, r3, asr r5
     bfc:	65646e65 	strbvs	r6, [r4, #-3685]!	@ 0xfffff19b
     c00:	73615464 	cmnvc	r1, #100, 8	@ 0x64000000
     c04:	73694c6b 	cmnvc	r9, #27392	@ 0x6b00
     c08:	74730074 	ldrbtvc	r0, [r3], #-116	@ 0xffffff8c
     c0c:	70636e72 	rsbvc	r6, r3, r2, ror lr
     c10:	78700079 	ldmdavc	r0!, {r0, r3, r4, r5, r6}^
     c14:	6b736154 	blvs	1cd916c <__bss_end+0x1cb356c>
     c18:	00676154 	rsbeq	r6, r7, r4, asr r1
     c1c:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
     c20:	6e65476b 	cdpvs	7, 6, cr4, cr5, cr11, {3}
     c24:	63697265 	cmnvs	r9, #1342177286	@ 0x50000006
     c28:	61657243 	cmnvs	r5, r3, asr #4
     c2c:	78006574 	stmdavc	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
     c30:	65726c41 	ldrbvs	r6, [r2, #-3137]!	@ 0xfffff3bf
     c34:	59796461 	ldmdbpl	r9!, {r0, r5, r6, sl, sp, lr}^
     c38:	646c6569 	strbtvs	r6, [ip], #-1385	@ 0xfffffa97
     c3c:	70006465 	andvc	r6, r0, r5, ror #8
     c40:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	@ 0xfffffe20
     c44:	74754f65 	ldrbtvc	r4, [r5], #-3941	@ 0xfffff09b
     c48:	61547600 	cmpvs	r4, r0, lsl #12
     c4c:	72506b73 	subsvc	r6, r0, #117760	@ 0x1cc00
     c50:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     c54:	65537974 	ldrbvs	r7, [r3, #-2420]	@ 0xfffff68c
     c58:	4c780074 	ldclmi	0, cr0, [r8], #-464	@ 0xfffffe30
     c5c:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     c60:	706d4573 	rsbvc	r4, sp, r3, ror r5
     c64:	70007974 	andvc	r7, r0, r4, ror r9
     c68:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
     c6c:	526f546b 	rsbpl	r5, pc, #1795162112	@ 0x6b000000
     c70:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	@ 0xfffffe6c
     c74:	54760065 	ldrbtpl	r0, [r6], #-101	@ 0xffffff9b
     c78:	446b7361 	strbtmi	r7, [fp], #-865	@ 0xfffffc9f
     c7c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     c80:	61547800 	cmpvs	r4, r0, lsl #16
     c84:	61486b73 	hvcvs	34483	@ 0x86b3
     c88:	656c646e 	strbvs	r6, [ip, #-1134]!	@ 0xfffffb92
     c8c:	61547800 	cmpvs	r4, r0, lsl #16
     c90:	61436b73 	hvcvs	14003	@ 0x36b3
     c94:	70416c6c 	subvc	r6, r1, ip, ror #24
     c98:	63696c70 	cmnvs	r9, #112, 24	@ 0x7000
     c9c:	6f697461 	svcvs	0x00697461
     ca0:	7361546e 	cmnvc	r1, #1845493760	@ 0x6e000000
     ca4:	6f6f486b 	svcvs	0x006f486b
     ca8:	7374006b 	cmnvc	r4, #107	@ 0x6b
     cac:	7361546b 	cmnvc	r1, #1795162112	@ 0x6b000000
     cb0:	6e6f436b 	cdpvs	3, 6, cr4, cr15, cr11, {3}
     cb4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	@ aec <_start-0xf514>
     cb8:	636f6c42 	cmnvs	pc, #16896	@ 0x4200
     cbc:	7870006b 	ldmdavc	r0!, {r0, r1, r3, r5, r6}^
     cc0:	5477654e 	ldrbtpl	r6, [r7], #-1358	@ 0xfffffab2
     cc4:	78004243 	stmdavc	r0, {r0, r1, r6, r9, lr}
     cc8:	6b736154 	blvs	1cd9220 <__bss_end+0x1cb3620>
     ccc:	54746547 	ldrbtpl	r6, [r4], #-1351	@ 0xfffffab9
     cd0:	436b6369 	cmnmi	fp, #-1543503871	@ 0xa4000001
     cd4:	746e756f 	strbtvc	r7, [lr], #-1391	@ 0xfffffa91
     cd8:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	@ bc8 <_start-0xf438>
     cdc:	00525349 	subseq	r5, r2, r9, asr #6
     ce0:	41767270 	cmnmi	r6, r0, ror r2
     ce4:	636f6c6c 	cmnvs	pc, #108, 24	@ 0x6c00
     ce8:	54657461 	strbtpl	r7, [r5], #-1121	@ 0xfffffb9f
     cec:	6e414243 	cdpvs	2, 4, cr4, cr1, cr3, {2}
     cf0:	61745364 	cmnvs	r4, r4, ror #6
     cf4:	75006b63 	strvc	r6, [r0, #-2915]	@ 0xfffff49d
     cf8:	61745373 	cmnvs	r4, r3, ror r3
     cfc:	65446b63 	strbvs	r6, [r4, #-2915]	@ 0xfffff49d
     d00:	00687470 	rsbeq	r7, r8, r0, ror r4
     d04:	53787570 	cmnpl	r8, #112, 10	@ 0x1c000000
     d08:	6b636174 	blvs	18d92e0 <__bss_end+0x18b36e0>
     d0c:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     d10:	76007265 	strvc	r7, [r0], -r5, ror #4
     d14:	6b736154 	blvs	1cd926c <__bss_end+0x1cb366c>
     d18:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
     d1c:	68635374 	stmdavs	r3!, {r2, r4, r5, r6, r8, r9, ip, lr}^
     d20:	6c756465 	cfldrdvs	mvd6, [r5], #-404	@ 0xfffffe6c
     d24:	70007265 	andvc	r7, r0, r5, ror #4
     d28:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
     d2c:	7670006b 	ldrbtvc	r0, [r0], -fp, rrx
     d30:	61726150 	cmnvs	r2, r0, asr r1
     d34:	6574656d 	ldrbvs	r6, [r4, #-1389]!	@ 0xfffffa93
     d38:	78750072 	ldmdavc	r5!, {r1, r4, r5, r6}^
     d3c:	65686353 	strbvs	r6, [r8, #-851]!	@ 0xfffffcad
     d40:	656c7564 	strbvs	r7, [ip, #-1380]!	@ 0xfffffa9c
     d44:	73755372 	cmnvc	r5, #-939524095	@ 0xc8000001
     d48:	646e6570 	strbtvs	r6, [lr], #-1392	@ 0xfffffa90
     d4c:	70006465 	andvc	r6, r0, r5, ror #8
     d50:	65724378 	ldrbvs	r4, [r2, #-888]!	@ 0xfffffc88
     d54:	64657461 	strbtvs	r7, [r5], #-1121	@ 0xfffffb9f
     d58:	6b736154 	blvs	1cd92b0 <__bss_end+0x1cb36b0>
     d5c:	61547800 	cmpvs	r4, r0, lsl #16
     d60:	73496b73 	movtvc	r6, #39795	@ 0x9b73
     d64:	6b736154 	blvs	1cd92bc <__bss_end+0x1cb36bc>
     d68:	70737553 	rsbsvc	r7, r3, r3, asr r5
     d6c:	65646e65 	strbvs	r6, [r4, #-3685]!	@ 0xfffff19b
     d70:	73740064 	cmnvc	r4, #100	@ 0x64
     d74:	4243546b 	submi	r5, r3, #1795162112	@ 0x6b000000
     d78:	54647000 	strbtpl	r7, [r4], #-0
     d7c:	5f4b5341 	svcpl	0x004b5341
     d80:	4b4f4f48 	blmi	13d4aa8 <__bss_end+0x13aeea8>
     d84:	444f435f 	strbmi	r4, [pc], #-863	@ d8c <_start-0xf274>
     d88:	78700045 	ldmdavc	r0!, {r0, r2, r6}^
     d8c:	00424354 	subeq	r4, r2, r4, asr r3
     d90:	65695978 	strbvs	r5, [r9, #-2424]!	@ 0xfffff688
     d94:	6552646c 	ldrbvs	r6, [r2, #-1132]	@ 0xfffffb94
     d98:	72697571 	rsbvc	r7, r9, #473956352	@ 0x1c400000
     d9c:	76006465 	strvc	r6, [r0], -r5, ror #8
     da0:	6b736154 	blvs	1cd92f8 <__bss_end+0x1cb36f8>
     da4:	75736552 	ldrbvc	r6, [r3, #-1362]!	@ 0xfffffaae
     da8:	7600656d 	strvc	r6, [r0], -sp, ror #10
     dac:	6b736154 	blvs	1cd9304 <__bss_end+0x1cb3704>
     db0:	41746553 	cmnmi	r4, r3, asr r5
     db4:	696c7070 	stmdbvs	ip!, {r4, r5, r6, ip, sp, lr}^
     db8:	69746163 	ldmdbvs	r4!, {r0, r1, r5, r6, r8, sp, lr}^
     dbc:	61546e6f 	cmpvs	r4, pc, ror #28
     dc0:	61546b73 	cmpvs	r4, r3, ror fp
     dc4:	4d780067 	ldclmi	0, cr0, [r8, #-412]!	@ 0xfffffe64
     dc8:	524f4d45 	subpl	r4, pc, #4416	@ 0x1140
     dcc:	45525f59 	ldrbmi	r5, [r2, #-3929]	@ 0xfffff0a7
     dd0:	4e4f4947 	vmlsmi.f16	s9, s30, s14	@ <UNPREDICTABLE>
     dd4:	76727000 	ldrbtvc	r7, [r2], -r0
     dd8:	656c6544 	strbvs	r6, [ip, #-1348]!	@ 0xfffffabc
     ddc:	43546574 	cmpmi	r4, #116, 10	@ 0x1d000000
     de0:	4d780042 	ldclmi	0, cr0, [r8, #-264]!	@ 0xfffffef8
     de4:	65737369 	ldrbvs	r7, [r3, #-873]!	@ 0xfffffc97
     de8:	65695964 	strbvs	r5, [r9, #-2404]!	@ 0xfffff69c
     dec:	7000646c 	andvc	r6, r0, ip, ror #8
     df0:	64497672 	strbvs	r7, [r9], #-1650	@ 0xfffff98e
     df4:	6154656c 	cmpvs	r4, ip, ror #10
     df8:	70006b73 	andvc	r6, r0, r3, ror fp
     dfc:	6c654478 	cfstrdvs	mvd4, [r5], #-480	@ 0xfffffe20
     e00:	64657961 	strbtvs	r7, [r5], #-2401	@ 0xfffff69f
     e04:	6b736154 	blvs	1cd935c <__bss_end+0x1cb375c>
     e08:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     e0c:	53787000 	cmnpl	r8, #0
     e10:	6b636174 	blvs	18d93e8 <__bss_end+0x18b37e8>
     e14:	54787500 	ldrbtpl	r7, [r8], #-1280	@ 0xfffffb00
     e18:	7355706f 	cmpvc	r5, #111	@ 0x6f
     e1c:	72506465 	subsvc	r6, r0, #1694498816	@ 0x65000000
     e20:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     e24:	70007974 	andvc	r7, r0, r4, ror r9
     e28:	65764f78 	ldrbvs	r4, [r6, #-3960]!	@ 0xfffff088
     e2c:	6f6c6672 	svcvs	0x006c6672
     e30:	6c654477 	cfstrdvs	mvd4, [r5], #-476	@ 0xfffffe24
     e34:	64657961 	strbtvs	r7, [r5], #-2401	@ 0xfffff69f
     e38:	6b736154 	blvs	1cd9390 <__bss_end+0x1cb3790>
     e3c:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     e40:	506c7500 	rsbpl	r7, ip, r0, lsl #10
     e44:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	@ 0xfffffe7c
     e48:	72657465 	rsbvc	r7, r5, #1694498816	@ 0x65000000
     e4c:	78700073 	ldmdavc	r0!, {r0, r1, r4, r5, r6}^
     e50:	6b736154 	blvs	1cd93a8 <__bss_end+0x1cb37a8>
     e54:	65446f54 	strbvs	r6, [r4, #-3924]	@ 0xfffff0ac
     e58:	6574656c 	ldrbvs	r6, [r4, #-1388]!	@ 0xfffffa94
     e5c:	65527800 	ldrbvs	r7, [r2, #-2048]	@ 0xfffff800
     e60:	6e6f6967 	vnmulvs.f16	s13, s30, s15	@ <UNPREDICTABLE>
     e64:	50780073 	rsbspl	r0, r8, r3, ror r0
     e68:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     e6c:	6552676e 	ldrbvs	r6, [r2, #-1902]	@ 0xfffff892
     e70:	4c796461 	cfldrdmi	mvd6, [r9], #-388	@ 0xfffffe7c
     e74:	00747369 	rsbseq	r7, r4, r9, ror #6
     e78:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
     e7c:	6157736b 	cmpvs	r7, fp, ror #6
     e80:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     e84:	72655467 	rsbvc	r5, r5, #1728053248	@ 0x67000000
     e88:	616e696d 	cmnvs	lr, sp, ror #18
     e8c:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
     e90:	54787000 	ldrbtpl	r7, [r8], #-0
     e94:	436b7361 	cmnmi	fp, #-2080374783	@ 0x84000001
     e98:	0065646f 	rsbeq	r6, r5, pc, ror #8
     e9c:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     ea0:	73615474 	cmnvc	r1, #116, 8	@ 0x74000000
     ea4:	626e556b 	rsbvs	r5, lr, #448790528	@ 0x1ac00000
     ea8:	6b636f6c 	blvs	18dcc60 <__bss_end+0x18b7060>
     eac:	656d6954 	strbvs	r6, [sp, #-2388]!	@ 0xfffff6ac
     eb0:	54787500 	ldrbtpl	r7, [r8], #-1280	@ 0xfffffb00
     eb4:	6552706f 	ldrbvs	r7, [r2, #-111]	@ 0xffffff91
     eb8:	50796461 	rsbspl	r6, r9, r1, ror #8
     ebc:	726f6972 	rsbvc	r6, pc, #1867776	@ 0x1c8000
     ec0:	00797469 	rsbseq	r7, r9, r9, ror #8
     ec4:	72507870 	subsvc	r7, r0, #112, 16	@ 0x700000
     ec8:	6f697665 	svcvs	0x00697665
     ecc:	61577375 	cmpvs	r7, r5, ror r3
     ed0:	6954656b 	ldmdbvs	r4, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
     ed4:	7500656d 	strvc	r6, [r0, #-1389]	@ 0xfffffa93
     ed8:	6e654c6c 	cdpvs	12, 6, cr4, cr5, cr12, {3}
     edc:	49687467 	stmdbmi	r8!, {r0, r1, r2, r5, r6, sl, ip, sp, lr}^
     ee0:	7479426e 	ldrbtvc	r4, [r9], #-622	@ 0xfffffd92
     ee4:	75007365 	strvc	r7, [r0, #-869]	@ 0xfffffc9b
     ee8:	77654e78 			@ <UNDEFINED> instruction: 0x77654e78
     eec:	6f697250 	svcvs	0x00697250
     ef0:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     ef4:	55787000 	ldrbpl	r7, [r8, #-0]!
     ef8:	6f6c626e 	svcvs	0x006c626e
     efc:	64656b63 	strbtvs	r6, [r5], #-2915	@ 0xfffff49d
     f00:	00424354 	subeq	r4, r2, r4, asr r3
     f04:	73615476 	cmnvc	r1, #1979711488	@ 0x76000000
     f08:	6c65446b 	cfstrdvs	mvd4, [r5], #-428	@ 0xfffffe54
     f0c:	6e557961 	vnmlavs.f16	s15, s10, s3	@ <UNPREDICTABLE>
     f10:	006c6974 	rsbeq	r6, ip, r4, ror r9
     f14:	68635378 	stmdavs	r3!, {r3, r4, r5, r6, r8, r9, ip, lr}^
     f18:	6c756465 	cfldrdvs	mvd6, [r5], #-404	@ 0xfffffe6c
     f1c:	75527265 	ldrbvc	r7, [r2, #-613]	@ 0xfffffd9b
     f20:	6e696e6e 	cdpvs	14, 6, cr6, cr9, cr14, {3}
     f24:	54760067 	ldrbtpl	r0, [r6], #-103	@ 0xffffff99
     f28:	456b7361 	strbmi	r7, [fp, #-865]!	@ 0xfffffc9f
     f2c:	6353646e 	cmpvs	r3, #1845493760	@ 0x6e000000
     f30:	75646568 	strbvc	r6, [r4, #-1384]!	@ 0xfffffa98
     f34:	0072656c 	rsbseq	r6, r2, ip, ror #10
     f38:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
     f3c:	7365526b 	cmnvc	r5, #-1342177274	@ 0xb0000006
     f40:	46656d75 			@ <UNDEFINED> instruction: 0x46656d75
     f44:	496d6f72 	stmdbmi	sp!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
     f48:	78005253 	stmdavc	r0, {r0, r1, r4, r6, r9, ip, lr}
     f4c:	756f6853 	strbvc	r6, [pc, #-2131]!	@ 701 <_start-0xf8ff>
     f50:	6544646c 	strbvs	r6, [r4, #-1132]	@ 0xfffffb94
     f54:	0079616c 	rsbseq	r6, r9, ip, ror #2
     f58:	43767270 	cmnmi	r6, #112, 4
     f5c:	6b636568 	blvs	18da504 <__bss_end+0x18b4904>
     f60:	6b736154 	blvs	1cd94b8 <__bss_end+0x1cb38b8>
     f64:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     f68:	676e6974 			@ <UNDEFINED> instruction: 0x676e6974
     f6c:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	@ 0xfffffeb0
     f70:	74616e69 	strbtvc	r6, [r1], #-3689	@ 0xfffff197
     f74:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     f78:	6d654d78 	stclvs	13, cr4, [r5, #-480]!	@ 0xfffffe20
     f7c:	5279726f 	rsbspl	r7, r9, #-268435450	@ 0xf0000006
     f80:	6f696765 	svcvs	0x00696765
     f84:	7270006e 	rsbsvc	r0, r0, #110	@ 0x6e
     f88:	64644176 	strbtvs	r4, [r4], #-374	@ 0xfffffe8a
     f8c:	72727543 	rsbsvc	r7, r2, #281018368	@ 0x10c00000
     f90:	54746e65 	ldrbtpl	r6, [r4], #-3685	@ 0xfffff19b
     f94:	546b7361 	strbtpl	r7, [fp], #-865	@ 0xfffffc9f
     f98:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	@ 0xfffffe44
     f9c:	64657961 	strbtvs	r7, [r5], #-2401	@ 0xfffff69f
     fa0:	7473694c 	ldrbtvc	r6, [r3], #-2380	@ 0xfffff6b4
     fa4:	61547600 	cmpvs	r4, r0, lsl #12
     fa8:	65446b73 	strbvs	r6, [r4, #-2931]	@ 0xfffff48d
     fac:	6574656c 	ldrbvs	r6, [r4, #-1388]!	@ 0xfffffa94
     fb0:	54787500 	ldrbtpl	r7, [r8], #-1280	@ 0xfffffb00
     fb4:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
     fb8:	65626d75 	strbvs	r6, [r2, #-3445]!	@ 0xfffff28b
     fbc:	78700072 	ldmdavc	r0!, {r1, r4, r5, r6}^
     fc0:	64616552 	strbtvs	r6, [r1], #-1362	@ 0xfffffaae
     fc4:	73615479 	cmnvc	r1, #2030043136	@ 0x79000000
     fc8:	694c736b 	stmdbvs	ip, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}^
     fcc:	00737473 	rsbseq	r7, r3, r3, ror r4
     fd0:	61547875 	cmpvs	r4, r5, ror r8
     fd4:	65476b73 	strbvs	r6, [r7, #-2931]	@ 0xfffff48d
     fd8:	6d754e74 	ldclvs	14, cr4, [r5, #-464]!	@ 0xfffffe30
     fdc:	4f726562 	svcmi	0x00726562
     fe0:	73615466 	cmnvc	r1, #1711276032	@ 0x66000000
     fe4:	7800736b 	stmdavc	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
     fe8:	616c6544 	cmnvs	ip, r4, asr #10
     fec:	54646579 	strbtpl	r6, [r4], #-1401	@ 0xfffffa87
     ff0:	4c6b7361 	stclmi	3, cr7, [fp], #-388	@ 0xfffffe7c
     ff4:	31747369 	cmncc	r4, r9, ror #6
     ff8:	65447800 	strbvs	r7, [r4, #-2048]	@ 0xfffff800
     ffc:	6579616c 	ldrbvs	r6, [r9, #-364]!	@ 0xfffffe94
    1000:	73615464 	cmnvc	r1, #100, 8	@ 0x64000000
    1004:	73694c6b 	cmnvc	r9, #27392	@ 0x6b00
    1008:	78003274 	stmdavc	r0, {r2, r4, r5, r6, r9, ip, sp}
    100c:	4f6d754e 	svcmi	0x006d754e
    1010:	65764f66 	ldrbvs	r4, [r6, #-3942]!	@ 0xfffff09a
    1014:	6f6c6672 	svcvs	0x006c6672
    1018:	78007377 	stmdavc	r0, {r0, r1, r2, r4, r5, r6, r8, r9, ip, sp, lr}
    101c:	6b636954 	blvs	18db574 <__bss_end+0x18b5974>
    1020:	54780073 	ldrbtpl	r0, [r8], #-115	@ 0xffffff8d
    1024:	436b6369 	cmnmi	fp, #-1543503871	@ 0xa4000001
    1028:	746e756f 	strbtvc	r7, [lr], #-1391	@ 0xfffffa91
    102c:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    1030:	00746573 	rsbseq	r6, r4, r3, ror r5
    1034:	694d7875 	stmdbvs	sp, {r0, r2, r4, r5, r6, fp, ip, sp, lr}^
    1038:	64657373 	strbtvs	r7, [r5], #-883	@ 0xfffffc8d
    103c:	6b636954 	blvs	18db594 <__bss_end+0x18b5994>
    1040:	54780073 	ldrbtpl	r0, [r8], #-115	@ 0xffffff8d
    1044:	49656d69 	stmdbmi	r5!, {r0, r3, r5, r6, r8, sl, fp, sp, lr}^
    1048:	6572636e 	ldrbvs	r6, [r2, #-878]!	@ 0xfffffc92
    104c:	746e656d 	strbtvc	r6, [lr], #-1389	@ 0xfffffa93
    1050:	54637000 	strbtpl	r7, [r3], #-0
    1054:	4e6b7361 	cdpmi	3, 6, cr7, cr11, cr1, {3}
    1058:	00656d61 	rsbeq	r6, r5, r1, ror #26
    105c:	73615478 	cmnvc	r1, #120, 8	@ 0x78000000
    1060:	7465476b 	strbtvc	r4, [r5], #-1899	@ 0xfffff895
    1064:	6c707041 	ldclvs	0, cr7, [r0], #-260	@ 0xfffffefc
    1068:	74616369 	strbtvc	r6, [r1], #-873	@ 0xfffffc97
    106c:	546e6f69 	strbtpl	r6, [lr], #-3945	@ 0xfffff097
    1070:	546b7361 	strbtpl	r7, [fp], #-865	@ 0xfffffc9f
    1074:	70006761 	andvc	r6, r0, r1, ror #14
    1078:	63695478 	cmnvs	r9, #120, 8	@ 0x78000000
    107c:	6f54736b 	svcvs	0x0054736b
    1080:	74696157 	strbtvc	r6, [r9], #-343	@ 0xfffffea9
    1084:	43787500 	cmnmi	r8, #0, 10
    1088:	65727275 	ldrbvs	r7, [r2, #-629]!	@ 0xfffffd8b
    108c:	7250746e 	subsvc	r7, r0, #1845493760	@ 0x6e000000
    1090:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
    1094:	70007974 	andvc	r7, r0, r4, ror r9
    1098:	6d614e63 	stclvs	14, cr4, [r1, #-396]!	@ 0xfffffe74
    109c:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
    10a0:	6b736154 	blvs	1cd95f8 <__bss_end+0x1cb39f8>
    10a4:	6f697250 	svcvs	0x00697250
    10a8:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
    10ac:	00746547 	rsbseq	r6, r4, r7, asr #10
    10b0:	61547870 	cmpvs	r4, r0, ror r8
    10b4:	6f546b73 	svcvs	0x00546b73
    10b8:	70737553 	rsbsvc	r7, r3, r3, asr r5
    10bc:	00646e65 	rsbeq	r6, r4, r5, ror #28
    10c0:	61427670 	hvcvs	10080	@ 0x2760
    10c4:	64416573 	strbvs	r6, [r1], #-1395	@ 0xfffffa8d
    10c8:	73657264 	cmnvc	r5, #100, 4	@ 0x40000006
    10cc:	72700073 	rsbsvc	r0, r0, #115	@ 0x73
    10d0:	696e4976 	stmdbvs	lr!, {r1, r2, r4, r5, r6, r8, fp, lr}^
    10d4:	6c616974 			@ <UNDEFINED> instruction: 0x6c616974
    10d8:	54657369 	strbtpl	r7, [r5], #-873	@ 0xfffffc97
    10dc:	4c6b7361 	stclmi	3, cr7, [fp], #-388	@ 0xfffffe7c
    10e0:	73747369 	cmnvc	r4, #-1543503871	@ 0xa4000001
    10e4:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    10e8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    10ec:	69440032 	stmdbvs	r4, {r1, r4, r5}^
    10f0:	6c626173 	stfvse	f6, [r2], #-460	@ 0xfffffe34
    10f4:	73614265 	cmnvc	r1, #1342177286	@ 0x50000006
    10f8:	42006369 	andmi	r6, r0, #-1543503871	@ 0xa4000001
    10fc:	38324d43 	ldmdacc	r2!, {r0, r1, r6, r8, sl, fp, lr}
    1100:	495f3533 	ldmdbmi	pc, {r0, r1, r4, r5, r8, sl, ip, sp}^	@ <UNPREDICTABLE>
    1104:	5f43544e 	svcpl	0x0043544e
    1108:	53474552 	movtpl	r4, #30034	@ 0x7552
    110c:	4d6c7500 	cfstr64mi	mvdx7, [ip, #-0]
    1110:	656b7361 	strbvs	r7, [fp, #-865]!	@ 0xfffffc9f
    1114:	61745364 	cmnvs	r4, r4, ror #6
    1118:	00737574 	rsbseq	r7, r3, r4, ror r5
    111c:	65736162 	ldrbvs	r6, [r3, #-354]!	@ 0xfffffe9e
    1120:	616e6500 	cmnvs	lr, r0, lsl #10
    1124:	64656c62 	strbtvs	r6, [r5], #-3170	@ 0xfffff39e
    1128:	51494600 	cmppl	r9, r0, lsl #12
    112c:	6c727443 	cfldrdvs	mvd7, [r2], #-268	@ 0xfffffef4
    1130:	6e616800 	cdpvs	8, 6, cr6, cr1, cr0, {0}
    1134:	52656c64 	rsbpl	r6, r5, #100, 24	@ 0x6400
    1138:	65676e61 	strbvs	r6, [r7, #-3681]!	@ 0xfffff19f
    113c:	73616d00 	cmnvc	r1, #0, 26
    1140:	7269006b 	rsbvc	r0, r9, #107	@ 0x6b
    1144:	73694471 	cmnvc	r9, #1895825408	@ 0x71000000
    1148:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
    114c:	6e667000 	cdpvs	0, 6, cr7, cr6, cr0, {0}
    1150:	646e6148 	strbtvs	r6, [lr], #-328	@ 0xfffffeb8
    1154:	0072656c 	rsbseq	r6, r2, ip, ror #10
    1158:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ 10a4 <_start-0xef5c>
    115c:	68792f65 	ldmdavs	r9!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1160:	534f2f78 	movtpl	r2, #65400	@ 0xff78
    1164:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
    1168:	72656270 	rsbvc	r6, r5, #112, 4
    116c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1170:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
    1174:	4f545265 	svcmi	0x00545265
    1178:	65442f53 	strbvs	r2, [r4, #-3923]	@ 0xfffff0ad
    117c:	442f6f6d 	strtmi	r6, [pc], #-3949	@ 1184 <_start-0xee7c>
    1180:	65766972 	ldrbvs	r6, [r6, #-2418]!	@ 0xfffff68e
    1184:	692f7372 	stmdbvs	pc!, {r1, r4, r5, r6, r8, r9, ip, sp, lr}	@ <UNPREDICTABLE>
    1188:	632e7172 			@ <UNDEFINED> instruction: 0x632e7172
    118c:	6e655000 	cdpvs	0, 6, cr5, cr5, cr0, {0}
    1190:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
    1194:	6e450031 	mcrvs	0, 2, r0, cr5, cr1, {1}
    1198:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
    119c:	69440032 	stmdbvs	r4, {r1, r4, r5}^
    11a0:	6c626173 	stfvse	f6, [r2], #-460	@ 0xfffffe34
    11a4:	44003165 	strmi	r3, [r0], #-357	@ 0xfffffe9b
    11a8:	62617369 	rsbvs	r7, r1, #-1543503871	@ 0xa4000001
    11ac:	0032656c 	eorseq	r6, r2, ip, ror #10
    11b0:	65565f67 	ldrbvs	r5, [r6, #-3943]	@ 0xfffff099
    11b4:	726f7463 	rsbvc	r7, pc, #1660944384	@ 0x63000000
    11b8:	6c626154 	stfvse	f6, [r2], #-336	@ 0xfffffeb0
    11bc:	4e490065 	cdpmi	0, 4, cr0, cr9, cr5, {3}
    11c0:	52524554 	subspl	r4, r2, #84, 10	@ 0x15000000
    11c4:	5f545055 	svcpl	0x00545055
    11c8:	54434556 	strbpl	r4, [r3], #-1366	@ 0xfffffaaa
    11cc:	7000524f 	andvc	r5, r0, pc, asr #4
    11d0:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    11d4:	4900676e 	stmdbmi	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    11d8:	61425152 	cmpvs	r2, r2, asr r1
    11dc:	00636973 	rsbeq	r6, r3, r3, ror r9
    11e0:	62616e45 	rsbvs	r6, r1, #1104	@ 0x450
    11e4:	6142656c 	cmpvs	r2, ip, ror #10
    11e8:	00636973 	rsbeq	r6, r3, r3, ror r9
    11ec:	62616e45 	rsbvs	r6, r1, #1104	@ 0x450
    11f0:	0031656c 	eorseq	r6, r1, ip, ror #10
    11f4:	45535047 	ldrbmi	r5, [r3, #-71]	@ 0xffffffb9
    11f8:	43420054 	movtmi	r0, #8276	@ 0x2054
    11fc:	3338324d 	teqcc	r8, #-805306364	@ 0xd0000004
    1200:	50475f35 	subpl	r5, r7, r5, lsr pc
    1204:	525f4f49 	subspl	r4, pc, #292	@ 0x124
    1208:	00534745 	subseq	r4, r3, r5, asr #14
    120c:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	@ 0xfffffe5c
    1210:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    1214:	006d754e 	rsbeq	r7, sp, lr, asr #10
    1218:	64616552 	strbtvs	r6, [r1], #-1362	@ 0xfffffaae
    121c:	6f697047 	svcvs	0x00697047
    1220:	74655300 	strbtvc	r5, [r5], #-768	@ 0xfffffd00
    1224:	6f697047 	svcvs	0x00697047
    1228:	65726944 	ldrbvs	r6, [r2, #-2372]!	@ 0xfffff6bc
    122c:	6f697463 	svcvs	0x00697463
    1230:	5047006e 	subpl	r0, r7, lr, rrx
    1234:	00524c43 	subseq	r4, r2, r3, asr #24
    1238:	45485047 	strbmi	r5, [r8, #-71]	@ 0xffffffb9
    123c:	6552004e 	ldrbvs	r0, [r2, #-78]	@ 0xffffffb2
    1240:	76726573 			@ <UNDEFINED> instruction: 0x76726573
    1244:	355f6465 	ldrbcc	r6, [pc, #-1125]	@ de7 <_start-0xf219>
    1248:	54454400 	strbpl	r4, [r5], #-1024	@ 0xfffffc00
    124c:	5f544345 	svcpl	0x00544345
    1250:	49534952 	ldmdbmi	r3, {r1, r4, r6, r8, fp, lr}^
    1254:	415f474e 	cmpmi	pc, lr, asr #14
    1258:	434e5953 	movtmi	r5, #59731	@ 0xe953
    125c:	54454400 	strbpl	r4, [r5], #-1024	@ 0xfffffc00
    1260:	5f544345 	svcpl	0x00544345
    1264:	4c4c4146 	stfmie	f4, [ip], {70}	@ 0x46
    1268:	5f474e49 	svcpl	0x00474e49
    126c:	4e595341 	cdpmi	3, 5, cr5, cr9, cr1, {2}
    1270:	6c430043 	mcrrvs	0, 4, r0, r3, cr3
    1274:	47726165 	ldrbmi	r6, [r2, -r5, ror #2]!
    1278:	496f6970 	stmdbmi	pc!, {r4, r5, r6, r8, fp, sp, lr}^	@ <UNPREDICTABLE>
    127c:	7265746e 	rsbvc	r7, r5, #1845493760	@ 0x6e000000
    1280:	74707572 	ldrbtvc	r7, [r0], #-1394	@ 0xfffffa8e
    1284:	41504700 	cmpmi	r0, r0, lsl #14
    1288:	004e4546 	subeq	r4, lr, r6, asr #10
    128c:	62616e45 	rsbvs	r6, r1, #1104	@ 0x450
    1290:	7047656c 	subvc	r6, r7, ip, ror #10
    1294:	65446f69 	strbvs	r6, [r4, #-3945]	@ 0xfffff097
    1298:	74636574 	strbtvc	r6, [r3], #-1396	@ 0xfffffa8c
    129c:	50504700 	subspl	r4, r0, r0, lsl #14
    12a0:	44004455 	strmi	r4, [r0], #-1109	@ 0xfffffbab
    12a4:	43455445 	movtmi	r5, #21573	@ 0x5445
    12a8:	59545f54 	ldmdbpl	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    12ac:	70004550 	andvc	r4, r0, r0, asr r5
    12b0:	61566e69 	cmpvs	r6, r9, ror #28
    12b4:	5047006c 	subpl	r0, r7, ip, rrx
    12b8:	4e455241 	cdpmi	2, 4, cr5, cr5, cr1, {2}
    12bc:	74655300 	strbtvc	r5, [r5], #-768	@ 0xfffffd00
    12c0:	6f697047 	svcvs	0x00697047
    12c4:	636e7546 	cmnvs	lr, #293601280	@ 0x11800000
    12c8:	6e6f6974 			@ <UNDEFINED> instruction: 0x6e6f6974
    12cc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    12d0:	49445f4f 	stmdbmi	r4, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    12d4:	50470052 	subpl	r0, r7, r2, asr r0
    12d8:	004e4546 	subeq	r4, lr, r6, asr #10
    12dc:	4f495047 	svcmi	0x00495047
    12e0:	004e495f 	subeq	r4, lr, pc, asr r9
    12e4:	45544544 	ldrbmi	r4, [r4, #-1348]	@ 0xfffffabc
    12e8:	485f5443 	ldmdami	pc, {r0, r1, r6, sl, ip, lr}^	@ <UNPREDICTABLE>
    12ec:	00484749 	subeq	r4, r8, r9, asr #14
    12f0:	45544544 	ldrbmi	r4, [r4, #-1348]	@ 0xfffffabc
    12f4:	4e5f5443 	cdpmi	4, 5, cr5, cr15, cr3, {2}
    12f8:	00454e4f 	subeq	r4, r5, pc, asr #28
    12fc:	454c5047 	strbmi	r5, [ip, #-71]	@ 0xffffffb9
    1300:	5047004e 	subpl	r0, r7, lr, asr #32
    1304:	43445550 	movtmi	r5, #17744	@ 0x4550
    1308:	44004b4c 	strmi	r4, [r0], #-2892	@ 0xfffff4b4
    130c:	43455445 	movtmi	r5, #21573	@ 0x5445
    1310:	49525f54 	ldmdbmi	r2, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1314:	474e4953 	smlsldmi	r4, lr, r3, r9
    1318:	54454400 	strbpl	r4, [r5], #-1024	@ 0xfffffc00
    131c:	5f544345 	svcpl	0x00544345
    1320:	00574f4c 	subseq	r4, r7, ip, asr #30
    1324:	454c5047 	strbmi	r5, [ip, #-71]	@ 0xffffffb9
    1328:	75660056 	strbvc	r0, [r6, #-86]!	@ 0xffffffaa
    132c:	754e636e 	strbvc	r6, [lr, #-878]	@ 0xfffffc92
    1330:	5047006d 	subpl	r0, r7, sp, rrx
    1334:	004e4552 	subeq	r4, lr, r2, asr r5
    1338:	44455047 	strbmi	r5, [r5], #-71	@ 0xffffffb9
    133c:	69440053 	stmdbvs	r4, {r0, r1, r4, r6}^
    1340:	6c626173 	stfvse	f6, [r2], #-460	@ 0xfffffe34
    1344:	69704765 	ldmdbvs	r0!, {r0, r2, r5, r6, r8, r9, sl, lr}^
    1348:	7465446f 	strbtvc	r4, [r5], #-1135	@ 0xfffffb91
    134c:	00746365 	rsbseq	r6, r4, r5, ror #6
    1350:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	@ 129c <_start-0xed64>
    1354:	68792f65 	ldmdavs	r9!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1358:	534f2f78 	movtpl	r2, #65400	@ 0xff78
    135c:	7361522f 	cmnvc	r1, #-268435454	@ 0xf0000002
    1360:	72656270 	rsbvc	r6, r5, #112, 4
    1364:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1368:	6572462d 	ldrbvs	r4, [r2, #-1581]!	@ 0xfffff9d3
    136c:	4f545265 	svcmi	0x00545265
    1370:	65442f53 	strbvs	r2, [r4, #-3923]	@ 0xfffff0ad
    1374:	442f6f6d 	strtmi	r6, [pc], #-3949	@ 137c <_start-0xec84>
    1378:	65766972 	ldrbvs	r6, [r6, #-2418]!	@ 0xfffff68e
    137c:	672f7372 			@ <UNDEFINED> instruction: 0x672f7372
    1380:	2e6f6970 			@ <UNDEFINED> instruction: 0x2e6f6970
    1384:	79740063 	ldmdbvc	r4!, {r0, r1, r5, r6}^
    1388:	6f006570 	svcvs	0x00006570
    138c:	65736666 	ldrbvs	r6, [r3, #-1638]!	@ 0xfffff99a
    1390:	50470074 	subpl	r0, r7, r4, ror r0
    1394:	4c455346 	mcrrmi	3, 4, r5, r5, cr6
    1398:	73655200 	cmnvc	r5, #0, 4
    139c:	65767265 	ldrbvs	r7, [r6, #-613]!	@ 0xfffffd9b
    13a0:	00315f64 	eorseq	r5, r1, r4, ror #30
    13a4:	65736552 	ldrbvs	r6, [r3, #-1362]!	@ 0xfffffaae
    13a8:	64657672 	strbtvs	r7, [r5], #-1650	@ 0xfffff98e
    13ac:	5200325f 	andpl	r3, r0, #-268435451	@ 0xf0000005
    13b0:	72657365 	rsbvc	r7, r5, #-1811939327	@ 0x94000001
    13b4:	5f646576 	svcpl	0x00646576
    13b8:	65520033 	ldrbvs	r0, [r2, #-51]	@ 0xffffffcd
    13bc:	76726573 			@ <UNDEFINED> instruction: 0x76726573
    13c0:	345f6465 	ldrbcc	r6, [pc], #-1125	@ 13c8 <_start-0xec38>
    13c4:	73655200 	cmnvc	r5, #0, 4
    13c8:	65767265 	ldrbvs	r7, [r6, #-613]!	@ 0xfffffd9b
    13cc:	00365f64 	eorseq	r5, r6, r4, ror #30
    13d0:	65736552 	ldrbvs	r6, [r3, #-1362]!	@ 0xfffffaae
    13d4:	64657672 	strbtvs	r7, [r5], #-1650	@ 0xfffff98e
    13d8:	5200375f 	andpl	r3, r0, #24903680	@ 0x17c0000
    13dc:	72657365 	rsbvc	r7, r5, #-1811939327	@ 0x94000001
    13e0:	5f646576 	svcpl	0x00646576
    13e4:	65520038 	ldrbvs	r0, [r2, #-56]	@ 0xffffffc8
    13e8:	76726573 			@ <UNDEFINED> instruction: 0x76726573
    13ec:	395f6465 	ldmdbcc	pc, {r0, r2, r5, r6, sl, sp, lr}^	@ <UNPREDICTABLE>
    13f0:	54454400 	strbpl	r4, [r5], #-1024	@ 0xfffffc00
    13f4:	5f544345 	svcpl	0x00544345
    13f8:	4c4c4146 	stfmie	f4, [ip], {70}	@ 0x46
    13fc:	00474e49 	subeq	r4, r7, r9, asr #28
    1400:	47746553 			@ <UNDEFINED> instruction: 0x47746553
    1404:	006f6970 	rsbeq	r6, pc, r0, ror r9	@ <UNPREDICTABLE>
    1408:	65736552 	ldrbvs	r6, [r3, #-1362]!	@ 0xfffffaae
    140c:	64657672 	strbtvs	r7, [r5], #-1650	@ 0xfffff98e
    1410:	5200415f 	andpl	r4, r0, #-1073741801	@ 0xc0000017
    1414:	72657365 	rsbvc	r7, r5, #-1811939327	@ 0x94000001
    1418:	5f646576 	svcpl	0x00646576
    141c:	50470042 	subpl	r0, r7, r2, asr #32
    1420:	4f5f4f49 	svcmi	0x005f4f49
    1424:	70005455 	andvc	r5, r0, r5, asr r4
    1428:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
    142c:	74726573 	ldrbtvc	r6, [r2], #-1395	@ 0xfffffa8d
    1430:	636f6c42 	cmnvs	pc, #16896	@ 0x4200
    1434:	746e496b 	strbtvc	r4, [lr], #-2411	@ 0xfffff695
    1438:	6572466f 	ldrbvs	r4, [r2, #-1647]!	@ 0xfffff991
    143c:	73694c65 	cmnvc	r9, #25856	@ 0x6500
    1440:	50780074 	rsbspl	r0, r8, r4, ror r0
    1444:	4774726f 	ldrbmi	r7, [r4, -pc, ror #4]!
    1448:	72467465 	subvc	r7, r6, #1694498816	@ 0x65000000
    144c:	65486565 	strbvs	r6, [r8, #-1381]	@ 0xfffffa9b
    1450:	69537061 	ldmdbvs	r3, {r0, r5, r6, ip, sp, lr}^
    1454:	4100657a 	tstmi	r0, sl, ror r5
    1458:	4f4c425f 	svcmi	0x004c425f
    145c:	4c5f4b43 	mrrcmi	11, 4, r4, pc, cr3	@ <UNPREDICTABLE>
    1460:	004b4e49 	subeq	r4, fp, r9, asr #28
    1464:	48767270 	ldmdami	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    1468:	49706165 	ldmdbmi	r0!, {r0, r2, r5, r6, r8, sp, lr}^
    146c:	0074696e 	rsbseq	r6, r4, lr, ror #18
    1470:	6c427870 	mcrrvs	8, 7, r7, r2, cr0
    1474:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1478:	694c7870 	stmdbvs	ip, {r4, r5, r6, fp, ip, sp, lr}^
    147c:	70006b6e 	andvc	r6, r0, lr, ror #22
    1480:	72694678 	rsbvc	r4, r9, #120, 12	@ 0x7800000
    1484:	72467473 	subvc	r7, r6, #1929379840	@ 0x73000000
    1488:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	@ 0x65
    148c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1490:	4f545278 	svcmi	0x00545278
    1494:	45485f53 	strbmi	r5, [r8, #-3923]	@ 0xfffff0ad
    1498:	75005041 	strvc	r5, [r0, #-65]	@ 0xffffffbf
    149c:	61654863 	cmnvs	r5, r3, ror #16
    14a0:	44640070 	strbtmi	r0, [r4], #-112	@ 0xffffff90
    14a4:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    14a8:	6f682f00 	svcvs	0x00682f00
    14ac:	792f656d 	stmdbvc	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
    14b0:	4f2f7868 	svcmi	0x002f7868
    14b4:	61522f53 	cmpvs	r2, r3, asr pc
    14b8:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
    14bc:	50797272 	rsbspl	r7, r9, r2, ror r2
    14c0:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
    14c4:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
    14c8:	2f2f534f 	svccs	0x002f534f
    14cc:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
    14d0:	534f5452 	movtpl	r5, #62546	@ 0xf452
    14d4:	756f532f 	strbvc	r5, [pc, #-815]!	@ 11ad <_start-0xee53>
    14d8:	2f656372 	svccs	0x00656372
    14dc:	74726f70 	ldrbtvc	r6, [r2], #-3952	@ 0xfffff090
    14e0:	656c6261 	strbvs	r6, [ip, #-609]!	@ 0xfffffd9f
    14e4:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	@ 0xffffff44
    14e8:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
    14ec:	6165682f 	cmnvs	r5, pc, lsr #16
    14f0:	2e345f70 	mrccs	15, 1, r5, cr4, cr0, {3}
    14f4:	42780063 	rsbsmi	r0, r8, #99	@ 0x63
    14f8:	6b636f6c 	blvs	18dd2b0 <__bss_end+0x18b76b0>
    14fc:	657a6953 	ldrbvs	r6, [sl, #-2387]!	@ 0xfffff6ad
    1500:	65487800 	strbvs	r7, [r8, #-2048]	@ 0xfffff800
    1504:	70007061 	andvc	r7, r0, r1, rrx
    1508:	646e4578 	strbtvs	r4, [lr], #-1400	@ 0xfffffa88
    150c:	50787000 	rsbspl	r7, r8, r0
    1510:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1514:	4273756f 	rsbsmi	r7, r3, #465567744	@ 0x1bc00000
    1518:	6b636f6c 	blvs	18dd2d0 <__bss_end+0x18b76d0>
    151c:	6f547800 	svcvs	0x00547800
    1520:	486c6174 	stmdami	ip!, {r2, r4, r5, r6, r8, sp, lr}^
    1524:	53706165 	cmnpl	r0, #1073741849	@ 0x40000019
    1528:	00657a69 	rsbeq	r7, r5, r9, ror #20
    152c:	65527670 	ldrbvs	r7, [r2, #-1648]	@ 0xfffff990
    1530:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    1534:	6f507600 	svcvs	0x00507600
    1538:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
    153c:	61697469 	cmnvs	r9, r9, ror #8
    1540:	6573696c 	ldrbvs	r6, [r3, #-2412]!	@ 0xfffff694
    1544:	636f6c42 	cmnvs	pc, #16896	@ 0x4200
    1548:	6800736b 	stmdavs	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    154c:	53706165 	cmnpl	r0, #1073741849	@ 0x40000019
    1550:	43555254 	cmpmi	r5, #84, 4	@ 0x40000005
    1554:	49535f54 	ldmdbmi	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    1558:	7800455a 	stmdavc	r0, {r1, r3, r4, r6, r8, sl, lr}
    155c:	72617453 	rsbvc	r7, r1, #1392508928	@ 0x53000000
    1560:	42780074 	rsbsmi	r0, r8, #116	@ 0x74
    1564:	6b636f6c 	blvs	18dd31c <__bss_end+0x18b771c>
    1568:	6b6e694c 	blvs	1b9baa0 <__bss_end+0x1b75ea0>
    156c:	6c6c6100 	stfvse	f6, [ip], #-0
    1570:	7461636f 	strbtvc	r6, [r1], #-879	@ 0xfffffc91
    1574:	78006465 	stmdavc	r0, {r0, r2, r5, r6, sl, sp, lr}
    1578:	746e6157 	strbtvc	r6, [lr], #-343	@ 0xfffffea9
    157c:	69536465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, sp, lr}^
    1580:	7800657a 	stmdavc	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    1584:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
    1588:	65747942 	ldrbvs	r7, [r4, #-2370]!	@ 0xfffff6be
    158c:	6d655273 	sfmvs	f5, 2, [r5, #-460]!	@ 0xfffffe34
    1590:	696e6961 	stmdbvs	lr!, {r0, r5, r6, r8, fp, sp, lr}^
    1594:	7000676e 	andvc	r6, r0, lr, ror #14
    1598:	77654e78 			@ <UNDEFINED> instruction: 0x77654e78
    159c:	636f6c42 	cmnvs	pc, #16896	@ 0x4200
    15a0:	6e694c6b 	cdpvs	12, 6, cr4, cr9, cr11, {3}
    15a4:	7870006b 	ldmdavc	r0!, {r0, r1, r3, r5, r6}^
    15a8:	7478654e 	ldrbtvc	r6, [r8], #-1358	@ 0xfffffab2
    15ac:	65657246 	strbvs	r7, [r5, #-582]!	@ 0xfffffdba
    15b0:	636f6c42 	cmnvs	pc, #16896	@ 0x4200
    15b4:	7570006b 	ldrbvc	r0, [r0, #-107]!	@ 0xffffff95
    15b8:	61654863 	cmnvs	r5, r3, ror #16
    15bc:	646e4570 	strbtvs	r4, [lr], #-1392	@ 0xfffffa90
    15c0:	42787000 	rsbsmi	r7, r8, #0
    15c4:	6b636f6c 	blvs	18dd37c <__bss_end+0x18b777c>
    15c8:	6e496f54 	mcrvs	15, 2, r6, cr9, cr4, {2}
    15cc:	74726573 	ldrbtvc	r6, [r2], #-1395	@ 0xfffffa8d
    15d0:	6f682f00 	svcvs	0x00682f00
    15d4:	792f656d 	stmdbvc	pc!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}	@ <UNPREDICTABLE>
    15d8:	4f2f7868 	svcmi	0x002f7868
    15dc:	61522f53 	cmpvs	r2, r3, asr pc
    15e0:	65627073 	strbvs	r7, [r2, #-115]!	@ 0xffffff8d
    15e4:	50797272 	rsbspl	r7, r9, r2, ror r2
    15e8:	72462d69 	subvc	r2, r6, #6720	@ 0x1a40
    15ec:	54526565 	ldrbpl	r6, [r2], #-1381	@ 0xfffffa9b
    15f0:	442f534f 	strtmi	r5, [pc], #-847	@ 15f8 <_start-0xea08>
    15f4:	2f6f6d65 	svccs	0x006f6d65
    15f8:	6e69616d 	powvsez	f6, f1, #5.0
    15fc:	7500632e 	strvc	r6, [r0, #-814]	@ 0xfffffcd2
    1600:	5f747261 	svcpl	0x00747261
    1604:	74696e69 	strbtvc	r6, [r9], #-3689	@ 0xfffff197
    1608:	73617400 	cmnvc	r1, #0, 8
    160c:	6d00326b 	sfmvs	f3, 4, [r0, #-428]	@ 0xfffffe54
    1610:	006e6961 	rsbeq	r6, lr, r1, ror #18
    1614:	6b736174 	blvs	1cd9bec <__bss_end+0x1cb3fec>
    1618:	61750031 	cmnvs	r5, r1, lsr r0
    161c:	705f7472 	subsvc	r7, pc, r2, ror r4	@ <UNPREDICTABLE>
    1620:	00637475 	rsbeq	r7, r3, r5, ror r4
    1624:	74726175 	ldrbtvc	r6, [r2], #-373	@ 0xfffffe8b
    1628:	7475705f 	ldrbtvc	r7, [r5], #-95	@ 0xffffffa1
    162c:	72730073 	rsbsvc	r0, r3, #115	@ 0x73
    1630:	64003063 	strvs	r3, [r0], #-99	@ 0xffffff9d
    1634:	00307473 	eorseq	r7, r0, r3, ror r4
    1638:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    163c:	5f64656e 	svcpl	0x0064656e
    1640:	00747364 	rsbseq	r7, r4, r4, ror #6
    1644:	6e756f63 	cdpvs	15, 7, cr6, cr5, cr3, {3}
    1648:	2e2e0074 	mcrcs	0, 1, r0, cr14, cr4, {3}
    164c:	2f2e2e2f 	svccs	0x002e2e2f
    1650:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    1654:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1658:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    165c:	732f6362 			@ <UNDEFINED> instruction: 0x732f6362
    1660:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1664:	74732f67 	ldrbtvc	r2, [r3], #-3943	@ 0xfffff099
    1668:	70636e72 	rsbvc	r6, r3, r2, ror lr
    166c:	00632e79 	rsbeq	r2, r3, r9, ror lr
    1670:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    1674:	5f64656e 	svcpl	0x0064656e
    1678:	00637273 	rsbeq	r7, r3, r3, ror r2
    167c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1680:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    1684:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1688:	38332d62 	ldmdacc	r3!, {r1, r5, r6, r8, sl, fp, sp}
    168c:	434a3056 	movtmi	r3, #41046	@ 0xa056
    1690:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1694:	2d62696c 			@ <UNDEFINED> instruction: 0x2d62696c
    1698:	2e342e34 	mrccs	14, 1, r2, cr4, cr4, {1}
    169c:	30322e30 	eorscc	r2, r2, r0, lsr lr
    16a0:	32313332 	eorscc	r3, r1, #-939524096	@ 0xc8000000
    16a4:	622f3133 	eorvs	r3, pc, #-1073741812	@ 0xc000000c
    16a8:	646c6975 	strbtvs	r6, [ip], #-2421	@ 0xfffff68b
    16ac:	6d72612f 	ldfvse	f6, [r2, #-188]!	@ 0xffffff44
    16b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    16b4:	61652d65 	cmnvs	r5, r5, ror #26
    16b8:	6e2f6962 	vnmulvs.f16	s12, s30, s5	@ <UNPREDICTABLE>
    16bc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    16c0:	4e470062 	cdpmi	0, 4, cr0, cr7, cr2, {3}
    16c4:	31432055 	qdaddcc	r2, r5, r3
    16c8:	33312037 	teqcc	r1, #55	@ 0x37
    16cc:	312e322e 			@ <UNDEFINED> instruction: 0x312e322e
    16d0:	32303220 	eorscc	r3, r0, #32, 4
    16d4:	30303133 	eorscc	r3, r0, r3, lsr r1
    16d8:	6d2d2039 	stcvs	0, cr2, [sp, #-228]!	@ 0xffffff1c
    16dc:	3d757063 	ldclcc	0, cr7, [r5, #-396]!	@ 0xfffffe74
    16e0:	376d7261 	strbcc	r7, [sp, -r1, ror #4]!
    16e4:	696d6474 	stmdbvs	sp!, {r2, r4, r5, r6, sl, sp, lr}^
    16e8:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
    16ec:	74616f6c 	strbtvc	r6, [r1], #-3948	@ 0xfffff094
    16f0:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
    16f4:	666f733d 			@ <UNDEFINED> instruction: 0x666f733d
    16f8:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	@ 0xfffffe30
    16fc:	206d7261 	rsbcs	r7, sp, r1, ror #4
    1700:	72616d2d 	rsbvc	r6, r1, #2880	@ 0xb40
    1704:	613d6863 	teqvs	sp, r3, ror #16
    1708:	34766d72 	ldrbtcc	r6, [r6], #-3442	@ 0xfffff28e
    170c:	672d2074 			@ <UNDEFINED> instruction: 0x672d2074
    1710:	324f2d20 	subcc	r2, pc, #32, 26	@ 0x800
    1714:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
    1718:	75622d6f 	strbvc	r2, [r2, #-3439]!	@ 0xfffff291
    171c:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    1720:	6c61006e 	stclvs	0, cr0, [r1], #-440	@ 0xfffffe48
    1724:	656e6769 	strbvs	r6, [lr, #-1897]!	@ 0xfffff897
    1728:	64615f64 	strbtvs	r5, [r1], #-3940	@ 0xfffff09c
    172c:	2e007264 	cdpcs	2, 0, cr7, cr0, cr4, {3}
    1730:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1734:	2f2e2e2f 	svccs	0x002e2e2f
    1738:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	@ 0xfffffe48
    173c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	@ 15a0 <_start-0xea60>
    1740:	2f636269 	svccs	0x00636269
    1744:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1748:	6d2f676e 	stcvs	7, cr6, [pc, #-440]!	@ 1598 <_start-0xea68>
    174c:	65736d65 	ldrbvs	r6, [r3, #-3429]!	@ 0xfffff29b
    1750:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1754:	66667562 	strbtvs	r7, [r6], -r2, ror #10
    1758:	6c007265 	sfmvs	f7, 4, [r0], {101}	@ 0x65
    175c:	00306e65 	eorseq	r6, r0, r5, ror #28
    1760:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1764:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1768:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    176c:	2f62696c 	svccs	0x0062696c
    1770:	6362696c 	cmnvs	r2, #108, 18	@ 0x1b0000
    1774:	63616d2f 	cmnvs	r1, #3008	@ 0xbc0
    1778:	656e6968 	strbvs	r6, [lr, #-2408]!	@ 0xfffff698
    177c:	6d72612f 	ldfvse	f6, [r2, #-188]!	@ 0xffffff44
    1780:	6d656d2f 	stclvs	13, cr6, [r5, #-188]!	@ 0xffffff44
    1784:	2d797063 	ldclcs	0, cr7, [r9, #-396]!	@ 0xfffffe74
    1788:	62757473 	rsbsvs	r7, r5, #1929379840	@ 0x73000000
    178c:	Address 0x178c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end+0x10ab124>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	@ 0xfffff7e0
   8:	2e33313a 	mrccs	1, 1, r3, cr3, cr10, {1}
   c:	65722e32 	ldrbvs	r2, [r2, #-3634]!	@ 0xfffff1ce
  10:	322d316c 	eorcc	r3, sp, #108, 2
  14:	33312029 	teqcc	r1, #41	@ 0x29
  18:	312e322e 			@ <UNDEFINED> instruction: 0x312e322e
  1c:	32303220 	eorscc	r3, r0, #32, 4
  20:	30303133 	eorscc	r3, r0, r3, lsr r1
  24:	Address 0x24 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	@ 0xfffffef7
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			@ <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	00020000 	andeq	r0, r2, r0
  1c:	00000240 	andeq	r0, r0, r0, asr #4
  20:	8b040e42 	blhi	103930 <__bss_end+0xddd30>
  24:	0b0d4201 	bleq	350830 <__bss_end+0x32ac30>
  28:	0d0dfe02 	stceq	14, cr15, [sp, #-8]
  2c:	000ecb42 	andeq	ip, lr, r2, asr #22
  30:	00000018 	andeq	r0, r0, r8, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	00020240 	andeq	r0, r2, r0, asr #4
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	8b080e42 	blhi	203950 <__bss_end+0x1ddd50>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	00040b0c 	andeq	r0, r4, ip, lsl #22
  4c:	0000001c 	andeq	r0, r0, ip, lsl r0
  50:	00000000 	andeq	r0, r0, r0
  54:	0002025c 	andeq	r0, r2, ip, asr r2
  58:	00000018 	andeq	r0, r0, r8, lsl r0
  5c:	8b040e42 	blhi	10396c <__bss_end+0xddd6c>
  60:	0b0d4201 	bleq	35086c <__bss_end+0x32ac6c>
  64:	420d0d44 	andmi	r0, sp, #68, 26	@ 0x1100
  68:	00000ecb 	andeq	r0, r0, fp, asr #29
  6c:	0000001c 	andeq	r0, r0, ip, lsl r0
  70:	00000000 	andeq	r0, r0, r0
  74:	00020274 	andeq	r0, r2, r4, ror r2
  78:	00000038 	andeq	r0, r0, r8, lsr r0
  7c:	8b080e42 	blhi	20398c <__bss_end+0x1ddd8c>
  80:	42018e02 	andmi	r8, r1, #2, 28
  84:	54040b0c 	strpl	r0, [r4], #-2828	@ 0xfffff4f4
  88:	00080d0c 	andeq	r0, r8, ip, lsl #26
  8c:	0000001c 	andeq	r0, r0, ip, lsl r0
  90:	00000000 	andeq	r0, r0, r0
  94:	000202ac 	andeq	r0, r2, ip, lsr #5
  98:	00000098 	muleq	r0, r8, r0
  9c:	8b080e42 	blhi	2039ac <__bss_end+0x1dddac>
  a0:	42018e02 	andmi	r8, r1, #2, 28
  a4:	7e040b0c 	vmlavc.f64	d0, d4, d12
  a8:	00080d0c 	andeq	r0, r8, ip, lsl #26
  ac:	0000000c 	andeq	r0, r0, ip
  b0:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
  b4:	7c020001 	stcvc	0, cr0, [r2], {1}
  b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	000000ac 	andeq	r0, r0, ip, lsr #1
  c4:	00020344 	andeq	r0, r2, r4, asr #6
  c8:	00000098 	muleq	r0, r8, r0
  cc:	8b040e42 	blhi	1039dc <__bss_end+0xddddc>
  d0:	0b0d4201 	bleq	3508dc <__bss_end+0x32acdc>
  d4:	420d0d7e 	andmi	r0, sp, #8064	@ 0x1f80
  d8:	00000ecb 	andeq	r0, r0, fp, asr #29
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	000000ac 	andeq	r0, r0, ip, lsr #1
  e4:	000203dc 	ldrdeq	r0, [r2], -ip
  e8:	000000b4 	strheq	r0, [r0], -r4
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	000000ac 	andeq	r0, r0, ip, lsr #1
  f4:	00020490 	muleq	r2, r0, r4
  f8:	000000b0 	strheq	r0, [r0], -r0	@ <UNPREDICTABLE>
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	000000ac 	andeq	r0, r0, ip, lsr #1
 104:	00020540 	andeq	r0, r2, r0, asr #10
 108:	00000044 	andeq	r0, r0, r4, asr #32
 10c:	8b040e42 	blhi	103a1c <__bss_end+0xdde1c>
 110:	0b0d4201 	bleq	35091c <__bss_end+0x32ad1c>
 114:	420d0d58 	andmi	r0, sp, #88, 26	@ 0x1600
 118:	00000ecb 	andeq	r0, r0, fp, asr #29
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	000000ac 	andeq	r0, r0, ip, lsr #1
 124:	00020584 	andeq	r0, r2, r4, lsl #11
 128:	00000064 	andeq	r0, r0, r4, rrx
 12c:	8b040e42 	blhi	103a3c <__bss_end+0xdde3c>
 130:	0b0d4201 	bleq	35093c <__bss_end+0x32ad3c>
 134:	420d0d68 	andmi	r0, sp, #104, 26	@ 0x1a00
 138:	00000ecb 	andeq	r0, r0, fp, asr #29
 13c:	0000000c 	andeq	r0, r0, ip
 140:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 144:	7c020001 	stcvc	0, cr0, [r2], {1}
 148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 14c:	0000001c 	andeq	r0, r0, ip, lsl r0
 150:	0000013c 	andeq	r0, r0, ip, lsr r1
 154:	000205f0 	strdeq	r0, [r2], -r0	@ <UNPREDICTABLE>
 158:	00000168 	andeq	r0, r0, r8, ror #2
 15c:	8b080e42 	blhi	203a6c <__bss_end+0x1dde6c>
 160:	42018e02 	andmi	r8, r1, #2, 28
 164:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 168:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
 16c:	0000001c 	andeq	r0, r0, ip, lsl r0
 170:	0000013c 	andeq	r0, r0, ip, lsr r1
 174:	00020758 	andeq	r0, r2, r8, asr r7
 178:	000000e4 	andeq	r0, r0, r4, ror #1
 17c:	8b080e42 	blhi	203a8c <__bss_end+0x1dde8c>
 180:	42018e02 	andmi	r8, r1, #2, 28
 184:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 188:	080d0c64 	stmdaeq	sp, {r2, r5, r6, sl, fp}
 18c:	0000001c 	andeq	r0, r0, ip, lsl r0
 190:	0000013c 	andeq	r0, r0, ip, lsr r1
 194:	0002083c 	andeq	r0, r2, ip, lsr r8
 198:	000000f0 	strdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
 19c:	8b080e42 	blhi	203aac <__bss_end+0x1ddeac>
 1a0:	42018e02 	andmi	r8, r1, #2, 28
 1a4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 1a8:	080d0c6c 	stmdaeq	sp, {r2, r3, r5, r6, sl, fp}
 1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1b4:	0002092c 	andeq	r0, r2, ip, lsr #18
 1b8:	000001d4 	ldrdeq	r0, [r0], -r4
 1bc:	8b080e42 	blhi	203acc <__bss_end+0x1ddecc>
 1c0:	42018e02 	andmi	r8, r1, #2, 28
 1c4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 1c8:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
 1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1d4:	00020b00 	andeq	r0, r2, r0, lsl #22
 1d8:	00000124 	andeq	r0, r0, r4, lsr #2
 1dc:	8b080e42 	blhi	203aec <__bss_end+0x1ddeec>
 1e0:	42018e02 	andmi	r8, r1, #2, 28
 1e4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 1e8:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	0000013c 	andeq	r0, r0, ip, lsr r1
 1f4:	00020c24 	andeq	r0, r2, r4, lsr #24
 1f8:	000000a8 	andeq	r0, r0, r8, lsr #1
 1fc:	8b080e42 	blhi	203b0c <__bss_end+0x1ddf0c>
 200:	42018e02 	andmi	r8, r1, #2, 28
 204:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 208:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 20c:	0000001c 	andeq	r0, r0, ip, lsl r0
 210:	0000013c 	andeq	r0, r0, ip, lsr r1
 214:	00020ccc 	andeq	r0, r2, ip, asr #25
 218:	0000008c 	andeq	r0, r0, ip, lsl #1
 21c:	8b080e42 	blhi	203b2c <__bss_end+0x1ddf2c>
 220:	42018e02 	andmi	r8, r1, #2, 28
 224:	7c040b0c 			@ <UNDEFINED> instruction: 0x7c040b0c
 228:	00080d0c 	andeq	r0, r8, ip, lsl #26
 22c:	0000000c 	andeq	r0, r0, ip
 230:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 234:	7c020001 	stcvc	0, cr0, [r2], {1}
 238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 23c:	0000001c 	andeq	r0, r0, ip, lsl r0
 240:	0000022c 	andeq	r0, r0, ip, lsr #4
 244:	00020d58 	andeq	r0, r2, r8, asr sp
 248:	00000068 	andeq	r0, r0, r8, rrx
 24c:	8b040e42 	blhi	103b5c <__bss_end+0xddf5c>
 250:	0b0d4201 	bleq	350a5c <__bss_end+0x32ae5c>
 254:	420d0d6c 	andmi	r0, sp, #108, 26	@ 0x1b00
 258:	00000ecb 	andeq	r0, r0, fp, asr #29
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	0000022c 	andeq	r0, r0, ip, lsr #4
 264:	00020dc0 	andeq	r0, r2, r0, asr #27
 268:	0000002c 	andeq	r0, r0, ip, lsr #32
 26c:	8b040e42 	blhi	103b7c <__bss_end+0xddf7c>
 270:	0b0d4201 	bleq	350a7c <__bss_end+0x32ae7c>
 274:	420d0d4e 	andmi	r0, sp, #4992	@ 0x1380
 278:	00000ecb 	andeq	r0, r0, fp, asr #29
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	0000022c 	andeq	r0, r0, ip, lsr #4
 284:	00020dec 	andeq	r0, r2, ip, ror #27
 288:	00000098 	muleq	r0, r8, r0
 28c:	8b040e42 	blhi	103b9c <__bss_end+0xddf9c>
 290:	0b0d4201 	bleq	350a9c <__bss_end+0x32ae9c>
 294:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 298:	000ecb42 	andeq	ip, lr, r2, asr #22
 29c:	0000001c 	andeq	r0, r0, ip, lsl r0
 2a0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2a4:	00020e84 	andeq	r0, r2, r4, lsl #29
 2a8:	000000d8 	ldrdeq	r0, [r0], -r8
 2ac:	8b040e42 	blhi	103bbc <__bss_end+0xddfbc>
 2b0:	0b0d4201 	bleq	350abc <__bss_end+0x32aebc>
 2b4:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 2b8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c0:	0000022c 	andeq	r0, r0, ip, lsr #4
 2c4:	00020f5c 	andeq	r0, r2, ip, asr pc
 2c8:	00000098 	muleq	r0, r8, r0
 2cc:	8b040e42 	blhi	103bdc <__bss_end+0xddfdc>
 2d0:	0b0d4201 	bleq	350adc <__bss_end+0x32aedc>
 2d4:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
 2d8:	000ecb42 	andeq	ip, lr, r2, asr #22
 2dc:	0000000c 	andeq	r0, r0, ip
 2e0:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
 2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	000002dc 	ldrdeq	r0, [r0], -ip
 2f4:	00020ff4 	strdeq	r0, [r2], -r4
 2f8:	00000114 	andeq	r0, r0, r4, lsl r1
 2fc:	8b080e42 	blhi	203c0c <__bss_end+0x1de00c>
 300:	42018e02 	andmi	r8, r1, #2, 28
 304:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 308:	080d0c84 	stmdaeq	sp, {r2, r7, sl, fp}
 30c:	0000001c 	andeq	r0, r0, ip, lsl r0
 310:	000002dc 	ldrdeq	r0, [r0], -ip
 314:	00021108 	andeq	r1, r2, r8, lsl #2
 318:	000000c8 	andeq	r0, r0, r8, asr #1
 31c:	8b080e42 	blhi	203c2c <__bss_end+0x1de02c>
 320:	42018e02 	andmi	r8, r1, #2, 28
 324:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 328:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	000002dc 	ldrdeq	r0, [r0], -ip
 334:	000211d0 	ldrdeq	r1, [r2], -r0
 338:	000001a4 	andeq	r0, r0, r4, lsr #3
 33c:	8b080e42 	blhi	203c4c <__bss_end+0x1de04c>
 340:	42018e02 	andmi	r8, r1, #2, 28
 344:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 348:	080d0ccc 	stmdaeq	sp, {r2, r3, r6, r7, sl, fp}
 34c:	0000001c 	andeq	r0, r0, ip, lsl r0
 350:	000002dc 	ldrdeq	r0, [r0], -ip
 354:	00021374 	andeq	r1, r2, r4, ror r3
 358:	000000dc 	ldrdeq	r0, [r0], -ip
 35c:	8b080e42 	blhi	203c6c <__bss_end+0x1de06c>
 360:	42018e02 	andmi	r8, r1, #2, 28
 364:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 368:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
 36c:	0000001c 	andeq	r0, r0, ip, lsl r0
 370:	000002dc 	ldrdeq	r0, [r0], -ip
 374:	00021450 	andeq	r1, r2, r0, asr r4
 378:	00000204 	andeq	r0, r0, r4, lsl #4
 37c:	8b080e42 	blhi	203c8c <__bss_end+0x1de08c>
 380:	42018e02 	andmi	r8, r1, #2, 28
 384:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 388:	080d0cfc 	stmdaeq	sp, {r2, r3, r4, r5, r6, r7, sl, fp}
 38c:	0000001c 	andeq	r0, r0, ip, lsl r0
 390:	000002dc 	ldrdeq	r0, [r0], -ip
 394:	00021654 	andeq	r1, r2, r4, asr r6
 398:	000000e0 	andeq	r0, r0, r0, ror #1
 39c:	8b080e42 	blhi	203cac <__bss_end+0x1de0ac>
 3a0:	42018e02 	andmi	r8, r1, #2, 28
 3a4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 3a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
 3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b0:	000002dc 	ldrdeq	r0, [r0], -ip
 3b4:	00021734 	andeq	r1, r2, r4, lsr r7
 3b8:	00000034 	andeq	r0, r0, r4, lsr r0
 3bc:	8b080e42 	blhi	203ccc <__bss_end+0x1de0cc>
 3c0:	42018e02 	andmi	r8, r1, #2, 28
 3c4:	54040b0c 	strpl	r0, [r4], #-2828	@ 0xfffff4f4
 3c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d0:	000002dc 	ldrdeq	r0, [r0], -ip
 3d4:	00021768 	andeq	r1, r2, r8, ror #14
 3d8:	00000030 	andeq	r0, r0, r0, lsr r0
 3dc:	8b040e42 	blhi	103cec <__bss_end+0xde0ec>
 3e0:	0b0d4201 	bleq	350bec <__bss_end+0x32afec>
 3e4:	420d0d50 	andmi	r0, sp, #80, 26	@ 0x1400
 3e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f0:	000002dc 	ldrdeq	r0, [r0], -ip
 3f4:	00021798 	muleq	r2, r8, r7
 3f8:	00000034 	andeq	r0, r0, r4, lsr r0
 3fc:	8b080e42 	blhi	203d0c <__bss_end+0x1de10c>
 400:	42018e02 	andmi	r8, r1, #2, 28
 404:	54040b0c 	strpl	r0, [r4], #-2828	@ 0xfffff4f4
 408:	00080d0c 	andeq	r0, r8, ip, lsl #26
 40c:	0000001c 	andeq	r0, r0, ip, lsl r0
 410:	000002dc 	ldrdeq	r0, [r0], -ip
 414:	000217cc 	andeq	r1, r2, ip, asr #15
 418:	0000012c 	andeq	r0, r0, ip, lsr #2
 41c:	8b080e42 	blhi	203d2c <__bss_end+0x1de12c>
 420:	42018e02 	andmi	r8, r1, #2, 28
 424:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 428:	080d0c90 	stmdaeq	sp, {r4, r7, sl, fp}
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	000002dc 	ldrdeq	r0, [r0], -ip
 434:	000218f8 	strdeq	r1, [r2], -r8
 438:	00000090 	muleq	r0, r0, r0
 43c:	8b080e42 	blhi	203d4c <__bss_end+0x1de14c>
 440:	42018e02 	andmi	r8, r1, #2, 28
 444:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 448:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 44c:	0000001c 	andeq	r0, r0, ip, lsl r0
 450:	000002dc 	ldrdeq	r0, [r0], -ip
 454:	00021988 	andeq	r1, r2, r8, lsl #19
 458:	00000104 	andeq	r0, r0, r4, lsl #2
 45c:	8b080e42 	blhi	203d6c <__bss_end+0x1de16c>
 460:	42018e02 	andmi	r8, r1, #2, 28
 464:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 468:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	000002dc 	ldrdeq	r0, [r0], -ip
 474:	00021a8c 	andeq	r1, r2, ip, lsl #21
 478:	00000044 	andeq	r0, r0, r4, asr #32
 47c:	8b080e42 	blhi	203d8c <__bss_end+0x1de18c>
 480:	42018e02 	andmi	r8, r1, #2, 28
 484:	5c040b0c 			@ <UNDEFINED> instruction: 0x5c040b0c
 488:	00080d0c 	andeq	r0, r8, ip, lsl #26
 48c:	0000001c 	andeq	r0, r0, ip, lsl r0
 490:	000002dc 	ldrdeq	r0, [r0], -ip
 494:	00021ad0 	ldrdeq	r1, [r2], -r0
 498:	00000040 	andeq	r0, r0, r0, asr #32
 49c:	8b040e42 	blhi	103dac <__bss_end+0xde1ac>
 4a0:	0b0d4201 	bleq	350cac <__bss_end+0x32b0ac>
 4a4:	420d0d58 	andmi	r0, sp, #88, 26	@ 0x1600
 4a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 4b0:	000002dc 	ldrdeq	r0, [r0], -ip
 4b4:	00021b10 	andeq	r1, r2, r0, lsl fp
 4b8:	0000004c 	andeq	r0, r0, ip, asr #32
 4bc:	8b080e42 	blhi	203dcc <__bss_end+0x1de1cc>
 4c0:	42018e02 	andmi	r8, r1, #2, 28
 4c4:	60040b0c 	andvs	r0, r4, ip, lsl #22
 4c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4d0:	000002dc 	ldrdeq	r0, [r0], -ip
 4d4:	00021b5c 	andeq	r1, r2, ip, asr fp
 4d8:	00000048 	andeq	r0, r0, r8, asr #32
 4dc:	8b040e42 	blhi	103dec <__bss_end+0xde1ec>
 4e0:	0b0d4201 	bleq	350cec <__bss_end+0x32b0ec>
 4e4:	420d0d5c 	andmi	r0, sp, #92, 26	@ 0x1700
 4e8:	00000ecb 	andeq	r0, r0, fp, asr #29
 4ec:	0000000c 	andeq	r0, r0, ip
 4f0:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4fc:	00000020 	andeq	r0, r0, r0, lsr #32
 500:	000004ec 	andeq	r0, r0, ip, ror #9
 504:	00021ba4 	andeq	r1, r2, r4, lsr #23
 508:	0000024c 	andeq	r0, r0, ip, asr #4
 50c:	8b080e42 	blhi	203e1c <__bss_end+0x1de21c>
 510:	42018e02 	andmi	r8, r1, #2, 28
 514:	03040b0c 	movweq	r0, #19212	@ 0x4b0c
 518:	0d0c0112 	stfeqs	f0, [ip, #-72]	@ 0xffffffb8
 51c:	00000008 	andeq	r0, r0, r8
 520:	0000001c 	andeq	r0, r0, ip, lsl r0
 524:	000004ec 	andeq	r0, r0, ip, ror #9
 528:	00021df0 	strdeq	r1, [r2], -r0
 52c:	00000100 	andeq	r0, r0, r0, lsl #2
 530:	8b080e42 	blhi	203e40 <__bss_end+0x1de240>
 534:	42018e02 	andmi	r8, r1, #2, 28
 538:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 53c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 540:	0000001c 	andeq	r0, r0, ip, lsl r0
 544:	000004ec 	andeq	r0, r0, ip, ror #9
 548:	00021ef0 	strdeq	r1, [r2], -r0
 54c:	00000110 	andeq	r0, r0, r0, lsl r1
 550:	8b080e42 	blhi	203e60 <__bss_end+0x1de260>
 554:	42018e02 	andmi	r8, r1, #2, 28
 558:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 55c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 560:	0000001c 	andeq	r0, r0, ip, lsl r0
 564:	000004ec 	andeq	r0, r0, ip, ror #9
 568:	00022000 	andeq	r2, r2, r0
 56c:	00000084 	andeq	r0, r0, r4, lsl #1
 570:	8b080e42 	blhi	203e80 <__bss_end+0x1de280>
 574:	42018e02 	andmi	r8, r1, #2, 28
 578:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
 57c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 580:	0000001c 	andeq	r0, r0, ip, lsl r0
 584:	000004ec 	andeq	r0, r0, ip, ror #9
 588:	00022084 	andeq	r2, r2, r4, lsl #1
 58c:	00000058 	andeq	r0, r0, r8, asr r0
 590:	8b080e42 	blhi	203ea0 <__bss_end+0x1de2a0>
 594:	42018e02 	andmi	r8, r1, #2, 28
 598:	64040b0c 	strvs	r0, [r4], #-2828	@ 0xfffff4f4
 59c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5a4:	000004ec 	andeq	r0, r0, ip, ror #9
 5a8:	000220dc 	ldrdeq	r2, [r2], -ip
 5ac:	000001a8 	andeq	r0, r0, r8, lsr #3
 5b0:	8b080e42 	blhi	203ec0 <__bss_end+0x1de2c0>
 5b4:	42018e02 	andmi	r8, r1, #2, 28
 5b8:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 5bc:	080d0cc8 	stmdaeq	sp, {r3, r6, r7, sl, fp}
 5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5c4:	000004ec 	andeq	r0, r0, ip, ror #9
 5c8:	00022284 	andeq	r2, r2, r4, lsl #5
 5cc:	00000104 	andeq	r0, r0, r4, lsl #2
 5d0:	8b080e42 	blhi	203ee0 <__bss_end+0x1de2e0>
 5d4:	42018e02 	andmi	r8, r1, #2, 28
 5d8:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 5dc:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
 5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 5e4:	000004ec 	andeq	r0, r0, ip, ror #9
 5e8:	00022388 	andeq	r2, r2, r8, lsl #7
 5ec:	0000007c 	andeq	r0, r0, ip, ror r0
 5f0:	8b040e42 	blhi	103f00 <__bss_end+0xde300>
 5f4:	0b0d4201 	bleq	350e00 <__bss_end+0x32b200>
 5f8:	420d0d72 	andmi	r0, sp, #7296	@ 0x1c80
 5fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 600:	0000001c 	andeq	r0, r0, ip, lsl r0
 604:	000004ec 	andeq	r0, r0, ip, ror #9
 608:	00022404 	andeq	r2, r2, r4, lsl #8
 60c:	000000f8 	strdeq	r0, [r0], -r8
 610:	8b080e42 	blhi	203f20 <__bss_end+0x1de320>
 614:	42018e02 	andmi	r8, r1, #2, 28
 618:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 61c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 620:	0000001c 	andeq	r0, r0, ip, lsl r0
 624:	000004ec 	andeq	r0, r0, ip, ror #9
 628:	000224fc 	strdeq	r2, [r2], -ip
 62c:	0000011c 	andeq	r0, r0, ip, lsl r1
 630:	8b080e42 	blhi	203f40 <__bss_end+0x1de340>
 634:	42018e02 	andmi	r8, r1, #2, 28
 638:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 63c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
 640:	0000001c 	andeq	r0, r0, ip, lsl r0
 644:	000004ec 	andeq	r0, r0, ip, ror #9
 648:	00022618 	andeq	r2, r2, r8, lsl r6
 64c:	0000009c 	muleq	r0, ip, r0
 650:	8b080e42 	blhi	203f60 <__bss_end+0x1de360>
 654:	42018e02 	andmi	r8, r1, #2, 28
 658:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 65c:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
 660:	00000018 	andeq	r0, r0, r8, lsl r0
 664:	000004ec 	andeq	r0, r0, ip, ror #9
 668:	000226b4 			@ <UNDEFINED> instruction: 0x000226b4
 66c:	00000038 	andeq	r0, r0, r8, lsr r0
 670:	8b080e42 	blhi	203f80 <__bss_end+0x1de380>
 674:	42018e02 	andmi	r8, r1, #2, 28
 678:	00040b0c 	andeq	r0, r4, ip, lsl #22
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	000004ec 	andeq	r0, r0, ip, ror #9
 684:	000226ec 	andeq	r2, r2, ip, ror #13
 688:	00000030 	andeq	r0, r0, r0, lsr r0
 68c:	8b040e42 	blhi	103f9c <__bss_end+0xde39c>
 690:	0b0d4201 	bleq	350e9c <__bss_end+0x32b29c>
 694:	420d0d4e 	andmi	r0, sp, #4992	@ 0x1380
 698:	00000ecb 	andeq	r0, r0, fp, asr #29
 69c:	00000020 	andeq	r0, r0, r0, lsr #32
 6a0:	000004ec 	andeq	r0, r0, ip, ror #9
 6a4:	0002271c 	andeq	r2, r2, ip, lsl r7
 6a8:	000001a4 	andeq	r0, r0, r4, lsr #3
 6ac:	840c0e42 	strhi	r0, [ip], #-3650	@ 0xfffff1be
 6b0:	8e028b03 	vmlahi.f64	d8, d2, d3
 6b4:	0b0c4201 	bleq	310ec0 <__bss_end+0x2eb2c0>
 6b8:	0cbc0204 	lfmeq	f0, 4, [ip], #16
 6bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
 6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6c4:	000004ec 	andeq	r0, r0, ip, ror #9
 6c8:	000228c0 	andeq	r2, r2, r0, asr #17
 6cc:	00000034 	andeq	r0, r0, r4, lsr r0
 6d0:	8b080e42 	blhi	203fe0 <__bss_end+0x1de3e0>
 6d4:	42018e02 	andmi	r8, r1, #2, 28
 6d8:	52040b0c 	andpl	r0, r4, #12, 22	@ 0x3000
 6dc:	00080d0c 	andeq	r0, r8, ip, lsl #26
 6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 6e4:	000004ec 	andeq	r0, r0, ip, ror #9
 6e8:	000228f4 	strdeq	r2, [r2], -r4
 6ec:	00000038 	andeq	r0, r0, r8, lsr r0
 6f0:	8b040e42 	blhi	104000 <__bss_end+0xde400>
 6f4:	0b0d4201 	bleq	350f00 <__bss_end+0x32b300>
 6f8:	420d0d52 	andmi	r0, sp, #5248	@ 0x1480
 6fc:	00000ecb 	andeq	r0, r0, fp, asr #29
 700:	0000001c 	andeq	r0, r0, ip, lsl r0
 704:	000004ec 	andeq	r0, r0, ip, ror #9
 708:	0002292c 	andeq	r2, r2, ip, lsr #18
 70c:	00000024 	andeq	r0, r0, r4, lsr #32
 710:	8b040e42 	blhi	104020 <__bss_end+0xde420>
 714:	0b0d4201 	bleq	350f20 <__bss_end+0x32b320>
 718:	420d0d48 	andmi	r0, sp, #72, 26	@ 0x1200
 71c:	00000ecb 	andeq	r0, r0, fp, asr #29
 720:	0000001c 	andeq	r0, r0, ip, lsl r0
 724:	000004ec 	andeq	r0, r0, ip, ror #9
 728:	00022950 	andeq	r2, r2, r0, asr r9
 72c:	0000021c 	andeq	r0, r0, ip, lsl r2
 730:	8b080e42 	blhi	204040 <__bss_end+0x1de440>
 734:	42018e02 	andmi	r8, r1, #2, 28
 738:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 73c:	080d0cf6 	stmdaeq	sp, {r1, r2, r4, r5, r6, r7, sl, fp}
 740:	0000001c 	andeq	r0, r0, ip, lsl r0
 744:	000004ec 	andeq	r0, r0, ip, ror #9
 748:	00022b6c 	andeq	r2, r2, ip, ror #22
 74c:	0000005c 	andeq	r0, r0, ip, asr r0
 750:	8b080e42 	blhi	204060 <__bss_end+0x1de460>
 754:	42018e02 	andmi	r8, r1, #2, 28
 758:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 75c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 760:	0000001c 	andeq	r0, r0, ip, lsl r0
 764:	000004ec 	andeq	r0, r0, ip, ror #9
 768:	00022bc8 	andeq	r2, r2, r8, asr #23
 76c:	0000005c 	andeq	r0, r0, ip, asr r0
 770:	8b080e42 	blhi	204080 <__bss_end+0x1de480>
 774:	42018e02 	andmi	r8, r1, #2, 28
 778:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
 77c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 780:	0000001c 	andeq	r0, r0, ip, lsl r0
 784:	000004ec 	andeq	r0, r0, ip, ror #9
 788:	00022c24 	andeq	r2, r2, r4, lsr #24
 78c:	0000007c 	andeq	r0, r0, ip, ror r0
 790:	8b080e42 	blhi	2040a0 <__bss_end+0x1de4a0>
 794:	42018e02 	andmi	r8, r1, #2, 28
 798:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 79c:	00080d0c 	andeq	r0, r8, ip, lsl #26
 7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a4:	000004ec 	andeq	r0, r0, ip, ror #9
 7a8:	00022ca0 	andeq	r2, r2, r0, lsr #25
 7ac:	00000108 	andeq	r0, r0, r8, lsl #2
 7b0:	8b040e42 	blhi	1040c0 <__bss_end+0xde4c0>
 7b4:	0b0d4201 	bleq	350fc0 <__bss_end+0x32b3c0>
 7b8:	0d0d7202 	sfmeq	f7, 4, [sp, #-8]
 7bc:	000ecb42 	andeq	ip, lr, r2, asr #22
 7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7c4:	000004ec 	andeq	r0, r0, ip, ror #9
 7c8:	00022da8 	andeq	r2, r2, r8, lsr #27
 7cc:	0000009c 	muleq	r0, ip, r0
 7d0:	8b080e42 	blhi	2040e0 <__bss_end+0x1de4e0>
 7d4:	42018e02 	andmi	r8, r1, #2, 28
 7d8:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 7dc:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
 7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 7e4:	000004ec 	andeq	r0, r0, ip, ror #9
 7e8:	00022e44 	andeq	r2, r2, r4, asr #28
 7ec:	00000118 	andeq	r0, r0, r8, lsl r1
 7f0:	8b080e42 	blhi	204100 <__bss_end+0x1de500>
 7f4:	42018e02 	andmi	r8, r1, #2, 28
 7f8:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 7fc:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
 800:	0000001c 	andeq	r0, r0, ip, lsl r0
 804:	000004ec 	andeq	r0, r0, ip, ror #9
 808:	00022f5c 	andeq	r2, r2, ip, asr pc
 80c:	00000048 	andeq	r0, r0, r8, asr #32
 810:	8b040e42 	blhi	104120 <__bss_end+0xde520>
 814:	0b0d4201 	bleq	351020 <__bss_end+0x32b420>
 818:	420d0d58 	andmi	r0, sp, #88, 26	@ 0x1600
 81c:	00000ecb 	andeq	r0, r0, fp, asr #29
 820:	0000001c 	andeq	r0, r0, ip, lsl r0
 824:	000004ec 	andeq	r0, r0, ip, ror #9
 828:	00022fa4 	andeq	r2, r2, r4, lsr #31
 82c:	000000f4 	strdeq	r0, [r0], -r4
 830:	8b080e42 	blhi	204140 <__bss_end+0x1de540>
 834:	42018e02 	andmi	r8, r1, #2, 28
 838:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 83c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
 840:	0000001c 	andeq	r0, r0, ip, lsl r0
 844:	000004ec 	andeq	r0, r0, ip, ror #9
 848:	00023098 	muleq	r2, r8, r0
 84c:	00000028 	andeq	r0, r0, r8, lsr #32
 850:	8b040e42 	blhi	104160 <__bss_end+0xde560>
 854:	0b0d4201 	bleq	351060 <__bss_end+0x32b460>
 858:	420d0d4a 	andmi	r0, sp, #4736	@ 0x1280
 85c:	00000ecb 	andeq	r0, r0, fp, asr #29
 860:	00000018 	andeq	r0, r0, r8, lsl r0
 864:	000004ec 	andeq	r0, r0, ip, ror #9
 868:	000230c0 	andeq	r3, r2, r0, asr #1
 86c:	00000030 	andeq	r0, r0, r0, lsr r0
 870:	8b080e42 	blhi	204180 <__bss_end+0x1de580>
 874:	42018e02 	andmi	r8, r1, #2, 28
 878:	00040b0c 	andeq	r0, r4, ip, lsl #22
 87c:	0000001c 	andeq	r0, r0, ip, lsl r0
 880:	000004ec 	andeq	r0, r0, ip, ror #9
 884:	000230f0 	strdeq	r3, [r2], -r0
 888:	000000c0 	andeq	r0, r0, r0, asr #1
 88c:	8b080e42 	blhi	20419c <__bss_end+0x1de59c>
 890:	42018e02 	andmi	r8, r1, #2, 28
 894:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 898:	080d0c5a 	stmdaeq	sp, {r1, r3, r4, r6, sl, fp}
 89c:	0000001c 	andeq	r0, r0, ip, lsl r0
 8a0:	000004ec 	andeq	r0, r0, ip, ror #9
 8a4:	000231b0 			@ <UNDEFINED> instruction: 0x000231b0
 8a8:	000000c0 	andeq	r0, r0, r0, asr #1
 8ac:	8b080e42 	blhi	2041bc <__bss_end+0x1de5bc>
 8b0:	42018e02 	andmi	r8, r1, #2, 28
 8b4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 8b8:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
 8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8c0:	000004ec 	andeq	r0, r0, ip, ror #9
 8c4:	00023270 	andeq	r3, r2, r0, ror r2
 8c8:	000000bc 	strheq	r0, [r0], -ip
 8cc:	8b080e42 	blhi	2041dc <__bss_end+0x1de5dc>
 8d0:	42018e02 	andmi	r8, r1, #2, 28
 8d4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 8d8:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 8e0:	000004ec 	andeq	r0, r0, ip, ror #9
 8e4:	0002332c 	andeq	r3, r2, ip, lsr #6
 8e8:	000000b8 	strheq	r0, [r0], -r8
 8ec:	8b080e42 	blhi	2041fc <__bss_end+0x1de5fc>
 8f0:	42018e02 	andmi	r8, r1, #2, 28
 8f4:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 8f8:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
 8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 900:	000004ec 	andeq	r0, r0, ip, ror #9
 904:	000233e4 	andeq	r3, r2, r4, ror #7
 908:	000000b0 	strheq	r0, [r0], -r0	@ <UNPREDICTABLE>
 90c:	8b080e42 	blhi	20421c <__bss_end+0x1de61c>
 910:	42018e02 	andmi	r8, r1, #2, 28
 914:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 918:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 91c:	0000001c 	andeq	r0, r0, ip, lsl r0
 920:	000004ec 	andeq	r0, r0, ip, ror #9
 924:	00023494 	muleq	r2, r4, r4
 928:	00000034 	andeq	r0, r0, r4, lsr r0
 92c:	8b080e42 	blhi	20423c <__bss_end+0x1de63c>
 930:	42018e02 	andmi	r8, r1, #2, 28
 934:	54040b0c 	strpl	r0, [r4], #-2828	@ 0xfffff4f4
 938:	00080d0c 	andeq	r0, r8, ip, lsl #26
 93c:	0000000c 	andeq	r0, r0, ip
 940:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 944:	7c020001 	stcvc	0, cr0, [r2], {1}
 948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 94c:	0000001c 	andeq	r0, r0, ip, lsl r0
 950:	0000093c 	andeq	r0, r0, ip, lsr r9
 954:	000234c8 	andeq	r3, r2, r8, asr #9
 958:	000000b4 	strheq	r0, [r0], -r4
 95c:	8b080e42 	blhi	20426c <__bss_end+0x1de66c>
 960:	42018e02 	andmi	r8, r1, #2, 28
 964:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 968:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
 96c:	0000001c 	andeq	r0, r0, ip, lsl r0
 970:	0000093c 	andeq	r0, r0, ip, lsr r9
 974:	0002357c 	andeq	r3, r2, ip, ror r5
 978:	000000a0 	andeq	r0, r0, r0, lsr #1
 97c:	84100e42 	ldrhi	r0, [r0], #-3650	@ 0xfffff1be
 980:	8b038504 	blhi	e1d98 <__bss_end+0xbc198>
 984:	42018e02 	andmi	r8, r1, #2, 28
 988:	00040b0c 	andeq	r0, r4, ip, lsl #22
 98c:	0000001c 	andeq	r0, r0, ip, lsl r0
 990:	0000093c 	andeq	r0, r0, ip, lsr r9
 994:	0002361c 	andeq	r3, r2, ip, lsl r6
 998:	0000001c 	andeq	r0, r0, ip, lsl r0
 99c:	8b040e42 	blhi	1042ac <__bss_end+0xde6ac>
 9a0:	0b0d4201 	bleq	3511ac <__bss_end+0x32b5ac>
 9a4:	420d0d46 	andmi	r0, sp, #4480	@ 0x1180
 9a8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 9b0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9b4:	00023638 	andeq	r3, r2, r8, lsr r6
 9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 9bc:	8b040e42 	blhi	1042cc <__bss_end+0xde6cc>
 9c0:	0b0d4201 	bleq	3511cc <__bss_end+0x32b5cc>
 9c4:	420d0d46 	andmi	r0, sp, #4480	@ 0x1180
 9c8:	00000ecb 	andeq	r0, r0, fp, asr #29
 9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 9d0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9d4:	00023654 	andeq	r3, r2, r4, asr r6
 9d8:	00000064 	andeq	r0, r0, r4, rrx
 9dc:	8b080e42 	blhi	2042ec <__bss_end+0x1de6ec>
 9e0:	42018e02 	andmi	r8, r1, #2, 28
 9e4:	6a040b0c 	bvs	10361c <__bss_end+0xdda1c>
 9e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
 9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 9f0:	0000093c 	andeq	r0, r0, ip, lsr r9
 9f4:	000236b8 			@ <UNDEFINED> instruction: 0x000236b8
 9f8:	000000d4 	ldrdeq	r0, [r0], -r4
 9fc:	8b040e42 	blhi	10430c <__bss_end+0xde70c>
 a00:	0b0d4201 	bleq	35120c <__bss_end+0x32b60c>
 a04:	0d0d5e02 	stceq	14, cr5, [sp, #-8]
 a08:	000ecb42 	andeq	ip, lr, r2, asr #22
 a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a10:	0000093c 	andeq	r0, r0, ip, lsr r9
 a14:	0002378c 	andeq	r3, r2, ip, lsl #15
 a18:	000000e0 	andeq	r0, r0, r0, ror #1
 a1c:	8b040e42 	blhi	10432c <__bss_end+0xde72c>
 a20:	0b0d4201 	bleq	35122c <__bss_end+0x32b62c>
 a24:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
 a28:	000ecb42 	andeq	ip, lr, r2, asr #22
 a2c:	0000000c 	andeq	r0, r0, ip
 a30:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 a34:	7c020001 	stcvc	0, cr0, [r2], {1}
 a38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a40:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a44:	0002386c 	andeq	r3, r2, ip, ror #16
 a48:	000000dc 	ldrdeq	r0, [r0], -ip
 a4c:	8b040e42 	blhi	10435c <__bss_end+0xde75c>
 a50:	0b0d4201 	bleq	35125c <__bss_end+0x32b65c>
 a54:	0d0d6202 	sfmeq	f6, 4, [sp, #-8]
 a58:	000ecb42 	andeq	ip, lr, r2, asr #22
 a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a60:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a64:	00023948 	andeq	r3, r2, r8, asr #18
 a68:	00000034 	andeq	r0, r0, r4, lsr r0
 a6c:	8b080e42 	blhi	20437c <__bss_end+0x1de77c>
 a70:	42018e02 	andmi	r8, r1, #2, 28
 a74:	54040b0c 	strpl	r0, [r4], #-2828	@ 0xfffff4f4
 a78:	00080d0c 	andeq	r0, r8, ip, lsl #26
 a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
 a80:	00000a2c 	andeq	r0, r0, ip, lsr #20
 a84:	0002397c 	andeq	r3, r2, ip, ror r9
 a88:	000000b8 	strheq	r0, [r0], -r8
 a8c:	8b040e42 	blhi	10439c <__bss_end+0xde79c>
 a90:	0b0d4201 	bleq	35129c <__bss_end+0x32b69c>
 a94:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
 a98:	000ecb42 	andeq	ip, lr, r2, asr #22
 a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
 aa0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 aa4:	00023a34 	andeq	r3, r2, r4, lsr sl
 aa8:	00000050 	andeq	r0, r0, r0, asr r0
 aac:	8b040e42 	blhi	1043bc <__bss_end+0xde7bc>
 ab0:	0b0d4201 	bleq	3512bc <__bss_end+0x32b6bc>
 ab4:	420d0d5e 	andmi	r0, sp, #6016	@ 0x1780
 ab8:	00000ecb 	andeq	r0, r0, fp, asr #29
 abc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ac0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ac4:	00023a84 	andeq	r3, r2, r4, lsl #21
 ac8:	000001b0 			@ <UNDEFINED> instruction: 0x000001b0
 acc:	8b040e42 	blhi	1043dc <__bss_end+0xde7dc>
 ad0:	0b0d4201 	bleq	3512dc <__bss_end+0x32b6dc>
 ad4:	0d0dce02 	stceq	14, cr12, [sp, #-8]
 ad8:	000ecb42 	andeq	ip, lr, r2, asr #22
 adc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ae0:	00000a2c 	andeq	r0, r0, ip, lsr #20
 ae4:	00023c34 	andeq	r3, r2, r4, lsr ip
 ae8:	000001b8 			@ <UNDEFINED> instruction: 0x000001b8
 aec:	8b040e42 	blhi	1043fc <__bss_end+0xde7fc>
 af0:	0b0d4201 	bleq	3512fc <__bss_end+0x32b6fc>
 af4:	0d0dd202 	sfmeq	f5, 1, [sp, #-8]
 af8:	000ecb42 	andeq	ip, lr, r2, asr #22
 afc:	0000001c 	andeq	r0, r0, ip, lsl r0
 b00:	00000a2c 	andeq	r0, r0, ip, lsr #20
 b04:	00023dec 	andeq	r3, r2, ip, ror #27
 b08:	00000058 	andeq	r0, r0, r8, asr r0
 b0c:	8b040e42 	blhi	10441c <__bss_end+0xde81c>
 b10:	0b0d4201 	bleq	35131c <__bss_end+0x32b71c>
 b14:	420d0d62 	andmi	r0, sp, #6272	@ 0x1880
 b18:	00000ecb 	andeq	r0, r0, fp, asr #29
 b1c:	0000000c 	andeq	r0, r0, ip
 b20:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 b24:	7c020001 	stcvc	0, cr0, [r2], {1}
 b28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b30:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b34:	00023e44 	andeq	r3, r2, r4, asr #28
 b38:	000001c8 	andeq	r0, r0, r8, asr #3
 b3c:	8b080e42 	blhi	20444c <__bss_end+0x1de84c>
 b40:	42018e02 	andmi	r8, r1, #2, 28
 b44:	02040b0c 	andeq	r0, r4, #12, 22	@ 0x3000
 b48:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
 b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b50:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b54:	0002400c 	andeq	r4, r2, ip
 b58:	0000007c 	andeq	r0, r0, ip, ror r0
 b5c:	8b080e42 	blhi	20446c <__bss_end+0x1de86c>
 b60:	42018e02 	andmi	r8, r1, #2, 28
 b64:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
 b68:	00080d0c 	andeq	r0, r8, ip, lsl #26
 b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b70:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b74:	00024088 	andeq	r4, r2, r8, lsl #1
 b78:	00000024 	andeq	r0, r0, r4, lsr #32
 b7c:	8b040e42 	blhi	10448c <__bss_end+0xde88c>
 b80:	0b0d4201 	bleq	35138c <__bss_end+0x32b78c>
 b84:	420d0d48 	andmi	r0, sp, #72, 26	@ 0x1200
 b88:	00000ecb 	andeq	r0, r0, fp, asr #29
 b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
 b90:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b94:	000240ac 	andeq	r4, r2, ip, lsr #1
 b98:	00000018 	andeq	r0, r0, r8, lsl r0
 b9c:	8b040e42 	blhi	1044ac <__bss_end+0xde8ac>
 ba0:	0b0d4201 	bleq	3513ac <__bss_end+0x32b7ac>
 ba4:	420d0d44 	andmi	r0, sp, #68, 26	@ 0x1100
 ba8:	00000ecb 	andeq	r0, r0, fp, asr #29
 bac:	0000001c 	andeq	r0, r0, ip, lsl r0
 bb0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bb4:	000240c4 	andeq	r4, r2, r4, asr #1
 bb8:	000000d8 	ldrdeq	r0, [r0], -r8
 bbc:	8b040e42 	blhi	1044cc <__bss_end+0xde8cc>
 bc0:	0b0d4201 	bleq	3513cc <__bss_end+0x32b7cc>
 bc4:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
 bc8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
 bd0:	00000b1c 	andeq	r0, r0, ip, lsl fp
 bd4:	0002419c 	muleq	r2, ip, r1
 bd8:	00000154 	andeq	r0, r0, r4, asr r1
 bdc:	8b040e42 	blhi	1044ec <__bss_end+0xde8ec>
 be0:	0b0d4201 	bleq	3513ec <__bss_end+0x32b7ec>
 be4:	0d0d9e02 	stceq	14, cr9, [sp, #-8]
 be8:	000ecb42 	andeq	ip, lr, r2, asr #22
 bec:	0000000c 	andeq	r0, r0, ip
 bf0:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 bfc:	0000001c 	andeq	r0, r0, ip, lsl r0
 c00:	00000bec 	andeq	r0, r0, ip, ror #23
 c04:	00024308 	andeq	r4, r2, r8, lsl #6
 c08:	00000050 	andeq	r0, r0, r0, asr r0
 c0c:	8b040e42 	blhi	10451c <__bss_end+0xde91c>
 c10:	0b0d4201 	bleq	35141c <__bss_end+0x32b81c>
 c14:	420d0d5c 	andmi	r0, sp, #92, 26	@ 0x1700
 c18:	00000ecb 	andeq	r0, r0, fp, asr #29
 c1c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c20:	00000bec 	andeq	r0, r0, ip, ror #23
 c24:	00024358 	andeq	r4, r2, r8, asr r3
 c28:	0000004c 	andeq	r0, r0, ip, asr #32
 c2c:	8b080e42 	blhi	20453c <__bss_end+0x1de93c>
 c30:	42018e02 	andmi	r8, r1, #2, 28
 c34:	60040b0c 	andvs	r0, r4, ip, lsl #22
 c38:	00080d0c 	andeq	r0, r8, ip, lsl #26
 c3c:	0000001c 	andeq	r0, r0, ip, lsl r0
 c40:	00000bec 	andeq	r0, r0, ip, ror #23
 c44:	000243a4 	andeq	r4, r2, r4, lsr #7
 c48:	00000018 	andeq	r0, r0, r8, lsl r0
 c4c:	8b040e42 	blhi	10455c <__bss_end+0xde95c>
 c50:	0b0d4201 	bleq	35145c <__bss_end+0x32b85c>
 c54:	420d0d44 	andmi	r0, sp, #68, 26	@ 0x1100
 c58:	00000ecb 	andeq	r0, r0, fp, asr #29
 c5c:	00000018 	andeq	r0, r0, r8, lsl r0
 c60:	00000bec 	andeq	r0, r0, ip, ror #23
 c64:	000243bc 			@ <UNDEFINED> instruction: 0x000243bc
 c68:	00000040 	andeq	r0, r0, r0, asr #32
 c6c:	8b080e42 	blhi	20457c <__bss_end+0x1de97c>
 c70:	42018e02 	andmi	r8, r1, #2, 28
 c74:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c78:	00000018 	andeq	r0, r0, r8, lsl r0
 c7c:	00000bec 	andeq	r0, r0, ip, ror #23
 c80:	000243fc 	strdeq	r4, [r2], -ip
 c84:	00000048 	andeq	r0, r0, r8, asr #32
 c88:	8b080e42 	blhi	204598 <__bss_end+0x1de998>
 c8c:	42018e02 	andmi	r8, r1, #2, 28
 c90:	00040b0c 	andeq	r0, r4, ip, lsl #22
 c94:	00000018 	andeq	r0, r0, r8, lsl r0
 c98:	00000bec 	andeq	r0, r0, ip, ror #23
 c9c:	00024444 	andeq	r4, r2, r4, asr #8
 ca0:	000000ac 	andeq	r0, r0, ip, lsr #1
 ca4:	8b080e42 	blhi	2045b4 <__bss_end+0x1de9b4>
 ca8:	42018e02 	andmi	r8, r1, #2, 28
 cac:	00040b0c 	andeq	r0, r4, ip, lsl #22
 cb0:	0000000c 	andeq	r0, r0, ip
 cb4:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 cb8:	7c020001 	stcvc	0, cr0, [r2], {1}
 cbc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 cc0:	00000028 	andeq	r0, r0, r8, lsr #32
 cc4:	00000cb0 			@ <UNDEFINED> instruction: 0x00000cb0
 cc8:	000244f0 	strdeq	r4, [r2], -r0
 ccc:	000000d0 	ldrdeq	r0, [r0], -r0	@ <UNPREDICTABLE>
 cd0:	840c0e52 	strhi	r0, [ip], #-3666	@ 0xfffff1ae
 cd4:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 cd8:	ce0a5e01 	cdpgt	14, 0, cr5, cr10, cr1, {0}
 cdc:	000ec4c5 	andeq	ip, lr, r5, asr #9
 ce0:	0a4e0b42 	beq	13839f0 <__bss_end+0x135ddf0>
 ce4:	0ec4c5ce 	cdpeq	5, 12, cr12, cr4, cr14, {6}
 ce8:	000b4200 	andeq	r4, fp, r0, lsl #4
 cec:	0000000c 	andeq	r0, r0, ip
 cf0:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 cf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 cf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 cfc:	00000020 	andeq	r0, r0, r0, lsr #32
 d00:	00000cec 	andeq	r0, r0, ip, ror #25
 d04:	000245c0 	andeq	r4, r2, r0, asr #11
 d08:	000000fc 	strdeq	r0, [r0], -ip
 d0c:	840c0e44 	strhi	r0, [ip], #-3652	@ 0xfffff1bc
 d10:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
 d14:	0a6a0201 	beq	1a81520 <__bss_end+0x1a5b920>
 d18:	0ec4c5ce 	cdpeq	5, 12, cr12, cr4, cr14, {6}
 d1c:	000b4200 	andeq	r4, fp, r0, lsl #4
 d20:	0000000c 	andeq	r0, r0, ip
 d24:	ffffffff 			@ <UNDEFINED> instruction: 0xffffffff
 d28:	7c020001 	stcvc	0, cr0, [r2], {1}
 d2c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 d30:	00000028 	andeq	r0, r0, r8, lsr #32
 d34:	00000d20 	andeq	r0, r0, r0, lsr #26
 d38:	000246bc 			@ <UNDEFINED> instruction: 0x000246bc
 d3c:	00000114 	andeq	r0, r0, r4, lsl r1
 d40:	84180e6c 	ldrhi	r0, [r8], #-3692	@ 0xfffff194
 d44:	86058506 	strhi	r8, [r5], -r6, lsl #10
 d48:	88038704 	stmdahi	r3, {r2, r8, r9, sl, pc}
 d4c:	02018e02 	andeq	r8, r1, #2, 28
 d50:	c7c8ce5c 			@ <UNDEFINED> instruction: 0xc7c8ce5c
 d54:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
 d58:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_loclists:

00000000 <.debug_loclists>:
   0:	0000011b 	andeq	r0, r0, fp, lsl r1
   4:	00040005 	andeq	r0, r4, r5
	...
  14:	012c0004 			@ <UNDEFINED> instruction: 0x012c0004
  18:	842c0451 	strthi	r0, [ip], #-1105	@ 0xfffffbaf
  1c:	03a30a01 			@ <UNDEFINED> instruction: 0x03a30a01
  20:	a82601a5 	stmdage	r6!, {r0, r2, r5, r7, r8}
  24:	9f00a82d 	svcls	0x0000a82d
  28:	94018404 	strls	r8, [r1], #-1028	@ 0xfffffbfc
  2c:	04510101 	ldrbeq	r0, [r1], #-257	@ 0xfffffeff
  30:	01d00194 			@ <UNDEFINED> instruction: 0x01d00194
  34:	a503a30a 	strge	sl, [r3, #-778]	@ 0xfffffcf6
  38:	2da82601 	stccs	6, cr2, [r8, #4]!
  3c:	009f00a8 	addseq	r0, pc, r8, lsr #1
  40:	00000000 	andeq	r0, r0, r0
  44:	01000000 	mrseq	r0, (UNDEF: 0)
  48:	00000001 	andeq	r0, r0, r1
  4c:	00040000 	andeq	r0, r4, r0
  50:	04520148 	ldrbeq	r0, [r2], #-328	@ 0xfffffeb8
  54:	54015448 	strpl	r5, [r1], #-1096	@ 0xfffffbb8
  58:	015c5404 	cmpeq	ip, r4, lsl #8
  5c:	64640452 	strbtvs	r0, [r4], #-1106	@ 0xfffffbae
  60:	64045401 	strvs	r5, [r4], #-1025	@ 0xfffffbff
  64:	74030180 	strvc	r0, [r3], #-384	@ 0xfffffe80
  68:	80049f7f 	andhi	r9, r4, pc, ror pc
  6c:	03018401 	movweq	r8, #5121	@ 0x1401
  70:	049f7e72 	ldreq	r7, [pc], #3698	@ 78 <_start-0xff88>
  74:	01d00184 	bicseq	r0, r0, r4, lsl #3
  78:	02005201 	andeq	r5, r0, #268435456	@ 0x10000000
  7c:	01010000 	mrseq	r0, (UNDEF: 1)
  80:	00000000 	andeq	r0, r0, r0
  84:	00000101 	andeq	r0, r0, r1, lsl #2
  88:	04000000 	streq	r0, [r0], #-0
  8c:	50013400 	andpl	r3, r1, r0, lsl #8
  90:	01483404 	cmpeq	r8, r4, lsl #8
  94:	5448045e 	strbpl	r0, [r8], #-1118	@ 0xfffffba2
  98:	54045301 	strpl	r5, [r4], #-769	@ 0xfffffcff
  9c:	045e015c 	ldrbeq	r0, [lr], #-348	@ 0xfffffea4
  a0:	53017064 	movwpl	r7, #4196	@ 0x1064
  a4:	03747004 	cmneq	r4, #4
  a8:	049f0173 	ldreq	r0, [pc], #371	@ b0 <_start-0xff50>
  ac:	01018474 	tsteq	r1, r4, ror r4
  b0:	01840453 	orreq	r0, r4, r3, asr r4
  b4:	500101d0 	ldrdpl	r0, [r1], -r0	@ <UNPREDICTABLE>
  b8:	00000300 	andeq	r0, r0, r0, lsl #6
  bc:	00000100 	andeq	r0, r0, r0, lsl #2
  c0:	04000000 	streq	r0, [r0], #-0
  c4:	51012c00 	tstpl	r1, r0, lsl #24
  c8:	94018404 	strls	r8, [r1], #-1028	@ 0xfffffbfc
  cc:	04510101 	ldrbeq	r0, [r1], #-257	@ 0xfffffeff
  d0:	01a00194 	lsleq	r0, r4	@ <illegal shifter operand>
  d4:	a0045301 	andge	r5, r4, r1, lsl #6
  d8:	0101c001 	tsteq	r1, r1
  dc:	01c00451 	biceq	r0, r0, r1, asr r4
  e0:	530101d0 	movwpl	r0, #4560	@ 0x11d0
  e4:	01010000 	mrseq	r0, (UNDEF: 1)
  e8:	04000000 	streq	r0, [r0], #-0
  ec:	01b40198 			@ <UNDEFINED> instruction: 0x01b40198
  f0:	b4045e01 	strlt	r5, [r4], #-3585	@ 0xfffff1ff
  f4:	0301bc01 	movweq	fp, #7169	@ 0x1c01
  f8:	049f047e 	ldreq	r0, [pc], #1150	@ 100 <_start-0xff00>
  fc:	01d001bc 	ldrheq	r0, [r0, #28]
 100:	00005e01 	andeq	r5, r0, r1, lsl #28
 104:	01010000 	mrseq	r0, (UNDEF: 1)
 108:	01980400 	orrseq	r0, r8, r0, lsl #8
 10c:	530101a0 	movwpl	r0, #4512	@ 0x11a0
 110:	b401a004 	strlt	sl, [r1], #-4
 114:	04510101 	ldrbeq	r0, [r1], #-257	@ 0xfffffeff
 118:	01d001b4 	ldrheq	r0, [r0, #20]
 11c:	c5005301 	strgt	r5, [r0, #-769]	@ 0xfffffcff
 120:	05000001 	streq	r0, [r0, #-1]
 124:	00000400 	andeq	r0, r0, r0, lsl #8
	...
 130:	c4000400 	strgt	r0, [r0], #-1024	@ 0xfffffc00
 134:	04510101 	ldrbeq	r0, [r1], #-257	@ 0xfffffeff
 138:	01e001c4 	mvneq	r0, r4, asr #3
 13c:	a503a30a 	strge	sl, [r3, #-778]	@ 0xfffffcf6
 140:	2da82601 	stccs	6, cr2, [r8, #4]!
 144:	049f00a8 	ldreq	r0, [pc], #168	@ 14c <_start-0xfeb4>
 148:	01fc01e0 	mvnseq	r0, r0, ror #3
 14c:	00005101 	andeq	r5, r0, r1, lsl #2
 150:	00000000 	andeq	r0, r0, r0
 154:	01000000 	mrseq	r0, (UNDEF: 0)
 158:	00000000 	andeq	r0, r0, r0
 15c:	04000000 	streq	r0, [r0], #-0
 160:	52011400 	andpl	r1, r1, #0, 8
 164:	01241404 			@ <UNDEFINED> instruction: 0x01241404
 168:	28240453 	stmdacs	r4!, {r0, r1, r4, r6, sl}
 16c:	9f7f7303 	svcls	0x007f7303
 170:	012c2804 			@ <UNDEFINED> instruction: 0x012c2804
 174:	382c0453 	stmdacc	ip!, {r0, r1, r4, r6, sl}
 178:	9f7f7303 	svcls	0x007f7303
 17c:	9c019804 	stcls	8, cr9, [r1], {4}
 180:	04530101 	ldrbeq	r0, [r3], #-257	@ 0xfffffeff
 184:	01e801e0 	mvneq	r0, r0, ror #3
 188:	e8045301 	stmda	r4, {r0, r8, r9, ip, lr}
 18c:	0101f401 	tsteq	r1, r1, lsl #8	@ <UNPREDICTABLE>
 190:	00020052 	andeq	r0, r2, r2, asr r0
 194:	00020200 	andeq	r0, r2, r0, lsl #4
 198:	01000000 	mrseq	r0, (UNDEF: 0)
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	00040000 	andeq	r0, r4, r0
 1a8:	04500124 	ldrbeq	r0, [r0], #-292	@ 0xfffffedc
 1ac:	5e012c24 	cdppl	12, 0, cr2, cr1, cr4, {1}
 1b0:	03302c04 	teqeq	r0, #4, 24	@ 0x400
 1b4:	049f017e 	ldreq	r0, [pc], #382	@ 1bc <_start-0xfe44>
 1b8:	0101a030 	tsteq	r1, r0, lsr r0
 1bc:	01bc045e 			@ <UNDEFINED> instruction: 0x01bc045e
 1c0:	5e0101cc 	adfpldm	f0, f1, #4.0
 1c4:	d001cc04 	andle	ip, r1, r4, lsl #24
 1c8:	017e0301 	cmneq	lr, r1, lsl #6
 1cc:	01d0049f 			@ <UNDEFINED> instruction: 0x01d0049f
 1d0:	5e0101d8 	mcrpl	1, 0, r0, cr1, cr8, {6}
 1d4:	e401e004 	str	lr, [r1], #-4
 1d8:	045e0101 	ldrbeq	r0, [lr], #-257	@ 0xfffffeff
 1dc:	01f401e8 	mvnseq	r0, r8, ror #3
 1e0:	f4045001 	vst4.8	{d5-d8}, [r4], r1
 1e4:	0101fc01 	tsteq	r1, r1, lsl #24	@ <UNPREDICTABLE>
 1e8:	0001005e 	andeq	r0, r1, lr, asr r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	01bc5004 			@ <UNDEFINED> instruction: 0x01bc5004
 1f4:	9f200803 	svcls	0x00200803
 1f8:	e801e004 	stmda	r1, {r2, sp, lr, pc}
 1fc:	20080301 	andcs	r0, r8, r1, lsl #6
 200:	01f4049f 			@ <UNDEFINED> instruction: 0x01f4049f
 204:	080301fc 	stmdaeq	r3, {r2, r3, r4, r5, r6, r7, r8}
 208:	02009f20 	andeq	r9, r0, #32, 30	@ 0x80
 20c:	00000000 	andeq	r0, r0, r0
 210:	04000000 	streq	r0, [r0], #-0
 214:	710a5040 	tstvc	sl, r0, asr #32
 218:	1aff0800 	bne	fffc2220 <_estack+0xf7fa2220>
 21c:	1e01010a 	adfnes	f0, f1, #2.0
 220:	bc50049f 	cfldrdlt	mvd0, [r0], {159}	@ 0x9f
 224:	045c0101 	ldrbeq	r0, [ip], #-257	@ 0xfffffeff
 228:	01e801e0 	mvneq	r0, r0, ror #3
 22c:	f4045c01 			@ <UNDEFINED> instruction: 0xf4045c01
 230:	0101fc01 	tsteq	r1, r1, lsl #24	@ <UNPREDICTABLE>
 234:	0001005c 	andeq	r0, r1, ip, asr r0
 238:	01010101 	tsteq	r1, r1, lsl #2
 23c:	00010101 	andeq	r0, r1, r1, lsl #2
 240:	00000000 	andeq	r0, r0, r0
 244:	00010100 	andeq	r0, r1, r0, lsl #2
 248:	00000000 	andeq	r0, r0, r0
 24c:	40040000 	andmi	r0, r4, r0
 250:	045e016c 	ldrbeq	r0, [lr], #-364	@ 0xfffffe94
 254:	7203706c 	andvc	r7, r3, #108	@ 0x6c
 258:	70049f74 	andvc	r9, r4, r4, ror pc
 25c:	78720374 	ldmdavc	r2!, {r2, r4, r5, r6, r8, r9}^
 260:	7874049f 	ldmdavc	r4!, {r0, r1, r2, r3, r4, r7, sl}^
 264:	9f7c7203 	svcls	0x007c7203
 268:	01807804 	orreq	r7, r0, r4, lsl #16
 26c:	80045201 	andhi	r5, r4, r1, lsl #4
 270:	03018c01 	movweq	r8, #7169	@ 0x1c01
 274:	049f7072 	ldreq	r7, [pc], #114	@ 27c <_start-0xfd84>
 278:	019c0198 			@ <UNDEFINED> instruction: 0x019c0198
 27c:	ac045201 	sfmge	f5, 4, [r4], {1}
 280:	0101ac01 	tsteq	r1, r1, lsl #24
 284:	01ac0452 			@ <UNDEFINED> instruction: 0x01ac0452
 288:	720301b0 	andvc	r0, r3, #176, 2	@ 0x2c
 28c:	b0049f04 	andlt	r9, r4, r4, lsl #30
 290:	0101bc01 	tsteq	r1, r1, lsl #24
 294:	01e00452 	mvneq	r0, r2, asr r4
 298:	520101e8 	andpl	r0, r1, #232, 2	@ 0x3a
 29c:	fc01f404 	stc2	4, cr15, [r1], {4}
 2a0:	005e0101 	subseq	r0, lr, r1, lsl #2
 2a4:	00000006 	andeq	r0, r0, r6
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	00040000 	andeq	r0, r4, r0
 2b0:	00710620 	rsbseq	r0, r1, r0, lsr #12
 2b4:	9f1aff08 	svcls	0x001aff08
 2b8:	01382004 	teqeq	r8, r4
 2bc:	c4380452 	ldrtgt	r0, [r8], #-1106	@ 0xfffffbae
 2c0:	00710601 	rsbseq	r0, r1, r1, lsl #12
 2c4:	9f1aff08 	svcls	0x001aff08
 2c8:	e001c404 	and	ip, r1, r4, lsl #8
 2cc:	03a30d01 			@ <UNDEFINED> instruction: 0x03a30d01
 2d0:	a82601a5 	stmdage	r6!, {r0, r2, r5, r7, r8}
 2d4:	0800a82d 	stmdaeq	r0, {r0, r2, r3, r5, fp, sp, pc}
 2d8:	049f1aff 	ldreq	r1, [pc], #2815	@ 2e0 <_start-0xfd20>
 2dc:	01fc01e0 	mvnseq	r0, r0, ror #3
 2e0:	08007106 	stmdaeq	r0, {r1, r2, r8, ip, sp, lr}
 2e4:	009f1aff 			@ <UNDEFINED> instruction: 0x009f1aff
 2e8:	00000162 	andeq	r0, r0, r2, ror #2
 2ec:	00040005 	andeq	r0, r4, r5
	...
 2fc:	01280004 			@ <UNDEFINED> instruction: 0x01280004
 300:	3c280451 	cfstrscc	mvf0, [r8], #-324	@ 0xfffffebc
 304:	a503a30a 	strge	sl, [r3, #-778]	@ 0xfffffcf6
 308:	2da82601 	stccs	6, cr2, [r8, #4]!
 30c:	049f00a8 	ldreq	r0, [pc], #168	@ 314 <_start-0xfcec>
 310:	0101a83c 	tsteq	r1, ip, lsr r8
 314:	01a80451 			@ <UNDEFINED> instruction: 0x01a80451
 318:	a30a0294 	movwge	r0, #41620	@ 0xa294
 31c:	2601a503 	strcs	sl, [r1], -r3, lsl #10
 320:	00a82da8 	adceq	r2, r8, r8, lsr #27
 324:	0000009f 	muleq	r0, pc, r0	@ <UNPREDICTABLE>
	...
 330:	01180004 	tsteq	r8, r4
 334:	1c180452 	cfldrsne	mvf0, [r8], {82}	@ 0x52
 338:	a503a30a 	strge	sl, [r3, #-778]	@ 0xfffffcf6
 33c:	2da82602 	stccs	6, cr2, [r8, #8]!
 340:	049f00a8 	ldreq	r0, [pc], #168	@ 348 <_start-0xfcb8>
 344:	5201503c 	andpl	r5, r1, #60	@ 0x3c
 348:	0a6c5004 	beq	1b14360 <__bss_end+0x1aee760>
 34c:	02a503a3 	adceq	r0, r5, #-1946157054	@ 0x8c000002
 350:	a82da826 	stmdage	sp!, {r1, r2, r5, fp, sp, pc}
 354:	e4049f00 	str	r9, [r4], #-3840	@ 0xfffff100
 358:	0101f001 	tsteq	r1, r1	@ <UNPREDICTABLE>
 35c:	00020052 	andeq	r0, r2, r2, asr r0
	...
 368:	011c0004 	tsteq	ip, r4
 36c:	443c0450 	ldrtmi	r0, [ip], #-1104	@ 0xfffffbb0
 370:	44045001 	strmi	r5, [r4], #-1
 374:	0453014c 	ldrbeq	r0, [r3], #-332	@ 0xfffffeb4
 378:	0101e44c 	tsteq	r1, ip, asr #8
 37c:	01e40450 	mvneq	r0, r0, asr r4
 380:	530101f4 	movwpl	r0, #4596	@ 0x11f4
 384:	01010300 	mrseq	r0, SP_irq
 388:	00000000 	andeq	r0, r0, r0
 38c:	01010000 	mrseq	r0, (UNDEF: 1)
 390:	04000000 	streq	r0, [r0], #-0
 394:	51012800 	tstpl	r1, r0, lsl #16
 398:	032c2804 			@ <UNDEFINED> instruction: 0x032c2804
 39c:	049f0171 	ldreq	r0, [pc], #369	@ 3a4 <_start-0xfc5c>
 3a0:	0101a82c 	tsteq	r1, ip, lsr #16
 3a4:	01a80451 			@ <UNDEFINED> instruction: 0x01a80451
 3a8:	a30a01e4 	movwge	r0, #41444	@ 0xa1e4
 3ac:	2601a503 	strcs	sl, [r1], -r3, lsl #10
 3b0:	00a82da8 	adceq	r2, r8, r8, lsr #27
 3b4:	01e4049f 			@ <UNDEFINED> instruction: 0x01e4049f
 3b8:	510101fc 	strdpl	r0, [r1, -ip]
 3bc:	8001fc04 	andhi	pc, r1, r4, lsl #24
 3c0:	01710302 	cmneq	r1, r2, lsl #6
 3c4:	0280049f 	addeq	r0, r0, #-1627389952	@ 0x9f000000
 3c8:	51010294 			@ <UNDEFINED> instruction: 0x51010294
 3cc:	00000100 	andeq	r0, r0, r0, lsl #2
 3d0:	00000101 	andeq	r0, r0, r1, lsl #2
 3d4:	746c0400 	strbtvc	r0, [ip], #-1024	@ 0xfffffc00
 3d8:	9f047c03 	svcls	0x00047c03
 3dc:	01807404 	orreq	r7, r0, r4, lsl #8
 3e0:	9f747c03 	svcls	0x00747c03
 3e4:	a0019004 	andge	r9, r1, r4
 3e8:	045c0101 	ldrbeq	r0, [ip], #-257	@ 0xfffffeff
 3ec:	01c401a8 	biceq	r0, r4, r8, lsr #3
 3f0:	01005301 	tsteq	r0, r1, lsl #6
 3f4:	02020101 	andeq	r0, r2, #1073741824	@ 0x40000000
 3f8:	00000303 	andeq	r0, r0, r3, lsl #6
 3fc:	00000000 	andeq	r0, r0, r0
 400:	00000101 	andeq	r0, r0, r1, lsl #2
 404:	806c0400 	rsbhi	r0, ip, r0, lsl #8
 408:	747e0301 	ldrbtvc	r0, [lr], #-769	@ 0xfffffcff
 40c:	0180049f 			@ <UNDEFINED> instruction: 0x0180049f
 410:	7e030180 	adfvcd	f0, f3, f0
 414:	80049f78 	andhi	r9, r4, r8, ror pc
 418:	03018001 	movweq	r8, #4097	@ 0x1001
 41c:	049f7c7e 	ldreq	r7, [pc], #3198	@ 424 <_start-0xfbdc>
 420:	01940180 	orrseq	r0, r4, r0, lsl #3
 424:	94045e01 	strls	r5, [r4], #-3585	@ 0xfffff1ff
 428:	0301a801 	movweq	sl, #6145	@ 0x1801
 42c:	049f707e 	ldreq	r7, [pc], #126	@ 434 <_start-0xfbcc>
 430:	01c401a8 	biceq	r0, r4, r8, lsr #3
 434:	c4045101 	strgt	r5, [r4], #-257	@ 0xfffffeff
 438:	0101c401 	tsteq	r1, r1, lsl #8
 43c:	01c40454 	biceq	r0, r4, r4, asr r4
 440:	740301c8 	strvc	r0, [r3], #-456	@ 0xfffffe38
 444:	c8049f04 	stmdagt	r4, {r2, r8, r9, sl, fp, ip, pc}
 448:	0101e401 	tsteq	r1, r1, lsl #8
 44c:	Address 0x44c is out of bounds.

