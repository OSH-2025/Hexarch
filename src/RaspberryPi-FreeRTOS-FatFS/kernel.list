
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00010000 <_start>:
   10000:	e59ff018 	ldr	pc, [pc, #24]	; 10020 <reset_handler>
   10004:	e59ff018 	ldr	pc, [pc, #24]	; 10024 <undefined_handler>
   10008:	e59ff018 	ldr	pc, [pc, #24]	; 10028 <swi_handler>
   1000c:	e59ff018 	ldr	pc, [pc, #24]	; 1002c <prefetch_handler>
   10010:	e59ff018 	ldr	pc, [pc, #24]	; 10030 <data_handler>
   10014:	e59ff018 	ldr	pc, [pc, #24]	; 10034 <unused_handler>
   10018:	e59ff018 	ldr	pc, [pc, #24]	; 10038 <irq_handler>
   1001c:	e59ff018 	ldr	pc, [pc, #24]	; 1003c <fiq_handler>

00010020 <reset_handler>:
   10020:	00010040 	andeq	r0, r1, r0, asr #32

00010024 <undefined_handler>:
   10024:	00024234 	andeq	r4, r2, r4, lsr r2

00010028 <swi_handler>:
   10028:	000203dc 	ldrdeq	r0, [r2], -ip

0001002c <prefetch_handler>:
   1002c:	00024238 	andeq	r4, r2, r8, lsr r2

00010030 <data_handler>:
   10030:	0002423c 	andeq	r4, r2, ip, lsr r2

00010034 <unused_handler>:
   10034:	00024240 	andeq	r4, r2, r0, asr #4

00010038 <irq_handler>:
   10038:	00020490 	muleq	r2, r0, r4

0001003c <fiq_handler>:
   1003c:	00024244 	andeq	r4, r2, r4, asr #4

00010040 <reset>:
   10040:	e3a00801 	mov	r0, #65536	; 0x10000
   10044:	e3a01000 	mov	r1, #0
   10048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
   1004c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10058:	e3a000d2 	mov	r0, #210	; 0xd2
   1005c:	e121f000 	msr	CPSR_c, r0
   10060:	e3a0d902 	mov	sp, #32768	; 0x8000
   10064:	e3a000d1 	mov	r0, #209	; 0xd1
   10068:	e121f000 	msr	CPSR_c, r0
   1006c:	e3a0d901 	mov	sp, #16384	; 0x4000
   10070:	e3a000d3 	mov	r0, #211	; 0xd3
   10074:	e121f000 	msr	CPSR_c, r0
   10078:	e3a0d302 	mov	sp, #134217728	; 0x8000000
   1007c:	e59f0018 	ldr	r0, [pc, #24]	; 1009c <zero_loop+0x14>
   10080:	e59f1018 	ldr	r1, [pc, #24]	; 100a0 <zero_loop+0x18>
   10084:	e3a02000 	mov	r2, #0

00010088 <zero_loop>:
   10088:	e1500001 	cmp	r0, r1
   1008c:	b4802004 	strlt	r2, [r0], #4
   10090:	bafffffc 	blt	10088 <zero_loop>
   10094:	eb004d66 	bl	23634 <irqBlock>
   10098:	ea00526b 	b	24a4c <main>
   1009c:	0002c250 	andeq	ip, r2, r0, asr r2
   100a0:	0012d660 	andseq	sp, r2, r0, ror #12

Disassembly of section .text:

00020000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   20000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20004:	e28db000 	add	fp, sp, #0
   20008:	e24dd01c 	sub	sp, sp, #28
   2000c:	e50b0010 	str	r0, [fp, #-16]
   20010:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   20014:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   20018:	e51b3010 	ldr	r3, [fp, #-16]
   2001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   20020:	e51b3010 	ldr	r3, [fp, #-16]
   20024:	e2433004 	sub	r3, r3, #4
   20028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   2002c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20030:	e2832004 	add	r2, r3, #4
   20034:	e51b3010 	ldr	r3, [fp, #-16]
   20038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   2003c:	e51b3010 	ldr	r3, [fp, #-16]
   20040:	e2433004 	sub	r3, r3, #4
   20044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   20048:	e51b3010 	ldr	r3, [fp, #-16]
   2004c:	e59f21b8 	ldr	r2, [pc, #440]	; 2020c <pxPortInitialiseStack+0x20c>
   20050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20054:	e51b3010 	ldr	r3, [fp, #-16]
   20058:	e2433004 	sub	r3, r3, #4
   2005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   20060:	e51b2008 	ldr	r2, [fp, #-8]
   20064:	e51b3010 	ldr	r3, [fp, #-16]
   20068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   2006c:	e51b3010 	ldr	r3, [fp, #-16]
   20070:	e2433004 	sub	r3, r3, #4
   20074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   20078:	e51b3010 	ldr	r3, [fp, #-16]
   2007c:	e59f218c 	ldr	r2, [pc, #396]	; 20210 <pxPortInitialiseStack+0x210>
   20080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20084:	e51b3010 	ldr	r3, [fp, #-16]
   20088:	e2433004 	sub	r3, r3, #4
   2008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   20090:	e51b3010 	ldr	r3, [fp, #-16]
   20094:	e59f2178 	ldr	r2, [pc, #376]	; 20214 <pxPortInitialiseStack+0x214>
   20098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2009c:	e51b3010 	ldr	r3, [fp, #-16]
   200a0:	e2433004 	sub	r3, r3, #4
   200a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   200a8:	e51b3010 	ldr	r3, [fp, #-16]
   200ac:	e59f2164 	ldr	r2, [pc, #356]	; 20218 <pxPortInitialiseStack+0x218>
   200b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200b4:	e51b3010 	ldr	r3, [fp, #-16]
   200b8:	e2433004 	sub	r3, r3, #4
   200bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   200c0:	e51b3010 	ldr	r3, [fp, #-16]
   200c4:	e59f2150 	ldr	r2, [pc, #336]	; 2021c <pxPortInitialiseStack+0x21c>
   200c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200cc:	e51b3010 	ldr	r3, [fp, #-16]
   200d0:	e2433004 	sub	r3, r3, #4
   200d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   200d8:	e51b3010 	ldr	r3, [fp, #-16]
   200dc:	e59f213c 	ldr	r2, [pc, #316]	; 20220 <pxPortInitialiseStack+0x220>
   200e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200e4:	e51b3010 	ldr	r3, [fp, #-16]
   200e8:	e2433004 	sub	r3, r3, #4
   200ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   200f0:	e51b3010 	ldr	r3, [fp, #-16]
   200f4:	e59f2128 	ldr	r2, [pc, #296]	; 20224 <pxPortInitialiseStack+0x224>
   200f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200fc:	e51b3010 	ldr	r3, [fp, #-16]
   20100:	e2433004 	sub	r3, r3, #4
   20104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   20108:	e51b3010 	ldr	r3, [fp, #-16]
   2010c:	e59f2114 	ldr	r2, [pc, #276]	; 20228 <pxPortInitialiseStack+0x228>
   20110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20114:	e51b3010 	ldr	r3, [fp, #-16]
   20118:	e2433004 	sub	r3, r3, #4
   2011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   20120:	e51b3010 	ldr	r3, [fp, #-16]
   20124:	e59f2100 	ldr	r2, [pc, #256]	; 2022c <pxPortInitialiseStack+0x22c>
   20128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2012c:	e51b3010 	ldr	r3, [fp, #-16]
   20130:	e2433004 	sub	r3, r3, #4
   20134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   20138:	e51b3010 	ldr	r3, [fp, #-16]
   2013c:	e59f20ec 	ldr	r2, [pc, #236]	; 20230 <pxPortInitialiseStack+0x230>
   20140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20144:	e51b3010 	ldr	r3, [fp, #-16]
   20148:	e2433004 	sub	r3, r3, #4
   2014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   20150:	e51b3010 	ldr	r3, [fp, #-16]
   20154:	e59f20d8 	ldr	r2, [pc, #216]	; 20234 <pxPortInitialiseStack+0x234>
   20158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2015c:	e51b3010 	ldr	r3, [fp, #-16]
   20160:	e2433004 	sub	r3, r3, #4
   20164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   20168:	e51b3010 	ldr	r3, [fp, #-16]
   2016c:	e59f20c4 	ldr	r2, [pc, #196]	; 20238 <pxPortInitialiseStack+0x238>
   20170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20174:	e51b3010 	ldr	r3, [fp, #-16]
   20178:	e2433004 	sub	r3, r3, #4
   2017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   20180:	e51b3010 	ldr	r3, [fp, #-16]
   20184:	e59f20b0 	ldr	r2, [pc, #176]	; 2023c <pxPortInitialiseStack+0x23c>
   20188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2018c:	e51b3010 	ldr	r3, [fp, #-16]
   20190:	e2433004 	sub	r3, r3, #4
   20194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   20198:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2019c:	e51b3010 	ldr	r3, [fp, #-16]
   201a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   201a4:	e51b3010 	ldr	r3, [fp, #-16]
   201a8:	e2433004 	sub	r3, r3, #4
   201ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   201b0:	e51b3010 	ldr	r3, [fp, #-16]
   201b4:	e3a0201f 	mov	r2, #31
   201b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   201bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   201c0:	e2033001 	and	r3, r3, #1
   201c4:	e3530000 	cmp	r3, #0
   201c8:	0a000004 	beq	201e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   201cc:	e51b3010 	ldr	r3, [fp, #-16]
   201d0:	e5933000 	ldr	r3, [r3]
   201d4:	e3832020 	orr	r2, r3, #32
   201d8:	e51b3010 	ldr	r3, [fp, #-16]
   201dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   201e0:	e51b3010 	ldr	r3, [fp, #-16]
   201e4:	e2433004 	sub	r3, r3, #4
   201e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   201ec:	e51b3010 	ldr	r3, [fp, #-16]
   201f0:	e3a02000 	mov	r2, #0
   201f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   201f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   201fc:	e1a00003 	mov	r0, r3
   20200:	e28bd000 	add	sp, fp, #0
   20204:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20208:	e12fff1e 	bx	lr
   2020c:	aaaaaaaa 	bge	feacacbc <_estack+0xf6aaacbc>
   20210:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
   20214:	11111111 	tstne	r1, r1, lsl r1
   20218:	10101010 	andsne	r1, r0, r0, lsl r0
   2021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   20220:	08080808 	stmdaeq	r8, {r3, fp}
   20224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   20228:	06060606 	streq	r0, [r6], -r6, lsl #12
   2022c:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
   20230:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
   20234:	03030303 	movweq	r0, #13059	; 0x3303
   20238:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
   2023c:	01010101 	tsteq	r1, r1, lsl #2

00020240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   20240:	e92d4800 	push	{fp, lr}
   20244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   20248:	eb000017 	bl	202ac <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   2024c:	eb00003c 	bl	20344 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   20250:	e3a03000 	mov	r3, #0
}
   20254:	e1a00003 	mov	r0, r3
   20258:	e8bd8800 	pop	{fp, pc}

0002025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   2025c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   20264:	e320f000 	nop	{0}
   20268:	e28bd000 	add	sp, fp, #0
   2026c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20270:	e12fff1e 	bx	lr

00020274 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR (unsigned int nIRQ, void *pParam)
{
   20274:	e92d4800 	push	{fp, lr}
   20278:	e28db004 	add	fp, sp, #4
   2027c:	e24dd008 	sub	sp, sp, #8
   20280:	e50b0008 	str	r0, [fp, #-8]
   20284:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   20288:	eb0009af 	bl	2294c <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   2028c:	eb000a82 	bl	22c9c <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   20290:	e59f3010 	ldr	r3, [pc, #16]	; 202a8 <vTickISR+0x34>
   20294:	e3a02000 	mov	r2, #0
   20298:	e583200c 	str	r2, [r3, #12]
}
   2029c:	e320f000 	nop	{0}
   202a0:	e24bd004 	sub	sp, fp, #4
   202a4:	e8bd8800 	pop	{fp, pc}
   202a8:	2000b400 	andcs	fp, r0, r0, lsl #8

000202ac <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   202ac:	e92d4800 	push	{fp, lr}
   202b0:	e28db004 	add	fp, sp, #4
   202b4:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   202b8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   202bc:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	irqBlock();
   202c0:	eb000cdb 	bl	23634 <irqBlock>

	pRegs->CTL = 0x003E0000;
   202c4:	e59f3068 	ldr	r3, [pc, #104]	; 20334 <prvSetupTimerInterrupt+0x88>
   202c8:	e3a0283e 	mov	r2, #4063232	; 0x3e0000
   202cc:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   202d0:	e59f305c 	ldr	r3, [pc, #92]	; 20334 <prvSetupTimerInterrupt+0x88>
   202d4:	e59f205c 	ldr	r2, [pc, #92]	; 20338 <prvSetupTimerInterrupt+0x8c>
   202d8:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   202dc:	e59f3050 	ldr	r3, [pc, #80]	; 20334 <prvSetupTimerInterrupt+0x88>
   202e0:	e59f2050 	ldr	r2, [pc, #80]	; 20338 <prvSetupTimerInterrupt+0x8c>
   202e4:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   202e8:	e59f3044 	ldr	r3, [pc, #68]	; 20334 <prvSetupTimerInterrupt+0x88>
   202ec:	e3a020f9 	mov	r2, #249	; 0xf9
   202f0:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   202f4:	e59f3038 	ldr	r3, [pc, #56]	; 20334 <prvSetupTimerInterrupt+0x88>
   202f8:	e3a02000 	mov	r2, #0
   202fc:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   20300:	e59f302c 	ldr	r3, [pc, #44]	; 20334 <prvSetupTimerInterrupt+0x88>
   20304:	e59f2030 	ldr	r2, [pc, #48]	; 2033c <prvSetupTimerInterrupt+0x90>
   20308:	e5832008 	str	r2, [r3, #8]

	irqRegister(64, vTickISR, NULL);
   2030c:	e3a02000 	mov	r2, #0
   20310:	e59f1028 	ldr	r1, [pc, #40]	; 20340 <prvSetupTimerInterrupt+0x94>
   20314:	e3a00040 	mov	r0, #64	; 0x40
   20318:	eb000ccc 	bl	23650 <irqRegister>

	irqEnable(64);
   2031c:	e3a00040 	mov	r0, #64	; 0x40
   20320:	eb000ce3 	bl	236b4 <irqEnable>

	irqUnblock();
   20324:	eb000cbb 	bl	23618 <irqUnblock>
}
   20328:	e320f000 	nop	{0}
   2032c:	e24bd004 	sub	sp, fp, #4
   20330:	e8bd8800 	pop	{fp, pc}
   20334:	2000b400 	andcs	fp, r0, r0, lsl #8
   20338:	000003e7 	andeq	r0, r0, r7, ror #7
   2033c:	003e00a2 	eorseq	r0, lr, r2, lsr #1
   20340:	00020274 	andeq	r0, r2, r4, ror r2

00020344 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   20344:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20348:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   2034c:	e59f307c 	ldr	r3, [pc, #124]	; 203d0 <vPortISRStartFirstTask+0x8c>
   20350:	e5933000 	ldr	r3, [r3]
   20354:	e2833001 	add	r3, r3, #1
   20358:	e59f2070 	ldr	r2, [pc, #112]	; 203d0 <vPortISRStartFirstTask+0x8c>
   2035c:	e5823000 	str	r3, [r2]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   20360:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   20364:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   20368:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   2036c:	e59f0274 	ldr	r0, [pc, #628]	; 205e8 <vPortExitCritical+0x64>
   20370:	e5900000 	ldr	r0, [r0]
   20374:	e590e000 	ldr	lr, [r0]
   20378:	e59f026c 	ldr	r0, [pc, #620]	; 205ec <vPortExitCritical+0x68>
   2037c:	e8be0002 	ldm	lr!, {r1}
   20380:	e5801000 	str	r1, [r0]
   20384:	e8be0001 	ldm	lr!, {r0}
   20388:	e16ff000 	msr	SPSR_fsxc, r0
   2038c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20390:	e320f000 	nop	{0}
   20394:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   20398:	e25ef004 	subs	pc, lr, #4
   2039c:	e320f000 	nop	{0}
   203a0:	e320f000 	nop	{0}
   203a4:	e59f3028 	ldr	r3, [pc, #40]	; 203d4 <vPortISRStartFirstTask+0x90>
   203a8:	e5933000 	ldr	r3, [r3]
   203ac:	e59f3024 	ldr	r3, [pc, #36]	; 203d8 <vPortISRStartFirstTask+0x94>
   203b0:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   203b4:	e8bd4000 	ldmfd	sp!, {lr}
   203b8:	e24ee004 	sub	lr, lr, #4
   203bc:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   203c0:	e320f000 	nop	{0}
   203c4:	e28bd000 	add	sp, fp, #0
   203c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   203cc:	e12fff1e 	bx	lr
   203d0:	0002c250 	andeq	ip, r2, r0, asr r2
   203d4:	0002c23c 	andeq	ip, r2, ip, lsr r2
   203d8:	0002c2d4 	ldrdeq	ip, [r2], -r4

000203dc <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   203dc:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   203e0:	e92d0001 	stmfd	sp!, {r0}
   203e4:	e94d2000 	stmdb	sp, {sp}^
   203e8:	e24dd004 	sub	sp, sp, #4
   203ec:	e8bd0001 	ldmfd	sp!, {r0}
   203f0:	e9204000 	stmdb	r0!, {lr}
   203f4:	e1a0e000 	mov	lr, r0
   203f8:	e8bd0001 	ldmfd	sp!, {r0}
   203fc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20400:	e320f000 	nop	{0}
   20404:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   20408:	e14f0000 	mrs	r0, SPSR
   2040c:	e92e0001 	stmdb	lr!, {r0}
   20410:	e59f01d4 	ldr	r0, [pc, #468]	; 205ec <vPortExitCritical+0x68>
   20414:	e5900000 	ldr	r0, [r0]
   20418:	e92e0001 	stmdb	lr!, {r0}
   2041c:	e59f01c4 	ldr	r0, [pc, #452]	; 205e8 <vPortExitCritical+0x64>
   20420:	e5900000 	ldr	r0, [r0]
   20424:	e580e000 	str	lr, [r0]
   20428:	e59f3058 	ldr	r3, [pc, #88]	; 20488 <vPortYieldProcessor+0xac>
   2042c:	e5933000 	ldr	r3, [r3]
   20430:	e59f3054 	ldr	r3, [pc, #84]	; 2048c <vPortYieldProcessor+0xb0>
   20434:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   20438:	eb000a17 	bl	22c9c <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   2043c:	e59f01a4 	ldr	r0, [pc, #420]	; 205e8 <vPortExitCritical+0x64>
   20440:	e5900000 	ldr	r0, [r0]
   20444:	e590e000 	ldr	lr, [r0]
   20448:	e59f019c 	ldr	r0, [pc, #412]	; 205ec <vPortExitCritical+0x68>
   2044c:	e8be0002 	ldm	lr!, {r1}
   20450:	e5801000 	str	r1, [r0]
   20454:	e8be0001 	ldm	lr!, {r0}
   20458:	e16ff000 	msr	SPSR_fsxc, r0
   2045c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20460:	e320f000 	nop	{0}
   20464:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   20468:	e25ef004 	subs	pc, lr, #4
   2046c:	e320f000 	nop	{0}
   20470:	e320f000 	nop	{0}
   20474:	e59f300c 	ldr	r3, [pc, #12]	; 20488 <vPortYieldProcessor+0xac>
   20478:	e5933000 	ldr	r3, [r3]
   2047c:	e59f3008 	ldr	r3, [pc, #8]	; 2048c <vPortYieldProcessor+0xb0>
   20480:	e5933000 	ldr	r3, [r3]
}
   20484:	e320f000 	nop	{0}
   20488:	0002c23c 	andeq	ip, r2, ip, lsr r2
   2048c:	0002c2d4 	ldrdeq	ip, [r2], -r4

00020490 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   20490:	e92d0001 	stmfd	sp!, {r0}
   20494:	e94d2000 	stmdb	sp, {sp}^
   20498:	e24dd004 	sub	sp, sp, #4
   2049c:	e8bd0001 	ldmfd	sp!, {r0}
   204a0:	e9204000 	stmdb	r0!, {lr}
   204a4:	e1a0e000 	mov	lr, r0
   204a8:	e8bd0001 	ldmfd	sp!, {r0}
   204ac:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   204b0:	e320f000 	nop	{0}
   204b4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   204b8:	e14f0000 	mrs	r0, SPSR
   204bc:	e92e0001 	stmdb	lr!, {r0}
   204c0:	e59f0124 	ldr	r0, [pc, #292]	; 205ec <vPortExitCritical+0x68>
   204c4:	e5900000 	ldr	r0, [r0]
   204c8:	e92e0001 	stmdb	lr!, {r0}
   204cc:	e59f0114 	ldr	r0, [pc, #276]	; 205e8 <vPortExitCritical+0x64>
   204d0:	e5900000 	ldr	r0, [r0]
   204d4:	e580e000 	str	lr, [r0]
   204d8:	e59f3058 	ldr	r3, [pc, #88]	; 20538 <vFreeRTOS_ISR+0xa8>
   204dc:	e5933000 	ldr	r3, [r3]
   204e0:	e59f3054 	ldr	r3, [pc, #84]	; 2053c <vFreeRTOS_ISR+0xac>
   204e4:	e5933000 	ldr	r3, [r3]
	irqHandler();
   204e8:	eb000c22 	bl	23578 <irqHandler>
	portRESTORE_CONTEXT();	
   204ec:	e59f00f4 	ldr	r0, [pc, #244]	; 205e8 <vPortExitCritical+0x64>
   204f0:	e5900000 	ldr	r0, [r0]
   204f4:	e590e000 	ldr	lr, [r0]
   204f8:	e59f00ec 	ldr	r0, [pc, #236]	; 205ec <vPortExitCritical+0x68>
   204fc:	e8be0002 	ldm	lr!, {r1}
   20500:	e5801000 	str	r1, [r0]
   20504:	e8be0001 	ldm	lr!, {r0}
   20508:	e16ff000 	msr	SPSR_fsxc, r0
   2050c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20510:	e320f000 	nop	{0}
   20514:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   20518:	e25ef004 	subs	pc, lr, #4
   2051c:	e320f000 	nop	{0}
   20520:	e320f000 	nop	{0}
   20524:	e59f300c 	ldr	r3, [pc, #12]	; 20538 <vFreeRTOS_ISR+0xa8>
   20528:	e5933000 	ldr	r3, [r3]
   2052c:	e59f3008 	ldr	r3, [pc, #8]	; 2053c <vFreeRTOS_ISR+0xac>
   20530:	e5933000 	ldr	r3, [r3]
}
   20534:	e320f000 	nop	{0}
   20538:	0002c23c 	andeq	ip, r2, ip, lsr r2
   2053c:	0002c2d4 	ldrdeq	ip, [r2], -r4

00020540 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   20540:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20544:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   20548:	e92d0001 	stmfd	sp!, {r0}
   2054c:	e10f0000 	mrs	r0, CPSR
   20550:	e38000c0 	orr	r0, r0, #192	; 0xc0
   20554:	e129f000 	msr	CPSR_fc, r0
   20558:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   2055c:	e59f301c 	ldr	r3, [pc, #28]	; 20580 <vPortEnterCritical+0x40>
   20560:	e5933000 	ldr	r3, [r3]
   20564:	e2833001 	add	r3, r3, #1
   20568:	e59f2010 	ldr	r2, [pc, #16]	; 20580 <vPortEnterCritical+0x40>
   2056c:	e5823000 	str	r3, [r2]
}
   20570:	e320f000 	nop	{0}
   20574:	e28bd000 	add	sp, fp, #0
   20578:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2057c:	e12fff1e 	bx	lr
   20580:	0002c23c 	andeq	ip, r2, ip, lsr r2

00020584 <vPortExitCritical>:

void vPortExitCritical( void )
{
   20584:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20588:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   2058c:	e59f3050 	ldr	r3, [pc, #80]	; 205e4 <vPortExitCritical+0x60>
   20590:	e5933000 	ldr	r3, [r3]
   20594:	e3530000 	cmp	r3, #0
   20598:	0a00000d 	beq	205d4 <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   2059c:	e59f3040 	ldr	r3, [pc, #64]	; 205e4 <vPortExitCritical+0x60>
   205a0:	e5933000 	ldr	r3, [r3]
   205a4:	e2433001 	sub	r3, r3, #1
   205a8:	e59f2034 	ldr	r2, [pc, #52]	; 205e4 <vPortExitCritical+0x60>
   205ac:	e5823000 	str	r3, [r2]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   205b0:	e59f302c 	ldr	r3, [pc, #44]	; 205e4 <vPortExitCritical+0x60>
   205b4:	e5933000 	ldr	r3, [r3]
   205b8:	e3530000 	cmp	r3, #0
   205bc:	1a000004 	bne	205d4 <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   205c0:	e92d0001 	stmfd	sp!, {r0}
   205c4:	e10f0000 	mrs	r0, CPSR
   205c8:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   205cc:	e129f000 	msr	CPSR_fc, r0
   205d0:	e8bd0001 	ldmfd	sp!, {r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   205d4:	e320f000 	nop	{0}
   205d8:	e28bd000 	add	sp, fp, #0
   205dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   205e0:	e12fff1e 	bx	lr
   205e4:	0002c23c 	andeq	ip, r2, ip, lsr r2
   205e8:	0002c2d4 	ldrdeq	ip, [r2], -r4
   205ec:	0002c23c 	andeq	ip, r2, ip, lsr r2

000205f0 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   205f0:	e92d4800 	push	{fp, lr}
   205f4:	e28db004 	add	fp, sp, #4
   205f8:	e24dd018 	sub	sp, sp, #24
   205fc:	e50b0010 	str	r0, [fp, #-16]
   20600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   20604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   20608:	e3a00038 	mov	r0, #56	; 0x38
   2060c:	eb000ddd 	bl	23d88 <pvPortMalloc>
   20610:	e50b000c 	str	r0, [fp, #-12]
	if( pxCoRoutine )
   20614:	e51b300c 	ldr	r3, [fp, #-12]
   20618:	e3530000 	cmp	r3, #0
   2061c:	0a000044 	beq	20734 <xCoRoutineCreate+0x144>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   20620:	e59f3124 	ldr	r3, [pc, #292]	; 2074c <xCoRoutineCreate+0x15c>
   20624:	e5933000 	ldr	r3, [r3]
   20628:	e3530000 	cmp	r3, #0
   2062c:	1a000003 	bne	20640 <xCoRoutineCreate+0x50>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   20630:	e59f2114 	ldr	r2, [pc, #276]	; 2074c <xCoRoutineCreate+0x15c>
   20634:	e51b300c 	ldr	r3, [fp, #-12]
   20638:	e5823000 	str	r3, [r2]
			prvInitialiseCoRoutineLists();
   2063c:	eb000177 	bl	20c20 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   20640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20644:	e3530001 	cmp	r3, #1
   20648:	9a000001 	bls	20654 <xCoRoutineCreate+0x64>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   2064c:	e3a03001 	mov	r3, #1
   20650:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   20654:	e51b300c 	ldr	r3, [fp, #-12]
   20658:	e3a02000 	mov	r2, #0
   2065c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
   20660:	e51b300c 	ldr	r3, [fp, #-12]
   20664:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20668:	e583202c 	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   2066c:	e51b300c 	ldr	r3, [fp, #-12]
   20670:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   20674:	e5832030 	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   20678:	e51b300c 	ldr	r3, [fp, #-12]
   2067c:	e51b2010 	ldr	r2, [fp, #-16]
   20680:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   20684:	e51b300c 	ldr	r3, [fp, #-12]
   20688:	e2833004 	add	r3, r3, #4
   2068c:	e1a00003 	mov	r0, r3
   20690:	eb0001c9 	bl	20dbc <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   20694:	e51b300c 	ldr	r3, [fp, #-12]
   20698:	e2833018 	add	r3, r3, #24
   2069c:	e1a00003 	mov	r0, r3
   206a0:	eb0001c5 	bl	20dbc <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   206a4:	e51b300c 	ldr	r3, [fp, #-12]
   206a8:	e51b200c 	ldr	r2, [fp, #-12]
   206ac:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   206b0:	e51b300c 	ldr	r3, [fp, #-12]
   206b4:	e51b200c 	ldr	r2, [fp, #-12]
   206b8:	e5832024 	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   206bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   206c0:	e2632005 	rsb	r2, r3, #5
   206c4:	e51b300c 	ldr	r3, [fp, #-12]
   206c8:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   206cc:	e51b300c 	ldr	r3, [fp, #-12]
   206d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   206d4:	e59f3074 	ldr	r3, [pc, #116]	; 20750 <xCoRoutineCreate+0x160>
   206d8:	e5933000 	ldr	r3, [r3]
   206dc:	e1520003 	cmp	r2, r3
   206e0:	9a000003 	bls	206f4 <xCoRoutineCreate+0x104>
   206e4:	e51b300c 	ldr	r3, [fp, #-12]
   206e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   206ec:	e59f205c 	ldr	r2, [pc, #92]	; 20750 <xCoRoutineCreate+0x160>
   206f0:	e5823000 	str	r3, [r2]
   206f4:	e51b300c 	ldr	r3, [fp, #-12]
   206f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   206fc:	e1a03002 	mov	r3, r2
   20700:	e1a03103 	lsl	r3, r3, #2
   20704:	e0833002 	add	r3, r3, r2
   20708:	e1a03103 	lsl	r3, r3, #2
   2070c:	e59f2040 	ldr	r2, [pc, #64]	; 20754 <xCoRoutineCreate+0x164>
   20710:	e0832002 	add	r2, r3, r2
   20714:	e51b300c 	ldr	r3, [fp, #-12]
   20718:	e2833004 	add	r3, r3, #4
   2071c:	e1a01003 	mov	r1, r3
   20720:	e1a00002 	mov	r0, r2
   20724:	eb0001af 	bl	20de8 <vListInsertEnd>

		xReturn = pdPASS;
   20728:	e3a03001 	mov	r3, #1
   2072c:	e50b3008 	str	r3, [fp, #-8]
   20730:	ea000001 	b	2073c <xCoRoutineCreate+0x14c>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   20734:	e3e03000 	mvn	r3, #0
   20738:	e50b3008 	str	r3, [fp, #-8]
	}
	
	return xReturn;	
   2073c:	e51b3008 	ldr	r3, [fp, #-8]
}
   20740:	e1a00003 	mov	r0, r3
   20744:	e24bd004 	sub	sp, fp, #4
   20748:	e8bd8800 	pop	{fp, pc}
   2074c:	0002c2c0 	andeq	ip, r2, r0, asr #5
   20750:	0002c2c4 	andeq	ip, r2, r4, asr #5
   20754:	0002c254 	andeq	ip, r2, r4, asr r2

00020758 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   20758:	e92d4800 	push	{fp, lr}
   2075c:	e28db004 	add	fp, sp, #4
   20760:	e24dd010 	sub	sp, sp, #16
   20764:	e50b0010 	str	r0, [fp, #-16]
   20768:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   2076c:	e59f30b8 	ldr	r3, [pc, #184]	; 2082c <vCoRoutineAddToDelayedList+0xd4>
   20770:	e5933000 	ldr	r3, [r3]
   20774:	e51b2010 	ldr	r2, [fp, #-16]
   20778:	e0823003 	add	r3, r2, r3
   2077c:	e50b3008 	str	r3, [fp, #-8]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   20780:	e59f30a8 	ldr	r3, [pc, #168]	; 20830 <vCoRoutineAddToDelayedList+0xd8>
   20784:	e5933000 	ldr	r3, [r3]
   20788:	e2833004 	add	r3, r3, #4
   2078c:	e1a00003 	mov	r0, r3
   20790:	eb0001f0 	bl	20f58 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   20794:	e59f3094 	ldr	r3, [pc, #148]	; 20830 <vCoRoutineAddToDelayedList+0xd8>
   20798:	e5933000 	ldr	r3, [r3]
   2079c:	e51b2008 	ldr	r2, [fp, #-8]
   207a0:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   207a4:	e59f3080 	ldr	r3, [pc, #128]	; 2082c <vCoRoutineAddToDelayedList+0xd4>
   207a8:	e5933000 	ldr	r3, [r3]
   207ac:	e51b2008 	ldr	r2, [fp, #-8]
   207b0:	e1520003 	cmp	r2, r3
   207b4:	2a000008 	bcs	207dc <vCoRoutineAddToDelayedList+0x84>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   207b8:	e59f3074 	ldr	r3, [pc, #116]	; 20834 <vCoRoutineAddToDelayedList+0xdc>
   207bc:	e5932000 	ldr	r2, [r3]
   207c0:	e59f3068 	ldr	r3, [pc, #104]	; 20830 <vCoRoutineAddToDelayedList+0xd8>
   207c4:	e5933000 	ldr	r3, [r3]
   207c8:	e2833004 	add	r3, r3, #4
   207cc:	e1a01003 	mov	r1, r3
   207d0:	e1a00002 	mov	r0, r2
   207d4:	eb0001a9 	bl	20e80 <vListInsert>
   207d8:	ea000007 	b	207fc <vCoRoutineAddToDelayedList+0xa4>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   207dc:	e59f3054 	ldr	r3, [pc, #84]	; 20838 <vCoRoutineAddToDelayedList+0xe0>
   207e0:	e5932000 	ldr	r2, [r3]
   207e4:	e59f3044 	ldr	r3, [pc, #68]	; 20830 <vCoRoutineAddToDelayedList+0xd8>
   207e8:	e5933000 	ldr	r3, [r3]
   207ec:	e2833004 	add	r3, r3, #4
   207f0:	e1a01003 	mov	r1, r3
   207f4:	e1a00002 	mov	r0, r2
   207f8:	eb0001a0 	bl	20e80 <vListInsert>
	}

	if( pxEventList )
   207fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20800:	e3530000 	cmp	r3, #0
   20804:	0a000005 	beq	20820 <vCoRoutineAddToDelayedList+0xc8>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   20808:	e59f3020 	ldr	r3, [pc, #32]	; 20830 <vCoRoutineAddToDelayedList+0xd8>
   2080c:	e5933000 	ldr	r3, [r3]
   20810:	e2833018 	add	r3, r3, #24
   20814:	e1a01003 	mov	r1, r3
   20818:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2081c:	eb000197 	bl	20e80 <vListInsert>
	}
}
   20820:	e320f000 	nop	{0}
   20824:	e24bd004 	sub	sp, fp, #4
   20828:	e8bd8800 	pop	{fp, pc}
   2082c:	0002c2c8 	andeq	ip, r2, r8, asr #5
   20830:	0002c2c0 	andeq	ip, r2, r0, asr #5
   20834:	0002c2a8 	andeq	ip, r2, r8, lsr #5
   20838:	0002c2a4 	andeq	ip, r2, r4, lsr #5

0002083c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   2083c:	e92d4800 	push	{fp, lr}
   20840:	e28db004 	add	fp, sp, #4
   20844:	e24dd008 	sub	sp, sp, #8
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   20848:	ea00002c 	b	20900 <prvCheckPendingReadyList+0xc4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   2084c:	e92d0001 	stmfd	sp!, {r0}
   20850:	e10f0000 	mrs	r0, CPSR
   20854:	e38000c0 	orr	r0, r0, #192	; 0xc0
   20858:	e129f000 	msr	CPSR_fc, r0
   2085c:	e8bd0001 	ldmfd	sp!, {r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   20860:	e59f30b8 	ldr	r3, [pc, #184]	; 20920 <prvCheckPendingReadyList+0xe4>
   20864:	e593300c 	ldr	r3, [r3, #12]
   20868:	e593300c 	ldr	r3, [r3, #12]
   2086c:	e50b3008 	str	r3, [fp, #-8]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   20870:	e51b3008 	ldr	r3, [fp, #-8]
   20874:	e2833018 	add	r3, r3, #24
   20878:	e1a00003 	mov	r0, r3
   2087c:	eb0001b5 	bl	20f58 <vListRemove>
		}
		portENABLE_INTERRUPTS();
   20880:	e92d0001 	stmfd	sp!, {r0}
   20884:	e10f0000 	mrs	r0, CPSR
   20888:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   2088c:	e129f000 	msr	CPSR_fc, r0
   20890:	e8bd0001 	ldmfd	sp!, {r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   20894:	e51b3008 	ldr	r3, [fp, #-8]
   20898:	e2833004 	add	r3, r3, #4
   2089c:	e1a00003 	mov	r0, r3
   208a0:	eb0001ac 	bl	20f58 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   208a4:	e51b3008 	ldr	r3, [fp, #-8]
   208a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   208ac:	e59f3070 	ldr	r3, [pc, #112]	; 20924 <prvCheckPendingReadyList+0xe8>
   208b0:	e5933000 	ldr	r3, [r3]
   208b4:	e1520003 	cmp	r2, r3
   208b8:	9a000003 	bls	208cc <prvCheckPendingReadyList+0x90>
   208bc:	e51b3008 	ldr	r3, [fp, #-8]
   208c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   208c4:	e59f2058 	ldr	r2, [pc, #88]	; 20924 <prvCheckPendingReadyList+0xe8>
   208c8:	e5823000 	str	r3, [r2]
   208cc:	e51b3008 	ldr	r3, [fp, #-8]
   208d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   208d4:	e1a03002 	mov	r3, r2
   208d8:	e1a03103 	lsl	r3, r3, #2
   208dc:	e0833002 	add	r3, r3, r2
   208e0:	e1a03103 	lsl	r3, r3, #2
   208e4:	e59f203c 	ldr	r2, [pc, #60]	; 20928 <prvCheckPendingReadyList+0xec>
   208e8:	e0832002 	add	r2, r3, r2
   208ec:	e51b3008 	ldr	r3, [fp, #-8]
   208f0:	e2833004 	add	r3, r3, #4
   208f4:	e1a01003 	mov	r1, r3
   208f8:	e1a00002 	mov	r0, r2
   208fc:	eb000139 	bl	20de8 <vListInsertEnd>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   20900:	e59f3018 	ldr	r3, [pc, #24]	; 20920 <prvCheckPendingReadyList+0xe4>
   20904:	e5933000 	ldr	r3, [r3]
   20908:	e3530000 	cmp	r3, #0
   2090c:	1affffce 	bne	2084c <prvCheckPendingReadyList+0x10>
	}
}
   20910:	e320f000 	nop	{0}
   20914:	e320f000 	nop	{0}
   20918:	e24bd004 	sub	sp, fp, #4
   2091c:	e8bd8800 	pop	{fp, pc}
   20920:	0002c2ac 	andeq	ip, r2, ip, lsr #5
   20924:	0002c2c4 	andeq	ip, r2, r4, asr #5
   20928:	0002c254 	andeq	ip, r2, r4, asr r2

0002092c <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   2092c:	e92d4800 	push	{fp, lr}
   20930:	e28db004 	add	fp, sp, #4
   20934:	e24dd008 	sub	sp, sp, #8
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   20938:	eb0007df 	bl	228bc <xTaskGetTickCount>
   2093c:	e1a02000 	mov	r2, r0
   20940:	e59f3198 	ldr	r3, [pc, #408]	; 20ae0 <prvCheckDelayedList+0x1b4>
   20944:	e5933000 	ldr	r3, [r3]
   20948:	e0423003 	sub	r3, r2, r3
   2094c:	e59f2190 	ldr	r2, [pc, #400]	; 20ae4 <prvCheckDelayedList+0x1b8>
   20950:	e5823000 	str	r3, [r2]
	while( xPassedTicks )
   20954:	ea000056 	b	20ab4 <prvCheckDelayedList+0x188>
	{
		xCoRoutineTickCount++;
   20958:	e59f3188 	ldr	r3, [pc, #392]	; 20ae8 <prvCheckDelayedList+0x1bc>
   2095c:	e5933000 	ldr	r3, [r3]
   20960:	e2833001 	add	r3, r3, #1
   20964:	e59f217c 	ldr	r2, [pc, #380]	; 20ae8 <prvCheckDelayedList+0x1bc>
   20968:	e5823000 	str	r3, [r2]
		xPassedTicks--;
   2096c:	e59f3170 	ldr	r3, [pc, #368]	; 20ae4 <prvCheckDelayedList+0x1b8>
   20970:	e5933000 	ldr	r3, [r3]
   20974:	e2433001 	sub	r3, r3, #1
   20978:	e59f2164 	ldr	r2, [pc, #356]	; 20ae4 <prvCheckDelayedList+0x1b8>
   2097c:	e5823000 	str	r3, [r2]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   20980:	e59f3160 	ldr	r3, [pc, #352]	; 20ae8 <prvCheckDelayedList+0x1bc>
   20984:	e5933000 	ldr	r3, [r3]
   20988:	e3530000 	cmp	r3, #0
   2098c:	1a000043 	bne	20aa0 <prvCheckDelayedList+0x174>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   20990:	e59f3154 	ldr	r3, [pc, #340]	; 20aec <prvCheckDelayedList+0x1c0>
   20994:	e5933000 	ldr	r3, [r3]
   20998:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   2099c:	e59f314c 	ldr	r3, [pc, #332]	; 20af0 <prvCheckDelayedList+0x1c4>
   209a0:	e5933000 	ldr	r3, [r3]
   209a4:	e59f2140 	ldr	r2, [pc, #320]	; 20aec <prvCheckDelayedList+0x1c0>
   209a8:	e5823000 	str	r3, [r2]
			pxOverflowDelayedCoRoutineList = pxTemp;
   209ac:	e59f213c 	ldr	r2, [pc, #316]	; 20af0 <prvCheckDelayedList+0x1c4>
   209b0:	e51b3008 	ldr	r3, [fp, #-8]
   209b4:	e5823000 	str	r3, [r2]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   209b8:	ea000038 	b	20aa0 <prvCheckDelayedList+0x174>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   209bc:	e59f3128 	ldr	r3, [pc, #296]	; 20aec <prvCheckDelayedList+0x1c0>
   209c0:	e5933000 	ldr	r3, [r3]
   209c4:	e593300c 	ldr	r3, [r3, #12]
   209c8:	e593300c 	ldr	r3, [r3, #12]
   209cc:	e50b300c 	str	r3, [fp, #-12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   209d0:	e51b300c 	ldr	r3, [fp, #-12]
   209d4:	e5932004 	ldr	r2, [r3, #4]
   209d8:	e59f3108 	ldr	r3, [pc, #264]	; 20ae8 <prvCheckDelayedList+0x1bc>
   209dc:	e5933000 	ldr	r3, [r3]
   209e0:	e1520003 	cmp	r2, r3
   209e4:	9a000000 	bls	209ec <prvCheckDelayedList+0xc0>
			{			
				/* Timeout not yet expired. */																			
				break;																				
   209e8:	ea000031 	b	20ab4 <prvCheckDelayedList+0x188>
			}																						

			portDISABLE_INTERRUPTS();
   209ec:	e92d0001 	stmfd	sp!, {r0}
   209f0:	e10f0000 	mrs	r0, CPSR
   209f4:	e38000c0 	orr	r0, r0, #192	; 0xc0
   209f8:	e129f000 	msr	CPSR_fc, r0
   209fc:	e8bd0001 	ldmfd	sp!, {r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   20a00:	e51b300c 	ldr	r3, [fp, #-12]
   20a04:	e2833004 	add	r3, r3, #4
   20a08:	e1a00003 	mov	r0, r3
   20a0c:	eb000151 	bl	20f58 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   20a10:	e51b300c 	ldr	r3, [fp, #-12]
   20a14:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   20a18:	e3530000 	cmp	r3, #0
   20a1c:	0a000003 	beq	20a30 <prvCheckDelayedList+0x104>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   20a20:	e51b300c 	ldr	r3, [fp, #-12]
   20a24:	e2833018 	add	r3, r3, #24
   20a28:	e1a00003 	mov	r0, r3
   20a2c:	eb000149 	bl	20f58 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   20a30:	e92d0001 	stmfd	sp!, {r0}
   20a34:	e10f0000 	mrs	r0, CPSR
   20a38:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   20a3c:	e129f000 	msr	CPSR_fc, r0
   20a40:	e8bd0001 	ldmfd	sp!, {r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   20a44:	e51b300c 	ldr	r3, [fp, #-12]
   20a48:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   20a4c:	e59f30a0 	ldr	r3, [pc, #160]	; 20af4 <prvCheckDelayedList+0x1c8>
   20a50:	e5933000 	ldr	r3, [r3]
   20a54:	e1520003 	cmp	r2, r3
   20a58:	9a000003 	bls	20a6c <prvCheckDelayedList+0x140>
   20a5c:	e51b300c 	ldr	r3, [fp, #-12]
   20a60:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   20a64:	e59f2088 	ldr	r2, [pc, #136]	; 20af4 <prvCheckDelayedList+0x1c8>
   20a68:	e5823000 	str	r3, [r2]
   20a6c:	e51b300c 	ldr	r3, [fp, #-12]
   20a70:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   20a74:	e1a03002 	mov	r3, r2
   20a78:	e1a03103 	lsl	r3, r3, #2
   20a7c:	e0833002 	add	r3, r3, r2
   20a80:	e1a03103 	lsl	r3, r3, #2
   20a84:	e59f206c 	ldr	r2, [pc, #108]	; 20af8 <prvCheckDelayedList+0x1cc>
   20a88:	e0832002 	add	r2, r3, r2
   20a8c:	e51b300c 	ldr	r3, [fp, #-12]
   20a90:	e2833004 	add	r3, r3, #4
   20a94:	e1a01003 	mov	r1, r3
   20a98:	e1a00002 	mov	r0, r2
   20a9c:	eb0000d1 	bl	20de8 <vListInsertEnd>
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   20aa0:	e59f3044 	ldr	r3, [pc, #68]	; 20aec <prvCheckDelayedList+0x1c0>
   20aa4:	e5933000 	ldr	r3, [r3]
   20aa8:	e5933000 	ldr	r3, [r3]
   20aac:	e3530000 	cmp	r3, #0
   20ab0:	1affffc1 	bne	209bc <prvCheckDelayedList+0x90>
	while( xPassedTicks )
   20ab4:	e59f3028 	ldr	r3, [pc, #40]	; 20ae4 <prvCheckDelayedList+0x1b8>
   20ab8:	e5933000 	ldr	r3, [r3]
   20abc:	e3530000 	cmp	r3, #0
   20ac0:	1affffa4 	bne	20958 <prvCheckDelayedList+0x2c>
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   20ac4:	e59f301c 	ldr	r3, [pc, #28]	; 20ae8 <prvCheckDelayedList+0x1bc>
   20ac8:	e5933000 	ldr	r3, [r3]
   20acc:	e59f200c 	ldr	r2, [pc, #12]	; 20ae0 <prvCheckDelayedList+0x1b4>
   20ad0:	e5823000 	str	r3, [r2]
}
   20ad4:	e320f000 	nop	{0}
   20ad8:	e24bd004 	sub	sp, fp, #4
   20adc:	e8bd8800 	pop	{fp, pc}
   20ae0:	0002c2cc 	andeq	ip, r2, ip, asr #5
   20ae4:	0002c2d0 	ldrdeq	ip, [r2], -r0
   20ae8:	0002c2c8 	andeq	ip, r2, r8, asr #5
   20aec:	0002c2a4 	andeq	ip, r2, r4, lsr #5
   20af0:	0002c2a8 	andeq	ip, r2, r8, lsr #5
   20af4:	0002c2c4 	andeq	ip, r2, r4, asr #5
   20af8:	0002c254 	andeq	ip, r2, r4, asr r2

00020afc <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   20afc:	e92d4800 	push	{fp, lr}
   20b00:	e28db004 	add	fp, sp, #4
   20b04:	e24dd008 	sub	sp, sp, #8
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   20b08:	ebffff4b 	bl	2083c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   20b0c:	ebffff86 	bl	2092c <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   20b10:	ea000008 	b	20b38 <vCoRoutineSchedule+0x3c>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   20b14:	e59f30f8 	ldr	r3, [pc, #248]	; 20c14 <vCoRoutineSchedule+0x118>
   20b18:	e5933000 	ldr	r3, [r3]
   20b1c:	e3530000 	cmp	r3, #0
   20b20:	0a000038 	beq	20c08 <vCoRoutineSchedule+0x10c>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
   20b24:	e59f30e8 	ldr	r3, [pc, #232]	; 20c14 <vCoRoutineSchedule+0x118>
   20b28:	e5933000 	ldr	r3, [r3]
   20b2c:	e2433001 	sub	r3, r3, #1
   20b30:	e59f20dc 	ldr	r2, [pc, #220]	; 20c14 <vCoRoutineSchedule+0x118>
   20b34:	e5823000 	str	r3, [r2]
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   20b38:	e59f30d4 	ldr	r3, [pc, #212]	; 20c14 <vCoRoutineSchedule+0x118>
   20b3c:	e5932000 	ldr	r2, [r3]
   20b40:	e59f10d0 	ldr	r1, [pc, #208]	; 20c18 <vCoRoutineSchedule+0x11c>
   20b44:	e1a03002 	mov	r3, r2
   20b48:	e1a03103 	lsl	r3, r3, #2
   20b4c:	e0833002 	add	r3, r3, r2
   20b50:	e1a03103 	lsl	r3, r3, #2
   20b54:	e0813003 	add	r3, r1, r3
   20b58:	e5933000 	ldr	r3, [r3]
   20b5c:	e3530000 	cmp	r3, #0
   20b60:	0affffeb 	beq	20b14 <vCoRoutineSchedule+0x18>
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   20b64:	e59f30a8 	ldr	r3, [pc, #168]	; 20c14 <vCoRoutineSchedule+0x118>
   20b68:	e5932000 	ldr	r2, [r3]
   20b6c:	e1a03002 	mov	r3, r2
   20b70:	e1a03103 	lsl	r3, r3, #2
   20b74:	e0833002 	add	r3, r3, r2
   20b78:	e1a03103 	lsl	r3, r3, #2
   20b7c:	e59f2094 	ldr	r2, [pc, #148]	; 20c18 <vCoRoutineSchedule+0x11c>
   20b80:	e0833002 	add	r3, r3, r2
   20b84:	e50b3008 	str	r3, [fp, #-8]
   20b88:	e51b3008 	ldr	r3, [fp, #-8]
   20b8c:	e5933004 	ldr	r3, [r3, #4]
   20b90:	e5932004 	ldr	r2, [r3, #4]
   20b94:	e51b3008 	ldr	r3, [fp, #-8]
   20b98:	e5832004 	str	r2, [r3, #4]
   20b9c:	e51b3008 	ldr	r3, [fp, #-8]
   20ba0:	e5932004 	ldr	r2, [r3, #4]
   20ba4:	e51b3008 	ldr	r3, [fp, #-8]
   20ba8:	e2833008 	add	r3, r3, #8
   20bac:	e1520003 	cmp	r2, r3
   20bb0:	1a000004 	bne	20bc8 <vCoRoutineSchedule+0xcc>
   20bb4:	e51b3008 	ldr	r3, [fp, #-8]
   20bb8:	e5933004 	ldr	r3, [r3, #4]
   20bbc:	e5932004 	ldr	r2, [r3, #4]
   20bc0:	e51b3008 	ldr	r3, [fp, #-8]
   20bc4:	e5832004 	str	r2, [r3, #4]
   20bc8:	e51b3008 	ldr	r3, [fp, #-8]
   20bcc:	e5933004 	ldr	r3, [r3, #4]
   20bd0:	e593300c 	ldr	r3, [r3, #12]
   20bd4:	e59f2040 	ldr	r2, [pc, #64]	; 20c1c <vCoRoutineSchedule+0x120>
   20bd8:	e5823000 	str	r3, [r2]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   20bdc:	e59f3038 	ldr	r3, [pc, #56]	; 20c1c <vCoRoutineSchedule+0x120>
   20be0:	e5933000 	ldr	r3, [r3]
   20be4:	e5933000 	ldr	r3, [r3]
   20be8:	e59f202c 	ldr	r2, [pc, #44]	; 20c1c <vCoRoutineSchedule+0x120>
   20bec:	e5920000 	ldr	r0, [r2]
   20bf0:	e59f2024 	ldr	r2, [pc, #36]	; 20c1c <vCoRoutineSchedule+0x120>
   20bf4:	e5922000 	ldr	r2, [r2]
   20bf8:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   20bfc:	e1a01002 	mov	r1, r2
   20c00:	e12fff33 	blx	r3

	return;
   20c04:	ea000000 	b	20c0c <vCoRoutineSchedule+0x110>
			return;
   20c08:	e320f000 	nop	{0}
}
   20c0c:	e24bd004 	sub	sp, fp, #4
   20c10:	e8bd8800 	pop	{fp, pc}
   20c14:	0002c2c4 	andeq	ip, r2, r4, asr #5
   20c18:	0002c254 	andeq	ip, r2, r4, asr r2
   20c1c:	0002c2c0 	andeq	ip, r2, r0, asr #5

00020c20 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   20c20:	e92d4800 	push	{fp, lr}
   20c24:	e28db004 	add	fp, sp, #4
   20c28:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   20c2c:	e3a03000 	mov	r3, #0
   20c30:	e50b3008 	str	r3, [fp, #-8]
   20c34:	ea00000b 	b	20c68 <prvInitialiseCoRoutineLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   20c38:	e51b2008 	ldr	r2, [fp, #-8]
   20c3c:	e1a03002 	mov	r3, r2
   20c40:	e1a03103 	lsl	r3, r3, #2
   20c44:	e0833002 	add	r3, r3, r2
   20c48:	e1a03103 	lsl	r3, r3, #2
   20c4c:	e59f205c 	ldr	r2, [pc, #92]	; 20cb0 <prvInitialiseCoRoutineLists+0x90>
   20c50:	e0833002 	add	r3, r3, r2
   20c54:	e1a00003 	mov	r0, r3
   20c58:	eb00003d 	bl	20d54 <vListInitialise>
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   20c5c:	e51b3008 	ldr	r3, [fp, #-8]
   20c60:	e2833001 	add	r3, r3, #1
   20c64:	e50b3008 	str	r3, [fp, #-8]
   20c68:	e51b3008 	ldr	r3, [fp, #-8]
   20c6c:	e3530001 	cmp	r3, #1
   20c70:	9afffff0 	bls	20c38 <prvInitialiseCoRoutineLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   20c74:	e59f0038 	ldr	r0, [pc, #56]	; 20cb4 <prvInitialiseCoRoutineLists+0x94>
   20c78:	eb000035 	bl	20d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   20c7c:	e59f0034 	ldr	r0, [pc, #52]	; 20cb8 <prvInitialiseCoRoutineLists+0x98>
   20c80:	eb000033 	bl	20d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   20c84:	e59f0030 	ldr	r0, [pc, #48]	; 20cbc <prvInitialiseCoRoutineLists+0x9c>
   20c88:	eb000031 	bl	20d54 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   20c8c:	e59f302c 	ldr	r3, [pc, #44]	; 20cc0 <prvInitialiseCoRoutineLists+0xa0>
   20c90:	e59f201c 	ldr	r2, [pc, #28]	; 20cb4 <prvInitialiseCoRoutineLists+0x94>
   20c94:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   20c98:	e59f3024 	ldr	r3, [pc, #36]	; 20cc4 <prvInitialiseCoRoutineLists+0xa4>
   20c9c:	e59f2014 	ldr	r2, [pc, #20]	; 20cb8 <prvInitialiseCoRoutineLists+0x98>
   20ca0:	e5832000 	str	r2, [r3]
}
   20ca4:	e320f000 	nop	{0}
   20ca8:	e24bd004 	sub	sp, fp, #4
   20cac:	e8bd8800 	pop	{fp, pc}
   20cb0:	0002c254 	andeq	ip, r2, r4, asr r2
   20cb4:	0002c27c 	andeq	ip, r2, ip, ror r2
   20cb8:	0002c290 	muleq	r2, r0, r2
   20cbc:	0002c2ac 	andeq	ip, r2, ip, lsr #5
   20cc0:	0002c2a4 	andeq	ip, r2, r4, lsr #5
   20cc4:	0002c2a8 	andeq	ip, r2, r8, lsr #5

00020cc8 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   20cc8:	e92d4800 	push	{fp, lr}
   20ccc:	e28db004 	add	fp, sp, #4
   20cd0:	e24dd010 	sub	sp, sp, #16
   20cd4:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   20cd8:	e51b3010 	ldr	r3, [fp, #-16]
   20cdc:	e593300c 	ldr	r3, [r3, #12]
   20ce0:	e593300c 	ldr	r3, [r3, #12]
   20ce4:	e50b300c 	str	r3, [fp, #-12]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   20ce8:	e51b300c 	ldr	r3, [fp, #-12]
   20cec:	e2833018 	add	r3, r3, #24
   20cf0:	e1a00003 	mov	r0, r3
   20cf4:	eb000097 	bl	20f58 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   20cf8:	e51b300c 	ldr	r3, [fp, #-12]
   20cfc:	e2833018 	add	r3, r3, #24
   20d00:	e1a01003 	mov	r1, r3
   20d04:	e59f0040 	ldr	r0, [pc, #64]	; 20d4c <xCoRoutineRemoveFromEventList+0x84>
   20d08:	eb000036 	bl	20de8 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   20d0c:	e51b300c 	ldr	r3, [fp, #-12]
   20d10:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   20d14:	e59f3034 	ldr	r3, [pc, #52]	; 20d50 <xCoRoutineRemoveFromEventList+0x88>
   20d18:	e5933000 	ldr	r3, [r3]
   20d1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   20d20:	e1520003 	cmp	r2, r3
   20d24:	3a000002 	bcc	20d34 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
   20d28:	e3a03001 	mov	r3, #1
   20d2c:	e50b3008 	str	r3, [fp, #-8]
   20d30:	ea000001 	b	20d3c <xCoRoutineRemoveFromEventList+0x74>
	}
	else
	{
		xReturn = pdFALSE;
   20d34:	e3a03000 	mov	r3, #0
   20d38:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   20d3c:	e51b3008 	ldr	r3, [fp, #-8]
}
   20d40:	e1a00003 	mov	r0, r3
   20d44:	e24bd004 	sub	sp, fp, #4
   20d48:	e8bd8800 	pop	{fp, pc}
   20d4c:	0002c2ac 	andeq	ip, r2, ip, lsr #5
   20d50:	0002c2c0 	andeq	ip, r2, r0, asr #5

00020d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   20d54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20d58:	e28db000 	add	fp, sp, #0
   20d5c:	e24dd00c 	sub	sp, sp, #12
   20d60:	e50b0008 	str	r0, [fp, #-8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   20d64:	e51b3008 	ldr	r3, [fp, #-8]
   20d68:	e2832008 	add	r2, r3, #8
   20d6c:	e51b3008 	ldr	r3, [fp, #-8]
   20d70:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   20d74:	e51b3008 	ldr	r3, [fp, #-8]
   20d78:	e3e02000 	mvn	r2, #0
   20d7c:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   20d80:	e51b3008 	ldr	r3, [fp, #-8]
   20d84:	e2832008 	add	r2, r3, #8
   20d88:	e51b3008 	ldr	r3, [fp, #-8]
   20d8c:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   20d90:	e51b3008 	ldr	r3, [fp, #-8]
   20d94:	e2832008 	add	r2, r3, #8
   20d98:	e51b3008 	ldr	r3, [fp, #-8]
   20d9c:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   20da0:	e51b3008 	ldr	r3, [fp, #-8]
   20da4:	e3a02000 	mov	r2, #0
   20da8:	e5832000 	str	r2, [r3]
}
   20dac:	e320f000 	nop	{0}
   20db0:	e28bd000 	add	sp, fp, #0
   20db4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20db8:	e12fff1e 	bx	lr

00020dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   20dbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20dc0:	e28db000 	add	fp, sp, #0
   20dc4:	e24dd00c 	sub	sp, sp, #12
   20dc8:	e50b0008 	str	r0, [fp, #-8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   20dcc:	e51b3008 	ldr	r3, [fp, #-8]
   20dd0:	e3a02000 	mov	r2, #0
   20dd4:	e5832010 	str	r2, [r3, #16]
}
   20dd8:	e320f000 	nop	{0}
   20ddc:	e28bd000 	add	sp, fp, #0
   20de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20de4:	e12fff1e 	bx	lr

00020de8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   20de8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20dec:	e28db000 	add	fp, sp, #0
   20df0:	e24dd014 	sub	sp, sp, #20
   20df4:	e50b0010 	str	r0, [fp, #-16]
   20df8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   20dfc:	e51b3010 	ldr	r3, [fp, #-16]
   20e00:	e5933004 	ldr	r3, [r3, #4]
   20e04:	e50b3008 	str	r3, [fp, #-8]

	pxNewListItem->pxNext = pxIndex->pxNext;
   20e08:	e51b3008 	ldr	r3, [fp, #-8]
   20e0c:	e5932004 	ldr	r2, [r3, #4]
   20e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20e14:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   20e18:	e51b3010 	ldr	r3, [fp, #-16]
   20e1c:	e5932004 	ldr	r2, [r3, #4]
   20e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20e24:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   20e28:	e51b3008 	ldr	r3, [fp, #-8]
   20e2c:	e5933004 	ldr	r3, [r3, #4]
   20e30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20e34:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   20e38:	e51b3008 	ldr	r3, [fp, #-8]
   20e3c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20e40:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   20e44:	e51b3010 	ldr	r3, [fp, #-16]
   20e48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20e4c:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   20e50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20e54:	e51b2010 	ldr	r2, [fp, #-16]
   20e58:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   20e5c:	e51b3010 	ldr	r3, [fp, #-16]
   20e60:	e5933000 	ldr	r3, [r3]
   20e64:	e2832001 	add	r2, r3, #1
   20e68:	e51b3010 	ldr	r3, [fp, #-16]
   20e6c:	e5832000 	str	r2, [r3]
}
   20e70:	e320f000 	nop	{0}
   20e74:	e28bd000 	add	sp, fp, #0
   20e78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20e7c:	e12fff1e 	bx	lr

00020e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   20e80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20e84:	e28db000 	add	fp, sp, #0
   20e88:	e24dd014 	sub	sp, sp, #20
   20e8c:	e50b0010 	str	r0, [fp, #-16]
   20e90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   20e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20e98:	e5933000 	ldr	r3, [r3]
   20e9c:	e50b300c 	str	r3, [fp, #-12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   20ea0:	e51b300c 	ldr	r3, [fp, #-12]
   20ea4:	e3730001 	cmn	r3, #1
   20ea8:	1a000003 	bne	20ebc <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   20eac:	e51b3010 	ldr	r3, [fp, #-16]
   20eb0:	e5933010 	ldr	r3, [r3, #16]
   20eb4:	e50b3008 	str	r3, [fp, #-8]
   20eb8:	ea00000c 	b	20ef0 <vListInsert+0x70>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   20ebc:	e51b3010 	ldr	r3, [fp, #-16]
   20ec0:	e2833008 	add	r3, r3, #8
   20ec4:	e50b3008 	str	r3, [fp, #-8]
   20ec8:	ea000002 	b	20ed8 <vListInsert+0x58>
   20ecc:	e51b3008 	ldr	r3, [fp, #-8]
   20ed0:	e5933004 	ldr	r3, [r3, #4]
   20ed4:	e50b3008 	str	r3, [fp, #-8]
   20ed8:	e51b3008 	ldr	r3, [fp, #-8]
   20edc:	e5933004 	ldr	r3, [r3, #4]
   20ee0:	e5933000 	ldr	r3, [r3]
   20ee4:	e51b200c 	ldr	r2, [fp, #-12]
   20ee8:	e1520003 	cmp	r2, r3
   20eec:	2afffff6 	bcs	20ecc <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   20ef0:	e51b3008 	ldr	r3, [fp, #-8]
   20ef4:	e5932004 	ldr	r2, [r3, #4]
   20ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20efc:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   20f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20f04:	e5933004 	ldr	r3, [r3, #4]
   20f08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20f0c:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   20f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20f14:	e51b2008 	ldr	r2, [fp, #-8]
   20f18:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   20f1c:	e51b3008 	ldr	r3, [fp, #-8]
   20f20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20f24:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   20f28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20f2c:	e51b2010 	ldr	r2, [fp, #-16]
   20f30:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   20f34:	e51b3010 	ldr	r3, [fp, #-16]
   20f38:	e5933000 	ldr	r3, [r3]
   20f3c:	e2832001 	add	r2, r3, #1
   20f40:	e51b3010 	ldr	r3, [fp, #-16]
   20f44:	e5832000 	str	r2, [r3]
}
   20f48:	e320f000 	nop	{0}
   20f4c:	e28bd000 	add	sp, fp, #0
   20f50:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20f54:	e12fff1e 	bx	lr

00020f58 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   20f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20f5c:	e28db000 	add	fp, sp, #0
   20f60:	e24dd014 	sub	sp, sp, #20
   20f64:	e50b0010 	str	r0, [fp, #-16]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   20f68:	e51b3010 	ldr	r3, [fp, #-16]
   20f6c:	e5933004 	ldr	r3, [r3, #4]
   20f70:	e51b2010 	ldr	r2, [fp, #-16]
   20f74:	e5922008 	ldr	r2, [r2, #8]
   20f78:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   20f7c:	e51b3010 	ldr	r3, [fp, #-16]
   20f80:	e5933008 	ldr	r3, [r3, #8]
   20f84:	e51b2010 	ldr	r2, [fp, #-16]
   20f88:	e5922004 	ldr	r2, [r2, #4]
   20f8c:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   20f90:	e51b3010 	ldr	r3, [fp, #-16]
   20f94:	e5933010 	ldr	r3, [r3, #16]
   20f98:	e50b3008 	str	r3, [fp, #-8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   20f9c:	e51b3008 	ldr	r3, [fp, #-8]
   20fa0:	e5933004 	ldr	r3, [r3, #4]
   20fa4:	e51b2010 	ldr	r2, [fp, #-16]
   20fa8:	e1520003 	cmp	r2, r3
   20fac:	1a000003 	bne	20fc0 <vListRemove+0x68>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   20fb0:	e51b3010 	ldr	r3, [fp, #-16]
   20fb4:	e5932008 	ldr	r2, [r3, #8]
   20fb8:	e51b3008 	ldr	r3, [fp, #-8]
   20fbc:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   20fc0:	e51b3010 	ldr	r3, [fp, #-16]
   20fc4:	e3a02000 	mov	r2, #0
   20fc8:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   20fcc:	e51b3008 	ldr	r3, [fp, #-8]
   20fd0:	e5933000 	ldr	r3, [r3]
   20fd4:	e2432001 	sub	r2, r3, #1
   20fd8:	e51b3008 	ldr	r3, [fp, #-8]
   20fdc:	e5832000 	str	r2, [r3]
}
   20fe0:	e320f000 	nop	{0}
   20fe4:	e28bd000 	add	sp, fp, #0
   20fe8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20fec:	e12fff1e 	bx	lr

00020ff0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   20ff0:	e92d4800 	push	{fp, lr}
   20ff4:	e28db004 	add	fp, sp, #4
   20ff8:	e24dd008 	sub	sp, sp, #8
   20ffc:	e50b0008 	str	r0, [fp, #-8]
   21000:	e50b100c 	str	r1, [fp, #-12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   21004:	ebfffd4d 	bl	20540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   21008:	e51b3008 	ldr	r3, [fp, #-8]
   2100c:	e5932000 	ldr	r2, [r3]
   21010:	e51b3008 	ldr	r3, [fp, #-8]
   21014:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   21018:	e51b1008 	ldr	r1, [fp, #-8]
   2101c:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   21020:	e0030391 	mul	r3, r1, r3
   21024:	e0822003 	add	r2, r2, r3
   21028:	e51b3008 	ldr	r3, [fp, #-8]
   2102c:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   21030:	e51b3008 	ldr	r3, [fp, #-8]
   21034:	e3a02000 	mov	r2, #0
   21038:	e5832038 	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   2103c:	e51b3008 	ldr	r3, [fp, #-8]
   21040:	e5932000 	ldr	r2, [r3]
   21044:	e51b3008 	ldr	r3, [fp, #-8]
   21048:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   2104c:	e51b3008 	ldr	r3, [fp, #-8]
   21050:	e5932000 	ldr	r2, [r3]
   21054:	e51b3008 	ldr	r3, [fp, #-8]
   21058:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2105c:	e2433001 	sub	r3, r3, #1
   21060:	e51b1008 	ldr	r1, [fp, #-8]
   21064:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   21068:	e0030391 	mul	r3, r1, r3
   2106c:	e0822003 	add	r2, r2, r3
   21070:	e51b3008 	ldr	r3, [fp, #-8]
   21074:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   21078:	e51b3008 	ldr	r3, [fp, #-8]
   2107c:	e3e02000 	mvn	r2, #0
   21080:	e5832044 	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   21084:	e51b3008 	ldr	r3, [fp, #-8]
   21088:	e3e02000 	mvn	r2, #0
   2108c:	e5832048 	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   21090:	e51b300c 	ldr	r3, [fp, #-12]
   21094:	e3530000 	cmp	r3, #0
   21098:	1a00000c 	bne	210d0 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   2109c:	e51b3008 	ldr	r3, [fp, #-8]
   210a0:	e5933010 	ldr	r3, [r3, #16]
   210a4:	e3530000 	cmp	r3, #0
   210a8:	0a000010 	beq	210f0 <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   210ac:	e51b3008 	ldr	r3, [fp, #-8]
   210b0:	e2833010 	add	r3, r3, #16
   210b4:	e1a00003 	mov	r0, r3
   210b8:	eb000760 	bl	22e40 <xTaskRemoveFromEventList>
   210bc:	e1a03000 	mov	r3, r0
   210c0:	e3530001 	cmp	r3, #1
   210c4:	1a000009 	bne	210f0 <xQueueGenericReset+0x100>
				{
					portYIELD_WITHIN_API();
   210c8:	ef000000 	svc	0x00000000
   210cc:	ea000007 	b	210f0 <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   210d0:	e51b3008 	ldr	r3, [fp, #-8]
   210d4:	e2833010 	add	r3, r3, #16
   210d8:	e1a00003 	mov	r0, r3
   210dc:	ebffff1c 	bl	20d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   210e0:	e51b3008 	ldr	r3, [fp, #-8]
   210e4:	e2833024 	add	r3, r3, #36	; 0x24
   210e8:	e1a00003 	mov	r0, r3
   210ec:	ebffff18 	bl	20d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   210f0:	ebfffd23 	bl	20584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   210f4:	e3a03001 	mov	r3, #1
}
   210f8:	e1a00003 	mov	r0, r3
   210fc:	e24bd004 	sub	sp, fp, #4
   21100:	e8bd8800 	pop	{fp, pc}

00021104 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   21104:	e92d4800 	push	{fp, lr}
   21108:	e28db004 	add	fp, sp, #4
   2110c:	e24dd020 	sub	sp, sp, #32
   21110:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21114:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   21118:	e1a03002 	mov	r3, r2
   2111c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   21120:	e3a03000 	mov	r3, #0
   21124:	e50b3008 	str	r3, [fp, #-8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   21128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2112c:	e3530000 	cmp	r3, #0
   21130:	0a000021 	beq	211bc <xQueueGenericCreate+0xb8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   21134:	e3a0004c 	mov	r0, #76	; 0x4c
   21138:	eb000b12 	bl	23d88 <pvPortMalloc>
   2113c:	e50b000c 	str	r0, [fp, #-12]
		if( pxNewQueue != NULL )
   21140:	e51b300c 	ldr	r3, [fp, #-12]
   21144:	e3530000 	cmp	r3, #0
   21148:	0a00001b 	beq	211bc <xQueueGenericCreate+0xb8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   2114c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21150:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   21154:	e0030392 	mul	r3, r2, r3
   21158:	e2833001 	add	r3, r3, #1
   2115c:	e50b3010 	str	r3, [fp, #-16]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   21160:	e51b0010 	ldr	r0, [fp, #-16]
   21164:	eb000b07 	bl	23d88 <pvPortMalloc>
   21168:	e1a02000 	mov	r2, r0
   2116c:	e51b300c 	ldr	r3, [fp, #-12]
   21170:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   21174:	e51b300c 	ldr	r3, [fp, #-12]
   21178:	e5933000 	ldr	r3, [r3]
   2117c:	e3530000 	cmp	r3, #0
   21180:	0a00000b 	beq	211b4 <xQueueGenericCreate+0xb0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   21184:	e51b300c 	ldr	r3, [fp, #-12]
   21188:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2118c:	e583203c 	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   21190:	e51b300c 	ldr	r3, [fp, #-12]
   21194:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   21198:	e5832040 	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   2119c:	e3a01001 	mov	r1, #1
   211a0:	e51b000c 	ldr	r0, [fp, #-12]
   211a4:	ebffff91 	bl	20ff0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   211a8:	e51b300c 	ldr	r3, [fp, #-12]
   211ac:	e50b3008 	str	r3, [fp, #-8]
   211b0:	ea000001 	b	211bc <xQueueGenericCreate+0xb8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   211b4:	e51b000c 	ldr	r0, [fp, #-12]
   211b8:	eb000b64 	bl	23f50 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   211bc:	e51b3008 	ldr	r3, [fp, #-8]
}
   211c0:	e1a00003 	mov	r0, r3
   211c4:	e24bd004 	sub	sp, fp, #4
   211c8:	e8bd8800 	pop	{fp, pc}

000211cc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   211cc:	e92d4800 	push	{fp, lr}
   211d0:	e28db004 	add	fp, sp, #4
   211d4:	e24dd020 	sub	sp, sp, #32
   211d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   211dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   211e0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   211e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   211e8:	e3a03000 	mov	r3, #0
   211ec:	e50b3008 	str	r3, [fp, #-8]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   211f0:	ebfffcd2 	bl	20540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   211f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   211f8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   211fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21200:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   21204:	e1520003 	cmp	r2, r3
   21208:	2a000012 	bcs	21258 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   2120c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   21210:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   21214:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21218:	eb00016a 	bl	217c8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   2121c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21220:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   21224:	e3530000 	cmp	r3, #0
   21228:	0a000007 	beq	2124c <xQueueGenericSend+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   2122c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21230:	e2833024 	add	r3, r3, #36	; 0x24
   21234:	e1a00003 	mov	r0, r3
   21238:	eb000700 	bl	22e40 <xTaskRemoveFromEventList>
   2123c:	e1a03000 	mov	r3, r0
   21240:	e3530001 	cmp	r3, #1
   21244:	1a000000 	bne	2124c <xQueueGenericSend+0x80>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   21248:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   2124c:	ebfffccc 	bl	20584 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   21250:	e3a03001 	mov	r3, #1
   21254:	ea000042 	b	21364 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   21258:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2125c:	e3530000 	cmp	r3, #0
   21260:	1a000002 	bne	21270 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   21264:	ebfffcc6 	bl	20584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   21268:	e3a03000 	mov	r3, #0
   2126c:	ea00003c 	b	21364 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
   21270:	e51b3008 	ldr	r3, [fp, #-8]
   21274:	e3530000 	cmp	r3, #0
   21278:	1a000004 	bne	21290 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   2127c:	e24b3010 	sub	r3, fp, #16
   21280:	e1a00003 	mov	r0, r3
   21284:	eb000733 	bl	22f58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   21288:	e3a03001 	mov	r3, #1
   2128c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   21290:	ebfffcbb 	bl	20584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   21294:	eb000513 	bl	226e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   21298:	ebfffca8 	bl	20540 <vPortEnterCritical>
   2129c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   212a4:	e3730001 	cmn	r3, #1
   212a8:	1a000002 	bne	212b8 <xQueueGenericSend+0xec>
   212ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212b0:	e3a02000 	mov	r2, #0
   212b4:	e5832044 	str	r2, [r3, #68]	; 0x44
   212b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212bc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   212c0:	e3730001 	cmn	r3, #1
   212c4:	1a000002 	bne	212d4 <xQueueGenericSend+0x108>
   212c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212cc:	e3a02000 	mov	r2, #0
   212d0:	e5832048 	str	r2, [r3, #72]	; 0x48
   212d4:	ebfffcaa 	bl	20584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   212d8:	e24b2020 	sub	r2, fp, #32
   212dc:	e24b3010 	sub	r3, fp, #16
   212e0:	e1a01002 	mov	r1, r2
   212e4:	e1a00003 	mov	r0, r3
   212e8:	eb00072c 	bl	22fa0 <xTaskCheckForTimeOut>
   212ec:	e1a03000 	mov	r3, r0
   212f0:	e3530000 	cmp	r3, #0
   212f4:	1a000016 	bne	21354 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   212f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   212fc:	eb000202 	bl	21b0c <prvIsQueueFull>
   21300:	e1a03000 	mov	r3, r0
   21304:	e3530000 	cmp	r3, #0
   21308:	0a00000d 	beq	21344 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   2130c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21310:	e2833010 	add	r3, r3, #16
   21314:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21318:	e1a01002 	mov	r1, r2
   2131c:	e1a00003 	mov	r0, r3
   21320:	eb00069f 	bl	22da4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   21324:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21328:	eb000195 	bl	21984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   2132c:	eb0004f9 	bl	22718 <xTaskResumeAll>
   21330:	e1a03000 	mov	r3, r0
   21334:	e3530000 	cmp	r3, #0
   21338:	1affffac 	bne	211f0 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
   2133c:	ef000000 	svc	0x00000000
   21340:	eaffffaa 	b	211f0 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   21344:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21348:	eb00018d 	bl	21984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   2134c:	eb0004f1 	bl	22718 <xTaskResumeAll>
   21350:	eaffffa6 	b	211f0 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   21354:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21358:	eb000189 	bl	21984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   2135c:	eb0004ed 	bl	22718 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   21360:	e3a03000 	mov	r3, #0
		}
	}
}
   21364:	e1a00003 	mov	r0, r3
   21368:	e24bd004 	sub	sp, fp, #4
   2136c:	e8bd8800 	pop	{fp, pc}

00021370 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   21370:	e92d4800 	push	{fp, lr}
   21374:	e28db004 	add	fp, sp, #4
   21378:	e24dd018 	sub	sp, sp, #24
   2137c:	e50b0010 	str	r0, [fp, #-16]
   21380:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   21384:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   21388:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   2138c:	e3a03000 	mov	r3, #0
   21390:	e50b300c 	str	r3, [fp, #-12]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   21394:	e51b3010 	ldr	r3, [fp, #-16]
   21398:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   2139c:	e51b3010 	ldr	r3, [fp, #-16]
   213a0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   213a4:	e1520003 	cmp	r2, r3
   213a8:	2a000021 	bcs	21434 <xQueueGenericSendFromISR+0xc4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   213ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   213b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   213b4:	e51b0010 	ldr	r0, [fp, #-16]
   213b8:	eb000102 	bl	217c8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   213bc:	e51b3010 	ldr	r3, [fp, #-16]
   213c0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   213c4:	e3730001 	cmn	r3, #1
   213c8:	1a000011 	bne	21414 <xQueueGenericSendFromISR+0xa4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   213cc:	e51b3010 	ldr	r3, [fp, #-16]
   213d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   213d4:	e3530000 	cmp	r3, #0
   213d8:	0a000012 	beq	21428 <xQueueGenericSendFromISR+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   213dc:	e51b3010 	ldr	r3, [fp, #-16]
   213e0:	e2833024 	add	r3, r3, #36	; 0x24
   213e4:	e1a00003 	mov	r0, r3
   213e8:	eb000694 	bl	22e40 <xTaskRemoveFromEventList>
   213ec:	e1a03000 	mov	r3, r0
   213f0:	e3530000 	cmp	r3, #0
   213f4:	0a00000b 	beq	21428 <xQueueGenericSendFromISR+0xb8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   213f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   213fc:	e3530000 	cmp	r3, #0
   21400:	0a000008 	beq	21428 <xQueueGenericSendFromISR+0xb8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   21404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21408:	e3a02001 	mov	r2, #1
   2140c:	e5832000 	str	r2, [r3]
   21410:	ea000004 	b	21428 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   21414:	e51b3010 	ldr	r3, [fp, #-16]
   21418:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   2141c:	e2832001 	add	r2, r3, #1
   21420:	e51b3010 	ldr	r3, [fp, #-16]
   21424:	e5832048 	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   21428:	e3a03001 	mov	r3, #1
   2142c:	e50b3008 	str	r3, [fp, #-8]
   21430:	ea000001 	b	2143c <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   21434:	e3a03000 	mov	r3, #0
   21438:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   2143c:	e51b3008 	ldr	r3, [fp, #-8]
}
   21440:	e1a00003 	mov	r0, r3
   21444:	e24bd004 	sub	sp, fp, #4
   21448:	e8bd8800 	pop	{fp, pc}

0002144c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   2144c:	e92d4800 	push	{fp, lr}
   21450:	e28db004 	add	fp, sp, #4
   21454:	e24dd020 	sub	sp, sp, #32
   21458:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2145c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   21460:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   21464:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   21468:	e3a03000 	mov	r3, #0
   2146c:	e50b3008 	str	r3, [fp, #-8]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   21470:	ebfffc32 	bl	20540 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   21474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21478:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2147c:	e3530000 	cmp	r3, #0
   21480:	0a00002c 	beq	21538 <xQueueGenericReceive+0xec>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   21484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21488:	e593300c 	ldr	r3, [r3, #12]
   2148c:	e50b300c 	str	r3, [fp, #-12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   21490:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   21494:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21498:	eb000115 	bl	218f4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   2149c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   214a0:	e3530000 	cmp	r3, #0
   214a4:	1a000011 	bne	214f0 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   214a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   214b0:	e2432001 	sub	r2, r3, #1
   214b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214b8:	e5832038 	str	r2, [r3, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   214bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214c0:	e5933010 	ldr	r3, [r3, #16]
   214c4:	e3530000 	cmp	r3, #0
   214c8:	0a000017 	beq	2152c <xQueueGenericReceive+0xe0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   214cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214d0:	e2833010 	add	r3, r3, #16
   214d4:	e1a00003 	mov	r0, r3
   214d8:	eb000658 	bl	22e40 <xTaskRemoveFromEventList>
   214dc:	e1a03000 	mov	r3, r0
   214e0:	e3530001 	cmp	r3, #1
   214e4:	1a000010 	bne	2152c <xQueueGenericReceive+0xe0>
						{
							portYIELD_WITHIN_API();
   214e8:	ef000000 	svc	0x00000000
   214ec:	ea00000e 	b	2152c <xQueueGenericReceive+0xe0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   214f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214f4:	e51b200c 	ldr	r2, [fp, #-12]
   214f8:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   214fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21500:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   21504:	e3530000 	cmp	r3, #0
   21508:	0a000007 	beq	2152c <xQueueGenericReceive+0xe0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   2150c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21510:	e2833024 	add	r3, r3, #36	; 0x24
   21514:	e1a00003 	mov	r0, r3
   21518:	eb000648 	bl	22e40 <xTaskRemoveFromEventList>
   2151c:	e1a03000 	mov	r3, r0
   21520:	e3530000 	cmp	r3, #0
   21524:	0a000000 	beq	2152c <xQueueGenericReceive+0xe0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   21528:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   2152c:	ebfffc14 	bl	20584 <vPortExitCritical>
				return pdPASS;
   21530:	e3a03001 	mov	r3, #1
   21534:	ea000042 	b	21644 <xQueueGenericReceive+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   21538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2153c:	e3530000 	cmp	r3, #0
   21540:	1a000002 	bne	21550 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   21544:	ebfffc0e 	bl	20584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   21548:	e3a03000 	mov	r3, #0
   2154c:	ea00003c 	b	21644 <xQueueGenericReceive+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
   21550:	e51b3008 	ldr	r3, [fp, #-8]
   21554:	e3530000 	cmp	r3, #0
   21558:	1a000004 	bne	21570 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   2155c:	e24b3014 	sub	r3, fp, #20
   21560:	e1a00003 	mov	r0, r3
   21564:	eb00067b 	bl	22f58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   21568:	e3a03001 	mov	r3, #1
   2156c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   21570:	ebfffc03 	bl	20584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   21574:	eb00045b 	bl	226e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   21578:	ebfffbf0 	bl	20540 <vPortEnterCritical>
   2157c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21580:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   21584:	e3730001 	cmn	r3, #1
   21588:	1a000002 	bne	21598 <xQueueGenericReceive+0x14c>
   2158c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21590:	e3a02000 	mov	r2, #0
   21594:	e5832044 	str	r2, [r3, #68]	; 0x44
   21598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2159c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   215a0:	e3730001 	cmn	r3, #1
   215a4:	1a000002 	bne	215b4 <xQueueGenericReceive+0x168>
   215a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   215ac:	e3a02000 	mov	r2, #0
   215b0:	e5832048 	str	r2, [r3, #72]	; 0x48
   215b4:	ebfffbf2 	bl	20584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   215b8:	e24b2020 	sub	r2, fp, #32
   215bc:	e24b3014 	sub	r3, fp, #20
   215c0:	e1a01002 	mov	r1, r2
   215c4:	e1a00003 	mov	r0, r3
   215c8:	eb000674 	bl	22fa0 <xTaskCheckForTimeOut>
   215cc:	e1a03000 	mov	r3, r0
   215d0:	e3530000 	cmp	r3, #0
   215d4:	1a000016 	bne	21634 <xQueueGenericReceive+0x1e8>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   215d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   215dc:	eb000129 	bl	21a88 <prvIsQueueEmpty>
   215e0:	e1a03000 	mov	r3, r0
   215e4:	e3530000 	cmp	r3, #0
   215e8:	0a00000d 	beq	21624 <xQueueGenericReceive+0x1d8>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   215ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   215f0:	e2833024 	add	r3, r3, #36	; 0x24
   215f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   215f8:	e1a01002 	mov	r1, r2
   215fc:	e1a00003 	mov	r0, r3
   21600:	eb0005e7 	bl	22da4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   21604:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21608:	eb0000dd 	bl	21984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   2160c:	eb000441 	bl	22718 <xTaskResumeAll>
   21610:	e1a03000 	mov	r3, r0
   21614:	e3530000 	cmp	r3, #0
   21618:	1affff94 	bne	21470 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
   2161c:	ef000000 	svc	0x00000000
   21620:	eaffff92 	b	21470 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   21624:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21628:	eb0000d5 	bl	21984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   2162c:	eb000439 	bl	22718 <xTaskResumeAll>
   21630:	eaffff8e 	b	21470 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   21634:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21638:	eb0000d1 	bl	21984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   2163c:	eb000435 	bl	22718 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   21640:	e3a03000 	mov	r3, #0
		}
	}
}
   21644:	e1a00003 	mov	r0, r3
   21648:	e24bd004 	sub	sp, fp, #4
   2164c:	e8bd8800 	pop	{fp, pc}

00021650 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   21650:	e92d4800 	push	{fp, lr}
   21654:	e28db004 	add	fp, sp, #4
   21658:	e24dd018 	sub	sp, sp, #24
   2165c:	e50b0010 	str	r0, [fp, #-16]
   21660:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   21664:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   21668:	e3a03000 	mov	r3, #0
   2166c:	e50b300c 	str	r3, [fp, #-12]
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   21670:	e51b3010 	ldr	r3, [fp, #-16]
   21674:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   21678:	e3530000 	cmp	r3, #0
   2167c:	0a000025 	beq	21718 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   21680:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   21684:	e51b0010 	ldr	r0, [fp, #-16]
   21688:	eb000099 	bl	218f4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   2168c:	e51b3010 	ldr	r3, [fp, #-16]
   21690:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   21694:	e2432001 	sub	r2, r3, #1
   21698:	e51b3010 	ldr	r3, [fp, #-16]
   2169c:	e5832038 	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   216a0:	e51b3010 	ldr	r3, [fp, #-16]
   216a4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   216a8:	e3730001 	cmn	r3, #1
   216ac:	1a000011 	bne	216f8 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   216b0:	e51b3010 	ldr	r3, [fp, #-16]
   216b4:	e5933010 	ldr	r3, [r3, #16]
   216b8:	e3530000 	cmp	r3, #0
   216bc:	0a000012 	beq	2170c <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   216c0:	e51b3010 	ldr	r3, [fp, #-16]
   216c4:	e2833010 	add	r3, r3, #16
   216c8:	e1a00003 	mov	r0, r3
   216cc:	eb0005db 	bl	22e40 <xTaskRemoveFromEventList>
   216d0:	e1a03000 	mov	r3, r0
   216d4:	e3530000 	cmp	r3, #0
   216d8:	0a00000b 	beq	2170c <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   216dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   216e0:	e3530000 	cmp	r3, #0
   216e4:	0a000008 	beq	2170c <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   216e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   216ec:	e3a02001 	mov	r2, #1
   216f0:	e5832000 	str	r2, [r3]
   216f4:	ea000004 	b	2170c <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   216f8:	e51b3010 	ldr	r3, [fp, #-16]
   216fc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   21700:	e2832001 	add	r2, r3, #1
   21704:	e51b3010 	ldr	r3, [fp, #-16]
   21708:	e5832044 	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   2170c:	e3a03001 	mov	r3, #1
   21710:	e50b3008 	str	r3, [fp, #-8]
   21714:	ea000001 	b	21720 <xQueueReceiveFromISR+0xd0>
		}
		else
		{
			xReturn = pdFAIL;
   21718:	e3a03000 	mov	r3, #0
   2171c:	e50b3008 	str	r3, [fp, #-8]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   21720:	e51b3008 	ldr	r3, [fp, #-8]
}
   21724:	e1a00003 	mov	r0, r3
   21728:	e24bd004 	sub	sp, fp, #4
   2172c:	e8bd8800 	pop	{fp, pc}

00021730 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   21730:	e92d4800 	push	{fp, lr}
   21734:	e28db004 	add	fp, sp, #4
   21738:	e24dd010 	sub	sp, sp, #16
   2173c:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   21740:	ebfffb7e 	bl	20540 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   21744:	e51b3010 	ldr	r3, [fp, #-16]
   21748:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2174c:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21750:	ebfffb8b 	bl	20584 <vPortExitCritical>

	return uxReturn;
   21754:	e51b3008 	ldr	r3, [fp, #-8]
}
   21758:	e1a00003 	mov	r0, r3
   2175c:	e24bd004 	sub	sp, fp, #4
   21760:	e8bd8800 	pop	{fp, pc}

00021764 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   21764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   21768:	e28db000 	add	fp, sp, #0
   2176c:	e24dd014 	sub	sp, sp, #20
   21770:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   21774:	e51b3010 	ldr	r3, [fp, #-16]
   21778:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2177c:	e50b3008 	str	r3, [fp, #-8]

	return uxReturn;
   21780:	e51b3008 	ldr	r3, [fp, #-8]
}
   21784:	e1a00003 	mov	r0, r3
   21788:	e28bd000 	add	sp, fp, #0
   2178c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   21790:	e12fff1e 	bx	lr

00021794 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   21794:	e92d4800 	push	{fp, lr}
   21798:	e28db004 	add	fp, sp, #4
   2179c:	e24dd008 	sub	sp, sp, #8
   217a0:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   217a4:	e51b3008 	ldr	r3, [fp, #-8]
   217a8:	e5933000 	ldr	r3, [r3]
   217ac:	e1a00003 	mov	r0, r3
   217b0:	eb0009e6 	bl	23f50 <vPortFree>
	vPortFree( pxQueue );
   217b4:	e51b0008 	ldr	r0, [fp, #-8]
   217b8:	eb0009e4 	bl	23f50 <vPortFree>
}
   217bc:	e320f000 	nop	{0}
   217c0:	e24bd004 	sub	sp, fp, #4
   217c4:	e8bd8800 	pop	{fp, pc}

000217c8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   217c8:	e92d4800 	push	{fp, lr}
   217cc:	e28db004 	add	fp, sp, #4
   217d0:	e24dd010 	sub	sp, sp, #16
   217d4:	e50b0008 	str	r0, [fp, #-8]
   217d8:	e50b100c 	str	r1, [fp, #-12]
   217dc:	e50b2010 	str	r2, [fp, #-16]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   217e0:	e51b3008 	ldr	r3, [fp, #-8]
   217e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   217e8:	e3530000 	cmp	r3, #0
   217ec:	0a000038 	beq	218d4 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   217f0:	e51b3010 	ldr	r3, [fp, #-16]
   217f4:	e3530000 	cmp	r3, #0
   217f8:	1a000018 	bne	21860 <prvCopyDataToQueue+0x98>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   217fc:	e51b3008 	ldr	r3, [fp, #-8]
   21800:	e5930008 	ldr	r0, [r3, #8]
   21804:	e51b3008 	ldr	r3, [fp, #-8]
   21808:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2180c:	e1a02003 	mov	r2, r3
   21810:	e51b100c 	ldr	r1, [fp, #-12]
   21814:	eb00277d 	bl	2b610 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   21818:	e51b3008 	ldr	r3, [fp, #-8]
   2181c:	e5932008 	ldr	r2, [r3, #8]
   21820:	e51b3008 	ldr	r3, [fp, #-8]
   21824:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   21828:	e0822003 	add	r2, r2, r3
   2182c:	e51b3008 	ldr	r3, [fp, #-8]
   21830:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   21834:	e51b3008 	ldr	r3, [fp, #-8]
   21838:	e5932008 	ldr	r2, [r3, #8]
   2183c:	e51b3008 	ldr	r3, [fp, #-8]
   21840:	e5933004 	ldr	r3, [r3, #4]
   21844:	e1520003 	cmp	r2, r3
   21848:	3a000021 	bcc	218d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   2184c:	e51b3008 	ldr	r3, [fp, #-8]
   21850:	e5932000 	ldr	r2, [r3]
   21854:	e51b3008 	ldr	r3, [fp, #-8]
   21858:	e5832008 	str	r2, [r3, #8]
   2185c:	ea00001c 	b	218d4 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   21860:	e51b3008 	ldr	r3, [fp, #-8]
   21864:	e593000c 	ldr	r0, [r3, #12]
   21868:	e51b3008 	ldr	r3, [fp, #-8]
   2186c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   21870:	e1a02003 	mov	r2, r3
   21874:	e51b100c 	ldr	r1, [fp, #-12]
   21878:	eb002764 	bl	2b610 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   2187c:	e51b3008 	ldr	r3, [fp, #-8]
   21880:	e593200c 	ldr	r2, [r3, #12]
   21884:	e51b3008 	ldr	r3, [fp, #-8]
   21888:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2188c:	e2633000 	rsb	r3, r3, #0
   21890:	e0822003 	add	r2, r2, r3
   21894:	e51b3008 	ldr	r3, [fp, #-8]
   21898:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   2189c:	e51b3008 	ldr	r3, [fp, #-8]
   218a0:	e593200c 	ldr	r2, [r3, #12]
   218a4:	e51b3008 	ldr	r3, [fp, #-8]
   218a8:	e5933000 	ldr	r3, [r3]
   218ac:	e1520003 	cmp	r2, r3
   218b0:	2a000007 	bcs	218d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   218b4:	e51b3008 	ldr	r3, [fp, #-8]
   218b8:	e5932004 	ldr	r2, [r3, #4]
   218bc:	e51b3008 	ldr	r3, [fp, #-8]
   218c0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   218c4:	e2633000 	rsb	r3, r3, #0
   218c8:	e0822003 	add	r2, r2, r3
   218cc:	e51b3008 	ldr	r3, [fp, #-8]
   218d0:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   218d4:	e51b3008 	ldr	r3, [fp, #-8]
   218d8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   218dc:	e2832001 	add	r2, r3, #1
   218e0:	e51b3008 	ldr	r3, [fp, #-8]
   218e4:	e5832038 	str	r2, [r3, #56]	; 0x38
}
   218e8:	e320f000 	nop	{0}
   218ec:	e24bd004 	sub	sp, fp, #4
   218f0:	e8bd8800 	pop	{fp, pc}

000218f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   218f4:	e92d4800 	push	{fp, lr}
   218f8:	e28db004 	add	fp, sp, #4
   218fc:	e24dd008 	sub	sp, sp, #8
   21900:	e50b0008 	str	r0, [fp, #-8]
   21904:	e50b100c 	str	r1, [fp, #-12]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   21908:	e51b3008 	ldr	r3, [fp, #-8]
   2190c:	e5933000 	ldr	r3, [r3]
   21910:	e3530000 	cmp	r3, #0
   21914:	0a000017 	beq	21978 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   21918:	e51b3008 	ldr	r3, [fp, #-8]
   2191c:	e593200c 	ldr	r2, [r3, #12]
   21920:	e51b3008 	ldr	r3, [fp, #-8]
   21924:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   21928:	e0822003 	add	r2, r2, r3
   2192c:	e51b3008 	ldr	r3, [fp, #-8]
   21930:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   21934:	e51b3008 	ldr	r3, [fp, #-8]
   21938:	e593200c 	ldr	r2, [r3, #12]
   2193c:	e51b3008 	ldr	r3, [fp, #-8]
   21940:	e5933004 	ldr	r3, [r3, #4]
   21944:	e1520003 	cmp	r2, r3
   21948:	3a000003 	bcc	2195c <prvCopyDataFromQueue+0x68>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   2194c:	e51b3008 	ldr	r3, [fp, #-8]
   21950:	e5932000 	ldr	r2, [r3]
   21954:	e51b3008 	ldr	r3, [fp, #-8]
   21958:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   2195c:	e51b3008 	ldr	r3, [fp, #-8]
   21960:	e593100c 	ldr	r1, [r3, #12]
   21964:	e51b3008 	ldr	r3, [fp, #-8]
   21968:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2196c:	e1a02003 	mov	r2, r3
   21970:	e51b000c 	ldr	r0, [fp, #-12]
   21974:	eb002725 	bl	2b610 <memcpy>
	}
}
   21978:	e320f000 	nop	{0}
   2197c:	e24bd004 	sub	sp, fp, #4
   21980:	e8bd8800 	pop	{fp, pc}

00021984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   21984:	e92d4800 	push	{fp, lr}
   21988:	e28db004 	add	fp, sp, #4
   2198c:	e24dd008 	sub	sp, sp, #8
   21990:	e50b0008 	str	r0, [fp, #-8]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   21994:	ebfffae9 	bl	20540 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   21998:	ea000010 	b	219e0 <prvUnlockQueue+0x5c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   2199c:	e51b3008 	ldr	r3, [fp, #-8]
   219a0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   219a4:	e3530000 	cmp	r3, #0
   219a8:	0a000011 	beq	219f4 <prvUnlockQueue+0x70>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   219ac:	e51b3008 	ldr	r3, [fp, #-8]
   219b0:	e2833024 	add	r3, r3, #36	; 0x24
   219b4:	e1a00003 	mov	r0, r3
   219b8:	eb000520 	bl	22e40 <xTaskRemoveFromEventList>
   219bc:	e1a03000 	mov	r3, r0
   219c0:	e3530000 	cmp	r3, #0
   219c4:	0a000000 	beq	219cc <prvUnlockQueue+0x48>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   219c8:	eb0005b1 	bl	23094 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   219cc:	e51b3008 	ldr	r3, [fp, #-8]
   219d0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   219d4:	e2432001 	sub	r2, r3, #1
   219d8:	e51b3008 	ldr	r3, [fp, #-8]
   219dc:	e5832048 	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   219e0:	e51b3008 	ldr	r3, [fp, #-8]
   219e4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   219e8:	e3530000 	cmp	r3, #0
   219ec:	caffffea 	bgt	2199c <prvUnlockQueue+0x18>
   219f0:	ea000000 	b	219f8 <prvUnlockQueue+0x74>
			}
			else
			{
				break;
   219f4:	e320f000 	nop	{0}
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   219f8:	e51b3008 	ldr	r3, [fp, #-8]
   219fc:	e3e02000 	mvn	r2, #0
   21a00:	e5832048 	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   21a04:	ebfffade 	bl	20584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   21a08:	ebfffacc 	bl	20540 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   21a0c:	ea000010 	b	21a54 <prvUnlockQueue+0xd0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21a10:	e51b3008 	ldr	r3, [fp, #-8]
   21a14:	e5933010 	ldr	r3, [r3, #16]
   21a18:	e3530000 	cmp	r3, #0
   21a1c:	0a000011 	beq	21a68 <prvUnlockQueue+0xe4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21a20:	e51b3008 	ldr	r3, [fp, #-8]
   21a24:	e2833010 	add	r3, r3, #16
   21a28:	e1a00003 	mov	r0, r3
   21a2c:	eb000503 	bl	22e40 <xTaskRemoveFromEventList>
   21a30:	e1a03000 	mov	r3, r0
   21a34:	e3530000 	cmp	r3, #0
   21a38:	0a000000 	beq	21a40 <prvUnlockQueue+0xbc>
				{
					vTaskMissedYield();
   21a3c:	eb000594 	bl	23094 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   21a40:	e51b3008 	ldr	r3, [fp, #-8]
   21a44:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   21a48:	e2432001 	sub	r2, r3, #1
   21a4c:	e51b3008 	ldr	r3, [fp, #-8]
   21a50:	e5832044 	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   21a54:	e51b3008 	ldr	r3, [fp, #-8]
   21a58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   21a5c:	e3530000 	cmp	r3, #0
   21a60:	caffffea 	bgt	21a10 <prvUnlockQueue+0x8c>
   21a64:	ea000000 	b	21a6c <prvUnlockQueue+0xe8>
			}
			else
			{
				break;
   21a68:	e320f000 	nop	{0}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   21a6c:	e51b3008 	ldr	r3, [fp, #-8]
   21a70:	e3e02000 	mvn	r2, #0
   21a74:	e5832044 	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   21a78:	ebfffac1 	bl	20584 <vPortExitCritical>
}
   21a7c:	e320f000 	nop	{0}
   21a80:	e24bd004 	sub	sp, fp, #4
   21a84:	e8bd8800 	pop	{fp, pc}

00021a88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   21a88:	e92d4800 	push	{fp, lr}
   21a8c:	e28db004 	add	fp, sp, #4
   21a90:	e24dd010 	sub	sp, sp, #16
   21a94:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   21a98:	ebfffaa8 	bl	20540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   21a9c:	e51b3010 	ldr	r3, [fp, #-16]
   21aa0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   21aa4:	e3530000 	cmp	r3, #0
   21aa8:	03a03001 	moveq	r3, #1
   21aac:	13a03000 	movne	r3, #0
   21ab0:	e6ef3073 	uxtb	r3, r3
   21ab4:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21ab8:	ebfffab1 	bl	20584 <vPortExitCritical>

	return xReturn;
   21abc:	e51b3008 	ldr	r3, [fp, #-8]
}
   21ac0:	e1a00003 	mov	r0, r3
   21ac4:	e24bd004 	sub	sp, fp, #4
   21ac8:	e8bd8800 	pop	{fp, pc}

00021acc <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   21acc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   21ad0:	e28db000 	add	fp, sp, #0
   21ad4:	e24dd014 	sub	sp, sp, #20
   21ad8:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   21adc:	e51b3010 	ldr	r3, [fp, #-16]
   21ae0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   21ae4:	e3530000 	cmp	r3, #0
   21ae8:	03a03001 	moveq	r3, #1
   21aec:	13a03000 	movne	r3, #0
   21af0:	e6ef3073 	uxtb	r3, r3
   21af4:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   21af8:	e51b3008 	ldr	r3, [fp, #-8]
}
   21afc:	e1a00003 	mov	r0, r3
   21b00:	e28bd000 	add	sp, fp, #0
   21b04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   21b08:	e12fff1e 	bx	lr

00021b0c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   21b0c:	e92d4800 	push	{fp, lr}
   21b10:	e28db004 	add	fp, sp, #4
   21b14:	e24dd010 	sub	sp, sp, #16
   21b18:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   21b1c:	ebfffa87 	bl	20540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   21b20:	e51b3010 	ldr	r3, [fp, #-16]
   21b24:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   21b28:	e51b3010 	ldr	r3, [fp, #-16]
   21b2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   21b30:	e1520003 	cmp	r2, r3
   21b34:	03a03001 	moveq	r3, #1
   21b38:	13a03000 	movne	r3, #0
   21b3c:	e6ef3073 	uxtb	r3, r3
   21b40:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21b44:	ebfffa8e 	bl	20584 <vPortExitCritical>

	return xReturn;
   21b48:	e51b3008 	ldr	r3, [fp, #-8]
}
   21b4c:	e1a00003 	mov	r0, r3
   21b50:	e24bd004 	sub	sp, fp, #4
   21b54:	e8bd8800 	pop	{fp, pc}

00021b58 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   21b58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   21b5c:	e28db000 	add	fp, sp, #0
   21b60:	e24dd014 	sub	sp, sp, #20
   21b64:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   21b68:	e51b3010 	ldr	r3, [fp, #-16]
   21b6c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   21b70:	e51b3010 	ldr	r3, [fp, #-16]
   21b74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   21b78:	e1520003 	cmp	r2, r3
   21b7c:	03a03001 	moveq	r3, #1
   21b80:	13a03000 	movne	r3, #0
   21b84:	e6ef3073 	uxtb	r3, r3
   21b88:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   21b8c:	e51b3008 	ldr	r3, [fp, #-8]
}
   21b90:	e1a00003 	mov	r0, r3
   21b94:	e28bd000 	add	sp, fp, #0
   21b98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   21b9c:	e12fff1e 	bx	lr

00021ba0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   21ba0:	e92d4800 	push	{fp, lr}
   21ba4:	e28db004 	add	fp, sp, #4
   21ba8:	e24dd028 	sub	sp, sp, #40	; 0x28
   21bac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21bb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   21bb4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   21bb8:	e1a03002 	mov	r3, r2
   21bbc:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   21bc0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   21bc4:	e59b100c 	ldr	r1, [fp, #12]
   21bc8:	e1a00003 	mov	r0, r3
   21bcc:	eb000603 	bl	233e0 <prvAllocateTCBAndStack>
   21bd0:	e50b000c 	str	r0, [fp, #-12]

	if( pxNewTCB != NULL )
   21bd4:	e51b300c 	ldr	r3, [fp, #-12]
   21bd8:	e3530000 	cmp	r3, #0
   21bdc:	0a000067 	beq	21d80 <xTaskGenericCreate+0x1e0>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   21be0:	e51b300c 	ldr	r3, [fp, #-12]
   21be4:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   21be8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   21bec:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   21bf0:	e1a03103 	lsl	r3, r3, #2
   21bf4:	e0823003 	add	r3, r2, r3
   21bf8:	e50b3010 	str	r3, [fp, #-16]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   21bfc:	e51b3010 	ldr	r3, [fp, #-16]
   21c00:	e3c33007 	bic	r3, r3, #7
   21c04:	e50b3010 	str	r3, [fp, #-16]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   21c08:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   21c0c:	e58d3000 	str	r3, [sp]
   21c10:	e59b3010 	ldr	r3, [fp, #16]
   21c14:	e59b2004 	ldr	r2, [fp, #4]
   21c18:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   21c1c:	e51b000c 	ldr	r0, [fp, #-12]
   21c20:	eb000531 	bl	230ec <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   21c24:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   21c28:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   21c2c:	e51b0010 	ldr	r0, [fp, #-16]
   21c30:	ebfff8f2 	bl	20000 <pxPortInitialiseStack>
   21c34:	e1a02000 	mov	r2, r0
   21c38:	e51b300c 	ldr	r3, [fp, #-12]
   21c3c:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   21c40:	e59b3008 	ldr	r3, [fp, #8]
   21c44:	e3530000 	cmp	r3, #0
   21c48:	0a000002 	beq	21c58 <xTaskGenericCreate+0xb8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   21c4c:	e59b3008 	ldr	r3, [fp, #8]
   21c50:	e51b200c 	ldr	r2, [fp, #-12]
   21c54:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   21c58:	ebfffa38 	bl	20540 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   21c5c:	e59f316c 	ldr	r3, [pc, #364]	; 21dd0 <xTaskGenericCreate+0x230>
   21c60:	e5933000 	ldr	r3, [r3]
   21c64:	e2833001 	add	r3, r3, #1
   21c68:	e59f2160 	ldr	r2, [pc, #352]	; 21dd0 <xTaskGenericCreate+0x230>
   21c6c:	e5823000 	str	r3, [r2]
			if( pxCurrentTCB == NULL )
   21c70:	e59f315c 	ldr	r3, [pc, #348]	; 21dd4 <xTaskGenericCreate+0x234>
   21c74:	e5933000 	ldr	r3, [r3]
   21c78:	e3530000 	cmp	r3, #0
   21c7c:	1a000008 	bne	21ca4 <xTaskGenericCreate+0x104>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   21c80:	e59f214c 	ldr	r2, [pc, #332]	; 21dd4 <xTaskGenericCreate+0x234>
   21c84:	e51b300c 	ldr	r3, [fp, #-12]
   21c88:	e5823000 	str	r3, [r2]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   21c8c:	e59f313c 	ldr	r3, [pc, #316]	; 21dd0 <xTaskGenericCreate+0x230>
   21c90:	e5933000 	ldr	r3, [r3]
   21c94:	e3530001 	cmp	r3, #1
   21c98:	1a00000e 	bne	21cd8 <xTaskGenericCreate+0x138>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   21c9c:	eb000542 	bl	231ac <prvInitialiseTaskLists>
   21ca0:	ea00000c 	b	21cd8 <xTaskGenericCreate+0x138>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   21ca4:	e59f312c 	ldr	r3, [pc, #300]	; 21dd8 <xTaskGenericCreate+0x238>
   21ca8:	e5933000 	ldr	r3, [r3]
   21cac:	e3530000 	cmp	r3, #0
   21cb0:	1a000008 	bne	21cd8 <xTaskGenericCreate+0x138>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   21cb4:	e59f3118 	ldr	r3, [pc, #280]	; 21dd4 <xTaskGenericCreate+0x234>
   21cb8:	e5933000 	ldr	r3, [r3]
   21cbc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   21cc0:	e59b2004 	ldr	r2, [fp, #4]
   21cc4:	e1520003 	cmp	r2, r3
   21cc8:	3a000002 	bcc	21cd8 <xTaskGenericCreate+0x138>
					{
						pxCurrentTCB = pxNewTCB;
   21ccc:	e59f2100 	ldr	r2, [pc, #256]	; 21dd4 <xTaskGenericCreate+0x234>
   21cd0:	e51b300c 	ldr	r3, [fp, #-12]
   21cd4:	e5823000 	str	r3, [r2]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   21cd8:	e51b300c 	ldr	r3, [fp, #-12]
   21cdc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   21ce0:	e59f30f4 	ldr	r3, [pc, #244]	; 21ddc <xTaskGenericCreate+0x23c>
   21ce4:	e5933000 	ldr	r3, [r3]
   21ce8:	e1520003 	cmp	r2, r3
   21cec:	9a000003 	bls	21d00 <xTaskGenericCreate+0x160>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   21cf0:	e51b300c 	ldr	r3, [fp, #-12]
   21cf4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   21cf8:	e59f20dc 	ldr	r2, [pc, #220]	; 21ddc <xTaskGenericCreate+0x23c>
   21cfc:	e5823000 	str	r3, [r2]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   21d00:	e59f30d8 	ldr	r3, [pc, #216]	; 21de0 <xTaskGenericCreate+0x240>
   21d04:	e5933000 	ldr	r3, [r3]
   21d08:	e2833001 	add	r3, r3, #1
   21d0c:	e59f20cc 	ldr	r2, [pc, #204]	; 21de0 <xTaskGenericCreate+0x240>
   21d10:	e5823000 	str	r3, [r2]

			prvAddTaskToReadyQueue( pxNewTCB );
   21d14:	e51b300c 	ldr	r3, [fp, #-12]
   21d18:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   21d1c:	e59f30c0 	ldr	r3, [pc, #192]	; 21de4 <xTaskGenericCreate+0x244>
   21d20:	e5933000 	ldr	r3, [r3]
   21d24:	e1520003 	cmp	r2, r3
   21d28:	9a000003 	bls	21d3c <xTaskGenericCreate+0x19c>
   21d2c:	e51b300c 	ldr	r3, [fp, #-12]
   21d30:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   21d34:	e59f20a8 	ldr	r2, [pc, #168]	; 21de4 <xTaskGenericCreate+0x244>
   21d38:	e5823000 	str	r3, [r2]
   21d3c:	e51b300c 	ldr	r3, [fp, #-12]
   21d40:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   21d44:	e1a03002 	mov	r3, r2
   21d48:	e1a03103 	lsl	r3, r3, #2
   21d4c:	e0833002 	add	r3, r3, r2
   21d50:	e1a03103 	lsl	r3, r3, #2
   21d54:	e59f208c 	ldr	r2, [pc, #140]	; 21de8 <xTaskGenericCreate+0x248>
   21d58:	e0832002 	add	r2, r3, r2
   21d5c:	e51b300c 	ldr	r3, [fp, #-12]
   21d60:	e2833004 	add	r3, r3, #4
   21d64:	e1a01003 	mov	r1, r3
   21d68:	e1a00002 	mov	r0, r2
   21d6c:	ebfffc1d 	bl	20de8 <vListInsertEnd>

			xReturn = pdPASS;
   21d70:	e3a03001 	mov	r3, #1
   21d74:	e50b3008 	str	r3, [fp, #-8]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   21d78:	ebfffa01 	bl	20584 <vPortExitCritical>
   21d7c:	ea000001 	b	21d88 <xTaskGenericCreate+0x1e8>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   21d80:	e3e03000 	mvn	r3, #0
   21d84:	e50b3008 	str	r3, [fp, #-8]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   21d88:	e51b3008 	ldr	r3, [fp, #-8]
   21d8c:	e3530001 	cmp	r3, #1
   21d90:	1a00000a 	bne	21dc0 <xTaskGenericCreate+0x220>
	{
		if( xSchedulerRunning != pdFALSE )
   21d94:	e59f303c 	ldr	r3, [pc, #60]	; 21dd8 <xTaskGenericCreate+0x238>
   21d98:	e5933000 	ldr	r3, [r3]
   21d9c:	e3530000 	cmp	r3, #0
   21da0:	0a000006 	beq	21dc0 <xTaskGenericCreate+0x220>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   21da4:	e59f3028 	ldr	r3, [pc, #40]	; 21dd4 <xTaskGenericCreate+0x234>
   21da8:	e5933000 	ldr	r3, [r3]
   21dac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   21db0:	e59b2004 	ldr	r2, [fp, #4]
   21db4:	e1520003 	cmp	r2, r3
   21db8:	9a000000 	bls	21dc0 <xTaskGenericCreate+0x220>
			{
				portYIELD_WITHIN_API();
   21dbc:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   21dc0:	e51b3008 	ldr	r3, [fp, #-8]
}
   21dc4:	e1a00003 	mov	r0, r3
   21dc8:	e24bd004 	sub	sp, fp, #4
   21dcc:	e8bd8800 	pop	{fp, pc}
   21dd0:	0002c3ac 	andeq	ip, r2, ip, lsr #7
   21dd4:	0002c2d4 	ldrdeq	ip, [r2], -r4
   21dd8:	0002c3bc 			; <UNDEFINED> instruction: 0x0002c3bc
   21ddc:	0002c3b4 			; <UNDEFINED> instruction: 0x0002c3b4
   21de0:	0002c3d0 	ldrdeq	ip, [r2], -r0
   21de4:	0002c3b8 			; <UNDEFINED> instruction: 0x0002c3b8
   21de8:	0002c2d8 	ldrdeq	ip, [r2], -r8

00021dec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   21dec:	e92d4800 	push	{fp, lr}
   21df0:	e28db004 	add	fp, sp, #4
   21df4:	e24dd010 	sub	sp, sp, #16
   21df8:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   21dfc:	ebfff9cf 	bl	20540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   21e00:	e59f30d0 	ldr	r3, [pc, #208]	; 21ed8 <vTaskDelete+0xec>
   21e04:	e5933000 	ldr	r3, [r3]
   21e08:	e51b2010 	ldr	r2, [fp, #-16]
   21e0c:	e1520003 	cmp	r2, r3
   21e10:	1a000001 	bne	21e1c <vTaskDelete+0x30>
			{
				pxTaskToDelete = NULL;
   21e14:	e3a03000 	mov	r3, #0
   21e18:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   21e1c:	e51b3010 	ldr	r3, [fp, #-16]
   21e20:	e3530000 	cmp	r3, #0
   21e24:	1a000002 	bne	21e34 <vTaskDelete+0x48>
   21e28:	e59f30a8 	ldr	r3, [pc, #168]	; 21ed8 <vTaskDelete+0xec>
   21e2c:	e5933000 	ldr	r3, [r3]
   21e30:	ea000000 	b	21e38 <vTaskDelete+0x4c>
   21e34:	e51b3010 	ldr	r3, [fp, #-16]
   21e38:	e50b3008 	str	r3, [fp, #-8]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   21e3c:	e51b3008 	ldr	r3, [fp, #-8]
   21e40:	e2833004 	add	r3, r3, #4
   21e44:	e1a00003 	mov	r0, r3
   21e48:	ebfffc42 	bl	20f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   21e4c:	e51b3008 	ldr	r3, [fp, #-8]
   21e50:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   21e54:	e3530000 	cmp	r3, #0
   21e58:	0a000003 	beq	21e6c <vTaskDelete+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   21e5c:	e51b3008 	ldr	r3, [fp, #-8]
   21e60:	e2833018 	add	r3, r3, #24
   21e64:	e1a00003 	mov	r0, r3
   21e68:	ebfffc3a 	bl	20f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   21e6c:	e51b3008 	ldr	r3, [fp, #-8]
   21e70:	e2833004 	add	r3, r3, #4
   21e74:	e1a01003 	mov	r1, r3
   21e78:	e59f005c 	ldr	r0, [pc, #92]	; 21edc <vTaskDelete+0xf0>
   21e7c:	ebfffbd9 	bl	20de8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   21e80:	e59f3058 	ldr	r3, [pc, #88]	; 21ee0 <vTaskDelete+0xf4>
   21e84:	e5933000 	ldr	r3, [r3]
   21e88:	e2833001 	add	r3, r3, #1
   21e8c:	e59f204c 	ldr	r2, [pc, #76]	; 21ee0 <vTaskDelete+0xf4>
   21e90:	e5823000 	str	r3, [r2]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   21e94:	e59f3048 	ldr	r3, [pc, #72]	; 21ee4 <vTaskDelete+0xf8>
   21e98:	e5933000 	ldr	r3, [r3]
   21e9c:	e2833001 	add	r3, r3, #1
   21ea0:	e59f203c 	ldr	r2, [pc, #60]	; 21ee4 <vTaskDelete+0xf8>
   21ea4:	e5823000 	str	r3, [r2]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   21ea8:	ebfff9b5 	bl	20584 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   21eac:	e59f3034 	ldr	r3, [pc, #52]	; 21ee8 <vTaskDelete+0xfc>
   21eb0:	e5933000 	ldr	r3, [r3]
   21eb4:	e3530000 	cmp	r3, #0
   21eb8:	0a000003 	beq	21ecc <vTaskDelete+0xe0>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   21ebc:	e51b3010 	ldr	r3, [fp, #-16]
   21ec0:	e3530000 	cmp	r3, #0
   21ec4:	1a000000 	bne	21ecc <vTaskDelete+0xe0>
			{
				portYIELD_WITHIN_API();
   21ec8:	ef000000 	svc	0x00000000
			}
		}
	}
   21ecc:	e320f000 	nop	{0}
   21ed0:	e24bd004 	sub	sp, fp, #4
   21ed4:	e8bd8800 	pop	{fp, pc}
   21ed8:	0002c2d4 	ldrdeq	ip, [r2], -r4
   21edc:	0002c380 	andeq	ip, r2, r0, lsl #7
   21ee0:	0002c394 	muleq	r2, r4, r3
   21ee4:	0002c3d0 	ldrdeq	ip, [r2], -r0
   21ee8:	0002c3bc 			; <UNDEFINED> instruction: 0x0002c3bc

00021eec <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   21eec:	e92d4800 	push	{fp, lr}
   21ef0:	e28db004 	add	fp, sp, #4
   21ef4:	e24dd018 	sub	sp, sp, #24
   21ef8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21efc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   21f00:	e3a03000 	mov	r3, #0
   21f04:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   21f08:	eb0001f6 	bl	226e8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   21f0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f10:	e5933000 	ldr	r3, [r3]
   21f14:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   21f18:	e0823003 	add	r3, r2, r3
   21f1c:	e50b300c 	str	r3, [fp, #-12]

			if( xTickCount < *pxPreviousWakeTime )
   21f20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f24:	e5932000 	ldr	r2, [r3]
   21f28:	e59f30c4 	ldr	r3, [pc, #196]	; 21ff4 <vTaskDelayUntil+0x108>
   21f2c:	e5933000 	ldr	r3, [r3]
   21f30:	e1520003 	cmp	r2, r3
   21f34:	9a00000c 	bls	21f6c <vTaskDelayUntil+0x80>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   21f38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f3c:	e5933000 	ldr	r3, [r3]
   21f40:	e51b200c 	ldr	r2, [fp, #-12]
   21f44:	e1520003 	cmp	r2, r3
   21f48:	2a000013 	bcs	21f9c <vTaskDelayUntil+0xb0>
   21f4c:	e59f30a0 	ldr	r3, [pc, #160]	; 21ff4 <vTaskDelayUntil+0x108>
   21f50:	e5933000 	ldr	r3, [r3]
   21f54:	e51b200c 	ldr	r2, [fp, #-12]
   21f58:	e1520003 	cmp	r2, r3
   21f5c:	9a00000e 	bls	21f9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   21f60:	e3a03001 	mov	r3, #1
   21f64:	e50b3008 	str	r3, [fp, #-8]
   21f68:	ea00000b 	b	21f9c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   21f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f70:	e5933000 	ldr	r3, [r3]
   21f74:	e51b200c 	ldr	r2, [fp, #-12]
   21f78:	e1520003 	cmp	r2, r3
   21f7c:	3a000004 	bcc	21f94 <vTaskDelayUntil+0xa8>
   21f80:	e59f306c 	ldr	r3, [pc, #108]	; 21ff4 <vTaskDelayUntil+0x108>
   21f84:	e5933000 	ldr	r3, [r3]
   21f88:	e51b200c 	ldr	r2, [fp, #-12]
   21f8c:	e1520003 	cmp	r2, r3
   21f90:	9a000001 	bls	21f9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   21f94:	e3a03001 	mov	r3, #1
   21f98:	e50b3008 	str	r3, [fp, #-8]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   21f9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21fa0:	e51b200c 	ldr	r2, [fp, #-12]
   21fa4:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   21fa8:	e51b3008 	ldr	r3, [fp, #-8]
   21fac:	e3530000 	cmp	r3, #0
   21fb0:	0a000006 	beq	21fd0 <vTaskDelayUntil+0xe4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   21fb4:	e59f303c 	ldr	r3, [pc, #60]	; 21ff8 <vTaskDelayUntil+0x10c>
   21fb8:	e5933000 	ldr	r3, [r3]
   21fbc:	e2833004 	add	r3, r3, #4
   21fc0:	e1a00003 	mov	r0, r3
   21fc4:	ebfffbe3 	bl	20f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   21fc8:	e51b000c 	ldr	r0, [fp, #-12]
   21fcc:	eb0004d5 	bl	23328 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   21fd0:	eb0001d0 	bl	22718 <xTaskResumeAll>
   21fd4:	e50b0010 	str	r0, [fp, #-16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   21fd8:	e51b3010 	ldr	r3, [fp, #-16]
   21fdc:	e3530000 	cmp	r3, #0
   21fe0:	1a000000 	bne	21fe8 <vTaskDelayUntil+0xfc>
		{
			portYIELD_WITHIN_API();
   21fe4:	ef000000 	svc	0x00000000
		}
	}
   21fe8:	e320f000 	nop	{0}
   21fec:	e24bd004 	sub	sp, fp, #4
   21ff0:	e8bd8800 	pop	{fp, pc}
   21ff4:	0002c3b0 			; <UNDEFINED> instruction: 0x0002c3b0
   21ff8:	0002c2d4 	ldrdeq	ip, [r2], -r4

00021ffc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   21ffc:	e92d4800 	push	{fp, lr}
   22000:	e28db004 	add	fp, sp, #4
   22004:	e24dd010 	sub	sp, sp, #16
   22008:	e50b0010 	str	r0, [fp, #-16]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   2200c:	e3a03000 	mov	r3, #0
   22010:	e50b3008 	str	r3, [fp, #-8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   22014:	e51b3010 	ldr	r3, [fp, #-16]
   22018:	e3530000 	cmp	r3, #0
   2201c:	0a00000e 	beq	2205c <vTaskDelay+0x60>
		{
			vTaskSuspendAll();
   22020:	eb0001b0 	bl	226e8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   22024:	e59f304c 	ldr	r3, [pc, #76]	; 22078 <vTaskDelay+0x7c>
   22028:	e5933000 	ldr	r3, [r3]
   2202c:	e51b2010 	ldr	r2, [fp, #-16]
   22030:	e0823003 	add	r3, r2, r3
   22034:	e50b300c 	str	r3, [fp, #-12]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22038:	e59f303c 	ldr	r3, [pc, #60]	; 2207c <vTaskDelay+0x80>
   2203c:	e5933000 	ldr	r3, [r3]
   22040:	e2833004 	add	r3, r3, #4
   22044:	e1a00003 	mov	r0, r3
   22048:	ebfffbc2 	bl	20f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   2204c:	e51b000c 	ldr	r0, [fp, #-12]
   22050:	eb0004b4 	bl	23328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   22054:	eb0001af 	bl	22718 <xTaskResumeAll>
   22058:	e50b0008 	str	r0, [fp, #-8]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   2205c:	e51b3008 	ldr	r3, [fp, #-8]
   22060:	e3530000 	cmp	r3, #0
   22064:	1a000000 	bne	2206c <vTaskDelay+0x70>
		{
			portYIELD_WITHIN_API();
   22068:	ef000000 	svc	0x00000000
		}
	}
   2206c:	e320f000 	nop	{0}
   22070:	e24bd004 	sub	sp, fp, #4
   22074:	e8bd8800 	pop	{fp, pc}
   22078:	0002c3b0 			; <UNDEFINED> instruction: 0x0002c3b0
   2207c:	0002c2d4 	ldrdeq	ip, [r2], -r4

00022080 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   22080:	e92d4800 	push	{fp, lr}
   22084:	e28db004 	add	fp, sp, #4
   22088:	e24dd010 	sub	sp, sp, #16
   2208c:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   22090:	ebfff92a 	bl	20540 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   22094:	e51b3010 	ldr	r3, [fp, #-16]
   22098:	e3530000 	cmp	r3, #0
   2209c:	1a000002 	bne	220ac <uxTaskPriorityGet+0x2c>
   220a0:	e59f302c 	ldr	r3, [pc, #44]	; 220d4 <uxTaskPriorityGet+0x54>
   220a4:	e5933000 	ldr	r3, [r3]
   220a8:	ea000000 	b	220b0 <uxTaskPriorityGet+0x30>
   220ac:	e51b3010 	ldr	r3, [fp, #-16]
   220b0:	e50b3008 	str	r3, [fp, #-8]
			uxReturn = pxTCB->uxPriority;
   220b4:	e51b3008 	ldr	r3, [fp, #-8]
   220b8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   220bc:	e50b300c 	str	r3, [fp, #-12]
		}
		taskEXIT_CRITICAL();
   220c0:	ebfff92f 	bl	20584 <vPortExitCritical>

		return uxReturn;
   220c4:	e51b300c 	ldr	r3, [fp, #-12]
	}
   220c8:	e1a00003 	mov	r0, r3
   220cc:	e24bd004 	sub	sp, fp, #4
   220d0:	e8bd8800 	pop	{fp, pc}
   220d4:	0002c2d4 	ldrdeq	ip, [r2], -r4

000220d8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   220d8:	e92d4800 	push	{fp, lr}
   220dc:	e28db004 	add	fp, sp, #4
   220e0:	e24dd018 	sub	sp, sp, #24
   220e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   220e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   220ec:	e3a03000 	mov	r3, #0
   220f0:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   220f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   220f8:	e3530004 	cmp	r3, #4
   220fc:	9a000001 	bls	22108 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   22100:	e3a03004 	mov	r3, #4
   22104:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		}

		taskENTER_CRITICAL();
   22108:	ebfff90c 	bl	20540 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   2210c:	e59f3160 	ldr	r3, [pc, #352]	; 22274 <vTaskPrioritySet+0x19c>
   22110:	e5933000 	ldr	r3, [r3]
   22114:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   22118:	e1520003 	cmp	r2, r3
   2211c:	1a000001 	bne	22128 <vTaskPrioritySet+0x50>
			{
				pxTask = NULL;
   22120:	e3a03000 	mov	r3, #0
   22124:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   22128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2212c:	e3530000 	cmp	r3, #0
   22130:	1a000002 	bne	22140 <vTaskPrioritySet+0x68>
   22134:	e59f3138 	ldr	r3, [pc, #312]	; 22274 <vTaskPrioritySet+0x19c>
   22138:	e5933000 	ldr	r3, [r3]
   2213c:	ea000000 	b	22144 <vTaskPrioritySet+0x6c>
   22140:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22144:	e50b300c 	str	r3, [fp, #-12]
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   22148:	e51b300c 	ldr	r3, [fp, #-12]
   2214c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22150:	e50b3010 	str	r3, [fp, #-16]
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   22154:	e51b2010 	ldr	r2, [fp, #-16]
   22158:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2215c:	e1520003 	cmp	r2, r3
   22160:	0a00003f 	beq	22264 <vTaskPrioritySet+0x18c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   22164:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22168:	e51b3010 	ldr	r3, [fp, #-16]
   2216c:	e1520003 	cmp	r2, r3
   22170:	9a000005 	bls	2218c <vTaskPrioritySet+0xb4>
				{
					if( pxTask != NULL )
   22174:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22178:	e3530000 	cmp	r3, #0
   2217c:	0a000007 	beq	221a0 <vTaskPrioritySet+0xc8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   22180:	e3a03001 	mov	r3, #1
   22184:	e50b3008 	str	r3, [fp, #-8]
   22188:	ea000004 	b	221a0 <vTaskPrioritySet+0xc8>
					}
				}
				else if( pxTask == NULL )
   2218c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22190:	e3530000 	cmp	r3, #0
   22194:	1a000001 	bne	221a0 <vTaskPrioritySet+0xc8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   22198:	e3a03001 	mov	r3, #1
   2219c:	e50b3008 	str	r3, [fp, #-8]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   221a0:	e51b300c 	ldr	r3, [fp, #-12]
   221a4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   221a8:	e583202c 	str	r2, [r3, #44]	; 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   221ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   221b0:	e2632005 	rsb	r2, r3, #5
   221b4:	e51b300c 	ldr	r3, [fp, #-12]
   221b8:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   221bc:	e51b300c 	ldr	r3, [fp, #-12]
   221c0:	e5931014 	ldr	r1, [r3, #20]
   221c4:	e51b2010 	ldr	r2, [fp, #-16]
   221c8:	e1a03002 	mov	r3, r2
   221cc:	e1a03103 	lsl	r3, r3, #2
   221d0:	e0833002 	add	r3, r3, r2
   221d4:	e1a03103 	lsl	r3, r3, #2
   221d8:	e59f2098 	ldr	r2, [pc, #152]	; 22278 <vTaskPrioritySet+0x1a0>
   221dc:	e0833002 	add	r3, r3, r2
   221e0:	e1510003 	cmp	r1, r3
   221e4:	1a00001a 	bne	22254 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   221e8:	e51b300c 	ldr	r3, [fp, #-12]
   221ec:	e2833004 	add	r3, r3, #4
   221f0:	e1a00003 	mov	r0, r3
   221f4:	ebfffb57 	bl	20f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   221f8:	e51b300c 	ldr	r3, [fp, #-12]
   221fc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22200:	e59f3074 	ldr	r3, [pc, #116]	; 2227c <vTaskPrioritySet+0x1a4>
   22204:	e5933000 	ldr	r3, [r3]
   22208:	e1520003 	cmp	r2, r3
   2220c:	9a000003 	bls	22220 <vTaskPrioritySet+0x148>
   22210:	e51b300c 	ldr	r3, [fp, #-12]
   22214:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22218:	e59f205c 	ldr	r2, [pc, #92]	; 2227c <vTaskPrioritySet+0x1a4>
   2221c:	e5823000 	str	r3, [r2]
   22220:	e51b300c 	ldr	r3, [fp, #-12]
   22224:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22228:	e1a03002 	mov	r3, r2
   2222c:	e1a03103 	lsl	r3, r3, #2
   22230:	e0833002 	add	r3, r3, r2
   22234:	e1a03103 	lsl	r3, r3, #2
   22238:	e59f2038 	ldr	r2, [pc, #56]	; 22278 <vTaskPrioritySet+0x1a0>
   2223c:	e0832002 	add	r2, r3, r2
   22240:	e51b300c 	ldr	r3, [fp, #-12]
   22244:	e2833004 	add	r3, r3, #4
   22248:	e1a01003 	mov	r1, r3
   2224c:	e1a00002 	mov	r0, r2
   22250:	ebfffae4 	bl	20de8 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   22254:	e51b3008 	ldr	r3, [fp, #-8]
   22258:	e3530001 	cmp	r3, #1
   2225c:	1a000000 	bne	22264 <vTaskPrioritySet+0x18c>
				{
					portYIELD_WITHIN_API();
   22260:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   22264:	ebfff8c6 	bl	20584 <vPortExitCritical>
	}
   22268:	e320f000 	nop	{0}
   2226c:	e24bd004 	sub	sp, fp, #4
   22270:	e8bd8800 	pop	{fp, pc}
   22274:	0002c2d4 	ldrdeq	ip, [r2], -r4
   22278:	0002c2d8 	ldrdeq	ip, [r2], -r8
   2227c:	0002c3b8 			; <UNDEFINED> instruction: 0x0002c3b8

00022280 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   22280:	e92d4800 	push	{fp, lr}
   22284:	e28db004 	add	fp, sp, #4
   22288:	e24dd010 	sub	sp, sp, #16
   2228c:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   22290:	ebfff8aa 	bl	20540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   22294:	e59f30d8 	ldr	r3, [pc, #216]	; 22374 <vTaskSuspend+0xf4>
   22298:	e5933000 	ldr	r3, [r3]
   2229c:	e51b2010 	ldr	r2, [fp, #-16]
   222a0:	e1520003 	cmp	r2, r3
   222a4:	1a000001 	bne	222b0 <vTaskSuspend+0x30>
			{
				pxTaskToSuspend = NULL;
   222a8:	e3a03000 	mov	r3, #0
   222ac:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   222b0:	e51b3010 	ldr	r3, [fp, #-16]
   222b4:	e3530000 	cmp	r3, #0
   222b8:	1a000002 	bne	222c8 <vTaskSuspend+0x48>
   222bc:	e59f30b0 	ldr	r3, [pc, #176]	; 22374 <vTaskSuspend+0xf4>
   222c0:	e5933000 	ldr	r3, [r3]
   222c4:	ea000000 	b	222cc <vTaskSuspend+0x4c>
   222c8:	e51b3010 	ldr	r3, [fp, #-16]
   222cc:	e50b3008 	str	r3, [fp, #-8]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   222d0:	e51b3008 	ldr	r3, [fp, #-8]
   222d4:	e2833004 	add	r3, r3, #4
   222d8:	e1a00003 	mov	r0, r3
   222dc:	ebfffb1d 	bl	20f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   222e0:	e51b3008 	ldr	r3, [fp, #-8]
   222e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   222e8:	e3530000 	cmp	r3, #0
   222ec:	0a000003 	beq	22300 <vTaskSuspend+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   222f0:	e51b3008 	ldr	r3, [fp, #-8]
   222f4:	e2833018 	add	r3, r3, #24
   222f8:	e1a00003 	mov	r0, r3
   222fc:	ebfffb15 	bl	20f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   22300:	e51b3008 	ldr	r3, [fp, #-8]
   22304:	e2833004 	add	r3, r3, #4
   22308:	e1a01003 	mov	r1, r3
   2230c:	e59f0064 	ldr	r0, [pc, #100]	; 22378 <vTaskSuspend+0xf8>
   22310:	ebfffab4 	bl	20de8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   22314:	ebfff89a 	bl	20584 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   22318:	e51b3010 	ldr	r3, [fp, #-16]
   2231c:	e3530000 	cmp	r3, #0
   22320:	1a000010 	bne	22368 <vTaskSuspend+0xe8>
		{
			if( xSchedulerRunning != pdFALSE )
   22324:	e59f3050 	ldr	r3, [pc, #80]	; 2237c <vTaskSuspend+0xfc>
   22328:	e5933000 	ldr	r3, [r3]
   2232c:	e3530000 	cmp	r3, #0
   22330:	0a000001 	beq	2233c <vTaskSuspend+0xbc>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   22334:	ef000000 	svc	0x00000000
				{
					vTaskSwitchContext();
				}
			}
		}
	}
   22338:	ea00000a 	b	22368 <vTaskSuspend+0xe8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   2233c:	e59f3034 	ldr	r3, [pc, #52]	; 22378 <vTaskSuspend+0xf8>
   22340:	e5932000 	ldr	r2, [r3]
   22344:	e59f3034 	ldr	r3, [pc, #52]	; 22380 <vTaskSuspend+0x100>
   22348:	e5933000 	ldr	r3, [r3]
   2234c:	e1520003 	cmp	r2, r3
   22350:	1a000003 	bne	22364 <vTaskSuspend+0xe4>
					pxCurrentTCB = NULL;
   22354:	e59f3018 	ldr	r3, [pc, #24]	; 22374 <vTaskSuspend+0xf4>
   22358:	e3a02000 	mov	r2, #0
   2235c:	e5832000 	str	r2, [r3]
	}
   22360:	ea000000 	b	22368 <vTaskSuspend+0xe8>
					vTaskSwitchContext();
   22364:	eb00024c 	bl	22c9c <vTaskSwitchContext>
	}
   22368:	e320f000 	nop	{0}
   2236c:	e24bd004 	sub	sp, fp, #4
   22370:	e8bd8800 	pop	{fp, pc}
   22374:	0002c2d4 	ldrdeq	ip, [r2], -r4
   22378:	0002c398 	muleq	r2, r8, r3
   2237c:	0002c3bc 			; <UNDEFINED> instruction: 0x0002c3bc
   22380:	0002c3ac 	andeq	ip, r2, ip, lsr #7

00022384 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   22384:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22388:	e28db000 	add	fp, sp, #0
   2238c:	e24dd014 	sub	sp, sp, #20
   22390:	e50b0010 	str	r0, [fp, #-16]
	portBASE_TYPE xReturn = pdFALSE;
   22394:	e3a03000 	mov	r3, #0
   22398:	e50b3008 	str	r3, [fp, #-8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   2239c:	e51b3010 	ldr	r3, [fp, #-16]
   223a0:	e50b300c 	str	r3, [fp, #-12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   223a4:	e51b300c 	ldr	r3, [fp, #-12]
   223a8:	e5933014 	ldr	r3, [r3, #20]
   223ac:	e59f2044 	ldr	r2, [pc, #68]	; 223f8 <xTaskIsTaskSuspended+0x74>
   223b0:	e1530002 	cmp	r3, r2
   223b4:	1a00000a 	bne	223e4 <xTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   223b8:	e51b300c 	ldr	r3, [fp, #-12]
   223bc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   223c0:	e59f2034 	ldr	r2, [pc, #52]	; 223fc <xTaskIsTaskSuspended+0x78>
   223c4:	e1530002 	cmp	r3, r2
   223c8:	0a000005 	beq	223e4 <xTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   223cc:	e51b300c 	ldr	r3, [fp, #-12]
   223d0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   223d4:	e3530000 	cmp	r3, #0
   223d8:	1a000001 	bne	223e4 <xTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
   223dc:	e3a03001 	mov	r3, #1
   223e0:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}

		return xReturn;
   223e4:	e51b3008 	ldr	r3, [fp, #-8]
	}
   223e8:	e1a00003 	mov	r0, r3
   223ec:	e28bd000 	add	sp, fp, #0
   223f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   223f4:	e12fff1e 	bx	lr
   223f8:	0002c398 	muleq	r2, r8, r3
   223fc:	0002c36c 	andeq	ip, r2, ip, ror #6

00022400 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   22400:	e92d4800 	push	{fp, lr}
   22404:	e28db004 	add	fp, sp, #4
   22408:	e24dd010 	sub	sp, sp, #16
   2240c:	e50b0010 	str	r0, [fp, #-16]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   22410:	e51b3010 	ldr	r3, [fp, #-16]
   22414:	e50b3008 	str	r3, [fp, #-8]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   22418:	e51b3008 	ldr	r3, [fp, #-8]
   2241c:	e3530000 	cmp	r3, #0
   22420:	0a00002e 	beq	224e0 <vTaskResume+0xe0>
   22424:	e59f30c0 	ldr	r3, [pc, #192]	; 224ec <vTaskResume+0xec>
   22428:	e5933000 	ldr	r3, [r3]
   2242c:	e51b2008 	ldr	r2, [fp, #-8]
   22430:	e1520003 	cmp	r2, r3
   22434:	0a000029 	beq	224e0 <vTaskResume+0xe0>
		{
			taskENTER_CRITICAL();
   22438:	ebfff840 	bl	20540 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   2243c:	e51b0008 	ldr	r0, [fp, #-8]
   22440:	ebffffcf 	bl	22384 <xTaskIsTaskSuspended>
   22444:	e1a03000 	mov	r3, r0
   22448:	e3530001 	cmp	r3, #1
   2244c:	1a000022 	bne	224dc <vTaskResume+0xdc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   22450:	e51b3008 	ldr	r3, [fp, #-8]
   22454:	e2833004 	add	r3, r3, #4
   22458:	e1a00003 	mov	r0, r3
   2245c:	ebfffabd 	bl	20f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   22460:	e51b3008 	ldr	r3, [fp, #-8]
   22464:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22468:	e59f3080 	ldr	r3, [pc, #128]	; 224f0 <vTaskResume+0xf0>
   2246c:	e5933000 	ldr	r3, [r3]
   22470:	e1520003 	cmp	r2, r3
   22474:	9a000003 	bls	22488 <vTaskResume+0x88>
   22478:	e51b3008 	ldr	r3, [fp, #-8]
   2247c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22480:	e59f2068 	ldr	r2, [pc, #104]	; 224f0 <vTaskResume+0xf0>
   22484:	e5823000 	str	r3, [r2]
   22488:	e51b3008 	ldr	r3, [fp, #-8]
   2248c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22490:	e1a03002 	mov	r3, r2
   22494:	e1a03103 	lsl	r3, r3, #2
   22498:	e0833002 	add	r3, r3, r2
   2249c:	e1a03103 	lsl	r3, r3, #2
   224a0:	e59f204c 	ldr	r2, [pc, #76]	; 224f4 <vTaskResume+0xf4>
   224a4:	e0832002 	add	r2, r3, r2
   224a8:	e51b3008 	ldr	r3, [fp, #-8]
   224ac:	e2833004 	add	r3, r3, #4
   224b0:	e1a01003 	mov	r1, r3
   224b4:	e1a00002 	mov	r0, r2
   224b8:	ebfffa4a 	bl	20de8 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   224bc:	e51b3008 	ldr	r3, [fp, #-8]
   224c0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   224c4:	e59f3020 	ldr	r3, [pc, #32]	; 224ec <vTaskResume+0xec>
   224c8:	e5933000 	ldr	r3, [r3]
   224cc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   224d0:	e1520003 	cmp	r2, r3
   224d4:	3a000000 	bcc	224dc <vTaskResume+0xdc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   224d8:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   224dc:	ebfff828 	bl	20584 <vPortExitCritical>
		}
	}
   224e0:	e320f000 	nop	{0}
   224e4:	e24bd004 	sub	sp, fp, #4
   224e8:	e8bd8800 	pop	{fp, pc}
   224ec:	0002c2d4 	ldrdeq	ip, [r2], -r4
   224f0:	0002c3b8 			; <UNDEFINED> instruction: 0x0002c3b8
   224f4:	0002c2d8 	ldrdeq	ip, [r2], -r8

000224f8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   224f8:	e92d4800 	push	{fp, lr}
   224fc:	e28db004 	add	fp, sp, #4
   22500:	e24dd018 	sub	sp, sp, #24
   22504:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	portBASE_TYPE xYieldRequired = pdFALSE;
   22508:	e3a03000 	mov	r3, #0
   2250c:	e50b3008 	str	r3, [fp, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   22510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22514:	e50b300c 	str	r3, [fp, #-12]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   22518:	e3a03000 	mov	r3, #0
   2251c:	e50b3010 	str	r3, [fp, #-16]
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   22520:	e51b000c 	ldr	r0, [fp, #-12]
   22524:	ebffff96 	bl	22384 <xTaskIsTaskSuspended>
   22528:	e1a03000 	mov	r3, r0
   2252c:	e3530001 	cmp	r3, #1
   22530:	1a00002e 	bne	225f0 <xTaskResumeFromISR+0xf8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22534:	e59f30c4 	ldr	r3, [pc, #196]	; 22600 <xTaskResumeFromISR+0x108>
   22538:	e5933000 	ldr	r3, [r3]
   2253c:	e3530000 	cmp	r3, #0
   22540:	1a000025 	bne	225dc <xTaskResumeFromISR+0xe4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   22544:	e51b300c 	ldr	r3, [fp, #-12]
   22548:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   2254c:	e59f30b0 	ldr	r3, [pc, #176]	; 22604 <xTaskResumeFromISR+0x10c>
   22550:	e5933000 	ldr	r3, [r3]
   22554:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22558:	e1520003 	cmp	r2, r3
   2255c:	23a03001 	movcs	r3, #1
   22560:	33a03000 	movcc	r3, #0
   22564:	e6ef3073 	uxtb	r3, r3
   22568:	e50b3008 	str	r3, [fp, #-8]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   2256c:	e51b300c 	ldr	r3, [fp, #-12]
   22570:	e2833004 	add	r3, r3, #4
   22574:	e1a00003 	mov	r0, r3
   22578:	ebfffa76 	bl	20f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   2257c:	e51b300c 	ldr	r3, [fp, #-12]
   22580:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22584:	e59f307c 	ldr	r3, [pc, #124]	; 22608 <xTaskResumeFromISR+0x110>
   22588:	e5933000 	ldr	r3, [r3]
   2258c:	e1520003 	cmp	r2, r3
   22590:	9a000003 	bls	225a4 <xTaskResumeFromISR+0xac>
   22594:	e51b300c 	ldr	r3, [fp, #-12]
   22598:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   2259c:	e59f2064 	ldr	r2, [pc, #100]	; 22608 <xTaskResumeFromISR+0x110>
   225a0:	e5823000 	str	r3, [r2]
   225a4:	e51b300c 	ldr	r3, [fp, #-12]
   225a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   225ac:	e1a03002 	mov	r3, r2
   225b0:	e1a03103 	lsl	r3, r3, #2
   225b4:	e0833002 	add	r3, r3, r2
   225b8:	e1a03103 	lsl	r3, r3, #2
   225bc:	e59f2048 	ldr	r2, [pc, #72]	; 2260c <xTaskResumeFromISR+0x114>
   225c0:	e0832002 	add	r2, r3, r2
   225c4:	e51b300c 	ldr	r3, [fp, #-12]
   225c8:	e2833004 	add	r3, r3, #4
   225cc:	e1a01003 	mov	r1, r3
   225d0:	e1a00002 	mov	r0, r2
   225d4:	ebfffa03 	bl	20de8 <vListInsertEnd>
   225d8:	ea000004 	b	225f0 <xTaskResumeFromISR+0xf8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   225dc:	e51b300c 	ldr	r3, [fp, #-12]
   225e0:	e2833018 	add	r3, r3, #24
   225e4:	e1a01003 	mov	r1, r3
   225e8:	e59f0020 	ldr	r0, [pc, #32]	; 22610 <xTaskResumeFromISR+0x118>
   225ec:	ebfff9fd 	bl	20de8 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   225f0:	e51b3008 	ldr	r3, [fp, #-8]
	}
   225f4:	e1a00003 	mov	r0, r3
   225f8:	e24bd004 	sub	sp, fp, #4
   225fc:	e8bd8800 	pop	{fp, pc}
   22600:	0002c3c0 	andeq	ip, r2, r0, asr #7
   22604:	0002c2d4 	ldrdeq	ip, [r2], -r4
   22608:	0002c3b8 			; <UNDEFINED> instruction: 0x0002c3b8
   2260c:	0002c2d8 	ldrdeq	ip, [r2], -r8
   22610:	0002c36c 	andeq	ip, r2, ip, ror #6

00022614 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   22614:	e92d4800 	push	{fp, lr}
   22618:	e28db004 	add	fp, sp, #4
   2261c:	e24dd018 	sub	sp, sp, #24
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   22620:	e3a03000 	mov	r3, #0
   22624:	e58d300c 	str	r3, [sp, #12]
   22628:	e3a03000 	mov	r3, #0
   2262c:	e58d3008 	str	r3, [sp, #8]
   22630:	e3a03000 	mov	r3, #0
   22634:	e58d3004 	str	r3, [sp, #4]
   22638:	e3a03000 	mov	r3, #0
   2263c:	e58d3000 	str	r3, [sp]
   22640:	e3a03000 	mov	r3, #0
   22644:	e3a02080 	mov	r2, #128	; 0x80
   22648:	e59f1050 	ldr	r1, [pc, #80]	; 226a0 <vTaskStartScheduler+0x8c>
   2264c:	e59f0050 	ldr	r0, [pc, #80]	; 226a4 <vTaskStartScheduler+0x90>
   22650:	ebfffd52 	bl	21ba0 <xTaskGenericCreate>
   22654:	e50b0008 	str	r0, [fp, #-8]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   22658:	e51b3008 	ldr	r3, [fp, #-8]
   2265c:	e3530001 	cmp	r3, #1
   22660:	1a00000b 	bne	22694 <vTaskStartScheduler+0x80>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   22664:	e92d0001 	stmfd	sp!, {r0}
   22668:	e10f0000 	mrs	r0, CPSR
   2266c:	e38000c0 	orr	r0, r0, #192	; 0xc0
   22670:	e129f000 	msr	CPSR_fc, r0
   22674:	e8bd0001 	ldmfd	sp!, {r0}

		xSchedulerRunning = pdTRUE;
   22678:	e59f3028 	ldr	r3, [pc, #40]	; 226a8 <vTaskStartScheduler+0x94>
   2267c:	e3a02001 	mov	r2, #1
   22680:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   22684:	e59f3020 	ldr	r3, [pc, #32]	; 226ac <vTaskStartScheduler+0x98>
   22688:	e3a02000 	mov	r2, #0
   2268c:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   22690:	ebfff6ea 	bl	20240 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   22694:	e320f000 	nop	{0}
   22698:	e24bd004 	sub	sp, fp, #4
   2269c:	e8bd8800 	pop	{fp, pc}
   226a0:	0002bacc 	andeq	fp, r2, ip, asr #21
   226a4:	000230bc 	strheq	r3, [r2], -ip
   226a8:	0002c3bc 			; <UNDEFINED> instruction: 0x0002c3bc
   226ac:	0002c3b0 			; <UNDEFINED> instruction: 0x0002c3b0

000226b0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   226b0:	e92d4800 	push	{fp, lr}
   226b4:	e28db004 	add	fp, sp, #4
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   226b8:	e92d0001 	stmfd	sp!, {r0}
   226bc:	e10f0000 	mrs	r0, CPSR
   226c0:	e38000c0 	orr	r0, r0, #192	; 0xc0
   226c4:	e129f000 	msr	CPSR_fc, r0
   226c8:	e8bd0001 	ldmfd	sp!, {r0}
	xSchedulerRunning = pdFALSE;
   226cc:	e59f3010 	ldr	r3, [pc, #16]	; 226e4 <vTaskEndScheduler+0x34>
   226d0:	e3a02000 	mov	r2, #0
   226d4:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   226d8:	ebfff6df 	bl	2025c <vPortEndScheduler>
}
   226dc:	e320f000 	nop	{0}
   226e0:	e8bd8800 	pop	{fp, pc}
   226e4:	0002c3bc 			; <UNDEFINED> instruction: 0x0002c3bc

000226e8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   226e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   226ec:	e28db000 	add	fp, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   226f0:	e59f301c 	ldr	r3, [pc, #28]	; 22714 <vTaskSuspendAll+0x2c>
   226f4:	e5933000 	ldr	r3, [r3]
   226f8:	e2833001 	add	r3, r3, #1
   226fc:	e59f2010 	ldr	r2, [pc, #16]	; 22714 <vTaskSuspendAll+0x2c>
   22700:	e5823000 	str	r3, [r2]
}
   22704:	e320f000 	nop	{0}
   22708:	e28bd000 	add	sp, fp, #0
   2270c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22710:	e12fff1e 	bx	lr
   22714:	0002c3c0 	andeq	ip, r2, r0, asr #7

00022718 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   22718:	e92d4810 	push	{r4, fp, lr}
   2271c:	e28db008 	add	fp, sp, #8
   22720:	e24dd00c 	sub	sp, sp, #12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   22724:	e3a03000 	mov	r3, #0
   22728:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   2272c:	ebfff783 	bl	20540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   22730:	e59f3164 	ldr	r3, [pc, #356]	; 2289c <xTaskResumeAll+0x184>
   22734:	e5933000 	ldr	r3, [r3]
   22738:	e2433001 	sub	r3, r3, #1
   2273c:	e59f2158 	ldr	r2, [pc, #344]	; 2289c <xTaskResumeAll+0x184>
   22740:	e5823000 	str	r3, [r2]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22744:	e59f3150 	ldr	r3, [pc, #336]	; 2289c <xTaskResumeAll+0x184>
   22748:	e5933000 	ldr	r3, [r3]
   2274c:	e3530000 	cmp	r3, #0
   22750:	1a00004c 	bne	22888 <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   22754:	e59f3144 	ldr	r3, [pc, #324]	; 228a0 <xTaskResumeAll+0x188>
   22758:	e5933000 	ldr	r3, [r3]
   2275c:	e3530000 	cmp	r3, #0
   22760:	0a000048 	beq	22888 <xTaskResumeAll+0x170>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   22764:	e3a03000 	mov	r3, #0
   22768:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   2276c:	ea000023 	b	22800 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   22770:	e59f312c 	ldr	r3, [pc, #300]	; 228a4 <xTaskResumeAll+0x18c>
   22774:	e593300c 	ldr	r3, [r3, #12]
   22778:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   2277c:	e2843018 	add	r3, r4, #24
   22780:	e1a00003 	mov	r0, r3
   22784:	ebfff9f3 	bl	20f58 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   22788:	e2843004 	add	r3, r4, #4
   2278c:	e1a00003 	mov	r0, r3
   22790:	ebfff9f0 	bl	20f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   22794:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   22798:	e59f3108 	ldr	r3, [pc, #264]	; 228a8 <xTaskResumeAll+0x190>
   2279c:	e5933000 	ldr	r3, [r3]
   227a0:	e1520003 	cmp	r2, r3
   227a4:	9a000002 	bls	227b4 <xTaskResumeAll+0x9c>
   227a8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   227ac:	e59f20f4 	ldr	r2, [pc, #244]	; 228a8 <xTaskResumeAll+0x190>
   227b0:	e5823000 	str	r3, [r2]
   227b4:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   227b8:	e1a03002 	mov	r3, r2
   227bc:	e1a03103 	lsl	r3, r3, #2
   227c0:	e0833002 	add	r3, r3, r2
   227c4:	e1a03103 	lsl	r3, r3, #2
   227c8:	e59f20dc 	ldr	r2, [pc, #220]	; 228ac <xTaskResumeAll+0x194>
   227cc:	e0833002 	add	r3, r3, r2
   227d0:	e2842004 	add	r2, r4, #4
   227d4:	e1a01002 	mov	r1, r2
   227d8:	e1a00003 	mov	r0, r3
   227dc:	ebfff981 	bl	20de8 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   227e0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   227e4:	e59f30c4 	ldr	r3, [pc, #196]	; 228b0 <xTaskResumeAll+0x198>
   227e8:	e5933000 	ldr	r3, [r3]
   227ec:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   227f0:	e1520003 	cmp	r2, r3
   227f4:	3a000001 	bcc	22800 <xTaskResumeAll+0xe8>
					{
						xYieldRequired = pdTRUE;
   227f8:	e3a03001 	mov	r3, #1
   227fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   22800:	e59f309c 	ldr	r3, [pc, #156]	; 228a4 <xTaskResumeAll+0x18c>
   22804:	e5933000 	ldr	r3, [r3]
   22808:	e3530000 	cmp	r3, #0
   2280c:	1affffd7 	bne	22770 <xTaskResumeAll+0x58>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   22810:	e59f309c 	ldr	r3, [pc, #156]	; 228b4 <xTaskResumeAll+0x19c>
   22814:	e5933000 	ldr	r3, [r3]
   22818:	e3530000 	cmp	r3, #0
   2281c:	0a00000c 	beq	22854 <xTaskResumeAll+0x13c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   22820:	ea000005 	b	2283c <xTaskResumeAll+0x124>
					{
						vTaskIncrementTick();
   22824:	eb000048 	bl	2294c <vTaskIncrementTick>
						--uxMissedTicks;
   22828:	e59f3084 	ldr	r3, [pc, #132]	; 228b4 <xTaskResumeAll+0x19c>
   2282c:	e5933000 	ldr	r3, [r3]
   22830:	e2433001 	sub	r3, r3, #1
   22834:	e59f2078 	ldr	r2, [pc, #120]	; 228b4 <xTaskResumeAll+0x19c>
   22838:	e5823000 	str	r3, [r2]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   2283c:	e59f3070 	ldr	r3, [pc, #112]	; 228b4 <xTaskResumeAll+0x19c>
   22840:	e5933000 	ldr	r3, [r3]
   22844:	e3530000 	cmp	r3, #0
   22848:	1afffff5 	bne	22824 <xTaskResumeAll+0x10c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   2284c:	e3a03001 	mov	r3, #1
   22850:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   22854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22858:	e3530001 	cmp	r3, #1
   2285c:	0a000003 	beq	22870 <xTaskResumeAll+0x158>
   22860:	e59f3050 	ldr	r3, [pc, #80]	; 228b8 <xTaskResumeAll+0x1a0>
   22864:	e5933000 	ldr	r3, [r3]
   22868:	e3530001 	cmp	r3, #1
   2286c:	1a000005 	bne	22888 <xTaskResumeAll+0x170>
				{
					xAlreadyYielded = pdTRUE;
   22870:	e3a03001 	mov	r3, #1
   22874:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   22878:	e59f3038 	ldr	r3, [pc, #56]	; 228b8 <xTaskResumeAll+0x1a0>
   2287c:	e3a02000 	mov	r2, #0
   22880:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   22884:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   22888:	ebfff73d 	bl	20584 <vPortExitCritical>

	return xAlreadyYielded;
   2288c:	e51b3010 	ldr	r3, [fp, #-16]
}
   22890:	e1a00003 	mov	r0, r3
   22894:	e24bd008 	sub	sp, fp, #8
   22898:	e8bd8810 	pop	{r4, fp, pc}
   2289c:	0002c3c0 	andeq	ip, r2, r0, asr #7
   228a0:	0002c3ac 	andeq	ip, r2, ip, lsr #7
   228a4:	0002c36c 	andeq	ip, r2, ip, ror #6
   228a8:	0002c3b8 			; <UNDEFINED> instruction: 0x0002c3b8
   228ac:	0002c2d8 	ldrdeq	ip, [r2], -r8
   228b0:	0002c2d4 	ldrdeq	ip, [r2], -r4
   228b4:	0002c3c4 	andeq	ip, r2, r4, asr #7
   228b8:	0002c3c8 	andeq	ip, r2, r8, asr #7

000228bc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   228bc:	e92d4800 	push	{fp, lr}
   228c0:	e28db004 	add	fp, sp, #4
   228c4:	e24dd008 	sub	sp, sp, #8
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   228c8:	ebfff71c 	bl	20540 <vPortEnterCritical>
	{
		xTicks = xTickCount;
   228cc:	e59f3018 	ldr	r3, [pc, #24]	; 228ec <xTaskGetTickCount+0x30>
   228d0:	e5933000 	ldr	r3, [r3]
   228d4:	e50b3008 	str	r3, [fp, #-8]
	}
	taskEXIT_CRITICAL();
   228d8:	ebfff729 	bl	20584 <vPortExitCritical>

	return xTicks;
   228dc:	e51b3008 	ldr	r3, [fp, #-8]
}
   228e0:	e1a00003 	mov	r0, r3
   228e4:	e24bd004 	sub	sp, fp, #4
   228e8:	e8bd8800 	pop	{fp, pc}
   228ec:	0002c3b0 			; <UNDEFINED> instruction: 0x0002c3b0

000228f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   228f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   228f4:	e28db000 	add	fp, sp, #0
   228f8:	e24dd00c 	sub	sp, sp, #12
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   228fc:	e3a03000 	mov	r3, #0
   22900:	e50b3008 	str	r3, [fp, #-8]
	xReturn = xTickCount;
   22904:	e59f3018 	ldr	r3, [pc, #24]	; 22924 <xTaskGetTickCountFromISR+0x34>
   22908:	e5933000 	ldr	r3, [r3]
   2290c:	e50b300c 	str	r3, [fp, #-12]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   22910:	e51b300c 	ldr	r3, [fp, #-12]
}
   22914:	e1a00003 	mov	r0, r3
   22918:	e28bd000 	add	sp, fp, #0
   2291c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22920:	e12fff1e 	bx	lr
   22924:	0002c3b0 			; <UNDEFINED> instruction: 0x0002c3b0

00022928 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   22928:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2292c:	e28db000 	add	fp, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   22930:	e59f3010 	ldr	r3, [pc, #16]	; 22948 <uxTaskGetNumberOfTasks+0x20>
   22934:	e5933000 	ldr	r3, [r3]
}
   22938:	e1a00003 	mov	r0, r3
   2293c:	e28bd000 	add	sp, fp, #0
   22940:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22944:	e12fff1e 	bx	lr
   22948:	0002c3ac 	andeq	ip, r2, ip, lsr #7

0002294c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   2294c:	e92d4800 	push	{fp, lr}
   22950:	e28db004 	add	fp, sp, #4
   22954:	e24dd010 	sub	sp, sp, #16
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22958:	e59f31e4 	ldr	r3, [pc, #484]	; 22b44 <vTaskIncrementTick+0x1f8>
   2295c:	e5933000 	ldr	r3, [r3]
   22960:	e3530000 	cmp	r3, #0
   22964:	1a00006d 	bne	22b20 <vTaskIncrementTick+0x1d4>
	{
		++xTickCount;
   22968:	e59f31d8 	ldr	r3, [pc, #472]	; 22b48 <vTaskIncrementTick+0x1fc>
   2296c:	e5933000 	ldr	r3, [r3]
   22970:	e2833001 	add	r3, r3, #1
   22974:	e59f21cc 	ldr	r2, [pc, #460]	; 22b48 <vTaskIncrementTick+0x1fc>
   22978:	e5823000 	str	r3, [r2]
		if( xTickCount == ( portTickType ) 0U )
   2297c:	e59f31c4 	ldr	r3, [pc, #452]	; 22b48 <vTaskIncrementTick+0x1fc>
   22980:	e5933000 	ldr	r3, [r3]
   22984:	e3530000 	cmp	r3, #0
   22988:	1a000020 	bne	22a10 <vTaskIncrementTick+0xc4>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   2298c:	e59f31b8 	ldr	r3, [pc, #440]	; 22b4c <vTaskIncrementTick+0x200>
   22990:	e5933000 	ldr	r3, [r3]
   22994:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   22998:	e59f31b0 	ldr	r3, [pc, #432]	; 22b50 <vTaskIncrementTick+0x204>
   2299c:	e5933000 	ldr	r3, [r3]
   229a0:	e59f21a4 	ldr	r2, [pc, #420]	; 22b4c <vTaskIncrementTick+0x200>
   229a4:	e5823000 	str	r3, [r2]
			pxOverflowDelayedTaskList = pxTemp;
   229a8:	e59f21a0 	ldr	r2, [pc, #416]	; 22b50 <vTaskIncrementTick+0x204>
   229ac:	e51b3008 	ldr	r3, [fp, #-8]
   229b0:	e5823000 	str	r3, [r2]
			xNumOfOverflows++;
   229b4:	e59f3198 	ldr	r3, [pc, #408]	; 22b54 <vTaskIncrementTick+0x208>
   229b8:	e5933000 	ldr	r3, [r3]
   229bc:	e2833001 	add	r3, r3, #1
   229c0:	e59f218c 	ldr	r2, [pc, #396]	; 22b54 <vTaskIncrementTick+0x208>
   229c4:	e5823000 	str	r3, [r2]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   229c8:	e59f317c 	ldr	r3, [pc, #380]	; 22b4c <vTaskIncrementTick+0x200>
   229cc:	e5933000 	ldr	r3, [r3]
   229d0:	e5933000 	ldr	r3, [r3]
   229d4:	e3530000 	cmp	r3, #0
   229d8:	1a000003 	bne	229ec <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   229dc:	e59f3174 	ldr	r3, [pc, #372]	; 22b58 <vTaskIncrementTick+0x20c>
   229e0:	e3e02000 	mvn	r2, #0
   229e4:	e5832000 	str	r2, [r3]
   229e8:	ea000008 	b	22a10 <vTaskIncrementTick+0xc4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   229ec:	e59f3158 	ldr	r3, [pc, #344]	; 22b4c <vTaskIncrementTick+0x200>
   229f0:	e5933000 	ldr	r3, [r3]
   229f4:	e593300c 	ldr	r3, [r3, #12]
   229f8:	e593300c 	ldr	r3, [r3, #12]
   229fc:	e50b300c 	str	r3, [fp, #-12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   22a00:	e51b300c 	ldr	r3, [fp, #-12]
   22a04:	e5933004 	ldr	r3, [r3, #4]
   22a08:	e59f2148 	ldr	r2, [pc, #328]	; 22b58 <vTaskIncrementTick+0x20c>
   22a0c:	e5823000 	str	r3, [r2]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   22a10:	e59f3130 	ldr	r3, [pc, #304]	; 22b48 <vTaskIncrementTick+0x1fc>
   22a14:	e5932000 	ldr	r2, [r3]
   22a18:	e59f3138 	ldr	r3, [pc, #312]	; 22b58 <vTaskIncrementTick+0x20c>
   22a1c:	e5933000 	ldr	r3, [r3]
   22a20:	e1520003 	cmp	r2, r3
   22a24:	3a000043 	bcc	22b38 <vTaskIncrementTick+0x1ec>
   22a28:	e59f311c 	ldr	r3, [pc, #284]	; 22b4c <vTaskIncrementTick+0x200>
   22a2c:	e5933000 	ldr	r3, [r3]
   22a30:	e5933000 	ldr	r3, [r3]
   22a34:	e3530000 	cmp	r3, #0
   22a38:	1a000003 	bne	22a4c <vTaskIncrementTick+0x100>
   22a3c:	e59f3114 	ldr	r3, [pc, #276]	; 22b58 <vTaskIncrementTick+0x20c>
   22a40:	e3e02000 	mvn	r2, #0
   22a44:	e5832000 	str	r2, [r3]
   22a48:	ea00003a 	b	22b38 <vTaskIncrementTick+0x1ec>
   22a4c:	e59f30f8 	ldr	r3, [pc, #248]	; 22b4c <vTaskIncrementTick+0x200>
   22a50:	e5933000 	ldr	r3, [r3]
   22a54:	e593300c 	ldr	r3, [r3, #12]
   22a58:	e593300c 	ldr	r3, [r3, #12]
   22a5c:	e50b300c 	str	r3, [fp, #-12]
   22a60:	e51b300c 	ldr	r3, [fp, #-12]
   22a64:	e5933004 	ldr	r3, [r3, #4]
   22a68:	e50b3010 	str	r3, [fp, #-16]
   22a6c:	e59f30d4 	ldr	r3, [pc, #212]	; 22b48 <vTaskIncrementTick+0x1fc>
   22a70:	e5933000 	ldr	r3, [r3]
   22a74:	e51b2010 	ldr	r2, [fp, #-16]
   22a78:	e1520003 	cmp	r2, r3
   22a7c:	9a000003 	bls	22a90 <vTaskIncrementTick+0x144>
   22a80:	e59f20d0 	ldr	r2, [pc, #208]	; 22b58 <vTaskIncrementTick+0x20c>
   22a84:	e51b3010 	ldr	r3, [fp, #-16]
   22a88:	e5823000 	str	r3, [r2]
   22a8c:	ea000029 	b	22b38 <vTaskIncrementTick+0x1ec>
   22a90:	e51b300c 	ldr	r3, [fp, #-12]
   22a94:	e2833004 	add	r3, r3, #4
   22a98:	e1a00003 	mov	r0, r3
   22a9c:	ebfff92d 	bl	20f58 <vListRemove>
   22aa0:	e51b300c 	ldr	r3, [fp, #-12]
   22aa4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   22aa8:	e3530000 	cmp	r3, #0
   22aac:	0a000003 	beq	22ac0 <vTaskIncrementTick+0x174>
   22ab0:	e51b300c 	ldr	r3, [fp, #-12]
   22ab4:	e2833018 	add	r3, r3, #24
   22ab8:	e1a00003 	mov	r0, r3
   22abc:	ebfff925 	bl	20f58 <vListRemove>
   22ac0:	e51b300c 	ldr	r3, [fp, #-12]
   22ac4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22ac8:	e59f308c 	ldr	r3, [pc, #140]	; 22b5c <vTaskIncrementTick+0x210>
   22acc:	e5933000 	ldr	r3, [r3]
   22ad0:	e1520003 	cmp	r2, r3
   22ad4:	9a000003 	bls	22ae8 <vTaskIncrementTick+0x19c>
   22ad8:	e51b300c 	ldr	r3, [fp, #-12]
   22adc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22ae0:	e59f2074 	ldr	r2, [pc, #116]	; 22b5c <vTaskIncrementTick+0x210>
   22ae4:	e5823000 	str	r3, [r2]
   22ae8:	e51b300c 	ldr	r3, [fp, #-12]
   22aec:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22af0:	e1a03002 	mov	r3, r2
   22af4:	e1a03103 	lsl	r3, r3, #2
   22af8:	e0833002 	add	r3, r3, r2
   22afc:	e1a03103 	lsl	r3, r3, #2
   22b00:	e59f2058 	ldr	r2, [pc, #88]	; 22b60 <vTaskIncrementTick+0x214>
   22b04:	e0832002 	add	r2, r3, r2
   22b08:	e51b300c 	ldr	r3, [fp, #-12]
   22b0c:	e2833004 	add	r3, r3, #4
   22b10:	e1a01003 	mov	r1, r3
   22b14:	e1a00002 	mov	r0, r2
   22b18:	ebfff8b2 	bl	20de8 <vListInsertEnd>
   22b1c:	eaffffc1 	b	22a28 <vTaskIncrementTick+0xdc>
	}
	else
	{
		++uxMissedTicks;
   22b20:	e59f303c 	ldr	r3, [pc, #60]	; 22b64 <vTaskIncrementTick+0x218>
   22b24:	e5933000 	ldr	r3, [r3]
   22b28:	e2833001 	add	r3, r3, #1
   22b2c:	e59f2030 	ldr	r2, [pc, #48]	; 22b64 <vTaskIncrementTick+0x218>
   22b30:	e5823000 	str	r3, [r2]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   22b34:	eaffffff 	b	22b38 <vTaskIncrementTick+0x1ec>
   22b38:	e320f000 	nop	{0}
   22b3c:	e24bd004 	sub	sp, fp, #4
   22b40:	e8bd8800 	pop	{fp, pc}
   22b44:	0002c3c0 	andeq	ip, r2, r0, asr #7
   22b48:	0002c3b0 			; <UNDEFINED> instruction: 0x0002c3b0
   22b4c:	0002c364 	andeq	ip, r2, r4, ror #6
   22b50:	0002c368 	andeq	ip, r2, r8, ror #6
   22b54:	0002c3cc 	andeq	ip, r2, ip, asr #7
   22b58:	0002c240 	andeq	ip, r2, r0, asr #4
   22b5c:	0002c3b8 			; <UNDEFINED> instruction: 0x0002c3b8
   22b60:	0002c2d8 	ldrdeq	ip, [r2], -r8
   22b64:	0002c3c4 	andeq	ip, r2, r4, asr #7

00022b68 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   22b68:	e92d4800 	push	{fp, lr}
   22b6c:	e28db004 	add	fp, sp, #4
   22b70:	e24dd010 	sub	sp, sp, #16
   22b74:	e50b0010 	str	r0, [fp, #-16]
   22b78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   22b7c:	e51b3010 	ldr	r3, [fp, #-16]
   22b80:	e3530000 	cmp	r3, #0
   22b84:	1a000003 	bne	22b98 <vTaskSetApplicationTaskTag+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22b88:	e59f3030 	ldr	r3, [pc, #48]	; 22bc0 <vTaskSetApplicationTaskTag+0x58>
   22b8c:	e5933000 	ldr	r3, [r3]
   22b90:	e50b3008 	str	r3, [fp, #-8]
   22b94:	ea000001 	b	22ba0 <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22b98:	e51b3010 	ldr	r3, [fp, #-16]
   22b9c:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   22ba0:	ebfff666 	bl	20540 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   22ba4:	e51b3008 	ldr	r3, [fp, #-8]
   22ba8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22bac:	e5832044 	str	r2, [r3, #68]	; 0x44
		taskEXIT_CRITICAL();
   22bb0:	ebfff673 	bl	20584 <vPortExitCritical>
	}
   22bb4:	e320f000 	nop	{0}
   22bb8:	e24bd004 	sub	sp, fp, #4
   22bbc:	e8bd8800 	pop	{fp, pc}
   22bc0:	0002c2d4 	ldrdeq	ip, [r2], -r4

00022bc4 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   22bc4:	e92d4800 	push	{fp, lr}
   22bc8:	e28db004 	add	fp, sp, #4
   22bcc:	e24dd010 	sub	sp, sp, #16
   22bd0:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   22bd4:	e51b3010 	ldr	r3, [fp, #-16]
   22bd8:	e3530000 	cmp	r3, #0
   22bdc:	1a000003 	bne	22bf0 <xTaskGetApplicationTaskTag+0x2c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22be0:	e59f3034 	ldr	r3, [pc, #52]	; 22c1c <xTaskGetApplicationTaskTag+0x58>
   22be4:	e5933000 	ldr	r3, [r3]
   22be8:	e50b3008 	str	r3, [fp, #-8]
   22bec:	ea000001 	b	22bf8 <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22bf0:	e51b3010 	ldr	r3, [fp, #-16]
   22bf4:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   22bf8:	ebfff650 	bl	20540 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   22bfc:	e51b3008 	ldr	r3, [fp, #-8]
   22c00:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   22c04:	e50b300c 	str	r3, [fp, #-12]
		taskEXIT_CRITICAL();
   22c08:	ebfff65d 	bl	20584 <vPortExitCritical>

		return xReturn;
   22c0c:	e51b300c 	ldr	r3, [fp, #-12]
	}
   22c10:	e1a00003 	mov	r0, r3
   22c14:	e24bd004 	sub	sp, fp, #4
   22c18:	e8bd8800 	pop	{fp, pc}
   22c1c:	0002c2d4 	ldrdeq	ip, [r2], -r4

00022c20 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   22c20:	e92d4800 	push	{fp, lr}
   22c24:	e28db004 	add	fp, sp, #4
   22c28:	e24dd010 	sub	sp, sp, #16
   22c2c:	e50b0010 	str	r0, [fp, #-16]
   22c30:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   22c34:	e51b3010 	ldr	r3, [fp, #-16]
   22c38:	e3530000 	cmp	r3, #0
   22c3c:	1a000003 	bne	22c50 <xTaskCallApplicationTaskHook+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22c40:	e59f3050 	ldr	r3, [pc, #80]	; 22c98 <xTaskCallApplicationTaskHook+0x78>
   22c44:	e5933000 	ldr	r3, [r3]
   22c48:	e50b3008 	str	r3, [fp, #-8]
   22c4c:	ea000001 	b	22c58 <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22c50:	e51b3010 	ldr	r3, [fp, #-16]
   22c54:	e50b3008 	str	r3, [fp, #-8]
		}

		if( xTCB->pxTaskTag != NULL )
   22c58:	e51b3008 	ldr	r3, [fp, #-8]
   22c5c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   22c60:	e3530000 	cmp	r3, #0
   22c64:	0a000005 	beq	22c80 <xTaskCallApplicationTaskHook+0x60>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   22c68:	e51b3008 	ldr	r3, [fp, #-8]
   22c6c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   22c70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   22c74:	e12fff33 	blx	r3
   22c78:	e50b000c 	str	r0, [fp, #-12]
   22c7c:	ea000001 	b	22c88 <xTaskCallApplicationTaskHook+0x68>
		}
		else
		{
			xReturn = pdFAIL;
   22c80:	e3a03000 	mov	r3, #0
   22c84:	e50b300c 	str	r3, [fp, #-12]
		}

		return xReturn;
   22c88:	e51b300c 	ldr	r3, [fp, #-12]
	}
   22c8c:	e1a00003 	mov	r0, r3
   22c90:	e24bd004 	sub	sp, fp, #4
   22c94:	e8bd8800 	pop	{fp, pc}
   22c98:	0002c2d4 	ldrdeq	ip, [r2], -r4

00022c9c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   22c9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22ca0:	e28db000 	add	fp, sp, #0
   22ca4:	e24dd00c 	sub	sp, sp, #12
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   22ca8:	e59f30e0 	ldr	r3, [pc, #224]	; 22d90 <vTaskSwitchContext+0xf4>
   22cac:	e5933000 	ldr	r3, [r3]
   22cb0:	e3530000 	cmp	r3, #0
   22cb4:	0a000008 	beq	22cdc <vTaskSwitchContext+0x40>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   22cb8:	e59f30d4 	ldr	r3, [pc, #212]	; 22d94 <vTaskSwitchContext+0xf8>
   22cbc:	e3a02001 	mov	r2, #1
   22cc0:	e5832000 	str	r2, [r3]
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   22cc4:	ea00002d 	b	22d80 <vTaskSwitchContext+0xe4>
			--uxTopReadyPriority;
   22cc8:	e59f30c8 	ldr	r3, [pc, #200]	; 22d98 <vTaskSwitchContext+0xfc>
   22ccc:	e5933000 	ldr	r3, [r3]
   22cd0:	e2433001 	sub	r3, r3, #1
   22cd4:	e59f20bc 	ldr	r2, [pc, #188]	; 22d98 <vTaskSwitchContext+0xfc>
   22cd8:	e5823000 	str	r3, [r2]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   22cdc:	e59f30b4 	ldr	r3, [pc, #180]	; 22d98 <vTaskSwitchContext+0xfc>
   22ce0:	e5932000 	ldr	r2, [r3]
   22ce4:	e59f10b0 	ldr	r1, [pc, #176]	; 22d9c <vTaskSwitchContext+0x100>
   22ce8:	e1a03002 	mov	r3, r2
   22cec:	e1a03103 	lsl	r3, r3, #2
   22cf0:	e0833002 	add	r3, r3, r2
   22cf4:	e1a03103 	lsl	r3, r3, #2
   22cf8:	e0813003 	add	r3, r1, r3
   22cfc:	e5933000 	ldr	r3, [r3]
   22d00:	e3530000 	cmp	r3, #0
   22d04:	0affffef 	beq	22cc8 <vTaskSwitchContext+0x2c>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   22d08:	e59f3088 	ldr	r3, [pc, #136]	; 22d98 <vTaskSwitchContext+0xfc>
   22d0c:	e5932000 	ldr	r2, [r3]
   22d10:	e1a03002 	mov	r3, r2
   22d14:	e1a03103 	lsl	r3, r3, #2
   22d18:	e0833002 	add	r3, r3, r2
   22d1c:	e1a03103 	lsl	r3, r3, #2
   22d20:	e59f2074 	ldr	r2, [pc, #116]	; 22d9c <vTaskSwitchContext+0x100>
   22d24:	e0833002 	add	r3, r3, r2
   22d28:	e50b3008 	str	r3, [fp, #-8]
   22d2c:	e51b3008 	ldr	r3, [fp, #-8]
   22d30:	e5933004 	ldr	r3, [r3, #4]
   22d34:	e5932004 	ldr	r2, [r3, #4]
   22d38:	e51b3008 	ldr	r3, [fp, #-8]
   22d3c:	e5832004 	str	r2, [r3, #4]
   22d40:	e51b3008 	ldr	r3, [fp, #-8]
   22d44:	e5932004 	ldr	r2, [r3, #4]
   22d48:	e51b3008 	ldr	r3, [fp, #-8]
   22d4c:	e2833008 	add	r3, r3, #8
   22d50:	e1520003 	cmp	r2, r3
   22d54:	1a000004 	bne	22d6c <vTaskSwitchContext+0xd0>
   22d58:	e51b3008 	ldr	r3, [fp, #-8]
   22d5c:	e5933004 	ldr	r3, [r3, #4]
   22d60:	e5932004 	ldr	r2, [r3, #4]
   22d64:	e51b3008 	ldr	r3, [fp, #-8]
   22d68:	e5832004 	str	r2, [r3, #4]
   22d6c:	e51b3008 	ldr	r3, [fp, #-8]
   22d70:	e5933004 	ldr	r3, [r3, #4]
   22d74:	e593300c 	ldr	r3, [r3, #12]
   22d78:	e59f2020 	ldr	r2, [pc, #32]	; 22da0 <vTaskSwitchContext+0x104>
   22d7c:	e5823000 	str	r3, [r2]
}
   22d80:	e320f000 	nop	{0}
   22d84:	e28bd000 	add	sp, fp, #0
   22d88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22d8c:	e12fff1e 	bx	lr
   22d90:	0002c3c0 	andeq	ip, r2, r0, asr #7
   22d94:	0002c3c8 	andeq	ip, r2, r8, asr #7
   22d98:	0002c3b8 			; <UNDEFINED> instruction: 0x0002c3b8
   22d9c:	0002c2d8 	ldrdeq	ip, [r2], -r8
   22da0:	0002c2d4 	ldrdeq	ip, [r2], -r4

00022da4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   22da4:	e92d4800 	push	{fp, lr}
   22da8:	e28db004 	add	fp, sp, #4
   22dac:	e24dd010 	sub	sp, sp, #16
   22db0:	e50b0010 	str	r0, [fp, #-16]
   22db4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   22db8:	e59f3074 	ldr	r3, [pc, #116]	; 22e34 <vTaskPlaceOnEventList+0x90>
   22dbc:	e5933000 	ldr	r3, [r3]
   22dc0:	e2833018 	add	r3, r3, #24
   22dc4:	e1a01003 	mov	r1, r3
   22dc8:	e51b0010 	ldr	r0, [fp, #-16]
   22dcc:	ebfff82b 	bl	20e80 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22dd0:	e59f305c 	ldr	r3, [pc, #92]	; 22e34 <vTaskPlaceOnEventList+0x90>
   22dd4:	e5933000 	ldr	r3, [r3]
   22dd8:	e2833004 	add	r3, r3, #4
   22ddc:	e1a00003 	mov	r0, r3
   22de0:	ebfff85c 	bl	20f58 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   22de4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22de8:	e3730001 	cmn	r3, #1
   22dec:	1a000006 	bne	22e0c <vTaskPlaceOnEventList+0x68>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22df0:	e59f303c 	ldr	r3, [pc, #60]	; 22e34 <vTaskPlaceOnEventList+0x90>
   22df4:	e5933000 	ldr	r3, [r3]
   22df8:	e2833004 	add	r3, r3, #4
   22dfc:	e1a01003 	mov	r1, r3
   22e00:	e59f0030 	ldr	r0, [pc, #48]	; 22e38 <vTaskPlaceOnEventList+0x94>
   22e04:	ebfff7f7 	bl	20de8 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   22e08:	ea000006 	b	22e28 <vTaskPlaceOnEventList+0x84>
			xTimeToWake = xTickCount + xTicksToWait;
   22e0c:	e59f3028 	ldr	r3, [pc, #40]	; 22e3c <vTaskPlaceOnEventList+0x98>
   22e10:	e5933000 	ldr	r3, [r3]
   22e14:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22e18:	e0823003 	add	r3, r2, r3
   22e1c:	e50b3008 	str	r3, [fp, #-8]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   22e20:	e51b0008 	ldr	r0, [fp, #-8]
   22e24:	eb00013f 	bl	23328 <prvAddCurrentTaskToDelayedList>
}
   22e28:	e320f000 	nop	{0}
   22e2c:	e24bd004 	sub	sp, fp, #4
   22e30:	e8bd8800 	pop	{fp, pc}
   22e34:	0002c2d4 	ldrdeq	ip, [r2], -r4
   22e38:	0002c398 	muleq	r2, r8, r3
   22e3c:	0002c3b0 			; <UNDEFINED> instruction: 0x0002c3b0

00022e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   22e40:	e92d4800 	push	{fp, lr}
   22e44:	e28db004 	add	fp, sp, #4
   22e48:	e24dd010 	sub	sp, sp, #16
   22e4c:	e50b0010 	str	r0, [fp, #-16]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   22e50:	e51b3010 	ldr	r3, [fp, #-16]
   22e54:	e593300c 	ldr	r3, [r3, #12]
   22e58:	e593300c 	ldr	r3, [r3, #12]
   22e5c:	e50b300c 	str	r3, [fp, #-12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   22e60:	e51b300c 	ldr	r3, [fp, #-12]
   22e64:	e2833018 	add	r3, r3, #24
   22e68:	e1a00003 	mov	r0, r3
   22e6c:	ebfff839 	bl	20f58 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22e70:	e59f30cc 	ldr	r3, [pc, #204]	; 22f44 <xTaskRemoveFromEventList+0x104>
   22e74:	e5933000 	ldr	r3, [r3]
   22e78:	e3530000 	cmp	r3, #0
   22e7c:	1a00001b 	bne	22ef0 <xTaskRemoveFromEventList+0xb0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   22e80:	e51b300c 	ldr	r3, [fp, #-12]
   22e84:	e2833004 	add	r3, r3, #4
   22e88:	e1a00003 	mov	r0, r3
   22e8c:	ebfff831 	bl	20f58 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   22e90:	e51b300c 	ldr	r3, [fp, #-12]
   22e94:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22e98:	e59f30a8 	ldr	r3, [pc, #168]	; 22f48 <xTaskRemoveFromEventList+0x108>
   22e9c:	e5933000 	ldr	r3, [r3]
   22ea0:	e1520003 	cmp	r2, r3
   22ea4:	9a000003 	bls	22eb8 <xTaskRemoveFromEventList+0x78>
   22ea8:	e51b300c 	ldr	r3, [fp, #-12]
   22eac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22eb0:	e59f2090 	ldr	r2, [pc, #144]	; 22f48 <xTaskRemoveFromEventList+0x108>
   22eb4:	e5823000 	str	r3, [r2]
   22eb8:	e51b300c 	ldr	r3, [fp, #-12]
   22ebc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22ec0:	e1a03002 	mov	r3, r2
   22ec4:	e1a03103 	lsl	r3, r3, #2
   22ec8:	e0833002 	add	r3, r3, r2
   22ecc:	e1a03103 	lsl	r3, r3, #2
   22ed0:	e59f2074 	ldr	r2, [pc, #116]	; 22f4c <xTaskRemoveFromEventList+0x10c>
   22ed4:	e0832002 	add	r2, r3, r2
   22ed8:	e51b300c 	ldr	r3, [fp, #-12]
   22edc:	e2833004 	add	r3, r3, #4
   22ee0:	e1a01003 	mov	r1, r3
   22ee4:	e1a00002 	mov	r0, r2
   22ee8:	ebfff7be 	bl	20de8 <vListInsertEnd>
   22eec:	ea000004 	b	22f04 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   22ef0:	e51b300c 	ldr	r3, [fp, #-12]
   22ef4:	e2833018 	add	r3, r3, #24
   22ef8:	e1a01003 	mov	r1, r3
   22efc:	e59f004c 	ldr	r0, [pc, #76]	; 22f50 <xTaskRemoveFromEventList+0x110>
   22f00:	ebfff7b8 	bl	20de8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   22f04:	e51b300c 	ldr	r3, [fp, #-12]
   22f08:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22f0c:	e59f3040 	ldr	r3, [pc, #64]	; 22f54 <xTaskRemoveFromEventList+0x114>
   22f10:	e5933000 	ldr	r3, [r3]
   22f14:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22f18:	e1520003 	cmp	r2, r3
   22f1c:	3a000002 	bcc	22f2c <xTaskRemoveFromEventList+0xec>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   22f20:	e3a03001 	mov	r3, #1
   22f24:	e50b3008 	str	r3, [fp, #-8]
   22f28:	ea000001 	b	22f34 <xTaskRemoveFromEventList+0xf4>
	}
	else
	{
		xReturn = pdFALSE;
   22f2c:	e3a03000 	mov	r3, #0
   22f30:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   22f34:	e51b3008 	ldr	r3, [fp, #-8]
}
   22f38:	e1a00003 	mov	r0, r3
   22f3c:	e24bd004 	sub	sp, fp, #4
   22f40:	e8bd8800 	pop	{fp, pc}
   22f44:	0002c3c0 	andeq	ip, r2, r0, asr #7
   22f48:	0002c3b8 			; <UNDEFINED> instruction: 0x0002c3b8
   22f4c:	0002c2d8 	ldrdeq	ip, [r2], -r8
   22f50:	0002c36c 	andeq	ip, r2, ip, ror #6
   22f54:	0002c2d4 	ldrdeq	ip, [r2], -r4

00022f58 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   22f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22f5c:	e28db000 	add	fp, sp, #0
   22f60:	e24dd00c 	sub	sp, sp, #12
   22f64:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   22f68:	e59f3028 	ldr	r3, [pc, #40]	; 22f98 <vTaskSetTimeOutState+0x40>
   22f6c:	e5932000 	ldr	r2, [r3]
   22f70:	e51b3008 	ldr	r3, [fp, #-8]
   22f74:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   22f78:	e59f301c 	ldr	r3, [pc, #28]	; 22f9c <vTaskSetTimeOutState+0x44>
   22f7c:	e5932000 	ldr	r2, [r3]
   22f80:	e51b3008 	ldr	r3, [fp, #-8]
   22f84:	e5832004 	str	r2, [r3, #4]
}
   22f88:	e320f000 	nop	{0}
   22f8c:	e28bd000 	add	sp, fp, #0
   22f90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22f94:	e12fff1e 	bx	lr
   22f98:	0002c3cc 	andeq	ip, r2, ip, asr #7
   22f9c:	0002c3b0 			; <UNDEFINED> instruction: 0x0002c3b0

00022fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   22fa0:	e92d4800 	push	{fp, lr}
   22fa4:	e28db004 	add	fp, sp, #4
   22fa8:	e24dd010 	sub	sp, sp, #16
   22fac:	e50b0010 	str	r0, [fp, #-16]
   22fb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   22fb4:	ebfff561 	bl	20540 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   22fb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22fbc:	e5933000 	ldr	r3, [r3]
   22fc0:	e3730001 	cmn	r3, #1
   22fc4:	1a000002 	bne	22fd4 <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   22fc8:	e3a03000 	mov	r3, #0
   22fcc:	e50b3008 	str	r3, [fp, #-8]
   22fd0:	ea000028 	b	23078 <xTaskCheckForTimeOut+0xd8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   22fd4:	e51b3010 	ldr	r3, [fp, #-16]
   22fd8:	e5932000 	ldr	r2, [r3]
   22fdc:	e59f30a8 	ldr	r3, [pc, #168]	; 2308c <xTaskCheckForTimeOut+0xec>
   22fe0:	e5933000 	ldr	r3, [r3]
   22fe4:	e1520003 	cmp	r2, r3
   22fe8:	0a000008 	beq	23010 <xTaskCheckForTimeOut+0x70>
   22fec:	e51b3010 	ldr	r3, [fp, #-16]
   22ff0:	e5932004 	ldr	r2, [r3, #4]
   22ff4:	e59f3094 	ldr	r3, [pc, #148]	; 23090 <xTaskCheckForTimeOut+0xf0>
   22ff8:	e5933000 	ldr	r3, [r3]
   22ffc:	e1520003 	cmp	r2, r3
   23000:	8a000002 	bhi	23010 <xTaskCheckForTimeOut+0x70>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   23004:	e3a03001 	mov	r3, #1
   23008:	e50b3008 	str	r3, [fp, #-8]
   2300c:	ea000019 	b	23078 <xTaskCheckForTimeOut+0xd8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   23010:	e59f3078 	ldr	r3, [pc, #120]	; 23090 <xTaskCheckForTimeOut+0xf0>
   23014:	e5932000 	ldr	r2, [r3]
   23018:	e51b3010 	ldr	r3, [fp, #-16]
   2301c:	e5933004 	ldr	r3, [r3, #4]
   23020:	e0422003 	sub	r2, r2, r3
   23024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23028:	e5933000 	ldr	r3, [r3]
   2302c:	e1520003 	cmp	r2, r3
   23030:	2a00000e 	bcs	23070 <xTaskCheckForTimeOut+0xd0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   23034:	e59f3054 	ldr	r3, [pc, #84]	; 23090 <xTaskCheckForTimeOut+0xf0>
   23038:	e5932000 	ldr	r2, [r3]
   2303c:	e51b3010 	ldr	r3, [fp, #-16]
   23040:	e5933004 	ldr	r3, [r3, #4]
   23044:	e0423003 	sub	r3, r2, r3
   23048:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2304c:	e5922000 	ldr	r2, [r2]
   23050:	e0422003 	sub	r2, r2, r3
   23054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23058:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   2305c:	e51b0010 	ldr	r0, [fp, #-16]
   23060:	ebffffbc 	bl	22f58 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   23064:	e3a03000 	mov	r3, #0
   23068:	e50b3008 	str	r3, [fp, #-8]
   2306c:	ea000001 	b	23078 <xTaskCheckForTimeOut+0xd8>
		}
		else
		{
			xReturn = pdTRUE;
   23070:	e3a03001 	mov	r3, #1
   23074:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	taskEXIT_CRITICAL();
   23078:	ebfff541 	bl	20584 <vPortExitCritical>

	return xReturn;
   2307c:	e51b3008 	ldr	r3, [fp, #-8]
}
   23080:	e1a00003 	mov	r0, r3
   23084:	e24bd004 	sub	sp, fp, #4
   23088:	e8bd8800 	pop	{fp, pc}
   2308c:	0002c3cc 	andeq	ip, r2, ip, asr #7
   23090:	0002c3b0 			; <UNDEFINED> instruction: 0x0002c3b0

00023094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   23094:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23098:	e28db000 	add	fp, sp, #0
	xMissedYield = pdTRUE;
   2309c:	e59f3014 	ldr	r3, [pc, #20]	; 230b8 <vTaskMissedYield+0x24>
   230a0:	e3a02001 	mov	r2, #1
   230a4:	e5832000 	str	r2, [r3]
}
   230a8:	e320f000 	nop	{0}
   230ac:	e28bd000 	add	sp, fp, #0
   230b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   230b4:	e12fff1e 	bx	lr
   230b8:	0002c3c8 	andeq	ip, r2, r8, asr #7

000230bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   230bc:	e92d4800 	push	{fp, lr}
   230c0:	e28db004 	add	fp, sp, #4
   230c4:	e24dd008 	sub	sp, sp, #8
   230c8:	e50b0008 	str	r0, [fp, #-8]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   230cc:	eb000066 	bl	2326c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   230d0:	e59f3010 	ldr	r3, [pc, #16]	; 230e8 <prvIdleTask+0x2c>
   230d4:	e5933000 	ldr	r3, [r3]
   230d8:	e3530001 	cmp	r3, #1
   230dc:	9afffffa 	bls	230cc <prvIdleTask+0x10>
			{
				taskYIELD();
   230e0:	ef000000 	svc	0x00000000
		prvCheckTasksWaitingTermination();
   230e4:	eafffff8 	b	230cc <prvIdleTask+0x10>
   230e8:	0002c2d8 	ldrdeq	ip, [r2], -r8

000230ec <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   230ec:	e92d4800 	push	{fp, lr}
   230f0:	e28db004 	add	fp, sp, #4
   230f4:	e24dd010 	sub	sp, sp, #16
   230f8:	e50b0008 	str	r0, [fp, #-8]
   230fc:	e50b100c 	str	r1, [fp, #-12]
   23100:	e50b2010 	str	r2, [fp, #-16]
   23104:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   23108:	e51b3008 	ldr	r3, [fp, #-8]
   2310c:	e2833034 	add	r3, r3, #52	; 0x34
   23110:	e3a02010 	mov	r2, #16
   23114:	e51b100c 	ldr	r1, [fp, #-12]
   23118:	e1a00003 	mov	r0, r3
   2311c:	eb002236 	bl	2b9fc <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   23120:	e51b3008 	ldr	r3, [fp, #-8]
   23124:	e3a02000 	mov	r2, #0
   23128:	e5c32043 	strb	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   2312c:	e51b3010 	ldr	r3, [fp, #-16]
   23130:	e3530004 	cmp	r3, #4
   23134:	9a000001 	bls	23140 <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   23138:	e3a03004 	mov	r3, #4
   2313c:	e50b3010 	str	r3, [fp, #-16]
	}

	pxTCB->uxPriority = uxPriority;
   23140:	e51b3008 	ldr	r3, [fp, #-8]
   23144:	e51b2010 	ldr	r2, [fp, #-16]
   23148:	e583202c 	str	r2, [r3, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   2314c:	e51b3008 	ldr	r3, [fp, #-8]
   23150:	e2833004 	add	r3, r3, #4
   23154:	e1a00003 	mov	r0, r3
   23158:	ebfff717 	bl	20dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   2315c:	e51b3008 	ldr	r3, [fp, #-8]
   23160:	e2833018 	add	r3, r3, #24
   23164:	e1a00003 	mov	r0, r3
   23168:	ebfff713 	bl	20dbc <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   2316c:	e51b3008 	ldr	r3, [fp, #-8]
   23170:	e51b2008 	ldr	r2, [fp, #-8]
   23174:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   23178:	e51b3010 	ldr	r3, [fp, #-16]
   2317c:	e2632005 	rsb	r2, r3, #5
   23180:	e51b3008 	ldr	r3, [fp, #-8]
   23184:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   23188:	e51b3008 	ldr	r3, [fp, #-8]
   2318c:	e51b2008 	ldr	r2, [fp, #-8]
   23190:	e5832024 	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   23194:	e51b3008 	ldr	r3, [fp, #-8]
   23198:	e3a02000 	mov	r2, #0
   2319c:	e5832044 	str	r2, [r3, #68]	; 0x44
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   231a0:	e320f000 	nop	{0}
   231a4:	e24bd004 	sub	sp, fp, #4
   231a8:	e8bd8800 	pop	{fp, pc}

000231ac <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   231ac:	e92d4800 	push	{fp, lr}
   231b0:	e28db004 	add	fp, sp, #4
   231b4:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   231b8:	e3a03000 	mov	r3, #0
   231bc:	e50b3008 	str	r3, [fp, #-8]
   231c0:	ea00000b 	b	231f4 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   231c4:	e51b2008 	ldr	r2, [fp, #-8]
   231c8:	e1a03002 	mov	r3, r2
   231cc:	e1a03103 	lsl	r3, r3, #2
   231d0:	e0833002 	add	r3, r3, r2
   231d4:	e1a03103 	lsl	r3, r3, #2
   231d8:	e59f206c 	ldr	r2, [pc, #108]	; 2324c <prvInitialiseTaskLists+0xa0>
   231dc:	e0833002 	add	r3, r3, r2
   231e0:	e1a00003 	mov	r0, r3
   231e4:	ebfff6da 	bl	20d54 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   231e8:	e51b3008 	ldr	r3, [fp, #-8]
   231ec:	e2833001 	add	r3, r3, #1
   231f0:	e50b3008 	str	r3, [fp, #-8]
   231f4:	e51b3008 	ldr	r3, [fp, #-8]
   231f8:	e3530004 	cmp	r3, #4
   231fc:	9afffff0 	bls	231c4 <prvInitialiseTaskLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   23200:	e59f0048 	ldr	r0, [pc, #72]	; 23250 <prvInitialiseTaskLists+0xa4>
   23204:	ebfff6d2 	bl	20d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   23208:	e59f0044 	ldr	r0, [pc, #68]	; 23254 <prvInitialiseTaskLists+0xa8>
   2320c:	ebfff6d0 	bl	20d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   23210:	e59f0040 	ldr	r0, [pc, #64]	; 23258 <prvInitialiseTaskLists+0xac>
   23214:	ebfff6ce 	bl	20d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   23218:	e59f003c 	ldr	r0, [pc, #60]	; 2325c <prvInitialiseTaskLists+0xb0>
   2321c:	ebfff6cc 	bl	20d54 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   23220:	e59f0038 	ldr	r0, [pc, #56]	; 23260 <prvInitialiseTaskLists+0xb4>
   23224:	ebfff6ca 	bl	20d54 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   23228:	e59f3034 	ldr	r3, [pc, #52]	; 23264 <prvInitialiseTaskLists+0xb8>
   2322c:	e59f201c 	ldr	r2, [pc, #28]	; 23250 <prvInitialiseTaskLists+0xa4>
   23230:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   23234:	e59f302c 	ldr	r3, [pc, #44]	; 23268 <prvInitialiseTaskLists+0xbc>
   23238:	e59f2014 	ldr	r2, [pc, #20]	; 23254 <prvInitialiseTaskLists+0xa8>
   2323c:	e5832000 	str	r2, [r3]
}
   23240:	e320f000 	nop	{0}
   23244:	e24bd004 	sub	sp, fp, #4
   23248:	e8bd8800 	pop	{fp, pc}
   2324c:	0002c2d8 	ldrdeq	ip, [r2], -r8
   23250:	0002c33c 	andeq	ip, r2, ip, lsr r3
   23254:	0002c350 	andeq	ip, r2, r0, asr r3
   23258:	0002c36c 	andeq	ip, r2, ip, ror #6
   2325c:	0002c380 	andeq	ip, r2, r0, lsl #7
   23260:	0002c398 	muleq	r2, r8, r3
   23264:	0002c364 	andeq	ip, r2, r4, ror #6
   23268:	0002c368 	andeq	ip, r2, r8, ror #6

0002326c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   2326c:	e92d4800 	push	{fp, lr}
   23270:	e28db004 	add	fp, sp, #4
   23274:	e24dd008 	sub	sp, sp, #8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   23278:	e59f309c 	ldr	r3, [pc, #156]	; 2331c <prvCheckTasksWaitingTermination+0xb0>
   2327c:	e5933000 	ldr	r3, [r3]
   23280:	e3530000 	cmp	r3, #0
   23284:	0a000021 	beq	23310 <prvCheckTasksWaitingTermination+0xa4>
		{
			vTaskSuspendAll();
   23288:	ebfffd16 	bl	226e8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   2328c:	e59f308c 	ldr	r3, [pc, #140]	; 23320 <prvCheckTasksWaitingTermination+0xb4>
   23290:	e5933000 	ldr	r3, [r3]
   23294:	e3530000 	cmp	r3, #0
   23298:	03a03001 	moveq	r3, #1
   2329c:	13a03000 	movne	r3, #0
   232a0:	e6ef3073 	uxtb	r3, r3
   232a4:	e50b3008 	str	r3, [fp, #-8]
			xTaskResumeAll();
   232a8:	ebfffd1a 	bl	22718 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   232ac:	e51b3008 	ldr	r3, [fp, #-8]
   232b0:	e3530000 	cmp	r3, #0
   232b4:	1a000015 	bne	23310 <prvCheckTasksWaitingTermination+0xa4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   232b8:	ebfff4a0 	bl	20540 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   232bc:	e59f305c 	ldr	r3, [pc, #92]	; 23320 <prvCheckTasksWaitingTermination+0xb4>
   232c0:	e593300c 	ldr	r3, [r3, #12]
   232c4:	e593300c 	ldr	r3, [r3, #12]
   232c8:	e50b300c 	str	r3, [fp, #-12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   232cc:	e51b300c 	ldr	r3, [fp, #-12]
   232d0:	e2833004 	add	r3, r3, #4
   232d4:	e1a00003 	mov	r0, r3
   232d8:	ebfff71e 	bl	20f58 <vListRemove>
					--uxCurrentNumberOfTasks;
   232dc:	e59f3040 	ldr	r3, [pc, #64]	; 23324 <prvCheckTasksWaitingTermination+0xb8>
   232e0:	e5933000 	ldr	r3, [r3]
   232e4:	e2433001 	sub	r3, r3, #1
   232e8:	e59f2034 	ldr	r2, [pc, #52]	; 23324 <prvCheckTasksWaitingTermination+0xb8>
   232ec:	e5823000 	str	r3, [r2]
					--uxTasksDeleted;
   232f0:	e59f3024 	ldr	r3, [pc, #36]	; 2331c <prvCheckTasksWaitingTermination+0xb0>
   232f4:	e5933000 	ldr	r3, [r3]
   232f8:	e2433001 	sub	r3, r3, #1
   232fc:	e59f2018 	ldr	r2, [pc, #24]	; 2331c <prvCheckTasksWaitingTermination+0xb0>
   23300:	e5823000 	str	r3, [r2]
				}
				taskEXIT_CRITICAL();
   23304:	ebfff49e 	bl	20584 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   23308:	e51b000c 	ldr	r0, [fp, #-12]
   2330c:	eb00005f 	bl	23490 <prvDeleteTCB>
			}
		}
	}
	#endif
}
   23310:	e320f000 	nop	{0}
   23314:	e24bd004 	sub	sp, fp, #4
   23318:	e8bd8800 	pop	{fp, pc}
   2331c:	0002c394 	muleq	r2, r4, r3
   23320:	0002c380 	andeq	ip, r2, r0, lsl #7
   23324:	0002c3ac 	andeq	ip, r2, ip, lsr #7

00023328 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   23328:	e92d4800 	push	{fp, lr}
   2332c:	e28db004 	add	fp, sp, #4
   23330:	e24dd008 	sub	sp, sp, #8
   23334:	e50b0008 	str	r0, [fp, #-8]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   23338:	e59f308c 	ldr	r3, [pc, #140]	; 233cc <prvAddCurrentTaskToDelayedList+0xa4>
   2333c:	e5933000 	ldr	r3, [r3]
   23340:	e51b2008 	ldr	r2, [fp, #-8]
   23344:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   23348:	e59f3080 	ldr	r3, [pc, #128]	; 233d0 <prvAddCurrentTaskToDelayedList+0xa8>
   2334c:	e5933000 	ldr	r3, [r3]
   23350:	e51b2008 	ldr	r2, [fp, #-8]
   23354:	e1520003 	cmp	r2, r3
   23358:	2a000008 	bcs	23380 <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   2335c:	e59f3070 	ldr	r3, [pc, #112]	; 233d4 <prvAddCurrentTaskToDelayedList+0xac>
   23360:	e5932000 	ldr	r2, [r3]
   23364:	e59f3060 	ldr	r3, [pc, #96]	; 233cc <prvAddCurrentTaskToDelayedList+0xa4>
   23368:	e5933000 	ldr	r3, [r3]
   2336c:	e2833004 	add	r3, r3, #4
   23370:	e1a01003 	mov	r1, r3
   23374:	e1a00002 	mov	r0, r2
   23378:	ebfff6c0 	bl	20e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
   2337c:	ea00000f 	b	233c0 <prvAddCurrentTaskToDelayedList+0x98>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   23380:	e59f3050 	ldr	r3, [pc, #80]	; 233d8 <prvAddCurrentTaskToDelayedList+0xb0>
   23384:	e5932000 	ldr	r2, [r3]
   23388:	e59f303c 	ldr	r3, [pc, #60]	; 233cc <prvAddCurrentTaskToDelayedList+0xa4>
   2338c:	e5933000 	ldr	r3, [r3]
   23390:	e2833004 	add	r3, r3, #4
   23394:	e1a01003 	mov	r1, r3
   23398:	e1a00002 	mov	r0, r2
   2339c:	ebfff6b7 	bl	20e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
   233a0:	e59f3034 	ldr	r3, [pc, #52]	; 233dc <prvAddCurrentTaskToDelayedList+0xb4>
   233a4:	e5933000 	ldr	r3, [r3]
   233a8:	e51b2008 	ldr	r2, [fp, #-8]
   233ac:	e1520003 	cmp	r2, r3
   233b0:	2a000002 	bcs	233c0 <prvAddCurrentTaskToDelayedList+0x98>
			xNextTaskUnblockTime = xTimeToWake;
   233b4:	e59f2020 	ldr	r2, [pc, #32]	; 233dc <prvAddCurrentTaskToDelayedList+0xb4>
   233b8:	e51b3008 	ldr	r3, [fp, #-8]
   233bc:	e5823000 	str	r3, [r2]
}
   233c0:	e320f000 	nop	{0}
   233c4:	e24bd004 	sub	sp, fp, #4
   233c8:	e8bd8800 	pop	{fp, pc}
   233cc:	0002c2d4 	ldrdeq	ip, [r2], -r4
   233d0:	0002c3b0 			; <UNDEFINED> instruction: 0x0002c3b0
   233d4:	0002c368 	andeq	ip, r2, r8, ror #6
   233d8:	0002c364 	andeq	ip, r2, r4, ror #6
   233dc:	0002c240 	andeq	ip, r2, r0, asr #4

000233e0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   233e0:	e92d4800 	push	{fp, lr}
   233e4:	e28db004 	add	fp, sp, #4
   233e8:	e24dd010 	sub	sp, sp, #16
   233ec:	e1a03000 	mov	r3, r0
   233f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   233f4:	e14b30be 	strh	r3, [fp, #-14]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   233f8:	e3a00048 	mov	r0, #72	; 0x48
   233fc:	eb000261 	bl	23d88 <pvPortMalloc>
   23400:	e50b0008 	str	r0, [fp, #-8]

	if( pxNewTCB != NULL )
   23404:	e51b3008 	ldr	r3, [fp, #-8]
   23408:	e3530000 	cmp	r3, #0
   2340c:	0a00001b 	beq	23480 <prvAllocateTCBAndStack+0xa0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   23410:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23414:	e3530000 	cmp	r3, #0
   23418:	1a000005 	bne	23434 <prvAllocateTCBAndStack+0x54>
   2341c:	e15b30be 	ldrh	r3, [fp, #-14]
   23420:	e1a03103 	lsl	r3, r3, #2
   23424:	e1a00003 	mov	r0, r3
   23428:	eb000256 	bl	23d88 <pvPortMalloc>
   2342c:	e1a03000 	mov	r3, r0
   23430:	ea000000 	b	23438 <prvAllocateTCBAndStack+0x58>
   23434:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23438:	e51b2008 	ldr	r2, [fp, #-8]
   2343c:	e5823030 	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   23440:	e51b3008 	ldr	r3, [fp, #-8]
   23444:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   23448:	e3530000 	cmp	r3, #0
   2344c:	1a000004 	bne	23464 <prvAllocateTCBAndStack+0x84>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   23450:	e51b0008 	ldr	r0, [fp, #-8]
   23454:	eb0002bd 	bl	23f50 <vPortFree>
			pxNewTCB = NULL;
   23458:	e3a03000 	mov	r3, #0
   2345c:	e50b3008 	str	r3, [fp, #-8]
   23460:	ea000006 	b	23480 <prvAllocateTCBAndStack+0xa0>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   23464:	e51b3008 	ldr	r3, [fp, #-8]
   23468:	e5930030 	ldr	r0, [r3, #48]	; 0x30
   2346c:	e15b30be 	ldrh	r3, [fp, #-14]
   23470:	e1a03103 	lsl	r3, r3, #2
   23474:	e1a02003 	mov	r2, r3
   23478:	e3a010a5 	mov	r1, #165	; 0xa5
   2347c:	eb0020ab 	bl	2b730 <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   23480:	e51b3008 	ldr	r3, [fp, #-8]
}
   23484:	e1a00003 	mov	r0, r3
   23488:	e24bd004 	sub	sp, fp, #4
   2348c:	e8bd8800 	pop	{fp, pc}

00023490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   23490:	e92d4800 	push	{fp, lr}
   23494:	e28db004 	add	fp, sp, #4
   23498:	e24dd008 	sub	sp, sp, #8
   2349c:	e50b0008 	str	r0, [fp, #-8]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   234a0:	e51b3008 	ldr	r3, [fp, #-8]
   234a4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   234a8:	e1a00003 	mov	r0, r3
   234ac:	eb0002a7 	bl	23f50 <vPortFree>
		vPortFree( pxTCB );
   234b0:	e51b0008 	ldr	r0, [fp, #-8]
   234b4:	eb0002a5 	bl	23f50 <vPortFree>
	}
   234b8:	e320f000 	nop	{0}
   234bc:	e24bd004 	sub	sp, fp, #4
   234c0:	e8bd8800 	pop	{fp, pc}

000234c4 <handleRange>:

// Remember which interrupts have been enabled:
static unsigned long enabled[3];

static void handleRange (unsigned long pending, const unsigned int base)
{
   234c4:	e92d4800 	push	{fp, lr}
   234c8:	e28db004 	add	fp, sp, #4
   234cc:	e24dd010 	sub	sp, sp, #16
   234d0:	e50b0010 	str	r0, [fp, #-16]
   234d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	while (pending)
   234d8:	ea00001e 	b	23558 <handleRange+0x94>
	{
		// Get index of first set bit:
		unsigned int bit = 31 - __builtin_clz(pending);
   234dc:	e51b3010 	ldr	r3, [fp, #-16]
   234e0:	e16f3f13 	clz	r3, r3
   234e4:	e263301f 	rsb	r3, r3, #31
   234e8:	e50b3008 	str	r3, [fp, #-8]

		// Map to IRQ number:
		unsigned int irq = base + bit;
   234ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   234f0:	e51b3008 	ldr	r3, [fp, #-8]
   234f4:	e0823003 	add	r3, r2, r3
   234f8:	e50b300c 	str	r3, [fp, #-12]

		// Call interrupt handler, if enabled:
		if (g_VectorTable[irq].pfnHandler)
   234fc:	e59f2070 	ldr	r2, [pc, #112]	; 23574 <handleRange+0xb0>
   23500:	e51b300c 	ldr	r3, [fp, #-12]
   23504:	e7923183 	ldr	r3, [r2, r3, lsl #3]
   23508:	e3530000 	cmp	r3, #0
   2350c:	0a00000a 	beq	2353c <handleRange+0x78>
			g_VectorTable[irq].pfnHandler(irq, g_VectorTable[irq].pParam);
   23510:	e59f205c 	ldr	r2, [pc, #92]	; 23574 <handleRange+0xb0>
   23514:	e51b300c 	ldr	r3, [fp, #-12]
   23518:	e7922183 	ldr	r2, [r2, r3, lsl #3]
   2351c:	e59f1050 	ldr	r1, [pc, #80]	; 23574 <handleRange+0xb0>
   23520:	e51b300c 	ldr	r3, [fp, #-12]
   23524:	e1a03183 	lsl	r3, r3, #3
   23528:	e0813003 	add	r3, r1, r3
   2352c:	e5933004 	ldr	r3, [r3, #4]
   23530:	e1a01003 	mov	r1, r3
   23534:	e51b000c 	ldr	r0, [fp, #-12]
   23538:	e12fff32 	blx	r2

		// Clear bit in bitfield:
		pending &= ~(1UL << bit);
   2353c:	e3a02001 	mov	r2, #1
   23540:	e51b3008 	ldr	r3, [fp, #-8]
   23544:	e1a03312 	lsl	r3, r2, r3
   23548:	e1e03003 	mvn	r3, r3
   2354c:	e51b2010 	ldr	r2, [fp, #-16]
   23550:	e0033002 	and	r3, r3, r2
   23554:	e50b3010 	str	r3, [fp, #-16]
	while (pending)
   23558:	e51b3010 	ldr	r3, [fp, #-16]
   2355c:	e3530000 	cmp	r3, #0
   23560:	1affffdd 	bne	234dc <handleRange+0x18>
	}
}
   23564:	e320f000 	nop	{0}
   23568:	e320f000 	nop	{0}
   2356c:	e24bd004 	sub	sp, fp, #4
   23570:	e8bd8800 	pop	{fp, pc}
   23574:	0002c3d4 	ldrdeq	ip, [r2], -r4

00023578 <irqHandler>:
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler (void)
{
   23578:	e92d4830 	push	{r4, r5, fp, lr}
   2357c:	e28db00c 	add	fp, sp, #12
	register unsigned long ulMaskedStatus = pRegs->IRQBasic;
   23580:	e59f3088 	ldr	r3, [pc, #136]	; 23610 <irqHandler+0x98>
   23584:	e5934000 	ldr	r4, [r3]

	// Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0):
	if (ulMaskedStatus & (1UL << 8))
   23588:	e2043c01 	and	r3, r4, #256	; 0x100
   2358c:	e3530000 	cmp	r3, #0
   23590:	0a000007 	beq	235b4 <irqHandler+0x3c>
		handleRange(pRegs->Pending1 & enabled[0], 0);
   23594:	e59f3074 	ldr	r3, [pc, #116]	; 23610 <irqHandler+0x98>
   23598:	e5932004 	ldr	r2, [r3, #4]
   2359c:	e59f3070 	ldr	r3, [pc, #112]	; 23614 <irqHandler+0x9c>
   235a0:	e5933000 	ldr	r3, [r3]
   235a4:	e0033002 	and	r3, r3, r2
   235a8:	e3a01000 	mov	r1, #0
   235ac:	e1a00003 	mov	r0, r3
   235b0:	ebffffc3 	bl	234c4 <handleRange>

	// Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32):
	if (ulMaskedStatus & (1UL << 9))
   235b4:	e2043c02 	and	r3, r4, #512	; 0x200
   235b8:	e3530000 	cmp	r3, #0
   235bc:	0a000007 	beq	235e0 <irqHandler+0x68>
		handleRange(pRegs->Pending2 & enabled[1], 32);
   235c0:	e59f3048 	ldr	r3, [pc, #72]	; 23610 <irqHandler+0x98>
   235c4:	e5932008 	ldr	r2, [r3, #8]
   235c8:	e59f3044 	ldr	r3, [pc, #68]	; 23614 <irqHandler+0x9c>
   235cc:	e5933004 	ldr	r3, [r3, #4]
   235d0:	e0033002 	and	r3, r3, r2
   235d4:	e3a01020 	mov	r1, #32
   235d8:	e1a00003 	mov	r0, r3
   235dc:	ebffffb8 	bl	234c4 <handleRange>

	// Bits 7 through 0 in IRQBasic represent interrupts 64-71:
	if (ulMaskedStatus & 0xFF)
   235e0:	e6ef3074 	uxtb	r3, r4
   235e4:	e3530000 	cmp	r3, #0
   235e8:	0a000006 	beq	23608 <irqHandler+0x90>
		handleRange(ulMaskedStatus & 0xFF & enabled[2], 64);
   235ec:	e59f3020 	ldr	r3, [pc, #32]	; 23614 <irqHandler+0x9c>
   235f0:	e5933008 	ldr	r3, [r3, #8]
   235f4:	e0033004 	and	r3, r3, r4
   235f8:	e6ef3073 	uxtb	r3, r3
   235fc:	e3a01040 	mov	r1, #64	; 0x40
   23600:	e1a00003 	mov	r0, r3
   23604:	ebffffae 	bl	234c4 <handleRange>
}
   23608:	e320f000 	nop	{0}
   2360c:	e8bd8830 	pop	{r4, r5, fp, pc}
   23610:	2000b200 	andcs	fp, r0, r0, lsl #4
   23614:	0002c614 	andeq	ip, r2, r4, lsl r6

00023618 <irqUnblock>:

void irqUnblock (void)
{
   23618:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2361c:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsie i" ::: "memory");
   23620:	f1080080 	cpsie	i
}
   23624:	e320f000 	nop	{0}
   23628:	e28bd000 	add	sp, fp, #0
   2362c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23630:	e12fff1e 	bx	lr

00023634 <irqBlock>:

void irqBlock (void)
{
   23634:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23638:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsid i" ::: "memory");
   2363c:	f10c0080 	cpsid	i
}
   23640:	e320f000 	nop	{0}
   23644:	e28bd000 	add	sp, fp, #0
   23648:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2364c:	e12fff1e 	bx	lr

00023650 <irqRegister>:

void irqRegister (const unsigned int irq, FN_INTERRUPT_HANDLER pfnHandler, void *pParam)
{
   23650:	e92d4800 	push	{fp, lr}
   23654:	e28db004 	add	fp, sp, #4
   23658:	e24dd010 	sub	sp, sp, #16
   2365c:	e50b0008 	str	r0, [fp, #-8]
   23660:	e50b100c 	str	r1, [fp, #-12]
   23664:	e50b2010 	str	r2, [fp, #-16]
	if (irq < BCM2835_INTC_TOTAL_IRQ) {
   23668:	e51b3008 	ldr	r3, [fp, #-8]
   2366c:	e3530047 	cmp	r3, #71	; 0x47
   23670:	8a00000b 	bhi	236a4 <irqRegister+0x54>
		irqBlock();
   23674:	ebffffee 	bl	23634 <irqBlock>
		g_VectorTable[irq].pfnHandler = pfnHandler;
   23678:	e59f1030 	ldr	r1, [pc, #48]	; 236b0 <irqRegister+0x60>
   2367c:	e51b3008 	ldr	r3, [fp, #-8]
   23680:	e51b200c 	ldr	r2, [fp, #-12]
   23684:	e7812183 	str	r2, [r1, r3, lsl #3]
		g_VectorTable[irq].pParam     = pParam;
   23688:	e59f2020 	ldr	r2, [pc, #32]	; 236b0 <irqRegister+0x60>
   2368c:	e51b3008 	ldr	r3, [fp, #-8]
   23690:	e1a03183 	lsl	r3, r3, #3
   23694:	e0823003 	add	r3, r2, r3
   23698:	e51b2010 	ldr	r2, [fp, #-16]
   2369c:	e5832004 	str	r2, [r3, #4]
		irqUnblock();
   236a0:	ebffffdc 	bl	23618 <irqUnblock>
	}
}
   236a4:	e320f000 	nop	{0}
   236a8:	e24bd004 	sub	sp, fp, #4
   236ac:	e8bd8800 	pop	{fp, pc}
   236b0:	0002c3d4 	ldrdeq	ip, [r2], -r4

000236b4 <irqEnable>:

void irqEnable (const unsigned int irq)
{
   236b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   236b8:	e28db000 	add	fp, sp, #0
   236bc:	e24dd014 	sub	sp, sp, #20
   236c0:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   236c4:	e51b3010 	ldr	r3, [fp, #-16]
   236c8:	e203301f 	and	r3, r3, #31
   236cc:	e3a02001 	mov	r2, #1
   236d0:	e1a03312 	lsl	r3, r2, r3
   236d4:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   236d8:	e51b3010 	ldr	r3, [fp, #-16]
   236dc:	e353001f 	cmp	r3, #31
   236e0:	8a000009 	bhi	2370c <irqEnable+0x58>
		pRegs->Enable1 = mask;
   236e4:	e59f2094 	ldr	r2, [pc, #148]	; 23780 <irqEnable+0xcc>
   236e8:	e51b3008 	ldr	r3, [fp, #-8]
   236ec:	e5823010 	str	r3, [r2, #16]
		enabled[0] |= mask;
   236f0:	e59f308c 	ldr	r3, [pc, #140]	; 23784 <irqEnable+0xd0>
   236f4:	e5932000 	ldr	r2, [r3]
   236f8:	e51b3008 	ldr	r3, [fp, #-8]
   236fc:	e1823003 	orr	r3, r2, r3
   23700:	e59f207c 	ldr	r2, [pc, #124]	; 23784 <irqEnable+0xd0>
   23704:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->EnableBasic = mask;
		enabled[2] |= mask;
	}
}
   23708:	ea000018 	b	23770 <irqEnable+0xbc>
	else if (irq <= 63) {
   2370c:	e51b3010 	ldr	r3, [fp, #-16]
   23710:	e353003f 	cmp	r3, #63	; 0x3f
   23714:	8a000009 	bhi	23740 <irqEnable+0x8c>
		pRegs->Enable2 = mask;
   23718:	e59f2060 	ldr	r2, [pc, #96]	; 23780 <irqEnable+0xcc>
   2371c:	e51b3008 	ldr	r3, [fp, #-8]
   23720:	e5823014 	str	r3, [r2, #20]
		enabled[1] |= mask;
   23724:	e59f3058 	ldr	r3, [pc, #88]	; 23784 <irqEnable+0xd0>
   23728:	e5932004 	ldr	r2, [r3, #4]
   2372c:	e51b3008 	ldr	r3, [fp, #-8]
   23730:	e1823003 	orr	r3, r2, r3
   23734:	e59f2048 	ldr	r2, [pc, #72]	; 23784 <irqEnable+0xd0>
   23738:	e5823004 	str	r3, [r2, #4]
}
   2373c:	ea00000b 	b	23770 <irqEnable+0xbc>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   23740:	e51b3010 	ldr	r3, [fp, #-16]
   23744:	e3530047 	cmp	r3, #71	; 0x47
   23748:	8a000008 	bhi	23770 <irqEnable+0xbc>
		pRegs->EnableBasic = mask;
   2374c:	e59f202c 	ldr	r2, [pc, #44]	; 23780 <irqEnable+0xcc>
   23750:	e51b3008 	ldr	r3, [fp, #-8]
   23754:	e5823018 	str	r3, [r2, #24]
		enabled[2] |= mask;
   23758:	e59f3024 	ldr	r3, [pc, #36]	; 23784 <irqEnable+0xd0>
   2375c:	e5932008 	ldr	r2, [r3, #8]
   23760:	e51b3008 	ldr	r3, [fp, #-8]
   23764:	e1823003 	orr	r3, r2, r3
   23768:	e59f2014 	ldr	r2, [pc, #20]	; 23784 <irqEnable+0xd0>
   2376c:	e5823008 	str	r3, [r2, #8]
}
   23770:	e320f000 	nop	{0}
   23774:	e28bd000 	add	sp, fp, #0
   23778:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2377c:	e12fff1e 	bx	lr
   23780:	2000b200 	andcs	fp, r0, r0, lsl #4
   23784:	0002c614 	andeq	ip, r2, r4, lsl r6

00023788 <irqDisable>:

void irqDisable (const unsigned int irq)
{
   23788:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2378c:	e28db000 	add	fp, sp, #0
   23790:	e24dd014 	sub	sp, sp, #20
   23794:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   23798:	e51b3010 	ldr	r3, [fp, #-16]
   2379c:	e203301f 	and	r3, r3, #31
   237a0:	e3a02001 	mov	r2, #1
   237a4:	e1a03312 	lsl	r3, r2, r3
   237a8:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   237ac:	e51b3010 	ldr	r3, [fp, #-16]
   237b0:	e353001f 	cmp	r3, #31
   237b4:	8a00000a 	bhi	237e4 <irqDisable+0x5c>
		pRegs->Disable1 = mask;
   237b8:	e59f20a0 	ldr	r2, [pc, #160]	; 23860 <irqDisable+0xd8>
   237bc:	e51b3008 	ldr	r3, [fp, #-8]
   237c0:	e582301c 	str	r3, [r2, #28]
		enabled[0] &= ~mask;
   237c4:	e59f3098 	ldr	r3, [pc, #152]	; 23864 <irqDisable+0xdc>
   237c8:	e5932000 	ldr	r2, [r3]
   237cc:	e51b3008 	ldr	r3, [fp, #-8]
   237d0:	e1e03003 	mvn	r3, r3
   237d4:	e0033002 	and	r3, r3, r2
   237d8:	e59f2084 	ldr	r2, [pc, #132]	; 23864 <irqDisable+0xdc>
   237dc:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->DisableBasic = mask;
		enabled[2] &= ~mask;
	}
}
   237e0:	ea00001a 	b	23850 <irqDisable+0xc8>
	else if (irq <= 63) {
   237e4:	e51b3010 	ldr	r3, [fp, #-16]
   237e8:	e353003f 	cmp	r3, #63	; 0x3f
   237ec:	8a00000a 	bhi	2381c <irqDisable+0x94>
		pRegs->Disable2 = mask;
   237f0:	e59f2068 	ldr	r2, [pc, #104]	; 23860 <irqDisable+0xd8>
   237f4:	e51b3008 	ldr	r3, [fp, #-8]
   237f8:	e5823020 	str	r3, [r2, #32]
		enabled[1] &= ~mask;
   237fc:	e59f3060 	ldr	r3, [pc, #96]	; 23864 <irqDisable+0xdc>
   23800:	e5932004 	ldr	r2, [r3, #4]
   23804:	e51b3008 	ldr	r3, [fp, #-8]
   23808:	e1e03003 	mvn	r3, r3
   2380c:	e0033002 	and	r3, r3, r2
   23810:	e59f204c 	ldr	r2, [pc, #76]	; 23864 <irqDisable+0xdc>
   23814:	e5823004 	str	r3, [r2, #4]
}
   23818:	ea00000c 	b	23850 <irqDisable+0xc8>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   2381c:	e51b3010 	ldr	r3, [fp, #-16]
   23820:	e3530047 	cmp	r3, #71	; 0x47
   23824:	8a000009 	bhi	23850 <irqDisable+0xc8>
		pRegs->DisableBasic = mask;
   23828:	e59f2030 	ldr	r2, [pc, #48]	; 23860 <irqDisable+0xd8>
   2382c:	e51b3008 	ldr	r3, [fp, #-8]
   23830:	e5823024 	str	r3, [r2, #36]	; 0x24
		enabled[2] &= ~mask;
   23834:	e59f3028 	ldr	r3, [pc, #40]	; 23864 <irqDisable+0xdc>
   23838:	e5932008 	ldr	r2, [r3, #8]
   2383c:	e51b3008 	ldr	r3, [fp, #-8]
   23840:	e1e03003 	mvn	r3, r3
   23844:	e0033002 	and	r3, r3, r2
   23848:	e59f2014 	ldr	r2, [pc, #20]	; 23864 <irqDisable+0xdc>
   2384c:	e5823008 	str	r3, [r2, #8]
}
   23850:	e320f000 	nop	{0}
   23854:	e28bd000 	add	sp, fp, #0
   23858:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2385c:	e12fff1e 	bx	lr
   23860:	2000b200 	andcs	fp, r0, r0, lsl #4
   23864:	0002c614 	andeq	ip, r2, r4, lsl r6

00023868 <SetGpioFunction>:

/* 虚拟GPIO状态，用于模拟GPIO操作 */
static unsigned long virtual_gpio_state[2] = {0, 0};
static unsigned long virtual_gpio_function[6] = {0, 0, 0, 0, 0, 0};

void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   23868:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2386c:	e28db000 	add	fp, sp, #0
   23870:	e24dd014 	sub	sp, sp, #20
   23874:	e50b0010 	str	r0, [fp, #-16]
   23878:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	int offset = pinNum / 10;
   2387c:	e51b3010 	ldr	r3, [fp, #-16]
   23880:	e59f20b0 	ldr	r2, [pc, #176]	; 23938 <SetGpioFunction+0xd0>
   23884:	e0832392 	umull	r2, r3, r2, r3
   23888:	e1a031a3 	lsr	r3, r3, #3
   2388c:	e50b3008 	str	r3, [fp, #-8]
	int item = pinNum % 10;
   23890:	e51b1010 	ldr	r1, [fp, #-16]
   23894:	e59f309c 	ldr	r3, [pc, #156]	; 23938 <SetGpioFunction+0xd0>
   23898:	e0832193 	umull	r2, r3, r3, r1
   2389c:	e1a021a3 	lsr	r2, r3, #3
   238a0:	e1a03002 	mov	r3, r2
   238a4:	e1a03103 	lsl	r3, r3, #2
   238a8:	e0833002 	add	r3, r3, r2
   238ac:	e1a03083 	lsl	r3, r3, #1
   238b0:	e0412003 	sub	r2, r1, r3
   238b4:	e50b200c 	str	r2, [fp, #-12]
	
	/* 修改虚拟GPIO功能状态 */
	virtual_gpio_function[offset] &= ~(0x7 << (item * 3));
   238b8:	e59f207c 	ldr	r2, [pc, #124]	; 2393c <SetGpioFunction+0xd4>
   238bc:	e51b3008 	ldr	r3, [fp, #-8]
   238c0:	e7921103 	ldr	r1, [r2, r3, lsl #2]
   238c4:	e51b200c 	ldr	r2, [fp, #-12]
   238c8:	e1a03002 	mov	r3, r2
   238cc:	e1a03083 	lsl	r3, r3, #1
   238d0:	e0833002 	add	r3, r3, r2
   238d4:	e3a02007 	mov	r2, #7
   238d8:	e1a03312 	lsl	r3, r2, r3
   238dc:	e1e03003 	mvn	r3, r3
   238e0:	e0012003 	and	r2, r1, r3
   238e4:	e59f1050 	ldr	r1, [pc, #80]	; 2393c <SetGpioFunction+0xd4>
   238e8:	e51b3008 	ldr	r3, [fp, #-8]
   238ec:	e7812103 	str	r2, [r1, r3, lsl #2]
	virtual_gpio_function[offset] |= ((funcNum & 0x7) << (item * 3));
   238f0:	e59f2044 	ldr	r2, [pc, #68]	; 2393c <SetGpioFunction+0xd4>
   238f4:	e51b3008 	ldr	r3, [fp, #-8]
   238f8:	e7921103 	ldr	r1, [r2, r3, lsl #2]
   238fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23900:	e2030007 	and	r0, r3, #7
   23904:	e51b200c 	ldr	r2, [fp, #-12]
   23908:	e1a03002 	mov	r3, r2
   2390c:	e1a03083 	lsl	r3, r3, #1
   23910:	e0833002 	add	r3, r3, r2
   23914:	e1a03310 	lsl	r3, r0, r3
   23918:	e1812003 	orr	r2, r1, r3
   2391c:	e59f1018 	ldr	r1, [pc, #24]	; 2393c <SetGpioFunction+0xd4>
   23920:	e51b3008 	ldr	r3, [fp, #-8]
   23924:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   23928:	e320f000 	nop	{0}
   2392c:	e28bd000 	add	sp, fp, #0
   23930:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23934:	e12fff1e 	bx	lr
   23938:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
   2393c:	0002c628 	andeq	ip, r2, r8, lsr #12

00023940 <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   23940:	e92d4800 	push	{fp, lr}
   23944:	e28db004 	add	fp, sp, #4
   23948:	e24dd008 	sub	sp, sp, #8
   2394c:	e50b0008 	str	r0, [fp, #-8]
   23950:	e1a03001 	mov	r3, r1
   23954:	e54b3009 	strb	r3, [fp, #-9]
	SetGpioFunction(pinNum, dir);
   23958:	e55b3009 	ldrb	r3, [fp, #-9]
   2395c:	e1a01003 	mov	r1, r3
   23960:	e51b0008 	ldr	r0, [fp, #-8]
   23964:	ebffffbf 	bl	23868 <SetGpioFunction>
}
   23968:	e320f000 	nop	{0}
   2396c:	e24bd004 	sub	sp, fp, #4
   23970:	e8bd8800 	pop	{fp, pc}

00023974 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   23974:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23978:	e28db000 	add	fp, sp, #0
   2397c:	e24dd014 	sub	sp, sp, #20
   23980:	e50b0010 	str	r0, [fp, #-16]
   23984:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	unsigned long offset = pinNum / 32;
   23988:	e51b3010 	ldr	r3, [fp, #-16]
   2398c:	e1a032a3 	lsr	r3, r3, #5
   23990:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask = (1 << (pinNum % 32));
   23994:	e51b3010 	ldr	r3, [fp, #-16]
   23998:	e203301f 	and	r3, r3, #31
   2399c:	e3a02001 	mov	r2, #1
   239a0:	e1a03312 	lsl	r3, r2, r3
   239a4:	e50b300c 	str	r3, [fp, #-12]
	
	/* 修改虚拟GPIO状态 */
	if (pinVal) {
   239a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   239ac:	e3530000 	cmp	r3, #0
   239b0:	0a000008 	beq	239d8 <SetGpio+0x64>
		virtual_gpio_state[offset] |= mask;
   239b4:	e59f2050 	ldr	r2, [pc, #80]	; 23a0c <SetGpio+0x98>
   239b8:	e51b3008 	ldr	r3, [fp, #-8]
   239bc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   239c0:	e51b300c 	ldr	r3, [fp, #-12]
   239c4:	e1822003 	orr	r2, r2, r3
   239c8:	e59f103c 	ldr	r1, [pc, #60]	; 23a0c <SetGpio+0x98>
   239cc:	e51b3008 	ldr	r3, [fp, #-8]
   239d0:	e7812103 	str	r2, [r1, r3, lsl #2]
	} else {
		virtual_gpio_state[offset] &= ~mask;
	}
}
   239d4:	ea000008 	b	239fc <SetGpio+0x88>
		virtual_gpio_state[offset] &= ~mask;
   239d8:	e59f202c 	ldr	r2, [pc, #44]	; 23a0c <SetGpio+0x98>
   239dc:	e51b3008 	ldr	r3, [fp, #-8]
   239e0:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   239e4:	e51b300c 	ldr	r3, [fp, #-12]
   239e8:	e1e03003 	mvn	r3, r3
   239ec:	e0022003 	and	r2, r2, r3
   239f0:	e59f1014 	ldr	r1, [pc, #20]	; 23a0c <SetGpio+0x98>
   239f4:	e51b3008 	ldr	r3, [fp, #-8]
   239f8:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   239fc:	e320f000 	nop	{0}
   23a00:	e28bd000 	add	sp, fp, #0
   23a04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23a08:	e12fff1e 	bx	lr
   23a0c:	0002c620 	andeq	ip, r2, r0, lsr #12

00023a10 <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   23a10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23a14:	e28db000 	add	fp, sp, #0
   23a18:	e24dd014 	sub	sp, sp, #20
   23a1c:	e50b0010 	str	r0, [fp, #-16]
	unsigned long offset = pinNum / 32;
   23a20:	e51b3010 	ldr	r3, [fp, #-16]
   23a24:	e1a032a3 	lsr	r3, r3, #5
   23a28:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask = (1 << (pinNum % 32));
   23a2c:	e51b3010 	ldr	r3, [fp, #-16]
   23a30:	e203301f 	and	r3, r3, #31
   23a34:	e3a02001 	mov	r2, #1
   23a38:	e1a03312 	lsl	r3, r2, r3
   23a3c:	e50b300c 	str	r3, [fp, #-12]
	
	/* 读取虚拟GPIO状态 */
	return (virtual_gpio_state[offset] & mask) ? 1 : 0;
   23a40:	e59f202c 	ldr	r2, [pc, #44]	; 23a74 <ReadGpio+0x64>
   23a44:	e51b3008 	ldr	r3, [fp, #-8]
   23a48:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23a4c:	e51b300c 	ldr	r3, [fp, #-12]
   23a50:	e0033002 	and	r3, r3, r2
   23a54:	e3530000 	cmp	r3, #0
   23a58:	13a03001 	movne	r3, #1
   23a5c:	03a03000 	moveq	r3, #0
   23a60:	e6ef3073 	uxtb	r3, r3
}
   23a64:	e1a00003 	mov	r0, r3
   23a68:	e28bd000 	add	sp, fp, #0
   23a6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23a70:	e12fff1e 	bx	lr
   23a74:	0002c620 	andeq	ip, r2, r0, lsr #12

00023a78 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   23a78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23a7c:	e28db000 	add	fp, sp, #0
   23a80:	e24dd014 	sub	sp, sp, #20
   23a84:	e50b0010 	str	r0, [fp, #-16]
   23a88:	e1a03001 	mov	r3, r1
   23a8c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=(1<<pinNum);
   23a90:	e3a02001 	mov	r2, #1
   23a94:	e51b3010 	ldr	r3, [fp, #-16]
   23a98:	e1a03312 	lsl	r3, r2, r3
   23a9c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23aa0:	e51b3010 	ldr	r3, [fp, #-16]
   23aa4:	e1a032a3 	lsr	r3, r3, #5
   23aa8:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   23aac:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   23ab0:	e3530006 	cmp	r3, #6
   23ab4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   23ab8:	ea00003d 	b	23bb4 <EnableGpioDetect+0x13c>
   23abc:	00023bb0 			; <UNDEFINED> instruction: 0x00023bb0
   23ac0:	00023ad8 	ldrdeq	r3, [r2], -r8
   23ac4:	00023afc 	strdeq	r3, [r2], -ip
   23ac8:	00023b20 	andeq	r3, r2, r0, lsr #22
   23acc:	00023b44 	andeq	r3, r2, r4, asr #22
   23ad0:	00023b68 	andeq	r3, r2, r8, ror #22
   23ad4:	00023b8c 	andeq	r3, r2, ip, lsl #23
	case DETECT_RISING:
		virtual_gpio_function[offset]|=mask;
   23ad8:	e59f20e4 	ldr	r2, [pc, #228]	; 23bc4 <EnableGpioDetect+0x14c>
   23adc:	e51b300c 	ldr	r3, [fp, #-12]
   23ae0:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23ae4:	e51b3008 	ldr	r3, [fp, #-8]
   23ae8:	e1822003 	orr	r2, r2, r3
   23aec:	e59f10d0 	ldr	r1, [pc, #208]	; 23bc4 <EnableGpioDetect+0x14c>
   23af0:	e51b300c 	ldr	r3, [fp, #-12]
   23af4:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23af8:	ea00002d 	b	23bb4 <EnableGpioDetect+0x13c>
	case DETECT_FALLING:
		virtual_gpio_function[offset]|=mask;
   23afc:	e59f20c0 	ldr	r2, [pc, #192]	; 23bc4 <EnableGpioDetect+0x14c>
   23b00:	e51b300c 	ldr	r3, [fp, #-12]
   23b04:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b08:	e51b3008 	ldr	r3, [fp, #-8]
   23b0c:	e1822003 	orr	r2, r2, r3
   23b10:	e59f10ac 	ldr	r1, [pc, #172]	; 23bc4 <EnableGpioDetect+0x14c>
   23b14:	e51b300c 	ldr	r3, [fp, #-12]
   23b18:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23b1c:	ea000024 	b	23bb4 <EnableGpioDetect+0x13c>
	case DETECT_HIGH:
		virtual_gpio_function[offset]|=mask;
   23b20:	e59f209c 	ldr	r2, [pc, #156]	; 23bc4 <EnableGpioDetect+0x14c>
   23b24:	e51b300c 	ldr	r3, [fp, #-12]
   23b28:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b2c:	e51b3008 	ldr	r3, [fp, #-8]
   23b30:	e1822003 	orr	r2, r2, r3
   23b34:	e59f1088 	ldr	r1, [pc, #136]	; 23bc4 <EnableGpioDetect+0x14c>
   23b38:	e51b300c 	ldr	r3, [fp, #-12]
   23b3c:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23b40:	ea00001b 	b	23bb4 <EnableGpioDetect+0x13c>
	case DETECT_LOW:
		virtual_gpio_function[offset]|=mask;
   23b44:	e59f2078 	ldr	r2, [pc, #120]	; 23bc4 <EnableGpioDetect+0x14c>
   23b48:	e51b300c 	ldr	r3, [fp, #-12]
   23b4c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b50:	e51b3008 	ldr	r3, [fp, #-8]
   23b54:	e1822003 	orr	r2, r2, r3
   23b58:	e59f1064 	ldr	r1, [pc, #100]	; 23bc4 <EnableGpioDetect+0x14c>
   23b5c:	e51b300c 	ldr	r3, [fp, #-12]
   23b60:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23b64:	ea000012 	b	23bb4 <EnableGpioDetect+0x13c>
	case DETECT_RISING_ASYNC:
		virtual_gpio_function[offset]|=mask;
   23b68:	e59f2054 	ldr	r2, [pc, #84]	; 23bc4 <EnableGpioDetect+0x14c>
   23b6c:	e51b300c 	ldr	r3, [fp, #-12]
   23b70:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b74:	e51b3008 	ldr	r3, [fp, #-8]
   23b78:	e1822003 	orr	r2, r2, r3
   23b7c:	e59f1040 	ldr	r1, [pc, #64]	; 23bc4 <EnableGpioDetect+0x14c>
   23b80:	e51b300c 	ldr	r3, [fp, #-12]
   23b84:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23b88:	ea000009 	b	23bb4 <EnableGpioDetect+0x13c>
	case DETECT_FALLING_ASYNC:
		virtual_gpio_function[offset]|=mask;
   23b8c:	e59f2030 	ldr	r2, [pc, #48]	; 23bc4 <EnableGpioDetect+0x14c>
   23b90:	e51b300c 	ldr	r3, [fp, #-12]
   23b94:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b98:	e51b3008 	ldr	r3, [fp, #-8]
   23b9c:	e1822003 	orr	r2, r2, r3
   23ba0:	e59f101c 	ldr	r1, [pc, #28]	; 23bc4 <EnableGpioDetect+0x14c>
   23ba4:	e51b300c 	ldr	r3, [fp, #-12]
   23ba8:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23bac:	ea000000 	b	23bb4 <EnableGpioDetect+0x13c>
	case DETECT_NONE:
		break;
   23bb0:	e320f000 	nop	{0}
	}
}
   23bb4:	e320f000 	nop	{0}
   23bb8:	e28bd000 	add	sp, fp, #0
   23bbc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23bc0:	e12fff1e 	bx	lr
   23bc4:	0002c628 	andeq	ip, r2, r8, lsr #12

00023bc8 <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   23bc8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23bcc:	e28db000 	add	fp, sp, #0
   23bd0:	e24dd014 	sub	sp, sp, #20
   23bd4:	e50b0010 	str	r0, [fp, #-16]
   23bd8:	e1a03001 	mov	r3, r1
   23bdc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=~(1<<(pinNum%32));
   23be0:	e51b3010 	ldr	r3, [fp, #-16]
   23be4:	e203301f 	and	r3, r3, #31
   23be8:	e3a02001 	mov	r2, #1
   23bec:	e1a03312 	lsl	r3, r2, r3
   23bf0:	e1e03003 	mvn	r3, r3
   23bf4:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23bf8:	e51b3010 	ldr	r3, [fp, #-16]
   23bfc:	e1a032a3 	lsr	r3, r3, #5
   23c00:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   23c04:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   23c08:	e3530006 	cmp	r3, #6
   23c0c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   23c10:	ea00003d 	b	23d0c <DisableGpioDetect+0x144>
   23c14:	00023d08 	andeq	r3, r2, r8, lsl #26
   23c18:	00023c30 	andeq	r3, r2, r0, lsr ip
   23c1c:	00023c54 	andeq	r3, r2, r4, asr ip
   23c20:	00023c78 	andeq	r3, r2, r8, ror ip
   23c24:	00023c9c 	muleq	r2, ip, ip
   23c28:	00023cc0 	andeq	r3, r2, r0, asr #25
   23c2c:	00023ce4 	andeq	r3, r2, r4, ror #25
	case DETECT_RISING:
		virtual_gpio_function[offset]&=mask;
   23c30:	e59f20e4 	ldr	r2, [pc, #228]	; 23d1c <DisableGpioDetect+0x154>
   23c34:	e51b300c 	ldr	r3, [fp, #-12]
   23c38:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23c3c:	e51b3008 	ldr	r3, [fp, #-8]
   23c40:	e0022003 	and	r2, r2, r3
   23c44:	e59f10d0 	ldr	r1, [pc, #208]	; 23d1c <DisableGpioDetect+0x154>
   23c48:	e51b300c 	ldr	r3, [fp, #-12]
   23c4c:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23c50:	ea00002d 	b	23d0c <DisableGpioDetect+0x144>
	case DETECT_FALLING:
		virtual_gpio_function[offset]&=mask;
   23c54:	e59f20c0 	ldr	r2, [pc, #192]	; 23d1c <DisableGpioDetect+0x154>
   23c58:	e51b300c 	ldr	r3, [fp, #-12]
   23c5c:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23c60:	e51b3008 	ldr	r3, [fp, #-8]
   23c64:	e0022003 	and	r2, r2, r3
   23c68:	e59f10ac 	ldr	r1, [pc, #172]	; 23d1c <DisableGpioDetect+0x154>
   23c6c:	e51b300c 	ldr	r3, [fp, #-12]
   23c70:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23c74:	ea000024 	b	23d0c <DisableGpioDetect+0x144>
	case DETECT_HIGH:
		virtual_gpio_function[offset]&=mask;
   23c78:	e59f209c 	ldr	r2, [pc, #156]	; 23d1c <DisableGpioDetect+0x154>
   23c7c:	e51b300c 	ldr	r3, [fp, #-12]
   23c80:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23c84:	e51b3008 	ldr	r3, [fp, #-8]
   23c88:	e0022003 	and	r2, r2, r3
   23c8c:	e59f1088 	ldr	r1, [pc, #136]	; 23d1c <DisableGpioDetect+0x154>
   23c90:	e51b300c 	ldr	r3, [fp, #-12]
   23c94:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23c98:	ea00001b 	b	23d0c <DisableGpioDetect+0x144>
	case DETECT_LOW:
		virtual_gpio_function[offset]&=mask;
   23c9c:	e59f2078 	ldr	r2, [pc, #120]	; 23d1c <DisableGpioDetect+0x154>
   23ca0:	e51b300c 	ldr	r3, [fp, #-12]
   23ca4:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23ca8:	e51b3008 	ldr	r3, [fp, #-8]
   23cac:	e0022003 	and	r2, r2, r3
   23cb0:	e59f1064 	ldr	r1, [pc, #100]	; 23d1c <DisableGpioDetect+0x154>
   23cb4:	e51b300c 	ldr	r3, [fp, #-12]
   23cb8:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23cbc:	ea000012 	b	23d0c <DisableGpioDetect+0x144>
	case DETECT_RISING_ASYNC:
		virtual_gpio_function[offset]&=mask;
   23cc0:	e59f2054 	ldr	r2, [pc, #84]	; 23d1c <DisableGpioDetect+0x154>
   23cc4:	e51b300c 	ldr	r3, [fp, #-12]
   23cc8:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23ccc:	e51b3008 	ldr	r3, [fp, #-8]
   23cd0:	e0022003 	and	r2, r2, r3
   23cd4:	e59f1040 	ldr	r1, [pc, #64]	; 23d1c <DisableGpioDetect+0x154>
   23cd8:	e51b300c 	ldr	r3, [fp, #-12]
   23cdc:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23ce0:	ea000009 	b	23d0c <DisableGpioDetect+0x144>
	case DETECT_FALLING_ASYNC:
		virtual_gpio_function[offset]&=mask;
   23ce4:	e59f2030 	ldr	r2, [pc, #48]	; 23d1c <DisableGpioDetect+0x154>
   23ce8:	e51b300c 	ldr	r3, [fp, #-12]
   23cec:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23cf0:	e51b3008 	ldr	r3, [fp, #-8]
   23cf4:	e0022003 	and	r2, r2, r3
   23cf8:	e59f101c 	ldr	r1, [pc, #28]	; 23d1c <DisableGpioDetect+0x154>
   23cfc:	e51b300c 	ldr	r3, [fp, #-12]
   23d00:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23d04:	ea000000 	b	23d0c <DisableGpioDetect+0x144>
	case DETECT_NONE:
		break;
   23d08:	e320f000 	nop	{0}
	}
}
   23d0c:	e320f000 	nop	{0}
   23d10:	e28bd000 	add	sp, fp, #0
   23d14:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23d18:	e12fff1e 	bx	lr
   23d1c:	0002c628 	andeq	ip, r2, r8, lsr #12

00023d20 <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   23d20:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23d24:	e28db000 	add	fp, sp, #0
   23d28:	e24dd014 	sub	sp, sp, #20
   23d2c:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   23d30:	e51b3010 	ldr	r3, [fp, #-16]
   23d34:	e203301f 	and	r3, r3, #31
   23d38:	e3a02001 	mov	r2, #1
   23d3c:	e1a03312 	lsl	r3, r2, r3
   23d40:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23d44:	e51b3010 	ldr	r3, [fp, #-16]
   23d48:	e1a032a3 	lsr	r3, r3, #5
   23d4c:	e50b300c 	str	r3, [fp, #-12]

	/* 清除虚拟GPIO中断标志 */
	virtual_gpio_state[offset] &= ~mask;
   23d50:	e59f202c 	ldr	r2, [pc, #44]	; 23d84 <ClearGpioInterrupt+0x64>
   23d54:	e51b300c 	ldr	r3, [fp, #-12]
   23d58:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23d5c:	e51b3008 	ldr	r3, [fp, #-8]
   23d60:	e1e03003 	mvn	r3, r3
   23d64:	e0022003 	and	r2, r2, r3
   23d68:	e59f1014 	ldr	r1, [pc, #20]	; 23d84 <ClearGpioInterrupt+0x64>
   23d6c:	e51b300c 	ldr	r3, [fp, #-12]
   23d70:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   23d74:	e320f000 	nop	{0}
   23d78:	e28bd000 	add	sp, fp, #0
   23d7c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23d80:	e12fff1e 	bx	lr
   23d84:	0002c620 	andeq	ip, r2, r0, lsr #12

00023d88 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   23d88:	e92d4800 	push	{fp, lr}
   23d8c:	e28db004 	add	fp, sp, #4
   23d90:	e24dd018 	sub	sp, sp, #24
   23d94:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   23d98:	e3a03000 	mov	r3, #0
   23d9c:	e50b3010 	str	r3, [fp, #-16]

	vTaskSuspendAll();
   23da0:	ebfffa50 	bl	226e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   23da4:	e59f3194 	ldr	r3, [pc, #404]	; 23f40 <pvPortMalloc+0x1b8>
   23da8:	e5933000 	ldr	r3, [r3]
   23dac:	e3530000 	cmp	r3, #0
   23db0:	1a000000 	bne	23db8 <pvPortMalloc+0x30>
		{
			prvHeapInit();
   23db4:	eb000093 	bl	24008 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   23db8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23dbc:	e3530000 	cmp	r3, #0
   23dc0:	0a00000c 	beq	23df8 <pvPortMalloc+0x70>
		{
			xWantedSize += heapSTRUCT_SIZE;
   23dc4:	e3a03010 	mov	r3, #16
   23dc8:	e1a02003 	mov	r2, r3
   23dcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23dd0:	e0833002 	add	r3, r3, r2
   23dd4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   23dd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23ddc:	e2033007 	and	r3, r3, #7
   23de0:	e3530000 	cmp	r3, #0
   23de4:	0a000003 	beq	23df8 <pvPortMalloc+0x70>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   23de8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23dec:	e3c33007 	bic	r3, r3, #7
   23df0:	e2833008 	add	r3, r3, #8
   23df4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   23df8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23dfc:	e3530000 	cmp	r3, #0
   23e00:	0a000043 	beq	23f14 <pvPortMalloc+0x18c>
   23e04:	e3a02a01 	mov	r2, #4096	; 0x1000
   23e08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23e0c:	e1530002 	cmp	r3, r2
   23e10:	2a00003f 	bcs	23f14 <pvPortMalloc+0x18c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   23e14:	e59f3128 	ldr	r3, [pc, #296]	; 23f44 <pvPortMalloc+0x1bc>
   23e18:	e50b300c 	str	r3, [fp, #-12]
			pxBlock = xStart.pxNextFreeBlock;
   23e1c:	e59f3120 	ldr	r3, [pc, #288]	; 23f44 <pvPortMalloc+0x1bc>
   23e20:	e5933000 	ldr	r3, [r3]
   23e24:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   23e28:	ea000004 	b	23e40 <pvPortMalloc+0xb8>
			{
				pxPreviousBlock = pxBlock;
   23e2c:	e51b3008 	ldr	r3, [fp, #-8]
   23e30:	e50b300c 	str	r3, [fp, #-12]
				pxBlock = pxBlock->pxNextFreeBlock;
   23e34:	e51b3008 	ldr	r3, [fp, #-8]
   23e38:	e5933000 	ldr	r3, [r3]
   23e3c:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   23e40:	e51b3008 	ldr	r3, [fp, #-8]
   23e44:	e5933004 	ldr	r3, [r3, #4]
   23e48:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   23e4c:	e1520003 	cmp	r2, r3
   23e50:	9a000003 	bls	23e64 <pvPortMalloc+0xdc>
   23e54:	e51b3008 	ldr	r3, [fp, #-8]
   23e58:	e5933000 	ldr	r3, [r3]
   23e5c:	e3530000 	cmp	r3, #0
   23e60:	1afffff1 	bne	23e2c <pvPortMalloc+0xa4>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   23e64:	e59f30d4 	ldr	r3, [pc, #212]	; 23f40 <pvPortMalloc+0x1b8>
   23e68:	e5933000 	ldr	r3, [r3]
   23e6c:	e51b2008 	ldr	r2, [fp, #-8]
   23e70:	e1520003 	cmp	r2, r3
   23e74:	0a000026 	beq	23f14 <pvPortMalloc+0x18c>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   23e78:	e51b300c 	ldr	r3, [fp, #-12]
   23e7c:	e5933000 	ldr	r3, [r3]
   23e80:	e3a02010 	mov	r2, #16
   23e84:	e0833002 	add	r3, r3, r2
   23e88:	e50b3010 	str	r3, [fp, #-16]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   23e8c:	e51b3008 	ldr	r3, [fp, #-8]
   23e90:	e5932000 	ldr	r2, [r3]
   23e94:	e51b300c 	ldr	r3, [fp, #-12]
   23e98:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   23e9c:	e51b3008 	ldr	r3, [fp, #-8]
   23ea0:	e5932004 	ldr	r2, [r3, #4]
   23ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23ea8:	e0423003 	sub	r3, r2, r3
   23eac:	e3a02010 	mov	r2, #16
   23eb0:	e1a02082 	lsl	r2, r2, #1
   23eb4:	e1530002 	cmp	r3, r2
   23eb8:	9a00000e 	bls	23ef8 <pvPortMalloc+0x170>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   23ebc:	e51b2008 	ldr	r2, [fp, #-8]
   23ec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23ec4:	e0823003 	add	r3, r2, r3
   23ec8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   23ecc:	e51b3008 	ldr	r3, [fp, #-8]
   23ed0:	e5932004 	ldr	r2, [r3, #4]
   23ed4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23ed8:	e0422003 	sub	r2, r2, r3
   23edc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23ee0:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   23ee4:	e51b3008 	ldr	r3, [fp, #-8]
   23ee8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   23eec:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   23ef0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   23ef4:	eb000079 	bl	240e0 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   23ef8:	e59f3048 	ldr	r3, [pc, #72]	; 23f48 <pvPortMalloc+0x1c0>
   23efc:	e5932000 	ldr	r2, [r3]
   23f00:	e51b3008 	ldr	r3, [fp, #-8]
   23f04:	e5933004 	ldr	r3, [r3, #4]
   23f08:	e0423003 	sub	r3, r2, r3
   23f0c:	e59f2034 	ldr	r2, [pc, #52]	; 23f48 <pvPortMalloc+0x1c0>
   23f10:	e5823000 	str	r3, [r2]
			}
		}
	}
	xTaskResumeAll();
   23f14:	ebfff9ff 	bl	22718 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   23f18:	e59f302c 	ldr	r3, [pc, #44]	; 23f4c <pvPortMalloc+0x1c4>
   23f1c:	e5932000 	ldr	r2, [r3]
   23f20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23f24:	e0823003 	add	r3, r2, r3
   23f28:	e59f201c 	ldr	r2, [pc, #28]	; 23f4c <pvPortMalloc+0x1c4>
   23f2c:	e5823000 	str	r3, [r2]

	return pvReturn;
   23f30:	e51b3010 	ldr	r3, [fp, #-16]
}
   23f34:	e1a00003 	mov	r0, r3
   23f38:	e24bd004 	sub	sp, fp, #4
   23f3c:	e8bd8800 	pop	{fp, pc}
   23f40:	0002d648 	andeq	sp, r2, r8, asr #12
   23f44:	0002d640 	andeq	sp, r2, r0, asr #12
   23f48:	0002c244 	andeq	ip, r2, r4, asr #4
   23f4c:	0002d64c 	andeq	sp, r2, ip, asr #12

00023f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   23f50:	e92d4800 	push	{fp, lr}
   23f54:	e28db004 	add	fp, sp, #4
   23f58:	e24dd010 	sub	sp, sp, #16
   23f5c:	e50b0010 	str	r0, [fp, #-16]
unsigned char *puc = ( unsigned char * ) pv;
   23f60:	e51b3010 	ldr	r3, [fp, #-16]
   23f64:	e50b3008 	str	r3, [fp, #-8]
xBlockLink *pxLink;

	if( pv != NULL )
   23f68:	e51b3010 	ldr	r3, [fp, #-16]
   23f6c:	e3530000 	cmp	r3, #0
   23f70:	0a000011 	beq	23fbc <vPortFree+0x6c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   23f74:	e3a03010 	mov	r3, #16
   23f78:	e2633000 	rsb	r3, r3, #0
   23f7c:	e51b2008 	ldr	r2, [fp, #-8]
   23f80:	e0823003 	add	r3, r2, r3
   23f84:	e50b3008 	str	r3, [fp, #-8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   23f88:	e51b3008 	ldr	r3, [fp, #-8]
   23f8c:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
   23f90:	ebfff9d4 	bl	226e8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   23f94:	e51b300c 	ldr	r3, [fp, #-12]
   23f98:	e5932004 	ldr	r2, [r3, #4]
   23f9c:	e59f3024 	ldr	r3, [pc, #36]	; 23fc8 <vPortFree+0x78>
   23fa0:	e5933000 	ldr	r3, [r3]
   23fa4:	e0823003 	add	r3, r2, r3
   23fa8:	e59f2018 	ldr	r2, [pc, #24]	; 23fc8 <vPortFree+0x78>
   23fac:	e5823000 	str	r3, [r2]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   23fb0:	e51b000c 	ldr	r0, [fp, #-12]
   23fb4:	eb000049 	bl	240e0 <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   23fb8:	ebfff9d6 	bl	22718 <xTaskResumeAll>
	}
}
   23fbc:	e320f000 	nop	{0}
   23fc0:	e24bd004 	sub	sp, fp, #4
   23fc4:	e8bd8800 	pop	{fp, pc}
   23fc8:	0002c244 	andeq	ip, r2, r4, asr #4

00023fcc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   23fcc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23fd0:	e28db000 	add	fp, sp, #0
	return xFreeBytesRemaining;
   23fd4:	e59f3010 	ldr	r3, [pc, #16]	; 23fec <xPortGetFreeHeapSize+0x20>
   23fd8:	e5933000 	ldr	r3, [r3]
}
   23fdc:	e1a00003 	mov	r0, r3
   23fe0:	e28bd000 	add	sp, fp, #0
   23fe4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23fe8:	e12fff1e 	bx	lr
   23fec:	0002c244 	andeq	ip, r2, r4, asr #4

00023ff0 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   23ff0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23ff4:	e28db000 	add	fp, sp, #0
	/* This just exists to keep the linker quiet. */
}
   23ff8:	e320f000 	nop	{0}
   23ffc:	e28bd000 	add	sp, fp, #0
   24000:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24004:	e12fff1e 	bx	lr

00024008 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   24008:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2400c:	e28db000 	add	fp, sp, #0
   24010:	e24dd00c 	sub	sp, sp, #12
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   24014:	e59f30b4 	ldr	r3, [pc, #180]	; 240d0 <prvHeapInit+0xc8>
   24018:	e59f20b4 	ldr	r2, [pc, #180]	; 240d4 <prvHeapInit+0xcc>
   2401c:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   24020:	e59f30a8 	ldr	r3, [pc, #168]	; 240d0 <prvHeapInit+0xc8>
   24024:	e3a02000 	mov	r2, #0
   24028:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   2402c:	e3a02a01 	mov	r2, #4096	; 0x1000
   24030:	e59f309c 	ldr	r3, [pc, #156]	; 240d4 <prvHeapInit+0xcc>
   24034:	e0823003 	add	r3, r2, r3
   24038:	e50b3008 	str	r3, [fp, #-8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   2403c:	e3a03010 	mov	r3, #16
   24040:	e2633000 	rsb	r3, r3, #0
   24044:	e51b2008 	ldr	r2, [fp, #-8]
   24048:	e0823003 	add	r3, r2, r3
   2404c:	e50b3008 	str	r3, [fp, #-8]
	pxEnd = ( void * ) pucHeapEnd;
   24050:	e59f2080 	ldr	r2, [pc, #128]	; 240d8 <prvHeapInit+0xd0>
   24054:	e51b3008 	ldr	r3, [fp, #-8]
   24058:	e5823000 	str	r3, [r2]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   2405c:	e59f3074 	ldr	r3, [pc, #116]	; 240d8 <prvHeapInit+0xd0>
   24060:	e5933000 	ldr	r3, [r3]
   24064:	e3a02000 	mov	r2, #0
   24068:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   2406c:	e59f3064 	ldr	r3, [pc, #100]	; 240d8 <prvHeapInit+0xd0>
   24070:	e5933000 	ldr	r3, [r3]
   24074:	e3a02000 	mov	r2, #0
   24078:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   2407c:	e59f3050 	ldr	r3, [pc, #80]	; 240d4 <prvHeapInit+0xcc>
   24080:	e50b300c 	str	r3, [fp, #-12]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   24084:	e3a03a01 	mov	r3, #4096	; 0x1000
   24088:	e3a02010 	mov	r2, #16
   2408c:	e0432002 	sub	r2, r3, r2
   24090:	e51b300c 	ldr	r3, [fp, #-12]
   24094:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   24098:	e59f3038 	ldr	r3, [pc, #56]	; 240d8 <prvHeapInit+0xd0>
   2409c:	e5932000 	ldr	r2, [r3]
   240a0:	e51b300c 	ldr	r3, [fp, #-12]
   240a4:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   240a8:	e59f302c 	ldr	r3, [pc, #44]	; 240dc <prvHeapInit+0xd4>
   240ac:	e5933000 	ldr	r3, [r3]
   240b0:	e3a02010 	mov	r2, #16
   240b4:	e0433002 	sub	r3, r3, r2
   240b8:	e59f201c 	ldr	r2, [pc, #28]	; 240dc <prvHeapInit+0xd4>
   240bc:	e5823000 	str	r3, [r2]
}
   240c0:	e320f000 	nop	{0}
   240c4:	e28bd000 	add	sp, fp, #0
   240c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   240cc:	e12fff1e 	bx	lr
   240d0:	0002d640 	andeq	sp, r2, r0, asr #12
   240d4:	0002c640 	andeq	ip, r2, r0, asr #12
   240d8:	0002d648 	andeq	sp, r2, r8, asr #12
   240dc:	0002c244 	andeq	ip, r2, r4, asr #4

000240e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   240e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   240e4:	e28db000 	add	fp, sp, #0
   240e8:	e24dd014 	sub	sp, sp, #20
   240ec:	e50b0010 	str	r0, [fp, #-16]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   240f0:	e59f3134 	ldr	r3, [pc, #308]	; 2422c <prvInsertBlockIntoFreeList+0x14c>
   240f4:	e50b3008 	str	r3, [fp, #-8]
   240f8:	ea000002 	b	24108 <prvInsertBlockIntoFreeList+0x28>
   240fc:	e51b3008 	ldr	r3, [fp, #-8]
   24100:	e5933000 	ldr	r3, [r3]
   24104:	e50b3008 	str	r3, [fp, #-8]
   24108:	e51b3008 	ldr	r3, [fp, #-8]
   2410c:	e5933000 	ldr	r3, [r3]
   24110:	e51b2010 	ldr	r2, [fp, #-16]
   24114:	e1520003 	cmp	r2, r3
   24118:	8afffff7 	bhi	240fc <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   2411c:	e51b3008 	ldr	r3, [fp, #-8]
   24120:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   24124:	e51b3008 	ldr	r3, [fp, #-8]
   24128:	e5933004 	ldr	r3, [r3, #4]
   2412c:	e51b200c 	ldr	r2, [fp, #-12]
   24130:	e0823003 	add	r3, r2, r3
   24134:	e51b2010 	ldr	r2, [fp, #-16]
   24138:	e1520003 	cmp	r2, r3
   2413c:	1a000008 	bne	24164 <prvInsertBlockIntoFreeList+0x84>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   24140:	e51b3008 	ldr	r3, [fp, #-8]
   24144:	e5932004 	ldr	r2, [r3, #4]
   24148:	e51b3010 	ldr	r3, [fp, #-16]
   2414c:	e5933004 	ldr	r3, [r3, #4]
   24150:	e0822003 	add	r2, r2, r3
   24154:	e51b3008 	ldr	r3, [fp, #-8]
   24158:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   2415c:	e51b3008 	ldr	r3, [fp, #-8]
   24160:	e50b3010 	str	r3, [fp, #-16]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   24164:	e51b3010 	ldr	r3, [fp, #-16]
   24168:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   2416c:	e51b3010 	ldr	r3, [fp, #-16]
   24170:	e5933004 	ldr	r3, [r3, #4]
   24174:	e51b200c 	ldr	r2, [fp, #-12]
   24178:	e0822003 	add	r2, r2, r3
   2417c:	e51b3008 	ldr	r3, [fp, #-8]
   24180:	e5933000 	ldr	r3, [r3]
   24184:	e1520003 	cmp	r2, r3
   24188:	1a000018 	bne	241f0 <prvInsertBlockIntoFreeList+0x110>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   2418c:	e51b3008 	ldr	r3, [fp, #-8]
   24190:	e5932000 	ldr	r2, [r3]
   24194:	e59f3094 	ldr	r3, [pc, #148]	; 24230 <prvInsertBlockIntoFreeList+0x150>
   24198:	e5933000 	ldr	r3, [r3]
   2419c:	e1520003 	cmp	r2, r3
   241a0:	0a00000d 	beq	241dc <prvInsertBlockIntoFreeList+0xfc>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   241a4:	e51b3010 	ldr	r3, [fp, #-16]
   241a8:	e5932004 	ldr	r2, [r3, #4]
   241ac:	e51b3008 	ldr	r3, [fp, #-8]
   241b0:	e5933000 	ldr	r3, [r3]
   241b4:	e5933004 	ldr	r3, [r3, #4]
   241b8:	e0822003 	add	r2, r2, r3
   241bc:	e51b3010 	ldr	r3, [fp, #-16]
   241c0:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   241c4:	e51b3008 	ldr	r3, [fp, #-8]
   241c8:	e5933000 	ldr	r3, [r3]
   241cc:	e5932000 	ldr	r2, [r3]
   241d0:	e51b3010 	ldr	r3, [fp, #-16]
   241d4:	e5832000 	str	r2, [r3]
   241d8:	ea000008 	b	24200 <prvInsertBlockIntoFreeList+0x120>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   241dc:	e59f304c 	ldr	r3, [pc, #76]	; 24230 <prvInsertBlockIntoFreeList+0x150>
   241e0:	e5932000 	ldr	r2, [r3]
   241e4:	e51b3010 	ldr	r3, [fp, #-16]
   241e8:	e5832000 	str	r2, [r3]
   241ec:	ea000003 	b	24200 <prvInsertBlockIntoFreeList+0x120>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   241f0:	e51b3008 	ldr	r3, [fp, #-8]
   241f4:	e5932000 	ldr	r2, [r3]
   241f8:	e51b3010 	ldr	r3, [fp, #-16]
   241fc:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   24200:	e51b2008 	ldr	r2, [fp, #-8]
   24204:	e51b3010 	ldr	r3, [fp, #-16]
   24208:	e1520003 	cmp	r2, r3
   2420c:	0a000002 	beq	2421c <prvInsertBlockIntoFreeList+0x13c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   24210:	e51b3008 	ldr	r3, [fp, #-8]
   24214:	e51b2010 	ldr	r2, [fp, #-16]
   24218:	e5832000 	str	r2, [r3]
	}
}
   2421c:	e320f000 	nop	{0}
   24220:	e28bd000 	add	sp, fp, #0
   24224:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24228:	e12fff1e 	bx	lr
   2422c:	0002d640 	andeq	sp, r2, r0, asr #12
   24230:	0002d648 	andeq	sp, r2, r8, asr #12

00024234 <undefined_instruction>:
   24234:	eafffffe 	b	24234 <undefined_instruction>

00024238 <prefetch_abort>:
   24238:	eafffffe 	b	24238 <prefetch_abort>

0002423c <data_abort>:
   2423c:	eafffffe 	b	2423c <data_abort>

00024240 <unused>:
   24240:	eafffffe 	b	24240 <unused>

00024244 <fiq>:
   24244:	eafffffe 	b	24244 <fiq>

00024248 <hang>:
   24248:	eafffffe 	b	24248 <hang>

0002424c <uart_putc>:

#define UART0_BASE  0x101f1000
#define UART0_DR    (*(volatile unsigned int*)(UART0_BASE + 0x00))
#define UART0_FR    (*(volatile unsigned int*)(UART0_BASE + 0x18))

void uart_putc(char c) {
   2424c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24250:	e28db000 	add	fp, sp, #0
   24254:	e24dd00c 	sub	sp, sp, #12
   24258:	e1a03000 	mov	r3, r0
   2425c:	e54b3005 	strb	r3, [fp, #-5]
    while (UART0_FR & (1 << 5)) ; // 等待发送 FIFO 非满
   24260:	e320f000 	nop	{0}
   24264:	e59f3028 	ldr	r3, [pc, #40]	; 24294 <uart_putc+0x48>
   24268:	e5933000 	ldr	r3, [r3]
   2426c:	e2033020 	and	r3, r3, #32
   24270:	e3530000 	cmp	r3, #0
   24274:	1afffffa 	bne	24264 <uart_putc+0x18>
    UART0_DR = c;
   24278:	e59f2018 	ldr	r2, [pc, #24]	; 24298 <uart_putc+0x4c>
   2427c:	e55b3005 	ldrb	r3, [fp, #-5]
   24280:	e5823000 	str	r3, [r2]
}
   24284:	e320f000 	nop	{0}
   24288:	e28bd000 	add	sp, fp, #0
   2428c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24290:	e12fff1e 	bx	lr
   24294:	101f1018 	andsne	r1, pc, r8, lsl r0	; <UNPREDICTABLE>
   24298:	101f1000 	andsne	r1, pc, r0

0002429c <uart_puts>:

void uart_puts(const char* s) {
   2429c:	e92d4800 	push	{fp, lr}
   242a0:	e28db004 	add	fp, sp, #4
   242a4:	e24dd008 	sub	sp, sp, #8
   242a8:	e50b0008 	str	r0, [fp, #-8]
    while (*s) {
   242ac:	ea000005 	b	242c8 <uart_puts+0x2c>
        uart_putc(*s++);
   242b0:	e51b3008 	ldr	r3, [fp, #-8]
   242b4:	e2832001 	add	r2, r3, #1
   242b8:	e50b2008 	str	r2, [fp, #-8]
   242bc:	e5d33000 	ldrb	r3, [r3]
   242c0:	e1a00003 	mov	r0, r3
   242c4:	ebffffe0 	bl	2424c <uart_putc>
    while (*s) {
   242c8:	e51b3008 	ldr	r3, [fp, #-8]
   242cc:	e5d33000 	ldrb	r3, [r3]
   242d0:	e3530000 	cmp	r3, #0
   242d4:	1afffff5 	bne	242b0 <uart_puts+0x14>
    }
}
   242d8:	e320f000 	nop	{0}
   242dc:	e320f000 	nop	{0}
   242e0:	e24bd004 	sub	sp, fp, #4
   242e4:	e8bd8800 	pop	{fp, pc}

000242e8 <uart_print_num>:

/* 简单的整数转字符串函数，避免使用 sprintf */
void uart_print_num(FRESULT num) {
   242e8:	e92d4800 	push	{fp, lr}
   242ec:	e28db004 	add	fp, sp, #4
   242f0:	e24dd010 	sub	sp, sp, #16
   242f4:	e1a03000 	mov	r3, r0
   242f8:	e54b300d 	strb	r3, [fp, #-13]
    char buf[4];
    int i = 0;
   242fc:	e3a03000 	mov	r3, #0
   24300:	e50b3008 	str	r3, [fp, #-8]
    
    /* 处理0的特殊情况 */
    if (num == 0) {
   24304:	e55b300d 	ldrb	r3, [fp, #-13]
   24308:	e3530000 	cmp	r3, #0
   2430c:	1a000019 	bne	24378 <uart_print_num+0x90>
        uart_putc('0');
   24310:	e3a00030 	mov	r0, #48	; 0x30
   24314:	ebffffcc 	bl	2424c <uart_putc>
   24318:	ea000026 	b	243b8 <uart_print_num+0xd0>
        return;
    }
    
    /* 将数字转换为字符串（倒序） */
    while (num > 0) {
        buf[i++] = '0' + (num % 10);
   2431c:	e55b200d 	ldrb	r2, [fp, #-13]
   24320:	e59f3098 	ldr	r3, [pc, #152]	; 243c0 <uart_print_num+0xd8>
   24324:	e0831293 	umull	r1, r3, r3, r2
   24328:	e1a011a3 	lsr	r1, r3, #3
   2432c:	e1a03001 	mov	r3, r1
   24330:	e1a03103 	lsl	r3, r3, #2
   24334:	e0833001 	add	r3, r3, r1
   24338:	e1a03083 	lsl	r3, r3, #1
   2433c:	e0423003 	sub	r3, r2, r3
   24340:	e6ef2073 	uxtb	r2, r3
   24344:	e51b3008 	ldr	r3, [fp, #-8]
   24348:	e2831001 	add	r1, r3, #1
   2434c:	e50b1008 	str	r1, [fp, #-8]
   24350:	e2822030 	add	r2, r2, #48	; 0x30
   24354:	e6ef2072 	uxtb	r2, r2
   24358:	e2433004 	sub	r3, r3, #4
   2435c:	e083300b 	add	r3, r3, fp
   24360:	e5432008 	strb	r2, [r3, #-8]
        num /= 10;
   24364:	e55b300d 	ldrb	r3, [fp, #-13]
   24368:	e59f2050 	ldr	r2, [pc, #80]	; 243c0 <uart_print_num+0xd8>
   2436c:	e0832392 	umull	r2, r3, r2, r3
   24370:	e1a031a3 	lsr	r3, r3, #3
   24374:	e54b300d 	strb	r3, [fp, #-13]
    while (num > 0) {
   24378:	e55b300d 	ldrb	r3, [fp, #-13]
   2437c:	e3530000 	cmp	r3, #0
   24380:	1affffe5 	bne	2431c <uart_print_num+0x34>
    }
    
    /* 输出（反向输出以得到正确顺序） */
    while (i > 0) {
   24384:	ea000008 	b	243ac <uart_print_num+0xc4>
        uart_putc(buf[--i]);
   24388:	e51b3008 	ldr	r3, [fp, #-8]
   2438c:	e2433001 	sub	r3, r3, #1
   24390:	e50b3008 	str	r3, [fp, #-8]
   24394:	e24b200c 	sub	r2, fp, #12
   24398:	e51b3008 	ldr	r3, [fp, #-8]
   2439c:	e0823003 	add	r3, r2, r3
   243a0:	e5d33000 	ldrb	r3, [r3]
   243a4:	e1a00003 	mov	r0, r3
   243a8:	ebffffa7 	bl	2424c <uart_putc>
    while (i > 0) {
   243ac:	e51b3008 	ldr	r3, [fp, #-8]
   243b0:	e3530000 	cmp	r3, #0
   243b4:	cafffff3 	bgt	24388 <uart_print_num+0xa0>
    }
}
   243b8:	e24bd004 	sub	sp, fp, #4
   243bc:	e8bd8800 	pop	{fp, pc}
   243c0:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

000243c4 <print_fatfs_error>:

void print_fatfs_error(FRESULT res) {
   243c4:	e92d4800 	push	{fp, lr}
   243c8:	e28db004 	add	fp, sp, #4
   243cc:	e24dd008 	sub	sp, sp, #8
   243d0:	e1a03000 	mov	r3, r0
   243d4:	e54b3005 	strb	r3, [fp, #-5]
    uart_puts("FatFS Error: ");
   243d8:	e59f0170 	ldr	r0, [pc, #368]	; 24550 <print_fatfs_error+0x18c>
   243dc:	ebffffae 	bl	2429c <uart_puts>
    switch (res) {
   243e0:	e55b3005 	ldrb	r3, [fp, #-5]
   243e4:	e3530013 	cmp	r3, #19
   243e8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   243ec:	ea00004f 	b	24530 <print_fatfs_error+0x16c>
   243f0:	00024440 	andeq	r4, r2, r0, asr #8
   243f4:	0002444c 	andeq	r4, r2, ip, asr #8
   243f8:	00024458 	andeq	r4, r2, r8, asr r4
   243fc:	00024464 	andeq	r4, r2, r4, ror #8
   24400:	00024470 	andeq	r4, r2, r0, ror r4
   24404:	0002447c 	andeq	r4, r2, ip, ror r4
   24408:	00024488 	andeq	r4, r2, r8, lsl #9
   2440c:	00024494 	muleq	r2, r4, r4
   24410:	000244a0 	andeq	r4, r2, r0, lsr #9
   24414:	000244ac 	andeq	r4, r2, ip, lsr #9
   24418:	000244b8 			; <UNDEFINED> instruction: 0x000244b8
   2441c:	000244c4 	andeq	r4, r2, r4, asr #9
   24420:	000244d0 	ldrdeq	r4, [r2], -r0
   24424:	000244dc 	ldrdeq	r4, [r2], -ip
   24428:	000244e8 	andeq	r4, r2, r8, ror #9
   2442c:	000244f4 	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24430:	00024500 	andeq	r4, r2, r0, lsl #10
   24434:	0002450c 	andeq	r4, r2, ip, lsl #10
   24438:	00024518 	andeq	r4, r2, r8, lsl r5
   2443c:	00024524 	andeq	r4, r2, r4, lsr #10
        case FR_OK: uart_puts("(0) Succeeded"); break;
   24440:	e59f010c 	ldr	r0, [pc, #268]	; 24554 <print_fatfs_error+0x190>
   24444:	ebffff94 	bl	2429c <uart_puts>
   24448:	ea00003b 	b	2453c <print_fatfs_error+0x178>
        case FR_DISK_ERR: uart_puts("(1) A hard error occurred in the low level disk I/O layer"); break;
   2444c:	e59f0104 	ldr	r0, [pc, #260]	; 24558 <print_fatfs_error+0x194>
   24450:	ebffff91 	bl	2429c <uart_puts>
   24454:	ea000038 	b	2453c <print_fatfs_error+0x178>
        case FR_INT_ERR: uart_puts("(2) Assertion failed"); break;
   24458:	e59f00fc 	ldr	r0, [pc, #252]	; 2455c <print_fatfs_error+0x198>
   2445c:	ebffff8e 	bl	2429c <uart_puts>
   24460:	ea000035 	b	2453c <print_fatfs_error+0x178>
        case FR_NOT_READY: uart_puts("(3) The physical drive cannot work"); break;
   24464:	e59f00f4 	ldr	r0, [pc, #244]	; 24560 <print_fatfs_error+0x19c>
   24468:	ebffff8b 	bl	2429c <uart_puts>
   2446c:	ea000032 	b	2453c <print_fatfs_error+0x178>
        case FR_NO_FILE: uart_puts("(4) Could not find the file"); break;
   24470:	e59f00ec 	ldr	r0, [pc, #236]	; 24564 <print_fatfs_error+0x1a0>
   24474:	ebffff88 	bl	2429c <uart_puts>
   24478:	ea00002f 	b	2453c <print_fatfs_error+0x178>
        case FR_NO_PATH: uart_puts("(5) Could not find the path"); break;
   2447c:	e59f00e4 	ldr	r0, [pc, #228]	; 24568 <print_fatfs_error+0x1a4>
   24480:	ebffff85 	bl	2429c <uart_puts>
   24484:	ea00002c 	b	2453c <print_fatfs_error+0x178>
        case FR_INVALID_NAME: uart_puts("(6) The path name format is invalid"); break;
   24488:	e59f00dc 	ldr	r0, [pc, #220]	; 2456c <print_fatfs_error+0x1a8>
   2448c:	ebffff82 	bl	2429c <uart_puts>
   24490:	ea000029 	b	2453c <print_fatfs_error+0x178>
        case FR_DENIED: uart_puts("(7) Access denied due to prohibited access or directory full"); break;
   24494:	e59f00d4 	ldr	r0, [pc, #212]	; 24570 <print_fatfs_error+0x1ac>
   24498:	ebffff7f 	bl	2429c <uart_puts>
   2449c:	ea000026 	b	2453c <print_fatfs_error+0x178>
        case FR_EXIST: uart_puts("(8) Access denied due to prohibited access"); break;
   244a0:	e59f00cc 	ldr	r0, [pc, #204]	; 24574 <print_fatfs_error+0x1b0>
   244a4:	ebffff7c 	bl	2429c <uart_puts>
   244a8:	ea000023 	b	2453c <print_fatfs_error+0x178>
        case FR_INVALID_OBJECT: uart_puts("(9) The file/directory object is invalid"); break;
   244ac:	e59f00c4 	ldr	r0, [pc, #196]	; 24578 <print_fatfs_error+0x1b4>
   244b0:	ebffff79 	bl	2429c <uart_puts>
   244b4:	ea000020 	b	2453c <print_fatfs_error+0x178>
        case FR_WRITE_PROTECTED: uart_puts("(10) The physical drive is write protected"); break;
   244b8:	e59f00bc 	ldr	r0, [pc, #188]	; 2457c <print_fatfs_error+0x1b8>
   244bc:	ebffff76 	bl	2429c <uart_puts>
   244c0:	ea00001d 	b	2453c <print_fatfs_error+0x178>
        case FR_INVALID_DRIVE: uart_puts("(11) The logical drive number is invalid"); break;
   244c4:	e59f00b4 	ldr	r0, [pc, #180]	; 24580 <print_fatfs_error+0x1bc>
   244c8:	ebffff73 	bl	2429c <uart_puts>
   244cc:	ea00001a 	b	2453c <print_fatfs_error+0x178>
        case FR_NOT_ENABLED: uart_puts("(12) The volume has no work area"); break;
   244d0:	e59f00ac 	ldr	r0, [pc, #172]	; 24584 <print_fatfs_error+0x1c0>
   244d4:	ebffff70 	bl	2429c <uart_puts>
   244d8:	ea000017 	b	2453c <print_fatfs_error+0x178>
        case FR_NO_FILESYSTEM: uart_puts("(13) There is no valid FAT volume"); break;
   244dc:	e59f00a4 	ldr	r0, [pc, #164]	; 24588 <print_fatfs_error+0x1c4>
   244e0:	ebffff6d 	bl	2429c <uart_puts>
   244e4:	ea000014 	b	2453c <print_fatfs_error+0x178>
        case FR_MKFS_ABORTED: uart_puts("(14) The f_mkfs() aborted due to any problem"); break;
   244e8:	e59f009c 	ldr	r0, [pc, #156]	; 2458c <print_fatfs_error+0x1c8>
   244ec:	ebffff6a 	bl	2429c <uart_puts>
   244f0:	ea000011 	b	2453c <print_fatfs_error+0x178>
        case FR_TIMEOUT: uart_puts("(15) Could not get a grant to access the volume within defined period"); break;
   244f4:	e59f0094 	ldr	r0, [pc, #148]	; 24590 <print_fatfs_error+0x1cc>
   244f8:	ebffff67 	bl	2429c <uart_puts>
   244fc:	ea00000e 	b	2453c <print_fatfs_error+0x178>
        case FR_LOCKED: uart_puts("(16) The operation is rejected according to the file sharing policy"); break;
   24500:	e59f008c 	ldr	r0, [pc, #140]	; 24594 <print_fatfs_error+0x1d0>
   24504:	ebffff64 	bl	2429c <uart_puts>
   24508:	ea00000b 	b	2453c <print_fatfs_error+0x178>
        case FR_NOT_ENOUGH_CORE: uart_puts("(17) LFN working buffer could not be allocated"); break;
   2450c:	e59f0084 	ldr	r0, [pc, #132]	; 24598 <print_fatfs_error+0x1d4>
   24510:	ebffff61 	bl	2429c <uart_puts>
   24514:	ea000008 	b	2453c <print_fatfs_error+0x178>
        case FR_TOO_MANY_OPEN_FILES: uart_puts("(18) Number of open files > FF_FS_LOCK"); break;
   24518:	e59f007c 	ldr	r0, [pc, #124]	; 2459c <print_fatfs_error+0x1d8>
   2451c:	ebffff5e 	bl	2429c <uart_puts>
   24520:	ea000005 	b	2453c <print_fatfs_error+0x178>
        case FR_INVALID_PARAMETER: uart_puts("(19) Given parameter is invalid"); break;
   24524:	e59f0074 	ldr	r0, [pc, #116]	; 245a0 <print_fatfs_error+0x1dc>
   24528:	ebffff5b 	bl	2429c <uart_puts>
   2452c:	ea000002 	b	2453c <print_fatfs_error+0x178>
        default: uart_puts("Unknown error code"); break;
   24530:	e59f006c 	ldr	r0, [pc, #108]	; 245a4 <print_fatfs_error+0x1e0>
   24534:	ebffff58 	bl	2429c <uart_puts>
   24538:	e320f000 	nop	{0}
    }
    uart_puts("\n");
   2453c:	e59f0064 	ldr	r0, [pc, #100]	; 245a8 <print_fatfs_error+0x1e4>
   24540:	ebffff55 	bl	2429c <uart_puts>
}
   24544:	e320f000 	nop	{0}
   24548:	e24bd004 	sub	sp, fp, #4
   2454c:	e8bd8800 	pop	{fp, pc}
   24550:	0002bae0 	andeq	fp, r2, r0, ror #21
   24554:	0002baf0 	strdeq	fp, [r2], -r0
   24558:	0002bb00 	andeq	fp, r2, r0, lsl #22
   2455c:	0002bb3c 	andeq	fp, r2, ip, lsr fp
   24560:	0002bb54 	andeq	fp, r2, r4, asr fp
   24564:	0002bb78 	andeq	fp, r2, r8, ror fp
   24568:	0002bb94 	muleq	r2, r4, fp
   2456c:	0002bbb0 			; <UNDEFINED> instruction: 0x0002bbb0
   24570:	0002bbd4 	ldrdeq	fp, [r2], -r4
   24574:	0002bc14 	andeq	fp, r2, r4, lsl ip
   24578:	0002bc40 	andeq	fp, r2, r0, asr #24
   2457c:	0002bc6c 	andeq	fp, r2, ip, ror #24
   24580:	0002bc98 	muleq	r2, r8, ip
   24584:	0002bcc4 	andeq	fp, r2, r4, asr #25
   24588:	0002bce8 	andeq	fp, r2, r8, ror #25
   2458c:	0002bd0c 	andeq	fp, r2, ip, lsl #26
   24590:	0002bd3c 	andeq	fp, r2, ip, lsr sp
   24594:	0002bd84 	andeq	fp, r2, r4, lsl #27
   24598:	0002bdc8 	andeq	fp, r2, r8, asr #27
   2459c:	0002bdf8 	strdeq	fp, [r2], -r8
   245a0:	0002be20 	andeq	fp, r2, r0, lsr #28
   245a4:	0002be40 	andeq	fp, r2, r0, asr #28
   245a8:	0002be54 	andeq	fp, r2, r4, asr lr

000245ac <uart_init>:

void uart_init() {
   245ac:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   245b0:	e28db000 	add	fp, sp, #0
    // 对于 QEMU versatilepb 平台，一般 UART 默认已初始化
    // 你可以留空，或者设定波特率等（如 PL011 初始化）
}
   245b4:	e320f000 	nop	{0}
   245b8:	e28bd000 	add	sp, fp, #0
   245bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   245c0:	e12fff1e 	bx	lr

000245c4 <task1>:

void task1(void *pParam) {
   245c4:	e92d4800 	push	{fp, lr}
   245c8:	e28db004 	add	fp, sp, #4
   245cc:	e24dd010 	sub	sp, sp, #16
   245d0:	e50b0010 	str	r0, [fp, #-16]
    (void)pParam;  /* 防止未使用参数警告 */

    int i = 0;
   245d4:	e3a03000 	mov	r3, #0
   245d8:	e50b3008 	str	r3, [fp, #-8]
    while(1) {
        i++;
   245dc:	e51b3008 	ldr	r3, [fp, #-8]
   245e0:	e2833001 	add	r3, r3, #1
   245e4:	e50b3008 	str	r3, [fp, #-8]
        SetGpio(16, 1);
   245e8:	e3a01001 	mov	r1, #1
   245ec:	e3a00010 	mov	r0, #16
   245f0:	ebfffcdf 	bl	23974 <SetGpio>
        vTaskDelay(200);
   245f4:	e3a000c8 	mov	r0, #200	; 0xc8
   245f8:	ebfff67f 	bl	21ffc <vTaskDelay>
        i++;
   245fc:	eafffff6 	b	245dc <task1+0x18>

00024600 <task2>:
    }
}

void task2(void *pParam) {
   24600:	e92d4800 	push	{fp, lr}
   24604:	e28db004 	add	fp, sp, #4
   24608:	e24dd010 	sub	sp, sp, #16
   2460c:	e50b0010 	str	r0, [fp, #-16]
    (void)pParam;  /* 防止未使用参数警告 */

    int i = 0;
   24610:	e3a03000 	mov	r3, #0
   24614:	e50b3008 	str	r3, [fp, #-8]
    while(1) {
        i++;
   24618:	e51b3008 	ldr	r3, [fp, #-8]
   2461c:	e2833001 	add	r3, r3, #1
   24620:	e50b3008 	str	r3, [fp, #-8]
        vTaskDelay(100);
   24624:	e3a00064 	mov	r0, #100	; 0x64
   24628:	ebfff673 	bl	21ffc <vTaskDelay>
        SetGpio(16, 0);
   2462c:	e3a01000 	mov	r1, #0
   24630:	e3a00010 	mov	r0, #16
   24634:	ebfffcce 	bl	23974 <SetGpio>
        vTaskDelay(100);
   24638:	e3a00064 	mov	r0, #100	; 0x64
   2463c:	ebfff66e 	bl	21ffc <vTaskDelay>
        i++;
   24640:	eafffff4 	b	24618 <task2+0x18>

00024644 <fatfs_task>:
    }
}

void fatfs_task(void *pParam) {
   24644:	e92d4800 	push	{fp, lr}
   24648:	e28db004 	add	fp, sp, #4
   2464c:	e24dde73 	sub	sp, sp, #1840	; 0x730
   24650:	e50b0730 	str	r0, [fp, #-1840]	; 0xfffff8d0
    BYTE work[FF_MAX_SS]; /* 工作区 */
    FILINFO fno;        /* 文件信息对象 */
    
    (void)pParam;       /* 防止未使用参数警告 */
    
    uart_puts("FatFS Task Started\n");
   24654:	e59f0384 	ldr	r0, [pc, #900]	; 249e0 <fatfs_task+0x39c>
   24658:	ebffff0f 	bl	2429c <uart_puts>
    
    /* 确保首先清除挂载 */
    f_mount(NULL, "", 0);
   2465c:	e3a02000 	mov	r2, #0
   24660:	e59f137c 	ldr	r1, [pc, #892]	; 249e4 <fatfs_task+0x3a0>
   24664:	e3a00000 	mov	r0, #0
   24668:	eb000c80 	bl	27870 <f_mount>
    
    /* 初始化磁盘 */
    if (disk_initialize(0) & STA_NOINIT) {
   2466c:	e3a00000 	mov	r0, #0
   24670:	eb001aa1 	bl	2b0fc <disk_initialize>
   24674:	e1a03000 	mov	r3, r0
   24678:	e2033001 	and	r3, r3, #1
   2467c:	e3530000 	cmp	r3, #0
   24680:	0a000004 	beq	24698 <fatfs_task+0x54>
        uart_puts("Disk initialization failed!\n");
   24684:	e59f035c 	ldr	r0, [pc, #860]	; 249e8 <fatfs_task+0x3a4>
   24688:	ebffff03 	bl	2429c <uart_puts>
        vTaskDelete(NULL);
   2468c:	e3a00000 	mov	r0, #0
   24690:	ebfff5d5 	bl	21dec <vTaskDelete>
        return;
   24694:	ea0000cf 	b	249d8 <fatfs_task+0x394>
    }
    
    /* 格式化磁盘 */
    uart_puts("Formatting disk...\n");
   24698:	e59f034c 	ldr	r0, [pc, #844]	; 249ec <fatfs_task+0x3a8>
   2469c:	ebfffefe 	bl	2429c <uart_puts>
    MKFS_PARM fmt_opt;
    memset(&fmt_opt, 0, sizeof(fmt_opt));
   246a0:	e24b3e71 	sub	r3, fp, #1808	; 0x710
   246a4:	e2433004 	sub	r3, r3, #4
   246a8:	e243300c 	sub	r3, r3, #12
   246ac:	e3a02010 	mov	r2, #16
   246b0:	e3a01000 	mov	r1, #0
   246b4:	e1a00003 	mov	r0, r3
   246b8:	eb001c1c 	bl	2b730 <memset>
    fmt_opt.fmt = FM_ANY;  /* 使用自动选择格式，让FatFS选择最合适的文件系统类型 */
   246bc:	e3a03007 	mov	r3, #7
   246c0:	e54b3720 	strb	r3, [fp, #-1824]	; 0xfffff8e0
    
    res = f_mkfs("", &fmt_opt, work, sizeof(work));
   246c4:	e24b2e6f 	sub	r2, fp, #1776	; 0x6f0
   246c8:	e2422004 	sub	r2, r2, #4
   246cc:	e2422004 	sub	r2, r2, #4
   246d0:	e24b1e71 	sub	r1, fp, #1808	; 0x710
   246d4:	e2411004 	sub	r1, r1, #4
   246d8:	e241100c 	sub	r1, r1, #12
   246dc:	e3a03c02 	mov	r3, #512	; 0x200
   246e0:	e59f02fc 	ldr	r0, [pc, #764]	; 249e4 <fatfs_task+0x3a0>
   246e4:	eb0016ce 	bl	2a224 <f_mkfs>
   246e8:	e1a03000 	mov	r3, r0
   246ec:	e54b3005 	strb	r3, [fp, #-5]
    if (res != FR_OK) {
   246f0:	e55b3005 	ldrb	r3, [fp, #-5]
   246f4:	e3530000 	cmp	r3, #0
   246f8:	0a000007 	beq	2471c <fatfs_task+0xd8>
        uart_puts("Format failed: ");
   246fc:	e59f02ec 	ldr	r0, [pc, #748]	; 249f0 <fatfs_task+0x3ac>
   24700:	ebfffee5 	bl	2429c <uart_puts>
        print_fatfs_error(res);
   24704:	e55b3005 	ldrb	r3, [fp, #-5]
   24708:	e1a00003 	mov	r0, r3
   2470c:	ebffff2c 	bl	243c4 <print_fatfs_error>
        vTaskDelete(NULL);
   24710:	e3a00000 	mov	r0, #0
   24714:	ebfff5b4 	bl	21dec <vTaskDelete>
        return;
   24718:	ea0000ae 	b	249d8 <fatfs_task+0x394>
    } else {
        uart_puts("Format successful\n");
   2471c:	e59f02d0 	ldr	r0, [pc, #720]	; 249f4 <fatfs_task+0x3b0>
   24720:	ebfffedd 	bl	2429c <uart_puts>
    }
    
    /* 确保格式化完成后重新初始化磁盘 */
    disk_initialize(0);
   24724:	e3a00000 	mov	r0, #0
   24728:	eb001a73 	bl	2b0fc <disk_initialize>
    
    /* 挂载文件系统 */
    uart_puts("Mounting filesystem...\n");
   2472c:	e59f02c4 	ldr	r0, [pc, #708]	; 249f8 <fatfs_task+0x3b4>
   24730:	ebfffed9 	bl	2429c <uart_puts>
    memset(&fs, 0, sizeof(FATFS));  /* 确保文件系统对象被正确初始化 */
   24734:	e24b3f8f 	sub	r3, fp, #572	; 0x23c
   24738:	e3a02e23 	mov	r2, #560	; 0x230
   2473c:	e3a01000 	mov	r1, #0
   24740:	e1a00003 	mov	r0, r3
   24744:	eb001bf9 	bl	2b730 <memset>
    res = f_mount(&fs, "", 1);  /* 1: 立即挂载 */
   24748:	e24b3f8f 	sub	r3, fp, #572	; 0x23c
   2474c:	e3a02001 	mov	r2, #1
   24750:	e59f128c 	ldr	r1, [pc, #652]	; 249e4 <fatfs_task+0x3a0>
   24754:	e1a00003 	mov	r0, r3
   24758:	eb000c44 	bl	27870 <f_mount>
   2475c:	e1a03000 	mov	r3, r0
   24760:	e54b3005 	strb	r3, [fp, #-5]
    
    if (res != FR_OK) {
   24764:	e55b3005 	ldrb	r3, [fp, #-5]
   24768:	e3530000 	cmp	r3, #0
   2476c:	0a000007 	beq	24790 <fatfs_task+0x14c>
        uart_puts("Mount failed: ");
   24770:	e59f0284 	ldr	r0, [pc, #644]	; 249fc <fatfs_task+0x3b8>
   24774:	ebfffec8 	bl	2429c <uart_puts>
        print_fatfs_error(res);
   24778:	e55b3005 	ldrb	r3, [fp, #-5]
   2477c:	e1a00003 	mov	r0, r3
   24780:	ebffff0f 	bl	243c4 <print_fatfs_error>
        vTaskDelete(NULL);
   24784:	e3a00000 	mov	r0, #0
   24788:	ebfff597 	bl	21dec <vTaskDelete>
        return;
   2478c:	ea000091 	b	249d8 <fatfs_task+0x394>
    }
    
    uart_puts("Filesystem mounted successfully\n");
   24790:	e59f0268 	ldr	r0, [pc, #616]	; 24a00 <fatfs_task+0x3bc>
   24794:	ebfffec0 	bl	2429c <uart_puts>
    
    /* 显示文件系统信息 */
    DWORD free_clust;
    FATFS *fs_ptr = &fs;
   24798:	e24b3f8f 	sub	r3, fp, #572	; 0x23c
   2479c:	e50b3728 	str	r3, [fp, #-1832]	; 0xfffff8d8
    res = f_getfree("", &free_clust, &fs_ptr);
   247a0:	e24b3e72 	sub	r3, fp, #1824	; 0x720
   247a4:	e2433004 	sub	r3, r3, #4
   247a8:	e2433004 	sub	r3, r3, #4
   247ac:	e24b1e72 	sub	r1, fp, #1824	; 0x720
   247b0:	e2411004 	sub	r1, r1, #4
   247b4:	e1a02003 	mov	r2, r3
   247b8:	e59f0224 	ldr	r0, [pc, #548]	; 249e4 <fatfs_task+0x3a0>
   247bc:	eb001281 	bl	291c8 <f_getfree>
   247c0:	e1a03000 	mov	r3, r0
   247c4:	e54b3005 	strb	r3, [fp, #-5]
    if (res == FR_OK) {
   247c8:	e55b3005 	ldrb	r3, [fp, #-5]
   247cc:	e3530000 	cmp	r3, #0
   247d0:	1a00001b 	bne	24844 <fatfs_task+0x200>
        uart_puts("FAT Type: ");
   247d4:	e59f0228 	ldr	r0, [pc, #552]	; 24a04 <fatfs_task+0x3c0>
   247d8:	ebfffeaf 	bl	2429c <uart_puts>
        if (fs.fs_type == FS_FAT12) {
   247dc:	e55b323c 	ldrb	r3, [fp, #-572]	; 0xfffffdc4
   247e0:	e3530001 	cmp	r3, #1
   247e4:	1a000002 	bne	247f4 <fatfs_task+0x1b0>
            uart_puts("FAT12\n");
   247e8:	e59f0218 	ldr	r0, [pc, #536]	; 24a08 <fatfs_task+0x3c4>
   247ec:	ebfffeaa 	bl	2429c <uart_puts>
   247f0:	ea000013 	b	24844 <fatfs_task+0x200>
        } else if (fs.fs_type == FS_FAT16) {
   247f4:	e55b323c 	ldrb	r3, [fp, #-572]	; 0xfffffdc4
   247f8:	e3530002 	cmp	r3, #2
   247fc:	1a000002 	bne	2480c <fatfs_task+0x1c8>
            uart_puts("FAT16\n");
   24800:	e59f0204 	ldr	r0, [pc, #516]	; 24a0c <fatfs_task+0x3c8>
   24804:	ebfffea4 	bl	2429c <uart_puts>
   24808:	ea00000d 	b	24844 <fatfs_task+0x200>
        } else if (fs.fs_type == FS_FAT32) {
   2480c:	e55b323c 	ldrb	r3, [fp, #-572]	; 0xfffffdc4
   24810:	e3530003 	cmp	r3, #3
   24814:	1a000002 	bne	24824 <fatfs_task+0x1e0>
            uart_puts("FAT32\n");
   24818:	e59f01f0 	ldr	r0, [pc, #496]	; 24a10 <fatfs_task+0x3cc>
   2481c:	ebfffe9e 	bl	2429c <uart_puts>
   24820:	ea000007 	b	24844 <fatfs_task+0x200>
        } else if (fs.fs_type == FS_EXFAT) {
   24824:	e55b323c 	ldrb	r3, [fp, #-572]	; 0xfffffdc4
   24828:	e3530004 	cmp	r3, #4
   2482c:	1a000002 	bne	2483c <fatfs_task+0x1f8>
            uart_puts("exFAT\n");
   24830:	e59f01dc 	ldr	r0, [pc, #476]	; 24a14 <fatfs_task+0x3d0>
   24834:	ebfffe98 	bl	2429c <uart_puts>
   24838:	ea000001 	b	24844 <fatfs_task+0x200>
        } else {
            uart_puts("Unknown\n");
   2483c:	e59f01d4 	ldr	r0, [pc, #468]	; 24a18 <fatfs_task+0x3d4>
   24840:	ebfffe95 	bl	2429c <uart_puts>
        }
    }
    
    /* 尝试写一个简单的测试文件 */
    uart_puts("Creating test file...\n");
   24844:	e59f01d0 	ldr	r0, [pc, #464]	; 24a1c <fatfs_task+0x3d8>
   24848:	ebfffe93 	bl	2429c <uart_puts>
    res = f_open(&fil, "TEST.TXT", FA_CREATE_ALWAYS | FA_WRITE);
   2484c:	e24b3e46 	sub	r3, fp, #1120	; 0x460
   24850:	e2433004 	sub	r3, r3, #4
   24854:	e3a0200a 	mov	r2, #10
   24858:	e59f11c0 	ldr	r1, [pc, #448]	; 24a20 <fatfs_task+0x3dc>
   2485c:	e1a00003 	mov	r0, r3
   24860:	eb000c41 	bl	2796c <f_open>
   24864:	e1a03000 	mov	r3, r0
   24868:	e54b3005 	strb	r3, [fp, #-5]
    
    if (res != FR_OK) {
   2486c:	e55b3005 	ldrb	r3, [fp, #-5]
   24870:	e3530000 	cmp	r3, #0
   24874:	0a000002 	beq	24884 <fatfs_task+0x240>
        uart_puts("Failed to create file\n");
   24878:	e59f01a4 	ldr	r0, [pc, #420]	; 24a24 <fatfs_task+0x3e0>
   2487c:	ebfffe86 	bl	2429c <uart_puts>
   24880:	ea00004f 	b	249c4 <fatfs_task+0x380>
    } else {
        const char *message = "Hello from FreeRTOS and FatFS integration!\n";
   24884:	e59f319c 	ldr	r3, [pc, #412]	; 24a28 <fatfs_task+0x3e4>
   24888:	e50b300c 	str	r3, [fp, #-12]
        res = f_write(&fil, message, strlen(message), &bw);
   2488c:	e51b000c 	ldr	r0, [fp, #-12]
   24890:	eb001c41 	bl	2b99c <strlen>
   24894:	e1a02000 	mov	r2, r0
   24898:	e24b3e49 	sub	r3, fp, #1168	; 0x490
   2489c:	e2433004 	sub	r3, r3, #4
   248a0:	e24b0e46 	sub	r0, fp, #1120	; 0x460
   248a4:	e2400004 	sub	r0, r0, #4
   248a8:	e51b100c 	ldr	r1, [fp, #-12]
   248ac:	eb000e8c 	bl	282e4 <f_write>
   248b0:	e1a03000 	mov	r3, r0
   248b4:	e54b3005 	strb	r3, [fp, #-5]
        
        if (res != FR_OK) {
   248b8:	e55b3005 	ldrb	r3, [fp, #-5]
   248bc:	e3530000 	cmp	r3, #0
   248c0:	0a000002 	beq	248d0 <fatfs_task+0x28c>
            uart_puts("Failed to write to file\n");
   248c4:	e59f0160 	ldr	r0, [pc, #352]	; 24a2c <fatfs_task+0x3e8>
   248c8:	ebfffe73 	bl	2429c <uart_puts>
   248cc:	ea000001 	b	248d8 <fatfs_task+0x294>
        } else {
            uart_puts("File written successfully\n");
   248d0:	e59f0158 	ldr	r0, [pc, #344]	; 24a30 <fatfs_task+0x3ec>
   248d4:	ebfffe70 	bl	2429c <uart_puts>
        }
        
        f_sync(&fil);  /* 确保数据写入磁盘 */
   248d8:	e24b3e46 	sub	r3, fp, #1120	; 0x460
   248dc:	e2433004 	sub	r3, r3, #4
   248e0:	e1a00003 	mov	r0, r3
   248e4:	eb000fc8 	bl	2880c <f_sync>
        f_close(&fil);
   248e8:	e24b3e46 	sub	r3, fp, #1120	; 0x460
   248ec:	e2433004 	sub	r3, r3, #4
   248f0:	e1a00003 	mov	r0, r3
   248f4:	eb001032 	bl	289c4 <f_close>
        
        /* 尝试读取文件 */
        uart_puts("Reading file content...\n");
   248f8:	e59f0134 	ldr	r0, [pc, #308]	; 24a34 <fatfs_task+0x3f0>
   248fc:	ebfffe66 	bl	2429c <uart_puts>
        res = f_open(&fil, "TEST.TXT", FA_READ);
   24900:	e24b3e46 	sub	r3, fp, #1120	; 0x460
   24904:	e2433004 	sub	r3, r3, #4
   24908:	e3a02001 	mov	r2, #1
   2490c:	e59f110c 	ldr	r1, [pc, #268]	; 24a20 <fatfs_task+0x3dc>
   24910:	e1a00003 	mov	r0, r3
   24914:	eb000c14 	bl	2796c <f_open>
   24918:	e1a03000 	mov	r3, r0
   2491c:	e54b3005 	strb	r3, [fp, #-5]
        
        if (res != FR_OK) {
   24920:	e55b3005 	ldrb	r3, [fp, #-5]
   24924:	e3530000 	cmp	r3, #0
   24928:	0a000002 	beq	24938 <fatfs_task+0x2f4>
            uart_puts("Failed to open file for reading\n");
   2492c:	e59f0104 	ldr	r0, [pc, #260]	; 24a38 <fatfs_task+0x3f4>
   24930:	ebfffe59 	bl	2429c <uart_puts>
   24934:	ea000022 	b	249c4 <fatfs_task+0x380>
        } else {
            memset(buffer, 0, sizeof(buffer));
   24938:	e24b3e4f 	sub	r3, fp, #1264	; 0x4f0
   2493c:	e2433004 	sub	r3, r3, #4
   24940:	e2433004 	sub	r3, r3, #4
   24944:	e3a02064 	mov	r2, #100	; 0x64
   24948:	e3a01000 	mov	r1, #0
   2494c:	e1a00003 	mov	r0, r3
   24950:	eb001b76 	bl	2b730 <memset>
            
            res = f_read(&fil, buffer, sizeof(buffer), &bw);
   24954:	e24b3e49 	sub	r3, fp, #1168	; 0x490
   24958:	e2433004 	sub	r3, r3, #4
   2495c:	e24b1e4f 	sub	r1, fp, #1264	; 0x4f0
   24960:	e2411004 	sub	r1, r1, #4
   24964:	e2411004 	sub	r1, r1, #4
   24968:	e24b0e46 	sub	r0, fp, #1120	; 0x460
   2496c:	e2400004 	sub	r0, r0, #4
   24970:	e3a02064 	mov	r2, #100	; 0x64
   24974:	eb000d41 	bl	27e80 <f_read>
   24978:	e1a03000 	mov	r3, r0
   2497c:	e54b3005 	strb	r3, [fp, #-5]
            
            if (res != FR_OK) {
   24980:	e55b3005 	ldrb	r3, [fp, #-5]
   24984:	e3530000 	cmp	r3, #0
   24988:	0a000002 	beq	24998 <fatfs_task+0x354>
                uart_puts("Failed to read file\n");
   2498c:	e59f00a8 	ldr	r0, [pc, #168]	; 24a3c <fatfs_task+0x3f8>
   24990:	ebfffe41 	bl	2429c <uart_puts>
   24994:	ea000006 	b	249b4 <fatfs_task+0x370>
            } else {
                uart_puts("File content: ");
   24998:	e59f00a0 	ldr	r0, [pc, #160]	; 24a40 <fatfs_task+0x3fc>
   2499c:	ebfffe3e 	bl	2429c <uart_puts>
                uart_puts(buffer);
   249a0:	e24b3e4f 	sub	r3, fp, #1264	; 0x4f0
   249a4:	e2433004 	sub	r3, r3, #4
   249a8:	e2433004 	sub	r3, r3, #4
   249ac:	e1a00003 	mov	r0, r3
   249b0:	ebfffe39 	bl	2429c <uart_puts>
            }
            
            f_close(&fil);
   249b4:	e24b3e46 	sub	r3, fp, #1120	; 0x460
   249b8:	e2433004 	sub	r3, r3, #4
   249bc:	e1a00003 	mov	r0, r3
   249c0:	eb000fff 	bl	289c4 <f_close>
        }
    }
    
    uart_puts("\nFatFS integration test completed successfully!\n");
   249c4:	e59f0078 	ldr	r0, [pc, #120]	; 24a44 <fatfs_task+0x400>
   249c8:	ebfffe33 	bl	2429c <uart_puts>
    
    /* 任务完成后进入低功耗状态，避免不必要的磁盘操作 */
    while(1) {
        vTaskDelay(10000);  /* 延迟更长时间，减少循环频率 */
   249cc:	e59f0074 	ldr	r0, [pc, #116]	; 24a48 <fatfs_task+0x404>
   249d0:	ebfff589 	bl	21ffc <vTaskDelay>
   249d4:	eafffffc 	b	249cc <fatfs_task+0x388>
    }
}
   249d8:	e24bd004 	sub	sp, fp, #4
   249dc:	e8bd8800 	pop	{fp, pc}
   249e0:	0002be58 	andeq	fp, r2, r8, asr lr
   249e4:	0002be6c 	andeq	fp, r2, ip, ror #28
   249e8:	0002be70 	andeq	fp, r2, r0, ror lr
   249ec:	0002be90 	muleq	r2, r0, lr
   249f0:	0002bea4 	andeq	fp, r2, r4, lsr #29
   249f4:	0002beb4 			; <UNDEFINED> instruction: 0x0002beb4
   249f8:	0002bec8 	andeq	fp, r2, r8, asr #29
   249fc:	0002bee0 	andeq	fp, r2, r0, ror #29
   24a00:	0002bef0 	strdeq	fp, [r2], -r0
   24a04:	0002bf14 	andeq	fp, r2, r4, lsl pc
   24a08:	0002bf20 	andeq	fp, r2, r0, lsr #30
   24a0c:	0002bf28 	andeq	fp, r2, r8, lsr #30
   24a10:	0002bf30 	andeq	fp, r2, r0, lsr pc
   24a14:	0002bf38 	andeq	fp, r2, r8, lsr pc
   24a18:	0002bf40 	andeq	fp, r2, r0, asr #30
   24a1c:	0002bf4c 	andeq	fp, r2, ip, asr #30
   24a20:	0002bf64 	andeq	fp, r2, r4, ror #30
   24a24:	0002bf70 	andeq	fp, r2, r0, ror pc
   24a28:	0002bf88 	andeq	fp, r2, r8, lsl #31
   24a2c:	0002bfb4 			; <UNDEFINED> instruction: 0x0002bfb4
   24a30:	0002bfd0 	ldrdeq	fp, [r2], -r0
   24a34:	0002bfec 	andeq	fp, r2, ip, ror #31
   24a38:	0002c008 	andeq	ip, r2, r8
   24a3c:	0002c02c 	andeq	ip, r2, ip, lsr #32
   24a40:	0002c044 	andeq	ip, r2, r4, asr #32
   24a44:	0002c054 	andeq	ip, r2, r4, asr r0
   24a48:	00002710 	andeq	r2, r0, r0, lsl r7

00024a4c <main>:
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
void main (void)
{
   24a4c:	e92d4800 	push	{fp, lr}
   24a50:	e28db004 	add	fp, sp, #4
   24a54:	e24dd010 	sub	sp, sp, #16
    uart_init();
   24a58:	ebfffed3 	bl	245ac <uart_init>
    uart_puts("Hello from FreeRTOS with FatFS!\n");
   24a5c:	e59f00b0 	ldr	r0, [pc, #176]	; 24b14 <main+0xc8>
   24a60:	ebfffe0d 	bl	2429c <uart_puts>

    SetGpioFunction(16, 1);			// RDY led
   24a64:	e3a01001 	mov	r1, #1
   24a68:	e3a00010 	mov	r0, #16
   24a6c:	ebfffb7d 	bl	23868 <SetGpioFunction>

    xTaskCreate(task1, (const signed char *)"LED_0", 128, NULL, 0, NULL);
   24a70:	e3a03000 	mov	r3, #0
   24a74:	e58d300c 	str	r3, [sp, #12]
   24a78:	e3a03000 	mov	r3, #0
   24a7c:	e58d3008 	str	r3, [sp, #8]
   24a80:	e3a03000 	mov	r3, #0
   24a84:	e58d3004 	str	r3, [sp, #4]
   24a88:	e3a03000 	mov	r3, #0
   24a8c:	e58d3000 	str	r3, [sp]
   24a90:	e3a03000 	mov	r3, #0
   24a94:	e3a02080 	mov	r2, #128	; 0x80
   24a98:	e59f1078 	ldr	r1, [pc, #120]	; 24b18 <main+0xcc>
   24a9c:	e59f0078 	ldr	r0, [pc, #120]	; 24b1c <main+0xd0>
   24aa0:	ebfff43e 	bl	21ba0 <xTaskGenericCreate>
    xTaskCreate(task2, (const signed char *)"LED_1", 128, NULL, 0, NULL);
   24aa4:	e3a03000 	mov	r3, #0
   24aa8:	e58d300c 	str	r3, [sp, #12]
   24aac:	e3a03000 	mov	r3, #0
   24ab0:	e58d3008 	str	r3, [sp, #8]
   24ab4:	e3a03000 	mov	r3, #0
   24ab8:	e58d3004 	str	r3, [sp, #4]
   24abc:	e3a03000 	mov	r3, #0
   24ac0:	e58d3000 	str	r3, [sp]
   24ac4:	e3a03000 	mov	r3, #0
   24ac8:	e3a02080 	mov	r2, #128	; 0x80
   24acc:	e59f104c 	ldr	r1, [pc, #76]	; 24b20 <main+0xd4>
   24ad0:	e59f004c 	ldr	r0, [pc, #76]	; 24b24 <main+0xd8>
   24ad4:	ebfff431 	bl	21ba0 <xTaskGenericCreate>
    xTaskCreate(fatfs_task, (const signed char *)"FatFS", 512, NULL, 1, NULL);
   24ad8:	e3a03000 	mov	r3, #0
   24adc:	e58d300c 	str	r3, [sp, #12]
   24ae0:	e3a03000 	mov	r3, #0
   24ae4:	e58d3008 	str	r3, [sp, #8]
   24ae8:	e3a03000 	mov	r3, #0
   24aec:	e58d3004 	str	r3, [sp, #4]
   24af0:	e3a03001 	mov	r3, #1
   24af4:	e58d3000 	str	r3, [sp]
   24af8:	e3a03000 	mov	r3, #0
   24afc:	e3a02c02 	mov	r2, #512	; 0x200
   24b00:	e59f1020 	ldr	r1, [pc, #32]	; 24b28 <main+0xdc>
   24b04:	e59f0020 	ldr	r0, [pc, #32]	; 24b2c <main+0xe0>
   24b08:	ebfff424 	bl	21ba0 <xTaskGenericCreate>
    	
    vTaskStartScheduler();
   24b0c:	ebfff6c0 	bl	22614 <vTaskStartScheduler>

    /*
     *	We should never get here, but just in case something goes wrong,
     *	we'll place the CPU into a safe loop.
     */
    while(1) {
   24b10:	eafffffe 	b	24b10 <main+0xc4>
   24b14:	0002c088 	andeq	ip, r2, r8, lsl #1
   24b18:	0002c0ac 	andeq	ip, r2, ip, lsr #1
   24b1c:	000245c4 	andeq	r4, r2, r4, asr #11
   24b20:	0002c0b4 	strheq	ip, [r2], -r4
   24b24:	00024600 	andeq	r4, r2, r0, lsl #12
   24b28:	0002c0bc 	strheq	ip, [r2], -ip	; <UNPREDICTABLE>
   24b2c:	00024644 	andeq	r4, r2, r4, asr #12

00024b30 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
   24b30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24b34:	e28db000 	add	fp, sp, #0
   24b38:	e24dd014 	sub	sp, sp, #20
   24b3c:	e50b0010 	str	r0, [fp, #-16]
	WORD rv;

	rv = ptr[1];
   24b40:	e51b3010 	ldr	r3, [fp, #-16]
   24b44:	e2833001 	add	r3, r3, #1
   24b48:	e5d33000 	ldrb	r3, [r3]
   24b4c:	e14b30b6 	strh	r3, [fp, #-6]
	rv = rv << 8 | ptr[0];
   24b50:	e15b30b6 	ldrh	r3, [fp, #-6]
   24b54:	e1a03403 	lsl	r3, r3, #8
   24b58:	e6bf2073 	sxth	r2, r3
   24b5c:	e51b3010 	ldr	r3, [fp, #-16]
   24b60:	e5d33000 	ldrb	r3, [r3]
   24b64:	e6bf3073 	sxth	r3, r3
   24b68:	e1823003 	orr	r3, r2, r3
   24b6c:	e6bf3073 	sxth	r3, r3
   24b70:	e14b30b6 	strh	r3, [fp, #-6]
	return rv;
   24b74:	e15b30b6 	ldrh	r3, [fp, #-6]
}
   24b78:	e1a00003 	mov	r0, r3
   24b7c:	e28bd000 	add	sp, fp, #0
   24b80:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24b84:	e12fff1e 	bx	lr

00024b88 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
   24b88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24b8c:	e28db000 	add	fp, sp, #0
   24b90:	e24dd014 	sub	sp, sp, #20
   24b94:	e50b0010 	str	r0, [fp, #-16]
	DWORD rv;

	rv = ptr[3];
   24b98:	e51b3010 	ldr	r3, [fp, #-16]
   24b9c:	e2833003 	add	r3, r3, #3
   24ba0:	e5d33000 	ldrb	r3, [r3]
   24ba4:	e50b3008 	str	r3, [fp, #-8]
	rv = rv << 8 | ptr[2];
   24ba8:	e51b3008 	ldr	r3, [fp, #-8]
   24bac:	e1a03403 	lsl	r3, r3, #8
   24bb0:	e51b2010 	ldr	r2, [fp, #-16]
   24bb4:	e2822002 	add	r2, r2, #2
   24bb8:	e5d22000 	ldrb	r2, [r2]
   24bbc:	e1833002 	orr	r3, r3, r2
   24bc0:	e50b3008 	str	r3, [fp, #-8]
	rv = rv << 8 | ptr[1];
   24bc4:	e51b3008 	ldr	r3, [fp, #-8]
   24bc8:	e1a03403 	lsl	r3, r3, #8
   24bcc:	e51b2010 	ldr	r2, [fp, #-16]
   24bd0:	e2822001 	add	r2, r2, #1
   24bd4:	e5d22000 	ldrb	r2, [r2]
   24bd8:	e1833002 	orr	r3, r3, r2
   24bdc:	e50b3008 	str	r3, [fp, #-8]
	rv = rv << 8 | ptr[0];
   24be0:	e51b3008 	ldr	r3, [fp, #-8]
   24be4:	e1a03403 	lsl	r3, r3, #8
   24be8:	e51b2010 	ldr	r2, [fp, #-16]
   24bec:	e5d22000 	ldrb	r2, [r2]
   24bf0:	e1833002 	orr	r3, r3, r2
   24bf4:	e50b3008 	str	r3, [fp, #-8]
	return rv;
   24bf8:	e51b3008 	ldr	r3, [fp, #-8]
}
   24bfc:	e1a00003 	mov	r0, r3
   24c00:	e28bd000 	add	sp, fp, #0
   24c04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24c08:	e12fff1e 	bx	lr

00024c0c <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
   24c0c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24c10:	e28db000 	add	fp, sp, #0
   24c14:	e24dd00c 	sub	sp, sp, #12
   24c18:	e50b0008 	str	r0, [fp, #-8]
   24c1c:	e1a03001 	mov	r3, r1
   24c20:	e14b30ba 	strh	r3, [fp, #-10]
	*ptr++ = (BYTE)val; val >>= 8;
   24c24:	e51b3008 	ldr	r3, [fp, #-8]
   24c28:	e2832001 	add	r2, r3, #1
   24c2c:	e50b2008 	str	r2, [fp, #-8]
   24c30:	e15b20ba 	ldrh	r2, [fp, #-10]
   24c34:	e6ef2072 	uxtb	r2, r2
   24c38:	e5c32000 	strb	r2, [r3]
   24c3c:	e15b30ba 	ldrh	r3, [fp, #-10]
   24c40:	e1a03423 	lsr	r3, r3, #8
   24c44:	e14b30ba 	strh	r3, [fp, #-10]
	*ptr++ = (BYTE)val;
   24c48:	e51b3008 	ldr	r3, [fp, #-8]
   24c4c:	e2832001 	add	r2, r3, #1
   24c50:	e50b2008 	str	r2, [fp, #-8]
   24c54:	e15b20ba 	ldrh	r2, [fp, #-10]
   24c58:	e6ef2072 	uxtb	r2, r2
   24c5c:	e5c32000 	strb	r2, [r3]
}
   24c60:	e320f000 	nop	{0}
   24c64:	e28bd000 	add	sp, fp, #0
   24c68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24c6c:	e12fff1e 	bx	lr

00024c70 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
   24c70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24c74:	e28db000 	add	fp, sp, #0
   24c78:	e24dd00c 	sub	sp, sp, #12
   24c7c:	e50b0008 	str	r0, [fp, #-8]
   24c80:	e50b100c 	str	r1, [fp, #-12]
	*ptr++ = (BYTE)val; val >>= 8;
   24c84:	e51b3008 	ldr	r3, [fp, #-8]
   24c88:	e2832001 	add	r2, r3, #1
   24c8c:	e50b2008 	str	r2, [fp, #-8]
   24c90:	e51b200c 	ldr	r2, [fp, #-12]
   24c94:	e6ef2072 	uxtb	r2, r2
   24c98:	e5c32000 	strb	r2, [r3]
   24c9c:	e51b300c 	ldr	r3, [fp, #-12]
   24ca0:	e1a03423 	lsr	r3, r3, #8
   24ca4:	e50b300c 	str	r3, [fp, #-12]
	*ptr++ = (BYTE)val; val >>= 8;
   24ca8:	e51b3008 	ldr	r3, [fp, #-8]
   24cac:	e2832001 	add	r2, r3, #1
   24cb0:	e50b2008 	str	r2, [fp, #-8]
   24cb4:	e51b200c 	ldr	r2, [fp, #-12]
   24cb8:	e6ef2072 	uxtb	r2, r2
   24cbc:	e5c32000 	strb	r2, [r3]
   24cc0:	e51b300c 	ldr	r3, [fp, #-12]
   24cc4:	e1a03423 	lsr	r3, r3, #8
   24cc8:	e50b300c 	str	r3, [fp, #-12]
	*ptr++ = (BYTE)val; val >>= 8;
   24ccc:	e51b3008 	ldr	r3, [fp, #-8]
   24cd0:	e2832001 	add	r2, r3, #1
   24cd4:	e50b2008 	str	r2, [fp, #-8]
   24cd8:	e51b200c 	ldr	r2, [fp, #-12]
   24cdc:	e6ef2072 	uxtb	r2, r2
   24ce0:	e5c32000 	strb	r2, [r3]
   24ce4:	e51b300c 	ldr	r3, [fp, #-12]
   24ce8:	e1a03423 	lsr	r3, r3, #8
   24cec:	e50b300c 	str	r3, [fp, #-12]
	*ptr++ = (BYTE)val;
   24cf0:	e51b3008 	ldr	r3, [fp, #-8]
   24cf4:	e2832001 	add	r2, r3, #1
   24cf8:	e50b2008 	str	r2, [fp, #-8]
   24cfc:	e51b200c 	ldr	r2, [fp, #-12]
   24d00:	e6ef2072 	uxtb	r2, r2
   24d04:	e5c32000 	strb	r2, [r3]
}
   24d08:	e320f000 	nop	{0}
   24d0c:	e28bd000 	add	sp, fp, #0
   24d10:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24d14:	e12fff1e 	bx	lr

00024d18 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
   24d18:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24d1c:	e28db000 	add	fp, sp, #0
   24d20:	e24dd00c 	sub	sp, sp, #12
   24d24:	e1a03000 	mov	r3, r0
   24d28:	e54b3005 	strb	r3, [fp, #-5]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
   24d2c:	e55b3005 	ldrb	r3, [fp, #-5]
   24d30:	e3530000 	cmp	r3, #0
   24d34:	0a000001 	beq	24d40 <dbc_1st+0x28>
   24d38:	e3a03000 	mov	r3, #0
   24d3c:	ea000000 	b	24d44 <dbc_1st+0x2c>
#endif
	return 0;
   24d40:	e3a03000 	mov	r3, #0
}
   24d44:	e1a00003 	mov	r0, r3
   24d48:	e28bd000 	add	sp, fp, #0
   24d4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24d50:	e12fff1e 	bx	lr

00024d54 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
   24d54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24d58:	e28db000 	add	fp, sp, #0
   24d5c:	e24dd00c 	sub	sp, sp, #12
   24d60:	e1a03000 	mov	r3, r0
   24d64:	e54b3005 	strb	r3, [fp, #-5]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
   24d68:	e55b3005 	ldrb	r3, [fp, #-5]
   24d6c:	e3530000 	cmp	r3, #0
   24d70:	0a000001 	beq	24d7c <dbc_2nd+0x28>
   24d74:	e3a03000 	mov	r3, #0
   24d78:	ea000000 	b	24d80 <dbc_2nd+0x2c>
#endif
	return 0;
   24d7c:	e3a03000 	mov	r3, #0
}
   24d80:	e1a00003 	mov	r0, r3
   24d84:	e28bd000 	add	sp, fp, #0
   24d88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24d8c:	e12fff1e 	bx	lr

00024d90 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
   24d90:	e92d4800 	push	{fp, lr}
   24d94:	e28db004 	add	fp, sp, #4
   24d98:	e24dd010 	sub	sp, sp, #16
   24d9c:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res = FR_OK;
   24da0:	e3a03000 	mov	r3, #0
   24da4:	e54b3005 	strb	r3, [fp, #-5]


	if (fs->wflag) {	/* Is the disk access window dirty? */
   24da8:	e51b3010 	ldr	r3, [fp, #-16]
   24dac:	e5d33004 	ldrb	r3, [r3, #4]
   24db0:	e3530000 	cmp	r3, #0
   24db4:	0a000028 	beq	24e5c <sync_window+0xcc>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
   24db8:	e51b3010 	ldr	r3, [fp, #-16]
   24dbc:	e5d30001 	ldrb	r0, [r3, #1]
   24dc0:	e51b3010 	ldr	r3, [fp, #-16]
   24dc4:	e2831030 	add	r1, r3, #48	; 0x30
   24dc8:	e51b3010 	ldr	r3, [fp, #-16]
   24dcc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   24dd0:	e3a03001 	mov	r3, #1
   24dd4:	eb00192b 	bl	2b288 <disk_write>
   24dd8:	e1a03000 	mov	r3, r0
   24ddc:	e3530000 	cmp	r3, #0
   24de0:	1a00001b 	bne	24e54 <sync_window+0xc4>
			fs->wflag = 0;	/* Clear window dirty flag */
   24de4:	e51b3010 	ldr	r3, [fp, #-16]
   24de8:	e3a02000 	mov	r2, #0
   24dec:	e5c32004 	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   24df0:	e51b3010 	ldr	r3, [fp, #-16]
   24df4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   24df8:	e51b3010 	ldr	r3, [fp, #-16]
   24dfc:	e5933020 	ldr	r3, [r3, #32]
   24e00:	e0422003 	sub	r2, r2, r3
   24e04:	e51b3010 	ldr	r3, [fp, #-16]
   24e08:	e5933018 	ldr	r3, [r3, #24]
   24e0c:	e1520003 	cmp	r2, r3
   24e10:	2a000011 	bcs	24e5c <sync_window+0xcc>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
   24e14:	e51b3010 	ldr	r3, [fp, #-16]
   24e18:	e5d33003 	ldrb	r3, [r3, #3]
   24e1c:	e3530002 	cmp	r3, #2
   24e20:	1a00000d 	bne	24e5c <sync_window+0xcc>
   24e24:	e51b3010 	ldr	r3, [fp, #-16]
   24e28:	e5d30001 	ldrb	r0, [r3, #1]
   24e2c:	e51b3010 	ldr	r3, [fp, #-16]
   24e30:	e2831030 	add	r1, r3, #48	; 0x30
   24e34:	e51b3010 	ldr	r3, [fp, #-16]
   24e38:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   24e3c:	e51b3010 	ldr	r3, [fp, #-16]
   24e40:	e5933018 	ldr	r3, [r3, #24]
   24e44:	e0822003 	add	r2, r2, r3
   24e48:	e3a03001 	mov	r3, #1
   24e4c:	eb00190d 	bl	2b288 <disk_write>
   24e50:	ea000001 	b	24e5c <sync_window+0xcc>
			}
		} else {
			res = FR_DISK_ERR;
   24e54:	e3a03001 	mov	r3, #1
   24e58:	e54b3005 	strb	r3, [fp, #-5]
		}
	}
	return res;
   24e5c:	e55b3005 	ldrb	r3, [fp, #-5]
}
   24e60:	e1a00003 	mov	r0, r3
   24e64:	e24bd004 	sub	sp, fp, #4
   24e68:	e8bd8800 	pop	{fp, pc}

00024e6c <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
   24e6c:	e92d4800 	push	{fp, lr}
   24e70:	e28db004 	add	fp, sp, #4
   24e74:	e24dd010 	sub	sp, sp, #16
   24e78:	e50b0010 	str	r0, [fp, #-16]
   24e7c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	FRESULT res = FR_OK;
   24e80:	e3a03000 	mov	r3, #0
   24e84:	e54b3005 	strb	r3, [fp, #-5]


	if (sect != fs->winsect) {	/* Window offset changed? */
   24e88:	e51b3010 	ldr	r3, [fp, #-16]
   24e8c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   24e90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24e94:	e1520003 	cmp	r2, r3
   24e98:	0a000017 	beq	24efc <move_window+0x90>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
   24e9c:	e51b0010 	ldr	r0, [fp, #-16]
   24ea0:	ebffffba 	bl	24d90 <sync_window>
   24ea4:	e1a03000 	mov	r3, r0
   24ea8:	e54b3005 	strb	r3, [fp, #-5]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
   24eac:	e55b3005 	ldrb	r3, [fp, #-5]
   24eb0:	e3530000 	cmp	r3, #0
   24eb4:	1a000010 	bne	24efc <move_window+0x90>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
   24eb8:	e51b3010 	ldr	r3, [fp, #-16]
   24ebc:	e5d30001 	ldrb	r0, [r3, #1]
   24ec0:	e51b3010 	ldr	r3, [fp, #-16]
   24ec4:	e2831030 	add	r1, r3, #48	; 0x30
   24ec8:	e3a03001 	mov	r3, #1
   24ecc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24ed0:	eb0018bf 	bl	2b1d4 <disk_read>
   24ed4:	e1a03000 	mov	r3, r0
   24ed8:	e3530000 	cmp	r3, #0
   24edc:	0a000003 	beq	24ef0 <move_window+0x84>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
   24ee0:	e3e03000 	mvn	r3, #0
   24ee4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				res = FR_DISK_ERR;
   24ee8:	e3a03001 	mov	r3, #1
   24eec:	e54b3005 	strb	r3, [fp, #-5]
			}
			fs->winsect = sect;
   24ef0:	e51b3010 	ldr	r3, [fp, #-16]
   24ef4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24ef8:	e583202c 	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
   24efc:	e55b3005 	ldrb	r3, [fp, #-5]
}
   24f00:	e1a00003 	mov	r0, r3
   24f04:	e24bd004 	sub	sp, fp, #4
   24f08:	e8bd8800 	pop	{fp, pc}

00024f0c <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
   24f0c:	e92d4800 	push	{fp, lr}
   24f10:	e28db004 	add	fp, sp, #4
   24f14:	e24dd010 	sub	sp, sp, #16
   24f18:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res;


	res = sync_window(fs);
   24f1c:	e51b0010 	ldr	r0, [fp, #-16]
   24f20:	ebffff9a 	bl	24d90 <sync_window>
   24f24:	e1a03000 	mov	r3, r0
   24f28:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   24f2c:	e55b3005 	ldrb	r3, [fp, #-5]
   24f30:	e3530000 	cmp	r3, #0
   24f34:	1a00004a 	bne	25064 <sync_fs+0x158>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
   24f38:	e51b3010 	ldr	r3, [fp, #-16]
   24f3c:	e5d33005 	ldrb	r3, [r3, #5]
   24f40:	e3530001 	cmp	r3, #1
   24f44:	1a00003b 	bne	25038 <sync_fs+0x12c>
			fs->fsi_flag = 0;
   24f48:	e51b3010 	ldr	r3, [fp, #-16]
   24f4c:	e3a02000 	mov	r2, #0
   24f50:	e5c32005 	strb	r2, [r3, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
   24f54:	e51b3010 	ldr	r3, [fp, #-16]
   24f58:	e5d33000 	ldrb	r3, [r3]
   24f5c:	e3530003 	cmp	r3, #3
   24f60:	1a000034 	bne	25038 <sync_fs+0x12c>
				/* Create FSInfo structure */
				memset(fs->win, 0, sizeof fs->win);
   24f64:	e51b3010 	ldr	r3, [fp, #-16]
   24f68:	e2833030 	add	r3, r3, #48	; 0x30
   24f6c:	e3a02c02 	mov	r2, #512	; 0x200
   24f70:	e3a01000 	mov	r1, #0
   24f74:	e1a00003 	mov	r0, r3
   24f78:	eb0019ec 	bl	2b730 <memset>
				st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
   24f7c:	e51b3010 	ldr	r3, [fp, #-16]
   24f80:	e2833030 	add	r3, r3, #48	; 0x30
   24f84:	e59f10e8 	ldr	r1, [pc, #232]	; 25074 <sync_fs+0x168>
   24f88:	e1a00003 	mov	r0, r3
   24f8c:	ebffff37 	bl	24c70 <st_dword>
				st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
   24f90:	e51b3010 	ldr	r3, [fp, #-16]
   24f94:	e2833030 	add	r3, r3, #48	; 0x30
   24f98:	e2833f79 	add	r3, r3, #484	; 0x1e4
   24f9c:	e59f10d4 	ldr	r1, [pc, #212]	; 25078 <sync_fs+0x16c>
   24fa0:	e1a00003 	mov	r0, r3
   24fa4:	ebffff31 	bl	24c70 <st_dword>
				st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
   24fa8:	e51b3010 	ldr	r3, [fp, #-16]
   24fac:	e2833030 	add	r3, r3, #48	; 0x30
   24fb0:	e2832f7a 	add	r2, r3, #488	; 0x1e8
   24fb4:	e51b3010 	ldr	r3, [fp, #-16]
   24fb8:	e5933010 	ldr	r3, [r3, #16]
   24fbc:	e1a01003 	mov	r1, r3
   24fc0:	e1a00002 	mov	r0, r2
   24fc4:	ebffff29 	bl	24c70 <st_dword>
				st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
   24fc8:	e51b3010 	ldr	r3, [fp, #-16]
   24fcc:	e2833030 	add	r3, r3, #48	; 0x30
   24fd0:	e2832f7b 	add	r2, r3, #492	; 0x1ec
   24fd4:	e51b3010 	ldr	r3, [fp, #-16]
   24fd8:	e593300c 	ldr	r3, [r3, #12]
   24fdc:	e1a01003 	mov	r1, r3
   24fe0:	e1a00002 	mov	r0, r2
   24fe4:	ebffff21 	bl	24c70 <st_dword>
				st_dword(fs->win + FSI_TrailSig, 0xAA550000);		/* Trailing signature */
   24fe8:	e51b3010 	ldr	r3, [fp, #-16]
   24fec:	e2833030 	add	r3, r3, #48	; 0x30
   24ff0:	e2833e1f 	add	r3, r3, #496	; 0x1f0
   24ff4:	e2833002 	add	r3, r3, #2
   24ff8:	e59f107c 	ldr	r1, [pc, #124]	; 2507c <sync_fs+0x170>
   24ffc:	e1a00003 	mov	r0, r3
   25000:	ebffff1a 	bl	24c70 <st_dword>
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
   25004:	e51b3010 	ldr	r3, [fp, #-16]
   25008:	e5d30001 	ldrb	r0, [r3, #1]
   2500c:	e51b3010 	ldr	r3, [fp, #-16]
   25010:	e2831030 	add	r1, r3, #48	; 0x30
   25014:	e51b3010 	ldr	r3, [fp, #-16]
   25018:	e593301c 	ldr	r3, [r3, #28]
   2501c:	e2832001 	add	r2, r3, #1
   25020:	e51b3010 	ldr	r3, [fp, #-16]
   25024:	e583202c 	str	r2, [r3, #44]	; 0x2c
   25028:	e51b3010 	ldr	r3, [fp, #-16]
   2502c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   25030:	e3a03001 	mov	r3, #1
   25034:	eb001893 	bl	2b288 <disk_write>
				}
			}
#endif
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
   25038:	e51b3010 	ldr	r3, [fp, #-16]
   2503c:	e5d33001 	ldrb	r3, [r3, #1]
   25040:	e3a02000 	mov	r2, #0
   25044:	e3a01000 	mov	r1, #0
   25048:	e1a00003 	mov	r0, r3
   2504c:	eb0018ba 	bl	2b33c <disk_ioctl>
   25050:	e1a03000 	mov	r3, r0
   25054:	e3530000 	cmp	r3, #0
   25058:	0a000001 	beq	25064 <sync_fs+0x158>
   2505c:	e3a03001 	mov	r3, #1
   25060:	e54b3005 	strb	r3, [fp, #-5]
	}

	return res;
   25064:	e55b3005 	ldrb	r3, [fp, #-5]
}
   25068:	e1a00003 	mov	r0, r3
   2506c:	e24bd004 	sub	sp, fp, #4
   25070:	e8bd8800 	pop	{fp, pc}
   25074:	41615252 	cmnmi	r1, r2, asr r2
   25078:	61417272 	hvcvs	5922	; 0x1722
   2507c:	aa550000 	bge	1565084 <__bss_end+0x1437a24>

00025080 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
   25080:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   25084:	e28db000 	add	fp, sp, #0
   25088:	e24dd00c 	sub	sp, sp, #12
   2508c:	e50b0008 	str	r0, [fp, #-8]
   25090:	e50b100c 	str	r1, [fp, #-12]
	clst -= 2;		/* Cluster number is origin from 2 */
   25094:	e51b300c 	ldr	r3, [fp, #-12]
   25098:	e2433002 	sub	r3, r3, #2
   2509c:	e50b300c 	str	r3, [fp, #-12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   250a0:	e51b3008 	ldr	r3, [fp, #-8]
   250a4:	e5933014 	ldr	r3, [r3, #20]
   250a8:	e2433002 	sub	r3, r3, #2
   250ac:	e51b200c 	ldr	r2, [fp, #-12]
   250b0:	e1520003 	cmp	r2, r3
   250b4:	3a000001 	bcc	250c0 <clst2sect+0x40>
   250b8:	e3a03000 	mov	r3, #0
   250bc:	ea000007 	b	250e0 <clst2sect+0x60>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
   250c0:	e51b3008 	ldr	r3, [fp, #-8]
   250c4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   250c8:	e51b3008 	ldr	r3, [fp, #-8]
   250cc:	e1d330ba 	ldrh	r3, [r3, #10]
   250d0:	e1a01003 	mov	r1, r3
   250d4:	e51b300c 	ldr	r3, [fp, #-12]
   250d8:	e0030193 	mul	r3, r3, r1
   250dc:	e0823003 	add	r3, r2, r3
}
   250e0:	e1a00003 	mov	r0, r3
   250e4:	e28bd000 	add	sp, fp, #0
   250e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   250ec:	e12fff1e 	bx	lr

000250f0 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
   250f0:	e92d4800 	push	{fp, lr}
   250f4:	e28db004 	add	fp, sp, #4
   250f8:	e24dd018 	sub	sp, sp, #24
   250fc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25100:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
   25104:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25108:	e5933000 	ldr	r3, [r3]
   2510c:	e50b300c 	str	r3, [fp, #-12]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   25110:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25114:	e3530001 	cmp	r3, #1
   25118:	9a000004 	bls	25130 <get_fat+0x40>
   2511c:	e51b300c 	ldr	r3, [fp, #-12]
   25120:	e5933014 	ldr	r3, [r3, #20]
   25124:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   25128:	e1520003 	cmp	r2, r3
   2512c:	3a000002 	bcc	2513c <get_fat+0x4c>
		val = 1;	/* Internal error */
   25130:	e3a03001 	mov	r3, #1
   25134:	e50b3008 	str	r3, [fp, #-8]
   25138:	ea000081 	b	25344 <get_fat+0x254>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   2513c:	e3e03000 	mvn	r3, #0
   25140:	e50b3008 	str	r3, [fp, #-8]

		switch (fs->fs_type) {
   25144:	e51b300c 	ldr	r3, [fp, #-12]
   25148:	e5d33000 	ldrb	r3, [r3]
   2514c:	e3530003 	cmp	r3, #3
   25150:	0a00005a 	beq	252c0 <get_fat+0x1d0>
   25154:	e3530003 	cmp	r3, #3
   25158:	ca00006f 	bgt	2531c <get_fat+0x22c>
   2515c:	e3530001 	cmp	r3, #1
   25160:	0a000002 	beq	25170 <get_fat+0x80>
   25164:	e3530002 	cmp	r3, #2
   25168:	0a00003d 	beq	25264 <get_fat+0x174>
   2516c:	ea00006a 	b	2531c <get_fat+0x22c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
   25170:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25174:	e50b3010 	str	r3, [fp, #-16]
   25178:	e51b3010 	ldr	r3, [fp, #-16]
   2517c:	e1a030a3 	lsr	r3, r3, #1
   25180:	e51b2010 	ldr	r2, [fp, #-16]
   25184:	e0823003 	add	r3, r2, r3
   25188:	e50b3010 	str	r3, [fp, #-16]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   2518c:	e51b300c 	ldr	r3, [fp, #-12]
   25190:	e5932020 	ldr	r2, [r3, #32]
   25194:	e51b3010 	ldr	r3, [fp, #-16]
   25198:	e1a034a3 	lsr	r3, r3, #9
   2519c:	e0823003 	add	r3, r2, r3
   251a0:	e1a01003 	mov	r1, r3
   251a4:	e51b000c 	ldr	r0, [fp, #-12]
   251a8:	ebffff2f 	bl	24e6c <move_window>
   251ac:	e1a03000 	mov	r3, r0
   251b0:	e3530000 	cmp	r3, #0
   251b4:	1a00005b 	bne	25328 <get_fat+0x238>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   251b8:	e51b3010 	ldr	r3, [fp, #-16]
   251bc:	e2832001 	add	r2, r3, #1
   251c0:	e50b2010 	str	r2, [fp, #-16]
   251c4:	e1a03b83 	lsl	r3, r3, #23
   251c8:	e1a03ba3 	lsr	r3, r3, #23
   251cc:	e51b200c 	ldr	r2, [fp, #-12]
   251d0:	e0823003 	add	r3, r2, r3
   251d4:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
   251d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   251dc:	e51b300c 	ldr	r3, [fp, #-12]
   251e0:	e5932020 	ldr	r2, [r3, #32]
   251e4:	e51b3010 	ldr	r3, [fp, #-16]
   251e8:	e1a034a3 	lsr	r3, r3, #9
   251ec:	e0823003 	add	r3, r2, r3
   251f0:	e1a01003 	mov	r1, r3
   251f4:	e51b000c 	ldr	r0, [fp, #-12]
   251f8:	ebffff1b 	bl	24e6c <move_window>
   251fc:	e1a03000 	mov	r3, r0
   25200:	e3530000 	cmp	r3, #0
   25204:	1a000049 	bne	25330 <get_fat+0x240>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
   25208:	e51b3010 	ldr	r3, [fp, #-16]
   2520c:	e1a03b83 	lsl	r3, r3, #23
   25210:	e1a03ba3 	lsr	r3, r3, #23
   25214:	e51b200c 	ldr	r2, [fp, #-12]
   25218:	e0823003 	add	r3, r2, r3
   2521c:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
   25220:	e1a03403 	lsl	r3, r3, #8
   25224:	e1a02003 	mov	r2, r3
   25228:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2522c:	e1833002 	orr	r3, r3, r2
   25230:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
   25234:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25238:	e2033001 	and	r3, r3, #1
   2523c:	e3530000 	cmp	r3, #0
   25240:	0a000002 	beq	25250 <get_fat+0x160>
   25244:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25248:	e1a03223 	lsr	r3, r3, #4
   2524c:	ea000002 	b	2525c <get_fat+0x16c>
   25250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25254:	e1a03a03 	lsl	r3, r3, #20
   25258:	e1a03a23 	lsr	r3, r3, #20
   2525c:	e50b3008 	str	r3, [fp, #-8]
			break;
   25260:	ea000037 	b	25344 <get_fat+0x254>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   25264:	e51b300c 	ldr	r3, [fp, #-12]
   25268:	e5932020 	ldr	r2, [r3, #32]
   2526c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25270:	e1a03423 	lsr	r3, r3, #8
   25274:	e0823003 	add	r3, r2, r3
   25278:	e1a01003 	mov	r1, r3
   2527c:	e51b000c 	ldr	r0, [fp, #-12]
   25280:	ebfffef9 	bl	24e6c <move_window>
   25284:	e1a03000 	mov	r3, r0
   25288:	e3530000 	cmp	r3, #0
   2528c:	1a000029 	bne	25338 <get_fat+0x248>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
   25290:	e51b300c 	ldr	r3, [fp, #-12]
   25294:	e2832030 	add	r2, r3, #48	; 0x30
   25298:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2529c:	e1a01083 	lsl	r1, r3, #1
   252a0:	e59f30ac 	ldr	r3, [pc, #172]	; 25354 <get_fat+0x264>
   252a4:	e0033001 	and	r3, r3, r1
   252a8:	e0823003 	add	r3, r2, r3
   252ac:	e1a00003 	mov	r0, r3
   252b0:	ebfffe1e 	bl	24b30 <ld_word>
   252b4:	e1a03000 	mov	r3, r0
   252b8:	e50b3008 	str	r3, [fp, #-8]
			break;
   252bc:	ea000020 	b	25344 <get_fat+0x254>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   252c0:	e51b300c 	ldr	r3, [fp, #-12]
   252c4:	e5932020 	ldr	r2, [r3, #32]
   252c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   252cc:	e1a033a3 	lsr	r3, r3, #7
   252d0:	e0823003 	add	r3, r2, r3
   252d4:	e1a01003 	mov	r1, r3
   252d8:	e51b000c 	ldr	r0, [fp, #-12]
   252dc:	ebfffee2 	bl	24e6c <move_window>
   252e0:	e1a03000 	mov	r3, r0
   252e4:	e3530000 	cmp	r3, #0
   252e8:	1a000014 	bne	25340 <get_fat+0x250>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
   252ec:	e51b300c 	ldr	r3, [fp, #-12]
   252f0:	e2832030 	add	r2, r3, #48	; 0x30
   252f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   252f8:	e1a03103 	lsl	r3, r3, #2
   252fc:	e2033f7f 	and	r3, r3, #508	; 0x1fc
   25300:	e0823003 	add	r3, r2, r3
   25304:	e1a00003 	mov	r0, r3
   25308:	ebfffe1e 	bl	24b88 <ld_dword>
   2530c:	e1a03000 	mov	r3, r0
   25310:	e3c3320f 	bic	r3, r3, #-268435456	; 0xf0000000
   25314:	e50b3008 	str	r3, [fp, #-8]
			break;
   25318:	ea000009 	b	25344 <get_fat+0x254>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
   2531c:	e3a03001 	mov	r3, #1
   25320:	e50b3008 	str	r3, [fp, #-8]
   25324:	ea000006 	b	25344 <get_fat+0x254>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   25328:	e320f000 	nop	{0}
   2532c:	ea000004 	b	25344 <get_fat+0x254>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   25330:	e320f000 	nop	{0}
   25334:	ea000002 	b	25344 <get_fat+0x254>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   25338:	e320f000 	nop	{0}
   2533c:	ea000000 	b	25344 <get_fat+0x254>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   25340:	e320f000 	nop	{0}
		}
	}

	return val;
   25344:	e51b3008 	ldr	r3, [fp, #-8]
}
   25348:	e1a00003 	mov	r0, r3
   2534c:	e24bd004 	sub	sp, fp, #4
   25350:	e8bd8800 	pop	{fp, pc}
   25354:	000001fe 	strdeq	r0, [r0], -lr

00025358 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
   25358:	e92d4810 	push	{r4, fp, lr}
   2535c:	e28db008 	add	fp, sp, #8
   25360:	e24dd024 	sub	sp, sp, #36	; 0x24
   25364:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   25368:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   2536c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
   25370:	e3a03002 	mov	r3, #2
   25374:	e54b300d 	strb	r3, [fp, #-13]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   25378:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2537c:	e3530001 	cmp	r3, #1
   25380:	9a0000b8 	bls	25668 <put_fat+0x310>
   25384:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25388:	e5933014 	ldr	r3, [r3, #20]
   2538c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   25390:	e1520003 	cmp	r2, r3
   25394:	2a0000b3 	bcs	25668 <put_fat+0x310>
		switch (fs->fs_type) {
   25398:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2539c:	e5d33000 	ldrb	r3, [r3]
   253a0:	e3530003 	cmp	r3, #3
   253a4:	0a000087 	beq	255c8 <put_fat+0x270>
   253a8:	e3530003 	cmp	r3, #3
   253ac:	ca0000b6 	bgt	2568c <put_fat+0x334>
   253b0:	e3530001 	cmp	r3, #1
   253b4:	0a000002 	beq	253c4 <put_fat+0x6c>
   253b8:	e3530002 	cmp	r3, #2
   253bc:	0a000064 	beq	25554 <put_fat+0x1fc>
   253c0:	ea0000b1 	b	2568c <put_fat+0x334>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
   253c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   253c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   253cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   253d0:	e1a030a3 	lsr	r3, r3, #1
   253d4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   253d8:	e0823003 	add	r3, r2, r3
   253dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   253e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   253e4:	e5932020 	ldr	r2, [r3, #32]
   253e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   253ec:	e1a034a3 	lsr	r3, r3, #9
   253f0:	e0823003 	add	r3, r2, r3
   253f4:	e1a01003 	mov	r1, r3
   253f8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   253fc:	ebfffe9a 	bl	24e6c <move_window>
   25400:	e1a03000 	mov	r3, r0
   25404:	e54b300d 	strb	r3, [fp, #-13]
			if (res != FR_OK) break;
   25408:	e55b300d 	ldrb	r3, [fp, #-13]
   2540c:	e3530000 	cmp	r3, #0
   25410:	1a000096 	bne	25670 <put_fat+0x318>
			p = fs->win + bc++ % SS(fs);
   25414:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25418:	e2832030 	add	r2, r3, #48	; 0x30
   2541c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25420:	e2831001 	add	r1, r3, #1
   25424:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   25428:	e1a03b83 	lsl	r3, r3, #23
   2542c:	e1a03ba3 	lsr	r3, r3, #23
   25430:	e0823003 	add	r3, r2, r3
   25434:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   25438:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2543c:	e2033001 	and	r3, r3, #1
   25440:	e3530000 	cmp	r3, #0
   25444:	0a00000c 	beq	2547c <put_fat+0x124>
   25448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2544c:	e5d33000 	ldrb	r3, [r3]
   25450:	e6af3073 	sxtb	r3, r3
   25454:	e203300f 	and	r3, r3, #15
   25458:	e6af2073 	sxtb	r2, r3
   2545c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   25460:	e6ef3073 	uxtb	r3, r3
   25464:	e1a03203 	lsl	r3, r3, #4
   25468:	e6af3073 	sxtb	r3, r3
   2546c:	e1823003 	orr	r3, r2, r3
   25470:	e6af3073 	sxtb	r3, r3
   25474:	e6ef3073 	uxtb	r3, r3
   25478:	ea000001 	b	25484 <put_fat+0x12c>
   2547c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   25480:	e6ef3073 	uxtb	r3, r3
   25484:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25488:	e5c23000 	strb	r3, [r2]
			fs->wflag = 1;
   2548c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25490:	e3a02001 	mov	r2, #1
   25494:	e5c32004 	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   25498:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2549c:	e5932020 	ldr	r2, [r3, #32]
   254a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   254a4:	e1a034a3 	lsr	r3, r3, #9
   254a8:	e0823003 	add	r3, r2, r3
   254ac:	e1a01003 	mov	r1, r3
   254b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   254b4:	ebfffe6c 	bl	24e6c <move_window>
   254b8:	e1a03000 	mov	r3, r0
   254bc:	e54b300d 	strb	r3, [fp, #-13]
			if (res != FR_OK) break;
   254c0:	e55b300d 	ldrb	r3, [fp, #-13]
   254c4:	e3530000 	cmp	r3, #0
   254c8:	1a00006a 	bne	25678 <put_fat+0x320>
			p = fs->win + bc % SS(fs);
   254cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   254d0:	e2832030 	add	r2, r3, #48	; 0x30
   254d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   254d8:	e1a03b83 	lsl	r3, r3, #23
   254dc:	e1a03ba3 	lsr	r3, r3, #23
   254e0:	e0823003 	add	r3, r2, r3
   254e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   254e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   254ec:	e2033001 	and	r3, r3, #1
   254f0:	e3530000 	cmp	r3, #0
   254f4:	0a000003 	beq	25508 <put_fat+0x1b0>
   254f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   254fc:	e1a03223 	lsr	r3, r3, #4
   25500:	e6ef3073 	uxtb	r3, r3
   25504:	ea00000c 	b	2553c <put_fat+0x1e4>
   25508:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2550c:	e5d33000 	ldrb	r3, [r3]
   25510:	e6af3073 	sxtb	r3, r3
   25514:	e3c3300f 	bic	r3, r3, #15
   25518:	e6af2073 	sxtb	r2, r3
   2551c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   25520:	e1a03423 	lsr	r3, r3, #8
   25524:	e6af3073 	sxtb	r3, r3
   25528:	e203300f 	and	r3, r3, #15
   2552c:	e6af3073 	sxtb	r3, r3
   25530:	e1823003 	orr	r3, r2, r3
   25534:	e6af3073 	sxtb	r3, r3
   25538:	e6ef3073 	uxtb	r3, r3
   2553c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25540:	e5c23000 	strb	r3, [r2]
			fs->wflag = 1;
   25544:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25548:	e3a02001 	mov	r2, #1
   2554c:	e5c32004 	strb	r2, [r3, #4]
			break;
   25550:	ea00004d 	b	2568c <put_fat+0x334>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   25554:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25558:	e5932020 	ldr	r2, [r3, #32]
   2555c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25560:	e1a03423 	lsr	r3, r3, #8
   25564:	e0823003 	add	r3, r2, r3
   25568:	e1a01003 	mov	r1, r3
   2556c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   25570:	ebfffe3d 	bl	24e6c <move_window>
   25574:	e1a03000 	mov	r3, r0
   25578:	e54b300d 	strb	r3, [fp, #-13]
			if (res != FR_OK) break;
   2557c:	e55b300d 	ldrb	r3, [fp, #-13]
   25580:	e3530000 	cmp	r3, #0
   25584:	1a00003d 	bne	25680 <put_fat+0x328>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   25588:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2558c:	e2832030 	add	r2, r3, #48	; 0x30
   25590:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25594:	e1a01083 	lsl	r1, r3, #1
   25598:	e59f30fc 	ldr	r3, [pc, #252]	; 2569c <put_fat+0x344>
   2559c:	e0033001 	and	r3, r3, r1
   255a0:	e0823003 	add	r3, r2, r3
   255a4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   255a8:	e6ff2072 	uxth	r2, r2
   255ac:	e1a01002 	mov	r1, r2
   255b0:	e1a00003 	mov	r0, r3
   255b4:	ebfffd94 	bl	24c0c <st_word>
			fs->wflag = 1;
   255b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   255bc:	e3a02001 	mov	r2, #1
   255c0:	e5c32004 	strb	r2, [r3, #4]
			break;
   255c4:	ea000030 	b	2568c <put_fat+0x334>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   255c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   255cc:	e5932020 	ldr	r2, [r3, #32]
   255d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   255d4:	e1a033a3 	lsr	r3, r3, #7
   255d8:	e0823003 	add	r3, r2, r3
   255dc:	e1a01003 	mov	r1, r3
   255e0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   255e4:	ebfffe20 	bl	24e6c <move_window>
   255e8:	e1a03000 	mov	r3, r0
   255ec:	e54b300d 	strb	r3, [fp, #-13]
			if (res != FR_OK) break;
   255f0:	e55b300d 	ldrb	r3, [fp, #-13]
   255f4:	e3530000 	cmp	r3, #0
   255f8:	1a000022 	bne	25688 <put_fat+0x330>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   255fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   25600:	e3c3420f 	bic	r4, r3, #-268435456	; 0xf0000000
   25604:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25608:	e2832030 	add	r2, r3, #48	; 0x30
   2560c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25610:	e1a03103 	lsl	r3, r3, #2
   25614:	e2033f7f 	and	r3, r3, #508	; 0x1fc
   25618:	e0823003 	add	r3, r2, r3
   2561c:	e1a00003 	mov	r0, r3
   25620:	ebfffd58 	bl	24b88 <ld_dword>
   25624:	e1a03000 	mov	r3, r0
   25628:	e203320f 	and	r3, r3, #-268435456	; 0xf0000000
   2562c:	e1843003 	orr	r3, r4, r3
   25630:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
   25634:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25638:	e2832030 	add	r2, r3, #48	; 0x30
   2563c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25640:	e1a03103 	lsl	r3, r3, #2
   25644:	e2033f7f 	and	r3, r3, #508	; 0x1fc
   25648:	e0823003 	add	r3, r2, r3
   2564c:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   25650:	e1a00003 	mov	r0, r3
   25654:	ebfffd85 	bl	24c70 <st_dword>
			fs->wflag = 1;
   25658:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2565c:	e3a02001 	mov	r2, #1
   25660:	e5c32004 	strb	r2, [r3, #4]
			break;
   25664:	ea000008 	b	2568c <put_fat+0x334>
		}
	}
   25668:	e320f000 	nop	{0}
   2566c:	ea000006 	b	2568c <put_fat+0x334>
			if (res != FR_OK) break;
   25670:	e320f000 	nop	{0}
   25674:	ea000004 	b	2568c <put_fat+0x334>
			if (res != FR_OK) break;
   25678:	e320f000 	nop	{0}
   2567c:	ea000002 	b	2568c <put_fat+0x334>
			if (res != FR_OK) break;
   25680:	e320f000 	nop	{0}
   25684:	ea000000 	b	2568c <put_fat+0x334>
			if (res != FR_OK) break;
   25688:	e320f000 	nop	{0}
	return res;
   2568c:	e55b300d 	ldrb	r3, [fp, #-13]
}
   25690:	e1a00003 	mov	r0, r3
   25694:	e24bd008 	sub	sp, fp, #8
   25698:	e8bd8810 	pop	{r4, fp, pc}
   2569c:	000001fe 	strdeq	r0, [r0], -lr

000256a0 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
   256a0:	e92d4800 	push	{fp, lr}
   256a4:	e28db004 	add	fp, sp, #4
   256a8:	e24dd020 	sub	sp, sp, #32
   256ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   256b0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   256b4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
	FRESULT res = FR_OK;
   256b8:	e3a03000 	mov	r3, #0
   256bc:	e54b3005 	strb	r3, [fp, #-5]
	DWORD nxt;
	FATFS *fs = obj->fs;
   256c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   256c4:	e5933000 	ldr	r3, [r3]
   256c8:	e50b300c 	str	r3, [fp, #-12]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   256cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   256d0:	e3530001 	cmp	r3, #1
   256d4:	9a000004 	bls	256ec <remove_chain+0x4c>
   256d8:	e51b300c 	ldr	r3, [fp, #-12]
   256dc:	e5933014 	ldr	r3, [r3, #20]
   256e0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   256e4:	e1520003 	cmp	r2, r3
   256e8:	3a000001 	bcc	256f4 <remove_chain+0x54>
   256ec:	e3a03002 	mov	r3, #2
   256f0:	ea000045 	b	2580c <remove_chain+0x16c>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   256f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   256f8:	e3530000 	cmp	r3, #0
   256fc:	0a00000a 	beq	2572c <remove_chain+0x8c>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
   25700:	e3e02000 	mvn	r2, #0
   25704:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   25708:	e51b000c 	ldr	r0, [fp, #-12]
   2570c:	ebffff11 	bl	25358 <put_fat>
   25710:	e1a03000 	mov	r3, r0
   25714:	e54b3005 	strb	r3, [fp, #-5]
		if (res != FR_OK) return res;
   25718:	e55b3005 	ldrb	r3, [fp, #-5]
   2571c:	e3530000 	cmp	r3, #0
   25720:	0a000001 	beq	2572c <remove_chain+0x8c>
   25724:	e55b3005 	ldrb	r3, [fp, #-5]
   25728:	ea000037 	b	2580c <remove_chain+0x16c>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
   2572c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   25730:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   25734:	ebfffe6d 	bl	250f0 <get_fat>
   25738:	e50b0010 	str	r0, [fp, #-16]
		if (nxt == 0) break;				/* Empty cluster? */
   2573c:	e51b3010 	ldr	r3, [fp, #-16]
   25740:	e3530000 	cmp	r3, #0
   25744:	0a00002e 	beq	25804 <remove_chain+0x164>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   25748:	e51b3010 	ldr	r3, [fp, #-16]
   2574c:	e3530001 	cmp	r3, #1
   25750:	1a000001 	bne	2575c <remove_chain+0xbc>
   25754:	e3a03002 	mov	r3, #2
   25758:	ea00002b 	b	2580c <remove_chain+0x16c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   2575c:	e51b3010 	ldr	r3, [fp, #-16]
   25760:	e3730001 	cmn	r3, #1
   25764:	1a000001 	bne	25770 <remove_chain+0xd0>
   25768:	e3a03001 	mov	r3, #1
   2576c:	ea000026 	b	2580c <remove_chain+0x16c>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
   25770:	e3a02000 	mov	r2, #0
   25774:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   25778:	e51b000c 	ldr	r0, [fp, #-12]
   2577c:	ebfffef5 	bl	25358 <put_fat>
   25780:	e1a03000 	mov	r3, r0
   25784:	e54b3005 	strb	r3, [fp, #-5]
			if (res != FR_OK) return res;
   25788:	e55b3005 	ldrb	r3, [fp, #-5]
   2578c:	e3530000 	cmp	r3, #0
   25790:	0a000001 	beq	2579c <remove_chain+0xfc>
   25794:	e55b3005 	ldrb	r3, [fp, #-5]
   25798:	ea00001b 	b	2580c <remove_chain+0x16c>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
   2579c:	e51b300c 	ldr	r3, [fp, #-12]
   257a0:	e5932010 	ldr	r2, [r3, #16]
   257a4:	e51b300c 	ldr	r3, [fp, #-12]
   257a8:	e5933014 	ldr	r3, [r3, #20]
   257ac:	e2433002 	sub	r3, r3, #2
   257b0:	e1520003 	cmp	r2, r3
   257b4:	2a00000a 	bcs	257e4 <remove_chain+0x144>
			fs->free_clst++;
   257b8:	e51b300c 	ldr	r3, [fp, #-12]
   257bc:	e5933010 	ldr	r3, [r3, #16]
   257c0:	e2832001 	add	r2, r3, #1
   257c4:	e51b300c 	ldr	r3, [fp, #-12]
   257c8:	e5832010 	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
   257cc:	e51b300c 	ldr	r3, [fp, #-12]
   257d0:	e5d33005 	ldrb	r3, [r3, #5]
   257d4:	e3833001 	orr	r3, r3, #1
   257d8:	e6ef2073 	uxtb	r2, r3
   257dc:	e51b300c 	ldr	r3, [fp, #-12]
   257e0:	e5c32005 	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
   257e4:	e51b3010 	ldr	r3, [fp, #-16]
   257e8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
   257ec:	e51b300c 	ldr	r3, [fp, #-12]
   257f0:	e5933014 	ldr	r3, [r3, #20]
   257f4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   257f8:	e1520003 	cmp	r2, r3
   257fc:	3affffca 	bcc	2572c <remove_chain+0x8c>
   25800:	ea000000 	b	25808 <remove_chain+0x168>
		if (nxt == 0) break;				/* Empty cluster? */
   25804:	e320f000 	nop	{0}
				}
			}
		}
	}
#endif
	return FR_OK;
   25808:	e3a03000 	mov	r3, #0
}
   2580c:	e1a00003 	mov	r0, r3
   25810:	e24bd004 	sub	sp, fp, #4
   25814:	e8bd8800 	pop	{fp, pc}

00025818 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
   25818:	e92d4800 	push	{fp, lr}
   2581c:	e28db004 	add	fp, sp, #4
   25820:	e24dd020 	sub	sp, sp, #32
   25824:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   25828:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
   2582c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25830:	e5933000 	ldr	r3, [r3]
   25834:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec


	if (clst == 0) {	/* Create a new chain */
   25838:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2583c:	e3530000 	cmp	r3, #0
   25840:	1a00000d 	bne	2587c <create_chain+0x64>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
   25844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25848:	e593300c 	ldr	r3, [r3, #12]
   2584c:	e50b300c 	str	r3, [fp, #-12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   25850:	e51b300c 	ldr	r3, [fp, #-12]
   25854:	e3530000 	cmp	r3, #0
   25858:	0a000004 	beq	25870 <create_chain+0x58>
   2585c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25860:	e5933014 	ldr	r3, [r3, #20]
   25864:	e51b200c 	ldr	r2, [fp, #-12]
   25868:	e1520003 	cmp	r2, r3
   2586c:	3a000019 	bcc	258d8 <create_chain+0xc0>
   25870:	e3a03001 	mov	r3, #1
   25874:	e50b300c 	str	r3, [fp, #-12]
   25878:	ea000016 	b	258d8 <create_chain+0xc0>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
   2587c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   25880:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   25884:	ebfffe19 	bl	250f0 <get_fat>
   25888:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
		if (cs < 2) return 1;				/* Test for insanity */
   2588c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25890:	e3530001 	cmp	r3, #1
   25894:	8a000001 	bhi	258a0 <create_chain+0x88>
   25898:	e3a03001 	mov	r3, #1
   2589c:	ea0000a3 	b	25b30 <create_chain+0x318>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   258a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   258a4:	e3730001 	cmn	r3, #1
   258a8:	1a000001 	bne	258b4 <create_chain+0x9c>
   258ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   258b0:	ea00009e 	b	25b30 <create_chain+0x318>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   258b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   258b8:	e5933014 	ldr	r3, [r3, #20]
   258bc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   258c0:	e1520003 	cmp	r2, r3
   258c4:	2a000001 	bcs	258d0 <create_chain+0xb8>
   258c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   258cc:	ea000097 	b	25b30 <create_chain+0x318>
		scl = clst;							/* Cluster to start to find */
   258d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   258d4:	e50b300c 	str	r3, [fp, #-12]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   258d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   258dc:	e5933010 	ldr	r3, [r3, #16]
   258e0:	e3530000 	cmp	r3, #0
   258e4:	1a000001 	bne	258f0 <create_chain+0xd8>
   258e8:	e3a03000 	mov	r3, #0
   258ec:	ea00008f 	b	25b30 <create_chain+0x318>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
   258f0:	e3a03000 	mov	r3, #0
   258f4:	e50b3008 	str	r3, [fp, #-8]
		if (scl == clst) {						/* Stretching an existing chain? */
   258f8:	e51b200c 	ldr	r2, [fp, #-12]
   258fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25900:	e1520003 	cmp	r2, r3
   25904:	1a000027 	bne	259a8 <create_chain+0x190>
			ncl = scl + 1;						/* Test if next cluster is free */
   25908:	e51b300c 	ldr	r3, [fp, #-12]
   2590c:	e2833001 	add	r3, r3, #1
   25910:	e50b3008 	str	r3, [fp, #-8]
			if (ncl >= fs->n_fatent) ncl = 2;
   25914:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25918:	e5933014 	ldr	r3, [r3, #20]
   2591c:	e51b2008 	ldr	r2, [fp, #-8]
   25920:	e1520003 	cmp	r2, r3
   25924:	3a000001 	bcc	25930 <create_chain+0x118>
   25928:	e3a03002 	mov	r3, #2
   2592c:	e50b3008 	str	r3, [fp, #-8]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
   25930:	e51b1008 	ldr	r1, [fp, #-8]
   25934:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   25938:	ebfffdec 	bl	250f0 <get_fat>
   2593c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   25940:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25944:	e3530001 	cmp	r3, #1
   25948:	0a000002 	beq	25958 <create_chain+0x140>
   2594c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25950:	e3730001 	cmn	r3, #1
   25954:	1a000001 	bne	25960 <create_chain+0x148>
   25958:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2595c:	ea000073 	b	25b30 <create_chain+0x318>
			if (cs != 0) {						/* Not free? */
   25960:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25964:	e3530000 	cmp	r3, #0
   25968:	0a00000e 	beq	259a8 <create_chain+0x190>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
   2596c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25970:	e593300c 	ldr	r3, [r3, #12]
   25974:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   25978:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2597c:	e3530001 	cmp	r3, #1
   25980:	9a000006 	bls	259a0 <create_chain+0x188>
   25984:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25988:	e5933014 	ldr	r3, [r3, #20]
   2598c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25990:	e1520003 	cmp	r2, r3
   25994:	2a000001 	bcs	259a0 <create_chain+0x188>
   25998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2599c:	e50b300c 	str	r3, [fp, #-12]
				ncl = 0;
   259a0:	e3a03000 	mov	r3, #0
   259a4:	e50b3008 	str	r3, [fp, #-8]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
   259a8:	e51b3008 	ldr	r3, [fp, #-8]
   259ac:	e3530000 	cmp	r3, #0
   259b0:	1a000027 	bne	25a54 <create_chain+0x23c>
			ncl = scl;	/* Start cluster */
   259b4:	e51b300c 	ldr	r3, [fp, #-12]
   259b8:	e50b3008 	str	r3, [fp, #-8]
			for (;;) {
				ncl++;							/* Next cluster */
   259bc:	e51b3008 	ldr	r3, [fp, #-8]
   259c0:	e2833001 	add	r3, r3, #1
   259c4:	e50b3008 	str	r3, [fp, #-8]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   259c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   259cc:	e5933014 	ldr	r3, [r3, #20]
   259d0:	e51b2008 	ldr	r2, [fp, #-8]
   259d4:	e1520003 	cmp	r2, r3
   259d8:	3a000007 	bcc	259fc <create_chain+0x1e4>
					ncl = 2;
   259dc:	e3a03002 	mov	r3, #2
   259e0:	e50b3008 	str	r3, [fp, #-8]
					if (ncl > scl) return 0;	/* No free cluster found? */
   259e4:	e51b2008 	ldr	r2, [fp, #-8]
   259e8:	e51b300c 	ldr	r3, [fp, #-12]
   259ec:	e1520003 	cmp	r2, r3
   259f0:	9a000001 	bls	259fc <create_chain+0x1e4>
   259f4:	e3a03000 	mov	r3, #0
   259f8:	ea00004c 	b	25b30 <create_chain+0x318>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
   259fc:	e51b1008 	ldr	r1, [fp, #-8]
   25a00:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   25a04:	ebfffdb9 	bl	250f0 <get_fat>
   25a08:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
				if (cs == 0) break;				/* Found a free cluster? */
   25a0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25a10:	e3530000 	cmp	r3, #0
   25a14:	0a00000d 	beq	25a50 <create_chain+0x238>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   25a18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25a1c:	e3530001 	cmp	r3, #1
   25a20:	0a000002 	beq	25a30 <create_chain+0x218>
   25a24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25a28:	e3730001 	cmn	r3, #1
   25a2c:	1a000001 	bne	25a38 <create_chain+0x220>
   25a30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25a34:	ea00003d 	b	25b30 <create_chain+0x318>
				if (ncl == scl) return 0;		/* No free cluster found? */
   25a38:	e51b2008 	ldr	r2, [fp, #-8]
   25a3c:	e51b300c 	ldr	r3, [fp, #-12]
   25a40:	e1520003 	cmp	r2, r3
   25a44:	1affffdc 	bne	259bc <create_chain+0x1a4>
   25a48:	e3a03000 	mov	r3, #0
   25a4c:	ea000037 	b	25b30 <create_chain+0x318>
				if (cs == 0) break;				/* Found a free cluster? */
   25a50:	e320f000 	nop	{0}
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
   25a54:	e3e02000 	mvn	r2, #0
   25a58:	e51b1008 	ldr	r1, [fp, #-8]
   25a5c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   25a60:	ebfffe3c 	bl	25358 <put_fat>
   25a64:	e1a03000 	mov	r3, r0
   25a68:	e54b300d 	strb	r3, [fp, #-13]
		if (res == FR_OK && clst != 0) {
   25a6c:	e55b300d 	ldrb	r3, [fp, #-13]
   25a70:	e3530000 	cmp	r3, #0
   25a74:	1a000008 	bne	25a9c <create_chain+0x284>
   25a78:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25a7c:	e3530000 	cmp	r3, #0
   25a80:	0a000005 	beq	25a9c <create_chain+0x284>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
   25a84:	e51b2008 	ldr	r2, [fp, #-8]
   25a88:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   25a8c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   25a90:	ebfffe30 	bl	25358 <put_fat>
   25a94:	e1a03000 	mov	r3, r0
   25a98:	e54b300d 	strb	r3, [fp, #-13]
		}
	}

	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
   25a9c:	e55b300d 	ldrb	r3, [fp, #-13]
   25aa0:	e3530000 	cmp	r3, #0
   25aa4:	1a000019 	bne	25b10 <create_chain+0x2f8>
		fs->last_clst = ncl;
   25aa8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25aac:	e51b2008 	ldr	r2, [fp, #-8]
   25ab0:	e583200c 	str	r2, [r3, #12]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
   25ab4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25ab8:	e5933010 	ldr	r3, [r3, #16]
   25abc:	e3530000 	cmp	r3, #0
   25ac0:	0a000019 	beq	25b2c <create_chain+0x314>
   25ac4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25ac8:	e5932010 	ldr	r2, [r3, #16]
   25acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25ad0:	e5933014 	ldr	r3, [r3, #20]
   25ad4:	e2433002 	sub	r3, r3, #2
   25ad8:	e1520003 	cmp	r2, r3
   25adc:	8a000012 	bhi	25b2c <create_chain+0x314>
			fs->free_clst--;
   25ae0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25ae4:	e5933010 	ldr	r3, [r3, #16]
   25ae8:	e2432001 	sub	r2, r3, #1
   25aec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25af0:	e5832010 	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
   25af4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25af8:	e5d33005 	ldrb	r3, [r3, #5]
   25afc:	e3833001 	orr	r3, r3, #1
   25b00:	e6ef2073 	uxtb	r2, r3
   25b04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25b08:	e5c32005 	strb	r2, [r3, #5]
   25b0c:	ea000006 	b	25b2c <create_chain+0x314>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
   25b10:	e55b300d 	ldrb	r3, [fp, #-13]
   25b14:	e3530001 	cmp	r3, #1
   25b18:	1a000001 	bne	25b24 <create_chain+0x30c>
   25b1c:	e3e03000 	mvn	r3, #0
   25b20:	ea000000 	b	25b28 <create_chain+0x310>
   25b24:	e3a03001 	mov	r3, #1
   25b28:	e50b3008 	str	r3, [fp, #-8]
	}

	return ncl;		/* Return new cluster number or error status */
   25b2c:	e51b3008 	ldr	r3, [fp, #-8]
}
   25b30:	e1a00003 	mov	r0, r3
   25b34:	e24bd004 	sub	sp, fp, #4
   25b38:	e8bd8800 	pop	{fp, pc}

00025b3c <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
   25b3c:	e92d4800 	push	{fp, lr}
   25b40:	e28db004 	add	fp, sp, #4
   25b44:	e24dd018 	sub	sp, sp, #24
   25b48:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25b4c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   25b50:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   25b54:	ebfffc8d 	bl	24d90 <sync_window>
   25b58:	e1a03000 	mov	r3, r0
   25b5c:	e3530000 	cmp	r3, #0
   25b60:	0a000001 	beq	25b6c <dir_clear+0x30>
   25b64:	e3a03001 	mov	r3, #1
   25b68:	ea000031 	b	25c34 <dir_clear+0xf8>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   25b6c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   25b70:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   25b74:	ebfffd41 	bl	25080 <clst2sect>
   25b78:	e50b000c 	str	r0, [fp, #-12]
	fs->winsect = sect;				/* Set window to top of the cluster */
   25b7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25b80:	e51b200c 	ldr	r2, [fp, #-12]
   25b84:	e583202c 	str	r2, [r3, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
   25b88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25b8c:	e2833030 	add	r3, r3, #48	; 0x30
   25b90:	e3a02c02 	mov	r2, #512	; 0x200
   25b94:	e3a01000 	mov	r1, #0
   25b98:	e1a00003 	mov	r0, r3
   25b9c:	eb0016e3 	bl	2b730 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
   25ba0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25ba4:	e2833030 	add	r3, r3, #48	; 0x30
   25ba8:	e50b3010 	str	r3, [fp, #-16]
   25bac:	e3a03001 	mov	r3, #1
   25bb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   25bb4:	e3a03000 	mov	r3, #0
   25bb8:	e50b3008 	str	r3, [fp, #-8]
   25bbc:	ea000003 	b	25bd0 <dir_clear+0x94>
   25bc0:	e51b2008 	ldr	r2, [fp, #-8]
   25bc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25bc8:	e0823003 	add	r3, r2, r3
   25bcc:	e50b3008 	str	r3, [fp, #-8]
   25bd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25bd4:	e1d330ba 	ldrh	r3, [r3, #10]
   25bd8:	e1a02003 	mov	r2, r3
   25bdc:	e51b3008 	ldr	r3, [fp, #-8]
   25be0:	e1530002 	cmp	r3, r2
   25be4:	2a00000a 	bcs	25c14 <dir_clear+0xd8>
   25be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25bec:	e5d30001 	ldrb	r0, [r3, #1]
   25bf0:	e51b200c 	ldr	r2, [fp, #-12]
   25bf4:	e51b3008 	ldr	r3, [fp, #-8]
   25bf8:	e0822003 	add	r2, r2, r3
   25bfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25c00:	e51b1010 	ldr	r1, [fp, #-16]
   25c04:	eb00159f 	bl	2b288 <disk_write>
   25c08:	e1a03000 	mov	r3, r0
   25c0c:	e3530000 	cmp	r3, #0
   25c10:	0affffea 	beq	25bc0 <dir_clear+0x84>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
   25c14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25c18:	e1d330ba 	ldrh	r3, [r3, #10]
   25c1c:	e1a02003 	mov	r2, r3
   25c20:	e51b3008 	ldr	r3, [fp, #-8]
   25c24:	e1530002 	cmp	r3, r2
   25c28:	13a03001 	movne	r3, #1
   25c2c:	03a03000 	moveq	r3, #0
   25c30:	e6ef3073 	uxtb	r3, r3
}
   25c34:	e1a00003 	mov	r0, r3
   25c38:	e24bd004 	sub	sp, fp, #4
   25c3c:	e8bd8800 	pop	{fp, pc}

00025c40 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
   25c40:	e92d4800 	push	{fp, lr}
   25c44:	e28db004 	add	fp, sp, #4
   25c48:	e24dd018 	sub	sp, sp, #24
   25c4c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25c50:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
   25c54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25c58:	e5933000 	ldr	r3, [r3]
   25c5c:	e50b300c 	str	r3, [fp, #-12]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   25c60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25c64:	e3530602 	cmp	r3, #2097152	; 0x200000
   25c68:	2a000003 	bcs	25c7c <dir_sdi+0x3c>
   25c6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25c70:	e203301f 	and	r3, r3, #31
   25c74:	e3530000 	cmp	r3, #0
   25c78:	0a000001 	beq	25c84 <dir_sdi+0x44>
		return FR_INT_ERR;
   25c7c:	e3a03002 	mov	r3, #2
   25c80:	ea00005f 	b	25e04 <dir_sdi+0x1c4>
	}
	dp->dptr = ofs;				/* Set current offset */
   25c84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25c88:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   25c8c:	e5832010 	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
   25c90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25c94:	e5933008 	ldr	r3, [r3, #8]
   25c98:	e50b3008 	str	r3, [fp, #-8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
   25c9c:	e51b3008 	ldr	r3, [fp, #-8]
   25ca0:	e3530000 	cmp	r3, #0
   25ca4:	1a000006 	bne	25cc4 <dir_sdi+0x84>
   25ca8:	e51b300c 	ldr	r3, [fp, #-12]
   25cac:	e5d33000 	ldrb	r3, [r3]
   25cb0:	e3530002 	cmp	r3, #2
   25cb4:	9a000002 	bls	25cc4 <dir_sdi+0x84>
		clst = (DWORD)fs->dirbase;
   25cb8:	e51b300c 	ldr	r3, [fp, #-12]
   25cbc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   25cc0:	e50b3008 	str	r3, [fp, #-8]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
   25cc4:	e51b3008 	ldr	r3, [fp, #-8]
   25cc8:	e3530000 	cmp	r3, #0
   25ccc:	1a00000c 	bne	25d04 <dir_sdi+0xc4>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   25cd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25cd4:	e1a032a3 	lsr	r3, r3, #5
   25cd8:	e51b200c 	ldr	r2, [fp, #-12]
   25cdc:	e1d220b8 	ldrh	r2, [r2, #8]
   25ce0:	e1530002 	cmp	r3, r2
   25ce4:	3a000001 	bcc	25cf0 <dir_sdi+0xb0>
   25ce8:	e3a03002 	mov	r3, #2
   25cec:	ea000044 	b	25e04 <dir_sdi+0x1c4>
		dp->sect = fs->dirbase;
   25cf0:	e51b300c 	ldr	r3, [fp, #-12]
   25cf4:	e5932024 	ldr	r2, [r3, #36]	; 0x24
   25cf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25cfc:	e5832018 	str	r2, [r3, #24]
   25d00:	ea000026 	b	25da0 <dir_sdi+0x160>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
   25d04:	e51b300c 	ldr	r3, [fp, #-12]
   25d08:	e1d330ba 	ldrh	r3, [r3, #10]
   25d0c:	e1a03483 	lsl	r3, r3, #9
   25d10:	e50b3010 	str	r3, [fp, #-16]
		while (ofs >= csz) {				/* Follow cluster chain */
   25d14:	ea000017 	b	25d78 <dir_sdi+0x138>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   25d18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25d1c:	e51b1008 	ldr	r1, [fp, #-8]
   25d20:	e1a00003 	mov	r0, r3
   25d24:	ebfffcf1 	bl	250f0 <get_fat>
   25d28:	e50b0008 	str	r0, [fp, #-8]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   25d2c:	e51b3008 	ldr	r3, [fp, #-8]
   25d30:	e3730001 	cmn	r3, #1
   25d34:	1a000001 	bne	25d40 <dir_sdi+0x100>
   25d38:	e3a03001 	mov	r3, #1
   25d3c:	ea000030 	b	25e04 <dir_sdi+0x1c4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   25d40:	e51b3008 	ldr	r3, [fp, #-8]
   25d44:	e3530001 	cmp	r3, #1
   25d48:	9a000004 	bls	25d60 <dir_sdi+0x120>
   25d4c:	e51b300c 	ldr	r3, [fp, #-12]
   25d50:	e5933014 	ldr	r3, [r3, #20]
   25d54:	e51b2008 	ldr	r2, [fp, #-8]
   25d58:	e1520003 	cmp	r2, r3
   25d5c:	3a000001 	bcc	25d68 <dir_sdi+0x128>
   25d60:	e3a03002 	mov	r3, #2
   25d64:	ea000026 	b	25e04 <dir_sdi+0x1c4>
			ofs -= csz;
   25d68:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   25d6c:	e51b3010 	ldr	r3, [fp, #-16]
   25d70:	e0423003 	sub	r3, r2, r3
   25d74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		while (ofs >= csz) {				/* Follow cluster chain */
   25d78:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   25d7c:	e51b3010 	ldr	r3, [fp, #-16]
   25d80:	e1520003 	cmp	r2, r3
   25d84:	2affffe3 	bcs	25d18 <dir_sdi+0xd8>
		}
		dp->sect = clst2sect(fs, clst);
   25d88:	e51b1008 	ldr	r1, [fp, #-8]
   25d8c:	e51b000c 	ldr	r0, [fp, #-12]
   25d90:	ebfffcba 	bl	25080 <clst2sect>
   25d94:	e1a02000 	mov	r2, r0
   25d98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25d9c:	e5832018 	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
   25da0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25da4:	e51b2008 	ldr	r2, [fp, #-8]
   25da8:	e5832014 	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
   25dac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25db0:	e5933018 	ldr	r3, [r3, #24]
   25db4:	e3530000 	cmp	r3, #0
   25db8:	1a000001 	bne	25dc4 <dir_sdi+0x184>
   25dbc:	e3a03002 	mov	r3, #2
   25dc0:	ea00000f 	b	25e04 <dir_sdi+0x1c4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   25dc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25dc8:	e5932018 	ldr	r2, [r3, #24]
   25dcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25dd0:	e1a034a3 	lsr	r3, r3, #9
   25dd4:	e0822003 	add	r2, r2, r3
   25dd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25ddc:	e5832018 	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   25de0:	e51b300c 	ldr	r3, [fp, #-12]
   25de4:	e2832030 	add	r2, r3, #48	; 0x30
   25de8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25dec:	e1a03b83 	lsl	r3, r3, #23
   25df0:	e1a03ba3 	lsr	r3, r3, #23
   25df4:	e0822003 	add	r2, r2, r3
   25df8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25dfc:	e583201c 	str	r2, [r3, #28]

	return FR_OK;
   25e00:	e3a03000 	mov	r3, #0
}
   25e04:	e1a00003 	mov	r0, r3
   25e08:	e24bd004 	sub	sp, fp, #4
   25e0c:	e8bd8800 	pop	{fp, pc}

00025e10 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   25e10:	e92d4800 	push	{fp, lr}
   25e14:	e28db004 	add	fp, sp, #4
   25e18:	e24dd018 	sub	sp, sp, #24
   25e1c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25e20:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
   25e24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e28:	e5933000 	ldr	r3, [r3]
   25e2c:	e50b300c 	str	r3, [fp, #-12]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
   25e30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e34:	e5933010 	ldr	r3, [r3, #16]
   25e38:	e2833020 	add	r3, r3, #32
   25e3c:	e50b3010 	str	r3, [fp, #-16]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   25e40:	e51b3010 	ldr	r3, [fp, #-16]
   25e44:	e3530602 	cmp	r3, #2097152	; 0x200000
   25e48:	3a000002 	bcc	25e58 <dir_next+0x48>
   25e4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e50:	e3a02000 	mov	r2, #0
   25e54:	e5832018 	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   25e58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e5c:	e5933018 	ldr	r3, [r3, #24]
   25e60:	e3530000 	cmp	r3, #0
   25e64:	1a000001 	bne	25e70 <dir_next+0x60>
   25e68:	e3a03004 	mov	r3, #4
   25e6c:	ea000071 	b	26038 <dir_next+0x228>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   25e70:	e51b3010 	ldr	r3, [fp, #-16]
   25e74:	e1a03b83 	lsl	r3, r3, #23
   25e78:	e1a03ba3 	lsr	r3, r3, #23
   25e7c:	e3530000 	cmp	r3, #0
   25e80:	1a000060 	bne	26008 <dir_next+0x1f8>
		dp->sect++;				/* Next sector */
   25e84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e88:	e5933018 	ldr	r3, [r3, #24]
   25e8c:	e2832001 	add	r2, r3, #1
   25e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e94:	e5832018 	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
   25e98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e9c:	e5933014 	ldr	r3, [r3, #20]
   25ea0:	e3530000 	cmp	r3, #0
   25ea4:	1a00000a 	bne	25ed4 <dir_next+0xc4>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
   25ea8:	e51b3010 	ldr	r3, [fp, #-16]
   25eac:	e1a032a3 	lsr	r3, r3, #5
   25eb0:	e51b200c 	ldr	r2, [fp, #-12]
   25eb4:	e1d220b8 	ldrh	r2, [r2, #8]
   25eb8:	e1530002 	cmp	r3, r2
   25ebc:	3a000051 	bcc	26008 <dir_next+0x1f8>
				dp->sect = 0; return FR_NO_FILE;
   25ec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25ec4:	e3a02000 	mov	r2, #0
   25ec8:	e5832018 	str	r2, [r3, #24]
   25ecc:	e3a03004 	mov	r3, #4
   25ed0:	ea000058 	b	26038 <dir_next+0x228>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   25ed4:	e51b3010 	ldr	r3, [fp, #-16]
   25ed8:	e1a034a3 	lsr	r3, r3, #9
   25edc:	e51b200c 	ldr	r2, [fp, #-12]
   25ee0:	e1d220ba 	ldrh	r2, [r2, #10]
   25ee4:	e2422001 	sub	r2, r2, #1
   25ee8:	e0033002 	and	r3, r3, r2
   25eec:	e3530000 	cmp	r3, #0
   25ef0:	1a000044 	bne	26008 <dir_next+0x1f8>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   25ef4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25ef8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25efc:	e5933014 	ldr	r3, [r3, #20]
   25f00:	e1a01003 	mov	r1, r3
   25f04:	e1a00002 	mov	r0, r2
   25f08:	ebfffc78 	bl	250f0 <get_fat>
   25f0c:	e50b0008 	str	r0, [fp, #-8]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   25f10:	e51b3008 	ldr	r3, [fp, #-8]
   25f14:	e3530001 	cmp	r3, #1
   25f18:	8a000001 	bhi	25f24 <dir_next+0x114>
   25f1c:	e3a03002 	mov	r3, #2
   25f20:	ea000044 	b	26038 <dir_next+0x228>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   25f24:	e51b3008 	ldr	r3, [fp, #-8]
   25f28:	e3730001 	cmn	r3, #1
   25f2c:	1a000001 	bne	25f38 <dir_next+0x128>
   25f30:	e3a03001 	mov	r3, #1
   25f34:	ea00003f 	b	26038 <dir_next+0x228>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
   25f38:	e51b300c 	ldr	r3, [fp, #-12]
   25f3c:	e5933014 	ldr	r3, [r3, #20]
   25f40:	e51b2008 	ldr	r2, [fp, #-8]
   25f44:	e1520003 	cmp	r2, r3
   25f48:	3a000025 	bcc	25fe4 <dir_next+0x1d4>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
   25f4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25f50:	e3530000 	cmp	r3, #0
   25f54:	1a000004 	bne	25f6c <dir_next+0x15c>
						dp->sect = 0; return FR_NO_FILE;
   25f58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25f5c:	e3a02000 	mov	r2, #0
   25f60:	e5832018 	str	r2, [r3, #24]
   25f64:	e3a03004 	mov	r3, #4
   25f68:	ea000032 	b	26038 <dir_next+0x228>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
   25f6c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25f70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25f74:	e5933014 	ldr	r3, [r3, #20]
   25f78:	e1a01003 	mov	r1, r3
   25f7c:	e1a00002 	mov	r0, r2
   25f80:	ebfffe24 	bl	25818 <create_chain>
   25f84:	e50b0008 	str	r0, [fp, #-8]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   25f88:	e51b3008 	ldr	r3, [fp, #-8]
   25f8c:	e3530000 	cmp	r3, #0
   25f90:	1a000001 	bne	25f9c <dir_next+0x18c>
   25f94:	e3a03007 	mov	r3, #7
   25f98:	ea000026 	b	26038 <dir_next+0x228>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   25f9c:	e51b3008 	ldr	r3, [fp, #-8]
   25fa0:	e3530001 	cmp	r3, #1
   25fa4:	1a000001 	bne	25fb0 <dir_next+0x1a0>
   25fa8:	e3a03002 	mov	r3, #2
   25fac:	ea000021 	b	26038 <dir_next+0x228>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   25fb0:	e51b3008 	ldr	r3, [fp, #-8]
   25fb4:	e3730001 	cmn	r3, #1
   25fb8:	1a000001 	bne	25fc4 <dir_next+0x1b4>
   25fbc:	e3a03001 	mov	r3, #1
   25fc0:	ea00001c 	b	26038 <dir_next+0x228>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   25fc4:	e51b1008 	ldr	r1, [fp, #-8]
   25fc8:	e51b000c 	ldr	r0, [fp, #-12]
   25fcc:	ebfffeda 	bl	25b3c <dir_clear>
   25fd0:	e1a03000 	mov	r3, r0
   25fd4:	e3530000 	cmp	r3, #0
   25fd8:	0a000001 	beq	25fe4 <dir_next+0x1d4>
   25fdc:	e3a03001 	mov	r3, #1
   25fe0:	ea000014 	b	26038 <dir_next+0x228>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
   25fe4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25fe8:	e51b2008 	ldr	r2, [fp, #-8]
   25fec:	e5832014 	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
   25ff0:	e51b1008 	ldr	r1, [fp, #-8]
   25ff4:	e51b000c 	ldr	r0, [fp, #-12]
   25ff8:	ebfffc20 	bl	25080 <clst2sect>
   25ffc:	e1a02000 	mov	r2, r0
   26000:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26004:	e5832018 	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
   26008:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2600c:	e51b2010 	ldr	r2, [fp, #-16]
   26010:	e5832010 	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   26014:	e51b300c 	ldr	r3, [fp, #-12]
   26018:	e2832030 	add	r2, r3, #48	; 0x30
   2601c:	e51b3010 	ldr	r3, [fp, #-16]
   26020:	e1a03b83 	lsl	r3, r3, #23
   26024:	e1a03ba3 	lsr	r3, r3, #23
   26028:	e0822003 	add	r2, r2, r3
   2602c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26030:	e583201c 	str	r2, [r3, #28]

	return FR_OK;
   26034:	e3a03000 	mov	r3, #0
}
   26038:	e1a00003 	mov	r0, r3
   2603c:	e24bd004 	sub	sp, fp, #4
   26040:	e8bd8800 	pop	{fp, pc}

00026044 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
   26044:	e92d4800 	push	{fp, lr}
   26048:	e28db004 	add	fp, sp, #4
   2604c:	e24dd018 	sub	sp, sp, #24
   26050:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26054:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
   26058:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2605c:	e5933000 	ldr	r3, [r3]
   26060:	e50b3010 	str	r3, [fp, #-16]


	res = dir_sdi(dp, 0);
   26064:	e3a01000 	mov	r1, #0
   26068:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2606c:	ebfffef3 	bl	25c40 <dir_sdi>
   26070:	e1a03000 	mov	r3, r0
   26074:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   26078:	e55b3005 	ldrb	r3, [fp, #-5]
   2607c:	e3530000 	cmp	r3, #0
   26080:	1a000029 	bne	2612c <dir_alloc+0xe8>
		n = 0;
   26084:	e3a03000 	mov	r3, #0
   26088:	e50b300c 	str	r3, [fp, #-12]
		do {
			res = move_window(fs, dp->sect);
   2608c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26090:	e5933018 	ldr	r3, [r3, #24]
   26094:	e1a01003 	mov	r1, r3
   26098:	e51b0010 	ldr	r0, [fp, #-16]
   2609c:	ebfffb72 	bl	24e6c <move_window>
   260a0:	e1a03000 	mov	r3, r0
   260a4:	e54b3005 	strb	r3, [fp, #-5]
			if (res != FR_OK) break;
   260a8:	e55b3005 	ldrb	r3, [fp, #-5]
   260ac:	e3530000 	cmp	r3, #0
   260b0:	1a00001c 	bne	26128 <dir_alloc+0xe4>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
   260b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   260b8:	e593301c 	ldr	r3, [r3, #28]
   260bc:	e5d33000 	ldrb	r3, [r3]
   260c0:	e35300e5 	cmp	r3, #229	; 0xe5
   260c4:	0a000004 	beq	260dc <dir_alloc+0x98>
   260c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   260cc:	e593301c 	ldr	r3, [r3, #28]
   260d0:	e5d33000 	ldrb	r3, [r3]
   260d4:	e3530000 	cmp	r3, #0
   260d8:	1a000007 	bne	260fc <dir_alloc+0xb8>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
   260dc:	e51b300c 	ldr	r3, [fp, #-12]
   260e0:	e2833001 	add	r3, r3, #1
   260e4:	e50b300c 	str	r3, [fp, #-12]
   260e8:	e51b200c 	ldr	r2, [fp, #-12]
   260ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   260f0:	e1520003 	cmp	r2, r3
   260f4:	1a000002 	bne	26104 <dir_alloc+0xc0>
   260f8:	ea00000b 	b	2612c <dir_alloc+0xe8>
			} else {
				n = 0;				/* Not a free entry, restart to search */
   260fc:	e3a03000 	mov	r3, #0
   26100:	e50b300c 	str	r3, [fp, #-12]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
   26104:	e3a01001 	mov	r1, #1
   26108:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2610c:	ebffff3f 	bl	25e10 <dir_next>
   26110:	e1a03000 	mov	r3, r0
   26114:	e54b3005 	strb	r3, [fp, #-5]
		} while (res == FR_OK);
   26118:	e55b3005 	ldrb	r3, [fp, #-5]
   2611c:	e3530000 	cmp	r3, #0
   26120:	0affffd9 	beq	2608c <dir_alloc+0x48>
   26124:	ea000000 	b	2612c <dir_alloc+0xe8>
			if (res != FR_OK) break;
   26128:	e320f000 	nop	{0}
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   2612c:	e55b3005 	ldrb	r3, [fp, #-5]
   26130:	e3530004 	cmp	r3, #4
   26134:	1a000001 	bne	26140 <dir_alloc+0xfc>
   26138:	e3a03007 	mov	r3, #7
   2613c:	e54b3005 	strb	r3, [fp, #-5]
	return res;
   26140:	e55b3005 	ldrb	r3, [fp, #-5]
}
   26144:	e1a00003 	mov	r0, r3
   26148:	e24bd004 	sub	sp, fp, #4
   2614c:	e8bd8800 	pop	{fp, pc}

00026150 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
   26150:	e92d4800 	push	{fp, lr}
   26154:	e28db004 	add	fp, sp, #4
   26158:	e24dd010 	sub	sp, sp, #16
   2615c:	e50b0010 	str	r0, [fp, #-16]
   26160:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
   26164:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26168:	e283301a 	add	r3, r3, #26
   2616c:	e1a00003 	mov	r0, r3
   26170:	ebfffa6e 	bl	24b30 <ld_word>
   26174:	e1a03000 	mov	r3, r0
   26178:	e50b3008 	str	r3, [fp, #-8]
	if (fs->fs_type == FS_FAT32) {
   2617c:	e51b3010 	ldr	r3, [fp, #-16]
   26180:	e5d33000 	ldrb	r3, [r3]
   26184:	e3530003 	cmp	r3, #3
   26188:	1a000008 	bne	261b0 <ld_clust+0x60>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   2618c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26190:	e2833014 	add	r3, r3, #20
   26194:	e1a00003 	mov	r0, r3
   26198:	ebfffa64 	bl	24b30 <ld_word>
   2619c:	e1a03000 	mov	r3, r0
   261a0:	e1a03803 	lsl	r3, r3, #16
   261a4:	e51b2008 	ldr	r2, [fp, #-8]
   261a8:	e1823003 	orr	r3, r2, r3
   261ac:	e50b3008 	str	r3, [fp, #-8]
	}

	return cl;
   261b0:	e51b3008 	ldr	r3, [fp, #-8]
}
   261b4:	e1a00003 	mov	r0, r3
   261b8:	e24bd004 	sub	sp, fp, #4
   261bc:	e8bd8800 	pop	{fp, pc}

000261c0 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
   261c0:	e92d4800 	push	{fp, lr}
   261c4:	e28db004 	add	fp, sp, #4
   261c8:	e24dd010 	sub	sp, sp, #16
   261cc:	e50b0008 	str	r0, [fp, #-8]
   261d0:	e50b100c 	str	r1, [fp, #-12]
   261d4:	e50b2010 	str	r2, [fp, #-16]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
   261d8:	e51b300c 	ldr	r3, [fp, #-12]
   261dc:	e283301a 	add	r3, r3, #26
   261e0:	e51b2010 	ldr	r2, [fp, #-16]
   261e4:	e6ff2072 	uxth	r2, r2
   261e8:	e1a01002 	mov	r1, r2
   261ec:	e1a00003 	mov	r0, r3
   261f0:	ebfffa85 	bl	24c0c <st_word>
	if (fs->fs_type == FS_FAT32) {
   261f4:	e51b3008 	ldr	r3, [fp, #-8]
   261f8:	e5d33000 	ldrb	r3, [r3]
   261fc:	e3530003 	cmp	r3, #3
   26200:	1a000007 	bne	26224 <st_clust+0x64>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   26204:	e51b300c 	ldr	r3, [fp, #-12]
   26208:	e2832014 	add	r2, r3, #20
   2620c:	e51b3010 	ldr	r3, [fp, #-16]
   26210:	e1a03823 	lsr	r3, r3, #16
   26214:	e6ff3073 	uxth	r3, r3
   26218:	e1a01003 	mov	r1, r3
   2621c:	e1a00002 	mov	r0, r2
   26220:	ebfffa79 	bl	24c0c <st_word>
	}
}
   26224:	e320f000 	nop	{0}
   26228:	e24bd004 	sub	sp, fp, #4
   2622c:	e8bd8800 	pop	{fp, pc}

00026230 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
   26230:	e92d4800 	push	{fp, lr}
   26234:	e28db004 	add	fp, sp, #4
   26238:	e24dd018 	sub	sp, sp, #24
   2623c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26240:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	FRESULT res = FR_NO_FILE;
   26244:	e3a03004 	mov	r3, #4
   26248:	e54b3005 	strb	r3, [fp, #-5]
	FATFS *fs = dp->obj.fs;
   2624c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26250:	e5933000 	ldr	r3, [r3]
   26254:	e50b300c 	str	r3, [fp, #-12]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
   26258:	ea000037 	b	2633c <dir_read+0x10c>
		res = move_window(fs, dp->sect);
   2625c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26260:	e5933018 	ldr	r3, [r3, #24]
   26264:	e1a01003 	mov	r1, r3
   26268:	e51b000c 	ldr	r0, [fp, #-12]
   2626c:	ebfffafe 	bl	24e6c <move_window>
   26270:	e1a03000 	mov	r3, r0
   26274:	e54b3005 	strb	r3, [fp, #-5]
		if (res != FR_OK) break;
   26278:	e55b3005 	ldrb	r3, [fp, #-5]
   2627c:	e3530000 	cmp	r3, #0
   26280:	1a000032 	bne	26350 <dir_read+0x120>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
   26284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26288:	e593301c 	ldr	r3, [r3, #28]
   2628c:	e5d33000 	ldrb	r3, [r3]
   26290:	e54b300d 	strb	r3, [fp, #-13]
		if (b == 0) {
   26294:	e55b300d 	ldrb	r3, [fp, #-13]
   26298:	e3530000 	cmp	r3, #0
   2629c:	1a000002 	bne	262ac <dir_read+0x7c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
   262a0:	e3a03004 	mov	r3, #4
   262a4:	e54b3005 	strb	r3, [fp, #-5]
   262a8:	ea00002d 	b	26364 <dir_read+0x134>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   262ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   262b0:	e593301c 	ldr	r3, [r3, #28]
   262b4:	e283300b 	add	r3, r3, #11
   262b8:	e5d33000 	ldrb	r3, [r3]
   262bc:	e203303f 	and	r3, r3, #63	; 0x3f
   262c0:	e54b300e 	strb	r3, [fp, #-14]
   262c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   262c8:	e55b200e 	ldrb	r2, [fp, #-14]
   262cc:	e5c32006 	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
   262d0:	e55b300d 	ldrb	r3, [fp, #-13]
   262d4:	e35300e5 	cmp	r3, #229	; 0xe5
   262d8:	0a00000f 	beq	2631c <dir_read+0xec>
   262dc:	e55b300d 	ldrb	r3, [fp, #-13]
   262e0:	e353002e 	cmp	r3, #46	; 0x2e
   262e4:	0a00000c 	beq	2631c <dir_read+0xec>
   262e8:	e55b300e 	ldrb	r3, [fp, #-14]
   262ec:	e353000f 	cmp	r3, #15
   262f0:	0a000009 	beq	2631c <dir_read+0xec>
   262f4:	e55b300e 	ldrb	r3, [fp, #-14]
   262f8:	e3c33020 	bic	r3, r3, #32
   262fc:	e3530008 	cmp	r3, #8
   26300:	03a03001 	moveq	r3, #1
   26304:	13a03000 	movne	r3, #0
   26308:	e6ef3073 	uxtb	r3, r3
   2630c:	e1a02003 	mov	r2, r3
   26310:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26314:	e1530002 	cmp	r3, r2
   26318:	0a00000e 	beq	26358 <dir_read+0x128>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
   2631c:	e3a01000 	mov	r1, #0
   26320:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26324:	ebfffeb9 	bl	25e10 <dir_next>
   26328:	e1a03000 	mov	r3, r0
   2632c:	e54b3005 	strb	r3, [fp, #-5]
		if (res != FR_OK) break;
   26330:	e55b3005 	ldrb	r3, [fp, #-5]
   26334:	e3530000 	cmp	r3, #0
   26338:	1a000008 	bne	26360 <dir_read+0x130>
	while (dp->sect) {
   2633c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26340:	e5933018 	ldr	r3, [r3, #24]
   26344:	e3530000 	cmp	r3, #0
   26348:	1affffc3 	bne	2625c <dir_read+0x2c>
   2634c:	ea000004 	b	26364 <dir_read+0x134>
		if (res != FR_OK) break;
   26350:	e320f000 	nop	{0}
   26354:	ea000002 	b	26364 <dir_read+0x134>
				break;
   26358:	e320f000 	nop	{0}
   2635c:	ea000000 	b	26364 <dir_read+0x134>
		if (res != FR_OK) break;
   26360:	e320f000 	nop	{0}
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   26364:	e55b3005 	ldrb	r3, [fp, #-5]
   26368:	e3530000 	cmp	r3, #0
   2636c:	0a000002 	beq	2637c <dir_read+0x14c>
   26370:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26374:	e3a02000 	mov	r2, #0
   26378:	e5832018 	str	r2, [r3, #24]
	return res;
   2637c:	e55b3005 	ldrb	r3, [fp, #-5]
}
   26380:	e1a00003 	mov	r0, r3
   26384:	e24bd004 	sub	sp, fp, #4
   26388:	e8bd8800 	pop	{fp, pc}

0002638c <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
   2638c:	e92d4800 	push	{fp, lr}
   26390:	e28db004 	add	fp, sp, #4
   26394:	e24dd018 	sub	sp, sp, #24
   26398:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   2639c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   263a0:	e5933000 	ldr	r3, [r3]
   263a4:	e50b300c 	str	r3, [fp, #-12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
   263a8:	e3a01000 	mov	r1, #0
   263ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   263b0:	ebfffe22 	bl	25c40 <dir_sdi>
   263b4:	e1a03000 	mov	r3, r0
   263b8:	e54b3005 	strb	r3, [fp, #-5]
	if (res != FR_OK) return res;
   263bc:	e55b3005 	ldrb	r3, [fp, #-5]
   263c0:	e3530000 	cmp	r3, #0
   263c4:	0a000001 	beq	263d0 <dir_find+0x44>
   263c8:	e55b3005 	ldrb	r3, [fp, #-5]
   263cc:	ea000039 	b	264b8 <dir_find+0x12c>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
   263d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   263d4:	e5933018 	ldr	r3, [r3, #24]
   263d8:	e1a01003 	mov	r1, r3
   263dc:	e51b000c 	ldr	r0, [fp, #-12]
   263e0:	ebfffaa1 	bl	24e6c <move_window>
   263e4:	e1a03000 	mov	r3, r0
   263e8:	e54b3005 	strb	r3, [fp, #-5]
		if (res != FR_OK) break;
   263ec:	e55b3005 	ldrb	r3, [fp, #-5]
   263f0:	e3530000 	cmp	r3, #0
   263f4:	1a00002b 	bne	264a8 <dir_find+0x11c>
		c = dp->dir[DIR_Name];
   263f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   263fc:	e593301c 	ldr	r3, [r3, #28]
   26400:	e5d33000 	ldrb	r3, [r3]
   26404:	e54b300d 	strb	r3, [fp, #-13]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
   26408:	e55b300d 	ldrb	r3, [fp, #-13]
   2640c:	e3530000 	cmp	r3, #0
   26410:	1a000002 	bne	26420 <dir_find+0x94>
   26414:	e3a03004 	mov	r3, #4
   26418:	e54b3005 	strb	r3, [fp, #-5]
   2641c:	ea000024 	b	264b4 <dir_find+0x128>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Not matched, reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
   26420:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26424:	e593301c 	ldr	r3, [r3, #28]
   26428:	e283300b 	add	r3, r3, #11
   2642c:	e5d33000 	ldrb	r3, [r3]
   26430:	e203303f 	and	r3, r3, #63	; 0x3f
   26434:	e6ef2073 	uxtb	r2, r3
   26438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2643c:	e5c32006 	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
   26440:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26444:	e593301c 	ldr	r3, [r3, #28]
   26448:	e283300b 	add	r3, r3, #11
   2644c:	e5d33000 	ldrb	r3, [r3]
   26450:	e2033008 	and	r3, r3, #8
   26454:	e3530000 	cmp	r3, #0
   26458:	1a000009 	bne	26484 <dir_find+0xf8>
   2645c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26460:	e593001c 	ldr	r0, [r3, #28]
   26464:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26468:	e2833020 	add	r3, r3, #32
   2646c:	e3a0200b 	mov	r2, #11
   26470:	e1a01003 	mov	r1, r3
   26474:	eb00143a 	bl	2b564 <memcmp>
   26478:	e1a03000 	mov	r3, r0
   2647c:	e3530000 	cmp	r3, #0
   26480:	0a00000a 	beq	264b0 <dir_find+0x124>
#endif
		res = dir_next(dp, 0);	/* Next entry */
   26484:	e3a01000 	mov	r1, #0
   26488:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2648c:	ebfffe5f 	bl	25e10 <dir_next>
   26490:	e1a03000 	mov	r3, r0
   26494:	e54b3005 	strb	r3, [fp, #-5]
	} while (res == FR_OK);
   26498:	e55b3005 	ldrb	r3, [fp, #-5]
   2649c:	e3530000 	cmp	r3, #0
   264a0:	0affffca 	beq	263d0 <dir_find+0x44>
   264a4:	ea000002 	b	264b4 <dir_find+0x128>
		if (res != FR_OK) break;
   264a8:	e320f000 	nop	{0}
   264ac:	ea000000 	b	264b4 <dir_find+0x128>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
   264b0:	e320f000 	nop	{0}

	return res;
   264b4:	e55b3005 	ldrb	r3, [fp, #-5]
}
   264b8:	e1a00003 	mov	r0, r3
   264bc:	e24bd004 	sub	sp, fp, #4
   264c0:	e8bd8800 	pop	{fp, pc}

000264c4 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
   264c4:	e92d4800 	push	{fp, lr}
   264c8:	e28db004 	add	fp, sp, #4
   264cc:	e24dd010 	sub	sp, sp, #16
   264d0:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   264d4:	e51b3010 	ldr	r3, [fp, #-16]
   264d8:	e5933000 	ldr	r3, [r3]
   264dc:	e50b300c 	str	r3, [fp, #-12]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
   264e0:	e3a01001 	mov	r1, #1
   264e4:	e51b0010 	ldr	r0, [fp, #-16]
   264e8:	ebfffed5 	bl	26044 <dir_alloc>
   264ec:	e1a03000 	mov	r3, r0
   264f0:	e54b3005 	strb	r3, [fp, #-5]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
   264f4:	e55b3005 	ldrb	r3, [fp, #-5]
   264f8:	e3530000 	cmp	r3, #0
   264fc:	1a000019 	bne	26568 <dir_register+0xa4>
		res = move_window(fs, dp->sect);
   26500:	e51b3010 	ldr	r3, [fp, #-16]
   26504:	e5933018 	ldr	r3, [r3, #24]
   26508:	e1a01003 	mov	r1, r3
   2650c:	e51b000c 	ldr	r0, [fp, #-12]
   26510:	ebfffa55 	bl	24e6c <move_window>
   26514:	e1a03000 	mov	r3, r0
   26518:	e54b3005 	strb	r3, [fp, #-5]
		if (res == FR_OK) {
   2651c:	e55b3005 	ldrb	r3, [fp, #-5]
   26520:	e3530000 	cmp	r3, #0
   26524:	1a00000f 	bne	26568 <dir_register+0xa4>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
   26528:	e51b3010 	ldr	r3, [fp, #-16]
   2652c:	e593301c 	ldr	r3, [r3, #28]
   26530:	e3a02020 	mov	r2, #32
   26534:	e3a01000 	mov	r1, #0
   26538:	e1a00003 	mov	r0, r3
   2653c:	eb00147b 	bl	2b730 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
   26540:	e51b3010 	ldr	r3, [fp, #-16]
   26544:	e593001c 	ldr	r0, [r3, #28]
   26548:	e51b3010 	ldr	r3, [fp, #-16]
   2654c:	e2833020 	add	r3, r3, #32
   26550:	e3a0200b 	mov	r2, #11
   26554:	e1a01003 	mov	r1, r3
   26558:	eb00142c 	bl	2b610 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
   2655c:	e51b300c 	ldr	r3, [fp, #-12]
   26560:	e3a02001 	mov	r2, #1
   26564:	e5c32004 	strb	r2, [r3, #4]
		}
	}

	return res;
   26568:	e55b3005 	ldrb	r3, [fp, #-5]
}
   2656c:	e1a00003 	mov	r0, r3
   26570:	e24bd004 	sub	sp, fp, #4
   26574:	e8bd8800 	pop	{fp, pc}

00026578 <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
   26578:	e92d4800 	push	{fp, lr}
   2657c:	e28db004 	add	fp, sp, #4
   26580:	e24dd010 	sub	sp, sp, #16
   26584:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   26588:	e51b3010 	ldr	r3, [fp, #-16]
   2658c:	e5933000 	ldr	r3, [r3]
   26590:	e50b3008 	str	r3, [fp, #-8]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
   26594:	e51b3010 	ldr	r3, [fp, #-16]
   26598:	e5933018 	ldr	r3, [r3, #24]
   2659c:	e1a01003 	mov	r1, r3
   265a0:	e51b0008 	ldr	r0, [fp, #-8]
   265a4:	ebfffa30 	bl	24e6c <move_window>
   265a8:	e1a03000 	mov	r3, r0
   265ac:	e54b3009 	strb	r3, [fp, #-9]
	if (res == FR_OK) {
   265b0:	e55b3009 	ldrb	r3, [fp, #-9]
   265b4:	e3530000 	cmp	r3, #0
   265b8:	1a000006 	bne	265d8 <dir_remove+0x60>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
   265bc:	e51b3010 	ldr	r3, [fp, #-16]
   265c0:	e593301c 	ldr	r3, [r3, #28]
   265c4:	e3e0201a 	mvn	r2, #26
   265c8:	e5c32000 	strb	r2, [r3]
		fs->wflag = 1;
   265cc:	e51b3008 	ldr	r3, [fp, #-8]
   265d0:	e3a02001 	mov	r2, #1
   265d4:	e5c32004 	strb	r2, [r3, #4]
	}
#endif

	return res;
   265d8:	e55b3009 	ldrb	r3, [fp, #-9]
}
   265dc:	e1a00003 	mov	r0, r3
   265e0:	e24bd004 	sub	sp, fp, #4
   265e4:	e8bd8800 	pop	{fp, pc}

000265e8 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
   265e8:	e92d4800 	push	{fp, lr}
   265ec:	e28db004 	add	fp, sp, #4
   265f0:	e24dd018 	sub	sp, sp, #24
   265f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   265f8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
   265fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26600:	e3a02000 	mov	r2, #0
   26604:	e5c32009 	strb	r2, [r3, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   26608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2660c:	e5933018 	ldr	r3, [r3, #24]
   26610:	e3530000 	cmp	r3, #0
   26614:	0a000052 	beq	26764 <get_fileinfo+0x17c>
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
   26618:	e3a03000 	mov	r3, #0
   2661c:	e50b300c 	str	r3, [fp, #-12]
   26620:	e51b300c 	ldr	r3, [fp, #-12]
   26624:	e50b3008 	str	r3, [fp, #-8]
	while (si < 11) {		/* Copy name body and extension */
   26628:	ea000021 	b	266b4 <get_fileinfo+0xcc>
		c = (TCHAR)dp->dir[si++];
   2662c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26630:	e593201c 	ldr	r2, [r3, #28]
   26634:	e51b3008 	ldr	r3, [fp, #-8]
   26638:	e2831001 	add	r1, r3, #1
   2663c:	e50b1008 	str	r1, [fp, #-8]
   26640:	e0823003 	add	r3, r2, r3
   26644:	e5d33000 	ldrb	r3, [r3]
   26648:	e54b300d 	strb	r3, [fp, #-13]
		if (c == ' ') continue;		/* Skip padding spaces */
   2664c:	e55b300d 	ldrb	r3, [fp, #-13]
   26650:	e3530020 	cmp	r3, #32
   26654:	1a000000 	bne	2665c <get_fileinfo+0x74>
   26658:	ea000015 	b	266b4 <get_fileinfo+0xcc>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
   2665c:	e55b300d 	ldrb	r3, [fp, #-13]
   26660:	e3530005 	cmp	r3, #5
   26664:	1a000001 	bne	26670 <get_fileinfo+0x88>
   26668:	e3e0301a 	mvn	r3, #26
   2666c:	e54b300d 	strb	r3, [fp, #-13]
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
   26670:	e51b3008 	ldr	r3, [fp, #-8]
   26674:	e3530009 	cmp	r3, #9
   26678:	1a000006 	bne	26698 <get_fileinfo+0xb0>
   2667c:	e51b300c 	ldr	r3, [fp, #-12]
   26680:	e2832001 	add	r2, r3, #1
   26684:	e50b200c 	str	r2, [fp, #-12]
   26688:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2668c:	e0823003 	add	r3, r2, r3
   26690:	e3a0202e 	mov	r2, #46	; 0x2e
   26694:	e5c32009 	strb	r2, [r3, #9]
		fno->fname[di++] = c;
   26698:	e51b300c 	ldr	r3, [fp, #-12]
   2669c:	e2832001 	add	r2, r3, #1
   266a0:	e50b200c 	str	r2, [fp, #-12]
   266a4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   266a8:	e0823003 	add	r3, r2, r3
   266ac:	e55b200d 	ldrb	r2, [fp, #-13]
   266b0:	e5c32009 	strb	r2, [r3, #9]
	while (si < 11) {		/* Copy name body and extension */
   266b4:	e51b3008 	ldr	r3, [fp, #-8]
   266b8:	e353000a 	cmp	r3, #10
   266bc:	9affffda 	bls	2662c <get_fileinfo+0x44>
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
   266c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   266c4:	e51b300c 	ldr	r3, [fp, #-12]
   266c8:	e0823003 	add	r3, r2, r3
   266cc:	e2833009 	add	r3, r3, #9
   266d0:	e3a02000 	mov	r2, #0
   266d4:	e5c32000 	strb	r2, [r3]
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
   266d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   266dc:	e593301c 	ldr	r3, [r3, #28]
   266e0:	e283300b 	add	r3, r3, #11
   266e4:	e5d33000 	ldrb	r3, [r3]
   266e8:	e203303f 	and	r3, r3, #63	; 0x3f
   266ec:	e6ef2073 	uxtb	r2, r3
   266f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   266f4:	e5c32008 	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
   266f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   266fc:	e593301c 	ldr	r3, [r3, #28]
   26700:	e283301c 	add	r3, r3, #28
   26704:	e1a00003 	mov	r0, r3
   26708:	ebfff91e 	bl	24b88 <ld_dword>
   2670c:	e1a02000 	mov	r2, r0
   26710:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26714:	e5832000 	str	r2, [r3]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
   26718:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2671c:	e593301c 	ldr	r3, [r3, #28]
   26720:	e2833016 	add	r3, r3, #22
   26724:	e1a00003 	mov	r0, r3
   26728:	ebfff900 	bl	24b30 <ld_word>
   2672c:	e1a03000 	mov	r3, r0
   26730:	e1a02003 	mov	r2, r3
   26734:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26738:	e1c320b6 	strh	r2, [r3, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
   2673c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26740:	e593301c 	ldr	r3, [r3, #28]
   26744:	e2833018 	add	r3, r3, #24
   26748:	e1a00003 	mov	r0, r3
   2674c:	ebfff8f7 	bl	24b30 <ld_word>
   26750:	e1a03000 	mov	r3, r0
   26754:	e1a02003 	mov	r2, r3
   26758:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2675c:	e1c320b4 	strh	r2, [r3, #4]
   26760:	ea000000 	b	26768 <get_fileinfo+0x180>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   26764:	e320f000 	nop	{0}
}
   26768:	e24bd004 	sub	sp, fp, #4
   2676c:	e8bd8800 	pop	{fp, pc}

00026770 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
   26770:	e92d4800 	push	{fp, lr}
   26774:	e28db004 	add	fp, sp, #4
   26778:	e24dd028 	sub	sp, sp, #40	; 0x28
   2677c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   26780:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
   26784:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   26788:	e5933000 	ldr	r3, [r3]
   2678c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   26790:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   26794:	e2833020 	add	r3, r3, #32
   26798:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	memset(sfn, ' ', 11);
   2679c:	e3a0200b 	mov	r2, #11
   267a0:	e3a01020 	mov	r1, #32
   267a4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   267a8:	eb0013e0 	bl	2b730 <memset>
	si = i = 0; ni = 8;
   267ac:	e3a03000 	mov	r3, #0
   267b0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   267b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   267b8:	e50b3010 	str	r3, [fp, #-16]
   267bc:	e3a03008 	mov	r3, #8
   267c0:	e50b300c 	str	r3, [fp, #-12]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
   267c4:	e51b3010 	ldr	r3, [fp, #-16]
   267c8:	e2832001 	add	r2, r3, #1
   267cc:	e50b2010 	str	r2, [fp, #-16]
   267d0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   267d4:	e0823003 	add	r3, r2, r3
   267d8:	e5d33000 	ldrb	r3, [r3]
   267dc:	e54b3005 	strb	r3, [fp, #-5]
		if (c <= ' ') break; 			/* Break if end of the path name */
   267e0:	e55b3005 	ldrb	r3, [fp, #-5]
   267e4:	e3530020 	cmp	r3, #32
   267e8:	9a000075 	bls	269c4 <create_name+0x254>
		if (IsSeparator(c)) {			/* Break if a separator is found */
   267ec:	e55b3005 	ldrb	r3, [fp, #-5]
   267f0:	e353002f 	cmp	r3, #47	; 0x2f
   267f4:	0a000006 	beq	26814 <create_name+0xa4>
   267f8:	e55b3005 	ldrb	r3, [fp, #-5]
   267fc:	e353005c 	cmp	r3, #92	; 0x5c
   26800:	1a000010 	bne	26848 <create_name+0xd8>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
   26804:	ea000002 	b	26814 <create_name+0xa4>
   26808:	e51b3010 	ldr	r3, [fp, #-16]
   2680c:	e2833001 	add	r3, r3, #1
   26810:	e50b3010 	str	r3, [fp, #-16]
   26814:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   26818:	e51b3010 	ldr	r3, [fp, #-16]
   2681c:	e0823003 	add	r3, r2, r3
   26820:	e5d33000 	ldrb	r3, [r3]
   26824:	e353002f 	cmp	r3, #47	; 0x2f
   26828:	0afffff6 	beq	26808 <create_name+0x98>
   2682c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   26830:	e51b3010 	ldr	r3, [fp, #-16]
   26834:	e0823003 	add	r3, r2, r3
   26838:	e5d33000 	ldrb	r3, [r3]
   2683c:	e353005c 	cmp	r3, #92	; 0x5c
   26840:	0afffff0 	beq	26808 <create_name+0x98>
			break;
   26844:	ea00005f 	b	269c8 <create_name+0x258>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
   26848:	e55b3005 	ldrb	r3, [fp, #-5]
   2684c:	e353002e 	cmp	r3, #46	; 0x2e
   26850:	0a000003 	beq	26864 <create_name+0xf4>
   26854:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26858:	e51b300c 	ldr	r3, [fp, #-12]
   2685c:	e1520003 	cmp	r2, r3
   26860:	3a00000c 	bcc	26898 <create_name+0x128>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
   26864:	e51b300c 	ldr	r3, [fp, #-12]
   26868:	e353000b 	cmp	r3, #11
   2686c:	0a000002 	beq	2687c <create_name+0x10c>
   26870:	e55b3005 	ldrb	r3, [fp, #-5]
   26874:	e353002e 	cmp	r3, #46	; 0x2e
   26878:	0a000001 	beq	26884 <create_name+0x114>
   2687c:	e3a03006 	mov	r3, #6
   26880:	ea000071 	b	26a4c <create_name+0x2dc>
			i = 8; ni = 11;				/* Enter file extension field */
   26884:	e3a03008 	mov	r3, #8
   26888:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2688c:	e3a0300b 	mov	r3, #11
   26890:	e50b300c 	str	r3, [fp, #-12]
			continue;
   26894:	ea000049 	b	269c0 <create_name+0x250>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
   26898:	e15b30d5 	ldrsb	r3, [fp, #-5]
   2689c:	e3530000 	cmp	r3, #0
   268a0:	aa000004 	bge	268b8 <create_name+0x148>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
   268a4:	e55b3005 	ldrb	r3, [fp, #-5]
   268a8:	e203307f 	and	r3, r3, #127	; 0x7f
   268ac:	e59f21a4 	ldr	r2, [pc, #420]	; 26a58 <create_name+0x2e8>
   268b0:	e7d23003 	ldrb	r3, [r2, r3]
   268b4:	e54b3005 	strb	r3, [fp, #-5]
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
   268b8:	e55b3005 	ldrb	r3, [fp, #-5]
   268bc:	e1a00003 	mov	r0, r3
   268c0:	ebfff914 	bl	24d18 <dbc_1st>
   268c4:	e1a03000 	mov	r3, r0
   268c8:	e3530000 	cmp	r3, #0
   268cc:	0a000022 	beq	2695c <create_name+0x1ec>
			d = (BYTE)p[si++];			/* Get 2nd byte */
   268d0:	e51b3010 	ldr	r3, [fp, #-16]
   268d4:	e2832001 	add	r2, r3, #1
   268d8:	e50b2010 	str	r2, [fp, #-16]
   268dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   268e0:	e0823003 	add	r3, r2, r3
   268e4:	e5d33000 	ldrb	r3, [r3]
   268e8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
   268ec:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   268f0:	e1a00003 	mov	r0, r3
   268f4:	ebfff916 	bl	24d54 <dbc_2nd>
   268f8:	e1a03000 	mov	r3, r0
   268fc:	e3530000 	cmp	r3, #0
   26900:	0a000004 	beq	26918 <create_name+0x1a8>
   26904:	e51b300c 	ldr	r3, [fp, #-12]
   26908:	e2433001 	sub	r3, r3, #1
   2690c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26910:	e1520003 	cmp	r2, r3
   26914:	3a000001 	bcc	26920 <create_name+0x1b0>
   26918:	e3a03006 	mov	r3, #6
   2691c:	ea00004a 	b	26a4c <create_name+0x2dc>
			sfn[i++] = c;
   26920:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26924:	e2832001 	add	r2, r3, #1
   26928:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   2692c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   26930:	e0823003 	add	r3, r2, r3
   26934:	e55b2005 	ldrb	r2, [fp, #-5]
   26938:	e5c32000 	strb	r2, [r3]
			sfn[i++] = d;
   2693c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26940:	e2832001 	add	r2, r3, #1
   26944:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   26948:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2694c:	e0823003 	add	r3, r2, r3
   26950:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
   26954:	e5c32000 	strb	r2, [r3]
   26958:	eaffff99 	b	267c4 <create_name+0x54>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
   2695c:	e55b3005 	ldrb	r3, [fp, #-5]
   26960:	e1a01003 	mov	r1, r3
   26964:	e59f00f0 	ldr	r0, [pc, #240]	; 26a5c <create_name+0x2ec>
   26968:	eb0013b7 	bl	2b84c <strchr>
   2696c:	e1a03000 	mov	r3, r0
   26970:	e3530000 	cmp	r3, #0
   26974:	0a000001 	beq	26980 <create_name+0x210>
   26978:	e3a03006 	mov	r3, #6
   2697c:	ea000032 	b	26a4c <create_name+0x2dc>
			if (IsLower(c)) c -= 0x20;	/* To upper */
   26980:	e55b3005 	ldrb	r3, [fp, #-5]
   26984:	e3530060 	cmp	r3, #96	; 0x60
   26988:	9a000005 	bls	269a4 <create_name+0x234>
   2698c:	e55b3005 	ldrb	r3, [fp, #-5]
   26990:	e353007a 	cmp	r3, #122	; 0x7a
   26994:	8a000002 	bhi	269a4 <create_name+0x234>
   26998:	e55b3005 	ldrb	r3, [fp, #-5]
   2699c:	e2433020 	sub	r3, r3, #32
   269a0:	e54b3005 	strb	r3, [fp, #-5]
			sfn[i++] = c;
   269a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   269a8:	e2832001 	add	r2, r3, #1
   269ac:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   269b0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   269b4:	e0823003 	add	r3, r2, r3
   269b8:	e55b2005 	ldrb	r2, [fp, #-5]
   269bc:	e5c32000 	strb	r2, [r3]
		c = (BYTE)p[si++];				/* Get a byte */
   269c0:	eaffff7f 	b	267c4 <create_name+0x54>
		if (c <= ' ') break; 			/* Break if end of the path name */
   269c4:	e320f000 	nop	{0}
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
   269c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   269cc:	e51b3010 	ldr	r3, [fp, #-16]
   269d0:	e0822003 	add	r2, r2, r3
   269d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   269d8:	e5832000 	str	r2, [r3]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
   269dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   269e0:	e3530000 	cmp	r3, #0
   269e4:	1a000001 	bne	269f0 <create_name+0x280>
   269e8:	e3a03006 	mov	r3, #6
   269ec:	ea000016 	b	26a4c <create_name+0x2dc>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   269f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   269f4:	e5d33000 	ldrb	r3, [r3]
   269f8:	e35300e5 	cmp	r3, #229	; 0xe5
   269fc:	1a000002 	bne	26a0c <create_name+0x29c>
   26a00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a04:	e3a02005 	mov	r2, #5
   26a08:	e5c32000 	strb	r2, [r3]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
   26a0c:	e55b3005 	ldrb	r3, [fp, #-5]
   26a10:	e3530020 	cmp	r3, #32
   26a14:	9a000005 	bls	26a30 <create_name+0x2c0>
   26a18:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   26a1c:	e51b3010 	ldr	r3, [fp, #-16]
   26a20:	e0823003 	add	r3, r2, r3
   26a24:	e5d33000 	ldrb	r3, [r3]
   26a28:	e3530020 	cmp	r3, #32
   26a2c:	8a000001 	bhi	26a38 <create_name+0x2c8>
   26a30:	e3a02004 	mov	r2, #4
   26a34:	ea000000 	b	26a3c <create_name+0x2cc>
   26a38:	e3a02000 	mov	r2, #0
   26a3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a40:	e283300b 	add	r3, r3, #11
   26a44:	e5c32000 	strb	r2, [r3]

	return FR_OK;
   26a48:	e3a03000 	mov	r3, #0
#endif /* FF_USE_LFN */
}
   26a4c:	e1a00003 	mov	r0, r3
   26a50:	e24bd004 	sub	sp, fp, #4
   26a54:	e8bd8800 	pop	{fp, pc}
   26a58:	0002c0c4 	andeq	ip, r2, r4, asr #1
   26a5c:	0002c144 	andeq	ip, r2, r4, asr #2

00026a60 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
   26a60:	e92d4800 	push	{fp, lr}
   26a64:	e28db004 	add	fp, sp, #4
   26a68:	e24dd018 	sub	sp, sp, #24
   26a6c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26a70:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
   26a74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26a78:	e5933000 	ldr	r3, [r3]
   26a7c:	e50b300c 	str	r3, [fp, #-12]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
   26a80:	ea000002 	b	26a90 <follow_path+0x30>
   26a84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a88:	e2833001 	add	r3, r3, #1
   26a8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   26a90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a94:	e5d33000 	ldrb	r3, [r3]
   26a98:	e353002f 	cmp	r3, #47	; 0x2f
   26a9c:	0afffff8 	beq	26a84 <follow_path+0x24>
   26aa0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26aa4:	e5d33000 	ldrb	r3, [r3]
   26aa8:	e353005c 	cmp	r3, #92	; 0x5c
   26aac:	0afffff4 	beq	26a84 <follow_path+0x24>
		dp->obj.sclust = 0;					/* Start from the root directory */
   26ab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26ab4:	e3a02000 	mov	r2, #0
   26ab8:	e5832008 	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
   26abc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26ac0:	e5d33000 	ldrb	r3, [r3]
   26ac4:	e353001f 	cmp	r3, #31
   26ac8:	8a000008 	bhi	26af0 <follow_path+0x90>
		dp->fn[NSFLAG] = NS_NONAME;
   26acc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26ad0:	e3e0207f 	mvn	r2, #127	; 0x7f
   26ad4:	e5c3202b 	strb	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
   26ad8:	e3a01000 	mov	r1, #0
   26adc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26ae0:	ebfffc56 	bl	25c40 <dir_sdi>
   26ae4:	e1a03000 	mov	r3, r0
   26ae8:	e54b3005 	strb	r3, [fp, #-5]
   26aec:	ea00003b 	b	26be0 <follow_path+0x180>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
   26af0:	e24b301c 	sub	r3, fp, #28
   26af4:	e1a01003 	mov	r1, r3
   26af8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26afc:	ebffff1b 	bl	26770 <create_name>
   26b00:	e1a03000 	mov	r3, r0
   26b04:	e54b3005 	strb	r3, [fp, #-5]
			if (res != FR_OK) break;
   26b08:	e55b3005 	ldrb	r3, [fp, #-5]
   26b0c:	e3530000 	cmp	r3, #0
   26b10:	1a00002d 	bne	26bcc <follow_path+0x16c>
			res = dir_find(dp);				/* Find an object with the segment name */
   26b14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26b18:	ebfffe1b 	bl	2638c <dir_find>
   26b1c:	e1a03000 	mov	r3, r0
   26b20:	e54b3005 	strb	r3, [fp, #-5]
			ns = dp->fn[NSFLAG];
   26b24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26b28:	e5d3302b 	ldrb	r3, [r3, #43]	; 0x2b
   26b2c:	e54b300d 	strb	r3, [fp, #-13]
			if (res != FR_OK) {				/* Failed to find the object */
   26b30:	e55b3005 	ldrb	r3, [fp, #-5]
   26b34:	e3530000 	cmp	r3, #0
   26b38:	0a000009 	beq	26b64 <follow_path+0x104>
				if (res == FR_NO_FILE) {	/* Object is not found */
   26b3c:	e55b3005 	ldrb	r3, [fp, #-5]
   26b40:	e3530004 	cmp	r3, #4
   26b44:	1a000022 	bne	26bd4 <follow_path+0x174>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   26b48:	e55b300d 	ldrb	r3, [fp, #-13]
   26b4c:	e2033004 	and	r3, r3, #4
   26b50:	e3530000 	cmp	r3, #0
   26b54:	1a00001e 	bne	26bd4 <follow_path+0x174>
   26b58:	e3a03005 	mov	r3, #5
   26b5c:	e54b3005 	strb	r3, [fp, #-5]
					}
				}
				break;
   26b60:	ea00001b 	b	26bd4 <follow_path+0x174>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
   26b64:	e55b300d 	ldrb	r3, [fp, #-13]
   26b68:	e2033004 	and	r3, r3, #4
   26b6c:	e3530000 	cmp	r3, #0
   26b70:	1a000019 	bne	26bdc <follow_path+0x17c>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
   26b74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26b78:	e5d33006 	ldrb	r3, [r3, #6]
   26b7c:	e2033010 	and	r3, r3, #16
   26b80:	e3530000 	cmp	r3, #0
   26b84:	1a000002 	bne	26b94 <follow_path+0x134>
				res = FR_NO_PATH; break;
   26b88:	e3a03005 	mov	r3, #5
   26b8c:	e54b3005 	strb	r3, [fp, #-5]
   26b90:	ea000012 	b	26be0 <follow_path+0x180>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
   26b94:	e51b300c 	ldr	r3, [fp, #-12]
   26b98:	e2832030 	add	r2, r3, #48	; 0x30
   26b9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26ba0:	e5933010 	ldr	r3, [r3, #16]
   26ba4:	e1a03b83 	lsl	r3, r3, #23
   26ba8:	e1a03ba3 	lsr	r3, r3, #23
   26bac:	e0823003 	add	r3, r2, r3
   26bb0:	e1a01003 	mov	r1, r3
   26bb4:	e51b000c 	ldr	r0, [fp, #-12]
   26bb8:	ebfffd64 	bl	26150 <ld_clust>
   26bbc:	e1a02000 	mov	r2, r0
   26bc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26bc4:	e5832008 	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
   26bc8:	eaffffc8 	b	26af0 <follow_path+0x90>
			if (res != FR_OK) break;
   26bcc:	e320f000 	nop	{0}
   26bd0:	ea000002 	b	26be0 <follow_path+0x180>
				break;
   26bd4:	e320f000 	nop	{0}
   26bd8:	ea000000 	b	26be0 <follow_path+0x180>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
   26bdc:	e320f000 	nop	{0}
			}
		}
	}

	return res;
   26be0:	e55b3005 	ldrb	r3, [fp, #-5]
}
   26be4:	e1a00003 	mov	r0, r3
   26be8:	e24bd004 	sub	sp, fp, #4
   26bec:	e8bd8800 	pop	{fp, pc}

00026bf0 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
   26bf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   26bf4:	e28db000 	add	fp, sp, #0
   26bf8:	e24dd01c 	sub	sp, sp, #28
   26bfc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
   26c00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26c04:	e5933000 	ldr	r3, [r3]
   26c08:	e50b3010 	str	r3, [fp, #-16]
   26c0c:	e51b3010 	ldr	r3, [fp, #-16]
   26c10:	e50b3008 	str	r3, [fp, #-8]
	if (!tp) return -1;		/* Invalid path name? */
   26c14:	e51b3010 	ldr	r3, [fp, #-16]
   26c18:	e3530000 	cmp	r3, #0
   26c1c:	1a000001 	bne	26c28 <get_ldnumber+0x38>
   26c20:	e3e03000 	mvn	r3, #0
   26c24:	ea00002b 	b	26cd8 <get_ldnumber+0xe8>
	do {					/* Find a colon in the path */
		chr = *tt++;
   26c28:	e51b3008 	ldr	r3, [fp, #-8]
   26c2c:	e2832001 	add	r2, r3, #1
   26c30:	e50b2008 	str	r2, [fp, #-8]
   26c34:	e5d33000 	ldrb	r3, [r3]
   26c38:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	} while (!IsTerminator(chr) && chr != ':');
   26c3c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   26c40:	e3530020 	cmp	r3, #32
   26c44:	9a000002 	bls	26c54 <get_ldnumber+0x64>
   26c48:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   26c4c:	e353003a 	cmp	r3, #58	; 0x3a
   26c50:	1afffff4 	bne	26c28 <get_ldnumber+0x38>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
   26c54:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   26c58:	e353003a 	cmp	r3, #58	; 0x3a
   26c5c:	1a00001c 	bne	26cd4 <get_ldnumber+0xe4>
		i = FF_VOLUMES;
   26c60:	e3a03001 	mov	r3, #1
   26c64:	e50b300c 	str	r3, [fp, #-12]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
   26c68:	e51b3010 	ldr	r3, [fp, #-16]
   26c6c:	e5d33000 	ldrb	r3, [r3]
   26c70:	e353002f 	cmp	r3, #47	; 0x2f
   26c74:	9a00000c 	bls	26cac <get_ldnumber+0xbc>
   26c78:	e51b3010 	ldr	r3, [fp, #-16]
   26c7c:	e5d33000 	ldrb	r3, [r3]
   26c80:	e3530039 	cmp	r3, #57	; 0x39
   26c84:	8a000008 	bhi	26cac <get_ldnumber+0xbc>
   26c88:	e51b3010 	ldr	r3, [fp, #-16]
   26c8c:	e2833002 	add	r3, r3, #2
   26c90:	e51b2008 	ldr	r2, [fp, #-8]
   26c94:	e1520003 	cmp	r2, r3
   26c98:	1a000003 	bne	26cac <get_ldnumber+0xbc>
			i = (int)*tp - '0';	/* Get the logical drive number */
   26c9c:	e51b3010 	ldr	r3, [fp, #-16]
   26ca0:	e5d33000 	ldrb	r3, [r3]
   26ca4:	e2433030 	sub	r3, r3, #48	; 0x30
   26ca8:	e50b300c 	str	r3, [fp, #-12]
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
   26cac:	e51b300c 	ldr	r3, [fp, #-12]
   26cb0:	e3530000 	cmp	r3, #0
   26cb4:	da000001 	ble	26cc0 <get_ldnumber+0xd0>
   26cb8:	e3e03000 	mvn	r3, #0
   26cbc:	ea000005 	b	26cd8 <get_ldnumber+0xe8>
		*path = tt;		/* Snip the drive prefix off */
   26cc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26cc4:	e51b2008 	ldr	r2, [fp, #-8]
   26cc8:	e5832000 	str	r2, [r3]
		return i;		/* Return the found drive number */
   26ccc:	e51b300c 	ldr	r3, [fp, #-12]
   26cd0:	ea000000 	b	26cd8 <get_ldnumber+0xe8>
#endif
	/* No drive prefix */
#if FF_FS_RPATH != 0
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
   26cd4:	e3a03000 	mov	r3, #0
#endif
}
   26cd8:	e1a00003 	mov	r0, r3
   26cdc:	e28bd000 	add	sp, fp, #0
   26ce0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   26ce4:	e12fff1e 	bx	lr

00026ce8 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
   26ce8:	e92d4800 	push	{fp, lr}
   26cec:	e28db004 	add	fp, sp, #4
   26cf0:	e24dd010 	sub	sp, sp, #16
   26cf4:	e50b0010 	str	r0, [fp, #-16]
   26cf8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
   26cfc:	e51b3010 	ldr	r3, [fp, #-16]
   26d00:	e3a02000 	mov	r2, #0
   26d04:	e5c32004 	strb	r2, [r3, #4]
   26d08:	e51b3010 	ldr	r3, [fp, #-16]
   26d0c:	e3e02000 	mvn	r2, #0
   26d10:	e583202c 	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
   26d14:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   26d18:	e51b0010 	ldr	r0, [fp, #-16]
   26d1c:	ebfff852 	bl	24e6c <move_window>
   26d20:	e1a03000 	mov	r3, r0
   26d24:	e3530000 	cmp	r3, #0
   26d28:	0a000001 	beq	26d34 <check_fs+0x4c>
   26d2c:	e3a03004 	mov	r3, #4
   26d30:	ea000078 	b	26f18 <check_fs+0x230>
	sign = ld_word(fs->win + BS_55AA);
   26d34:	e51b3010 	ldr	r3, [fp, #-16]
   26d38:	e2833030 	add	r3, r3, #48	; 0x30
   26d3c:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   26d40:	e2833002 	add	r3, r3, #2
   26d44:	e1a00003 	mov	r0, r3
   26d48:	ebfff778 	bl	24b30 <ld_word>
   26d4c:	e1a03000 	mov	r3, r0
   26d50:	e14b30b6 	strh	r3, [fp, #-6]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
   26d54:	e51b3010 	ldr	r3, [fp, #-16]
   26d58:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
   26d5c:	e54b3007 	strb	r3, [fp, #-7]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
   26d60:	e55b3007 	ldrb	r3, [fp, #-7]
   26d64:	e35300eb 	cmp	r3, #235	; 0xeb
   26d68:	0a000005 	beq	26d84 <check_fs+0x9c>
   26d6c:	e55b3007 	ldrb	r3, [fp, #-7]
   26d70:	e35300e9 	cmp	r3, #233	; 0xe9
   26d74:	0a000002 	beq	26d84 <check_fs+0x9c>
   26d78:	e55b3007 	ldrb	r3, [fp, #-7]
   26d7c:	e35300e8 	cmp	r3, #232	; 0xe8
   26d80:	1a00005d 	bne	26efc <check_fs+0x214>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
   26d84:	e15b30b6 	ldrh	r3, [fp, #-6]
   26d88:	e59f2194 	ldr	r2, [pc, #404]	; 26f24 <check_fs+0x23c>
   26d8c:	e1530002 	cmp	r3, r2
   26d90:	1a00000b 	bne	26dc4 <check_fs+0xdc>
   26d94:	e51b3010 	ldr	r3, [fp, #-16]
   26d98:	e2833030 	add	r3, r3, #48	; 0x30
   26d9c:	e2833052 	add	r3, r3, #82	; 0x52
   26da0:	e3a02008 	mov	r2, #8
   26da4:	e59f117c 	ldr	r1, [pc, #380]	; 26f28 <check_fs+0x240>
   26da8:	e1a00003 	mov	r0, r3
   26dac:	eb0011ec 	bl	2b564 <memcmp>
   26db0:	e1a03000 	mov	r3, r0
   26db4:	e3530000 	cmp	r3, #0
   26db8:	1a000001 	bne	26dc4 <check_fs+0xdc>
			return 0;	/* It is an FAT32 VBR */
   26dbc:	e3a03000 	mov	r3, #0
   26dc0:	ea000054 	b	26f18 <check_fs+0x230>
		}
		/* FAT volumes created in the early MS-DOS era lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
   26dc4:	e51b3010 	ldr	r3, [fp, #-16]
   26dc8:	e2833030 	add	r3, r3, #48	; 0x30
   26dcc:	e283300b 	add	r3, r3, #11
   26dd0:	e1a00003 	mov	r0, r3
   26dd4:	ebfff755 	bl	24b30 <ld_word>
   26dd8:	e1a03000 	mov	r3, r0
   26ddc:	e14b30ba 	strh	r3, [fp, #-10]
		b = fs->win[BPB_SecPerClus];
   26de0:	e51b3010 	ldr	r3, [fp, #-16]
   26de4:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
   26de8:	e54b3007 	strb	r3, [fp, #-7]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   26dec:	e15b20ba 	ldrh	r2, [fp, #-10]
   26df0:	e15b30ba 	ldrh	r3, [fp, #-10]
   26df4:	e2433001 	sub	r3, r3, #1
   26df8:	e0033002 	and	r3, r3, r2
   26dfc:	e3530000 	cmp	r3, #0
   26e00:	1a00003d 	bne	26efc <check_fs+0x214>
   26e04:	e15b30ba 	ldrh	r3, [fp, #-10]
   26e08:	e3530c02 	cmp	r3, #512	; 0x200
   26e0c:	3a00003a 	bcc	26efc <check_fs+0x214>
   26e10:	e15b30ba 	ldrh	r3, [fp, #-10]
   26e14:	e3530c02 	cmp	r3, #512	; 0x200
   26e18:	8a000037 	bhi	26efc <check_fs+0x214>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
   26e1c:	e55b3007 	ldrb	r3, [fp, #-7]
   26e20:	e3530000 	cmp	r3, #0
   26e24:	0a000034 	beq	26efc <check_fs+0x214>
   26e28:	e55b2007 	ldrb	r2, [fp, #-7]
   26e2c:	e55b3007 	ldrb	r3, [fp, #-7]
   26e30:	e2433001 	sub	r3, r3, #1
   26e34:	e0033002 	and	r3, r3, r2
   26e38:	e3530000 	cmp	r3, #0
   26e3c:	1a00002e 	bne	26efc <check_fs+0x214>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of number of reserved sectors (MNBZ) */
   26e40:	e51b3010 	ldr	r3, [fp, #-16]
   26e44:	e2833030 	add	r3, r3, #48	; 0x30
   26e48:	e283300e 	add	r3, r3, #14
   26e4c:	e1a00003 	mov	r0, r3
   26e50:	ebfff736 	bl	24b30 <ld_word>
   26e54:	e1a03000 	mov	r3, r0
   26e58:	e3530000 	cmp	r3, #0
   26e5c:	0a000026 	beq	26efc <check_fs+0x214>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
   26e60:	e51b3010 	ldr	r3, [fp, #-16]
   26e64:	e5d33040 	ldrb	r3, [r3, #64]	; 0x40
   26e68:	e2433001 	sub	r3, r3, #1
   26e6c:	e3530001 	cmp	r3, #1
   26e70:	8a000021 	bhi	26efc <check_fs+0x214>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir size (MNBZ) */
   26e74:	e51b3010 	ldr	r3, [fp, #-16]
   26e78:	e2833030 	add	r3, r3, #48	; 0x30
   26e7c:	e2833011 	add	r3, r3, #17
   26e80:	e1a00003 	mov	r0, r3
   26e84:	ebfff729 	bl	24b30 <ld_word>
   26e88:	e1a03000 	mov	r3, r0
   26e8c:	e3530000 	cmp	r3, #0
   26e90:	0a000019 	beq	26efc <check_fs+0x214>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
   26e94:	e51b3010 	ldr	r3, [fp, #-16]
   26e98:	e2833030 	add	r3, r3, #48	; 0x30
   26e9c:	e2833013 	add	r3, r3, #19
   26ea0:	e1a00003 	mov	r0, r3
   26ea4:	ebfff721 	bl	24b30 <ld_word>
   26ea8:	e1a03000 	mov	r3, r0
   26eac:	e353007f 	cmp	r3, #127	; 0x7f
   26eb0:	8a000007 	bhi	26ed4 <check_fs+0x1ec>
   26eb4:	e51b3010 	ldr	r3, [fp, #-16]
   26eb8:	e2833030 	add	r3, r3, #48	; 0x30
   26ebc:	e2833020 	add	r3, r3, #32
   26ec0:	e1a00003 	mov	r0, r3
   26ec4:	ebfff72f 	bl	24b88 <ld_dword>
   26ec8:	e1a03000 	mov	r3, r0
   26ecc:	e3530801 	cmp	r3, #65536	; 0x10000
   26ed0:	3a000009 	bcc	26efc <check_fs+0x214>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
   26ed4:	e51b3010 	ldr	r3, [fp, #-16]
   26ed8:	e2833030 	add	r3, r3, #48	; 0x30
   26edc:	e2833016 	add	r3, r3, #22
   26ee0:	e1a00003 	mov	r0, r3
   26ee4:	ebfff711 	bl	24b30 <ld_word>
   26ee8:	e1a03000 	mov	r3, r0
   26eec:	e3530000 	cmp	r3, #0
   26ef0:	0a000001 	beq	26efc <check_fs+0x214>
				return 0;	/* It can be presumed an FAT VBR */
   26ef4:	e3a03000 	mov	r3, #0
   26ef8:	ea000006 	b	26f18 <check_fs+0x230>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
   26efc:	e15b30b6 	ldrh	r3, [fp, #-6]
   26f00:	e59f201c 	ldr	r2, [pc, #28]	; 26f24 <check_fs+0x23c>
   26f04:	e1530002 	cmp	r3, r2
   26f08:	1a000001 	bne	26f14 <check_fs+0x22c>
   26f0c:	e3a03002 	mov	r3, #2
   26f10:	ea000000 	b	26f18 <check_fs+0x230>
   26f14:	e3a03003 	mov	r3, #3
}
   26f18:	e1a00003 	mov	r0, r3
   26f1c:	e24bd004 	sub	sp, fp, #4
   26f20:	e8bd8800 	pop	{fp, pc}
   26f24:	0000aa55 	andeq	sl, r0, r5, asr sl
   26f28:	0002c154 	andeq	ip, r2, r4, asr r1

00026f2c <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
   26f2c:	e92d4800 	push	{fp, lr}
   26f30:	e28db004 	add	fp, sp, #4
   26f34:	e24dd020 	sub	sp, sp, #32
   26f38:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   26f3c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
   26f40:	e3a01000 	mov	r1, #0
   26f44:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   26f48:	ebffff66 	bl	26ce8 <check_fs>
   26f4c:	e50b000c 	str	r0, [fp, #-12]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
   26f50:	e51b300c 	ldr	r3, [fp, #-12]
   26f54:	e3530002 	cmp	r3, #2
   26f58:	0a000007 	beq	26f7c <find_volume+0x50>
   26f5c:	e51b300c 	ldr	r3, [fp, #-12]
   26f60:	e3530002 	cmp	r3, #2
   26f64:	8a000002 	bhi	26f74 <find_volume+0x48>
   26f68:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   26f6c:	e3530000 	cmp	r3, #0
   26f70:	1a000001 	bne	26f7c <find_volume+0x50>
   26f74:	e51b300c 	ldr	r3, [fp, #-12]
   26f78:	ea00003f 	b	2707c <find_volume+0x150>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   26f7c:	e3a03000 	mov	r3, #0
   26f80:	e50b3008 	str	r3, [fp, #-8]
   26f84:	ea000011 	b	26fd0 <find_volume+0xa4>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
   26f88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26f8c:	e2832030 	add	r2, r3, #48	; 0x30
   26f90:	e51b3008 	ldr	r3, [fp, #-8]
   26f94:	e1a03203 	lsl	r3, r3, #4
   26f98:	e2833f71 	add	r3, r3, #452	; 0x1c4
   26f9c:	e2833002 	add	r3, r3, #2
   26fa0:	e0823003 	add	r3, r2, r3
   26fa4:	e1a00003 	mov	r0, r3
   26fa8:	ebfff6f6 	bl	24b88 <ld_dword>
   26fac:	e1a02000 	mov	r2, r0
   26fb0:	e51b3008 	ldr	r3, [fp, #-8]
   26fb4:	e1a03103 	lsl	r3, r3, #2
   26fb8:	e2433004 	sub	r3, r3, #4
   26fbc:	e083300b 	add	r3, r3, fp
   26fc0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   26fc4:	e51b3008 	ldr	r3, [fp, #-8]
   26fc8:	e2833001 	add	r3, r3, #1
   26fcc:	e50b3008 	str	r3, [fp, #-8]
   26fd0:	e51b3008 	ldr	r3, [fp, #-8]
   26fd4:	e3530003 	cmp	r3, #3
   26fd8:	9affffea 	bls	26f88 <find_volume+0x5c>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
   26fdc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   26fe0:	e3530000 	cmp	r3, #0
   26fe4:	0a000002 	beq	26ff4 <find_volume+0xc8>
   26fe8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   26fec:	e2433001 	sub	r3, r3, #1
   26ff0:	ea000000 	b	26ff8 <find_volume+0xcc>
   26ff4:	e3a03000 	mov	r3, #0
   26ff8:	e50b3008 	str	r3, [fp, #-8]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   26ffc:	e51b3008 	ldr	r3, [fp, #-8]
   27000:	e1a03103 	lsl	r3, r3, #2
   27004:	e2433004 	sub	r3, r3, #4
   27008:	e083300b 	add	r3, r3, fp
   2700c:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
   27010:	e3530000 	cmp	r3, #0
   27014:	0a000009 	beq	27040 <find_volume+0x114>
   27018:	e51b3008 	ldr	r3, [fp, #-8]
   2701c:	e1a03103 	lsl	r3, r3, #2
   27020:	e2433004 	sub	r3, r3, #4
   27024:	e083300b 	add	r3, r3, fp
   27028:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
   2702c:	e1a01003 	mov	r1, r3
   27030:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   27034:	ebffff2b 	bl	26ce8 <check_fs>
   27038:	e1a03000 	mov	r3, r0
   2703c:	ea000000 	b	27044 <find_volume+0x118>
   27040:	e3a03003 	mov	r3, #3
   27044:	e50b300c 	str	r3, [fp, #-12]
	} while (part == 0 && fmt >= 2 && ++i < 4);
   27048:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2704c:	e3530000 	cmp	r3, #0
   27050:	1a000008 	bne	27078 <find_volume+0x14c>
   27054:	e51b300c 	ldr	r3, [fp, #-12]
   27058:	e3530001 	cmp	r3, #1
   2705c:	9a000005 	bls	27078 <find_volume+0x14c>
   27060:	e51b3008 	ldr	r3, [fp, #-8]
   27064:	e2833001 	add	r3, r3, #1
   27068:	e50b3008 	str	r3, [fp, #-8]
   2706c:	e51b3008 	ldr	r3, [fp, #-8]
   27070:	e3530003 	cmp	r3, #3
   27074:	9affffe0 	bls	26ffc <find_volume+0xd0>
	return fmt;
   27078:	e51b300c 	ldr	r3, [fp, #-12]
}
   2707c:	e1a00003 	mov	r0, r3
   27080:	e24bd004 	sub	sp, fp, #4
   27084:	e8bd8800 	pop	{fp, pc}

00027088 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
   27088:	e92d4800 	push	{fp, lr}
   2708c:	e28db004 	add	fp, sp, #4
   27090:	e24dd040 	sub	sp, sp, #64	; 0x40
   27094:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   27098:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
   2709c:	e1a03002 	mov	r3, r2
   270a0:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
   270a4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   270a8:	e3a02000 	mov	r2, #0
   270ac:	e5832000 	str	r2, [r3]
	vol = get_ldnumber(path);
   270b0:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   270b4:	ebfffecd 	bl	26bf0 <get_ldnumber>
   270b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	if (vol < 0) return FR_INVALID_DRIVE;
   270bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   270c0:	e3530000 	cmp	r3, #0
   270c4:	aa000001 	bge	270d0 <mount_volume+0x48>
   270c8:	e3a0300b 	mov	r3, #11
   270cc:	ea0001ab 	b	27780 <mount_volume+0x6f8>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
   270d0:	e59f26b4 	ldr	r2, [pc, #1716]	; 2778c <mount_volume+0x704>
   270d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   270d8:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   270dc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   270e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   270e4:	e3530000 	cmp	r3, #0
   270e8:	1a000001 	bne	270f4 <mount_volume+0x6c>
   270ec:	e3a0300c 	mov	r3, #12
   270f0:	ea0001a2 	b	27780 <mount_volume+0x6f8>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
   270f4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   270f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   270fc:	e5832000 	str	r2, [r3]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
   27100:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
   27104:	e3c33001 	bic	r3, r3, #1
   27108:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
   2710c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27110:	e5d33000 	ldrb	r3, [r3]
   27114:	e3530000 	cmp	r3, #0
   27118:	0a000014 	beq	27170 <mount_volume+0xe8>
		stat = disk_status(fs->pdrv);
   2711c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27120:	e5d33001 	ldrb	r3, [r3, #1]
   27124:	e1a00003 	mov	r0, r3
   27128:	eb000fe2 	bl	2b0b8 <disk_status>
   2712c:	e1a03000 	mov	r3, r0
   27130:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
   27134:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   27138:	e2033001 	and	r3, r3, #1
   2713c:	e3530000 	cmp	r3, #0
   27140:	1a00000a 	bne	27170 <mount_volume+0xe8>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
   27144:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
   27148:	e3530000 	cmp	r3, #0
   2714c:	0a000005 	beq	27168 <mount_volume+0xe0>
   27150:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   27154:	e2033004 	and	r3, r3, #4
   27158:	e3530000 	cmp	r3, #0
   2715c:	0a000001 	beq	27168 <mount_volume+0xe0>
				return FR_WRITE_PROTECTED;
   27160:	e3a0300a 	mov	r3, #10
   27164:	ea000185 	b	27780 <mount_volume+0x6f8>
			}
			return FR_OK;				/* The filesystem object is already valid */
   27168:	e3a03000 	mov	r3, #0
   2716c:	ea000183 	b	27780 <mount_volume+0x6f8>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
   27170:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27174:	e3a02000 	mov	r2, #0
   27178:	e5c32000 	strb	r2, [r3]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
   2717c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27180:	e5d33001 	ldrb	r3, [r3, #1]
   27184:	e1a00003 	mov	r0, r3
   27188:	eb000fdb 	bl	2b0fc <disk_initialize>
   2718c:	e1a03000 	mov	r3, r0
   27190:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
   27194:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   27198:	e2033001 	and	r3, r3, #1
   2719c:	e3530000 	cmp	r3, #0
   271a0:	0a000001 	beq	271ac <mount_volume+0x124>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
   271a4:	e3a03003 	mov	r3, #3
   271a8:	ea000174 	b	27780 <mount_volume+0x6f8>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
   271ac:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
   271b0:	e3530000 	cmp	r3, #0
   271b4:	0a000005 	beq	271d0 <mount_volume+0x148>
   271b8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   271bc:	e2033004 	and	r3, r3, #4
   271c0:	e3530000 	cmp	r3, #0
   271c4:	0a000001 	beq	271d0 <mount_volume+0x148>
		return FR_WRITE_PROTECTED;
   271c8:	e3a0300a 	mov	r3, #10
   271cc:	ea00016b 	b	27780 <mount_volume+0x6f8>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
   271d0:	e3a01000 	mov	r1, #0
   271d4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   271d8:	ebffff53 	bl	26f2c <find_volume>
   271dc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
   271e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   271e4:	e3530004 	cmp	r3, #4
   271e8:	1a000001 	bne	271f4 <mount_volume+0x16c>
   271ec:	e3a03001 	mov	r3, #1
   271f0:	ea000162 	b	27780 <mount_volume+0x6f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
   271f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   271f8:	e3530001 	cmp	r3, #1
   271fc:	9a000001 	bls	27208 <mount_volume+0x180>
   27200:	e3a0300d 	mov	r3, #13
   27204:	ea00015d 	b	27780 <mount_volume+0x6f8>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
   27208:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2720c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   27210:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
   27214:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27218:	e2833030 	add	r3, r3, #48	; 0x30
   2721c:	e283300b 	add	r3, r3, #11
   27220:	e1a00003 	mov	r0, r3
   27224:	ebfff641 	bl	24b30 <ld_word>
   27228:	e1a03000 	mov	r3, r0
   2722c:	e3530c02 	cmp	r3, #512	; 0x200
   27230:	0a000001 	beq	2723c <mount_volume+0x1b4>
   27234:	e3a0300d 	mov	r3, #13
   27238:	ea000150 	b	27780 <mount_volume+0x6f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
   2723c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27240:	e2833030 	add	r3, r3, #48	; 0x30
   27244:	e2833016 	add	r3, r3, #22
   27248:	e1a00003 	mov	r0, r3
   2724c:	ebfff637 	bl	24b30 <ld_word>
   27250:	e1a03000 	mov	r3, r0
   27254:	e50b300c 	str	r3, [fp, #-12]
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
   27258:	e51b300c 	ldr	r3, [fp, #-12]
   2725c:	e3530000 	cmp	r3, #0
   27260:	1a000005 	bne	2727c <mount_volume+0x1f4>
   27264:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27268:	e2833030 	add	r3, r3, #48	; 0x30
   2726c:	e2833024 	add	r3, r3, #36	; 0x24
   27270:	e1a00003 	mov	r0, r3
   27274:	ebfff643 	bl	24b88 <ld_dword>
   27278:	e50b000c 	str	r0, [fp, #-12]
		fs->fsize = fasize;
   2727c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27280:	e51b200c 	ldr	r2, [fp, #-12]
   27284:	e5832018 	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
   27288:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2728c:	e5d32040 	ldrb	r2, [r3, #64]	; 0x40
   27290:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27294:	e5c32003 	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   27298:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2729c:	e5d33003 	ldrb	r3, [r3, #3]
   272a0:	e3530001 	cmp	r3, #1
   272a4:	0a000005 	beq	272c0 <mount_volume+0x238>
   272a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272ac:	e5d33003 	ldrb	r3, [r3, #3]
   272b0:	e3530002 	cmp	r3, #2
   272b4:	0a000001 	beq	272c0 <mount_volume+0x238>
   272b8:	e3a0300d 	mov	r3, #13
   272bc:	ea00012f 	b	27780 <mount_volume+0x6f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
   272c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272c4:	e5d33003 	ldrb	r3, [r3, #3]
   272c8:	e1a02003 	mov	r2, r3
   272cc:	e51b300c 	ldr	r3, [fp, #-12]
   272d0:	e0030392 	mul	r3, r2, r3
   272d4:	e50b300c 	str	r3, [fp, #-12]

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
   272d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272dc:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
   272e0:	e6ff2073 	uxth	r2, r3
   272e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272e8:	e1c320ba 	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   272ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272f0:	e1d330ba 	ldrh	r3, [r3, #10]
   272f4:	e3530000 	cmp	r3, #0
   272f8:	0a000008 	beq	27320 <mount_volume+0x298>
   272fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27300:	e1d330ba 	ldrh	r3, [r3, #10]
   27304:	e1a02003 	mov	r2, r3
   27308:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2730c:	e1d330ba 	ldrh	r3, [r3, #10]
   27310:	e2433001 	sub	r3, r3, #1
   27314:	e0033002 	and	r3, r3, r2
   27318:	e3530000 	cmp	r3, #0
   2731c:	0a000001 	beq	27328 <mount_volume+0x2a0>
   27320:	e3a0300d 	mov	r3, #13
   27324:	ea000115 	b	27780 <mount_volume+0x6f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
   27328:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2732c:	e2833030 	add	r3, r3, #48	; 0x30
   27330:	e2833011 	add	r3, r3, #17
   27334:	e1a00003 	mov	r0, r3
   27338:	ebfff5fc 	bl	24b30 <ld_word>
   2733c:	e1a03000 	mov	r3, r0
   27340:	e1a02003 	mov	r2, r3
   27344:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27348:	e1c320b8 	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   2734c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27350:	e1d330b8 	ldrh	r3, [r3, #8]
   27354:	e203300f 	and	r3, r3, #15
   27358:	e6ff3073 	uxth	r3, r3
   2735c:	e3530000 	cmp	r3, #0
   27360:	0a000001 	beq	2736c <mount_volume+0x2e4>
   27364:	e3a0300d 	mov	r3, #13
   27368:	ea000104 	b	27780 <mount_volume+0x6f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
   2736c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27370:	e2833030 	add	r3, r3, #48	; 0x30
   27374:	e2833013 	add	r3, r3, #19
   27378:	e1a00003 	mov	r0, r3
   2737c:	ebfff5eb 	bl	24b30 <ld_word>
   27380:	e1a03000 	mov	r3, r0
   27384:	e50b3008 	str	r3, [fp, #-8]
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
   27388:	e51b3008 	ldr	r3, [fp, #-8]
   2738c:	e3530000 	cmp	r3, #0
   27390:	1a000005 	bne	273ac <mount_volume+0x324>
   27394:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27398:	e2833030 	add	r3, r3, #48	; 0x30
   2739c:	e2833020 	add	r3, r3, #32
   273a0:	e1a00003 	mov	r0, r3
   273a4:	ebfff5f7 	bl	24b88 <ld_dword>
   273a8:	e50b0008 	str	r0, [fp, #-8]

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
   273ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   273b0:	e2833030 	add	r3, r3, #48	; 0x30
   273b4:	e283300e 	add	r3, r3, #14
   273b8:	e1a00003 	mov	r0, r3
   273bc:	ebfff5db 	bl	24b30 <ld_word>
   273c0:	e1a03000 	mov	r3, r0
   273c4:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
   273c8:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
   273cc:	e3530000 	cmp	r3, #0
   273d0:	1a000001 	bne	273dc <mount_volume+0x354>
   273d4:	e3a0300d 	mov	r3, #13
   273d8:	ea0000e8 	b	27780 <mount_volume+0x6f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
   273dc:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
   273e0:	e51b300c 	ldr	r3, [fp, #-12]
   273e4:	e0823003 	add	r3, r2, r3
   273e8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   273ec:	e1d220b8 	ldrh	r2, [r2, #8]
   273f0:	e1a02222 	lsr	r2, r2, #4
   273f4:	e6ff2072 	uxth	r2, r2
   273f8:	e0833002 	add	r3, r3, r2
   273fc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
   27400:	e51b2008 	ldr	r2, [fp, #-8]
   27404:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   27408:	e1520003 	cmp	r2, r3
   2740c:	2a000001 	bcs	27418 <mount_volume+0x390>
   27410:	e3a0300d 	mov	r3, #13
   27414:	ea0000d9 	b	27780 <mount_volume+0x6f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
   27418:	e51b2008 	ldr	r2, [fp, #-8]
   2741c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   27420:	e0422003 	sub	r2, r2, r3
   27424:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27428:	e1d330ba 	ldrh	r3, [r3, #10]
   2742c:	e1a01003 	mov	r1, r3
   27430:	e1a00002 	mov	r0, r2
   27434:	eb001004 	bl	2b44c <__udivsi3>
   27438:	e1a03000 	mov	r3, r0
   2743c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   27440:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27444:	e3530000 	cmp	r3, #0
   27448:	1a000001 	bne	27454 <mount_volume+0x3cc>
   2744c:	e3a0300d 	mov	r3, #13
   27450:	ea0000ca 	b	27780 <mount_volume+0x6f8>
		fmt = 0;
   27454:	e3a03000 	mov	r3, #0
   27458:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
   2745c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27460:	e37302bf 	cmn	r3, #-268435445	; 0xf000000b
   27464:	8a000001 	bhi	27470 <mount_volume+0x3e8>
   27468:	e3a03003 	mov	r3, #3
   2746c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
   27470:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27474:	e59f2314 	ldr	r2, [pc, #788]	; 27790 <mount_volume+0x708>
   27478:	e1530002 	cmp	r3, r2
   2747c:	8a000001 	bhi	27488 <mount_volume+0x400>
   27480:	e3a03002 	mov	r3, #2
   27484:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   27488:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2748c:	e59f2300 	ldr	r2, [pc, #768]	; 27794 <mount_volume+0x70c>
   27490:	e1530002 	cmp	r3, r2
   27494:	8a000001 	bhi	274a0 <mount_volume+0x418>
   27498:	e3a03001 	mov	r3, #1
   2749c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if (fmt == 0) return FR_NO_FILESYSTEM;
   274a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   274a4:	e3530000 	cmp	r3, #0
   274a8:	1a000001 	bne	274b4 <mount_volume+0x42c>
   274ac:	e3a0300d 	mov	r3, #13
   274b0:	ea0000b2 	b	27780 <mount_volume+0x6f8>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   274b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   274b8:	e2832002 	add	r2, r3, #2
   274bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   274c0:	e5832014 	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
   274c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   274c8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   274cc:	e583201c 	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   274d0:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
   274d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   274d8:	e0822003 	add	r2, r2, r3
   274dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   274e0:	e5832020 	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
   274e4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   274e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   274ec:	e0822003 	add	r2, r2, r3
   274f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   274f4:	e5832028 	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
   274f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   274fc:	e3530003 	cmp	r3, #3
   27500:	1a00001c 	bne	27578 <mount_volume+0x4f0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   27504:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27508:	e2833030 	add	r3, r3, #48	; 0x30
   2750c:	e283302a 	add	r3, r3, #42	; 0x2a
   27510:	e1a00003 	mov	r0, r3
   27514:	ebfff585 	bl	24b30 <ld_word>
   27518:	e1a03000 	mov	r3, r0
   2751c:	e3530000 	cmp	r3, #0
   27520:	0a000001 	beq	2752c <mount_volume+0x4a4>
   27524:	e3a0300d 	mov	r3, #13
   27528:	ea000094 	b	27780 <mount_volume+0x6f8>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
   2752c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27530:	e1d330b8 	ldrh	r3, [r3, #8]
   27534:	e3530000 	cmp	r3, #0
   27538:	0a000001 	beq	27544 <mount_volume+0x4bc>
   2753c:	e3a0300d 	mov	r3, #13
   27540:	ea00008e 	b	27780 <mount_volume+0x6f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
   27544:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27548:	e2833030 	add	r3, r3, #48	; 0x30
   2754c:	e283302c 	add	r3, r3, #44	; 0x2c
   27550:	e1a00003 	mov	r0, r3
   27554:	ebfff58b 	bl	24b88 <ld_dword>
   27558:	e1a02000 	mov	r2, r0
   2755c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27560:	e5832024 	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
   27564:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27568:	e5933014 	ldr	r3, [r3, #20]
   2756c:	e1a03103 	lsl	r3, r3, #2
   27570:	e50b3010 	str	r3, [fp, #-16]
   27574:	ea00001d 	b	275f0 <mount_volume+0x568>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   27578:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2757c:	e1d330b8 	ldrh	r3, [r3, #8]
   27580:	e3530000 	cmp	r3, #0
   27584:	1a000001 	bne	27590 <mount_volume+0x508>
   27588:	e3a0300d 	mov	r3, #13
   2758c:	ea00007b 	b	27780 <mount_volume+0x6f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
   27590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27594:	e5932020 	ldr	r2, [r3, #32]
   27598:	e51b300c 	ldr	r3, [fp, #-12]
   2759c:	e0822003 	add	r2, r2, r3
   275a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   275a4:	e5832024 	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   275a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   275ac:	e3530002 	cmp	r3, #2
   275b0:	1a000003 	bne	275c4 <mount_volume+0x53c>
   275b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   275b8:	e5933014 	ldr	r3, [r3, #20]
   275bc:	e1a03083 	lsl	r3, r3, #1
   275c0:	ea000009 	b	275ec <mount_volume+0x564>
   275c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   275c8:	e5932014 	ldr	r2, [r3, #20]
   275cc:	e1a03002 	mov	r3, r2
   275d0:	e1a03083 	lsl	r3, r3, #1
   275d4:	e0833002 	add	r3, r3, r2
   275d8:	e1a020a3 	lsr	r2, r3, #1
   275dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   275e0:	e5933014 	ldr	r3, [r3, #20]
   275e4:	e2033001 	and	r3, r3, #1
   275e8:	e0823003 	add	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
   275ec:	e50b3010 	str	r3, [fp, #-16]
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   275f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   275f4:	e5932018 	ldr	r2, [r3, #24]
   275f8:	e51b3010 	ldr	r3, [fp, #-16]
   275fc:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   27600:	e2833003 	add	r3, r3, #3
   27604:	e1a034a3 	lsr	r3, r3, #9
   27608:	e1520003 	cmp	r2, r3
   2760c:	2a000001 	bcs	27618 <mount_volume+0x590>
   27610:	e3a0300d 	mov	r3, #13
   27614:	ea000059 	b	27780 <mount_volume+0x6f8>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
   27618:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2761c:	e3e02000 	mvn	r2, #0
   27620:	e5832010 	str	r2, [r3, #16]
   27624:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27628:	e5932010 	ldr	r2, [r3, #16]
   2762c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27630:	e583200c 	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
   27634:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27638:	e3e0207f 	mvn	r2, #127	; 0x7f
   2763c:	e5c32005 	strb	r2, [r3, #5]
		if (fmt == FS_FAT32
   27640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27644:	e3530003 	cmp	r3, #3
   27648:	1a00003d 	bne	27744 <mount_volume+0x6bc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
   2764c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27650:	e2833030 	add	r3, r3, #48	; 0x30
   27654:	e2833030 	add	r3, r3, #48	; 0x30
   27658:	e1a00003 	mov	r0, r3
   2765c:	ebfff533 	bl	24b30 <ld_word>
   27660:	e1a03000 	mov	r3, r0
   27664:	e3530001 	cmp	r3, #1
   27668:	1a000035 	bne	27744 <mount_volume+0x6bc>
			&& move_window(fs, bsect + 1) == FR_OK)
   2766c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   27670:	e2833001 	add	r3, r3, #1
   27674:	e1a01003 	mov	r1, r3
   27678:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   2767c:	ebfff5fa 	bl	24e6c <move_window>
   27680:	e1a03000 	mov	r3, r0
   27684:	e3530000 	cmp	r3, #0
   27688:	1a00002d 	bne	27744 <mount_volume+0x6bc>
		{
			fs->fsi_flag = 0;
   2768c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27690:	e3a02000 	mov	r2, #0
   27694:	e5c32005 	strb	r2, [r3, #5]
			if (   ld_dword(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
   27698:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2769c:	e2833030 	add	r3, r3, #48	; 0x30
   276a0:	e1a00003 	mov	r0, r3
   276a4:	ebfff537 	bl	24b88 <ld_dword>
   276a8:	e1a03000 	mov	r3, r0
   276ac:	e59f20e4 	ldr	r2, [pc, #228]	; 27798 <mount_volume+0x710>
   276b0:	e1530002 	cmp	r3, r2
   276b4:	1a000022 	bne	27744 <mount_volume+0x6bc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272
   276b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   276bc:	e2833030 	add	r3, r3, #48	; 0x30
   276c0:	e2833f79 	add	r3, r3, #484	; 0x1e4
   276c4:	e1a00003 	mov	r0, r3
   276c8:	ebfff52e 	bl	24b88 <ld_dword>
   276cc:	e1a03000 	mov	r3, r0
   276d0:	e59f20c4 	ldr	r2, [pc, #196]	; 2779c <mount_volume+0x714>
   276d4:	e1530002 	cmp	r3, r2
   276d8:	1a000019 	bne	27744 <mount_volume+0x6bc>
				&& ld_dword(fs->win + FSI_TrailSig) == 0xAA550000)
   276dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   276e0:	e2833030 	add	r3, r3, #48	; 0x30
   276e4:	e2833e1f 	add	r3, r3, #496	; 0x1f0
   276e8:	e2833002 	add	r3, r3, #2
   276ec:	e1a00003 	mov	r0, r3
   276f0:	ebfff524 	bl	24b88 <ld_dword>
   276f4:	e1a03000 	mov	r3, r0
   276f8:	e59f20a0 	ldr	r2, [pc, #160]	; 277a0 <mount_volume+0x718>
   276fc:	e1530002 	cmp	r3, r2
   27700:	1a00000f 	bne	27744 <mount_volume+0x6bc>
			{
#if (FF_FS_NOFSINFO & 1) == 0	/* Get free cluster count if trust it */
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
   27704:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27708:	e2833030 	add	r3, r3, #48	; 0x30
   2770c:	e2833f7a 	add	r3, r3, #488	; 0x1e8
   27710:	e1a00003 	mov	r0, r3
   27714:	ebfff51b 	bl	24b88 <ld_dword>
   27718:	e1a02000 	mov	r2, r0
   2771c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27720:	e5832010 	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0	/* Get next free cluster if rtust it */
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
   27724:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27728:	e2833030 	add	r3, r3, #48	; 0x30
   2772c:	e2833f7b 	add	r3, r3, #492	; 0x1ec
   27730:	e1a00003 	mov	r0, r3
   27734:	ebfff513 	bl	24b88 <ld_dword>
   27738:	e1a02000 	mov	r2, r0
   2773c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27740:	e583200c 	str	r2, [r3, #12]
			}
		}
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
   27744:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27748:	e6ef2073 	uxtb	r2, r3
   2774c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27750:	e5c32000 	strb	r2, [r3]
	fs->id = ++Fsid;		/* Volume mount ID */
   27754:	e59f3048 	ldr	r3, [pc, #72]	; 277a4 <mount_volume+0x71c>
   27758:	e1d330b0 	ldrh	r3, [r3]
   2775c:	e2833001 	add	r3, r3, #1
   27760:	e6ff3073 	uxth	r3, r3
   27764:	e59f2038 	ldr	r2, [pc, #56]	; 277a4 <mount_volume+0x71c>
   27768:	e1c230b0 	strh	r3, [r2]
   2776c:	e59f3030 	ldr	r3, [pc, #48]	; 277a4 <mount_volume+0x71c>
   27770:	e1d320b0 	ldrh	r2, [r3]
   27774:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27778:	e1c320b6 	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
   2777c:	e3a03000 	mov	r3, #0
}
   27780:	e1a00003 	mov	r0, r3
   27784:	e24bd004 	sub	sp, fp, #4
   27788:	e8bd8800 	pop	{fp, pc}
   2778c:	0002d650 	andeq	sp, r2, r0, asr r6
   27790:	0000fff5 	strdeq	pc, [r0], -r5
   27794:	00000ff5 	strdeq	r0, [r0], -r5
   27798:	41615252 	cmnmi	r1, r2, asr r2
   2779c:	61417272 	hvcvs	5922	; 0x1722
   277a0:	aa550000 	bge	15677a8 <__bss_end+0x143a148>
   277a4:	0002d654 	andeq	sp, r2, r4, asr r6

000277a8 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
   277a8:	e92d4800 	push	{fp, lr}
   277ac:	e28db004 	add	fp, sp, #4
   277b0:	e24dd010 	sub	sp, sp, #16
   277b4:	e50b0010 	str	r0, [fp, #-16]
   277b8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	FRESULT res = FR_INVALID_OBJECT;
   277bc:	e3a03009 	mov	r3, #9
   277c0:	e54b3005 	strb	r3, [fp, #-5]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   277c4:	e51b3010 	ldr	r3, [fp, #-16]
   277c8:	e3530000 	cmp	r3, #0
   277cc:	0a00001a 	beq	2783c <validate+0x94>
   277d0:	e51b3010 	ldr	r3, [fp, #-16]
   277d4:	e5933000 	ldr	r3, [r3]
   277d8:	e3530000 	cmp	r3, #0
   277dc:	0a000016 	beq	2783c <validate+0x94>
   277e0:	e51b3010 	ldr	r3, [fp, #-16]
   277e4:	e5933000 	ldr	r3, [r3]
   277e8:	e5d33000 	ldrb	r3, [r3]
   277ec:	e3530000 	cmp	r3, #0
   277f0:	0a000011 	beq	2783c <validate+0x94>
   277f4:	e51b3010 	ldr	r3, [fp, #-16]
   277f8:	e1d320b4 	ldrh	r2, [r3, #4]
   277fc:	e51b3010 	ldr	r3, [fp, #-16]
   27800:	e5933000 	ldr	r3, [r3]
   27804:	e1d330b6 	ldrh	r3, [r3, #6]
   27808:	e1520003 	cmp	r2, r3
   2780c:	1a00000a 	bne	2783c <validate+0x94>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
   27810:	e51b3010 	ldr	r3, [fp, #-16]
   27814:	e5933000 	ldr	r3, [r3]
   27818:	e5d33001 	ldrb	r3, [r3, #1]
   2781c:	e1a00003 	mov	r0, r3
   27820:	eb000e24 	bl	2b0b8 <disk_status>
   27824:	e1a03000 	mov	r3, r0
   27828:	e2033001 	and	r3, r3, #1
   2782c:	e3530000 	cmp	r3, #0
   27830:	1a000001 	bne	2783c <validate+0x94>
			res = FR_OK;
   27834:	e3a03000 	mov	r3, #0
   27838:	e54b3005 	strb	r3, [fp, #-5]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
   2783c:	e55b3005 	ldrb	r3, [fp, #-5]
   27840:	e3530000 	cmp	r3, #0
   27844:	1a000002 	bne	27854 <validate+0xac>
   27848:	e51b3010 	ldr	r3, [fp, #-16]
   2784c:	e5933000 	ldr	r3, [r3]
   27850:	ea000000 	b	27858 <validate+0xb0>
   27854:	e3a03000 	mov	r3, #0
   27858:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2785c:	e5823000 	str	r3, [r2]
	return res;
   27860:	e55b3005 	ldrb	r3, [fp, #-5]
}
   27864:	e1a00003 	mov	r0, r3
   27868:	e24bd004 	sub	sp, fp, #4
   2786c:	e8bd8800 	pop	{fp, pc}

00027870 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
   27870:	e92d4800 	push	{fp, lr}
   27874:	e28db004 	add	fp, sp, #4
   27878:	e24dd020 	sub	sp, sp, #32
   2787c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   27880:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   27884:	e1a03002 	mov	r3, r2
   27888:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
   2788c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27890:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
   27894:	e24b3014 	sub	r3, fp, #20
   27898:	e1a00003 	mov	r0, r3
   2789c:	ebfffcd3 	bl	26bf0 <get_ldnumber>
   278a0:	e50b0008 	str	r0, [fp, #-8]
	if (vol < 0) return FR_INVALID_DRIVE;
   278a4:	e51b3008 	ldr	r3, [fp, #-8]
   278a8:	e3530000 	cmp	r3, #0
   278ac:	aa000001 	bge	278b8 <f_mount+0x48>
   278b0:	e3a0300b 	mov	r3, #11
   278b4:	ea000028 	b	2795c <f_mount+0xec>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
   278b8:	e59f20a8 	ldr	r2, [pc, #168]	; 27968 <f_mount+0xf8>
   278bc:	e51b3008 	ldr	r3, [fp, #-8]
   278c0:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   278c4:	e50b300c 	str	r3, [fp, #-12]

	if (cfs) {					/* Unregister current filesystem object if registered */
   278c8:	e51b300c 	ldr	r3, [fp, #-12]
   278cc:	e3530000 	cmp	r3, #0
   278d0:	0a000006 	beq	278f0 <f_mount+0x80>
		FatFs[vol] = 0;
   278d4:	e59f208c 	ldr	r2, [pc, #140]	; 27968 <f_mount+0xf8>
   278d8:	e51b3008 	ldr	r3, [fp, #-8]
   278dc:	e3a01000 	mov	r1, #0
   278e0:	e7821103 	str	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
   278e4:	e51b300c 	ldr	r3, [fp, #-12]
   278e8:	e3a02000 	mov	r2, #0
   278ec:	e5c32000 	strb	r2, [r3]
	}

	if (fs) {					/* Register new filesystem object */
   278f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   278f4:	e3530000 	cmp	r3, #0
   278f8:	0a00000a 	beq	27928 <f_mount+0xb8>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
   278fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27900:	e51b2008 	ldr	r2, [fp, #-8]
   27904:	e6ef2072 	uxtb	r2, r2
   27908:	e5c32001 	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
   2790c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27910:	e3a02000 	mov	r2, #0
   27914:	e5c32000 	strb	r2, [r3]
		FatFs[vol] = fs;		/* Register new fs object */
   27918:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2791c:	e59f1044 	ldr	r1, [pc, #68]	; 27968 <f_mount+0xf8>
   27920:	e51b3008 	ldr	r3, [fp, #-8]
   27924:	e7812103 	str	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
   27928:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   2792c:	e3530000 	cmp	r3, #0
   27930:	1a000001 	bne	2793c <f_mount+0xcc>
   27934:	e3a03000 	mov	r3, #0
   27938:	ea000007 	b	2795c <f_mount+0xec>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
   2793c:	e24b1018 	sub	r1, fp, #24
   27940:	e24b301c 	sub	r3, fp, #28
   27944:	e3a02000 	mov	r2, #0
   27948:	e1a00003 	mov	r0, r3
   2794c:	ebfffdcd 	bl	27088 <mount_volume>
   27950:	e1a03000 	mov	r3, r0
   27954:	e54b300d 	strb	r3, [fp, #-13]
	LEAVE_FF(fs, res);
   27958:	e55b300d 	ldrb	r3, [fp, #-13]
}
   2795c:	e1a00003 	mov	r0, r3
   27960:	e24bd004 	sub	sp, fp, #4
   27964:	e8bd8800 	pop	{fp, pc}
   27968:	0002d650 	andeq	sp, r2, r0, asr r6

0002796c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
   2796c:	e92d4800 	push	{fp, lr}
   27970:	e28db004 	add	fp, sp, #4
   27974:	e24dd060 	sub	sp, sp, #96	; 0x60
   27978:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
   2797c:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
   27980:	e1a03002 	mov	r3, r2
   27984:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
   27988:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2798c:	e3530000 	cmp	r3, #0
   27990:	1a000001 	bne	2799c <f_open+0x30>
   27994:	e3a03009 	mov	r3, #9
   27998:	ea000134 	b	27e70 <f_open+0x504>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
   2799c:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   279a0:	e203303f 	and	r3, r3, #63	; 0x3f
   279a4:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
	res = mount_volume(&path, &fs, mode);
   279a8:	e55b205d 	ldrb	r2, [fp, #-93]	; 0xffffffa3
   279ac:	e24b1050 	sub	r1, fp, #80	; 0x50
   279b0:	e24b305c 	sub	r3, fp, #92	; 0x5c
   279b4:	e1a00003 	mov	r0, r3
   279b8:	ebfffdb2 	bl	27088 <mount_volume>
   279bc:	e1a03000 	mov	r3, r0
   279c0:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   279c4:	e55b3005 	ldrb	r3, [fp, #-5]
   279c8:	e3530000 	cmp	r3, #0
   279cc:	1a000120 	bne	27e54 <f_open+0x4e8>
		dj.obj.fs = fs;
   279d0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   279d4:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
   279d8:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
   279dc:	e24b304c 	sub	r3, fp, #76	; 0x4c
   279e0:	e1a01002 	mov	r1, r2
   279e4:	e1a00003 	mov	r0, r3
   279e8:	ebfffc1c 	bl	26a60 <follow_path>
   279ec:	e1a03000 	mov	r3, r0
   279f0:	e54b3005 	strb	r3, [fp, #-5]
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
   279f4:	e55b3005 	ldrb	r3, [fp, #-5]
   279f8:	e3530000 	cmp	r3, #0
   279fc:	1a000005 	bne	27a18 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
   27a00:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   27a04:	e6af3073 	sxtb	r3, r3
   27a08:	e3530000 	cmp	r3, #0
   27a0c:	aa000001 	bge	27a18 <f_open+0xac>
				res = FR_INVALID_NAME;
   27a10:	e3a03006 	mov	r3, #6
   27a14:	e54b3005 	strb	r3, [fp, #-5]
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   27a18:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27a1c:	e203301c 	and	r3, r3, #28
   27a20:	e3530000 	cmp	r3, #0
   27a24:	0a000060 	beq	27bac <f_open+0x240>
			if (res != FR_OK) {					/* No file, create new */
   27a28:	e55b3005 	ldrb	r3, [fp, #-5]
   27a2c:	e3530000 	cmp	r3, #0
   27a30:	0a00000b 	beq	27a64 <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
   27a34:	e55b3005 	ldrb	r3, [fp, #-5]
   27a38:	e3530004 	cmp	r3, #4
   27a3c:	1a000004 	bne	27a54 <f_open+0xe8>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
   27a40:	e24b304c 	sub	r3, fp, #76	; 0x4c
   27a44:	e1a00003 	mov	r0, r3
   27a48:	ebfffa9d 	bl	264c4 <dir_register>
   27a4c:	e1a03000 	mov	r3, r0
   27a50:	e54b3005 	strb	r3, [fp, #-5]
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
   27a54:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27a58:	e3833008 	orr	r3, r3, #8
   27a5c:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
   27a60:	ea00000c 	b	27a98 <f_open+0x12c>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   27a64:	e55b3046 	ldrb	r3, [fp, #-70]	; 0xffffffba
   27a68:	e2033011 	and	r3, r3, #17
   27a6c:	e3530000 	cmp	r3, #0
   27a70:	0a000002 	beq	27a80 <f_open+0x114>
					res = FR_DENIED;
   27a74:	e3a03007 	mov	r3, #7
   27a78:	e54b3005 	strb	r3, [fp, #-5]
   27a7c:	ea000005 	b	27a98 <f_open+0x12c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   27a80:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27a84:	e2033004 	and	r3, r3, #4
   27a88:	e3530000 	cmp	r3, #0
   27a8c:	0a000001 	beq	27a98 <f_open+0x12c>
   27a90:	e3a03008 	mov	r3, #8
   27a94:	e54b3005 	strb	r3, [fp, #-5]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   27a98:	e55b3005 	ldrb	r3, [fp, #-5]
   27a9c:	e3530000 	cmp	r3, #0
   27aa0:	1a000055 	bne	27bfc <f_open+0x290>
   27aa4:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27aa8:	e2033008 	and	r3, r3, #8
   27aac:	e3530000 	cmp	r3, #0
   27ab0:	0a000051 	beq	27bfc <f_open+0x290>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
   27ab4:	e59f33c0 	ldr	r3, [pc, #960]	; 27e7c <f_open+0x510>
   27ab8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					st_dword(dj.dir + DIR_CrtTime, tm);
   27abc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27ac0:	e283300e 	add	r3, r3, #14
   27ac4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   27ac8:	e1a00003 	mov	r0, r3
   27acc:	ebfff467 	bl	24c70 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
   27ad0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27ad4:	e2833016 	add	r3, r3, #22
   27ad8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   27adc:	e1a00003 	mov	r0, r3
   27ae0:	ebfff462 	bl	24c70 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   27ae4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27ae8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   27aec:	e1a01002 	mov	r1, r2
   27af0:	e1a00003 	mov	r0, r3
   27af4:	ebfff995 	bl	26150 <ld_clust>
   27af8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   27afc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27b00:	e283300b 	add	r3, r3, #11
   27b04:	e3a02020 	mov	r2, #32
   27b08:	e5c32000 	strb	r2, [r3]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   27b0c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27b10:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   27b14:	e3a02000 	mov	r2, #0
   27b18:	e1a00003 	mov	r0, r3
   27b1c:	ebfff9a7 	bl	261c0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
   27b20:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27b24:	e283301c 	add	r3, r3, #28
   27b28:	e3a01000 	mov	r1, #0
   27b2c:	e1a00003 	mov	r0, r3
   27b30:	ebfff44e 	bl	24c70 <st_dword>
					fs->wflag = 1;
   27b34:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27b38:	e3a02001 	mov	r2, #1
   27b3c:	e5c32004 	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
   27b40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27b44:	e3530000 	cmp	r3, #0
   27b48:	0a00002b 	beq	27bfc <f_open+0x290>
						sc = fs->winsect;
   27b4c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27b50:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   27b54:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
						res = remove_chain(&dj.obj, cl, 0);
   27b58:	e24b304c 	sub	r3, fp, #76	; 0x4c
   27b5c:	e3a02000 	mov	r2, #0
   27b60:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   27b64:	e1a00003 	mov	r0, r3
   27b68:	ebfff6cc 	bl	256a0 <remove_chain>
   27b6c:	e1a03000 	mov	r3, r0
   27b70:	e54b3005 	strb	r3, [fp, #-5]
						if (res == FR_OK) {
   27b74:	e55b3005 	ldrb	r3, [fp, #-5]
   27b78:	e3530000 	cmp	r3, #0
   27b7c:	1a00001e 	bne	27bfc <f_open+0x290>
							res = move_window(fs, sc);
   27b80:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27b84:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   27b88:	e1a00003 	mov	r0, r3
   27b8c:	ebfff4b6 	bl	24e6c <move_window>
   27b90:	e1a03000 	mov	r3, r0
   27b94:	e54b3005 	strb	r3, [fp, #-5]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   27b98:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27b9c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   27ba0:	e2422001 	sub	r2, r2, #1
   27ba4:	e583200c 	str	r2, [r3, #12]
   27ba8:	ea000013 	b	27bfc <f_open+0x290>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
   27bac:	e55b3005 	ldrb	r3, [fp, #-5]
   27bb0:	e3530000 	cmp	r3, #0
   27bb4:	1a000010 	bne	27bfc <f_open+0x290>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
   27bb8:	e55b3046 	ldrb	r3, [fp, #-70]	; 0xffffffba
   27bbc:	e2033010 	and	r3, r3, #16
   27bc0:	e3530000 	cmp	r3, #0
   27bc4:	0a000002 	beq	27bd4 <f_open+0x268>
					res = FR_NO_FILE;
   27bc8:	e3a03004 	mov	r3, #4
   27bcc:	e54b3005 	strb	r3, [fp, #-5]
   27bd0:	ea000009 	b	27bfc <f_open+0x290>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
   27bd4:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27bd8:	e2033002 	and	r3, r3, #2
   27bdc:	e3530000 	cmp	r3, #0
   27be0:	0a000005 	beq	27bfc <f_open+0x290>
   27be4:	e55b3046 	ldrb	r3, [fp, #-70]	; 0xffffffba
   27be8:	e2033001 	and	r3, r3, #1
   27bec:	e3530000 	cmp	r3, #0
   27bf0:	0a000001 	beq	27bfc <f_open+0x290>
						res = FR_DENIED;
   27bf4:	e3a03007 	mov	r3, #7
   27bf8:	e54b3005 	strb	r3, [fp, #-5]
					}
				}
			}
		}
		if (res == FR_OK) {
   27bfc:	e55b3005 	ldrb	r3, [fp, #-5]
   27c00:	e3530000 	cmp	r3, #0
   27c04:	1a00000d 	bne	27c40 <f_open+0x2d4>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
   27c08:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27c0c:	e2033008 	and	r3, r3, #8
   27c10:	e3530000 	cmp	r3, #0
   27c14:	0a000002 	beq	27c24 <f_open+0x2b8>
   27c18:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27c1c:	e3833040 	orr	r3, r3, #64	; 0x40
   27c20:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   27c24:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27c28:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   27c2c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27c30:	e5832020 	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
   27c34:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   27c38:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27c3c:	e5832024 	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
   27c40:	e55b3005 	ldrb	r3, [fp, #-5]
   27c44:	e3530000 	cmp	r3, #0
   27c48:	1a000081 	bne	27e54 <f_open+0x4e8>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
   27c4c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27c50:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   27c54:	e1a01002 	mov	r1, r2
   27c58:	e1a00003 	mov	r0, r3
   27c5c:	ebfff93b 	bl	26150 <ld_clust>
   27c60:	e1a02000 	mov	r2, r0
   27c64:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27c68:	e5832008 	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   27c6c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27c70:	e283301c 	add	r3, r3, #28
   27c74:	e1a00003 	mov	r0, r3
   27c78:	ebfff3c2 	bl	24b88 <ld_dword>
   27c7c:	e1a02000 	mov	r2, r0
   27c80:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27c84:	e583200c 	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
   27c88:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
   27c8c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27c90:	e5832000 	str	r2, [r3]
			fp->obj.id = fs->id;
   27c94:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27c98:	e1d320b6 	ldrh	r2, [r3, #6]
   27c9c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27ca0:	e1c320b4 	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
   27ca4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27ca8:	e55b205d 	ldrb	r2, [fp, #-93]	; 0xffffffa3
   27cac:	e5c32010 	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
   27cb0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27cb4:	e3a02000 	mov	r2, #0
   27cb8:	e5c32011 	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
   27cbc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27cc0:	e3a02000 	mov	r2, #0
   27cc4:	e583201c 	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
   27cc8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27ccc:	e3a02000 	mov	r2, #0
   27cd0:	e5832014 	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
   27cd4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27cd8:	e2833028 	add	r3, r3, #40	; 0x28
   27cdc:	e3a02c02 	mov	r2, #512	; 0x200
   27ce0:	e3a01000 	mov	r1, #0
   27ce4:	e1a00003 	mov	r0, r3
   27ce8:	eb000e90 	bl	2b730 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   27cec:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27cf0:	e2033020 	and	r3, r3, #32
   27cf4:	e3530000 	cmp	r3, #0
   27cf8:	0a000055 	beq	27e54 <f_open+0x4e8>
   27cfc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d00:	e593300c 	ldr	r3, [r3, #12]
   27d04:	e3530000 	cmp	r3, #0
   27d08:	0a000051 	beq	27e54 <f_open+0x4e8>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
   27d0c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d10:	e593200c 	ldr	r2, [r3, #12]
   27d14:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d18:	e5832014 	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   27d1c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27d20:	e1d330ba 	ldrh	r3, [r3, #10]
   27d24:	e1a03483 	lsl	r3, r3, #9
   27d28:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				clst = fp->obj.sclust;				/* Follow the cluster chain */
   27d2c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d30:	e5933008 	ldr	r3, [r3, #8]
   27d34:	e50b300c 	str	r3, [fp, #-12]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   27d38:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d3c:	e593300c 	ldr	r3, [r3, #12]
   27d40:	e50b3010 	str	r3, [fp, #-16]
   27d44:	ea000012 	b	27d94 <f_open+0x428>
					clst = get_fat(&fp->obj, clst);
   27d48:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d4c:	e51b100c 	ldr	r1, [fp, #-12]
   27d50:	e1a00003 	mov	r0, r3
   27d54:	ebfff4e5 	bl	250f0 <get_fat>
   27d58:	e50b000c 	str	r0, [fp, #-12]
					if (clst <= 1) res = FR_INT_ERR;
   27d5c:	e51b300c 	ldr	r3, [fp, #-12]
   27d60:	e3530001 	cmp	r3, #1
   27d64:	8a000001 	bhi	27d70 <f_open+0x404>
   27d68:	e3a03002 	mov	r3, #2
   27d6c:	e54b3005 	strb	r3, [fp, #-5]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   27d70:	e51b300c 	ldr	r3, [fp, #-12]
   27d74:	e3730001 	cmn	r3, #1
   27d78:	1a000001 	bne	27d84 <f_open+0x418>
   27d7c:	e3a03001 	mov	r3, #1
   27d80:	e54b3005 	strb	r3, [fp, #-5]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   27d84:	e51b2010 	ldr	r2, [fp, #-16]
   27d88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   27d8c:	e0423003 	sub	r3, r2, r3
   27d90:	e50b3010 	str	r3, [fp, #-16]
   27d94:	e55b3005 	ldrb	r3, [fp, #-5]
   27d98:	e3530000 	cmp	r3, #0
   27d9c:	1a000003 	bne	27db0 <f_open+0x444>
   27da0:	e51b2010 	ldr	r2, [fp, #-16]
   27da4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   27da8:	e1520003 	cmp	r2, r3
   27dac:	8affffe5 	bhi	27d48 <f_open+0x3dc>
				}
				fp->clust = clst;
   27db0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27db4:	e51b200c 	ldr	r2, [fp, #-12]
   27db8:	e5832018 	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   27dbc:	e55b3005 	ldrb	r3, [fp, #-5]
   27dc0:	e3530000 	cmp	r3, #0
   27dc4:	1a000022 	bne	27e54 <f_open+0x4e8>
   27dc8:	e51b3010 	ldr	r3, [fp, #-16]
   27dcc:	e1a03b83 	lsl	r3, r3, #23
   27dd0:	e1a03ba3 	lsr	r3, r3, #23
   27dd4:	e3530000 	cmp	r3, #0
   27dd8:	0a00001d 	beq	27e54 <f_open+0x4e8>
					sc = clst2sect(fs, clst);
   27ddc:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27de0:	e51b100c 	ldr	r1, [fp, #-12]
   27de4:	e1a00003 	mov	r0, r3
   27de8:	ebfff4a4 	bl	25080 <clst2sect>
   27dec:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
					if (sc == 0) {
   27df0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27df4:	e3530000 	cmp	r3, #0
   27df8:	1a000002 	bne	27e08 <f_open+0x49c>
						res = FR_INT_ERR;
   27dfc:	e3a03002 	mov	r3, #2
   27e00:	e54b3005 	strb	r3, [fp, #-5]
   27e04:	ea000012 	b	27e54 <f_open+0x4e8>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
   27e08:	e51b3010 	ldr	r3, [fp, #-16]
   27e0c:	e1a024a3 	lsr	r2, r3, #9
   27e10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27e14:	e0822003 	add	r2, r2, r3
   27e18:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27e1c:	e583201c 	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
   27e20:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27e24:	e5d30001 	ldrb	r0, [r3, #1]
   27e28:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27e2c:	e2831028 	add	r1, r3, #40	; 0x28
   27e30:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27e34:	e593201c 	ldr	r2, [r3, #28]
   27e38:	e3a03001 	mov	r3, #1
   27e3c:	eb000ce4 	bl	2b1d4 <disk_read>
   27e40:	e1a03000 	mov	r3, r0
   27e44:	e3530000 	cmp	r3, #0
   27e48:	0a000001 	beq	27e54 <f_open+0x4e8>
   27e4c:	e3a03001 	mov	r3, #1
   27e50:	e54b3005 	strb	r3, [fp, #-5]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   27e54:	e55b3005 	ldrb	r3, [fp, #-5]
   27e58:	e3530000 	cmp	r3, #0
   27e5c:	0a000002 	beq	27e6c <f_open+0x500>
   27e60:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27e64:	e3a02000 	mov	r2, #0
   27e68:	e5832000 	str	r2, [r3]

	LEAVE_FF(fs, res);
   27e6c:	e55b3005 	ldrb	r3, [fp, #-5]
}
   27e70:	e1a00003 	mov	r0, r3
   27e74:	e24bd004 	sub	sp, fp, #4
   27e78:	e8bd8800 	pop	{fp, pc}
   27e7c:	56210000 	strtpl	r0, [r1], -r0

00027e80 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
   27e80:	e92d4800 	push	{fp, lr}
   27e84:	e28db004 	add	fp, sp, #4
   27e88:	e24dd038 	sub	sp, sp, #56	; 0x38
   27e8c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   27e90:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
   27e94:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   27e98:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
   27e9c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   27ea0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8


	*br = 0;	/* Clear read byte counter */
   27ea4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   27ea8:	e3a02000 	mov	r2, #0
   27eac:	e5832000 	str	r2, [r3]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   27eb0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27eb4:	e24b2028 	sub	r2, fp, #40	; 0x28
   27eb8:	e1a01002 	mov	r1, r2
   27ebc:	e1a00003 	mov	r0, r3
   27ec0:	ebfffe38 	bl	277a8 <validate>
   27ec4:	e1a03000 	mov	r3, r0
   27ec8:	e54b3005 	strb	r3, [fp, #-5]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   27ecc:	e55b3005 	ldrb	r3, [fp, #-5]
   27ed0:	e3530000 	cmp	r3, #0
   27ed4:	1a000005 	bne	27ef0 <f_read+0x70>
   27ed8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27edc:	e5d33011 	ldrb	r3, [r3, #17]
   27ee0:	e54b3005 	strb	r3, [fp, #-5]
   27ee4:	e55b3005 	ldrb	r3, [fp, #-5]
   27ee8:	e3530000 	cmp	r3, #0
   27eec:	0a000001 	beq	27ef8 <f_read+0x78>
   27ef0:	e55b3005 	ldrb	r3, [fp, #-5]
   27ef4:	ea0000f7 	b	282d8 <f_read+0x458>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   27ef8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27efc:	e5d33010 	ldrb	r3, [r3, #16]
   27f00:	e2033001 	and	r3, r3, #1
   27f04:	e3530000 	cmp	r3, #0
   27f08:	1a000001 	bne	27f14 <f_read+0x94>
   27f0c:	e3a03007 	mov	r3, #7
   27f10:	ea0000f0 	b	282d8 <f_read+0x458>
	remain = fp->obj.objsize - fp->fptr;
   27f14:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27f18:	e593200c 	ldr	r2, [r3, #12]
   27f1c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27f20:	e5933014 	ldr	r3, [r3, #20]
   27f24:	e0423003 	sub	r3, r2, r3
   27f28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   27f2c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
   27f30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27f34:	e1520003 	cmp	r2, r3
   27f38:	9a0000e2 	bls	282c8 <f_read+0x448>
   27f3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27f40:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   27f44:	ea0000df 	b	282c8 <f_read+0x448>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   27f48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27f4c:	e5933014 	ldr	r3, [r3, #20]
   27f50:	e1a03b83 	lsl	r3, r3, #23
   27f54:	e1a03ba3 	lsr	r3, r3, #23
   27f58:	e3530000 	cmp	r3, #0
   27f5c:	1a0000ae 	bne	2821c <f_read+0x39c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   27f60:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27f64:	e5933014 	ldr	r3, [r3, #20]
   27f68:	e1a034a3 	lsr	r3, r3, #9
   27f6c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   27f70:	e1d220ba 	ldrh	r2, [r2, #10]
   27f74:	e2422001 	sub	r2, r2, #1
   27f78:	e0033002 	and	r3, r3, r2
   27f7c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			if (csect == 0) {					/* On the cluster boundary? */
   27f80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   27f84:	e3530000 	cmp	r3, #0
   27f88:	1a000021 	bne	28014 <f_read+0x194>
				if (fp->fptr == 0) {			/* On the top of the file? */
   27f8c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27f90:	e5933014 	ldr	r3, [r3, #20]
   27f94:	e3530000 	cmp	r3, #0
   27f98:	1a000003 	bne	27fac <f_read+0x12c>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
   27f9c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27fa0:	e5933008 	ldr	r3, [r3, #8]
   27fa4:	e50b300c 	str	r3, [fp, #-12]
   27fa8:	ea000006 	b	27fc8 <f_read+0x148>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
   27fac:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   27fb0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27fb4:	e5933018 	ldr	r3, [r3, #24]
   27fb8:	e1a01003 	mov	r1, r3
   27fbc:	e1a00002 	mov	r0, r2
   27fc0:	ebfff44a 	bl	250f0 <get_fat>
   27fc4:	e50b000c 	str	r0, [fp, #-12]
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   27fc8:	e51b300c 	ldr	r3, [fp, #-12]
   27fcc:	e3530001 	cmp	r3, #1
   27fd0:	8a000004 	bhi	27fe8 <f_read+0x168>
   27fd4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27fd8:	e3a02002 	mov	r2, #2
   27fdc:	e5c32011 	strb	r2, [r3, #17]
   27fe0:	e3a03002 	mov	r3, #2
   27fe4:	ea0000bb 	b	282d8 <f_read+0x458>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   27fe8:	e51b300c 	ldr	r3, [fp, #-12]
   27fec:	e3730001 	cmn	r3, #1
   27ff0:	1a000004 	bne	28008 <f_read+0x188>
   27ff4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27ff8:	e3a02001 	mov	r2, #1
   27ffc:	e5c32011 	strb	r2, [r3, #17]
   28000:	e3a03001 	mov	r3, #1
   28004:	ea0000b3 	b	282d8 <f_read+0x458>
				fp->clust = clst;				/* Update current cluster */
   28008:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2800c:	e51b200c 	ldr	r2, [fp, #-12]
   28010:	e5832018 	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   28014:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   28018:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2801c:	e5933018 	ldr	r3, [r3, #24]
   28020:	e1a01003 	mov	r1, r3
   28024:	e1a00002 	mov	r0, r2
   28028:	ebfff414 	bl	25080 <clst2sect>
   2802c:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   28030:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28034:	e3530000 	cmp	r3, #0
   28038:	1a000004 	bne	28050 <f_read+0x1d0>
   2803c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28040:	e3a02002 	mov	r2, #2
   28044:	e5c32011 	strb	r2, [r3, #17]
   28048:	e3a03002 	mov	r3, #2
   2804c:	ea0000a1 	b	282d8 <f_read+0x458>
			sect += csect;
   28050:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   28054:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28058:	e0823003 	add	r3, r2, r3
   2805c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
   28060:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   28064:	e1a034a3 	lsr	r3, r3, #9
   28068:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   2806c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28070:	e3530000 	cmp	r3, #0
   28074:	0a000036 	beq	28154 <f_read+0x2d4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   28078:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2807c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28080:	e0823003 	add	r3, r2, r3
   28084:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   28088:	e1d220ba 	ldrh	r2, [r2, #10]
   2808c:	e1530002 	cmp	r3, r2
   28090:	9a000005 	bls	280ac <f_read+0x22c>
					cc = fs->csize - csect;
   28094:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28098:	e1d330ba 	ldrh	r3, [r3, #10]
   2809c:	e1a02003 	mov	r2, r3
   280a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   280a4:	e0423003 	sub	r3, r2, r3
   280a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   280ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   280b0:	e5d30001 	ldrb	r0, [r3, #1]
   280b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   280b8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   280bc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   280c0:	eb000c43 	bl	2b1d4 <disk_read>
   280c4:	e1a03000 	mov	r3, r0
   280c8:	e3530000 	cmp	r3, #0
   280cc:	0a000004 	beq	280e4 <f_read+0x264>
   280d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   280d4:	e3a02001 	mov	r2, #1
   280d8:	e5c32011 	strb	r2, [r3, #17]
   280dc:	e3a03001 	mov	r3, #1
   280e0:	ea00007c 	b	282d8 <f_read+0x458>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
   280e4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   280e8:	e5d33010 	ldrb	r3, [r3, #16]
   280ec:	e6af3073 	sxtb	r3, r3
   280f0:	e3530000 	cmp	r3, #0
   280f4:	aa000012 	bge	28144 <f_read+0x2c4>
   280f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   280fc:	e593201c 	ldr	r2, [r3, #28]
   28100:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28104:	e0423003 	sub	r3, r2, r3
   28108:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2810c:	e1520003 	cmp	r2, r3
   28110:	9a00000b 	bls	28144 <f_read+0x2c4>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
   28114:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28118:	e593201c 	ldr	r2, [r3, #28]
   2811c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28120:	e0423003 	sub	r3, r2, r3
   28124:	e1a03483 	lsl	r3, r3, #9
   28128:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2812c:	e0820003 	add	r0, r2, r3
   28130:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28134:	e2833028 	add	r3, r3, #40	; 0x28
   28138:	e3a02c02 	mov	r2, #512	; 0x200
   2813c:	e1a01003 	mov	r1, r3
   28140:	eb000d32 	bl	2b610 <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
   28144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28148:	e1a03483 	lsl	r3, r3, #9
   2814c:	e50b3010 	str	r3, [fp, #-16]
				continue;
   28150:	ea000048 	b	28278 <f_read+0x3f8>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
   28154:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28158:	e593301c 	ldr	r3, [r3, #28]
   2815c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   28160:	e1520003 	cmp	r2, r3
   28164:	0a000029 	beq	28210 <f_read+0x390>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
   28168:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2816c:	e5d33010 	ldrb	r3, [r3, #16]
   28170:	e6af3073 	sxtb	r3, r3
   28174:	e3530000 	cmp	r3, #0
   28178:	aa000015 	bge	281d4 <f_read+0x354>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
   2817c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28180:	e5d30001 	ldrb	r0, [r3, #1]
   28184:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28188:	e2831028 	add	r1, r3, #40	; 0x28
   2818c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28190:	e593201c 	ldr	r2, [r3, #28]
   28194:	e3a03001 	mov	r3, #1
   28198:	eb000c3a 	bl	2b288 <disk_write>
   2819c:	e1a03000 	mov	r3, r0
   281a0:	e3530000 	cmp	r3, #0
   281a4:	0a000004 	beq	281bc <f_read+0x33c>
   281a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   281ac:	e3a02001 	mov	r2, #1
   281b0:	e5c32011 	strb	r2, [r3, #17]
   281b4:	e3a03001 	mov	r3, #1
   281b8:	ea000046 	b	282d8 <f_read+0x458>
					fp->flag &= (BYTE)~FA_DIRTY;
   281bc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   281c0:	e5d33010 	ldrb	r3, [r3, #16]
   281c4:	e203307f 	and	r3, r3, #127	; 0x7f
   281c8:	e6ef2073 	uxtb	r2, r3
   281cc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   281d0:	e5c32010 	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
   281d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   281d8:	e5d30001 	ldrb	r0, [r3, #1]
   281dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   281e0:	e2831028 	add	r1, r3, #40	; 0x28
   281e4:	e3a03001 	mov	r3, #1
   281e8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   281ec:	eb000bf8 	bl	2b1d4 <disk_read>
   281f0:	e1a03000 	mov	r3, r0
   281f4:	e3530000 	cmp	r3, #0
   281f8:	0a000004 	beq	28210 <f_read+0x390>
   281fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28200:	e3a02001 	mov	r2, #1
   28204:	e5c32011 	strb	r2, [r3, #17]
   28208:	e3a03001 	mov	r3, #1
   2820c:	ea000031 	b	282d8 <f_read+0x458>
			}
#endif
			fp->sect = sect;
   28210:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28214:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   28218:	e583201c 	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   2821c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28220:	e5933014 	ldr	r3, [r3, #20]
   28224:	e1a03b83 	lsl	r3, r3, #23
   28228:	e1a03ba3 	lsr	r3, r3, #23
   2822c:	e2633c02 	rsb	r3, r3, #512	; 0x200
   28230:	e50b3010 	str	r3, [fp, #-16]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
   28234:	e51b2010 	ldr	r2, [fp, #-16]
   28238:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2823c:	e1520003 	cmp	r2, r3
   28240:	9a000001 	bls	2824c <f_read+0x3cc>
   28244:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   28248:	e50b3010 	str	r3, [fp, #-16]
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
   2824c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28250:	e2832028 	add	r2, r3, #40	; 0x28
   28254:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28258:	e5933014 	ldr	r3, [r3, #20]
   2825c:	e1a03b83 	lsl	r3, r3, #23
   28260:	e1a03ba3 	lsr	r3, r3, #23
   28264:	e0823003 	add	r3, r2, r3
   28268:	e51b2010 	ldr	r2, [fp, #-16]
   2826c:	e1a01003 	mov	r1, r3
   28270:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   28274:	eb000ce5 	bl	2b610 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   28278:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
   2827c:	e51b3010 	ldr	r3, [fp, #-16]
   28280:	e0423003 	sub	r3, r2, r3
   28284:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
   28288:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   2828c:	e5932000 	ldr	r2, [r3]
   28290:	e51b3010 	ldr	r3, [fp, #-16]
   28294:	e0822003 	add	r2, r2, r3
   28298:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   2829c:	e5832000 	str	r2, [r3]
   282a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   282a4:	e51b3010 	ldr	r3, [fp, #-16]
   282a8:	e0823003 	add	r3, r2, r3
   282ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   282b0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   282b4:	e5932014 	ldr	r2, [r3, #20]
   282b8:	e51b3010 	ldr	r3, [fp, #-16]
   282bc:	e0822003 	add	r2, r2, r3
   282c0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   282c4:	e5832014 	str	r2, [r3, #20]
   282c8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   282cc:	e3530000 	cmp	r3, #0
   282d0:	1affff1c 	bne	27f48 <f_read+0xc8>
#endif
	}

	LEAVE_FF(fs, FR_OK);
   282d4:	e3a03000 	mov	r3, #0
}
   282d8:	e1a00003 	mov	r0, r3
   282dc:	e24bd004 	sub	sp, fp, #4
   282e0:	e8bd8800 	pop	{fp, pc}

000282e4 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
   282e4:	e92d4800 	push	{fp, lr}
   282e8:	e28db004 	add	fp, sp, #4
   282ec:	e24dd030 	sub	sp, sp, #48	; 0x30
   282f0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   282f4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   282f8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   282fc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
   28300:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28304:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8


	*bw = 0;	/* Clear write byte counter */
   28308:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2830c:	e3a02000 	mov	r2, #0
   28310:	e5832000 	str	r2, [r3]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   28314:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28318:	e24b2024 	sub	r2, fp, #36	; 0x24
   2831c:	e1a01002 	mov	r1, r2
   28320:	e1a00003 	mov	r0, r3
   28324:	ebfffd1f 	bl	277a8 <validate>
   28328:	e1a03000 	mov	r3, r0
   2832c:	e54b3005 	strb	r3, [fp, #-5]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   28330:	e55b3005 	ldrb	r3, [fp, #-5]
   28334:	e3530000 	cmp	r3, #0
   28338:	1a000005 	bne	28354 <f_write+0x70>
   2833c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28340:	e5d33011 	ldrb	r3, [r3, #17]
   28344:	e54b3005 	strb	r3, [fp, #-5]
   28348:	e55b3005 	ldrb	r3, [fp, #-5]
   2834c:	e3530000 	cmp	r3, #0
   28350:	0a000001 	beq	2835c <f_write+0x78>
   28354:	e55b3005 	ldrb	r3, [fp, #-5]
   28358:	ea000128 	b	28800 <f_write+0x51c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   2835c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28360:	e5d33010 	ldrb	r3, [r3, #16]
   28364:	e2033002 	and	r3, r3, #2
   28368:	e3530000 	cmp	r3, #0
   2836c:	1a000001 	bne	28378 <f_write+0x94>
   28370:	e3a03007 	mov	r3, #7
   28374:	ea000121 	b	28800 <f_write+0x51c>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   28378:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2837c:	e5932014 	ldr	r2, [r3, #20]
   28380:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28384:	e0822003 	add	r2, r2, r3
   28388:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2838c:	e5933014 	ldr	r3, [r3, #20]
   28390:	e1520003 	cmp	r2, r3
   28394:	2a00010d 	bcs	287d0 <f_write+0x4ec>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   28398:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2839c:	e5933014 	ldr	r3, [r3, #20]
   283a0:	e1e03003 	mvn	r3, r3
   283a4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   283a8:	ea000108 	b	287d0 <f_write+0x4ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   283ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   283b0:	e5933014 	ldr	r3, [r3, #20]
   283b4:	e1a03b83 	lsl	r3, r3, #23
   283b8:	e1a03ba3 	lsr	r3, r3, #23
   283bc:	e3530000 	cmp	r3, #0
   283c0:	1a0000c7 	bne	286e4 <f_write+0x400>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   283c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   283c8:	e5933014 	ldr	r3, [r3, #20]
   283cc:	e1a034a3 	lsr	r3, r3, #9
   283d0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   283d4:	e1d220ba 	ldrh	r2, [r2, #10]
   283d8:	e2422001 	sub	r2, r2, #1
   283dc:	e0033002 	and	r3, r3, r2
   283e0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			if (csect == 0) {				/* On the cluster boundary? */
   283e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   283e8:	e3530000 	cmp	r3, #0
   283ec:	1a000033 	bne	284c0 <f_write+0x1dc>
				if (fp->fptr == 0) {		/* On the top of the file? */
   283f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   283f4:	e5933014 	ldr	r3, [r3, #20]
   283f8:	e3530000 	cmp	r3, #0
   283fc:	1a00000b 	bne	28430 <f_write+0x14c>
					clst = fp->obj.sclust;	/* Follow from the origin */
   28400:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28404:	e5933008 	ldr	r3, [r3, #8]
   28408:	e50b300c 	str	r3, [fp, #-12]
					if (clst == 0) {		/* If no cluster is allocated, */
   2840c:	e51b300c 	ldr	r3, [fp, #-12]
   28410:	e3530000 	cmp	r3, #0
   28414:	1a00000c 	bne	2844c <f_write+0x168>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
   28418:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2841c:	e3a01000 	mov	r1, #0
   28420:	e1a00003 	mov	r0, r3
   28424:	ebfff4fb 	bl	25818 <create_chain>
   28428:	e50b000c 	str	r0, [fp, #-12]
   2842c:	ea000006 	b	2844c <f_write+0x168>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   28430:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   28434:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28438:	e5933018 	ldr	r3, [r3, #24]
   2843c:	e1a01003 	mov	r1, r3
   28440:	e1a00002 	mov	r0, r2
   28444:	ebfff4f3 	bl	25818 <create_chain>
   28448:	e50b000c 	str	r0, [fp, #-12]
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2844c:	e51b300c 	ldr	r3, [fp, #-12]
   28450:	e3530000 	cmp	r3, #0
   28454:	0a0000e1 	beq	287e0 <f_write+0x4fc>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   28458:	e51b300c 	ldr	r3, [fp, #-12]
   2845c:	e3530001 	cmp	r3, #1
   28460:	1a000004 	bne	28478 <f_write+0x194>
   28464:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28468:	e3a02002 	mov	r2, #2
   2846c:	e5c32011 	strb	r2, [r3, #17]
   28470:	e3a03002 	mov	r3, #2
   28474:	ea0000e1 	b	28800 <f_write+0x51c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   28478:	e51b300c 	ldr	r3, [fp, #-12]
   2847c:	e3730001 	cmn	r3, #1
   28480:	1a000004 	bne	28498 <f_write+0x1b4>
   28484:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28488:	e3a02001 	mov	r2, #1
   2848c:	e5c32011 	strb	r2, [r3, #17]
   28490:	e3a03001 	mov	r3, #1
   28494:	ea0000d9 	b	28800 <f_write+0x51c>
				fp->clust = clst;			/* Update current cluster */
   28498:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2849c:	e51b200c 	ldr	r2, [fp, #-12]
   284a0:	e5832018 	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   284a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   284a8:	e5933008 	ldr	r3, [r3, #8]
   284ac:	e3530000 	cmp	r3, #0
   284b0:	1a000002 	bne	284c0 <f_write+0x1dc>
   284b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   284b8:	e51b200c 	ldr	r2, [fp, #-12]
   284bc:	e5832008 	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
   284c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   284c4:	e5d33010 	ldrb	r3, [r3, #16]
   284c8:	e6af3073 	sxtb	r3, r3
   284cc:	e3530000 	cmp	r3, #0
   284d0:	aa000015 	bge	2852c <f_write+0x248>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
   284d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   284d8:	e5d30001 	ldrb	r0, [r3, #1]
   284dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   284e0:	e2831028 	add	r1, r3, #40	; 0x28
   284e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   284e8:	e593201c 	ldr	r2, [r3, #28]
   284ec:	e3a03001 	mov	r3, #1
   284f0:	eb000b64 	bl	2b288 <disk_write>
   284f4:	e1a03000 	mov	r3, r0
   284f8:	e3530000 	cmp	r3, #0
   284fc:	0a000004 	beq	28514 <f_write+0x230>
   28500:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28504:	e3a02001 	mov	r2, #1
   28508:	e5c32011 	strb	r2, [r3, #17]
   2850c:	e3a03001 	mov	r3, #1
   28510:	ea0000ba 	b	28800 <f_write+0x51c>
				fp->flag &= (BYTE)~FA_DIRTY;
   28514:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28518:	e5d33010 	ldrb	r3, [r3, #16]
   2851c:	e203307f 	and	r3, r3, #127	; 0x7f
   28520:	e6ef2073 	uxtb	r2, r3
   28524:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28528:	e5c32010 	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   2852c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   28530:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28534:	e5933018 	ldr	r3, [r3, #24]
   28538:	e1a01003 	mov	r1, r3
   2853c:	e1a00002 	mov	r0, r2
   28540:	ebfff2ce 	bl	25080 <clst2sect>
   28544:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   28548:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2854c:	e3530000 	cmp	r3, #0
   28550:	1a000004 	bne	28568 <f_write+0x284>
   28554:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28558:	e3a02002 	mov	r2, #2
   2855c:	e5c32011 	strb	r2, [r3, #17]
   28560:	e3a03002 	mov	r3, #2
   28564:	ea0000a5 	b	28800 <f_write+0x51c>
			sect += csect;
   28568:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2856c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28570:	e0823003 	add	r3, r2, r3
   28574:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   28578:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2857c:	e1a034a3 	lsr	r3, r3, #9
   28580:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   28584:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28588:	e3530000 	cmp	r3, #0
   2858c:	0a000037 	beq	28670 <f_write+0x38c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   28590:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   28594:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28598:	e0823003 	add	r3, r2, r3
   2859c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   285a0:	e1d220ba 	ldrh	r2, [r2, #10]
   285a4:	e1530002 	cmp	r3, r2
   285a8:	9a000005 	bls	285c4 <f_write+0x2e0>
					cc = fs->csize - csect;
   285ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   285b0:	e1d330ba 	ldrh	r3, [r3, #10]
   285b4:	e1a02003 	mov	r2, r3
   285b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   285bc:	e0423003 	sub	r3, r2, r3
   285c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   285c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   285c8:	e5d30001 	ldrb	r0, [r3, #1]
   285cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   285d0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   285d4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   285d8:	eb000b2a 	bl	2b288 <disk_write>
   285dc:	e1a03000 	mov	r3, r0
   285e0:	e3530000 	cmp	r3, #0
   285e4:	0a000004 	beq	285fc <f_write+0x318>
   285e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   285ec:	e3a02001 	mov	r2, #1
   285f0:	e5c32011 	strb	r2, [r3, #17]
   285f4:	e3a03001 	mov	r3, #1
   285f8:	ea000080 	b	28800 <f_write+0x51c>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   285fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28600:	e593201c 	ldr	r2, [r3, #28]
   28604:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28608:	e0423003 	sub	r3, r2, r3
   2860c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28610:	e1520003 	cmp	r2, r3
   28614:	9a000011 	bls	28660 <f_write+0x37c>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
   28618:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2861c:	e2830028 	add	r0, r3, #40	; 0x28
   28620:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28624:	e593201c 	ldr	r2, [r3, #28]
   28628:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2862c:	e0423003 	sub	r3, r2, r3
   28630:	e1a03483 	lsl	r3, r3, #9
   28634:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28638:	e0823003 	add	r3, r2, r3
   2863c:	e3a02c02 	mov	r2, #512	; 0x200
   28640:	e1a01003 	mov	r1, r3
   28644:	eb000bf1 	bl	2b610 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
   28648:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2864c:	e5d33010 	ldrb	r3, [r3, #16]
   28650:	e203307f 	and	r3, r3, #127	; 0x7f
   28654:	e6ef2073 	uxtb	r2, r3
   28658:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2865c:	e5c32010 	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   28660:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28664:	e1a03483 	lsl	r3, r3, #9
   28668:	e50b3010 	str	r3, [fp, #-16]
				continue;
   2866c:	ea00003a 	b	2875c <f_write+0x478>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
   28670:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28674:	e593301c 	ldr	r3, [r3, #28]
   28678:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2867c:	e1520003 	cmp	r2, r3
   28680:	0a000014 	beq	286d8 <f_write+0x3f4>
				fp->fptr < fp->obj.objsize &&
   28684:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28688:	e5932014 	ldr	r2, [r3, #20]
   2868c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28690:	e593300c 	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
   28694:	e1520003 	cmp	r2, r3
   28698:	2a00000e 	bcs	286d8 <f_write+0x3f4>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
   2869c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   286a0:	e5d30001 	ldrb	r0, [r3, #1]
   286a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   286a8:	e2831028 	add	r1, r3, #40	; 0x28
   286ac:	e3a03001 	mov	r3, #1
   286b0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   286b4:	eb000ac6 	bl	2b1d4 <disk_read>
   286b8:	e1a03000 	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
   286bc:	e3530000 	cmp	r3, #0
   286c0:	0a000004 	beq	286d8 <f_write+0x3f4>
					ABORT(fs, FR_DISK_ERR);
   286c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   286c8:	e3a02001 	mov	r2, #1
   286cc:	e5c32011 	strb	r2, [r3, #17]
   286d0:	e3a03001 	mov	r3, #1
   286d4:	ea000049 	b	28800 <f_write+0x51c>
			}
#endif
			fp->sect = sect;
   286d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   286dc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   286e0:	e583201c 	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   286e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   286e8:	e5933014 	ldr	r3, [r3, #20]
   286ec:	e1a03b83 	lsl	r3, r3, #23
   286f0:	e1a03ba3 	lsr	r3, r3, #23
   286f4:	e2633c02 	rsb	r3, r3, #512	; 0x200
   286f8:	e50b3010 	str	r3, [fp, #-16]
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
   286fc:	e51b2010 	ldr	r2, [fp, #-16]
   28700:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28704:	e1520003 	cmp	r2, r3
   28708:	9a000001 	bls	28714 <f_write+0x430>
   2870c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28710:	e50b3010 	str	r3, [fp, #-16]
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   28714:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28718:	e2832028 	add	r2, r3, #40	; 0x28
   2871c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28720:	e5933014 	ldr	r3, [r3, #20]
   28724:	e1a03b83 	lsl	r3, r3, #23
   28728:	e1a03ba3 	lsr	r3, r3, #23
   2872c:	e0823003 	add	r3, r2, r3
   28730:	e51b2010 	ldr	r2, [fp, #-16]
   28734:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   28738:	e1a00003 	mov	r0, r3
   2873c:	eb000bb3 	bl	2b610 <memcpy>
		fp->flag |= FA_DIRTY;
   28740:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28744:	e5d33010 	ldrb	r3, [r3, #16]
   28748:	e1e03c83 	mvn	r3, r3, lsl #25
   2874c:	e1e03ca3 	mvn	r3, r3, lsr #25
   28750:	e6ef2073 	uxtb	r2, r3
   28754:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28758:	e5c32010 	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   2875c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   28760:	e51b3010 	ldr	r3, [fp, #-16]
   28764:	e0423003 	sub	r3, r2, r3
   28768:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   2876c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   28770:	e5932000 	ldr	r2, [r3]
   28774:	e51b3010 	ldr	r3, [fp, #-16]
   28778:	e0822003 	add	r2, r2, r3
   2877c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   28780:	e5832000 	str	r2, [r3]
   28784:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28788:	e51b3010 	ldr	r3, [fp, #-16]
   2878c:	e0823003 	add	r3, r2, r3
   28790:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   28794:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28798:	e5932014 	ldr	r2, [r3, #20]
   2879c:	e51b3010 	ldr	r3, [fp, #-16]
   287a0:	e0822003 	add	r2, r2, r3
   287a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   287a8:	e5832014 	str	r2, [r3, #20]
   287ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   287b0:	e593200c 	ldr	r2, [r3, #12]
   287b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   287b8:	e5933014 	ldr	r3, [r3, #20]
   287bc:	e1520003 	cmp	r2, r3
   287c0:	21a02002 	movcs	r2, r2
   287c4:	31a02003 	movcc	r2, r3
   287c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   287cc:	e583200c 	str	r2, [r3, #12]
   287d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   287d4:	e3530000 	cmp	r3, #0
   287d8:	1afffef3 	bne	283ac <f_write+0xc8>
   287dc:	ea000000 	b	287e4 <f_write+0x500>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   287e0:	e320f000 	nop	{0}
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   287e4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   287e8:	e5d33010 	ldrb	r3, [r3, #16]
   287ec:	e3833040 	orr	r3, r3, #64	; 0x40
   287f0:	e6ef2073 	uxtb	r2, r3
   287f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   287f8:	e5c32010 	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
   287fc:	e3a03000 	mov	r3, #0
}
   28800:	e1a00003 	mov	r0, r3
   28804:	e24bd004 	sub	sp, fp, #4
   28808:	e8bd8800 	pop	{fp, pc}

0002880c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
   2880c:	e92d4800 	push	{fp, lr}
   28810:	e28db004 	add	fp, sp, #4
   28814:	e24dd018 	sub	sp, sp, #24
   28818:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   2881c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28820:	e24b2014 	sub	r2, fp, #20
   28824:	e1a01002 	mov	r1, r2
   28828:	e1a00003 	mov	r0, r3
   2882c:	ebfffbdd 	bl	277a8 <validate>
   28830:	e1a03000 	mov	r3, r0
   28834:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   28838:	e55b3005 	ldrb	r3, [fp, #-5]
   2883c:	e3530000 	cmp	r3, #0
   28840:	1a00005a 	bne	289b0 <f_sync+0x1a4>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
   28844:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28848:	e5d33010 	ldrb	r3, [r3, #16]
   2884c:	e2033040 	and	r3, r3, #64	; 0x40
   28850:	e3530000 	cmp	r3, #0
   28854:	0a000055 	beq	289b0 <f_sync+0x1a4>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
   28858:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2885c:	e5d33010 	ldrb	r3, [r3, #16]
   28860:	e6af3073 	sxtb	r3, r3
   28864:	e3530000 	cmp	r3, #0
   28868:	aa000012 	bge	288b8 <f_sync+0xac>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
   2886c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28870:	e5d30001 	ldrb	r0, [r3, #1]
   28874:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28878:	e2831028 	add	r1, r3, #40	; 0x28
   2887c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28880:	e593201c 	ldr	r2, [r3, #28]
   28884:	e3a03001 	mov	r3, #1
   28888:	eb000a7e 	bl	2b288 <disk_write>
   2888c:	e1a03000 	mov	r3, r0
   28890:	e3530000 	cmp	r3, #0
   28894:	0a000001 	beq	288a0 <f_sync+0x94>
   28898:	e3a03001 	mov	r3, #1
   2889c:	ea000044 	b	289b4 <f_sync+0x1a8>
				fp->flag &= (BYTE)~FA_DIRTY;
   288a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   288a4:	e5d33010 	ldrb	r3, [r3, #16]
   288a8:	e203307f 	and	r3, r3, #127	; 0x7f
   288ac:	e6ef2073 	uxtb	r2, r3
   288b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   288b4:	e5c32010 	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
   288b8:	e59f3100 	ldr	r3, [pc, #256]	; 289c0 <f_sync+0x1b4>
   288bc:	e50b300c 	str	r3, [fp, #-12]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
   288c0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   288c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   288c8:	e5933020 	ldr	r3, [r3, #32]
   288cc:	e1a01003 	mov	r1, r3
   288d0:	e1a00002 	mov	r0, r2
   288d4:	ebfff164 	bl	24e6c <move_window>
   288d8:	e1a03000 	mov	r3, r0
   288dc:	e54b3005 	strb	r3, [fp, #-5]
				if (res == FR_OK) {
   288e0:	e55b3005 	ldrb	r3, [fp, #-5]
   288e4:	e3530000 	cmp	r3, #0
   288e8:	1a000030 	bne	289b0 <f_sync+0x1a4>
					dir = fp->dir_ptr;
   288ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   288f0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   288f4:	e50b3010 	str	r3, [fp, #-16]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   288f8:	e51b3010 	ldr	r3, [fp, #-16]
   288fc:	e283300b 	add	r3, r3, #11
   28900:	e5d32000 	ldrb	r2, [r3]
   28904:	e51b3010 	ldr	r3, [fp, #-16]
   28908:	e283300b 	add	r3, r3, #11
   2890c:	e3822020 	orr	r2, r2, #32
   28910:	e6ef2072 	uxtb	r2, r2
   28914:	e5c32000 	strb	r2, [r3]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   28918:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2891c:	e5930000 	ldr	r0, [r3]
   28920:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28924:	e5933008 	ldr	r3, [r3, #8]
   28928:	e1a02003 	mov	r2, r3
   2892c:	e51b1010 	ldr	r1, [fp, #-16]
   28930:	ebfff622 	bl	261c0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
   28934:	e51b3010 	ldr	r3, [fp, #-16]
   28938:	e283201c 	add	r2, r3, #28
   2893c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28940:	e593300c 	ldr	r3, [r3, #12]
   28944:	e1a01003 	mov	r1, r3
   28948:	e1a00002 	mov	r0, r2
   2894c:	ebfff0c7 	bl	24c70 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
   28950:	e51b3010 	ldr	r3, [fp, #-16]
   28954:	e2833016 	add	r3, r3, #22
   28958:	e51b100c 	ldr	r1, [fp, #-12]
   2895c:	e1a00003 	mov	r0, r3
   28960:	ebfff0c2 	bl	24c70 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
   28964:	e51b3010 	ldr	r3, [fp, #-16]
   28968:	e2833012 	add	r3, r3, #18
   2896c:	e3a01000 	mov	r1, #0
   28970:	e1a00003 	mov	r0, r3
   28974:	ebfff0a4 	bl	24c0c <st_word>
					fs->wflag = 1;
   28978:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2897c:	e3a02001 	mov	r2, #1
   28980:	e5c32004 	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
   28984:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28988:	e1a00003 	mov	r0, r3
   2898c:	ebfff15e 	bl	24f0c <sync_fs>
   28990:	e1a03000 	mov	r3, r0
   28994:	e54b3005 	strb	r3, [fp, #-5]
					fp->flag &= (BYTE)~FA_MODIFIED;
   28998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2899c:	e5d33010 	ldrb	r3, [r3, #16]
   289a0:	e3c33040 	bic	r3, r3, #64	; 0x40
   289a4:	e6ef2073 	uxtb	r2, r3
   289a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   289ac:	e5c32010 	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
   289b0:	e55b3005 	ldrb	r3, [fp, #-5]
}
   289b4:	e1a00003 	mov	r0, r3
   289b8:	e24bd004 	sub	sp, fp, #4
   289bc:	e8bd8800 	pop	{fp, pc}
   289c0:	56210000 	strtpl	r0, [r1], -r0

000289c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
   289c4:	e92d4800 	push	{fp, lr}
   289c8:	e28db004 	add	fp, sp, #4
   289cc:	e24dd010 	sub	sp, sp, #16
   289d0:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
   289d4:	e51b0010 	ldr	r0, [fp, #-16]
   289d8:	ebffff8b 	bl	2880c <f_sync>
   289dc:	e1a03000 	mov	r3, r0
   289e0:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK)
   289e4:	e55b3005 	ldrb	r3, [fp, #-5]
   289e8:	e3530000 	cmp	r3, #0
   289ec:	1a00000c 	bne	28a24 <f_close+0x60>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
   289f0:	e51b3010 	ldr	r3, [fp, #-16]
   289f4:	e24b200c 	sub	r2, fp, #12
   289f8:	e1a01002 	mov	r1, r2
   289fc:	e1a00003 	mov	r0, r3
   28a00:	ebfffb68 	bl	277a8 <validate>
   28a04:	e1a03000 	mov	r3, r0
   28a08:	e54b3005 	strb	r3, [fp, #-5]
		if (res == FR_OK) {
   28a0c:	e55b3005 	ldrb	r3, [fp, #-5]
   28a10:	e3530000 	cmp	r3, #0
   28a14:	1a000002 	bne	28a24 <f_close+0x60>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
   28a18:	e51b3010 	ldr	r3, [fp, #-16]
   28a1c:	e3a02000 	mov	r2, #0
   28a20:	e5832000 	str	r2, [r3]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
   28a24:	e55b3005 	ldrb	r3, [fp, #-5]
}
   28a28:	e1a00003 	mov	r0, r3
   28a2c:	e24bd004 	sub	sp, fp, #4
   28a30:	e8bd8800 	pop	{fp, pc}

00028a34 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
   28a34:	e92d4810 	push	{r4, fp, lr}
   28a38:	e28db008 	add	fp, sp, #8
   28a3c:	e24dd024 	sub	sp, sp, #36	; 0x24
   28a40:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   28a44:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
	DWORD cl, pcl, ncl, tcl, tlen, ulen;
	DWORD *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   28a48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28a4c:	e24b2024 	sub	r2, fp, #36	; 0x24
   28a50:	e1a01002 	mov	r1, r2
   28a54:	e1a00003 	mov	r0, r3
   28a58:	ebfffb52 	bl	277a8 <validate>
   28a5c:	e1a03000 	mov	r3, r0
   28a60:	e54b300d 	strb	r3, [fp, #-13]
	if (res == FR_OK) res = (FRESULT)fp->err;
   28a64:	e55b300d 	ldrb	r3, [fp, #-13]
   28a68:	e3530000 	cmp	r3, #0
   28a6c:	1a000002 	bne	28a7c <f_lseek+0x48>
   28a70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28a74:	e5d33011 	ldrb	r3, [r3, #17]
   28a78:	e54b300d 	strb	r3, [fp, #-13]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
   28a7c:	e55b300d 	ldrb	r3, [fp, #-13]
   28a80:	e3530000 	cmp	r3, #0
   28a84:	0a000001 	beq	28a90 <f_lseek+0x5c>
   28a88:	e55b300d 	ldrb	r3, [fp, #-13]
   28a8c:	ea000103 	b	28ea0 <f_lseek+0x46c>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   28a90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28a94:	e593300c 	ldr	r3, [r3, #12]
   28a98:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   28a9c:	e1520003 	cmp	r2, r3
   28aa0:	9a000007 	bls	28ac4 <f_lseek+0x90>
   28aa4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28aa8:	e5d33010 	ldrb	r3, [r3, #16]
   28aac:	e2033002 	and	r3, r3, #2
   28ab0:	e3530000 	cmp	r3, #0
   28ab4:	1a000002 	bne	28ac4 <f_lseek+0x90>
			ofs = fp->obj.objsize;
   28ab8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28abc:	e593300c 	ldr	r3, [r3, #12]
   28ac0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
		}
		ifptr = fp->fptr;
   28ac4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28ac8:	e5933014 	ldr	r3, [r3, #20]
   28acc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		fp->fptr = nsect = 0;
   28ad0:	e3a03000 	mov	r3, #0
   28ad4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   28ad8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28adc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28ae0:	e5832014 	str	r2, [r3, #20]
		if (ofs > 0) {
   28ae4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28ae8:	e3530000 	cmp	r3, #0
   28aec:	0a0000a2 	beq	28d7c <f_lseek+0x348>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   28af0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28af4:	e1d330ba 	ldrh	r3, [r3, #10]
   28af8:	e1a03483 	lsl	r3, r3, #9
   28afc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			if (ifptr > 0 &&
   28b00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28b04:	e3530000 	cmp	r3, #0
   28b08:	0a00001e 	beq	28b88 <f_lseek+0x154>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   28b0c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28b10:	e2433001 	sub	r3, r3, #1
   28b14:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   28b18:	e1a00003 	mov	r0, r3
   28b1c:	eb000a4a 	bl	2b44c <__udivsi3>
   28b20:	e1a03000 	mov	r3, r0
   28b24:	e1a04003 	mov	r4, r3
   28b28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28b2c:	e2433001 	sub	r3, r3, #1
   28b30:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   28b34:	e1a00003 	mov	r0, r3
   28b38:	eb000a43 	bl	2b44c <__udivsi3>
   28b3c:	e1a03000 	mov	r3, r0
			if (ifptr > 0 &&
   28b40:	e1540003 	cmp	r4, r3
   28b44:	3a00000f 	bcc	28b88 <f_lseek+0x154>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   28b48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28b4c:	e2432001 	sub	r2, r3, #1
   28b50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28b54:	e2633000 	rsb	r3, r3, #0
   28b58:	e0022003 	and	r2, r2, r3
   28b5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28b60:	e5832014 	str	r2, [r3, #20]
				ofs -= fp->fptr;
   28b64:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28b68:	e5933014 	ldr	r3, [r3, #20]
   28b6c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   28b70:	e0423003 	sub	r3, r2, r3
   28b74:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
				clst = fp->clust;
   28b78:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28b7c:	e5933018 	ldr	r3, [r3, #24]
   28b80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   28b84:	ea000020 	b	28c0c <f_lseek+0x1d8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
   28b88:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28b8c:	e5933008 	ldr	r3, [r3, #8]
   28b90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   28b94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28b98:	e3530000 	cmp	r3, #0
   28b9c:	1a000017 	bne	28c00 <f_lseek+0x1cc>
					clst = create_chain(&fp->obj, 0);
   28ba0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28ba4:	e3a01000 	mov	r1, #0
   28ba8:	e1a00003 	mov	r0, r3
   28bac:	ebfff319 	bl	25818 <create_chain>
   28bb0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   28bb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28bb8:	e3530001 	cmp	r3, #1
   28bbc:	1a000004 	bne	28bd4 <f_lseek+0x1a0>
   28bc0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28bc4:	e3a02002 	mov	r2, #2
   28bc8:	e5c32011 	strb	r2, [r3, #17]
   28bcc:	e3a03002 	mov	r3, #2
   28bd0:	ea0000b2 	b	28ea0 <f_lseek+0x46c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   28bd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28bd8:	e3730001 	cmn	r3, #1
   28bdc:	1a000004 	bne	28bf4 <f_lseek+0x1c0>
   28be0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28be4:	e3a02001 	mov	r2, #1
   28be8:	e5c32011 	strb	r2, [r3, #17]
   28bec:	e3a03001 	mov	r3, #1
   28bf0:	ea0000aa 	b	28ea0 <f_lseek+0x46c>
					fp->obj.sclust = clst;
   28bf4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28bf8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28bfc:	e5832008 	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
   28c00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c04:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28c08:	e5832018 	str	r2, [r3, #24]
			}
			if (clst != 0) {
   28c0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28c10:	e3530000 	cmp	r3, #0
   28c14:	0a000058 	beq	28d7c <f_lseek+0x348>
				while (ofs > bcs) {						/* Cluster following loop */
   28c18:	ea000036 	b	28cf8 <f_lseek+0x2c4>
					ofs -= bcs; fp->fptr += bcs;
   28c1c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   28c20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28c24:	e0423003 	sub	r3, r2, r3
   28c28:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   28c2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c30:	e5932014 	ldr	r2, [r3, #20]
   28c34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28c38:	e0822003 	add	r2, r2, r3
   28c3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c40:	e5832014 	str	r2, [r3, #20]
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   28c44:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c48:	e5d33010 	ldrb	r3, [r3, #16]
   28c4c:	e2033002 	and	r3, r3, #2
   28c50:	e3530000 	cmp	r3, #0
   28c54:	0a00000a 	beq	28c84 <f_lseek+0x250>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
   28c58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c5c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28c60:	e1a00003 	mov	r0, r3
   28c64:	ebfff2eb 	bl	25818 <create_chain>
   28c68:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
						if (clst == 0) {				/* Clip file size in case of disk full */
   28c6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28c70:	e3530000 	cmp	r3, #0
   28c74:	1a000007 	bne	28c98 <f_lseek+0x264>
							ofs = 0; break;
   28c78:	e3a03000 	mov	r3, #0
   28c7c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   28c80:	ea000020 	b	28d08 <f_lseek+0x2d4>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
   28c84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c88:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28c8c:	e1a00003 	mov	r0, r3
   28c90:	ebfff116 	bl	250f0 <get_fat>
   28c94:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   28c98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28c9c:	e3730001 	cmn	r3, #1
   28ca0:	1a000004 	bne	28cb8 <f_lseek+0x284>
   28ca4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28ca8:	e3a02001 	mov	r2, #1
   28cac:	e5c32011 	strb	r2, [r3, #17]
   28cb0:	e3a03001 	mov	r3, #1
   28cb4:	ea000079 	b	28ea0 <f_lseek+0x46c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   28cb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28cbc:	e3530001 	cmp	r3, #1
   28cc0:	9a000004 	bls	28cd8 <f_lseek+0x2a4>
   28cc4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28cc8:	e5933014 	ldr	r3, [r3, #20]
   28ccc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28cd0:	e1520003 	cmp	r2, r3
   28cd4:	3a000004 	bcc	28cec <f_lseek+0x2b8>
   28cd8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28cdc:	e3a02002 	mov	r2, #2
   28ce0:	e5c32011 	strb	r2, [r3, #17]
   28ce4:	e3a03002 	mov	r3, #2
   28ce8:	ea00006c 	b	28ea0 <f_lseek+0x46c>
					fp->clust = clst;
   28cec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28cf0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28cf4:	e5832018 	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
   28cf8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   28cfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28d00:	e1520003 	cmp	r2, r3
   28d04:	8affffc4 	bhi	28c1c <f_lseek+0x1e8>
				}
				fp->fptr += ofs;
   28d08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28d0c:	e5932014 	ldr	r2, [r3, #20]
   28d10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28d14:	e0822003 	add	r2, r2, r3
   28d18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28d1c:	e5832014 	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
   28d20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28d24:	e1a03b83 	lsl	r3, r3, #23
   28d28:	e1a03ba3 	lsr	r3, r3, #23
   28d2c:	e3530000 	cmp	r3, #0
   28d30:	0a000011 	beq	28d7c <f_lseek+0x348>
					nsect = clst2sect(fs, clst);	/* Current sector */
   28d34:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28d38:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28d3c:	e1a00003 	mov	r0, r3
   28d40:	ebfff0ce 	bl	25080 <clst2sect>
   28d44:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   28d48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28d4c:	e3530000 	cmp	r3, #0
   28d50:	1a000004 	bne	28d68 <f_lseek+0x334>
   28d54:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28d58:	e3a02002 	mov	r2, #2
   28d5c:	e5c32011 	strb	r2, [r3, #17]
   28d60:	e3a03002 	mov	r3, #2
   28d64:	ea00004d 	b	28ea0 <f_lseek+0x46c>
					nsect += (DWORD)(ofs / SS(fs));
   28d68:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28d6c:	e1a034a3 	lsr	r3, r3, #9
   28d70:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28d74:	e0823003 	add	r3, r2, r3
   28d78:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
   28d7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28d80:	e5932014 	ldr	r2, [r3, #20]
   28d84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28d88:	e593300c 	ldr	r3, [r3, #12]
   28d8c:	e1520003 	cmp	r2, r3
   28d90:	9a000009 	bls	28dbc <f_lseek+0x388>
			fp->obj.objsize = fp->fptr;
   28d94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28d98:	e5932014 	ldr	r2, [r3, #20]
   28d9c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28da0:	e583200c 	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
   28da4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28da8:	e5d33010 	ldrb	r3, [r3, #16]
   28dac:	e3833040 	orr	r3, r3, #64	; 0x40
   28db0:	e6ef2073 	uxtb	r2, r3
   28db4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28db8:	e5c32010 	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   28dbc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28dc0:	e5933014 	ldr	r3, [r3, #20]
   28dc4:	e1a03b83 	lsl	r3, r3, #23
   28dc8:	e1a03ba3 	lsr	r3, r3, #23
   28dcc:	e3530000 	cmp	r3, #0
   28dd0:	0a000031 	beq	28e9c <f_lseek+0x468>
   28dd4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28dd8:	e593301c 	ldr	r3, [r3, #28]
   28ddc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28de0:	e1520003 	cmp	r2, r3
   28de4:	0a00002c 	beq	28e9c <f_lseek+0x468>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
   28de8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28dec:	e5d33010 	ldrb	r3, [r3, #16]
   28df0:	e6af3073 	sxtb	r3, r3
   28df4:	e3530000 	cmp	r3, #0
   28df8:	aa000015 	bge	28e54 <f_lseek+0x420>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
   28dfc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28e00:	e5d30001 	ldrb	r0, [r3, #1]
   28e04:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28e08:	e2831028 	add	r1, r3, #40	; 0x28
   28e0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28e10:	e593201c 	ldr	r2, [r3, #28]
   28e14:	e3a03001 	mov	r3, #1
   28e18:	eb00091a 	bl	2b288 <disk_write>
   28e1c:	e1a03000 	mov	r3, r0
   28e20:	e3530000 	cmp	r3, #0
   28e24:	0a000004 	beq	28e3c <f_lseek+0x408>
   28e28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28e2c:	e3a02001 	mov	r2, #1
   28e30:	e5c32011 	strb	r2, [r3, #17]
   28e34:	e3a03001 	mov	r3, #1
   28e38:	ea000018 	b	28ea0 <f_lseek+0x46c>
				fp->flag &= (BYTE)~FA_DIRTY;
   28e3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28e40:	e5d33010 	ldrb	r3, [r3, #16]
   28e44:	e203307f 	and	r3, r3, #127	; 0x7f
   28e48:	e6ef2073 	uxtb	r2, r3
   28e4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28e50:	e5c32010 	strb	r2, [r3, #16]
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
   28e54:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28e58:	e5d30001 	ldrb	r0, [r3, #1]
   28e5c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28e60:	e2831028 	add	r1, r3, #40	; 0x28
   28e64:	e3a03001 	mov	r3, #1
   28e68:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28e6c:	eb0008d8 	bl	2b1d4 <disk_read>
   28e70:	e1a03000 	mov	r3, r0
   28e74:	e3530000 	cmp	r3, #0
   28e78:	0a000004 	beq	28e90 <f_lseek+0x45c>
   28e7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28e80:	e3a02001 	mov	r2, #1
   28e84:	e5c32011 	strb	r2, [r3, #17]
   28e88:	e3a03001 	mov	r3, #1
   28e8c:	ea000003 	b	28ea0 <f_lseek+0x46c>
#endif
			fp->sect = nsect;
   28e90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28e94:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28e98:	e583201c 	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
   28e9c:	e55b300d 	ldrb	r3, [fp, #-13]
}
   28ea0:	e1a00003 	mov	r0, r3
   28ea4:	e24bd008 	sub	sp, fp, #8
   28ea8:	e8bd8810 	pop	{r4, fp, pc}

00028eac <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
   28eac:	e92d4800 	push	{fp, lr}
   28eb0:	e28db004 	add	fp, sp, #4
   28eb4:	e24dd010 	sub	sp, sp, #16
   28eb8:	e50b0010 	str	r0, [fp, #-16]
   28ebc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
   28ec0:	e51b3010 	ldr	r3, [fp, #-16]
   28ec4:	e3530000 	cmp	r3, #0
   28ec8:	1a000001 	bne	28ed4 <f_opendir+0x28>
   28ecc:	e3a03009 	mov	r3, #9
   28ed0:	ea000043 	b	28fe4 <f_opendir+0x138>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
   28ed4:	e24b100c 	sub	r1, fp, #12
   28ed8:	e24b3014 	sub	r3, fp, #20
   28edc:	e3a02000 	mov	r2, #0
   28ee0:	e1a00003 	mov	r0, r3
   28ee4:	ebfff867 	bl	27088 <mount_volume>
   28ee8:	e1a03000 	mov	r3, r0
   28eec:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   28ef0:	e55b3005 	ldrb	r3, [fp, #-5]
   28ef4:	e3530000 	cmp	r3, #0
   28ef8:	1a000032 	bne	28fc8 <f_opendir+0x11c>
		dp->obj.fs = fs;
   28efc:	e51b200c 	ldr	r2, [fp, #-12]
   28f00:	e51b3010 	ldr	r3, [fp, #-16]
   28f04:	e5832000 	str	r2, [r3]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
   28f08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28f0c:	e1a01003 	mov	r1, r3
   28f10:	e51b0010 	ldr	r0, [fp, #-16]
   28f14:	ebfff6d1 	bl	26a60 <follow_path>
   28f18:	e1a03000 	mov	r3, r0
   28f1c:	e54b3005 	strb	r3, [fp, #-5]
		if (res == FR_OK) {						/* Follow completed */
   28f20:	e55b3005 	ldrb	r3, [fp, #-5]
   28f24:	e3530000 	cmp	r3, #0
   28f28:	1a000021 	bne	28fb4 <f_opendir+0x108>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
   28f2c:	e51b3010 	ldr	r3, [fp, #-16]
   28f30:	e5d3302b 	ldrb	r3, [r3, #43]	; 0x2b
   28f34:	e6af3073 	sxtb	r3, r3
   28f38:	e3530000 	cmp	r3, #0
   28f3c:	ba000010 	blt	28f84 <f_opendir+0xd8>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
   28f40:	e51b3010 	ldr	r3, [fp, #-16]
   28f44:	e5d33006 	ldrb	r3, [r3, #6]
   28f48:	e2033010 	and	r3, r3, #16
   28f4c:	e3530000 	cmp	r3, #0
   28f50:	0a000009 	beq	28f7c <f_opendir+0xd0>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
   28f54:	e51b200c 	ldr	r2, [fp, #-12]
   28f58:	e51b3010 	ldr	r3, [fp, #-16]
   28f5c:	e593301c 	ldr	r3, [r3, #28]
   28f60:	e1a01003 	mov	r1, r3
   28f64:	e1a00002 	mov	r0, r2
   28f68:	ebfff478 	bl	26150 <ld_clust>
   28f6c:	e1a02000 	mov	r2, r0
   28f70:	e51b3010 	ldr	r3, [fp, #-16]
   28f74:	e5832008 	str	r2, [r3, #8]
   28f78:	ea000001 	b	28f84 <f_opendir+0xd8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
   28f7c:	e3a03005 	mov	r3, #5
   28f80:	e54b3005 	strb	r3, [fp, #-5]
				}
			}
			if (res == FR_OK) {
   28f84:	e55b3005 	ldrb	r3, [fp, #-5]
   28f88:	e3530000 	cmp	r3, #0
   28f8c:	1a000008 	bne	28fb4 <f_opendir+0x108>
				dp->obj.id = fs->id;
   28f90:	e51b300c 	ldr	r3, [fp, #-12]
   28f94:	e1d320b6 	ldrh	r2, [r3, #6]
   28f98:	e51b3010 	ldr	r3, [fp, #-16]
   28f9c:	e1c320b4 	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   28fa0:	e3a01000 	mov	r1, #0
   28fa4:	e51b0010 	ldr	r0, [fp, #-16]
   28fa8:	ebfff324 	bl	25c40 <dir_sdi>
   28fac:	e1a03000 	mov	r3, r0
   28fb0:	e54b3005 	strb	r3, [fp, #-5]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   28fb4:	e55b3005 	ldrb	r3, [fp, #-5]
   28fb8:	e3530004 	cmp	r3, #4
   28fbc:	1a000001 	bne	28fc8 <f_opendir+0x11c>
   28fc0:	e3a03005 	mov	r3, #5
   28fc4:	e54b3005 	strb	r3, [fp, #-5]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
   28fc8:	e55b3005 	ldrb	r3, [fp, #-5]
   28fcc:	e3530000 	cmp	r3, #0
   28fd0:	0a000002 	beq	28fe0 <f_opendir+0x134>
   28fd4:	e51b3010 	ldr	r3, [fp, #-16]
   28fd8:	e3a02000 	mov	r2, #0
   28fdc:	e5832000 	str	r2, [r3]

	LEAVE_FF(fs, res);
   28fe0:	e55b3005 	ldrb	r3, [fp, #-5]
}
   28fe4:	e1a00003 	mov	r0, r3
   28fe8:	e24bd004 	sub	sp, fp, #4
   28fec:	e8bd8800 	pop	{fp, pc}

00028ff0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
   28ff0:	e92d4800 	push	{fp, lr}
   28ff4:	e28db004 	add	fp, sp, #4
   28ff8:	e24dd010 	sub	sp, sp, #16
   28ffc:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
   29000:	e51b3010 	ldr	r3, [fp, #-16]
   29004:	e24b200c 	sub	r2, fp, #12
   29008:	e1a01002 	mov	r1, r2
   2900c:	e1a00003 	mov	r0, r3
   29010:	ebfff9e4 	bl	277a8 <validate>
   29014:	e1a03000 	mov	r3, r0
   29018:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   2901c:	e55b3005 	ldrb	r3, [fp, #-5]
   29020:	e3530000 	cmp	r3, #0
   29024:	1a000002 	bne	29034 <f_closedir+0x44>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
   29028:	e51b3010 	ldr	r3, [fp, #-16]
   2902c:	e3a02000 	mov	r2, #0
   29030:	e5832000 	str	r2, [r3]
#endif
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
#endif
	}
	return res;
   29034:	e55b3005 	ldrb	r3, [fp, #-5]
}
   29038:	e1a00003 	mov	r0, r3
   2903c:	e24bd004 	sub	sp, fp, #4
   29040:	e8bd8800 	pop	{fp, pc}

00029044 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
   29044:	e92d4800 	push	{fp, lr}
   29048:	e28db004 	add	fp, sp, #4
   2904c:	e24dd010 	sub	sp, sp, #16
   29050:	e50b0010 	str	r0, [fp, #-16]
   29054:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   29058:	e51b3010 	ldr	r3, [fp, #-16]
   2905c:	e24b200c 	sub	r2, fp, #12
   29060:	e1a01002 	mov	r1, r2
   29064:	e1a00003 	mov	r0, r3
   29068:	ebfff9ce 	bl	277a8 <validate>
   2906c:	e1a03000 	mov	r3, r0
   29070:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   29074:	e55b3005 	ldrb	r3, [fp, #-5]
   29078:	e3530000 	cmp	r3, #0
   2907c:	1a000022 	bne	2910c <f_readdir+0xc8>
		if (!fno) {
   29080:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29084:	e3530000 	cmp	r3, #0
   29088:	1a000005 	bne	290a4 <f_readdir+0x60>
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
   2908c:	e3a01000 	mov	r1, #0
   29090:	e51b0010 	ldr	r0, [fp, #-16]
   29094:	ebfff2e9 	bl	25c40 <dir_sdi>
   29098:	e1a03000 	mov	r3, r0
   2909c:	e54b3005 	strb	r3, [fp, #-5]
   290a0:	ea000019 	b	2910c <f_readdir+0xc8>
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
   290a4:	e3a01000 	mov	r1, #0
   290a8:	e51b0010 	ldr	r0, [fp, #-16]
   290ac:	ebfff45f 	bl	26230 <dir_read>
   290b0:	e1a03000 	mov	r3, r0
   290b4:	e54b3005 	strb	r3, [fp, #-5]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
   290b8:	e55b3005 	ldrb	r3, [fp, #-5]
   290bc:	e3530004 	cmp	r3, #4
   290c0:	1a000001 	bne	290cc <f_readdir+0x88>
   290c4:	e3a03000 	mov	r3, #0
   290c8:	e54b3005 	strb	r3, [fp, #-5]
			if (res == FR_OK) {				/* A valid entry is found */
   290cc:	e55b3005 	ldrb	r3, [fp, #-5]
   290d0:	e3530000 	cmp	r3, #0
   290d4:	1a00000c 	bne	2910c <f_readdir+0xc8>
				get_fileinfo(dp, fno);		/* Get the object information */
   290d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   290dc:	e51b0010 	ldr	r0, [fp, #-16]
   290e0:	ebfff540 	bl	265e8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
   290e4:	e3a01000 	mov	r1, #0
   290e8:	e51b0010 	ldr	r0, [fp, #-16]
   290ec:	ebfff347 	bl	25e10 <dir_next>
   290f0:	e1a03000 	mov	r3, r0
   290f4:	e54b3005 	strb	r3, [fp, #-5]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
   290f8:	e55b3005 	ldrb	r3, [fp, #-5]
   290fc:	e3530004 	cmp	r3, #4
   29100:	1a000001 	bne	2910c <f_readdir+0xc8>
   29104:	e3a03000 	mov	r3, #0
   29108:	e54b3005 	strb	r3, [fp, #-5]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
   2910c:	e55b3005 	ldrb	r3, [fp, #-5]
}
   29110:	e1a00003 	mov	r0, r3
   29114:	e24bd004 	sub	sp, fp, #4
   29118:	e8bd8800 	pop	{fp, pc}

0002911c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
   2911c:	e92d4800 	push	{fp, lr}
   29120:	e28db004 	add	fp, sp, #4
   29124:	e24dd038 	sub	sp, sp, #56	; 0x38
   29128:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   2912c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
   29130:	e24b1034 	sub	r1, fp, #52	; 0x34
   29134:	e24b3038 	sub	r3, fp, #56	; 0x38
   29138:	e3a02000 	mov	r2, #0
   2913c:	e1a00003 	mov	r0, r3
   29140:	ebfff7d0 	bl	27088 <mount_volume>
   29144:	e1a03000 	mov	r3, r0
   29148:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   2914c:	e55b3005 	ldrb	r3, [fp, #-5]
   29150:	e3530000 	cmp	r3, #0
   29154:	1a000017 	bne	291b8 <f_stat+0x9c>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
   29158:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
   2915c:	e24b3034 	sub	r3, fp, #52	; 0x34
   29160:	e1a01002 	mov	r1, r2
   29164:	e1a00003 	mov	r0, r3
   29168:	ebfff63c 	bl	26a60 <follow_path>
   2916c:	e1a03000 	mov	r3, r0
   29170:	e54b3005 	strb	r3, [fp, #-5]
		if (res == FR_OK) {				/* Follow completed */
   29174:	e55b3005 	ldrb	r3, [fp, #-5]
   29178:	e3530000 	cmp	r3, #0
   2917c:	1a00000d 	bne	291b8 <f_stat+0x9c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
   29180:	e55b3009 	ldrb	r3, [fp, #-9]
   29184:	e6af3073 	sxtb	r3, r3
   29188:	e3530000 	cmp	r3, #0
   2918c:	aa000002 	bge	2919c <f_stat+0x80>
				res = FR_INVALID_NAME;
   29190:	e3a03006 	mov	r3, #6
   29194:	e54b3005 	strb	r3, [fp, #-5]
   29198:	ea000006 	b	291b8 <f_stat+0x9c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
   2919c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   291a0:	e3530000 	cmp	r3, #0
   291a4:	0a000003 	beq	291b8 <f_stat+0x9c>
   291a8:	e24b3034 	sub	r3, fp, #52	; 0x34
   291ac:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
   291b0:	e1a00003 	mov	r0, r3
   291b4:	ebfff50b 	bl	265e8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
   291b8:	e55b3005 	ldrb	r3, [fp, #-5]
}
   291bc:	e1a00003 	mov	r0, r3
   291c0:	e24bd004 	sub	sp, fp, #4
   291c4:	e8bd8800 	pop	{fp, pc}

000291c8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to a pointer to return corresponding filesystem object */
)
{
   291c8:	e92d4800 	push	{fp, lr}
   291cc:	e28db004 	add	fp, sp, #4
   291d0:	e24dd040 	sub	sp, sp, #64	; 0x40
   291d4:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   291d8:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
   291dc:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
   291e0:	e24b1020 	sub	r1, fp, #32
   291e4:	e24b3038 	sub	r3, fp, #56	; 0x38
   291e8:	e3a02000 	mov	r2, #0
   291ec:	e1a00003 	mov	r0, r3
   291f0:	ebfff7a4 	bl	27088 <mount_volume>
   291f4:	e1a03000 	mov	r3, r0
   291f8:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   291fc:	e55b3005 	ldrb	r3, [fp, #-5]
   29200:	e3530000 	cmp	r3, #0
   29204:	1a00008d 	bne	29440 <f_getfree+0x278>
		*fatfs = fs;				/* Return ptr to the fs object */
   29208:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2920c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   29210:	e5832000 	str	r2, [r3]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
   29214:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29218:	e5932010 	ldr	r2, [r3, #16]
   2921c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29220:	e5933014 	ldr	r3, [r3, #20]
   29224:	e2433002 	sub	r3, r3, #2
   29228:	e1520003 	cmp	r2, r3
   2922c:	8a000004 	bhi	29244 <f_getfree+0x7c>
			*nclst = fs->free_clst;
   29230:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29234:	e5932010 	ldr	r2, [r3, #16]
   29238:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   2923c:	e5832000 	str	r2, [r3]
   29240:	ea00007e 	b	29440 <f_getfree+0x278>
		} else {
			/* Scan FAT to obtain the correct free cluster count */
			nfree = 0;
   29244:	e3a03000 	mov	r3, #0
   29248:	e50b300c 	str	r3, [fp, #-12]
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
   2924c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29250:	e5d33000 	ldrb	r3, [r3]
   29254:	e3530001 	cmp	r3, #1
   29258:	1a000023 	bne	292ec <f_getfree+0x124>
				clst = 2; obj.fs = fs;
   2925c:	e3a03002 	mov	r3, #2
   29260:	e50b3010 	str	r3, [fp, #-16]
   29264:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29268:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
				do {
					stat = get_fat(&obj, clst);
   2926c:	e24b3030 	sub	r3, fp, #48	; 0x30
   29270:	e51b1010 	ldr	r1, [fp, #-16]
   29274:	e1a00003 	mov	r0, r3
   29278:	ebffef9c 	bl	250f0 <get_fat>
   2927c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
					if (stat == 0xFFFFFFFF) {
   29280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29284:	e3730001 	cmn	r3, #1
   29288:	1a000002 	bne	29298 <f_getfree+0xd0>
						res = FR_DISK_ERR; break;
   2928c:	e3a03001 	mov	r3, #1
   29290:	e54b3005 	strb	r3, [fp, #-5]
   29294:	ea00005a 	b	29404 <f_getfree+0x23c>
					}
					if (stat == 1) {
   29298:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2929c:	e3530001 	cmp	r3, #1
   292a0:	1a000002 	bne	292b0 <f_getfree+0xe8>
						res = FR_INT_ERR; break;
   292a4:	e3a03002 	mov	r3, #2
   292a8:	e54b3005 	strb	r3, [fp, #-5]
   292ac:	ea000054 	b	29404 <f_getfree+0x23c>
					}
					if (stat == 0) nfree++;
   292b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   292b4:	e3530000 	cmp	r3, #0
   292b8:	1a000002 	bne	292c8 <f_getfree+0x100>
   292bc:	e51b300c 	ldr	r3, [fp, #-12]
   292c0:	e2833001 	add	r3, r3, #1
   292c4:	e50b300c 	str	r3, [fp, #-12]
				} while (++clst < fs->n_fatent);
   292c8:	e51b3010 	ldr	r3, [fp, #-16]
   292cc:	e2833001 	add	r3, r3, #1
   292d0:	e50b3010 	str	r3, [fp, #-16]
   292d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   292d8:	e5933014 	ldr	r3, [r3, #20]
   292dc:	e51b2010 	ldr	r2, [fp, #-16]
   292e0:	e1520003 	cmp	r2, r3
   292e4:	3affffe0 	bcc	2926c <f_getfree+0xa4>
   292e8:	ea000045 	b	29404 <f_getfree+0x23c>
						i = (i + 1) % SS(fs);	/* Next byte */
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
   292ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   292f0:	e5933014 	ldr	r3, [r3, #20]
   292f4:	e50b3010 	str	r3, [fp, #-16]
					sect = fs->fatbase;		/* Top of the FAT */
   292f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   292fc:	e5933020 	ldr	r3, [r3, #32]
   29300:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					i = 0;					/* Offset in the sector */
   29304:	e3a03000 	mov	r3, #0
   29308:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {	/* New sector? */
   2930c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29310:	e3530000 	cmp	r3, #0
   29314:	1a00000a 	bne	29344 <f_getfree+0x17c>
							res = move_window(fs, sect++);
   29318:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   2931c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29320:	e2832001 	add	r2, r3, #1
   29324:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   29328:	e1a01003 	mov	r1, r3
   2932c:	ebffeece 	bl	24e6c <move_window>
   29330:	e1a03000 	mov	r3, r0
   29334:	e54b3005 	strb	r3, [fp, #-5]
							if (res != FR_OK) break;
   29338:	e55b3005 	ldrb	r3, [fp, #-5]
   2933c:	e3530000 	cmp	r3, #0
   29340:	1a00002e 	bne	29400 <f_getfree+0x238>
						}
						if (fs->fs_type == FS_FAT16) {
   29344:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29348:	e5d33000 	ldrb	r3, [r3]
   2934c:	e3530002 	cmp	r3, #2
   29350:	1a00000f 	bne	29394 <f_getfree+0x1cc>
							if (ld_word(fs->win + i) == 0) nfree++;	/* FAT16: Is this cluster free? */
   29354:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29358:	e2832030 	add	r2, r3, #48	; 0x30
   2935c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29360:	e0823003 	add	r3, r2, r3
   29364:	e1a00003 	mov	r0, r3
   29368:	ebffedf0 	bl	24b30 <ld_word>
   2936c:	e1a03000 	mov	r3, r0
   29370:	e3530000 	cmp	r3, #0
   29374:	1a000002 	bne	29384 <f_getfree+0x1bc>
   29378:	e51b300c 	ldr	r3, [fp, #-12]
   2937c:	e2833001 	add	r3, r3, #1
   29380:	e50b300c 	str	r3, [fp, #-12]
							i += 2;	/* Next entry */
   29384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29388:	e2833002 	add	r3, r3, #2
   2938c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   29390:	ea00000f 	b	293d4 <f_getfree+0x20c>
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;	/* FAT32: Is this cluster free? */
   29394:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29398:	e2832030 	add	r2, r3, #48	; 0x30
   2939c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   293a0:	e0823003 	add	r3, r2, r3
   293a4:	e1a00003 	mov	r0, r3
   293a8:	ebffedf6 	bl	24b88 <ld_dword>
   293ac:	e1a03000 	mov	r3, r0
   293b0:	e3c3320f 	bic	r3, r3, #-268435456	; 0xf0000000
   293b4:	e3530000 	cmp	r3, #0
   293b8:	1a000002 	bne	293c8 <f_getfree+0x200>
   293bc:	e51b300c 	ldr	r3, [fp, #-12]
   293c0:	e2833001 	add	r3, r3, #1
   293c4:	e50b300c 	str	r3, [fp, #-12]
							i += 4;	/* Next entry */
   293c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   293cc:	e2833004 	add	r3, r3, #4
   293d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
						}
						i %= SS(fs);
   293d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   293d8:	e1a03b83 	lsl	r3, r3, #23
   293dc:	e1a03ba3 	lsr	r3, r3, #23
   293e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
					} while (--clst);
   293e4:	e51b3010 	ldr	r3, [fp, #-16]
   293e8:	e2433001 	sub	r3, r3, #1
   293ec:	e50b3010 	str	r3, [fp, #-16]
   293f0:	e51b3010 	ldr	r3, [fp, #-16]
   293f4:	e3530000 	cmp	r3, #0
   293f8:	1affffc3 	bne	2930c <f_getfree+0x144>
   293fc:	ea000000 	b	29404 <f_getfree+0x23c>
							if (res != FR_OK) break;
   29400:	e320f000 	nop	{0}
				}
			}
			if (res == FR_OK) {		/* Update parameters if succeeded */
   29404:	e55b3005 	ldrb	r3, [fp, #-5]
   29408:	e3530000 	cmp	r3, #0
   2940c:	1a00000b 	bne	29440 <f_getfree+0x278>
				*nclst = nfree;			/* Return the free clusters */
   29410:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   29414:	e51b200c 	ldr	r2, [fp, #-12]
   29418:	e5832000 	str	r2, [r3]
				fs->free_clst = nfree;	/* Now free cluster count is valid */
   2941c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29420:	e51b200c 	ldr	r2, [fp, #-12]
   29424:	e5832010 	str	r2, [r3, #16]
				fs->fsi_flag |= 1;		/* FAT32/exfAT : Allocation information is to be updated */
   29428:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2942c:	e5d32005 	ldrb	r2, [r3, #5]
   29430:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29434:	e3822001 	orr	r2, r2, #1
   29438:	e6ef2072 	uxtb	r2, r2
   2943c:	e5c32005 	strb	r2, [r3, #5]
			}
		}
	}

	LEAVE_FF(fs, res);
   29440:	e55b3005 	ldrb	r3, [fp, #-5]
}
   29444:	e1a00003 	mov	r0, r3
   29448:	e24bd004 	sub	sp, fp, #4
   2944c:	e8bd8800 	pop	{fp, pc}

00029450 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
   29450:	e92d4800 	push	{fp, lr}
   29454:	e28db004 	add	fp, sp, #4
   29458:	e24dd018 	sub	sp, sp, #24
   2945c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   29460:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29464:	e24b2010 	sub	r2, fp, #16
   29468:	e1a01002 	mov	r1, r2
   2946c:	e1a00003 	mov	r0, r3
   29470:	ebfff8cc 	bl	277a8 <validate>
   29474:	e1a03000 	mov	r3, r0
   29478:	e54b3005 	strb	r3, [fp, #-5]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
   2947c:	e55b3005 	ldrb	r3, [fp, #-5]
   29480:	e3530000 	cmp	r3, #0
   29484:	1a000005 	bne	294a0 <f_truncate+0x50>
   29488:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2948c:	e5d33011 	ldrb	r3, [r3, #17]
   29490:	e54b3005 	strb	r3, [fp, #-5]
   29494:	e55b3005 	ldrb	r3, [fp, #-5]
   29498:	e3530000 	cmp	r3, #0
   2949c:	0a000001 	beq	294a8 <f_truncate+0x58>
   294a0:	e55b3005 	ldrb	r3, [fp, #-5]
   294a4:	ea00006e 	b	29664 <f_truncate+0x214>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   294a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   294ac:	e5d33010 	ldrb	r3, [r3, #16]
   294b0:	e2033002 	and	r3, r3, #2
   294b4:	e3530000 	cmp	r3, #0
   294b8:	1a000001 	bne	294c4 <f_truncate+0x74>
   294bc:	e3a03007 	mov	r3, #7
   294c0:	ea000067 	b	29664 <f_truncate+0x214>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
   294c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   294c8:	e5932014 	ldr	r2, [r3, #20]
   294cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   294d0:	e593300c 	ldr	r3, [r3, #12]
   294d4:	e1520003 	cmp	r2, r3
   294d8:	2a000060 	bcs	29660 <f_truncate+0x210>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   294dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   294e0:	e5933014 	ldr	r3, [r3, #20]
   294e4:	e3530000 	cmp	r3, #0
   294e8:	1a00000b 	bne	2951c <f_truncate+0xcc>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   294ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   294f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   294f4:	e5933008 	ldr	r3, [r3, #8]
   294f8:	e3a02000 	mov	r2, #0
   294fc:	e1a01003 	mov	r1, r3
   29500:	ebfff066 	bl	256a0 <remove_chain>
   29504:	e1a03000 	mov	r3, r0
   29508:	e54b3005 	strb	r3, [fp, #-5]
			fp->obj.sclust = 0;
   2950c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29510:	e3a02000 	mov	r2, #0
   29514:	e5832008 	str	r2, [r3, #8]
   29518:	ea000022 	b	295a8 <f_truncate+0x158>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
   2951c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   29520:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29524:	e5933018 	ldr	r3, [r3, #24]
   29528:	e1a01003 	mov	r1, r3
   2952c:	e1a00002 	mov	r0, r2
   29530:	ebffeeee 	bl	250f0 <get_fat>
   29534:	e50b000c 	str	r0, [fp, #-12]
			res = FR_OK;
   29538:	e3a03000 	mov	r3, #0
   2953c:	e54b3005 	strb	r3, [fp, #-5]
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   29540:	e51b300c 	ldr	r3, [fp, #-12]
   29544:	e3730001 	cmn	r3, #1
   29548:	1a000001 	bne	29554 <f_truncate+0x104>
   2954c:	e3a03001 	mov	r3, #1
   29550:	e54b3005 	strb	r3, [fp, #-5]
			if (ncl == 1) res = FR_INT_ERR;
   29554:	e51b300c 	ldr	r3, [fp, #-12]
   29558:	e3530001 	cmp	r3, #1
   2955c:	1a000001 	bne	29568 <f_truncate+0x118>
   29560:	e3a03002 	mov	r3, #2
   29564:	e54b3005 	strb	r3, [fp, #-5]
			if (res == FR_OK && ncl < fs->n_fatent) {
   29568:	e55b3005 	ldrb	r3, [fp, #-5]
   2956c:	e3530000 	cmp	r3, #0
   29570:	1a00000c 	bne	295a8 <f_truncate+0x158>
   29574:	e51b3010 	ldr	r3, [fp, #-16]
   29578:	e5933014 	ldr	r3, [r3, #20]
   2957c:	e51b200c 	ldr	r2, [fp, #-12]
   29580:	e1520003 	cmp	r2, r3
   29584:	2a000007 	bcs	295a8 <f_truncate+0x158>
				res = remove_chain(&fp->obj, ncl, fp->clust);
   29588:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2958c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29590:	e5933018 	ldr	r3, [r3, #24]
   29594:	e1a02003 	mov	r2, r3
   29598:	e51b100c 	ldr	r1, [fp, #-12]
   2959c:	ebfff03f 	bl	256a0 <remove_chain>
   295a0:	e1a03000 	mov	r3, r0
   295a4:	e54b3005 	strb	r3, [fp, #-5]
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   295a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   295ac:	e5932014 	ldr	r2, [r3, #20]
   295b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   295b4:	e583200c 	str	r2, [r3, #12]
		fp->flag |= FA_MODIFIED;
   295b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   295bc:	e5d33010 	ldrb	r3, [r3, #16]
   295c0:	e3833040 	orr	r3, r3, #64	; 0x40
   295c4:	e6ef2073 	uxtb	r2, r3
   295c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   295cc:	e5c32010 	strb	r2, [r3, #16]
#if !FF_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
   295d0:	e55b3005 	ldrb	r3, [fp, #-5]
   295d4:	e3530000 	cmp	r3, #0
   295d8:	1a000018 	bne	29640 <f_truncate+0x1f0>
   295dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   295e0:	e5d33010 	ldrb	r3, [r3, #16]
   295e4:	e6af3073 	sxtb	r3, r3
   295e8:	e3530000 	cmp	r3, #0
   295ec:	aa000013 	bge	29640 <f_truncate+0x1f0>
			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
   295f0:	e51b3010 	ldr	r3, [fp, #-16]
   295f4:	e5d30001 	ldrb	r0, [r3, #1]
   295f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   295fc:	e2831028 	add	r1, r3, #40	; 0x28
   29600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29604:	e593201c 	ldr	r2, [r3, #28]
   29608:	e3a03001 	mov	r3, #1
   2960c:	eb00071d 	bl	2b288 <disk_write>
   29610:	e1a03000 	mov	r3, r0
   29614:	e3530000 	cmp	r3, #0
   29618:	0a000002 	beq	29628 <f_truncate+0x1d8>
				res = FR_DISK_ERR;
   2961c:	e3a03001 	mov	r3, #1
   29620:	e54b3005 	strb	r3, [fp, #-5]
   29624:	ea000005 	b	29640 <f_truncate+0x1f0>
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
   29628:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2962c:	e5d33010 	ldrb	r3, [r3, #16]
   29630:	e203307f 	and	r3, r3, #127	; 0x7f
   29634:	e6ef2073 	uxtb	r2, r3
   29638:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2963c:	e5c32010 	strb	r2, [r3, #16]
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
   29640:	e55b3005 	ldrb	r3, [fp, #-5]
   29644:	e3530000 	cmp	r3, #0
   29648:	0a000004 	beq	29660 <f_truncate+0x210>
   2964c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29650:	e55b2005 	ldrb	r2, [fp, #-5]
   29654:	e5c32011 	strb	r2, [r3, #17]
   29658:	e55b3005 	ldrb	r3, [fp, #-5]
   2965c:	ea000000 	b	29664 <f_truncate+0x214>
	}

	LEAVE_FF(fs, res);
   29660:	e55b3005 	ldrb	r3, [fp, #-5]
}
   29664:	e1a00003 	mov	r0, r3
   29668:	e24bd004 	sub	sp, fp, #4
   2966c:	e8bd8800 	pop	{fp, pc}

00029670 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
   29670:	e92d4800 	push	{fp, lr}
   29674:	e28db004 	add	fp, sp, #4
   29678:	e24dd070 	sub	sp, sp, #112	; 0x70
   2967c:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
	FRESULT res;
	FATFS *fs;
	DIR dj, sdj;
	DWORD dclst = 0;
   29680:	e3a03000 	mov	r3, #0
   29684:	e50b300c 	str	r3, [fp, #-12]
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
   29688:	e24b1010 	sub	r1, fp, #16
   2968c:	e24b3070 	sub	r3, fp, #112	; 0x70
   29690:	e3a02002 	mov	r2, #2
   29694:	e1a00003 	mov	r0, r3
   29698:	ebfff67a 	bl	27088 <mount_volume>
   2969c:	e1a03000 	mov	r3, r0
   296a0:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   296a4:	e55b3005 	ldrb	r3, [fp, #-5]
   296a8:	e3530000 	cmp	r3, #0
   296ac:	1a00005f 	bne	29830 <f_unlink+0x1c0>
		dj.obj.fs = fs;
   296b0:	e51b3010 	ldr	r3, [fp, #-16]
   296b4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
   296b8:	e51b2070 	ldr	r2, [fp, #-112]	; 0xffffff90
   296bc:	e24b303c 	sub	r3, fp, #60	; 0x3c
   296c0:	e1a01002 	mov	r1, r2
   296c4:	e1a00003 	mov	r0, r3
   296c8:	ebfff4e4 	bl	26a60 <follow_path>
   296cc:	e1a03000 	mov	r3, r0
   296d0:	e54b3005 	strb	r3, [fp, #-5]
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK
		if (res == FR_OK) res = chk_share(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
   296d4:	e55b3005 	ldrb	r3, [fp, #-5]
   296d8:	e3530000 	cmp	r3, #0
   296dc:	1a000053 	bne	29830 <f_unlink+0x1c0>
			if (dj.fn[NSFLAG] & NS_NONAME) {
   296e0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   296e4:	e6af3073 	sxtb	r3, r3
   296e8:	e3530000 	cmp	r3, #0
   296ec:	aa000002 	bge	296fc <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
   296f0:	e3a03006 	mov	r3, #6
   296f4:	e54b3005 	strb	r3, [fp, #-5]
   296f8:	ea000005 	b	29714 <f_unlink+0xa4>
			} else {
				if (dj.obj.attr & AM_RDO) {
   296fc:	e55b3036 	ldrb	r3, [fp, #-54]	; 0xffffffca
   29700:	e2033001 	and	r3, r3, #1
   29704:	e3530000 	cmp	r3, #0
   29708:	0a000001 	beq	29714 <f_unlink+0xa4>
					res = FR_DENIED;		/* Cannot remove R/O object */
   2970c:	e3a03007 	mov	r3, #7
   29710:	e54b3005 	strb	r3, [fp, #-5]
				}
			}
			if (res == FR_OK) {
   29714:	e55b3005 	ldrb	r3, [fp, #-5]
   29718:	e3530000 	cmp	r3, #0
   2971c:	1a000026 	bne	297bc <f_unlink+0x14c>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
   29720:	e51b3010 	ldr	r3, [fp, #-16]
   29724:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   29728:	e1a01002 	mov	r1, r2
   2972c:	e1a00003 	mov	r0, r3
   29730:	ebfff286 	bl	26150 <ld_clust>
   29734:	e50b000c 	str	r0, [fp, #-12]
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
   29738:	e55b3036 	ldrb	r3, [fp, #-54]	; 0xffffffca
   2973c:	e2033010 	and	r3, r3, #16
   29740:	e3530000 	cmp	r3, #0
   29744:	0a00001c 	beq	297bc <f_unlink+0x14c>
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;			/* Open the sub-directory */
   29748:	e51b3010 	ldr	r3, [fp, #-16]
   2974c:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
						sdj.obj.sclust = dclst;
   29750:	e51b300c 	ldr	r3, [fp, #-12]
   29754:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
   29758:	e24b3068 	sub	r3, fp, #104	; 0x68
   2975c:	e3a01000 	mov	r1, #0
   29760:	e1a00003 	mov	r0, r3
   29764:	ebfff135 	bl	25c40 <dir_sdi>
   29768:	e1a03000 	mov	r3, r0
   2976c:	e54b3005 	strb	r3, [fp, #-5]
						if (res == FR_OK) {
   29770:	e55b3005 	ldrb	r3, [fp, #-5]
   29774:	e3530000 	cmp	r3, #0
   29778:	1a00000f 	bne	297bc <f_unlink+0x14c>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
   2977c:	e24b3068 	sub	r3, fp, #104	; 0x68
   29780:	e3a01000 	mov	r1, #0
   29784:	e1a00003 	mov	r0, r3
   29788:	ebfff2a8 	bl	26230 <dir_read>
   2978c:	e1a03000 	mov	r3, r0
   29790:	e54b3005 	strb	r3, [fp, #-5]
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
   29794:	e55b3005 	ldrb	r3, [fp, #-5]
   29798:	e3530000 	cmp	r3, #0
   2979c:	1a000001 	bne	297a8 <f_unlink+0x138>
   297a0:	e3a03007 	mov	r3, #7
   297a4:	e54b3005 	strb	r3, [fp, #-5]
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
   297a8:	e55b3005 	ldrb	r3, [fp, #-5]
   297ac:	e3530004 	cmp	r3, #4
   297b0:	1a000001 	bne	297bc <f_unlink+0x14c>
   297b4:	e3a03000 	mov	r3, #0
   297b8:	e54b3005 	strb	r3, [fp, #-5]
						}
					}
				}
			}
			if (res == FR_OK) {
   297bc:	e55b3005 	ldrb	r3, [fp, #-5]
   297c0:	e3530000 	cmp	r3, #0
   297c4:	1a000019 	bne	29830 <f_unlink+0x1c0>
				res = dir_remove(&dj);			/* Remove the directory entry */
   297c8:	e24b303c 	sub	r3, fp, #60	; 0x3c
   297cc:	e1a00003 	mov	r0, r3
   297d0:	ebfff368 	bl	26578 <dir_remove>
   297d4:	e1a03000 	mov	r3, r0
   297d8:	e54b3005 	strb	r3, [fp, #-5]
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
   297dc:	e55b3005 	ldrb	r3, [fp, #-5]
   297e0:	e3530000 	cmp	r3, #0
   297e4:	1a000009 	bne	29810 <f_unlink+0x1a0>
   297e8:	e51b300c 	ldr	r3, [fp, #-12]
   297ec:	e3530000 	cmp	r3, #0
   297f0:	0a000006 	beq	29810 <f_unlink+0x1a0>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
   297f4:	e24b303c 	sub	r3, fp, #60	; 0x3c
   297f8:	e3a02000 	mov	r2, #0
   297fc:	e51b100c 	ldr	r1, [fp, #-12]
   29800:	e1a00003 	mov	r0, r3
   29804:	ebffefa5 	bl	256a0 <remove_chain>
   29808:	e1a03000 	mov	r3, r0
   2980c:	e54b3005 	strb	r3, [fp, #-5]
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
   29810:	e55b3005 	ldrb	r3, [fp, #-5]
   29814:	e3530000 	cmp	r3, #0
   29818:	1a000004 	bne	29830 <f_unlink+0x1c0>
   2981c:	e51b3010 	ldr	r3, [fp, #-16]
   29820:	e1a00003 	mov	r0, r3
   29824:	ebffedb8 	bl	24f0c <sync_fs>
   29828:	e1a03000 	mov	r3, r0
   2982c:	e54b3005 	strb	r3, [fp, #-5]
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
   29830:	e55b3005 	ldrb	r3, [fp, #-5]
}
   29834:	e1a00003 	mov	r0, r3
   29838:	e24bd004 	sub	sp, fp, #4
   2983c:	e8bd8800 	pop	{fp, pc}

00029840 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
   29840:	e92d4800 	push	{fp, lr}
   29844:	e28db004 	add	fp, sp, #4
   29848:	e24dd058 	sub	sp, sp, #88	; 0x58
   2984c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
	FFOBJID sobj;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
   29850:	e24b1018 	sub	r1, fp, #24
   29854:	e24b3058 	sub	r3, fp, #88	; 0x58
   29858:	e3a02002 	mov	r2, #2
   2985c:	e1a00003 	mov	r0, r3
   29860:	ebfff608 	bl	27088 <mount_volume>
   29864:	e1a03000 	mov	r3, r0
   29868:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   2986c:	e55b3005 	ldrb	r3, [fp, #-5]
   29870:	e3530000 	cmp	r3, #0
   29874:	1a00008c 	bne	29aac <f_mkdir+0x26c>
		dj.obj.fs = fs;
   29878:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2987c:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
   29880:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
   29884:	e24b3044 	sub	r3, fp, #68	; 0x44
   29888:	e1a01002 	mov	r1, r2
   2988c:	e1a00003 	mov	r0, r3
   29890:	ebfff472 	bl	26a60 <follow_path>
   29894:	e1a03000 	mov	r3, r0
   29898:	e54b3005 	strb	r3, [fp, #-5]
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
   2989c:	e55b3005 	ldrb	r3, [fp, #-5]
   298a0:	e3530000 	cmp	r3, #0
   298a4:	1a000001 	bne	298b0 <f_mkdir+0x70>
   298a8:	e3a03008 	mov	r3, #8
   298ac:	e54b3005 	strb	r3, [fp, #-5]
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
   298b0:	e55b3005 	ldrb	r3, [fp, #-5]
   298b4:	e3530004 	cmp	r3, #4
   298b8:	1a00007b 	bne	29aac <f_mkdir+0x26c>
			sobj.fs = fs;						/* New object id to create a new chain */
   298bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   298c0:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
   298c4:	e24b3054 	sub	r3, fp, #84	; 0x54
   298c8:	e3a01000 	mov	r1, #0
   298cc:	e1a00003 	mov	r0, r3
   298d0:	ebffefd0 	bl	25818 <create_chain>
   298d4:	e50b000c 	str	r0, [fp, #-12]
			res = FR_OK;
   298d8:	e3a03000 	mov	r3, #0
   298dc:	e54b3005 	strb	r3, [fp, #-5]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
   298e0:	e51b300c 	ldr	r3, [fp, #-12]
   298e4:	e3530000 	cmp	r3, #0
   298e8:	1a000001 	bne	298f4 <f_mkdir+0xb4>
   298ec:	e3a03007 	mov	r3, #7
   298f0:	e54b3005 	strb	r3, [fp, #-5]
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
   298f4:	e51b300c 	ldr	r3, [fp, #-12]
   298f8:	e3530001 	cmp	r3, #1
   298fc:	1a000001 	bne	29908 <f_mkdir+0xc8>
   29900:	e3a03002 	mov	r3, #2
   29904:	e54b3005 	strb	r3, [fp, #-5]
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
   29908:	e51b300c 	ldr	r3, [fp, #-12]
   2990c:	e3730001 	cmn	r3, #1
   29910:	1a000001 	bne	2991c <f_mkdir+0xdc>
   29914:	e3a03001 	mov	r3, #1
   29918:	e54b3005 	strb	r3, [fp, #-5]
			tm = GET_FATTIME();
   2991c:	e59f3198 	ldr	r3, [pc, #408]	; 29abc <f_mkdir+0x27c>
   29920:	e50b3010 	str	r3, [fp, #-16]
			if (res == FR_OK) {
   29924:	e55b3005 	ldrb	r3, [fp, #-5]
   29928:	e3530000 	cmp	r3, #0
   2992c:	1a00003c 	bne	29a24 <f_mkdir+0x1e4>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
   29930:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29934:	e51b100c 	ldr	r1, [fp, #-12]
   29938:	e1a00003 	mov	r0, r3
   2993c:	ebfff07e 	bl	25b3c <dir_clear>
   29940:	e1a03000 	mov	r3, r0
   29944:	e54b3005 	strb	r3, [fp, #-5]
				if (res == FR_OK) {
   29948:	e55b3005 	ldrb	r3, [fp, #-5]
   2994c:	e3530000 	cmp	r3, #0
   29950:	1a000033 	bne	29a24 <f_mkdir+0x1e4>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
   29954:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29958:	e2833030 	add	r3, r3, #48	; 0x30
   2995c:	e3a0200b 	mov	r2, #11
   29960:	e3a01020 	mov	r1, #32
   29964:	e1a00003 	mov	r0, r3
   29968:	eb000770 	bl	2b730 <memset>
						fs->win[DIR_Name] = '.';
   2996c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29970:	e3a0202e 	mov	r2, #46	; 0x2e
   29974:	e5c32030 	strb	r2, [r3, #48]	; 0x30
						fs->win[DIR_Attr] = AM_DIR;
   29978:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2997c:	e3a02010 	mov	r2, #16
   29980:	e5c3203b 	strb	r2, [r3, #59]	; 0x3b
						st_dword(fs->win + DIR_ModTime, tm);
   29984:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29988:	e2833030 	add	r3, r3, #48	; 0x30
   2998c:	e2833016 	add	r3, r3, #22
   29990:	e51b1010 	ldr	r1, [fp, #-16]
   29994:	e1a00003 	mov	r0, r3
   29998:	ebffecb4 	bl	24c70 <st_dword>
						st_clust(fs, fs->win, dcl);
   2999c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   299a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   299a4:	e2833030 	add	r3, r3, #48	; 0x30
   299a8:	e51b200c 	ldr	r2, [fp, #-12]
   299ac:	e1a01003 	mov	r1, r3
   299b0:	ebfff202 	bl	261c0 <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
   299b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   299b8:	e2833030 	add	r3, r3, #48	; 0x30
   299bc:	e2830020 	add	r0, r3, #32
   299c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   299c4:	e2833030 	add	r3, r3, #48	; 0x30
   299c8:	e3a02020 	mov	r2, #32
   299cc:	e1a01003 	mov	r1, r3
   299d0:	eb00070e 	bl	2b610 <memcpy>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   299d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   299d8:	e3a0202e 	mov	r2, #46	; 0x2e
   299dc:	e5c32051 	strb	r2, [r3, #81]	; 0x51
   299e0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   299e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
						st_clust(fs, fs->win + SZDIRE, pcl);
   299e8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   299ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   299f0:	e2833030 	add	r3, r3, #48	; 0x30
   299f4:	e2833020 	add	r3, r3, #32
   299f8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   299fc:	e1a01003 	mov	r1, r3
   29a00:	ebfff1ee 	bl	261c0 <st_clust>
						fs->wflag = 1;
   29a04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29a08:	e3a02001 	mov	r2, #1
   29a0c:	e5c32004 	strb	r2, [r3, #4]
					}
					res = dir_register(&dj);	/* Register the object to the parent directory */
   29a10:	e24b3044 	sub	r3, fp, #68	; 0x44
   29a14:	e1a00003 	mov	r0, r3
   29a18:	ebfff2a9 	bl	264c4 <dir_register>
   29a1c:	e1a03000 	mov	r3, r0
   29a20:	e54b3005 	strb	r3, [fp, #-5]
				}
			}
			if (res == FR_OK) {
   29a24:	e55b3005 	ldrb	r3, [fp, #-5]
   29a28:	e3530000 	cmp	r3, #0
   29a2c:	1a000019 	bne	29a98 <f_mkdir+0x258>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
   29a30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   29a34:	e2833016 	add	r3, r3, #22
   29a38:	e51b1010 	ldr	r1, [fp, #-16]
   29a3c:	e1a00003 	mov	r0, r3
   29a40:	ebffec8a 	bl	24c70 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
   29a44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29a48:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   29a4c:	e51b200c 	ldr	r2, [fp, #-12]
   29a50:	e1a00003 	mov	r0, r3
   29a54:	ebfff1d9 	bl	261c0 <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
   29a58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   29a5c:	e283300b 	add	r3, r3, #11
   29a60:	e3a02010 	mov	r2, #16
   29a64:	e5c32000 	strb	r2, [r3]
					fs->wflag = 1;
   29a68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29a6c:	e3a02001 	mov	r2, #1
   29a70:	e5c32004 	strb	r2, [r3, #4]
				}
				if (res == FR_OK) {
   29a74:	e55b3005 	ldrb	r3, [fp, #-5]
   29a78:	e3530000 	cmp	r3, #0
   29a7c:	1a00000a 	bne	29aac <f_mkdir+0x26c>
					res = sync_fs(fs);
   29a80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29a84:	e1a00003 	mov	r0, r3
   29a88:	ebffed1f 	bl	24f0c <sync_fs>
   29a8c:	e1a03000 	mov	r3, r0
   29a90:	e54b3005 	strb	r3, [fp, #-5]
   29a94:	ea000004 	b	29aac <f_mkdir+0x26c>
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
   29a98:	e24b3054 	sub	r3, fp, #84	; 0x54
   29a9c:	e3a02000 	mov	r2, #0
   29aa0:	e51b100c 	ldr	r1, [fp, #-12]
   29aa4:	e1a00003 	mov	r0, r3
   29aa8:	ebffeefc 	bl	256a0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
   29aac:	e55b3005 	ldrb	r3, [fp, #-5]
}
   29ab0:	e1a00003 	mov	r0, r3
   29ab4:	e24bd004 	sub	sp, fp, #4
   29ab8:	e8bd8800 	pop	{fp, pc}
   29abc:	56210000 	strtpl	r0, [r1], -r0

00029ac0 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
   29ac0:	e92d4810 	push	{r4, fp, lr}
   29ac4:	e28db008 	add	fp, sp, #8
   29ac8:	e24dd094 	sub	sp, sp, #148	; 0x94
   29acc:	e50b0098 	str	r0, [fp, #-152]	; 0xffffff68
   29ad0:	e50b109c 	str	r1, [fp, #-156]	; 0xffffff64
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
   29ad4:	e24b309c 	sub	r3, fp, #156	; 0x9c
   29ad8:	e1a00003 	mov	r0, r3
   29adc:	ebfff443 	bl	26bf0 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
   29ae0:	e24b101c 	sub	r1, fp, #28
   29ae4:	e24b3098 	sub	r3, fp, #152	; 0x98
   29ae8:	e3a02002 	mov	r2, #2
   29aec:	e1a00003 	mov	r0, r3
   29af0:	ebfff564 	bl	27088 <mount_volume>
   29af4:	e1a03000 	mov	r3, r0
   29af8:	e54b300d 	strb	r3, [fp, #-13]
	if (res == FR_OK) {
   29afc:	e55b300d 	ldrb	r3, [fp, #-13]
   29b00:	e3530000 	cmp	r3, #0
   29b04:	1a0000ac 	bne	29dbc <f_rename+0x2fc>
		djo.obj.fs = fs;
   29b08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29b0c:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);			/* Check old object */
   29b10:	e51b2098 	ldr	r2, [fp, #-152]	; 0xffffff68
   29b14:	e24b3048 	sub	r3, fp, #72	; 0x48
   29b18:	e1a01002 	mov	r1, r2
   29b1c:	e1a00003 	mov	r0, r3
   29b20:	ebfff3ce 	bl	26a60 <follow_path>
   29b24:	e1a03000 	mov	r3, r0
   29b28:	e54b300d 	strb	r3, [fp, #-13]
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   29b2c:	e55b300d 	ldrb	r3, [fp, #-13]
   29b30:	e3530000 	cmp	r3, #0
   29b34:	1a000005 	bne	29b50 <f_rename+0x90>
   29b38:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   29b3c:	e20330a0 	and	r3, r3, #160	; 0xa0
   29b40:	e3530000 	cmp	r3, #0
   29b44:	0a000001 	beq	29b50 <f_rename+0x90>
   29b48:	e3a03006 	mov	r3, #6
   29b4c:	e54b300d 	strb	r3, [fp, #-13]
#if FF_FS_LOCK
		if (res == FR_OK) {
			res = chk_share(&djo, 2);
		}
#endif
		if (res == FR_OK) {					/* Object to be renamed is found */
   29b50:	e55b300d 	ldrb	r3, [fp, #-13]
   29b54:	e3530000 	cmp	r3, #0
   29b58:	1a000097 	bne	29dbc <f_rename+0x2fc>
					}
				}
			} else
#endif
			{	/* At FAT/FAT32 volume */
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
   29b5c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   29b60:	e24bc094 	sub	ip, fp, #148	; 0x94
   29b64:	e1a0e003 	mov	lr, r3
   29b68:	e59e0000 	ldr	r0, [lr]
   29b6c:	e59e1004 	ldr	r1, [lr, #4]
   29b70:	e59e2008 	ldr	r2, [lr, #8]
   29b74:	e59e300c 	ldr	r3, [lr, #12]
   29b78:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   29b7c:	e59e0010 	ldr	r0, [lr, #16]
   29b80:	e59e1014 	ldr	r1, [lr, #20]
   29b84:	e59e2018 	ldr	r2, [lr, #24]
   29b88:	e59e301c 	ldr	r3, [lr, #28]
   29b8c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
   29b90:	e24bc074 	sub	ip, fp, #116	; 0x74
   29b94:	e24be048 	sub	lr, fp, #72	; 0x48
   29b98:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   29b9c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   29ba0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   29ba4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   29ba8:	e89e0007 	ldm	lr, {r0, r1, r2}
   29bac:	e88c0007 	stm	ip, {r0, r1, r2}
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   29bb0:	e51b209c 	ldr	r2, [fp, #-156]	; 0xffffff64
   29bb4:	e24b3074 	sub	r3, fp, #116	; 0x74
   29bb8:	e1a01002 	mov	r1, r2
   29bbc:	e1a00003 	mov	r0, r3
   29bc0:	ebfff3a6 	bl	26a60 <follow_path>
   29bc4:	e1a03000 	mov	r3, r0
   29bc8:	e54b300d 	strb	r3, [fp, #-13]
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   29bcc:	e55b300d 	ldrb	r3, [fp, #-13]
   29bd0:	e3530000 	cmp	r3, #0
   29bd4:	1a00000b 	bne	29c08 <f_rename+0x148>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   29bd8:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
   29bdc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   29be0:	e1520003 	cmp	r2, r3
   29be4:	1a000005 	bne	29c00 <f_rename+0x140>
   29be8:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
   29bec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   29bf0:	e1520003 	cmp	r2, r3
   29bf4:	1a000001 	bne	29c00 <f_rename+0x140>
   29bf8:	e3a03004 	mov	r3, #4
   29bfc:	ea000000 	b	29c04 <f_rename+0x144>
   29c00:	e3a03008 	mov	r3, #8
   29c04:	e54b300d 	strb	r3, [fp, #-13]
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   29c08:	e55b300d 	ldrb	r3, [fp, #-13]
   29c0c:	e3530004 	cmp	r3, #4
   29c10:	1a000059 	bne	29d7c <f_rename+0x2bc>
					res = dir_register(&djn);			/* Register the new entry */
   29c14:	e24b3074 	sub	r3, fp, #116	; 0x74
   29c18:	e1a00003 	mov	r0, r3
   29c1c:	ebfff228 	bl	264c4 <dir_register>
   29c20:	e1a03000 	mov	r3, r0
   29c24:	e54b300d 	strb	r3, [fp, #-13]
					if (res == FR_OK) {
   29c28:	e55b300d 	ldrb	r3, [fp, #-13]
   29c2c:	e3530000 	cmp	r3, #0
   29c30:	1a000051 	bne	29d7c <f_rename+0x2bc>
						dir = djn.dir;					/* Copy directory entry of the object except name */
   29c34:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   29c38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
						memcpy(dir + 13, buf + 13, SZDIRE - 13);
   29c3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29c40:	e283000d 	add	r0, r3, #13
   29c44:	e24b3094 	sub	r3, fp, #148	; 0x94
   29c48:	e283300d 	add	r3, r3, #13
   29c4c:	e3a02013 	mov	r2, #19
   29c50:	e1a01003 	mov	r1, r3
   29c54:	eb00066d 	bl	2b610 <memcpy>
						dir[DIR_Attr] = buf[DIR_Attr];
   29c58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29c5c:	e283300b 	add	r3, r3, #11
   29c60:	e55b2089 	ldrb	r2, [fp, #-137]	; 0xffffff77
   29c64:	e5c32000 	strb	r2, [r3]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   29c68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29c6c:	e283300b 	add	r3, r3, #11
   29c70:	e5d33000 	ldrb	r3, [r3]
   29c74:	e2033010 	and	r3, r3, #16
   29c78:	e3530000 	cmp	r3, #0
   29c7c:	1a000007 	bne	29ca0 <f_rename+0x1e0>
   29c80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29c84:	e283300b 	add	r3, r3, #11
   29c88:	e5d32000 	ldrb	r2, [r3]
   29c8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29c90:	e283300b 	add	r3, r3, #11
   29c94:	e3822020 	orr	r2, r2, #32
   29c98:	e6ef2072 	uxtb	r2, r2
   29c9c:	e5c32000 	strb	r2, [r3]
						fs->wflag = 1;
   29ca0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29ca4:	e3a02001 	mov	r2, #1
   29ca8:	e5c32004 	strb	r2, [r3, #4]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
   29cac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29cb0:	e283300b 	add	r3, r3, #11
   29cb4:	e5d33000 	ldrb	r3, [r3]
   29cb8:	e2033010 	and	r3, r3, #16
   29cbc:	e3530000 	cmp	r3, #0
   29cc0:	0a00002d 	beq	29d7c <f_rename+0x2bc>
   29cc4:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
   29cc8:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
   29ccc:	e1520003 	cmp	r2, r3
   29cd0:	0a000029 	beq	29d7c <f_rename+0x2bc>
							sect = clst2sect(fs, ld_clust(fs, dir));
   29cd4:	e51b401c 	ldr	r4, [fp, #-28]	; 0xffffffe4
   29cd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29cdc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   29ce0:	e1a00003 	mov	r0, r3
   29ce4:	ebfff119 	bl	26150 <ld_clust>
   29ce8:	e1a03000 	mov	r3, r0
   29cec:	e1a01003 	mov	r1, r3
   29cf0:	e1a00004 	mov	r0, r4
   29cf4:	ebffece1 	bl	25080 <clst2sect>
   29cf8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
							if (sect == 0) {
   29cfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29d00:	e3530000 	cmp	r3, #0
   29d04:	1a000002 	bne	29d14 <f_rename+0x254>
								res = FR_INT_ERR;
   29d08:	e3a03002 	mov	r3, #2
   29d0c:	e54b300d 	strb	r3, [fp, #-13]
   29d10:	ea000019 	b	29d7c <f_rename+0x2bc>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
   29d14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29d18:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   29d1c:	e1a00003 	mov	r0, r3
   29d20:	ebffec51 	bl	24e6c <move_window>
   29d24:	e1a03000 	mov	r3, r0
   29d28:	e54b300d 	strb	r3, [fp, #-13]
								dir = fs->win + SZDIRE * 1;	/* Pointer to .. entry */
   29d2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29d30:	e2833030 	add	r3, r3, #48	; 0x30
   29d34:	e2833020 	add	r3, r3, #32
   29d38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
								if (res == FR_OK && dir[1] == '.') {
   29d3c:	e55b300d 	ldrb	r3, [fp, #-13]
   29d40:	e3530000 	cmp	r3, #0
   29d44:	1a00000c 	bne	29d7c <f_rename+0x2bc>
   29d48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29d4c:	e2833001 	add	r3, r3, #1
   29d50:	e5d33000 	ldrb	r3, [r3]
   29d54:	e353002e 	cmp	r3, #46	; 0x2e
   29d58:	1a000007 	bne	29d7c <f_rename+0x2bc>
									st_clust(fs, dir, djn.obj.sclust);
   29d5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29d60:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
   29d64:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   29d68:	e1a00003 	mov	r0, r3
   29d6c:	ebfff113 	bl	261c0 <st_clust>
									fs->wflag = 1;
   29d70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29d74:	e3a02001 	mov	r2, #1
   29d78:	e5c32004 	strb	r2, [r3, #4]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
   29d7c:	e55b300d 	ldrb	r3, [fp, #-13]
   29d80:	e3530000 	cmp	r3, #0
   29d84:	1a00000c 	bne	29dbc <f_rename+0x2fc>
				res = dir_remove(&djo);		/* Remove old entry */
   29d88:	e24b3048 	sub	r3, fp, #72	; 0x48
   29d8c:	e1a00003 	mov	r0, r3
   29d90:	ebfff1f8 	bl	26578 <dir_remove>
   29d94:	e1a03000 	mov	r3, r0
   29d98:	e54b300d 	strb	r3, [fp, #-13]
				if (res == FR_OK) {
   29d9c:	e55b300d 	ldrb	r3, [fp, #-13]
   29da0:	e3530000 	cmp	r3, #0
   29da4:	1a000004 	bne	29dbc <f_rename+0x2fc>
					res = sync_fs(fs);
   29da8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29dac:	e1a00003 	mov	r0, r3
   29db0:	ebffec55 	bl	24f0c <sync_fs>
   29db4:	e1a03000 	mov	r3, r0
   29db8:	e54b300d 	strb	r3, [fp, #-13]
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
   29dbc:	e55b300d 	ldrb	r3, [fp, #-13]
}
   29dc0:	e1a00003 	mov	r0, r3
   29dc4:	e24bd008 	sub	sp, fp, #8
   29dc8:	e8bd8810 	pop	{r4, fp, pc}

00029dcc <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
   29dcc:	e92d4800 	push	{fp, lr}
   29dd0:	e28db004 	add	fp, sp, #4
   29dd4:	e24dd038 	sub	sp, sp, #56	; 0x38
   29dd8:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
   29ddc:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
   29de0:	e1a03000 	mov	r3, r0
   29de4:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3
   29de8:	e1a03002 	mov	r3, r2
   29dec:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   29df0:	e24b202c 	sub	r2, fp, #44	; 0x2c
   29df4:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
   29df8:	e3a01001 	mov	r1, #1
   29dfc:	e1a00003 	mov	r0, r3
   29e00:	eb00054d 	bl	2b33c <disk_ioctl>
   29e04:	e1a03000 	mov	r3, r0
   29e08:	e3530000 	cmp	r3, #0
   29e0c:	0a000001 	beq	29e18 <create_partition+0x4c>
   29e10:	e3a03001 	mov	r3, #1
   29e14:	ea0000fd 	b	2a210 <create_partition+0x444>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
   29e18:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   29e1c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
   29e20:	e3a0303f 	mov	r3, #63	; 0x3f
   29e24:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
   29e28:	e3a03008 	mov	r3, #8
   29e2c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   29e30:	ea000002 	b	29e40 <create_partition+0x74>
   29e34:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29e38:	e1a03083 	lsl	r3, r3, #1
   29e3c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   29e40:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29e44:	e3530000 	cmp	r3, #0
   29e48:	0a00000c 	beq	29e80 <create_partition+0xb4>
   29e4c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29e50:	e1a01003 	mov	r1, r3
   29e54:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   29e58:	eb00057b 	bl	2b44c <__udivsi3>
   29e5c:	e1a03000 	mov	r3, r0
   29e60:	e1a02003 	mov	r2, r3
   29e64:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   29e68:	e1a01003 	mov	r1, r3
   29e6c:	e1a00002 	mov	r0, r2
   29e70:	eb000575 	bl	2b44c <__udivsi3>
   29e74:	e1a03000 	mov	r3, r0
   29e78:	e3530b01 	cmp	r3, #1024	; 0x400
   29e7c:	8affffec 	bhi	29e34 <create_partition+0x68>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
   29e80:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29e84:	e3530000 	cmp	r3, #0
   29e88:	1a000001 	bne	29e94 <create_partition+0xc8>
   29e8c:	e3e03000 	mvn	r3, #0
   29e90:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
   29e94:	e3a02c02 	mov	r2, #512	; 0x200
   29e98:	e3a01000 	mov	r1, #0
   29e9c:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   29ea0:	eb000622 	bl	2b730 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
   29ea4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   29ea8:	e2833f6f 	add	r3, r3, #444	; 0x1bc
   29eac:	e2833002 	add	r3, r3, #2
   29eb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   29eb4:	e3a03000 	mov	r3, #0
   29eb8:	e50b3008 	str	r3, [fp, #-8]
   29ebc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   29ec0:	e50b300c 	str	r3, [fp, #-12]
   29ec4:	ea0000b4 	b	2a19c <create_partition+0x3d0>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
   29ec8:	e51b3008 	ldr	r3, [fp, #-8]
   29ecc:	e1a03103 	lsl	r3, r3, #2
   29ed0:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   29ed4:	e0823003 	add	r3, r2, r3
   29ed8:	e5933000 	ldr	r3, [r3]
   29edc:	e50b3010 	str	r3, [fp, #-16]
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
   29ee0:	e51b3010 	ldr	r3, [fp, #-16]
   29ee4:	e3530064 	cmp	r3, #100	; 0x64
   29ee8:	8a00000b 	bhi	29f1c <create_partition+0x150>
   29eec:	e51b3010 	ldr	r3, [fp, #-16]
   29ef0:	e3530064 	cmp	r3, #100	; 0x64
   29ef4:	0a000006 	beq	29f14 <create_partition+0x148>
   29ef8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29efc:	e59f2318 	ldr	r2, [pc, #792]	; 2a21c <create_partition+0x450>
   29f00:	e0832392 	umull	r2, r3, r2, r3
   29f04:	e1a032a3 	lsr	r3, r3, #5
   29f08:	e51b2010 	ldr	r2, [fp, #-16]
   29f0c:	e0030392 	mul	r3, r2, r3
   29f10:	ea000000 	b	29f18 <create_partition+0x14c>
   29f14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29f18:	e50b3010 	str	r3, [fp, #-16]
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
   29f1c:	e51b200c 	ldr	r2, [fp, #-12]
   29f20:	e51b3010 	ldr	r3, [fp, #-16]
   29f24:	e0823003 	add	r3, r2, r3
   29f28:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   29f2c:	e1520003 	cmp	r2, r3
   29f30:	3a000005 	bcc	29f4c <create_partition+0x180>
   29f34:	e51b200c 	ldr	r2, [fp, #-12]
   29f38:	e51b3010 	ldr	r3, [fp, #-16]
   29f3c:	e0823003 	add	r3, r2, r3
   29f40:	e51b200c 	ldr	r2, [fp, #-12]
   29f44:	e1520003 	cmp	r2, r3
   29f48:	9a000003 	bls	29f5c <create_partition+0x190>
   29f4c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   29f50:	e51b300c 	ldr	r3, [fp, #-12]
   29f54:	e0423003 	sub	r3, r2, r3
   29f58:	e50b3010 	str	r3, [fp, #-16]
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
   29f5c:	e51b3010 	ldr	r3, [fp, #-16]
   29f60:	e3530000 	cmp	r3, #0
   29f64:	0a000097 	beq	2a1c8 <create_partition+0x3fc>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Partition start LBA sector */
   29f68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29f6c:	e2833008 	add	r3, r3, #8
   29f70:	e51b100c 	ldr	r1, [fp, #-12]
   29f74:	e1a00003 	mov	r0, r3
   29f78:	ebffeb3c 	bl	24c70 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Size of partition [sector] */
   29f7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29f80:	e283300c 	add	r3, r3, #12
   29f84:	e51b1010 	ldr	r1, [fp, #-16]
   29f88:	e1a00003 	mov	r0, r3
   29f8c:	ebffeb37 	bl	24c70 <st_dword>
			pte[PTE_System] = sys;					/* System type */
   29f90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29f94:	e2833004 	add	r3, r3, #4
   29f98:	e55b202e 	ldrb	r2, [fp, #-46]	; 0xffffffd2
   29f9c:	e5c32000 	strb	r2, [r3]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
   29fa0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   29fa4:	e1a01003 	mov	r1, r3
   29fa8:	e51b000c 	ldr	r0, [fp, #-12]
   29fac:	eb000526 	bl	2b44c <__udivsi3>
   29fb0:	e1a03000 	mov	r3, r0
   29fb4:	e1a02003 	mov	r2, r3
   29fb8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29fbc:	e1a01003 	mov	r1, r3
   29fc0:	e1a00002 	mov	r0, r2
   29fc4:	eb000520 	bl	2b44c <__udivsi3>
   29fc8:	e1a03000 	mov	r3, r0
   29fcc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
   29fd0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   29fd4:	e1a01003 	mov	r1, r3
   29fd8:	e51b000c 	ldr	r0, [fp, #-12]
   29fdc:	eb00051a 	bl	2b44c <__udivsi3>
   29fe0:	e1a03000 	mov	r3, r0
   29fe4:	e1a02003 	mov	r2, r3
   29fe8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29fec:	e1a01003 	mov	r1, r3
   29ff0:	e1a00002 	mov	r0, r2
   29ff4:	eb000551 	bl	2b540 <__aeabi_uidivmod>
   29ff8:	e1a03001 	mov	r3, r1
   29ffc:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
   2a000:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
   2a004:	e51b300c 	ldr	r3, [fp, #-12]
   2a008:	e1a01002 	mov	r1, r2
   2a00c:	e1a00003 	mov	r0, r3
   2a010:	eb00054a 	bl	2b540 <__aeabi_uidivmod>
   2a014:	e1a03001 	mov	r3, r1
   2a018:	e6ef3073 	uxtb	r3, r3
   2a01c:	e2833001 	add	r3, r3, #1
   2a020:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
			pte[PTE_StHead] = hd;
   2a024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a028:	e2833001 	add	r3, r3, #1
   2a02c:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
   2a030:	e5c32000 	strb	r2, [r3]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   2a034:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2a038:	e1a03123 	lsr	r3, r3, #2
   2a03c:	e6ef3073 	uxtb	r3, r3
   2a040:	e3c3303f 	bic	r3, r3, #63	; 0x3f
   2a044:	e6ef1073 	uxtb	r1, r3
   2a048:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a04c:	e2833002 	add	r3, r3, #2
   2a050:	e55b2026 	ldrb	r2, [fp, #-38]	; 0xffffffda
   2a054:	e1812002 	orr	r2, r1, r2
   2a058:	e6ef2072 	uxtb	r2, r2
   2a05c:	e5c32000 	strb	r2, [r3]
			pte[PTE_StCyl] = (BYTE)cy;
   2a060:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a064:	e2833003 	add	r3, r3, #3
   2a068:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   2a06c:	e6ef2072 	uxtb	r2, r2
   2a070:	e5c32000 	strb	r2, [r3]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
   2a074:	e51b200c 	ldr	r2, [fp, #-12]
   2a078:	e51b3010 	ldr	r3, [fp, #-16]
   2a07c:	e0823003 	add	r3, r2, r3
   2a080:	e2433001 	sub	r3, r3, #1
   2a084:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
   2a088:	e1a01002 	mov	r1, r2
   2a08c:	e1a00003 	mov	r0, r3
   2a090:	eb0004ed 	bl	2b44c <__udivsi3>
   2a094:	e1a03000 	mov	r3, r0
   2a098:	e1a02003 	mov	r2, r3
   2a09c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   2a0a0:	e1a01003 	mov	r1, r3
   2a0a4:	e1a00002 	mov	r0, r2
   2a0a8:	eb0004e7 	bl	2b44c <__udivsi3>
   2a0ac:	e1a03000 	mov	r3, r0
   2a0b0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
   2a0b4:	e51b200c 	ldr	r2, [fp, #-12]
   2a0b8:	e51b3010 	ldr	r3, [fp, #-16]
   2a0bc:	e0823003 	add	r3, r2, r3
   2a0c0:	e2433001 	sub	r3, r3, #1
   2a0c4:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
   2a0c8:	e1a01002 	mov	r1, r2
   2a0cc:	e1a00003 	mov	r0, r3
   2a0d0:	eb0004dd 	bl	2b44c <__udivsi3>
   2a0d4:	e1a03000 	mov	r3, r0
   2a0d8:	e1a02003 	mov	r2, r3
   2a0dc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   2a0e0:	e1a01003 	mov	r1, r3
   2a0e4:	e1a00002 	mov	r0, r2
   2a0e8:	eb000514 	bl	2b540 <__aeabi_uidivmod>
   2a0ec:	e1a03001 	mov	r3, r1
   2a0f0:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
   2a0f4:	e51b200c 	ldr	r2, [fp, #-12]
   2a0f8:	e51b3010 	ldr	r3, [fp, #-16]
   2a0fc:	e0823003 	add	r3, r2, r3
   2a100:	e2433001 	sub	r3, r3, #1
   2a104:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
   2a108:	e1a01002 	mov	r1, r2
   2a10c:	e1a00003 	mov	r0, r3
   2a110:	eb00050a 	bl	2b540 <__aeabi_uidivmod>
   2a114:	e1a03001 	mov	r3, r1
   2a118:	e6ef3073 	uxtb	r3, r3
   2a11c:	e2833001 	add	r3, r3, #1
   2a120:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
			pte[PTE_EdHead] = hd;
   2a124:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a128:	e2833005 	add	r3, r3, #5
   2a12c:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
   2a130:	e5c32000 	strb	r2, [r3]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   2a134:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2a138:	e1a03123 	lsr	r3, r3, #2
   2a13c:	e6ef3073 	uxtb	r3, r3
   2a140:	e3c3303f 	bic	r3, r3, #63	; 0x3f
   2a144:	e6ef1073 	uxtb	r1, r3
   2a148:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a14c:	e2833006 	add	r3, r3, #6
   2a150:	e55b2026 	ldrb	r2, [fp, #-38]	; 0xffffffda
   2a154:	e1812002 	orr	r2, r1, r2
   2a158:	e6ef2072 	uxtb	r2, r2
   2a15c:	e5c32000 	strb	r2, [r3]
			pte[PTE_EdCyl] = (BYTE)cy;
   2a160:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a164:	e2833007 	add	r3, r3, #7
   2a168:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   2a16c:	e6ef2072 	uxtb	r2, r2
   2a170:	e5c32000 	strb	r2, [r3]

			pte += SZ_PTE;		/* Next entry */
   2a174:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a178:	e2833010 	add	r3, r3, #16
   2a17c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   2a180:	e51b3008 	ldr	r3, [fp, #-8]
   2a184:	e2833001 	add	r3, r3, #1
   2a188:	e50b3008 	str	r3, [fp, #-8]
   2a18c:	e51b200c 	ldr	r2, [fp, #-12]
   2a190:	e51b3010 	ldr	r3, [fp, #-16]
   2a194:	e0823003 	add	r3, r2, r3
   2a198:	e50b300c 	str	r3, [fp, #-12]
   2a19c:	e51b3008 	ldr	r3, [fp, #-8]
   2a1a0:	e3530003 	cmp	r3, #3
   2a1a4:	8a000008 	bhi	2a1cc <create_partition+0x400>
   2a1a8:	e51b300c 	ldr	r3, [fp, #-12]
   2a1ac:	e3530000 	cmp	r3, #0
   2a1b0:	0a000005 	beq	2a1cc <create_partition+0x400>
   2a1b4:	e51b200c 	ldr	r2, [fp, #-12]
   2a1b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a1bc:	e1520003 	cmp	r2, r3
   2a1c0:	3affff40 	bcc	29ec8 <create_partition+0xfc>
   2a1c4:	ea000000 	b	2a1cc <create_partition+0x400>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
   2a1c8:	e320f000 	nop	{0}
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
   2a1cc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2a1d0:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   2a1d4:	e2833002 	add	r3, r3, #2
   2a1d8:	e59f1040 	ldr	r1, [pc, #64]	; 2a220 <create_partition+0x454>
   2a1dc:	e1a00003 	mov	r0, r3
   2a1e0:	ebffea89 	bl	24c0c <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
   2a1e4:	e55b002d 	ldrb	r0, [fp, #-45]	; 0xffffffd3
   2a1e8:	e3a03001 	mov	r3, #1
   2a1ec:	e3a02000 	mov	r2, #0
   2a1f0:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
   2a1f4:	eb000423 	bl	2b288 <disk_write>
   2a1f8:	e1a03000 	mov	r3, r0
   2a1fc:	e3530000 	cmp	r3, #0
   2a200:	0a000001 	beq	2a20c <create_partition+0x440>
   2a204:	e3a03001 	mov	r3, #1
   2a208:	ea000000 	b	2a210 <create_partition+0x444>
	}

	return FR_OK;
   2a20c:	e3a03000 	mov	r3, #0
}
   2a210:	e1a00003 	mov	r0, r3
   2a214:	e24bd004 	sub	sp, fp, #4
   2a218:	e8bd8800 	pop	{fp, pc}
   2a21c:	51eb851f 	mvnpl	r8, pc, lsl r5
   2a220:	0000aa55 	andeq	sl, r0, r5, asr sl

0002a224 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
   2a224:	e92d4800 	push	{fp, lr}
   2a228:	e28db004 	add	fp, sp, #4
   2a22c:	e24dd080 	sub	sp, sp, #128	; 0x80
   2a230:	e50b0078 	str	r0, [fp, #-120]	; 0xffffff88
   2a234:	e50b107c 	str	r1, [fp, #-124]	; 0xffffff84
   2a238:	e50b2080 	str	r2, [fp, #-128]	; 0xffffff80
   2a23c:	e50b3084 	str	r3, [fp, #-132]	; 0xffffff7c
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
   2a240:	e24b3078 	sub	r3, fp, #120	; 0x78
   2a244:	e1a00003 	mov	r0, r3
   2a248:	ebfff268 	bl	26bf0 <get_ldnumber>
   2a24c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
	if (vol < 0) return FR_INVALID_DRIVE;
   2a250:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2a254:	e3530000 	cmp	r3, #0
   2a258:	aa000001 	bge	2a264 <f_mkfs+0x40>
   2a25c:	e3a0300b 	mov	r3, #11
   2a260:	ea000384 	b	2b078 <f_mkfs+0xe54>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
   2a264:	e59f2e18 	ldr	r2, [pc, #3608]	; 2b084 <f_mkfs+0xe60>
   2a268:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2a26c:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   2a270:	e3530000 	cmp	r3, #0
   2a274:	0a000004 	beq	2a28c <f_mkfs+0x68>
   2a278:	e59f2e04 	ldr	r2, [pc, #3588]	; 2b084 <f_mkfs+0xe60>
   2a27c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2a280:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   2a284:	e3a02000 	mov	r2, #0
   2a288:	e5c32000 	strb	r2, [r3]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
   2a28c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2a290:	e54b3039 	strb	r3, [fp, #-57]	; 0xffffffc7
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
   2a294:	e3a03000 	mov	r3, #0
   2a298:	e54b303a 	strb	r3, [fp, #-58]	; 0xffffffc6

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
   2a29c:	e55b3039 	ldrb	r3, [fp, #-57]	; 0xffffffc7
   2a2a0:	e1a00003 	mov	r0, r3
   2a2a4:	eb000394 	bl	2b0fc <disk_initialize>
   2a2a8:	e1a03000 	mov	r3, r0
   2a2ac:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
	if (ds & STA_NOINIT) return FR_NOT_READY;
   2a2b0:	e55b303b 	ldrb	r3, [fp, #-59]	; 0xffffffc5
   2a2b4:	e2033001 	and	r3, r3, #1
   2a2b8:	e3530000 	cmp	r3, #0
   2a2bc:	0a000001 	beq	2a2c8 <f_mkfs+0xa4>
   2a2c0:	e3a03003 	mov	r3, #3
   2a2c4:	ea00036b 	b	2b078 <f_mkfs+0xe54>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
   2a2c8:	e55b303b 	ldrb	r3, [fp, #-59]	; 0xffffffc5
   2a2cc:	e2033004 	and	r3, r3, #4
   2a2d0:	e3530000 	cmp	r3, #0
   2a2d4:	0a000001 	beq	2a2e0 <f_mkfs+0xbc>
   2a2d8:	e3a0300a 	mov	r3, #10
   2a2dc:	ea000365 	b	2b078 <f_mkfs+0xe54>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
   2a2e0:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a2e4:	e3530000 	cmp	r3, #0
   2a2e8:	1a000001 	bne	2a2f4 <f_mkfs+0xd0>
   2a2ec:	e59f3d94 	ldr	r3, [pc, #3476]	; 2b088 <f_mkfs+0xe64>
   2a2f0:	e50b307c 	str	r3, [fp, #-124]	; 0xffffff84
	sz_blk = opt->align;
   2a2f4:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a2f8:	e5933004 	ldr	r3, [r3, #4]
   2a2fc:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the parameter or lower layer */
   2a300:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a304:	e3530000 	cmp	r3, #0
   2a308:	1a000004 	bne	2a320 <f_mkfs+0xfc>
   2a30c:	e24b2064 	sub	r2, fp, #100	; 0x64
   2a310:	e55b3039 	ldrb	r3, [fp, #-57]	; 0xffffffc7
   2a314:	e3a01003 	mov	r1, #3
   2a318:	e1a00003 	mov	r0, r3
   2a31c:	eb000406 	bl	2b33c <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
   2a320:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a324:	e3530000 	cmp	r3, #0
   2a328:	0a000008 	beq	2a350 <f_mkfs+0x12c>
   2a32c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a330:	e3530902 	cmp	r3, #32768	; 0x8000
   2a334:	8a000005 	bhi	2a350 <f_mkfs+0x12c>
   2a338:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a33c:	e2432001 	sub	r2, r3, #1
   2a340:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a344:	e0033002 	and	r3, r3, r2
   2a348:	e3530000 	cmp	r3, #0
   2a34c:	0a000001 	beq	2a358 <f_mkfs+0x134>
   2a350:	e3a03001 	mov	r3, #1
   2a354:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
   2a358:	e3a03c02 	mov	r3, #512	; 0x200
   2a35c:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
   2a360:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a364:	e5d33000 	ldrb	r3, [r3]
   2a368:	e203300f 	and	r3, r3, #15
   2a36c:	e54b303f 	strb	r3, [fp, #-63]	; 0xffffffc1
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
   2a370:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a374:	e5d33001 	ldrb	r3, [r3, #1]
   2a378:	e3530000 	cmp	r3, #0
   2a37c:	0a000006 	beq	2a39c <f_mkfs+0x178>
   2a380:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a384:	e5d33001 	ldrb	r3, [r3, #1]
   2a388:	e3530002 	cmp	r3, #2
   2a38c:	8a000002 	bhi	2a39c <f_mkfs+0x178>
   2a390:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a394:	e5d33001 	ldrb	r3, [r3, #1]
   2a398:	ea000000 	b	2a3a0 <f_mkfs+0x17c>
   2a39c:	e3a03001 	mov	r3, #1
   2a3a0:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   2a3a4:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a3a8:	e5933008 	ldr	r3, [r3, #8]
   2a3ac:	e3530000 	cmp	r3, #0
   2a3b0:	0a000011 	beq	2a3fc <f_mkfs+0x1d8>
   2a3b4:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a3b8:	e5933008 	ldr	r3, [r3, #8]
   2a3bc:	e3530902 	cmp	r3, #32768	; 0x8000
   2a3c0:	8a00000d 	bhi	2a3fc <f_mkfs+0x1d8>
   2a3c4:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a3c8:	e5932008 	ldr	r2, [r3, #8]
   2a3cc:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2a3d0:	e1a032a3 	lsr	r3, r3, #5
   2a3d4:	e6ff3073 	uxth	r3, r3
   2a3d8:	e1a01003 	mov	r1, r3
   2a3dc:	e1a00002 	mov	r0, r2
   2a3e0:	eb000456 	bl	2b540 <__aeabi_uidivmod>
   2a3e4:	e1a03001 	mov	r3, r1
   2a3e8:	e3530000 	cmp	r3, #0
   2a3ec:	1a000002 	bne	2a3fc <f_mkfs+0x1d8>
   2a3f0:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a3f4:	e5933008 	ldr	r3, [r3, #8]
   2a3f8:	ea000000 	b	2a400 <f_mkfs+0x1dc>
   2a3fc:	e3a03c02 	mov	r3, #512	; 0x200
   2a400:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
   2a404:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a408:	e593300c 	ldr	r3, [r3, #12]
   2a40c:	e3530401 	cmp	r3, #16777216	; 0x1000000
   2a410:	8a00000a 	bhi	2a440 <f_mkfs+0x21c>
   2a414:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a418:	e593200c 	ldr	r2, [r3, #12]
   2a41c:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a420:	e593300c 	ldr	r3, [r3, #12]
   2a424:	e2433001 	sub	r3, r3, #1
   2a428:	e0033002 	and	r3, r3, r2
   2a42c:	e3530000 	cmp	r3, #0
   2a430:	1a000002 	bne	2a440 <f_mkfs+0x21c>
   2a434:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a438:	e593300c 	ldr	r3, [r3, #12]
   2a43c:	ea000000 	b	2a444 <f_mkfs+0x220>
   2a440:	e3a03000 	mov	r3, #0
   2a444:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	sz_au /= ss;	/* Byte --> Sector */
   2a448:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2a44c:	e1a01003 	mov	r1, r3
   2a450:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   2a454:	eb0003fc 	bl	2b44c <__udivsi3>
   2a458:	e1a03000 	mov	r3, r0
   2a45c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
   2a460:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2a464:	e1a01003 	mov	r1, r3
   2a468:	e51b0084 	ldr	r0, [fp, #-132]	; 0xffffff7c
   2a46c:	eb0003f6 	bl	2b44c <__udivsi3>
   2a470:	e1a03000 	mov	r3, r0
   2a474:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
   2a478:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2a47c:	e3530000 	cmp	r3, #0
   2a480:	1a000001 	bne	2a48c <f_mkfs+0x268>
   2a484:	e3a03011 	mov	r3, #17
   2a488:	ea0002fa 	b	2b078 <f_mkfs+0xe54>
	buf = (BYTE*)work;		/* Working buffer */
   2a48c:	e51b3080 	ldr	r3, [fp, #-128]	; 0xffffff80
   2a490:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
   2a494:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a498:	e3530000 	cmp	r3, #0
   2a49c:	1a000001 	bne	2a4a8 <f_mkfs+0x284>
   2a4a0:	e3a03011 	mov	r3, #17
   2a4a4:	ea0002f3 	b	2b078 <f_mkfs+0xe54>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
   2a4a8:	e3a03000 	mov	r3, #0
   2a4ac:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
   2a4b0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a4b4:	e50b3010 	str	r3, [fp, #-16]
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   2a4b8:	e24b2068 	sub	r2, fp, #104	; 0x68
   2a4bc:	e55b3039 	ldrb	r3, [fp, #-57]	; 0xffffffc7
   2a4c0:	e3a01001 	mov	r1, #1
   2a4c4:	e1a00003 	mov	r0, r3
   2a4c8:	eb00039b 	bl	2b33c <disk_ioctl>
   2a4cc:	e1a03000 	mov	r3, r0
   2a4d0:	e3530000 	cmp	r3, #0
   2a4d4:	0a000001 	beq	2a4e0 <f_mkfs+0x2bc>
   2a4d8:	e3a03001 	mov	r3, #1
   2a4dc:	ea0002e5 	b	2b078 <f_mkfs+0xe54>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
   2a4e0:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2a4e4:	e2033008 	and	r3, r3, #8
   2a4e8:	e3530000 	cmp	r3, #0
   2a4ec:	1a000008 	bne	2a514 <f_mkfs+0x2f0>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
   2a4f0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a4f4:	e353003f 	cmp	r3, #63	; 0x3f
   2a4f8:	9a000005 	bls	2a514 <f_mkfs+0x2f0>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
   2a4fc:	e3a0303f 	mov	r3, #63	; 0x3f
   2a500:	e50b3010 	str	r3, [fp, #-16]
   2a504:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
   2a508:	e51b3010 	ldr	r3, [fp, #-16]
   2a50c:	e0423003 	sub	r3, r2, r3
   2a510:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
   2a514:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a518:	e353007f 	cmp	r3, #127	; 0x7f
   2a51c:	8a000001 	bhi	2a528 <f_mkfs+0x304>
   2a520:	e3a0300e 	mov	r3, #14
   2a524:	ea0002d3 	b	2b078 <f_mkfs+0xe54>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
   2a528:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a52c:	e3530080 	cmp	r3, #128	; 0x80
   2a530:	9a000001 	bls	2a53c <f_mkfs+0x318>
   2a534:	e3a03080 	mov	r3, #128	; 0x80
   2a538:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
   2a53c:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2a540:	e2033002 	and	r3, r3, #2
   2a544:	e3530000 	cmp	r3, #0
   2a548:	0a000006 	beq	2a568 <f_mkfs+0x344>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
   2a54c:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2a550:	e2033001 	and	r3, r3, #1
   2a554:	e3530000 	cmp	r3, #0
   2a558:	1a000002 	bne	2a568 <f_mkfs+0x344>
				fsty = FS_FAT32; break;
   2a55c:	e3a03003 	mov	r3, #3
   2a560:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
   2a564:	ea000007 	b	2a588 <f_mkfs+0x364>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
   2a568:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2a56c:	e2033001 	and	r3, r3, #1
   2a570:	e3530000 	cmp	r3, #0
   2a574:	1a000001 	bne	2a580 <f_mkfs+0x35c>
   2a578:	e3a03013 	mov	r3, #19
   2a57c:	ea0002bd 	b	2b078 <f_mkfs+0xe54>
		fsty = FS_FAT16;
   2a580:	e3a03002 	mov	r3, #2
   2a584:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
   2a588:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a58c:	e2833456 	add	r3, r3, #1442840576	; 0x56000000
   2a590:	e2833821 	add	r3, r3, #2162688	; 0x210000
   2a594:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
   2a598:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a59c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
   2a5a0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a5a4:	e3530003 	cmp	r3, #3
   2a5a8:	1a00003f 	bne	2a6ac <f_mkfs+0x488>
				if (pau == 0) {	/* AU auto-selection */
   2a5ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a5b0:	e3530000 	cmp	r3, #0
   2a5b4:	1a00001d 	bne	2a630 <f_mkfs+0x40c>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
   2a5b8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a5bc:	e1a038a3 	lsr	r3, r3, #17
   2a5c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   2a5c4:	e3a03000 	mov	r3, #0
   2a5c8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2a5cc:	e3a03001 	mov	r3, #1
   2a5d0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2a5d4:	ea000005 	b	2a5f0 <f_mkfs+0x3cc>
   2a5d8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a5dc:	e2833001 	add	r3, r3, #1
   2a5e0:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2a5e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a5e8:	e1a03083 	lsl	r3, r3, #1
   2a5ec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2a5f0:	e59f2a94 	ldr	r2, [pc, #2708]	; 2b08c <f_mkfs+0xe68>
   2a5f4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a5f8:	e1a03083 	lsl	r3, r3, #1
   2a5fc:	e0823003 	add	r3, r2, r3
   2a600:	e1d330b0 	ldrh	r3, [r3]
   2a604:	e3530000 	cmp	r3, #0
   2a608:	0a000008 	beq	2a630 <f_mkfs+0x40c>
   2a60c:	e59f2a78 	ldr	r2, [pc, #2680]	; 2b08c <f_mkfs+0xe68>
   2a610:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a614:	e1a03083 	lsl	r3, r3, #1
   2a618:	e0823003 	add	r3, r2, r3
   2a61c:	e1d330b0 	ldrh	r3, [r3]
   2a620:	e1a02003 	mov	r2, r3
   2a624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a628:	e1530002 	cmp	r3, r2
   2a62c:	2affffe9 	bcs	2a5d8 <f_mkfs+0x3b4>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
   2a630:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a634:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2a638:	e1a00003 	mov	r0, r3
   2a63c:	eb000382 	bl	2b44c <__udivsi3>
   2a640:	e1a03000 	mov	r3, r0
   2a644:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   2a648:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a64c:	e2833002 	add	r3, r3, #2
   2a650:	e1a02103 	lsl	r2, r3, #2
   2a654:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2a658:	e0823003 	add	r3, r2, r3
   2a65c:	e2433001 	sub	r3, r3, #1
   2a660:	e15b23be 	ldrh	r2, [fp, #-62]	; 0xffffffc2
   2a664:	e1a01002 	mov	r1, r2
   2a668:	e1a00003 	mov	r0, r3
   2a66c:	eb000376 	bl	2b44c <__udivsi3>
   2a670:	e1a03000 	mov	r3, r0
   2a674:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
				sz_rsv = 32;	/* Number of reserved sectors */
   2a678:	e3a03020 	mov	r3, #32
   2a67c:	e50b3008 	str	r3, [fp, #-8]
				sz_dir = 0;		/* No static directory */
   2a680:	e3a03000 	mov	r3, #0
   2a684:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
   2a688:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a68c:	e59f29fc 	ldr	r2, [pc, #2556]	; 2b090 <f_mkfs+0xe6c>
   2a690:	e1530002 	cmp	r3, r2
   2a694:	9a000002 	bls	2a6a4 <f_mkfs+0x480>
   2a698:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a69c:	e37302bf 	cmn	r3, #-268435445	; 0xf000000b
   2a6a0:	9a00004f 	bls	2a7e4 <f_mkfs+0x5c0>
   2a6a4:	e3a0300e 	mov	r3, #14
   2a6a8:	ea000272 	b	2b078 <f_mkfs+0xe54>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
   2a6ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a6b0:	e3530000 	cmp	r3, #0
   2a6b4:	1a00001d 	bne	2a730 <f_mkfs+0x50c>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
   2a6b8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a6bc:	e1a03623 	lsr	r3, r3, #12
   2a6c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   2a6c4:	e3a03000 	mov	r3, #0
   2a6c8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2a6cc:	e3a03001 	mov	r3, #1
   2a6d0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2a6d4:	ea000005 	b	2a6f0 <f_mkfs+0x4cc>
   2a6d8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a6dc:	e2833001 	add	r3, r3, #1
   2a6e0:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2a6e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a6e8:	e1a03083 	lsl	r3, r3, #1
   2a6ec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2a6f0:	e59f299c 	ldr	r2, [pc, #2460]	; 2b094 <f_mkfs+0xe70>
   2a6f4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a6f8:	e1a03083 	lsl	r3, r3, #1
   2a6fc:	e0823003 	add	r3, r2, r3
   2a700:	e1d330b0 	ldrh	r3, [r3]
   2a704:	e3530000 	cmp	r3, #0
   2a708:	0a000008 	beq	2a730 <f_mkfs+0x50c>
   2a70c:	e59f2980 	ldr	r2, [pc, #2432]	; 2b094 <f_mkfs+0xe70>
   2a710:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a714:	e1a03083 	lsl	r3, r3, #1
   2a718:	e0823003 	add	r3, r2, r3
   2a71c:	e1d330b0 	ldrh	r3, [r3]
   2a720:	e1a02003 	mov	r2, r3
   2a724:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a728:	e1530002 	cmp	r3, r2
   2a72c:	2affffe9 	bcs	2a6d8 <f_mkfs+0x4b4>
				}
				n_clst = (DWORD)sz_vol / pau;
   2a730:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a734:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2a738:	e1a00003 	mov	r0, r3
   2a73c:	eb000342 	bl	2b44c <__udivsi3>
   2a740:	e1a03000 	mov	r3, r0
   2a744:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
				if (n_clst > MAX_FAT12) {
   2a748:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a74c:	e59f2944 	ldr	r2, [pc, #2372]	; 2b098 <f_mkfs+0xe74>
   2a750:	e1530002 	cmp	r3, r2
   2a754:	9a000004 	bls	2a76c <f_mkfs+0x548>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
   2a758:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a75c:	e2833002 	add	r3, r3, #2
   2a760:	e1a03083 	lsl	r3, r3, #1
   2a764:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2a768:	ea000009 	b	2a794 <f_mkfs+0x570>
				} else {
					fsty = FS_FAT12;
   2a76c:	e3a03001 	mov	r3, #1
   2a770:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   2a774:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
   2a778:	e1a03002 	mov	r3, r2
   2a77c:	e1a03083 	lsl	r3, r3, #1
   2a780:	e0833002 	add	r3, r3, r2
   2a784:	e2833001 	add	r3, r3, #1
   2a788:	e1a030a3 	lsr	r3, r3, #1
   2a78c:	e2833003 	add	r3, r3, #3
   2a790:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   2a794:	e15b23be 	ldrh	r2, [fp, #-62]	; 0xffffffc2
   2a798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a79c:	e0823003 	add	r3, r2, r3
   2a7a0:	e2433001 	sub	r3, r3, #1
   2a7a4:	e15b23be 	ldrh	r2, [fp, #-62]	; 0xffffffc2
   2a7a8:	e1a01002 	mov	r1, r2
   2a7ac:	e1a00003 	mov	r0, r3
   2a7b0:	eb000325 	bl	2b44c <__udivsi3>
   2a7b4:	e1a03000 	mov	r3, r0
   2a7b8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
				sz_rsv = 1;						/* Number of reserved sectors */
   2a7bc:	e3a03001 	mov	r3, #1
   2a7c0:	e50b3008 	str	r3, [fp, #-8]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
   2a7c4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2a7c8:	e1a03283 	lsl	r3, r3, #5
   2a7cc:	e15b23be 	ldrh	r2, [fp, #-62]	; 0xffffffc2
   2a7d0:	e1a01002 	mov	r1, r2
   2a7d4:	e1a00003 	mov	r0, r3
   2a7d8:	eb00031b 	bl	2b44c <__udivsi3>
   2a7dc:	e1a03000 	mov	r3, r0
   2a7e0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
   2a7e4:	e51b2010 	ldr	r2, [fp, #-16]
   2a7e8:	e51b3008 	ldr	r3, [fp, #-8]
   2a7ec:	e0823003 	add	r3, r2, r3
   2a7f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
   2a7f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a7f8:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
   2a7fc:	e0020392 	mul	r2, r2, r3
   2a800:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a804:	e0823003 	add	r3, r2, r3
   2a808:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   2a80c:	e0823003 	add	r3, r2, r3
   2a810:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   2a814:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
   2a818:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a81c:	e0823003 	add	r3, r2, r3
   2a820:	e2432001 	sub	r2, r3, #1
   2a824:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a828:	e2633000 	rsb	r3, r3, #0
   2a82c:	e0022003 	and	r2, r2, r3
   2a830:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a834:	e0423003 	sub	r3, r2, r3
   2a838:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
   2a83c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a840:	e3530003 	cmp	r3, #3
   2a844:	1a000008 	bne	2a86c <f_mkfs+0x648>
				sz_rsv += n; b_fat += n;
   2a848:	e51b2008 	ldr	r2, [fp, #-8]
   2a84c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a850:	e0823003 	add	r3, r2, r3
   2a854:	e50b3008 	str	r3, [fp, #-8]
   2a858:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2a85c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a860:	e0823003 	add	r3, r2, r3
   2a864:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2a868:	ea000017 	b	2a8cc <f_mkfs+0x6a8>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
   2a86c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a870:	e51b1044 	ldr	r1, [fp, #-68]	; 0xffffffbc
   2a874:	e1a00003 	mov	r0, r3
   2a878:	eb000330 	bl	2b540 <__aeabi_uidivmod>
   2a87c:	e1a03001 	mov	r3, r1
   2a880:	e3530000 	cmp	r3, #0
   2a884:	0a000008 	beq	2a8ac <f_mkfs+0x688>
					n--; sz_rsv++; b_fat++;
   2a888:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a88c:	e2433001 	sub	r3, r3, #1
   2a890:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2a894:	e51b3008 	ldr	r3, [fp, #-8]
   2a898:	e2833001 	add	r3, r3, #1
   2a89c:	e50b3008 	str	r3, [fp, #-8]
   2a8a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a8a4:	e2833001 	add	r3, r3, #1
   2a8a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				}
				sz_fat += n / n_fat;
   2a8ac:	e51b1044 	ldr	r1, [fp, #-68]	; 0xffffffbc
   2a8b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2a8b4:	eb0002e4 	bl	2b44c <__udivsi3>
   2a8b8:	e1a03000 	mov	r3, r0
   2a8bc:	e1a02003 	mov	r2, r3
   2a8c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a8c4:	e0833002 	add	r3, r3, r2
   2a8c8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   2a8cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a8d0:	e1a02203 	lsl	r2, r3, #4
   2a8d4:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a8d8:	e0822003 	add	r2, r2, r3
   2a8dc:	e51b3010 	ldr	r3, [fp, #-16]
   2a8e0:	e0422003 	sub	r2, r2, r3
   2a8e4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a8e8:	e1520003 	cmp	r2, r3
   2a8ec:	9a000001 	bls	2a8f8 <f_mkfs+0x6d4>
   2a8f0:	e3a0300e 	mov	r3, #14
   2a8f4:	ea0001df 	b	2b078 <f_mkfs+0xe54>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
   2a8f8:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
   2a8fc:	e51b3008 	ldr	r3, [fp, #-8]
   2a900:	e0422003 	sub	r2, r2, r3
   2a904:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a908:	e51b1044 	ldr	r1, [fp, #-68]	; 0xffffffbc
   2a90c:	e0030391 	mul	r3, r1, r3
   2a910:	e0422003 	sub	r2, r2, r3
   2a914:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2a918:	e0423003 	sub	r3, r2, r3
   2a91c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2a920:	e1a00003 	mov	r0, r3
   2a924:	eb0002c8 	bl	2b44c <__udivsi3>
   2a928:	e1a03000 	mov	r3, r0
   2a92c:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
			if (fsty == FS_FAT32) {
   2a930:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a934:	e3530003 	cmp	r3, #3
   2a938:	1a00000e 	bne	2a978 <f_mkfs+0x754>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
   2a93c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a940:	e59f2748 	ldr	r2, [pc, #1864]	; 2b090 <f_mkfs+0xe6c>
   2a944:	e1530002 	cmp	r3, r2
   2a948:	8a00000a 	bhi	2a978 <f_mkfs+0x754>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   2a94c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a950:	e3530000 	cmp	r3, #0
   2a954:	1a000005 	bne	2a970 <f_mkfs+0x74c>
   2a958:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a95c:	e1a030a3 	lsr	r3, r3, #1
   2a960:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   2a964:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a968:	e3530000 	cmp	r3, #0
   2a96c:	1a00003d 	bne	2aa68 <f_mkfs+0x844>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   2a970:	e3a0300e 	mov	r3, #14
   2a974:	ea0001bf 	b	2b078 <f_mkfs+0xe54>
				}
			}
			if (fsty == FS_FAT16) {
   2a978:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a97c:	e3530002 	cmp	r3, #2
   2a980:	1a00002f 	bne	2aa44 <f_mkfs+0x820>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
   2a984:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a988:	e59f2700 	ldr	r2, [pc, #1792]	; 2b090 <f_mkfs+0xe6c>
   2a98c:	e1530002 	cmp	r3, r2
   2a990:	9a00001c 	bls	2aa08 <f_mkfs+0x7e4>
					if (sz_au == 0 && (pau * 2) <= 64) {
   2a994:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a998:	e3530000 	cmp	r3, #0
   2a99c:	1a000007 	bne	2a9c0 <f_mkfs+0x79c>
   2a9a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a9a4:	e1a03083 	lsl	r3, r3, #1
   2a9a8:	e3530040 	cmp	r3, #64	; 0x40
   2a9ac:	8a000003 	bhi	2a9c0 <f_mkfs+0x79c>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
   2a9b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a9b4:	e1a03083 	lsl	r3, r3, #1
   2a9b8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   2a9bc:	ea00002e 	b	2aa7c <f_mkfs+0x858>
					}
					if ((fsopt & FM_FAT32)) {
   2a9c0:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2a9c4:	e2033002 	and	r3, r3, #2
   2a9c8:	e3530000 	cmp	r3, #0
   2a9cc:	0a000002 	beq	2a9dc <f_mkfs+0x7b8>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
   2a9d0:	e3a03003 	mov	r3, #3
   2a9d4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
   2a9d8:	ea000027 	b	2aa7c <f_mkfs+0x858>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   2a9dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a9e0:	e3530000 	cmp	r3, #0
   2a9e4:	1a000005 	bne	2aa00 <f_mkfs+0x7dc>
   2a9e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a9ec:	e1a03083 	lsl	r3, r3, #1
   2a9f0:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   2a9f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a9f8:	e3530080 	cmp	r3, #128	; 0x80
   2a9fc:	9a00001b 	bls	2aa70 <f_mkfs+0x84c>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   2aa00:	e3a0300e 	mov	r3, #14
   2aa04:	ea00019b 	b	2b078 <f_mkfs+0xe54>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
   2aa08:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2aa0c:	e59f2684 	ldr	r2, [pc, #1668]	; 2b098 <f_mkfs+0xe74>
   2aa10:	e1530002 	cmp	r3, r2
   2aa14:	8a00000a 	bhi	2aa44 <f_mkfs+0x820>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   2aa18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2aa1c:	e3530000 	cmp	r3, #0
   2aa20:	1a000005 	bne	2aa3c <f_mkfs+0x818>
   2aa24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2aa28:	e1a03083 	lsl	r3, r3, #1
   2aa2c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   2aa30:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2aa34:	e3530080 	cmp	r3, #128	; 0x80
   2aa38:	9a00000e 	bls	2aa78 <f_mkfs+0x854>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   2aa3c:	e3a0300e 	mov	r3, #14
   2aa40:	ea00018c 	b	2b078 <f_mkfs+0xe54>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
   2aa44:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2aa48:	e3530001 	cmp	r3, #1
   2aa4c:	1a00000b 	bne	2aa80 <f_mkfs+0x85c>
   2aa50:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2aa54:	e59f263c 	ldr	r2, [pc, #1596]	; 2b098 <f_mkfs+0xe74>
   2aa58:	e1530002 	cmp	r3, r2
   2aa5c:	9a000007 	bls	2aa80 <f_mkfs+0x85c>
   2aa60:	e3a0300e 	mov	r3, #14
   2aa64:	ea000183 	b	2b078 <f_mkfs+0xe54>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   2aa68:	e320f000 	nop	{0}
   2aa6c:	eafffec9 	b	2a598 <f_mkfs+0x374>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   2aa70:	e320f000 	nop	{0}
   2aa74:	eafffec7 	b	2a598 <f_mkfs+0x374>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   2aa78:	e320f000 	nop	{0}
			pau = sz_au;
   2aa7c:	eafffec5 	b	2a598 <f_mkfs+0x374>

			/* Ok, it is the valid cluster configuration */
			break;
   2aa80:	e320f000 	nop	{0}
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
   2aa84:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2aa88:	e1a02003 	mov	r2, r3
   2aa8c:	e3a01000 	mov	r1, #0
   2aa90:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2aa94:	eb000325 	bl	2b730 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
   2aa98:	e3a0200b 	mov	r2, #11
   2aa9c:	e59f15f8 	ldr	r1, [pc, #1528]	; 2b09c <f_mkfs+0xe78>
   2aaa0:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2aaa4:	eb0002d9 	bl	2b610 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
   2aaa8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aaac:	e283300b 	add	r3, r3, #11
   2aab0:	e15b23be 	ldrh	r2, [fp, #-62]	; 0xffffffc2
   2aab4:	e1a01002 	mov	r1, r2
   2aab8:	e1a00003 	mov	r0, r3
   2aabc:	ebffe852 	bl	24c0c <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
   2aac0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aac4:	e283300d 	add	r3, r3, #13
   2aac8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2aacc:	e6ef2072 	uxtb	r2, r2
   2aad0:	e5c32000 	strb	r2, [r3]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
   2aad4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aad8:	e283300e 	add	r3, r3, #14
   2aadc:	e51b2008 	ldr	r2, [fp, #-8]
   2aae0:	e6ff2072 	uxth	r2, r2
   2aae4:	e1a01002 	mov	r1, r2
   2aae8:	e1a00003 	mov	r0, r3
   2aaec:	ebffe846 	bl	24c0c <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
   2aaf0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aaf4:	e2833010 	add	r3, r3, #16
   2aaf8:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
   2aafc:	e6ef2072 	uxtb	r2, r2
   2ab00:	e5c32000 	strb	r2, [r3]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
   2ab04:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ab08:	e2832011 	add	r2, r3, #17
   2ab0c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2ab10:	e3530003 	cmp	r3, #3
   2ab14:	0a000002 	beq	2ab24 <f_mkfs+0x900>
   2ab18:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2ab1c:	e6ff3073 	uxth	r3, r3
   2ab20:	ea000000 	b	2ab28 <f_mkfs+0x904>
   2ab24:	e3a03000 	mov	r3, #0
   2ab28:	e1a01003 	mov	r1, r3
   2ab2c:	e1a00002 	mov	r0, r2
   2ab30:	ebffe835 	bl	24c0c <st_word>
		if (sz_vol < 0x10000) {
   2ab34:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2ab38:	e3530801 	cmp	r3, #65536	; 0x10000
   2ab3c:	2a000007 	bcs	2ab60 <f_mkfs+0x93c>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
   2ab40:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ab44:	e2833013 	add	r3, r3, #19
   2ab48:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
   2ab4c:	e6ff2072 	uxth	r2, r2
   2ab50:	e1a01002 	mov	r1, r2
   2ab54:	e1a00003 	mov	r0, r3
   2ab58:	ebffe82b 	bl	24c0c <st_word>
   2ab5c:	ea000005 	b	2ab78 <f_mkfs+0x954>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
   2ab60:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ab64:	e2833020 	add	r3, r3, #32
   2ab68:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
   2ab6c:	e1a01002 	mov	r1, r2
   2ab70:	e1a00003 	mov	r0, r3
   2ab74:	ebffe83d 	bl	24c70 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
   2ab78:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ab7c:	e2833015 	add	r3, r3, #21
   2ab80:	e3e02007 	mvn	r2, #7
   2ab84:	e5c32000 	strb	r2, [r3]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
   2ab88:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ab8c:	e2833018 	add	r3, r3, #24
   2ab90:	e3a0103f 	mov	r1, #63	; 0x3f
   2ab94:	e1a00003 	mov	r0, r3
   2ab98:	ebffe81b 	bl	24c0c <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
   2ab9c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aba0:	e283301a 	add	r3, r3, #26
   2aba4:	e3a010ff 	mov	r1, #255	; 0xff
   2aba8:	e1a00003 	mov	r0, r3
   2abac:	ebffe816 	bl	24c0c <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
   2abb0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2abb4:	e283301c 	add	r3, r3, #28
   2abb8:	e51b1010 	ldr	r1, [fp, #-16]
   2abbc:	e1a00003 	mov	r0, r3
   2abc0:	ebffe82a 	bl	24c70 <st_dword>
		if (fsty == FS_FAT32) {
   2abc4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2abc8:	e3530003 	cmp	r3, #3
   2abcc:	1a000027 	bne	2ac70 <f_mkfs+0xa4c>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
   2abd0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2abd4:	e2833043 	add	r3, r3, #67	; 0x43
   2abd8:	e51b1054 	ldr	r1, [fp, #-84]	; 0xffffffac
   2abdc:	e1a00003 	mov	r0, r3
   2abe0:	ebffe822 	bl	24c70 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
   2abe4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2abe8:	e2833024 	add	r3, r3, #36	; 0x24
   2abec:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   2abf0:	e1a00003 	mov	r0, r3
   2abf4:	ebffe81d 	bl	24c70 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
   2abf8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2abfc:	e283302c 	add	r3, r3, #44	; 0x2c
   2ac00:	e3a01002 	mov	r1, #2
   2ac04:	e1a00003 	mov	r0, r3
   2ac08:	ebffe818 	bl	24c70 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
   2ac0c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ac10:	e2833030 	add	r3, r3, #48	; 0x30
   2ac14:	e3a01001 	mov	r1, #1
   2ac18:	e1a00003 	mov	r0, r3
   2ac1c:	ebffe7fa 	bl	24c0c <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
   2ac20:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ac24:	e2833032 	add	r3, r3, #50	; 0x32
   2ac28:	e3a01006 	mov	r1, #6
   2ac2c:	e1a00003 	mov	r0, r3
   2ac30:	ebffe7f5 	bl	24c0c <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
   2ac34:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ac38:	e2833040 	add	r3, r3, #64	; 0x40
   2ac3c:	e3e0207f 	mvn	r2, #127	; 0x7f
   2ac40:	e5c32000 	strb	r2, [r3]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
   2ac44:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ac48:	e2833042 	add	r3, r3, #66	; 0x42
   2ac4c:	e3a02029 	mov	r2, #41	; 0x29
   2ac50:	e5c32000 	strb	r2, [r3]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
   2ac54:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ac58:	e2833047 	add	r3, r3, #71	; 0x47
   2ac5c:	e3a02013 	mov	r2, #19
   2ac60:	e59f1438 	ldr	r1, [pc, #1080]	; 2b0a0 <f_mkfs+0xe7c>
   2ac64:	e1a00003 	mov	r0, r3
   2ac68:	eb000268 	bl	2b610 <memcpy>
   2ac6c:	ea000019 	b	2acd8 <f_mkfs+0xab4>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
   2ac70:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ac74:	e2833027 	add	r3, r3, #39	; 0x27
   2ac78:	e51b1054 	ldr	r1, [fp, #-84]	; 0xffffffac
   2ac7c:	e1a00003 	mov	r0, r3
   2ac80:	ebffe7fa 	bl	24c70 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
   2ac84:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ac88:	e2833016 	add	r3, r3, #22
   2ac8c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   2ac90:	e6ff2072 	uxth	r2, r2
   2ac94:	e1a01002 	mov	r1, r2
   2ac98:	e1a00003 	mov	r0, r3
   2ac9c:	ebffe7da 	bl	24c0c <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
   2aca0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aca4:	e2833024 	add	r3, r3, #36	; 0x24
   2aca8:	e3e0207f 	mvn	r2, #127	; 0x7f
   2acac:	e5c32000 	strb	r2, [r3]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
   2acb0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2acb4:	e2833026 	add	r3, r3, #38	; 0x26
   2acb8:	e3a02029 	mov	r2, #41	; 0x29
   2acbc:	e5c32000 	strb	r2, [r3]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
   2acc0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2acc4:	e283302b 	add	r3, r3, #43	; 0x2b
   2acc8:	e3a02013 	mov	r2, #19
   2accc:	e59f13d0 	ldr	r1, [pc, #976]	; 2b0a4 <f_mkfs+0xe80>
   2acd0:	e1a00003 	mov	r0, r3
   2acd4:	eb00024d 	bl	2b610 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
   2acd8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2acdc:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   2ace0:	e2833002 	add	r3, r3, #2
   2ace4:	e59f13bc 	ldr	r1, [pc, #956]	; 2b0a8 <f_mkfs+0xe84>
   2ace8:	e1a00003 	mov	r0, r3
   2acec:	ebffe7c6 	bl	24c0c <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
   2acf0:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2acf4:	e3a03001 	mov	r3, #1
   2acf8:	e51b2010 	ldr	r2, [fp, #-16]
   2acfc:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2ad00:	eb000160 	bl	2b288 <disk_write>
   2ad04:	e1a03000 	mov	r3, r0
   2ad08:	e3530000 	cmp	r3, #0
   2ad0c:	0a000001 	beq	2ad18 <f_mkfs+0xaf4>
   2ad10:	e3a03001 	mov	r3, #1
   2ad14:	ea0000d7 	b	2b078 <f_mkfs+0xe54>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
   2ad18:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2ad1c:	e3530003 	cmp	r3, #3
   2ad20:	1a000030 	bne	2ade8 <f_mkfs+0xbc4>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
   2ad24:	e51b3010 	ldr	r3, [fp, #-16]
   2ad28:	e2832006 	add	r2, r3, #6
   2ad2c:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2ad30:	e3a03001 	mov	r3, #1
   2ad34:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2ad38:	eb000152 	bl	2b288 <disk_write>
			memset(buf, 0, ss);
   2ad3c:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2ad40:	e1a02003 	mov	r2, r3
   2ad44:	e3a01000 	mov	r1, #0
   2ad48:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2ad4c:	eb000277 	bl	2b730 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
   2ad50:	e59f1354 	ldr	r1, [pc, #852]	; 2b0ac <f_mkfs+0xe88>
   2ad54:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2ad58:	ebffe7c4 	bl	24c70 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
   2ad5c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ad60:	e2833f79 	add	r3, r3, #484	; 0x1e4
   2ad64:	e59f1344 	ldr	r1, [pc, #836]	; 2b0b0 <f_mkfs+0xe8c>
   2ad68:	e1a00003 	mov	r0, r3
   2ad6c:	ebffe7bf 	bl	24c70 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   2ad70:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ad74:	e2832f7a 	add	r2, r3, #488	; 0x1e8
   2ad78:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2ad7c:	e2433001 	sub	r3, r3, #1
   2ad80:	e1a01003 	mov	r1, r3
   2ad84:	e1a00002 	mov	r0, r2
   2ad88:	ebffe7b8 	bl	24c70 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
   2ad8c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ad90:	e2833f7b 	add	r3, r3, #492	; 0x1ec
   2ad94:	e3a01002 	mov	r1, #2
   2ad98:	e1a00003 	mov	r0, r3
   2ad9c:	ebffe7b3 	bl	24c70 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
   2ada0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ada4:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   2ada8:	e2833002 	add	r3, r3, #2
   2adac:	e59f12f4 	ldr	r1, [pc, #756]	; 2b0a8 <f_mkfs+0xe84>
   2adb0:	e1a00003 	mov	r0, r3
   2adb4:	ebffe794 	bl	24c0c <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   2adb8:	e51b3010 	ldr	r3, [fp, #-16]
   2adbc:	e2832007 	add	r2, r3, #7
   2adc0:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2adc4:	e3a03001 	mov	r3, #1
   2adc8:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2adcc:	eb00012d 	bl	2b288 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
   2add0:	e51b3010 	ldr	r3, [fp, #-16]
   2add4:	e2832001 	add	r2, r3, #1
   2add8:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2addc:	e3a03001 	mov	r3, #1
   2ade0:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2ade4:	eb000127 	bl	2b288 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
   2ade8:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2adec:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
   2adf0:	e0030392 	mul	r3, r2, r3
   2adf4:	e1a02003 	mov	r2, r3
   2adf8:	e3a01000 	mov	r1, #0
   2adfc:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2ae00:	eb00024a 	bl	2b730 <memset>
		sect = b_fat;		/* FAT start sector */
   2ae04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2ae08:	e50b300c 	str	r3, [fp, #-12]
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   2ae0c:	e3a03000 	mov	r3, #0
   2ae10:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2ae14:	ea00003e 	b	2af14 <f_mkfs+0xcf0>
			if (fsty == FS_FAT32) {
   2ae18:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2ae1c:	e3530003 	cmp	r3, #3
   2ae20:	1a00000d 	bne	2ae5c <f_mkfs+0xc38>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
   2ae24:	e3e01007 	mvn	r1, #7
   2ae28:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2ae2c:	ebffe78f 	bl	24c70 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
   2ae30:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ae34:	e2833004 	add	r3, r3, #4
   2ae38:	e3e01000 	mvn	r1, #0
   2ae3c:	e1a00003 	mov	r0, r3
   2ae40:	ebffe78a 	bl	24c70 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory at cluster# 2) */
   2ae44:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ae48:	e2833008 	add	r3, r3, #8
   2ae4c:	e3e0120f 	mvn	r1, #-268435456	; 0xf0000000
   2ae50:	e1a00003 	mov	r0, r3
   2ae54:	ebffe785 	bl	24c70 <st_dword>
   2ae58:	ea000008 	b	2ae80 <f_mkfs+0xc5c>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
   2ae5c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2ae60:	e3530001 	cmp	r3, #1
   2ae64:	1a000001 	bne	2ae70 <f_mkfs+0xc4c>
   2ae68:	e59f3244 	ldr	r3, [pc, #580]	; 2b0b4 <f_mkfs+0xe90>
   2ae6c:	ea000000 	b	2ae74 <f_mkfs+0xc50>
   2ae70:	e3e03007 	mvn	r3, #7
   2ae74:	e1a01003 	mov	r1, r3
   2ae78:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2ae7c:	ebffe77b 	bl	24c70 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
   2ae80:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2ae84:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
   2ae88:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2ae8c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2ae90:	e1520003 	cmp	r2, r3
   2ae94:	31a03002 	movcc	r3, r2
   2ae98:	21a03003 	movcs	r3, r3
   2ae9c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   2aea0:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2aea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2aea8:	e51b200c 	ldr	r2, [fp, #-12]
   2aeac:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2aeb0:	eb0000f4 	bl	2b288 <disk_write>
   2aeb4:	e1a03000 	mov	r3, r0
   2aeb8:	e3530000 	cmp	r3, #0
   2aebc:	0a000001 	beq	2aec8 <f_mkfs+0xca4>
   2aec0:	e3a03001 	mov	r3, #1
   2aec4:	ea00006b 	b	2b078 <f_mkfs+0xe54>
				memset(buf, 0, ss);	/* Rest of FAT area is initially zero */
   2aec8:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2aecc:	e1a02003 	mov	r2, r3
   2aed0:	e3a01000 	mov	r1, #0
   2aed4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2aed8:	eb000214 	bl	2b730 <memset>
				sect += n; nsect -= n;
   2aedc:	e51b200c 	ldr	r2, [fp, #-12]
   2aee0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2aee4:	e0823003 	add	r3, r2, r3
   2aee8:	e50b300c 	str	r3, [fp, #-12]
   2aeec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2aef0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2aef4:	e0423003 	sub	r3, r2, r3
   2aef8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			} while (nsect);
   2aefc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2af00:	e3530000 	cmp	r3, #0
   2af04:	1affffdf 	bne	2ae88 <f_mkfs+0xc64>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   2af08:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2af0c:	e2833001 	add	r3, r3, #1
   2af10:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2af14:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   2af18:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
   2af1c:	e1520003 	cmp	r2, r3
   2af20:	3affffbc 	bcc	2ae18 <f_mkfs+0xbf4>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
   2af24:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2af28:	e3530003 	cmp	r3, #3
   2af2c:	1a000001 	bne	2af38 <f_mkfs+0xd14>
   2af30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2af34:	ea000000 	b	2af3c <f_mkfs+0xd18>
   2af38:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2af3c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
   2af40:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2af44:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2af48:	e1520003 	cmp	r2, r3
   2af4c:	31a03002 	movcc	r3, r2
   2af50:	21a03003 	movcs	r3, r3
   2af54:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   2af58:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2af5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2af60:	e51b200c 	ldr	r2, [fp, #-12]
   2af64:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2af68:	eb0000c6 	bl	2b288 <disk_write>
   2af6c:	e1a03000 	mov	r3, r0
   2af70:	e3530000 	cmp	r3, #0
   2af74:	0a000001 	beq	2af80 <f_mkfs+0xd5c>
   2af78:	e3a03001 	mov	r3, #1
   2af7c:	ea00003d 	b	2b078 <f_mkfs+0xe54>
			sect += n; nsect -= n;
   2af80:	e51b200c 	ldr	r2, [fp, #-12]
   2af84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2af88:	e0823003 	add	r3, r2, r3
   2af8c:	e50b300c 	str	r3, [fp, #-12]
   2af90:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2af94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2af98:	e0423003 	sub	r3, r2, r3
   2af9c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		} while (nsect);
   2afa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2afa4:	e3530000 	cmp	r3, #0
   2afa8:	1affffe4 	bne	2af40 <f_mkfs+0xd1c>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
   2afac:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2afb0:	e3530003 	cmp	r3, #3
   2afb4:	1a000002 	bne	2afc4 <f_mkfs+0xda0>
		sys = 0x0C;		/* FAT32X */
   2afb8:	e3a0300c 	mov	r3, #12
   2afbc:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
   2afc0:	ea00000d 	b	2affc <f_mkfs+0xdd8>
	} else if (sz_vol >= 0x10000) {
   2afc4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2afc8:	e3530801 	cmp	r3, #65536	; 0x10000
   2afcc:	3a000002 	bcc	2afdc <f_mkfs+0xdb8>
		sys = 0x06;		/* FAT12/16 (large) */
   2afd0:	e3a03006 	mov	r3, #6
   2afd4:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
   2afd8:	ea000007 	b	2affc <f_mkfs+0xdd8>
	} else if (fsty == FS_FAT16) {
   2afdc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2afe0:	e3530002 	cmp	r3, #2
   2afe4:	1a000002 	bne	2aff4 <f_mkfs+0xdd0>
		sys = 0x04;		/* FAT16 */
   2afe8:	e3a03004 	mov	r3, #4
   2afec:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
   2aff0:	ea000001 	b	2affc <f_mkfs+0xdd8>
	} else {
		sys = 0x01;		/* FAT12 */
   2aff4:	e3a03001 	mov	r3, #1
   2aff8:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
   2affc:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2b000:	e2033008 	and	r3, r3, #8
   2b004:	e3530000 	cmp	r3, #0
   2b008:	1a00000f 	bne	2b04c <f_mkfs+0xe28>
			lba[0] = sz_vol; lba[1] = 0;
   2b00c:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2b010:	e50b3070 	str	r3, [fp, #-112]	; 0xffffff90
   2b014:	e3a03000 	mov	r3, #0
   2b018:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
			res = create_partition(pdrv, lba, sys, buf);
   2b01c:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
   2b020:	e24b1070 	sub	r1, fp, #112	; 0x70
   2b024:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2b028:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2b02c:	ebfffb66 	bl	29dcc <create_partition>
   2b030:	e1a03000 	mov	r3, r0
   2b034:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
			if (res != FR_OK) LEAVE_MKFS(res);
   2b038:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   2b03c:	e3530000 	cmp	r3, #0
   2b040:	0a000001 	beq	2b04c <f_mkfs+0xe28>
   2b044:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   2b048:	ea00000a 	b	2b078 <f_mkfs+0xe54>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   2b04c:	e55b3039 	ldrb	r3, [fp, #-57]	; 0xffffffc7
   2b050:	e3a02000 	mov	r2, #0
   2b054:	e3a01000 	mov	r1, #0
   2b058:	e1a00003 	mov	r0, r3
   2b05c:	eb0000b6 	bl	2b33c <disk_ioctl>
   2b060:	e1a03000 	mov	r3, r0
   2b064:	e3530000 	cmp	r3, #0
   2b068:	0a000001 	beq	2b074 <f_mkfs+0xe50>
   2b06c:	e3a03001 	mov	r3, #1
   2b070:	ea000000 	b	2b078 <f_mkfs+0xe54>

	LEAVE_MKFS(FR_OK);
   2b074:	e3a03000 	mov	r3, #0
}
   2b078:	e1a00003 	mov	r0, r3
   2b07c:	e24bd004 	sub	sp, fp, #4
   2b080:	e8bd8800 	pop	{fp, pc}
   2b084:	0002d650 	andeq	sp, r2, r0, asr r6
   2b088:	0002c194 	muleq	r2, r4, r1
   2b08c:	0002c1a4 	andeq	ip, r2, r4, lsr #3
   2b090:	0000fff5 	strdeq	pc, [r0], -r5
   2b094:	0002c1b4 			; <UNDEFINED> instruction: 0x0002c1b4
   2b098:	00000ff5 	strdeq	r0, [r0], -r5
   2b09c:	0002c160 	andeq	ip, r2, r0, ror #2
   2b0a0:	0002c16c 	andeq	ip, r2, ip, ror #2
   2b0a4:	0002c180 	andeq	ip, r2, r0, lsl #3
   2b0a8:	0000aa55 	andeq	sl, r0, r5, asr sl
   2b0ac:	41615252 	cmnmi	r1, r2, asr r2
   2b0b0:	61417272 	hvcvs	5922	; 0x1722
   2b0b4:	00fffff8 	ldrshteq	pc, [pc], #248	; <UNPREDICTABLE>

0002b0b8 <disk_status>:

/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv) {
   2b0b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2b0bc:	e28db000 	add	fp, sp, #0
   2b0c0:	e24dd00c 	sub	sp, sp, #12
   2b0c4:	e1a03000 	mov	r3, r0
   2b0c8:	e54b3005 	strb	r3, [fp, #-5]
    if (pdrv != DEV_RAM) return STA_NOINIT;  /* 仅支持 RAM 磁盘 */
   2b0cc:	e55b3005 	ldrb	r3, [fp, #-5]
   2b0d0:	e3530000 	cmp	r3, #0
   2b0d4:	0a000001 	beq	2b0e0 <disk_status+0x28>
   2b0d8:	e3a03001 	mov	r3, #1
   2b0dc:	ea000001 	b	2b0e8 <disk_status+0x30>
    
    /* 减少调试输出，避免死循环 */
    return Stat;
   2b0e0:	e59f3010 	ldr	r3, [pc, #16]	; 2b0f8 <disk_status+0x40>
   2b0e4:	e5d33000 	ldrb	r3, [r3]
}
   2b0e8:	e1a00003 	mov	r0, r3
   2b0ec:	e28bd000 	add	sp, fp, #0
   2b0f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2b0f4:	e12fff1e 	bx	lr
   2b0f8:	0002c248 	andeq	ip, r2, r8, asr #4

0002b0fc <disk_initialize>:

/*-----------------------------------------------------------------------*/
/* Inidialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv) {
   2b0fc:	e92d4800 	push	{fp, lr}
   2b100:	e28db004 	add	fp, sp, #4
   2b104:	e24dd008 	sub	sp, sp, #8
   2b108:	e1a03000 	mov	r3, r0
   2b10c:	e54b3005 	strb	r3, [fp, #-5]
    if (pdrv != DEV_RAM) {
   2b110:	e55b3005 	ldrb	r3, [fp, #-5]
   2b114:	e3530000 	cmp	r3, #0
   2b118:	0a000007 	beq	2b13c <disk_initialize+0x40>
        if (debug_output_enabled) {
   2b11c:	e59f3094 	ldr	r3, [pc, #148]	; 2b1b8 <disk_initialize+0xbc>
   2b120:	e5933000 	ldr	r3, [r3]
   2b124:	e3530000 	cmp	r3, #0
   2b128:	0a000001 	beq	2b134 <disk_initialize+0x38>
            uart_puts("disk_initialize: Invalid drive\n");
   2b12c:	e59f0088 	ldr	r0, [pc, #136]	; 2b1bc <disk_initialize+0xc0>
   2b130:	ebffe459 	bl	2429c <uart_puts>
        }
        return STA_NOINIT;  /* 仅支持 RAM 磁盘 */
   2b134:	e3a03001 	mov	r3, #1
   2b138:	ea00001b 	b	2b1ac <disk_initialize+0xb0>
    }
    
    /* 只在第一次初始化时清零RAM磁盘 */
    if (!disk_initialized) {
   2b13c:	e59f307c 	ldr	r3, [pc, #124]	; 2b1c0 <disk_initialize+0xc4>
   2b140:	e5933000 	ldr	r3, [r3]
   2b144:	e3530000 	cmp	r3, #0
   2b148:	1a00000c 	bne	2b180 <disk_initialize+0x84>
        if (debug_output_enabled) {
   2b14c:	e59f3064 	ldr	r3, [pc, #100]	; 2b1b8 <disk_initialize+0xbc>
   2b150:	e5933000 	ldr	r3, [r3]
   2b154:	e3530000 	cmp	r3, #0
   2b158:	0a000001 	beq	2b164 <disk_initialize+0x68>
            uart_puts("disk_initialize: First initialization, clearing RAM disk\n");
   2b15c:	e59f0060 	ldr	r0, [pc, #96]	; 2b1c4 <disk_initialize+0xc8>
   2b160:	ebffe44d 	bl	2429c <uart_puts>
        }
        memset(ramdisk, 0, RAMDISK_SIZE);
   2b164:	e3a02601 	mov	r2, #1048576	; 0x100000
   2b168:	e3a01000 	mov	r1, #0
   2b16c:	e59f0054 	ldr	r0, [pc, #84]	; 2b1c8 <disk_initialize+0xcc>
   2b170:	eb00016e 	bl	2b730 <memset>
        disk_initialized = 1;
   2b174:	e59f3044 	ldr	r3, [pc, #68]	; 2b1c0 <disk_initialize+0xc4>
   2b178:	e3a02001 	mov	r2, #1
   2b17c:	e5832000 	str	r2, [r3]
    }
    
    /* 清除所有状态标志，确保不会有写保护或其他状态 */
    Stat = 0;
   2b180:	e59f3044 	ldr	r3, [pc, #68]	; 2b1cc <disk_initialize+0xd0>
   2b184:	e3a02000 	mov	r2, #0
   2b188:	e5c32000 	strb	r2, [r3]
    
    if (debug_output_enabled) {
   2b18c:	e59f3024 	ldr	r3, [pc, #36]	; 2b1b8 <disk_initialize+0xbc>
   2b190:	e5933000 	ldr	r3, [r3]
   2b194:	e3530000 	cmp	r3, #0
   2b198:	0a000001 	beq	2b1a4 <disk_initialize+0xa8>
        uart_puts("disk_initialize: Success\n");
   2b19c:	e59f002c 	ldr	r0, [pc, #44]	; 2b1d0 <disk_initialize+0xd4>
   2b1a0:	ebffe43d 	bl	2429c <uart_puts>
    }
    return Stat;  /* 总是返回成功 */
   2b1a4:	e59f3020 	ldr	r3, [pc, #32]	; 2b1cc <disk_initialize+0xd0>
   2b1a8:	e5d33000 	ldrb	r3, [r3]
}
   2b1ac:	e1a00003 	mov	r0, r3
   2b1b0:	e24bd004 	sub	sp, fp, #4
   2b1b4:	e8bd8800 	pop	{fp, pc}
   2b1b8:	0012d65c 	andseq	sp, r2, ip, asr r6
   2b1bc:	0002c1c4 	andeq	ip, r2, r4, asr #3
   2b1c0:	0012d658 	andseq	sp, r2, r8, asr r6
   2b1c4:	0002c1e4 	andeq	ip, r2, r4, ror #3
   2b1c8:	0002d658 	andeq	sp, r2, r8, asr r6
   2b1cc:	0002c248 	andeq	ip, r2, r8, asr #4
   2b1d0:	0002c220 	andeq	ip, r2, r0, lsr #4

0002b1d4 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
   2b1d4:	e92d4800 	push	{fp, lr}
   2b1d8:	e28db004 	add	fp, sp, #4
   2b1dc:	e24dd010 	sub	sp, sp, #16
   2b1e0:	e50b100c 	str	r1, [fp, #-12]
   2b1e4:	e50b2010 	str	r2, [fp, #-16]
   2b1e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2b1ec:	e1a03000 	mov	r3, r0
   2b1f0:	e54b3005 	strb	r3, [fp, #-5]
    if (pdrv != DEV_RAM) {
   2b1f4:	e55b3005 	ldrb	r3, [fp, #-5]
   2b1f8:	e3530000 	cmp	r3, #0
   2b1fc:	0a000001 	beq	2b208 <disk_read+0x34>
        return RES_PARERR;  /* 检查参数 */
   2b200:	e3a03004 	mov	r3, #4
   2b204:	ea00001a 	b	2b274 <disk_read+0xa0>
    }
    
    if (Stat & STA_NOINIT) {
   2b208:	e59f3070 	ldr	r3, [pc, #112]	; 2b280 <disk_read+0xac>
   2b20c:	e5d33000 	ldrb	r3, [r3]
   2b210:	e2033001 	and	r3, r3, #1
   2b214:	e3530000 	cmp	r3, #0
   2b218:	0a000001 	beq	2b224 <disk_read+0x50>
        return RES_NOTRDY;  /* 驱动器未初始化 */
   2b21c:	e3a03003 	mov	r3, #3
   2b220:	ea000013 	b	2b274 <disk_read+0xa0>
    }
    
    if (sector >= SECTOR_COUNT || sector + count > SECTOR_COUNT) {
   2b224:	e51b3010 	ldr	r3, [fp, #-16]
   2b228:	e3530b02 	cmp	r3, #2048	; 0x800
   2b22c:	2a000004 	bcs	2b244 <disk_read+0x70>
   2b230:	e51b2010 	ldr	r2, [fp, #-16]
   2b234:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b238:	e0823003 	add	r3, r2, r3
   2b23c:	e3530b02 	cmp	r3, #2048	; 0x800
   2b240:	9a000001 	bls	2b24c <disk_read+0x78>
        return RES_PARERR;  /* 超出范围 */
   2b244:	e3a03004 	mov	r3, #4
   2b248:	ea000009 	b	2b274 <disk_read+0xa0>
    }
    
    /* 从 RAM 磁盘拷贝数据到缓冲区 */
    memcpy(buff, ramdisk + sector * SECTOR_SIZE, count * SECTOR_SIZE);
   2b24c:	e51b3010 	ldr	r3, [fp, #-16]
   2b250:	e1a03483 	lsl	r3, r3, #9
   2b254:	e59f2028 	ldr	r2, [pc, #40]	; 2b284 <disk_read+0xb0>
   2b258:	e0831002 	add	r1, r3, r2
   2b25c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b260:	e1a03483 	lsl	r3, r3, #9
   2b264:	e1a02003 	mov	r2, r3
   2b268:	e51b000c 	ldr	r0, [fp, #-12]
   2b26c:	eb0000e7 	bl	2b610 <memcpy>
    
    return RES_OK;
   2b270:	e3a03000 	mov	r3, #0
}
   2b274:	e1a00003 	mov	r0, r3
   2b278:	e24bd004 	sub	sp, fp, #4
   2b27c:	e8bd8800 	pop	{fp, pc}
   2b280:	0002c248 	andeq	ip, r2, r8, asr #4
   2b284:	0002d658 	andeq	sp, r2, r8, asr r6

0002b288 <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
   2b288:	e92d4800 	push	{fp, lr}
   2b28c:	e28db004 	add	fp, sp, #4
   2b290:	e24dd010 	sub	sp, sp, #16
   2b294:	e50b100c 	str	r1, [fp, #-12]
   2b298:	e50b2010 	str	r2, [fp, #-16]
   2b29c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2b2a0:	e1a03000 	mov	r3, r0
   2b2a4:	e54b3005 	strb	r3, [fp, #-5]
    if (pdrv != DEV_RAM) {
   2b2a8:	e55b3005 	ldrb	r3, [fp, #-5]
   2b2ac:	e3530000 	cmp	r3, #0
   2b2b0:	0a000001 	beq	2b2bc <disk_write+0x34>
        return RES_PARERR;  /* 检查参数 */
   2b2b4:	e3a03004 	mov	r3, #4
   2b2b8:	ea00001a 	b	2b328 <disk_write+0xa0>
    }
    
    if (Stat & STA_NOINIT) {
   2b2bc:	e59f3070 	ldr	r3, [pc, #112]	; 2b334 <disk_write+0xac>
   2b2c0:	e5d33000 	ldrb	r3, [r3]
   2b2c4:	e2033001 	and	r3, r3, #1
   2b2c8:	e3530000 	cmp	r3, #0
   2b2cc:	0a000001 	beq	2b2d8 <disk_write+0x50>
        return RES_NOTRDY;  /* 驱动器未初始化 */
   2b2d0:	e3a03003 	mov	r3, #3
   2b2d4:	ea000013 	b	2b328 <disk_write+0xa0>
    }
    
    if (sector >= SECTOR_COUNT || sector + count > SECTOR_COUNT) {
   2b2d8:	e51b3010 	ldr	r3, [fp, #-16]
   2b2dc:	e3530b02 	cmp	r3, #2048	; 0x800
   2b2e0:	2a000004 	bcs	2b2f8 <disk_write+0x70>
   2b2e4:	e51b2010 	ldr	r2, [fp, #-16]
   2b2e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b2ec:	e0823003 	add	r3, r2, r3
   2b2f0:	e3530b02 	cmp	r3, #2048	; 0x800
   2b2f4:	9a000001 	bls	2b300 <disk_write+0x78>
        return RES_PARERR;  /* 超出范围 */
   2b2f8:	e3a03004 	mov	r3, #4
   2b2fc:	ea000009 	b	2b328 <disk_write+0xa0>
    }
    
    /* 从缓冲区拷贝数据到 RAM 磁盘 */
    memcpy(ramdisk + sector * SECTOR_SIZE, buff, count * SECTOR_SIZE);
   2b300:	e51b3010 	ldr	r3, [fp, #-16]
   2b304:	e1a03483 	lsl	r3, r3, #9
   2b308:	e59f2028 	ldr	r2, [pc, #40]	; 2b338 <disk_write+0xb0>
   2b30c:	e0830002 	add	r0, r3, r2
   2b310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b314:	e1a03483 	lsl	r3, r3, #9
   2b318:	e1a02003 	mov	r2, r3
   2b31c:	e51b100c 	ldr	r1, [fp, #-12]
   2b320:	eb0000ba 	bl	2b610 <memcpy>
    
    return RES_OK;
   2b324:	e3a03000 	mov	r3, #0
}
   2b328:	e1a00003 	mov	r0, r3
   2b32c:	e24bd004 	sub	sp, fp, #4
   2b330:	e8bd8800 	pop	{fp, pc}
   2b334:	0002c248 	andeq	ip, r2, r8, asr #4
   2b338:	0002d658 	andeq	sp, r2, r8, asr r6

0002b33c <disk_ioctl>:

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
   2b33c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2b340:	e28db000 	add	fp, sp, #0
   2b344:	e24dd014 	sub	sp, sp, #20
   2b348:	e1a03000 	mov	r3, r0
   2b34c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   2b350:	e54b300d 	strb	r3, [fp, #-13]
   2b354:	e1a03001 	mov	r3, r1
   2b358:	e54b300e 	strb	r3, [fp, #-14]
    DRESULT res = RES_PARERR;
   2b35c:	e3a03004 	mov	r3, #4
   2b360:	e54b3005 	strb	r3, [fp, #-5]
    
    if (pdrv != DEV_RAM) {
   2b364:	e55b300d 	ldrb	r3, [fp, #-13]
   2b368:	e3530000 	cmp	r3, #0
   2b36c:	0a000001 	beq	2b378 <disk_ioctl+0x3c>
        return RES_PARERR;  /* 检查参数 */
   2b370:	e3a03004 	mov	r3, #4
   2b374:	ea000027 	b	2b418 <disk_ioctl+0xdc>
    }
    
    if (Stat & STA_NOINIT) {
   2b378:	e59f30a8 	ldr	r3, [pc, #168]	; 2b428 <disk_ioctl+0xec>
   2b37c:	e5d33000 	ldrb	r3, [r3]
   2b380:	e2033001 	and	r3, r3, #1
   2b384:	e3530000 	cmp	r3, #0
   2b388:	0a000001 	beq	2b394 <disk_ioctl+0x58>
        return RES_NOTRDY;  /* 驱动器未初始化 */
   2b38c:	e3a03003 	mov	r3, #3
   2b390:	ea000020 	b	2b418 <disk_ioctl+0xdc>
    }
    
    switch (cmd) {
   2b394:	e55b300e 	ldrb	r3, [fp, #-14]
   2b398:	e3530003 	cmp	r3, #3
   2b39c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2b3a0:	ea000018 	b	2b408 <disk_ioctl+0xcc>
   2b3a4:	0002b3b4 			; <UNDEFINED> instruction: 0x0002b3b4
   2b3a8:	0002b3c0 	andeq	fp, r2, r0, asr #7
   2b3ac:	0002b3d8 	ldrdeq	fp, [r2], -r8
   2b3b0:	0002b3f0 	strdeq	fp, [r2], -r0
        case CTRL_SYNC:        /* 确保写入完成 */
            res = RES_OK;      /* RAM 磁盘不需要同步 */
   2b3b4:	e3a03000 	mov	r3, #0
   2b3b8:	e54b3005 	strb	r3, [fp, #-5]
            break;
   2b3bc:	ea000014 	b	2b414 <disk_ioctl+0xd8>
            
        case GET_SECTOR_COUNT: /* 获取媒体容量（以扇区为单位） */
            *(DWORD*)buff = SECTOR_COUNT;
   2b3c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b3c4:	e3a02b02 	mov	r2, #2048	; 0x800
   2b3c8:	e5832000 	str	r2, [r3]
            res = RES_OK;
   2b3cc:	e3a03000 	mov	r3, #0
   2b3d0:	e54b3005 	strb	r3, [fp, #-5]
            break;
   2b3d4:	ea00000e 	b	2b414 <disk_ioctl+0xd8>
            
        case GET_SECTOR_SIZE:  /* 获取扇区大小 */
            *(WORD*)buff = SECTOR_SIZE;
   2b3d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b3dc:	e3a02c02 	mov	r2, #512	; 0x200
   2b3e0:	e1c320b0 	strh	r2, [r3]
            res = RES_OK;
   2b3e4:	e3a03000 	mov	r3, #0
   2b3e8:	e54b3005 	strb	r3, [fp, #-5]
            break;
   2b3ec:	ea000008 	b	2b414 <disk_ioctl+0xd8>
            
        case GET_BLOCK_SIZE:   /* 获取擦除块大小 */
            *(DWORD*)buff = 1; /* 不可擦除，返回1 */
   2b3f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b3f4:	e3a02001 	mov	r2, #1
   2b3f8:	e5832000 	str	r2, [r3]
            res = RES_OK;
   2b3fc:	e3a03000 	mov	r3, #0
   2b400:	e54b3005 	strb	r3, [fp, #-5]
            break;
   2b404:	ea000002 	b	2b414 <disk_ioctl+0xd8>
            
        default:
            res = RES_OK;  /* 对于未知命令，返回OK而不是错误 */
   2b408:	e3a03000 	mov	r3, #0
   2b40c:	e54b3005 	strb	r3, [fp, #-5]
            break;
   2b410:	e320f000 	nop	{0}
    }
    
    return res;
   2b414:	e55b3005 	ldrb	r3, [fp, #-5]
}
   2b418:	e1a00003 	mov	r0, r3
   2b41c:	e28bd000 	add	sp, fp, #0
   2b420:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2b424:	e12fff1e 	bx	lr
   2b428:	0002c248 	andeq	ip, r2, r8, asr #4

0002b42c <get_fattime>:
#include "FreeRTOS.h"

/* 添加调试输出 */
extern void uart_puts(const char* s);

DWORD get_fattime(void) {
   2b42c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2b430:	e28db000 	add	fp, sp, #0
    /* 返回一个固定的时间戳，确保时间函数正常工作 */
    /* 2023年1月1日12:00:00 */
    return ((2023UL - 1980) << 25) | (1 << 21) | (1 << 16) | (12 << 11) | (0 << 5) | (0 >> 1);
   2b434:	e59f300c 	ldr	r3, [pc, #12]	; 2b448 <get_fattime+0x1c>
}
   2b438:	e1a00003 	mov	r0, r3
   2b43c:	e28bd000 	add	sp, fp, #0
   2b440:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2b444:	e12fff1e 	bx	lr
   2b448:	56216000 	strtpl	r6, [r1], -r0

0002b44c <__udivsi3>:
   2b44c:	e2512001 	subs	r2, r1, #1
   2b450:	012fff1e 	bxeq	lr
   2b454:	3a000036 	bcc	2b534 <__udivsi3+0xe8>
   2b458:	e1500001 	cmp	r0, r1
   2b45c:	9a000022 	bls	2b4ec <__udivsi3+0xa0>
   2b460:	e1110002 	tst	r1, r2
   2b464:	0a000023 	beq	2b4f8 <__udivsi3+0xac>
   2b468:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   2b46c:	01a01181 	lsleq	r1, r1, #3
   2b470:	03a03008 	moveq	r3, #8
   2b474:	13a03001 	movne	r3, #1
   2b478:	e3510201 	cmp	r1, #268435456	; 0x10000000
   2b47c:	31510000 	cmpcc	r1, r0
   2b480:	31a01201 	lslcc	r1, r1, #4
   2b484:	31a03203 	lslcc	r3, r3, #4
   2b488:	3afffffa 	bcc	2b478 <__udivsi3+0x2c>
   2b48c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   2b490:	31510000 	cmpcc	r1, r0
   2b494:	31a01081 	lslcc	r1, r1, #1
   2b498:	31a03083 	lslcc	r3, r3, #1
   2b49c:	3afffffa 	bcc	2b48c <__udivsi3+0x40>
   2b4a0:	e3a02000 	mov	r2, #0
   2b4a4:	e1500001 	cmp	r0, r1
   2b4a8:	20400001 	subcs	r0, r0, r1
   2b4ac:	21822003 	orrcs	r2, r2, r3
   2b4b0:	e15000a1 	cmp	r0, r1, lsr #1
   2b4b4:	204000a1 	subcs	r0, r0, r1, lsr #1
   2b4b8:	218220a3 	orrcs	r2, r2, r3, lsr #1
   2b4bc:	e1500121 	cmp	r0, r1, lsr #2
   2b4c0:	20400121 	subcs	r0, r0, r1, lsr #2
   2b4c4:	21822123 	orrcs	r2, r2, r3, lsr #2
   2b4c8:	e15001a1 	cmp	r0, r1, lsr #3
   2b4cc:	204001a1 	subcs	r0, r0, r1, lsr #3
   2b4d0:	218221a3 	orrcs	r2, r2, r3, lsr #3
   2b4d4:	e3500000 	cmp	r0, #0
   2b4d8:	11b03223 	lsrsne	r3, r3, #4
   2b4dc:	11a01221 	lsrne	r1, r1, #4
   2b4e0:	1affffef 	bne	2b4a4 <__udivsi3+0x58>
   2b4e4:	e1a00002 	mov	r0, r2
   2b4e8:	e12fff1e 	bx	lr
   2b4ec:	03a00001 	moveq	r0, #1
   2b4f0:	13a00000 	movne	r0, #0
   2b4f4:	e12fff1e 	bx	lr
   2b4f8:	e3510801 	cmp	r1, #65536	; 0x10000
   2b4fc:	21a01821 	lsrcs	r1, r1, #16
   2b500:	23a02010 	movcs	r2, #16
   2b504:	33a02000 	movcc	r2, #0
   2b508:	e3510c01 	cmp	r1, #256	; 0x100
   2b50c:	21a01421 	lsrcs	r1, r1, #8
   2b510:	22822008 	addcs	r2, r2, #8
   2b514:	e3510010 	cmp	r1, #16
   2b518:	21a01221 	lsrcs	r1, r1, #4
   2b51c:	22822004 	addcs	r2, r2, #4
   2b520:	e3510004 	cmp	r1, #4
   2b524:	82822003 	addhi	r2, r2, #3
   2b528:	908220a1 	addls	r2, r2, r1, lsr #1
   2b52c:	e1a00230 	lsr	r0, r0, r2
   2b530:	e12fff1e 	bx	lr
   2b534:	e3500000 	cmp	r0, #0
   2b538:	13e00000 	mvnne	r0, #0
   2b53c:	ea000007 	b	2b560 <__aeabi_idiv0>

0002b540 <__aeabi_uidivmod>:
   2b540:	e3510000 	cmp	r1, #0
   2b544:	0afffffa 	beq	2b534 <__udivsi3+0xe8>
   2b548:	e92d4003 	push	{r0, r1, lr}
   2b54c:	ebffffbe 	bl	2b44c <__udivsi3>
   2b550:	e8bd4006 	pop	{r1, r2, lr}
   2b554:	e0030092 	mul	r3, r2, r0
   2b558:	e0411003 	sub	r1, r1, r3
   2b55c:	e12fff1e 	bx	lr

0002b560 <__aeabi_idiv0>:
   2b560:	e12fff1e 	bx	lr

0002b564 <memcmp>:
   2b564:	e3520003 	cmp	r2, #3
   2b568:	e92d4010 	push	{r4, lr}
   2b56c:	9a000011 	bls	2b5b8 <memcmp+0x54>
   2b570:	e180e001 	orr	lr, r0, r1
   2b574:	e31e0003 	tst	lr, #3
   2b578:	e1a0c000 	mov	ip, r0
   2b57c:	e1a03001 	mov	r3, r1
   2b580:	1a00001d 	bne	2b5fc <memcmp+0x98>
   2b584:	e1a01003 	mov	r1, r3
   2b588:	e1a0000c 	mov	r0, ip
   2b58c:	e591e000 	ldr	lr, [r1]
   2b590:	e5904000 	ldr	r4, [r0]
   2b594:	e154000e 	cmp	r4, lr
   2b598:	e2833004 	add	r3, r3, #4
   2b59c:	e28cc004 	add	ip, ip, #4
   2b5a0:	1a000015 	bne	2b5fc <memcmp+0x98>
   2b5a4:	e2422004 	sub	r2, r2, #4
   2b5a8:	e3520003 	cmp	r2, #3
   2b5ac:	e1a0000c 	mov	r0, ip
   2b5b0:	e1a01003 	mov	r1, r3
   2b5b4:	8afffff2 	bhi	2b584 <memcmp+0x20>
   2b5b8:	e3520000 	cmp	r2, #0
   2b5bc:	01a00002 	moveq	r0, r2
   2b5c0:	e2424001 	sub	r4, r2, #1
   2b5c4:	0a00000a 	beq	2b5f4 <memcmp+0x90>
   2b5c8:	e240c001 	sub	ip, r0, #1
   2b5cc:	e2411001 	sub	r1, r1, #1
   2b5d0:	ea000001 	b	2b5dc <memcmp+0x78>
   2b5d4:	e0903003 	adds	r3, r0, r3
   2b5d8:	0a000009 	beq	2b604 <memcmp+0xa0>
   2b5dc:	e5fce001 	ldrb	lr, [ip, #1]!
   2b5e0:	e5f12001 	ldrb	r2, [r1, #1]!
   2b5e4:	e15e0002 	cmp	lr, r2
   2b5e8:	e044300c 	sub	r3, r4, ip
   2b5ec:	0afffff8 	beq	2b5d4 <memcmp+0x70>
   2b5f0:	e04e0002 	sub	r0, lr, r2
   2b5f4:	e8bd4010 	pop	{r4, lr}
   2b5f8:	e12fff1e 	bx	lr
   2b5fc:	e2424001 	sub	r4, r2, #1
   2b600:	eafffff0 	b	2b5c8 <memcmp+0x64>
   2b604:	e1a00003 	mov	r0, r3
   2b608:	e8bd4010 	pop	{r4, lr}
   2b60c:	e12fff1e 	bx	lr

0002b610 <memcpy>:
   2b610:	e352000f 	cmp	r2, #15
   2b614:	9a000036 	bls	2b6f4 <memcpy+0xe4>
   2b618:	e1803001 	orr	r3, r0, r1
   2b61c:	e3130003 	tst	r3, #3
   2b620:	1a00003f 	bne	2b724 <memcpy+0x114>
   2b624:	e242c010 	sub	ip, r2, #16
   2b628:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b62c:	e2814020 	add	r4, r1, #32
   2b630:	e3cce00f 	bic	lr, ip, #15
   2b634:	e2813010 	add	r3, r1, #16
   2b638:	e2806010 	add	r6, r0, #16
   2b63c:	e084400e 	add	r4, r4, lr
   2b640:	e1a0522c 	lsr	r5, ip, #4
   2b644:	e513e00c 	ldr	lr, [r3, #-12]
   2b648:	e513c008 	ldr	ip, [r3, #-8]
   2b64c:	e5137010 	ldr	r7, [r3, #-16]
   2b650:	e506e00c 	str	lr, [r6, #-12]
   2b654:	e2833010 	add	r3, r3, #16
   2b658:	e513e014 	ldr	lr, [r3, #-20]	; 0xffffffec
   2b65c:	e1530004 	cmp	r3, r4
   2b660:	e9065000 	stmdb	r6, {ip, lr}
   2b664:	e5067010 	str	r7, [r6, #-16]
   2b668:	e2866010 	add	r6, r6, #16
   2b66c:	1afffff4 	bne	2b644 <memcpy+0x34>
   2b670:	e285c001 	add	ip, r5, #1
   2b674:	e312000c 	tst	r2, #12
   2b678:	e202300f 	and	r3, r2, #15
   2b67c:	e081120c 	add	r1, r1, ip, lsl #4
   2b680:	01a02003 	moveq	r2, r3
   2b684:	e080c20c 	add	ip, r0, ip, lsl #4
   2b688:	0a00000d 	beq	2b6c4 <memcpy+0xb4>
   2b68c:	e1a04001 	mov	r4, r1
   2b690:	e2433004 	sub	r3, r3, #4
   2b694:	e3c36003 	bic	r6, r3, #3
   2b698:	e1a0e123 	lsr	lr, r3, #2
   2b69c:	e08c6006 	add	r6, ip, r6
   2b6a0:	e24c3004 	sub	r3, ip, #4
   2b6a4:	e4945004 	ldr	r5, [r4], #4
   2b6a8:	e5a35004 	str	r5, [r3, #4]!
   2b6ac:	e1530006 	cmp	r3, r6
   2b6b0:	1afffffb 	bne	2b6a4 <memcpy+0x94>
   2b6b4:	e28e3001 	add	r3, lr, #1
   2b6b8:	e2022003 	and	r2, r2, #3
   2b6bc:	e08cc103 	add	ip, ip, r3, lsl #2
   2b6c0:	e0811103 	add	r1, r1, r3, lsl #2
   2b6c4:	e3520000 	cmp	r2, #0
   2b6c8:	e2423001 	sub	r3, r2, #1
   2b6cc:	12833001 	addne	r3, r3, #1
   2b6d0:	124c2001 	subne	r2, ip, #1
   2b6d4:	10813003 	addne	r3, r1, r3
   2b6d8:	0a000003 	beq	2b6ec <memcpy+0xdc>
   2b6dc:	e4d1c001 	ldrb	ip, [r1], #1
   2b6e0:	e1510003 	cmp	r1, r3
   2b6e4:	e5e2c001 	strb	ip, [r2, #1]!
   2b6e8:	1afffffb 	bne	2b6dc <memcpy+0xcc>
   2b6ec:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2b6f0:	e12fff1e 	bx	lr
   2b6f4:	e3520000 	cmp	r2, #0
   2b6f8:	e1a0c000 	mov	ip, r0
   2b6fc:	e2423001 	sub	r3, r2, #1
   2b700:	012fff1e 	bxeq	lr
   2b704:	e2833001 	add	r3, r3, #1
   2b708:	e24c2001 	sub	r2, ip, #1
   2b70c:	e0813003 	add	r3, r1, r3
   2b710:	e4d1c001 	ldrb	ip, [r1], #1
   2b714:	e1510003 	cmp	r1, r3
   2b718:	e5e2c001 	strb	ip, [r2, #1]!
   2b71c:	1afffffb 	bne	2b710 <memcpy+0x100>
   2b720:	e12fff1e 	bx	lr
   2b724:	e1a0c000 	mov	ip, r0
   2b728:	e2423001 	sub	r3, r2, #1
   2b72c:	eafffff4 	b	2b704 <memcpy+0xf4>

0002b730 <memset>:
   2b730:	e3100003 	tst	r0, #3
   2b734:	0a000040 	beq	2b83c <memset+0x10c>
   2b738:	e3520000 	cmp	r2, #0
   2b73c:	e2422001 	sub	r2, r2, #1
   2b740:	012fff1e 	bxeq	lr
   2b744:	e1a03000 	mov	r3, r0
   2b748:	e201c0ff 	and	ip, r1, #255	; 0xff
   2b74c:	ea000002 	b	2b75c <memset+0x2c>
   2b750:	e2422001 	sub	r2, r2, #1
   2b754:	e3720001 	cmn	r2, #1
   2b758:	012fff1e 	bxeq	lr
   2b75c:	e4c3c001 	strb	ip, [r3], #1
   2b760:	e3130003 	tst	r3, #3
   2b764:	1afffff9 	bne	2b750 <memset+0x20>
   2b768:	e3520003 	cmp	r2, #3
   2b76c:	9a000028 	bls	2b814 <memset+0xe4>
   2b770:	e92d4030 	push	{r4, r5, lr}
   2b774:	e201e0ff 	and	lr, r1, #255	; 0xff
   2b778:	e18ee40e 	orr	lr, lr, lr, lsl #8
   2b77c:	e352000f 	cmp	r2, #15
   2b780:	e18ee80e 	orr	lr, lr, lr, lsl #16
   2b784:	9a00002e 	bls	2b844 <memset+0x114>
   2b788:	e242c010 	sub	ip, r2, #16
   2b78c:	e3cc400f 	bic	r4, ip, #15
   2b790:	e2835020 	add	r5, r3, #32
   2b794:	e0855004 	add	r5, r5, r4
   2b798:	e1a0422c 	lsr	r4, ip, #4
   2b79c:	e283c010 	add	ip, r3, #16
   2b7a0:	e50ce010 	str	lr, [ip, #-16]
   2b7a4:	e50ce00c 	str	lr, [ip, #-12]
   2b7a8:	e50ce008 	str	lr, [ip, #-8]
   2b7ac:	e50ce004 	str	lr, [ip, #-4]
   2b7b0:	e28cc010 	add	ip, ip, #16
   2b7b4:	e15c0005 	cmp	ip, r5
   2b7b8:	1afffff8 	bne	2b7a0 <memset+0x70>
   2b7bc:	e284c001 	add	ip, r4, #1
   2b7c0:	e312000c 	tst	r2, #12
   2b7c4:	e083c20c 	add	ip, r3, ip, lsl #4
   2b7c8:	e202200f 	and	r2, r2, #15
   2b7cc:	0a000018 	beq	2b834 <memset+0x104>
   2b7d0:	e2423004 	sub	r3, r2, #4
   2b7d4:	e3c33003 	bic	r3, r3, #3
   2b7d8:	e2833004 	add	r3, r3, #4
   2b7dc:	e08c3003 	add	r3, ip, r3
   2b7e0:	e48ce004 	str	lr, [ip], #4
   2b7e4:	e153000c 	cmp	r3, ip
   2b7e8:	1afffffc 	bne	2b7e0 <memset+0xb0>
   2b7ec:	e2022003 	and	r2, r2, #3
   2b7f0:	e3520000 	cmp	r2, #0
   2b7f4:	0a000004 	beq	2b80c <memset+0xdc>
   2b7f8:	e20110ff 	and	r1, r1, #255	; 0xff
   2b7fc:	e0832002 	add	r2, r3, r2
   2b800:	e4c31001 	strb	r1, [r3], #1
   2b804:	e1520003 	cmp	r2, r3
   2b808:	1afffffc 	bne	2b800 <memset+0xd0>
   2b80c:	e8bd4030 	pop	{r4, r5, lr}
   2b810:	e12fff1e 	bx	lr
   2b814:	e3520000 	cmp	r2, #0
   2b818:	012fff1e 	bxeq	lr
   2b81c:	e20110ff 	and	r1, r1, #255	; 0xff
   2b820:	e0832002 	add	r2, r3, r2
   2b824:	e4c31001 	strb	r1, [r3], #1
   2b828:	e1520003 	cmp	r2, r3
   2b82c:	1afffffc 	bne	2b824 <memset+0xf4>
   2b830:	e12fff1e 	bx	lr
   2b834:	e1a0300c 	mov	r3, ip
   2b838:	eaffffec 	b	2b7f0 <memset+0xc0>
   2b83c:	e1a03000 	mov	r3, r0
   2b840:	eaffffc8 	b	2b768 <memset+0x38>
   2b844:	e1a0c003 	mov	ip, r3
   2b848:	eaffffe0 	b	2b7d0 <memset+0xa0>

0002b84c <strchr>:
   2b84c:	e21110ff 	ands	r1, r1, #255	; 0xff
   2b850:	0a00002e 	beq	2b910 <strchr+0xc4>
   2b854:	e3100003 	tst	r0, #3
   2b858:	e1a03000 	mov	r3, r0
   2b85c:	1a000025 	bne	2b8f8 <strchr+0xac>
   2b860:	e92d4070 	push	{r4, r5, r6, lr}
   2b864:	e590c000 	ldr	ip, [r0]
   2b868:	e1815401 	orr	r5, r1, r1, lsl #8
   2b86c:	e59f4120 	ldr	r4, [pc, #288]	; 2b994 <strchr+0x148>
   2b870:	e1855805 	orr	r5, r5, r5, lsl #16
   2b874:	e025200c 	eor	r2, r5, ip
   2b878:	e0823004 	add	r3, r2, r4
   2b87c:	e1c33002 	bic	r3, r3, r2
   2b880:	e08c2004 	add	r2, ip, r4
   2b884:	e59f610c 	ldr	r6, [pc, #268]	; 2b998 <strchr+0x14c>
   2b888:	e1c2200c 	bic	r2, r2, ip
   2b88c:	e1833002 	orr	r3, r3, r2
   2b890:	e1130006 	tst	r3, r6
   2b894:	1a000008 	bne	2b8bc <strchr+0x70>
   2b898:	e5b0c004 	ldr	ip, [r0, #4]!
   2b89c:	e02ce005 	eor	lr, ip, r5
   2b8a0:	e08c3004 	add	r3, ip, r4
   2b8a4:	e08e2004 	add	r2, lr, r4
   2b8a8:	e1c3300c 	bic	r3, r3, ip
   2b8ac:	e1c2200e 	bic	r2, r2, lr
   2b8b0:	e1833002 	orr	r3, r3, r2
   2b8b4:	e1130006 	tst	r3, r6
   2b8b8:	0afffff6 	beq	2b898 <strchr+0x4c>
   2b8bc:	e5d03000 	ldrb	r3, [r0]
   2b8c0:	e3530000 	cmp	r3, #0
   2b8c4:	1a000003 	bne	2b8d8 <strchr+0x8c>
   2b8c8:	ea00002e 	b	2b988 <strchr+0x13c>
   2b8cc:	e5f03001 	ldrb	r3, [r0, #1]!
   2b8d0:	e3530000 	cmp	r3, #0
   2b8d4:	0a00002b 	beq	2b988 <strchr+0x13c>
   2b8d8:	e1510003 	cmp	r1, r3
   2b8dc:	1afffffa 	bne	2b8cc <strchr+0x80>
   2b8e0:	ea000029 	b	2b98c <strchr+0x140>
   2b8e4:	e1520001 	cmp	r2, r1
   2b8e8:	012fff1e 	bxeq	lr
   2b8ec:	e3130003 	tst	r3, #3
   2b8f0:	e1a00003 	mov	r0, r3
   2b8f4:	0affffd9 	beq	2b860 <strchr+0x14>
   2b8f8:	e1a00003 	mov	r0, r3
   2b8fc:	e4d32001 	ldrb	r2, [r3], #1
   2b900:	e3520000 	cmp	r2, #0
   2b904:	1afffff6 	bne	2b8e4 <strchr+0x98>
   2b908:	e1a00002 	mov	r0, r2
   2b90c:	e12fff1e 	bx	lr
   2b910:	e3100003 	tst	r0, #3
   2b914:	e1a03000 	mov	r3, r0
   2b918:	0a000007 	beq	2b93c <strchr+0xf0>
   2b91c:	e1a00003 	mov	r0, r3
   2b920:	e5d02000 	ldrb	r2, [r0]
   2b924:	e3520000 	cmp	r2, #0
   2b928:	e2833001 	add	r3, r3, #1
   2b92c:	012fff1e 	bxeq	lr
   2b930:	e3130003 	tst	r3, #3
   2b934:	e1a00003 	mov	r0, r3
   2b938:	1afffff7 	bne	2b91c <strchr+0xd0>
   2b93c:	e5902000 	ldr	r2, [r0]
   2b940:	e59fc04c 	ldr	ip, [pc, #76]	; 2b994 <strchr+0x148>
   2b944:	e59f104c 	ldr	r1, [pc, #76]	; 2b998 <strchr+0x14c>
   2b948:	e082300c 	add	r3, r2, ip
   2b94c:	e1c33002 	bic	r3, r3, r2
   2b950:	e1130001 	tst	r3, r1
   2b954:	1a000004 	bne	2b96c <strchr+0x120>
   2b958:	e5b02004 	ldr	r2, [r0, #4]!
   2b95c:	e082300c 	add	r3, r2, ip
   2b960:	e1c33002 	bic	r3, r3, r2
   2b964:	e1130001 	tst	r3, r1
   2b968:	0afffffa 	beq	2b958 <strchr+0x10c>
   2b96c:	e5d03000 	ldrb	r3, [r0]
   2b970:	e3530000 	cmp	r3, #0
   2b974:	012fff1e 	bxeq	lr
   2b978:	e5f03001 	ldrb	r3, [r0, #1]!
   2b97c:	e3530000 	cmp	r3, #0
   2b980:	1afffffc 	bne	2b978 <strchr+0x12c>
   2b984:	e12fff1e 	bx	lr
   2b988:	e1a00003 	mov	r0, r3
   2b98c:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b990:	e12fff1e 	bx	lr
   2b994:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   2b998:	80808080 	addhi	r8, r0, r0, lsl #1

0002b99c <strlen>:
   2b99c:	e3c01003 	bic	r1, r0, #3
   2b9a0:	e2100003 	ands	r0, r0, #3
   2b9a4:	e2600000 	rsb	r0, r0, #0
   2b9a8:	e4913004 	ldr	r3, [r1], #4
   2b9ac:	e280c004 	add	ip, r0, #4
   2b9b0:	e1a0c18c 	lsl	ip, ip, #3
   2b9b4:	e3e02000 	mvn	r2, #0
   2b9b8:	11833c32 	orrne	r3, r3, r2, lsr ip
   2b9bc:	e3a0c001 	mov	ip, #1
   2b9c0:	e18cc40c 	orr	ip, ip, ip, lsl #8
   2b9c4:	e18cc80c 	orr	ip, ip, ip, lsl #16
   2b9c8:	e043200c 	sub	r2, r3, ip
   2b9cc:	e1c22003 	bic	r2, r2, r3
   2b9d0:	e012238c 	ands	r2, r2, ip, lsl #7
   2b9d4:	04913004 	ldreq	r3, [r1], #4
   2b9d8:	02800004 	addeq	r0, r0, #4
   2b9dc:	0afffff9 	beq	2b9c8 <strlen+0x2c>
   2b9e0:	e31300ff 	tst	r3, #255	; 0xff
   2b9e4:	12800001 	addne	r0, r0, #1
   2b9e8:	13130cff 	tstne	r3, #65280	; 0xff00
   2b9ec:	12800001 	addne	r0, r0, #1
   2b9f0:	131308ff 	tstne	r3, #16711680	; 0xff0000
   2b9f4:	12800001 	addne	r0, r0, #1
   2b9f8:	e12fff1e 	bx	lr

0002b9fc <strncpy>:
   2b9fc:	e1803001 	orr	r3, r0, r1
   2ba00:	e3520003 	cmp	r2, #3
   2ba04:	e2033003 	and	r3, r3, #3
   2ba08:	93a0c000 	movls	ip, #0
   2ba0c:	83a0c001 	movhi	ip, #1
   2ba10:	e3530000 	cmp	r3, #0
   2ba14:	13a0c000 	movne	ip, #0
   2ba18:	e35c0000 	cmp	ip, #0
   2ba1c:	01a0c000 	moveq	ip, r0
   2ba20:	e92d4070 	push	{r4, r5, r6, lr}
   2ba24:	1a000015 	bne	2ba80 <strncpy+0x84>
   2ba28:	e241e001 	sub	lr, r1, #1
   2ba2c:	ea000007 	b	2ba50 <strncpy+0x54>
   2ba30:	e1a0300c 	mov	r3, ip
   2ba34:	e5fe1001 	ldrb	r1, [lr, #1]!
   2ba38:	e3510000 	cmp	r1, #0
   2ba3c:	e4c31001 	strb	r1, [r3], #1
   2ba40:	e2424001 	sub	r4, r2, #1
   2ba44:	0a000005 	beq	2ba60 <strncpy+0x64>
   2ba48:	e1a0c003 	mov	ip, r3
   2ba4c:	e1a02004 	mov	r2, r4
   2ba50:	e3520000 	cmp	r2, #0
   2ba54:	1afffff5 	bne	2ba30 <strncpy+0x34>
   2ba58:	e8bd4070 	pop	{r4, r5, r6, lr}
   2ba5c:	e12fff1e 	bx	lr
   2ba60:	e3540000 	cmp	r4, #0
   2ba64:	108c2002 	addne	r2, ip, r2
   2ba68:	0afffffa 	beq	2ba58 <strncpy+0x5c>
   2ba6c:	e4c31001 	strb	r1, [r3], #1
   2ba70:	e1530002 	cmp	r3, r2
   2ba74:	1afffffc 	bne	2ba6c <strncpy+0x70>
   2ba78:	e8bd4070 	pop	{r4, r5, r6, lr}
   2ba7c:	e12fff1e 	bx	lr
   2ba80:	e1a03001 	mov	r3, r1
   2ba84:	e1a0c000 	mov	ip, r0
   2ba88:	e59f6030 	ldr	r6, [pc, #48]	; 2bac0 <strncpy+0xc4>
   2ba8c:	e59f5030 	ldr	r5, [pc, #48]	; 2bac4 <strncpy+0xc8>
   2ba90:	e1a01003 	mov	r1, r3
   2ba94:	e4934004 	ldr	r4, [r3], #4
   2ba98:	e084e006 	add	lr, r4, r6
   2ba9c:	e1cee004 	bic	lr, lr, r4
   2baa0:	e11e0005 	tst	lr, r5
   2baa4:	1affffdf 	bne	2ba28 <strncpy+0x2c>
   2baa8:	e2422004 	sub	r2, r2, #4
   2baac:	e3520003 	cmp	r2, #3
   2bab0:	e1a01003 	mov	r1, r3
   2bab4:	e48c4004 	str	r4, [ip], #4
   2bab8:	8afffff4 	bhi	2ba90 <strncpy+0x94>
   2babc:	eaffffd9 	b	2ba28 <strncpy+0x2c>
   2bac0:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   2bac4:	80808080 	addhi	r8, r0, r0, lsl #1

Disassembly of section .rodata:

0002bac8 <pRegs>:
static volatile BCM2835_TIMER_REGS * const pRegs = (BCM2835_TIMER_REGS *) (portTIMER_BASE);
   2bac8:	2000b400 	andcs	fp, r0, r0, lsl #8
   2bacc:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
   2bad0:	00000000 	andeq	r0, r0, r0

0002bad4 <pRegs>:
static volatile BCM2835_INTC_REGS * const pRegs = (BCM2835_INTC_REGS *) (BCM2835_BASE_INTC);
   2bad4:	2000b200 	andcs	fp, r0, r0, lsl #4

0002bad8 <heapSTRUCT_SIZE>:
static const unsigned short heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( sizeof( xBlockLink ) % portBYTE_ALIGNMENT ) );
   2bad8:	00000010 	andeq	r0, r0, r0, lsl r0

0002badc <xTotalHeapSize>:
static const size_t xTotalHeapSize = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   2badc:	00001000 	andeq	r1, r0, r0
   2bae0:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
   2bae4:	72452053 	subvc	r2, r5, #83	; 0x53
   2bae8:	3a726f72 	bcc	1cc78b8 <__bss_end+0x1b9a258>
   2baec:	00000020 	andeq	r0, r0, r0, lsr #32
   2baf0:	20293028 	eorcs	r3, r9, r8, lsr #32
   2baf4:	63637553 	cmnvs	r3, #348127232	; 0x14c00000
   2baf8:	65646565 	strbvs	r6, [r4, #-1381]!	; 0xfffffa9b
   2bafc:	00000064 	andeq	r0, r0, r4, rrx
   2bb00:	20293128 	eorcs	r3, r9, r8, lsr #2
   2bb04:	61682041 	cmnvs	r8, r1, asr #32
   2bb08:	65206472 	strvs	r6, [r0, #-1138]!	; 0xfffffb8e
   2bb0c:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
   2bb10:	63636f20 	cmnvs	r3, #32, 30	; 0x80
   2bb14:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
   2bb18:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
   2bb1c:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
   2bb20:	776f6c20 	strbvc	r6, [pc, -r0, lsr #24]!
   2bb24:	76656c20 	strbtvc	r6, [r5], -r0, lsr #24
   2bb28:	64206c65 	strtvs	r6, [r0], #-3173	; 0xfffff39b
   2bb2c:	206b7369 	rsbcs	r7, fp, r9, ror #6
   2bb30:	204f2f49 	subcs	r2, pc, r9, asr #30
   2bb34:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
   2bb38:	00000072 	andeq	r0, r0, r2, ror r0
   2bb3c:	20293228 	eorcs	r3, r9, r8, lsr #4
   2bb40:	65737341 	ldrbvs	r7, [r3, #-833]!	; 0xfffffcbf
   2bb44:	6f697472 	svcvs	0x00697472
   2bb48:	6166206e 	cmnvs	r6, lr, rrx
   2bb4c:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
   2bb50:	00000000 	andeq	r0, r0, r0
   2bb54:	20293328 	eorcs	r3, r9, r8, lsr #6
   2bb58:	20656854 	rsbcs	r6, r5, r4, asr r8
   2bb5c:	73796870 	cmnvc	r9, #112, 16	; 0x700000
   2bb60:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
   2bb64:	69726420 	ldmdbvs	r2!, {r5, sl, sp, lr}^
   2bb68:	63206576 			; <UNDEFINED> instruction: 0x63206576
   2bb6c:	6f6e6e61 	svcvs	0x006e6e61
   2bb70:	6f772074 	svcvs	0x00772074
   2bb74:	00006b72 	andeq	r6, r0, r2, ror fp
   2bb78:	20293428 	eorcs	r3, r9, r8, lsr #8
   2bb7c:	6c756f43 	ldclvs	15, cr6, [r5], #-268	; 0xfffffef4
   2bb80:	6f6e2064 	svcvs	0x006e2064
   2bb84:	69662074 	stmdbvs	r6!, {r2, r4, r5, r6, sp}^
   2bb88:	7420646e 	strtvc	r6, [r0], #-1134	; 0xfffffb92
   2bb8c:	66206568 	strtvs	r6, [r0], -r8, ror #10
   2bb90:	00656c69 	rsbeq	r6, r5, r9, ror #24
   2bb94:	20293528 	eorcs	r3, r9, r8, lsr #10
   2bb98:	6c756f43 	ldclvs	15, cr6, [r5], #-268	; 0xfffffef4
   2bb9c:	6f6e2064 	svcvs	0x006e2064
   2bba0:	69662074 	stmdbvs	r6!, {r2, r4, r5, r6, sp}^
   2bba4:	7420646e 	strtvc	r6, [r0], #-1134	; 0xfffffb92
   2bba8:	70206568 	eorvc	r6, r0, r8, ror #10
   2bbac:	00687461 	rsbeq	r7, r8, r1, ror #8
   2bbb0:	20293628 	eorcs	r3, r9, r8, lsr #12
   2bbb4:	20656854 	rsbcs	r6, r5, r4, asr r8
   2bbb8:	68746170 	ldmdavs	r4!, {r4, r5, r6, r8, sp, lr}^
   2bbbc:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
   2bbc0:	6f662065 	svcvs	0x00662065
   2bbc4:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
   2bbc8:	20736920 	rsbscs	r6, r3, r0, lsr #18
   2bbcc:	61766e69 	cmnvs	r6, r9, ror #28
   2bbd0:	0064696c 	rsbeq	r6, r4, ip, ror #18
   2bbd4:	20293728 	eorcs	r3, r9, r8, lsr #14
   2bbd8:	65636341 	strbvs	r6, [r3, #-833]!	; 0xfffffcbf
   2bbdc:	64207373 	strtvs	r7, [r0], #-883	; 0xfffffc8d
   2bbe0:	65696e65 	strbvs	r6, [r9, #-3685]!	; 0xfffff19b
   2bbe4:	75642064 	strbvc	r2, [r4, #-100]!	; 0xffffff9c
   2bbe8:	6f742065 	svcvs	0x00742065
   2bbec:	6f727020 	svcvs	0x00727020
   2bbf0:	69626968 	stmdbvs	r2!, {r3, r5, r6, r8, fp, sp, lr}^
   2bbf4:	20646574 	rsbcs	r6, r4, r4, ror r5
   2bbf8:	65636361 	strbvs	r6, [r3, #-865]!	; 0xfffffc9f
   2bbfc:	6f207373 	svcvs	0x00207373
   2bc00:	69642072 	stmdbvs	r4!, {r1, r4, r5, r6, sp}^
   2bc04:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
   2bc08:	2079726f 	rsbscs	r7, r9, pc, ror #4
   2bc0c:	6c6c7566 	cfstr64vs	mvdx7, [ip], #-408	; 0xfffffe68
   2bc10:	00000000 	andeq	r0, r0, r0
   2bc14:	20293828 	eorcs	r3, r9, r8, lsr #16
   2bc18:	65636341 	strbvs	r6, [r3, #-833]!	; 0xfffffcbf
   2bc1c:	64207373 	strtvs	r7, [r0], #-883	; 0xfffffc8d
   2bc20:	65696e65 	strbvs	r6, [r9, #-3685]!	; 0xfffff19b
   2bc24:	75642064 	strbvc	r2, [r4, #-100]!	; 0xffffff9c
   2bc28:	6f742065 	svcvs	0x00742065
   2bc2c:	6f727020 	svcvs	0x00727020
   2bc30:	69626968 	stmdbvs	r2!, {r3, r5, r6, r8, fp, sp, lr}^
   2bc34:	20646574 	rsbcs	r6, r4, r4, ror r5
   2bc38:	65636361 	strbvs	r6, [r3, #-865]!	; 0xfffffc9f
   2bc3c:	00007373 	andeq	r7, r0, r3, ror r3
   2bc40:	20293928 	eorcs	r3, r9, r8, lsr #18
   2bc44:	20656854 	rsbcs	r6, r5, r4, asr r8
   2bc48:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
   2bc4c:	7269642f 	rsbvc	r6, r9, #788529152	; 0x2f000000
   2bc50:	6f746365 	svcvs	0x00746365
   2bc54:	6f207972 	svcvs	0x00207972
   2bc58:	63656a62 	cmnvs	r5, #401408	; 0x62000
   2bc5c:	73692074 	cmnvc	r9, #116	; 0x74
   2bc60:	766e6920 	strbtvc	r6, [lr], -r0, lsr #18
   2bc64:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
   2bc68:	00000000 	andeq	r0, r0, r0
   2bc6c:	29303128 	ldmdbcs	r0!, {r3, r5, r8, ip, sp}
   2bc70:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2bc74:	79687020 	stmdbvc	r8!, {r5, ip, sp, lr}^
   2bc78:	61636973 	smcvs	13971	; 0x3693
   2bc7c:	7264206c 	rsbvc	r2, r4, #108	; 0x6c
   2bc80:	20657669 	rsbcs	r7, r5, r9, ror #12
   2bc84:	77207369 	strvc	r7, [r0, -r9, ror #6]!
   2bc88:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
   2bc8c:	6f727020 	svcvs	0x00727020
   2bc90:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
   2bc94:	00006465 	andeq	r6, r0, r5, ror #8
   2bc98:	29313128 	ldmdbcs	r1!, {r3, r5, r8, ip, sp}
   2bc9c:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2bca0:	676f6c20 	strbvs	r6, [pc, -r0, lsr #24]!
   2bca4:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
   2bca8:	69726420 	ldmdbvs	r2!, {r5, sl, sp, lr}^
   2bcac:	6e206576 	mcrvs	5, 1, r6, cr0, cr6, {3}
   2bcb0:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
   2bcb4:	73692072 	cmnvc	r9, #114	; 0x72
   2bcb8:	766e6920 	strbtvc	r6, [lr], -r0, lsr #18
   2bcbc:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
   2bcc0:	00000000 	andeq	r0, r0, r0
   2bcc4:	29323128 	ldmdbcs	r2!, {r3, r5, r8, ip, sp}
   2bcc8:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2bccc:	6c6f7620 	stclvs	6, cr7, [pc], #-128	; 2bc54 <xTotalHeapSize+0x178>
   2bcd0:	20656d75 	rsbcs	r6, r5, r5, ror sp
   2bcd4:	20736168 	rsbscs	r6, r3, r8, ror #2
   2bcd8:	77206f6e 	strvc	r6, [r0, -lr, ror #30]!
   2bcdc:	206b726f 	rsbcs	r7, fp, pc, ror #4
   2bce0:	61657261 	cmnvs	r5, r1, ror #4
   2bce4:	00000000 	andeq	r0, r0, r0
   2bce8:	29333128 	ldmdbcs	r3!, {r3, r5, r8, ip, sp}
   2bcec:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2bcf0:	69206572 	stmdbvs	r0!, {r1, r4, r5, r6, r8, sl, sp, lr}
   2bcf4:	6f6e2073 	svcvs	0x006e2073
   2bcf8:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
   2bcfc:	46206469 	strtmi	r6, [r0], -r9, ror #8
   2bd00:	76205441 	strtvc	r5, [r0], -r1, asr #8
   2bd04:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
   2bd08:	00000065 	andeq	r0, r0, r5, rrx
   2bd0c:	29343128 	ldmdbcs	r4!, {r3, r5, r8, ip, sp}
   2bd10:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2bd14:	6d5f6620 	ldclvs	6, cr6, [pc, #-128]	; 2bc9c <xTotalHeapSize+0x1c0>
   2bd18:	2873666b 	ldmdacs	r3!, {r0, r1, r3, r5, r6, r9, sl, sp, lr}^
   2bd1c:	62612029 	rsbvs	r2, r1, #41	; 0x29
   2bd20:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
   2bd24:	75642064 	strbvc	r2, [r4, #-100]!	; 0xffffff9c
   2bd28:	6f742065 	svcvs	0x00742065
   2bd2c:	796e6120 	stmdbvc	lr!, {r5, r8, sp, lr}^
   2bd30:	6f727020 	svcvs	0x00727020
   2bd34:	6d656c62 	stclvs	12, cr6, [r5, #-392]!	; 0xfffffe78
   2bd38:	00000000 	andeq	r0, r0, r0
   2bd3c:	29353128 	ldmdbcs	r5!, {r3, r5, r8, ip, sp}
   2bd40:	756f4320 	strbvc	r4, [pc, #-800]!	; 2ba28 <strncpy+0x2c>
   2bd44:	6e20646c 	cdpvs	4, 2, cr6, cr0, cr12, {3}
   2bd48:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   2bd4c:	61207465 			; <UNDEFINED> instruction: 0x61207465
   2bd50:	61726720 	cmnvs	r2, r0, lsr #14
   2bd54:	7420746e 	strtvc	r7, [r0], #-1134	; 0xfffffb92
   2bd58:	6361206f 	cmnvs	r1, #111	; 0x6f
   2bd5c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
   2bd60:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
   2bd64:	6c6f7620 	stclvs	6, cr7, [pc], #-128	; 2bcec <xTotalHeapSize+0x210>
   2bd68:	20656d75 	rsbcs	r6, r5, r5, ror sp
   2bd6c:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
   2bd70:	64206e69 	strtvs	r6, [r0], #-3689	; 0xfffff197
   2bd74:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
   2bd78:	70206465 	eorvc	r6, r0, r5, ror #8
   2bd7c:	6f697265 	svcvs	0x00697265
   2bd80:	00000064 	andeq	r0, r0, r4, rrx
   2bd84:	29363128 	ldmdbcs	r6!, {r3, r5, r8, ip, sp}
   2bd88:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2bd8c:	65706f20 	ldrbvs	r6, [r0, #-3872]!	; 0xfffff0e0
   2bd90:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
   2bd94:	69206e6f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
   2bd98:	65722073 	ldrbvs	r2, [r2, #-115]!	; 0xffffff8d
   2bd9c:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
   2bda0:	61206465 			; <UNDEFINED> instruction: 0x61206465
   2bda4:	726f6363 	rsbvc	r6, pc, #-1946157055	; 0x8c000001
   2bda8:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
   2bdac:	206f7420 	rsbcs	r7, pc, r0, lsr #8
   2bdb0:	20656874 	rsbcs	r6, r5, r4, ror r8
   2bdb4:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
   2bdb8:	61687320 	cmnvs	r8, r0, lsr #6
   2bdbc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
   2bdc0:	6c6f7020 	stclvs	0, cr7, [pc], #-128	; 2bd48 <xTotalHeapSize+0x26c>
   2bdc4:	00796369 	rsbseq	r6, r9, r9, ror #6
   2bdc8:	29373128 	ldmdbcs	r7!, {r3, r5, r8, ip, sp}
   2bdcc:	4e464c20 	cdpmi	12, 4, cr4, cr6, cr0, {1}
   2bdd0:	726f7720 	rsbvc	r7, pc, #32, 14	; 0x800000
   2bdd4:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
   2bdd8:	66756220 	ldrbtvs	r6, [r5], -r0, lsr #4
   2bddc:	20726566 	rsbscs	r6, r2, r6, ror #10
   2bde0:	6c756f63 	ldclvs	15, cr6, [r5], #-396	; 0xfffffe74
   2bde4:	6f6e2064 	svcvs	0x006e2064
   2bde8:	65622074 	strbvs	r2, [r2, #-116]!	; 0xffffff8c
   2bdec:	6c6c6120 	stfvse	f6, [ip], #-128	; 0xffffff80
   2bdf0:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
   2bdf4:	00006465 	andeq	r6, r0, r5, ror #8
   2bdf8:	29383128 	ldmdbcs	r8!, {r3, r5, r8, ip, sp}
   2bdfc:	6d754e20 	ldclvs	14, cr4, [r5, #-128]!	; 0xffffff80
   2be00:	20726562 	rsbscs	r6, r2, r2, ror #10
   2be04:	6f20666f 	svcvs	0x0020666f
   2be08:	206e6570 	rsbcs	r6, lr, r0, ror r5
   2be0c:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
   2be10:	203e2073 	eorscs	r2, lr, r3, ror r0
   2be14:	465f4646 	ldrbmi	r4, [pc], -r6, asr #12
   2be18:	4f4c5f53 	svcmi	0x004c5f53
   2be1c:	00004b43 	andeq	r4, r0, r3, asr #22
   2be20:	29393128 	ldmdbcs	r9!, {r3, r5, r8, ip, sp}
   2be24:	76694720 	strbtvc	r4, [r9], -r0, lsr #14
   2be28:	70206e65 	eorvc	r6, r0, r5, ror #28
   2be2c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
   2be30:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
   2be34:	20736920 	rsbscs	r6, r3, r0, lsr #18
   2be38:	61766e69 	cmnvs	r6, r9, ror #28
   2be3c:	0064696c 	rsbeq	r6, r4, ip, ror #18
   2be40:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
   2be44:	206e776f 	rsbcs	r7, lr, pc, ror #14
   2be48:	6f727265 	svcvs	0x00727265
   2be4c:	6f632072 	svcvs	0x00632072
   2be50:	00006564 	andeq	r6, r0, r4, ror #10
   2be54:	0000000a 	andeq	r0, r0, sl
   2be58:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
   2be5c:	61542053 	cmpvs	r4, r3, asr r0
   2be60:	53206b73 			; <UNDEFINED> instruction: 0x53206b73
   2be64:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
   2be68:	000a6465 	andeq	r6, sl, r5, ror #8
   2be6c:	00000000 	andeq	r0, r0, r0
   2be70:	6b736944 	blvs	1d06388 <__bss_end+0x1bd8d28>
   2be74:	696e6920 	stmdbvs	lr!, {r5, r8, fp, sp, lr}^
   2be78:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
   2be7c:	74617a69 	strbtvc	r7, [r1], #-2665	; 0xfffff597
   2be80:	206e6f69 	rsbcs	r6, lr, r9, ror #30
   2be84:	6c696166 	stfvse	f6, [r9], #-408	; 0xfffffe68
   2be88:	0a216465 	beq	885024 <__bss_end+0x7579c4>
   2be8c:	00000000 	andeq	r0, r0, r0
   2be90:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
   2be94:	69747461 	ldmdbvs	r4!, {r0, r5, r6, sl, ip, sp, lr}^
   2be98:	6420676e 	strtvs	r6, [r0], #-1902	; 0xfffff892
   2be9c:	2e6b7369 	cdpcs	3, 6, cr7, cr11, cr9, {3}
   2bea0:	000a2e2e 	andeq	r2, sl, lr, lsr #28
   2bea4:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
   2bea8:	66207461 	strtvs	r7, [r0], -r1, ror #8
   2beac:	656c6961 	strbvs	r6, [ip, #-2401]!	; 0xfffff69f
   2beb0:	00203a64 	eoreq	r3, r0, r4, ror #20
   2beb4:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
   2beb8:	73207461 			; <UNDEFINED> instruction: 0x73207461
   2bebc:	65636375 	strbvs	r6, [r3, #-885]!	; 0xfffffc8b
   2bec0:	75667373 	strbvc	r7, [r6, #-883]!	; 0xfffffc8d
   2bec4:	00000a6c 	andeq	r0, r0, ip, ror #20
   2bec8:	6e756f4d 	cdpvs	15, 7, cr6, cr5, cr13, {2}
   2becc:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
   2bed0:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
   2bed4:	73797365 	cmnvc	r9, #-1811939327	; 0x94000001
   2bed8:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
   2bedc:	000a2e2e 	andeq	r2, sl, lr, lsr #28
   2bee0:	6e756f4d 	cdpvs	15, 7, cr6, cr5, cr13, {2}
   2bee4:	61662074 	smcvs	25092	; 0x6204
   2bee8:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
   2beec:	0000203a 	andeq	r2, r0, sl, lsr r0
   2bef0:	656c6946 	strbvs	r6, [ip, #-2374]!	; 0xfffff6ba
   2bef4:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
   2bef8:	6d206d65 	stcvs	13, cr6, [r0, #-404]!	; 0xfffffe6c
   2befc:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
   2bf00:	73206465 			; <UNDEFINED> instruction: 0x73206465
   2bf04:	65636375 	strbvs	r6, [r3, #-885]!	; 0xfffffc8b
   2bf08:	75667373 	strbvc	r7, [r6, #-883]!	; 0xfffffc8d
   2bf0c:	0a796c6c 	beq	1e870c4 <__bss_end+0x1d59a64>
   2bf10:	00000000 	andeq	r0, r0, r0
   2bf14:	20544146 	subscs	r4, r4, r6, asr #2
   2bf18:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
   2bf1c:	0000203a 	andeq	r2, r0, sl, lsr r0
   2bf20:	31544146 	cmpcc	r4, r6, asr #2
   2bf24:	00000a32 	andeq	r0, r0, r2, lsr sl
   2bf28:	31544146 	cmpcc	r4, r6, asr #2
   2bf2c:	00000a36 	andeq	r0, r0, r6, lsr sl
   2bf30:	33544146 	cmpcc	r4, #-2147483631	; 0x80000011
   2bf34:	00000a32 	andeq	r0, r0, r2, lsr sl
   2bf38:	41467865 	cmpmi	r6, r5, ror #16
   2bf3c:	00000a54 	andeq	r0, r0, r4, asr sl
   2bf40:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
   2bf44:	0a6e776f 	beq	1bc9d08 <__bss_end+0x1a9c6a8>
   2bf48:	00000000 	andeq	r0, r0, r0
   2bf4c:	61657243 	cmnvs	r5, r3, asr #4
   2bf50:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
   2bf54:	73657420 	cmnvc	r5, #32, 8	; 0x20000000
   2bf58:	69662074 	stmdbvs	r6!, {r2, r4, r5, r6, sp}^
   2bf5c:	2e2e656c 	cfsh64cs	mvdx6, mvdx14, #60
   2bf60:	00000a2e 	andeq	r0, r0, lr, lsr #20
   2bf64:	54534554 	ldrbpl	r4, [r3], #-1364	; 0xfffffaac
   2bf68:	5458542e 	ldrbpl	r5, [r8], #-1070	; 0xfffffbd2
   2bf6c:	00000000 	andeq	r0, r0, r0
   2bf70:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
   2bf74:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
   2bf78:	7263206f 	rsbvc	r2, r3, #111	; 0x6f
   2bf7c:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
   2bf80:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
   2bf84:	00000a65 	andeq	r0, r0, r5, ror #20
   2bf88:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	; 0xfffffee0
   2bf8c:	7266206f 	rsbvc	r2, r6, #111	; 0x6f
   2bf90:	46206d6f 	strtmi	r6, [r0], -pc, ror #26
   2bf94:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
   2bf98:	20534f54 	subscs	r4, r3, r4, asr pc
   2bf9c:	20646e61 	rsbcs	r6, r4, r1, ror #28
   2bfa0:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
   2bfa4:	6e692053 	mcrvs	0, 3, r2, cr9, cr3, {2}
   2bfa8:	72676574 	rsbvc	r6, r7, #116, 10	; 0x1d000000
   2bfac:	6f697461 	svcvs	0x00697461
   2bfb0:	000a216e 	andeq	r2, sl, lr, ror #2
   2bfb4:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
   2bfb8:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
   2bfbc:	7277206f 	rsbsvc	r2, r7, #111	; 0x6f
   2bfc0:	20657469 	rsbcs	r7, r5, r9, ror #8
   2bfc4:	66206f74 	qsub16vs	r6, r0, r4
   2bfc8:	0a656c69 	beq	1987174 <__bss_end+0x1859b14>
   2bfcc:	00000000 	andeq	r0, r0, r0
   2bfd0:	656c6946 	strbvs	r6, [ip, #-2374]!	; 0xfffff6ba
   2bfd4:	69727720 	ldmdbvs	r2!, {r5, r8, r9, sl, ip, sp, lr}^
   2bfd8:	6e657474 	mcrvs	4, 3, r7, cr5, cr4, {3}
   2bfdc:	63757320 	cmnvs	r5, #32, 6	; 0x80000000
   2bfe0:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
   2bfe4:	6c6c7566 	cfstr64vs	mvdx7, [ip], #-408	; 0xfffffe68
   2bfe8:	00000a79 	andeq	r0, r0, r9, ror sl
   2bfec:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
   2bff0:	20676e69 	rsbcs	r6, r7, r9, ror #28
   2bff4:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
   2bff8:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
   2bffc:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
   2c000:	0a2e2e2e 	beq	bb78c0 <__bss_end+0xa8a260>
   2c004:	00000000 	andeq	r0, r0, r0
   2c008:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
   2c00c:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
   2c010:	706f206f 	rsbvc	r2, pc, pc, rrx
   2c014:	66206e65 	strtvs	r6, [r0], -r5, ror #28
   2c018:	20656c69 	rsbcs	r6, r5, r9, ror #24
   2c01c:	20726f66 	rsbscs	r6, r2, r6, ror #30
   2c020:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
   2c024:	0a676e69 	beq	1a079d0 <__bss_end+0x18da370>
   2c028:	00000000 	andeq	r0, r0, r0
   2c02c:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
   2c030:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
   2c034:	6572206f 	ldrbvs	r2, [r2, #-111]!	; 0xffffff91
   2c038:	66206461 	strtvs	r6, [r0], -r1, ror #8
   2c03c:	0a656c69 	beq	19871e8 <__bss_end+0x1859b88>
   2c040:	00000000 	andeq	r0, r0, r0
   2c044:	656c6946 	strbvs	r6, [ip, #-2374]!	; 0xfffff6ba
   2c048:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
   2c04c:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
   2c050:	0000203a 	andeq	r2, r0, sl, lsr r0
   2c054:	7461460a 	strbtvc	r4, [r1], #-1546	; 0xfffff9f6
   2c058:	69205346 	stmdbvs	r0!, {r1, r2, r6, r8, r9, ip, lr}
   2c05c:	6765746e 	strbvs	r7, [r5, -lr, ror #8]!
   2c060:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
   2c064:	74206e6f 	strtvc	r6, [r0], #-3695	; 0xfffff191
   2c068:	20747365 	rsbscs	r7, r4, r5, ror #6
   2c06c:	706d6f63 	rsbvc	r6, sp, r3, ror #30
   2c070:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
   2c074:	75732064 	ldrbvc	r2, [r3, #-100]!	; 0xffffff9c
   2c078:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
   2c07c:	6c756673 	ldclvs	6, cr6, [r5], #-460	; 0xfffffe34
   2c080:	0a21796c 	beq	88a638 <__bss_end+0x75cfd8>
   2c084:	00000000 	andeq	r0, r0, r0
   2c088:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	; 0xfffffee0
   2c08c:	7266206f 	rsbvc	r2, r6, #111	; 0x6f
   2c090:	46206d6f 	strtmi	r6, [r0], -pc, ror #26
   2c094:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
   2c098:	20534f54 	subscs	r4, r3, r4, asr pc
   2c09c:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
   2c0a0:	74614620 	strbtvc	r4, [r1], #-1568	; 0xfffff9e0
   2c0a4:	0a215346 	beq	880dc4 <__bss_end+0x753764>
   2c0a8:	00000000 	andeq	r0, r0, r0
   2c0ac:	5f44454c 	svcpl	0x0044454c
   2c0b0:	00000030 	andeq	r0, r0, r0, lsr r0
   2c0b4:	5f44454c 	svcpl	0x0044454c
   2c0b8:	00000031 	andeq	r0, r0, r1, lsr r0
   2c0bc:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
   2c0c0:	00000053 	andeq	r0, r0, r3, asr r0

0002c0c4 <ExCvt>:
static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CODE_PAGE);
   2c0c4:	41459a80 	smlalbbmi	r9, r5, r0, sl
   2c0c8:	808f418e 	addhi	r4, pc, lr, lsl #3
   2c0cc:	49454545 	stmdbmi	r5, {r0, r2, r6, r8, sl, lr}^
   2c0d0:	8f8e4949 	svchi	0x008e4949
   2c0d4:	4f929290 	svcmi	0x00929290
   2c0d8:	55554f99 	ldrbpl	r4, [r5, #-3993]	; 0xfffff067
   2c0dc:	9b9a9959 	blls	fe6d2648 <_estack+0xf66b2648>
   2c0e0:	9f9e9d9c 	svcls	0x009e9d9c
   2c0e4:	554f4941 	strbpl	r4, [pc, #-2369]	; 2b7ab <memset+0x7b>
   2c0e8:	a7a6a5a5 	strge	sl, [r6, r5, lsr #11]!
   2c0ec:	abaaa9a8 	blge	fead6794 <_estack+0xf6ab6794>
   2c0f0:	afaeadac 	svcge	0x00aeadac
   2c0f4:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
   2c0f8:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
   2c0fc:	bbbab9b8 	bllt	feeda7e4 <_estack+0xf6eba7e4>
   2c100:	bfbebdbc 	svclt	0x00bebdbc
   2c104:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
   2c108:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
   2c10c:	cbcac9c8 	blgt	ff2de834 <_estack+0xf72be834>
   2c110:	cfcecdcc 	svcgt	0x00cecdcc
   2c114:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
   2c118:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
   2c11c:	dbdad9d8 	blle	ff6e2884 <_estack+0xf76c2884>
   2c120:	dfdedddc 	svcle	0x00dedddc
   2c124:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
   2c128:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
   2c12c:	ebeae9e8 	bl	ffae68d4 <_estack+0xf7ac68d4>
   2c130:	efeeedec 	svc	0x00eeedec
   2c134:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
   2c138:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
   2c13c:	fbfaf9f8 	blx	ffeea926 <_estack+0xf7eca926>
   2c140:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
   2c144:	3a2c2b2a 	bcc	b36df4 <__bss_end+0xa09794>
   2c148:	3e3d3c3b 	mrccc	12, 1, r3, cr13, cr11, {1}
   2c14c:	227c5d5b 	rsbscs	r5, ip, #5824	; 0x16c0
   2c150:	00007f3f 	andeq	r7, r0, pc, lsr pc
   2c154:	33544146 	cmpcc	r4, #-2147483631	; 0x80000011
   2c158:	20202032 	eorcs	r2, r0, r2, lsr r0
   2c15c:	00000000 	andeq	r0, r0, r0
   2c160:	4d90feeb 	ldcmi	14, cr15, [r0, #940]	; 0x3ac
   2c164:	534f4453 	movtpl	r4, #62547	; 0xf453
   2c168:	00302e35 	eorseq	r2, r0, r5, lsr lr
   2c16c:	4e204f4e 	cdpmi	15, 2, cr4, cr0, cr14, {2}
   2c170:	20454d41 	subcs	r4, r5, r1, asr #26
   2c174:	46202020 	strtmi	r2, [r0], -r0, lsr #32
   2c178:	32335441 	eorscc	r5, r3, #1090519040	; 0x41000000
   2c17c:	00202020 	eoreq	r2, r0, r0, lsr #32
   2c180:	4e204f4e 	cdpmi	15, 2, cr4, cr0, cr14, {2}
   2c184:	20454d41 	subcs	r4, r5, r1, asr #26
   2c188:	46202020 	strtmi	r2, [r0], -r0, lsr #32
   2c18c:	20205441 	eorcs	r5, r0, r1, asr #8
   2c190:	00202020 	eoreq	r2, r0, r0, lsr #32

0002c194 <defopt.2>:
   2c194:	00000007 	andeq	r0, r0, r7
	...

0002c1a4 <cst32.1>:
   2c1a4:	00020001 	andeq	r0, r2, r1
   2c1a8:	00080004 	andeq	r0, r8, r4
   2c1ac:	00200010 	eoreq	r0, r0, r0, lsl r0
   2c1b0:	00000000 	andeq	r0, r0, r0

0002c1b4 <cst.0>:
   2c1b4:	00040001 	andeq	r0, r4, r1
   2c1b8:	00400010 	subeq	r0, r0, r0, lsl r0
   2c1bc:	02000100 	andeq	r0, r0, #0, 2
   2c1c0:	00000000 	andeq	r0, r0, r0
   2c1c4:	6b736964 	blvs	1d0675c <__bss_end+0x1bd90fc>
   2c1c8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
   2c1cc:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
   2c1d0:	3a657a69 	bcc	198ab7c <__bss_end+0x185d51c>
   2c1d4:	766e4920 	strbtvc	r4, [lr], -r0, lsr #18
   2c1d8:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
   2c1dc:	69726420 	ldmdbvs	r2!, {r5, sl, sp, lr}^
   2c1e0:	000a6576 	andeq	r6, sl, r6, ror r5
   2c1e4:	6b736964 	blvs	1d0677c <__bss_end+0x1bd911c>
   2c1e8:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
   2c1ec:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
   2c1f0:	3a657a69 	bcc	198ab9c <__bss_end+0x185d53c>
   2c1f4:	72694620 	rsbvc	r4, r9, #32, 12	; 0x2000000
   2c1f8:	69207473 	stmdbvs	r0!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
   2c1fc:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
   2c200:	7a696c61 	bvc	1a8738c <__bss_end+0x1959d2c>
   2c204:	6f697461 	svcvs	0x00697461
   2c208:	63202c6e 			; <UNDEFINED> instruction: 0x63202c6e
   2c20c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
   2c210:	20676e69 	rsbcs	r6, r7, r9, ror #28
   2c214:	204d4152 	subcs	r4, sp, r2, asr r1
   2c218:	6b736964 	blvs	1d067b0 <__bss_end+0x1bd9150>
   2c21c:	0000000a 	andeq	r0, r0, sl
   2c220:	6b736964 	blvs	1d067b8 <__bss_end+0x1bd9158>
   2c224:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
   2c228:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
   2c22c:	3a657a69 	bcc	198abd8 <__bss_end+0x185d578>
   2c230:	63755320 	cmnvs	r5, #32, 6	; 0x80000000
   2c234:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
   2c238:	Address 0x000000000002c238 is out of bounds.


Disassembly of section .data:

0002c23c <ulCriticalNesting>:
volatile unsigned long ulCriticalNesting = 9999UL;
   2c23c:	0000270f 	andeq	r2, r0, pc, lsl #14

0002c240 <xNextTaskUnblockTime>:
PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
   2c240:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

0002c244 <xFreeBytesRemaining>:
static size_t xFreeBytesRemaining = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   2c244:	00001000 	andeq	r1, r0, r0

0002c248 <Stat>:
   2c248:	Address 0x000000000002c248 is out of bounds.


Disassembly of section .bss:

0002c250 <g_bStarted>:
   2c250:	00000000 	andeq	r0, r0, r0

0002c254 <pxReadyCoRoutineLists>:
	...

0002c27c <xDelayedCoRoutineList1>:
	...

0002c290 <xDelayedCoRoutineList2>:
	...

0002c2a4 <pxDelayedCoRoutineList>:
static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently being used. */
   2c2a4:	00000000 	andeq	r0, r0, r0

0002c2a8 <pxOverflowDelayedCoRoutineList>:
static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list currently being used to hold co-routines that have overflowed the current tick count. */
   2c2a8:	00000000 	andeq	r0, r0, r0

0002c2ac <xPendingReadyCoRoutineList>:
	...

0002c2c0 <pxCurrentCoRoutine>:
corCRCB * pxCurrentCoRoutine = NULL;
   2c2c0:	00000000 	andeq	r0, r0, r0

0002c2c4 <uxTopCoRoutineReadyPriority>:
static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
   2c2c4:	00000000 	andeq	r0, r0, r0

0002c2c8 <xCoRoutineTickCount>:
static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
   2c2c8:	00000000 	andeq	r0, r0, r0

0002c2cc <xLastTickCount>:
   2c2cc:	00000000 	andeq	r0, r0, r0

0002c2d0 <xPassedTicks>:
   2c2d0:	00000000 	andeq	r0, r0, r0

0002c2d4 <pxCurrentTCB>:
PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
   2c2d4:	00000000 	andeq	r0, r0, r0

0002c2d8 <pxReadyTasksLists>:
	...

0002c33c <xDelayedTaskList1>:
	...

0002c350 <xDelayedTaskList2>:
	...

0002c364 <pxDelayedTaskList>:
PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list currently being used. */
   2c364:	00000000 	andeq	r0, r0, r0

0002c368 <pxOverflowDelayedTaskList>:
PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task list currently being used to hold tasks that have overflowed the current tick count. */
   2c368:	00000000 	andeq	r0, r0, r0

0002c36c <xPendingReadyList>:
	...

0002c380 <xTasksWaitingTermination>:
	...

0002c394 <uxTasksDeleted>:
	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE ) 0U;
   2c394:	00000000 	andeq	r0, r0, r0

0002c398 <xSuspendedTaskList>:
	...

0002c3ac <uxCurrentNumberOfTasks>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBASE_TYPE ) 0U;
   2c3ac:	00000000 	andeq	r0, r0, r0

0002c3b0 <xTickCount>:
PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
   2c3b0:	00000000 	andeq	r0, r0, r0

0002c3b4 <uxTopUsedPriority>:
PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
   2c3b4:	00000000 	andeq	r0, r0, r0

0002c3b8 <uxTopReadyPriority>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
   2c3b8:	00000000 	andeq	r0, r0, r0

0002c3bc <xSchedulerRunning>:
PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
   2c3bc:	00000000 	andeq	r0, r0, r0

0002c3c0 <uxSchedulerSuspended>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE_TYPE ) pdFALSE;
   2c3c0:	00000000 	andeq	r0, r0, r0

0002c3c4 <uxMissedTicks>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE ) 0U;
   2c3c4:	00000000 	andeq	r0, r0, r0

0002c3c8 <xMissedYield>:
PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
   2c3c8:	00000000 	andeq	r0, r0, r0

0002c3cc <xNumOfOverflows>:
PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
   2c3cc:	00000000 	andeq	r0, r0, r0

0002c3d0 <uxTaskNumber>:
PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
   2c3d0:	00000000 	andeq	r0, r0, r0

0002c3d4 <g_VectorTable>:
	...

0002c614 <enabled>:
	...

0002c620 <virtual_gpio_state>:
	...

0002c628 <virtual_gpio_function>:
	...

0002c640 <xHeap>:
	...

0002d640 <xStart>:
	...

0002d648 <pxEnd>:
static xBlockLink xStart, *pxEnd = NULL;
   2d648:	00000000 	andeq	r0, r0, r0

0002d64c <allocated>:
size_t allocated = 0;
   2d64c:	00000000 	andeq	r0, r0, r0

0002d650 <FatFs>:
static FATFS *FatFs[FF_VOLUMES];	/* Pointer to the filesystem objects (logical drives) */
   2d650:	00000000 	andeq	r0, r0, r0

0002d654 <Fsid>:
static WORD Fsid;					/* Filesystem mount ID */
   2d654:	00000000 	andeq	r0, r0, r0

0002d658 <ramdisk>:
	...

0012d658 <disk_initialized>:
static int disk_initialized = 0;
  12d658:	00000000 	andeq	r0, r0, r0

0012d65c <debug_output_enabled>:
static int debug_output_enabled = 0;
  12d65c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000212 	andeq	r0, r0, r2, lsl r2
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000037 	andeq	r0, r0, r7, lsr r0
      10:	0000ee0c 	andeq	lr, r0, ip, lsl #28
      14:	0000ae00 	andeq	sl, r0, r0, lsl #28
      18:	02000000 	andeq	r0, r0, #0
      1c:	00034400 	andeq	r4, r3, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	59070403 	stmdbpl	r7, {r0, r1, sl}
      30:	03000006 	movweq	r0, #6
      34:	017b0508 	cmneq	fp, r8, lsl #10
      38:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      3c:	0001a904 	andeq	sl, r1, r4, lsl #18
      40:	00e20400 	rsceq	r0, r2, r0, lsl #8
      44:	47020000 	strmi	r0, [r2, -r0]
      48:	00004d10 	andeq	r4, r0, r0, lsl sp
      4c:	53040500 	movwpl	r0, #17664	; 0x4500
      50:	06000000 	streq	r0, [r0], -r0
      54:	0000005e 	andeq	r0, r0, lr, asr r0
      58:	00005e07 	andeq	r5, r0, r7, lsl #28
      5c:	04080000 	streq	r0, [r8], #-0
      60:	00000c04 	andeq	r0, r0, r4, lsl #24
      64:	1c610300 	stclne	3, cr0, [r1], #-0
      68:	0000006c 	andeq	r0, r0, ip, rrx
      6c:	54070403 	strpl	r0, [r7], #-1027	; 0xfffffbfd
      70:	03000006 	movweq	r0, #6
      74:	01800504 	orreq	r0, r0, r4, lsl #10
      78:	01030000 	mrseq	r0, (UNDEF: 3)
      7c:	00066806 	andeq	r6, r6, r6, lsl #16
      80:	07020300 	streq	r0, [r2, -r0, lsl #6]
      84:	0000009b 	muleq	r0, fp, r0
      88:	006c0405 	rsbeq	r0, ip, r5, lsl #8
      8c:	87090000 	strhi	r0, [r9, -r0]
      90:	24000000 	strcs	r0, [r0], #-0
      94:	11105601 	tstne	r0, r1, lsl #12
      98:	0a000001 	beq	a4 <_start-0xff5c>
      9c:	00444f4c 	subeq	r4, r4, ip, asr #30
      a0:	6c105701 	ldcvs	7, cr5, [r0], {1}
      a4:	00000000 	andeq	r0, r0, r0
      a8:	4c41560a 	mcrrmi	6, 0, r5, r1, cr10
      ac:	10580100 	subsne	r0, r8, r0, lsl #2
      b0:	0000006c 	andeq	r0, r0, ip, rrx
      b4:	54430a04 	strbpl	r0, [r3], #-2564	; 0xfffff5fc
      b8:	5901004c 	stmdbpl	r1, {r2, r3, r6}
      bc:	00006c10 	andeq	r6, r0, r0, lsl ip
      c0:	430a0800 	movwmi	r0, #43008	; 0xa800
      c4:	0100494c 	tsteq	r0, ip, asr #18
      c8:	006c105a 	rsbeq	r1, ip, sl, asr r0
      cc:	0a0c0000 	beq	3000d4 <__bss_end+0x1d2a74>
      d0:	00534952 	subseq	r4, r3, r2, asr r9
      d4:	6c105b01 			; <UNDEFINED> instruction: 0x6c105b01
      d8:	10000000 	andne	r0, r0, r0
      dc:	53494d0a 	movtpl	r4, #40202	; 0x9d0a
      e0:	105c0100 	subsne	r0, ip, r0, lsl #2
      e4:	0000006c 	andeq	r0, r0, ip, rrx
      e8:	4c520a14 	vmovmi	r0, r2, s8, s9
      ec:	5d010044 	stcpl	0, cr0, [r1, #-272]	; 0xfffffef0
      f0:	00006c10 	andeq	r6, r0, r0, lsl ip
      f4:	440a1800 	strmi	r1, [sl], #-2048	; 0xfffff800
      f8:	01005649 	tsteq	r0, r9, asr #12
      fc:	006c105e 	rsbeq	r1, ip, lr, asr r0
     100:	0a1c0000 	beq	700108 <__bss_end+0x5d2aa8>
     104:	00544e43 	subseq	r4, r4, r3, asr #28
     108:	6c105f01 	ldcvs	15, cr5, [r0], {1}
     10c:	20000000 	andcs	r0, r0, r0
     110:	00880400 	addeq	r0, r8, r0, lsl #8
     114:	60010000 	andvs	r0, r1, r0
     118:	00008e03 	andeq	r8, r0, r3, lsl #28
     11c:	01110b00 	tsteq	r1, r0, lsl #22
     120:	960c0000 	strls	r0, [ip], -r0
     124:	01000001 	tsteq	r0, r1
     128:	013a2c62 	teqeq	sl, r2, ror #24
     12c:	03050000 	movweq	r0, #20480	; 0x5000
     130:	0002bac8 	andeq	fp, r2, r8, asr #21
     134:	011d0405 	tsteq	sp, r5, lsl #8
     138:	340d0000 	strcc	r0, [sp], #-0
     13c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     140:	00000019 	andeq	r0, r0, r9, lsl r0
     144:	ac0deb01 			; <UNDEFINED> instruction: 0xac0deb01
     148:	98000202 	stmdals	r0, {r1, r9}
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	0001659c 	muleq	r1, ip, r5
     154:	01df0c00 	bicseq	r0, pc, r0, lsl #24
     158:	ed010000 	stc	0, cr0, [r1, #-0]
     15c:	00006c10 	andeq	r6, r0, r0, lsl ip
     160:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     164:	01720f00 	cmneq	r2, r0, lsl #30
     168:	dd010000 	stcle	0, cr0, [r1, #-0]
     16c:	02027406 	andeq	r7, r2, #100663296	; 0x6000000
     170:	00003800 	andeq	r3, r0, r0, lsl #16
     174:	9a9c0100 	bls	fe70057c <_estack+0xf66e057c>
     178:	10000001 	andne	r0, r0, r1
     17c:	00000000 	andeq	r0, r0, r0
     180:	2c1ddd01 	ldccs	13, cr13, [sp], {1}
     184:	02000000 	andeq	r0, r0, #0
     188:	30107491 	mulscc	r0, r1, r4
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	005e29dd 	ldrsbeq	r2, [lr], #-157	; 0xffffff63
     194:	91020000 	mrsls	r0, (UNDEF: 2)
     198:	52110070 	andspl	r0, r1, #112	; 0x70
     19c:	01000001 	tsteq	r0, r1
     1a0:	025c06d0 	subseq	r0, ip, #208, 12	; 0xd000000
     1a4:	00180002 	andseq	r0, r8, r2
     1a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     1ac:	0001b512 	andeq	fp, r1, r2, lsl r5
     1b0:	0fc20100 	svceq	0x00c20100
     1b4:	00000073 	andeq	r0, r0, r3, ror r0
     1b8:	00020240 	andeq	r0, r2, r0, asr #4
     1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1c0:	c9139c01 	ldmdbgt	r3, {r0, sl, fp, ip, pc}
     1c4:	01000001 	tsteq	r0, r1
     1c8:	00881177 	addeq	r1, r8, r7, ror r1
     1cc:	00000000 	andeq	r0, r0, r0
     1d0:	02400002 	subeq	r0, r0, #2
     1d4:	9c010000 	stcls	0, cr0, [r1], {-0}
     1d8:	00019c10 	andeq	r9, r1, r0, lsl ip
     1dc:	38770100 	ldmdacc	r7!, {r8}^
     1e0:	00000088 	andeq	r0, r0, r8, lsl #1
     1e4:	106c9102 	rsbne	r9, ip, r2, lsl #2
     1e8:	00000005 	andeq	r0, r0, r5
     1ec:	41527701 	cmpmi	r2, r1, lsl #14
     1f0:	02000000 	andeq	r0, r0, #0
     1f4:	89106891 	ldmdbhi	r0, {r0, r4, r7, fp, sp, lr}
     1f8:	01000001 	tsteq	r0, r1
     1fc:	005e6077 	subseq	r6, lr, r7, ror r0
     200:	91020000 	mrsls	r0, (UNDEF: 2)
     204:	01640c64 	cmneq	r4, r4, ror #24
     208:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
     20c:	00008811 	andeq	r8, r0, r1, lsl r8
     210:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     214:	01980000 	orrseq	r0, r8, r0
     218:	00040000 	andeq	r0, r4, r0
     21c:	00000133 	andeq	r0, r0, r3, lsr r1
     220:	00370104 	eorseq	r0, r7, r4, lsl #2
     224:	010c0000 	mrseq	r0, (UNDEF: 12)
     228:	ae000002 	cdpge	0, 0, cr0, cr0, cr2, {0}
     22c:	44000000 	strmi	r0, [r0], #-0
     230:	a4000203 	strge	r0, [r0], #-515	; 0xfffffdfd
     234:	e0000002 	and	r0, r0, r2
     238:	02000001 	andeq	r0, r0, #1
     23c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     240:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     244:	00065907 	andeq	r5, r6, r7, lsl #18
     248:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     24c:	0000017b 	andeq	r0, r0, fp, ror r1
     250:	a9040803 	stmdbge	r4, {r0, r1, fp}
     254:	03000001 	movweq	r0, #1
     258:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
     25c:	41040000 	mrsmi	r0, (UNDEF: 4)
     260:	03000000 	movweq	r0, #0
     264:	01800504 	orreq	r0, r0, r4, lsl #10
     268:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
     26c:	01000002 	tsteq	r0, r2
     270:	00481865 	subeq	r1, r8, r5, ror #16
     274:	03050000 	movweq	r0, #20480	; 0x5000
     278:	0002c23c 	andeq	ip, r2, ip, lsr r2
     27c:	0002c505 	andeq	ip, r2, r5, lsl #10
     280:	05730100 	ldrbeq	r0, [r3, #-256]!	; 0xffffff00
     284:	00000025 	andeq	r0, r0, r5, lsr #32
     288:	c2500305 	subsgt	r0, r0, #335544320	; 0x14000000
     28c:	7a060002 	bvc	18029c <__bss_end+0x52c3c>
     290:	01000002 	tsteq	r0, r2
     294:	058406fe 	streq	r0, [r4, #1790]	; 0x6fe
     298:	00640002 	rsbeq	r0, r4, r2
     29c:	9c010000 	stcls	0, cr0, [r1], {-0}
     2a0:	0001ee06 	andeq	lr, r1, r6, lsl #28
     2a4:	06ee0100 	strbteq	r0, [lr], r0, lsl #2
     2a8:	00020540 	andeq	r0, r2, r0, asr #10
     2ac:	00000044 	andeq	r0, r0, r4, asr #32
     2b0:	b7079c01 	strlt	r9, [r7, -r1, lsl #24]
     2b4:	01000002 	tsteq	r0, r2
     2b8:	049006c1 	ldreq	r0, [r0], #1729	; 0x6c1
     2bc:	00b00002 	adcseq	r0, r0, r2
     2c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     2c4:	000000fb 	strdeq	r0, [r0], -fp
     2c8:	02049008 	andeq	r9, r4, #8
     2cc:	00005800 	andeq	r5, r0, r0, lsl #16
     2d0:	0000d800 	andeq	sp, r0, r0, lsl #16
     2d4:	02d00900 	sbcseq	r0, r0, #0, 18
     2d8:	c2010000 	andgt	r0, r1, #0
     2dc:	00010102 	andeq	r0, r1, r2, lsl #2
     2e0:	02680900 	rsbeq	r0, r8, #0, 18
     2e4:	c2010000 	andgt	r0, r1, #0
     2e8:	00004802 	andeq	r4, r0, r2, lsl #16
     2ec:	ec0a0000 	stc	0, cr0, [sl], {-0}
     2f0:	48000204 	stmdami	r0, {r2, r9}
     2f4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     2f8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2fc:	0102c401 	tsteq	r2, r1, lsl #8
     300:	09000001 	stmdbeq	r0, {r0}
     304:	00000268 	andeq	r0, r0, r8, ror #4
     308:	4802c401 	stmdami	r2, {r0, sl, lr, pc}
     30c:	00000000 	andeq	r0, r0, r0
     310:	06040b00 	streq	r0, [r4], -r0, lsl #22
     314:	04000001 	streq	r0, [r0], #-1
     318:	000000fb 	strdeq	r0, [r0], -fp
     31c:	02a30d0c 	adceq	r0, r3, #12, 26	; 0x300
     320:	9c010000 	stcls	0, cr0, [r1], {-0}
     324:	0203dc06 	andeq	sp, r3, #1536	; 0x600
     328:	0000b400 	andeq	fp, r0, r0, lsl #8
     32c:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
     330:	08000001 	stmdaeq	r0, {r0}
     334:	000203e0 	andeq	r0, r2, r0, ror #7
     338:	00000058 	andeq	r0, r0, r8, asr r0
     33c:	00000143 	andeq	r0, r0, r3, asr #2
     340:	0002d009 	andeq	sp, r2, r9
     344:	02a40100 	adceq	r0, r4, #0, 2
     348:	00000101 	andeq	r0, r0, r1, lsl #2
     34c:	00026809 	andeq	r6, r2, r9, lsl #16
     350:	02a40100 	adceq	r0, r4, #0, 2
     354:	00000048 	andeq	r0, r0, r8, asr #32
     358:	043c0a00 	ldrteq	r0, [ip], #-2560	; 0xfffff600
     35c:	00480002 	subeq	r0, r8, r2
     360:	d0090000 	andle	r0, r9, r0
     364:	01000002 	tsteq	r0, r2
     368:	010102aa 	smlatbeq	r1, sl, r2, r0
     36c:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
     370:	01000002 	tsteq	r0, r2
     374:	004802aa 	subeq	r0, r8, sl, lsr #5
     378:	00000000 	andeq	r0, r0, r0
     37c:	00028c0e 	andeq	r8, r2, lr, lsl #24
     380:	06750100 	ldrbteq	r0, [r5], -r0, lsl #2
     384:	00020344 	andeq	r0, r2, r4, asr #6
     388:	00000098 	muleq	r0, r8, r0
     38c:	6c0a9c01 	stcvs	12, cr9, [sl], {1}
     390:	48000203 	stmdami	r0, {r0, r1, r9}
     394:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     398:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     39c:	01028801 	tsteq	r2, r1, lsl #16
     3a0:	09000001 	stmdbeq	r0, {r0}
     3a4:	00000268 	andeq	r0, r0, r8, ror #4
     3a8:	48028801 	stmdami	r2, {r0, fp, pc}
     3ac:	00000000 	andeq	r0, r0, r0
     3b0:	04ab0000 	strteq	r0, [fp], #0
     3b4:	00040000 	andeq	r0, r4, r0
     3b8:	00000218 	andeq	r0, r0, r8, lsl r2
     3bc:	00370104 	eorseq	r0, r7, r4, lsl #2
     3c0:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
     3c4:	ae000005 	cdpge	0, 0, cr0, cr0, cr5, {0}
     3c8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     3cc:	64000205 	strvs	r0, [r0], #-517	; 0xfffffdfb
     3d0:	cd000007 	stcgt	0, cr0, [r0, #-28]	; 0xffffffe4
     3d4:	02000002 	andeq	r0, r0, #2
     3d8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     3dc:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     3e0:	00065907 	andeq	r5, r6, r7, lsl #18
     3e4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     3e8:	0000017b 	andeq	r0, r0, fp, ror r1
     3ec:	a9040803 	stmdbge	r4, {r0, r1, fp}
     3f0:	04000001 	streq	r0, [r0], #-1
     3f4:	000c0504 	andeq	r0, ip, r4, lsl #10
     3f8:	61030000 	mrsvs	r0, (UNDEF: 3)
     3fc:	00004f1c 	andeq	r4, r0, ip, lsl pc
     400:	07040300 	streq	r0, [r4, -r0, lsl #6]
     404:	00000654 	andeq	r0, r0, r4, asr r6
     408:	00004f06 	andeq	r4, r0, r6, lsl #30
     40c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     410:	00000180 	andeq	r0, r0, r0, lsl #3
     414:	00039107 	andeq	r9, r3, r7, lsl #2
     418:	69021400 	stmdbvs	r2, {sl, ip}
     41c:	0000b108 	andeq	fp, r0, r8, lsl #2
     420:	03440800 	movteq	r0, #18432	; 0x4800
     424:	6b020000 	blvs	8042c <ramdisk+0x52dd4>
     428:	0000430f 	andeq	r4, r0, pc, lsl #6
     42c:	ea080000 	b	200434 <__bss_end+0xd2dd4>
     430:	02000004 	andeq	r0, r0, #4
     434:	00b61f6c 	adcseq	r1, r6, ip, ror #30
     438:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     43c:	00000409 	andeq	r0, r0, r9, lsl #8
     440:	b61f6d02 	ldrlt	r6, [pc], -r2, lsl #26
     444:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     448:	00036608 	andeq	r6, r3, r8, lsl #12
     44c:	096e0200 	stmdbeq	lr!, {r9}^
     450:	00000041 	andeq	r0, r0, r1, asr #32
     454:	030f080c 	movweq	r0, #63500	; 0xf80c
     458:	6f020000 	svcvs	0x00020000
     45c:	00004109 	andeq	r4, r0, r9, lsl #2
     460:	06001000 	streq	r1, [r0], -r0
     464:	00000062 	andeq	r0, r0, r2, rrx
     468:	00b10409 	adcseq	r0, r1, r9, lsl #8
     46c:	fd050000 	stc2	0, cr0, [r5, #-0]
     470:	02000004 	andeq	r0, r0, #4
     474:	00621b71 	rsbeq	r1, r2, r1, ror fp
     478:	bc060000 	stclt	0, cr0, [r6], {-0}
     47c:	07000000 	streq	r0, [r0, -r0]
     480:	00000559 	andeq	r0, r0, r9, asr r5
     484:	0873020c 	ldmdaeq	r3!, {r2, r3, r9}^
     488:	00000102 	andeq	r0, r0, r2, lsl #2
     48c:	00034408 	andeq	r4, r3, r8, lsl #8
     490:	0f750200 	svceq	0x00750200
     494:	00000043 	andeq	r0, r0, r3, asr #32
     498:	04ea0800 	strbteq	r0, [sl], #2048	; 0x800
     49c:	76020000 	strvc	r0, [r2], -r0
     4a0:	0000b61e 	andeq	fp, r0, lr, lsl r6
     4a4:	09080400 	stmdbeq	r8, {sl}
     4a8:	02000004 	andeq	r0, r0, #4
     4ac:	00b61e77 	adcseq	r1, r6, r7, ror lr
     4b0:	00080000 	andeq	r0, r8, r0
     4b4:	00046905 	andeq	r6, r4, r5, lsl #18
     4b8:	20790200 	rsbscs	r0, r9, r0, lsl #4
     4bc:	000000cd 	andeq	r0, r0, sp, asr #1
     4c0:	00010206 	andeq	r0, r1, r6, lsl #4
     4c4:	05b80700 	ldreq	r0, [r8, #1792]!	; 0x700
     4c8:	02140000 	andseq	r0, r4, #0
     4cc:	0148107e 	hvceq	33038	; 0x810e
     4d0:	90080000 	andls	r0, r8, r0
     4d4:	02000004 	andeq	r0, r0, #4
     4d8:	00562280 	subseq	r2, r6, r0, lsl #5
     4dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     4e0:	0000033c 	andeq	r0, r0, ip, lsr r3
     4e4:	48178102 	ldmdami	r7, {r1, r8, pc}
     4e8:	04000001 	streq	r0, [r0], #-1
     4ec:	00035d08 	andeq	r5, r3, r8, lsl #26
     4f0:	19820200 	stmibne	r2, {r9}
     4f4:	0000010e 	andeq	r0, r0, lr, lsl #2
     4f8:	04090008 	streq	r0, [r9], #-8
     4fc:	000000c8 	andeq	r0, r0, r8, asr #1
     500:	00073c05 	andeq	r3, r7, r5, lsl #24
     504:	03830200 	orreq	r0, r3, #0, 4
     508:	00000113 	andeq	r0, r0, r3, lsl r1
     50c:	00014e0a 	andeq	r4, r1, sl, lsl #28
     510:	06010300 	streq	r0, [r1], -r0, lsl #6
     514:	00000668 	andeq	r0, r0, r8, ror #12
     518:	9b070203 	blls	1c0d2c <__bss_end+0x936cc>
     51c:	05000000 	streq	r0, [r0, #-0]
     520:	000004be 			; <UNDEFINED> instruction: 0x000004be
     524:	41105304 	tstmi	r0, r4, lsl #6
     528:	05000000 	streq	r0, [r0, #-0]
     52c:	0000063e 	andeq	r0, r0, lr, lsr r6
     530:	85105604 	ldrhi	r5, [r0, #-1540]	; 0xfffff9fc
     534:	09000001 	stmdbeq	r0, {r0}
     538:	00018b04 	andeq	r8, r1, r4, lsl #22
     53c:	019b0b00 	orrseq	r0, fp, r0, lsl #22
     540:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
     544:	0c000001 	stceq	0, cr0, [r0], {1}
     548:	0000004f 	andeq	r0, r0, pc, asr #32
     54c:	04140700 	ldreq	r0, [r4], #-1792	; 0xfffff900
     550:	04380000 	ldrteq	r0, [r8], #-0
     554:	01f71058 	mvnseq	r1, r8, asr r0
     558:	1b080000 	blne	200560 <__bss_end+0xd2f00>
     55c:	04000003 	streq	r0, [r0], #-3
     560:	0179155a 	cmneq	r9, sl, asr r5
     564:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     568:	000005ee 	andeq	r0, r0, lr, ror #11
     56c:	bc0f5b04 			; <UNDEFINED> instruction: 0xbc0f5b04
     570:	04000000 	streq	r0, [r0], #-0
     574:	00061b08 	andeq	r1, r6, r8, lsl #22
     578:	0f5c0400 	svceq	0x005c0400
     57c:	000000bc 	strheq	r0, [r0], -ip
     580:	04b30818 	ldrteq	r0, [r3], #2072	; 0x818
     584:	5d040000 	stcpl	0, cr0, [r4, #-0]
     588:	00004f1a 	andeq	r4, r0, sl, lsl pc
     58c:	61082c00 	tstvs	r8, r0, lsl #24
     590:	04000004 	streq	r0, [r0], #-4
     594:	004f1a5e 	subeq	r1, pc, lr, asr sl	; <UNPREDICTABLE>
     598:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
     59c:	00000532 	andeq	r0, r0, r2, lsr r5
     5a0:	66135f04 	ldrvs	r5, [r3], -r4, lsl #30
     5a4:	34000001 	strcc	r0, [r0], #-1
     5a8:	04880500 	streq	r0, [r8], #1280	; 0x500
     5ac:	60040000 	andvs	r0, r4, r0
     5b0:	00019b03 	andeq	r9, r1, r3, lsl #22
     5b4:	014e0d00 	cmpeq	lr, r0, lsl #26
     5b8:	02130000 	andseq	r0, r3, #0
     5bc:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     5c0:	01000000 	mrseq	r0, (UNDEF: 0)
     5c4:	044b0f00 	strbeq	r0, [fp], #-3840	; 0xfffff100
     5c8:	51010000 	mrspl	r0, (UNDEF: 1)
     5cc:	0002030e 	andeq	r0, r2, lr, lsl #6
     5d0:	54030500 	strpl	r0, [r3], #-1280	; 0xfffffb00
     5d4:	0f0002c2 	svceq	0x000002c2
     5d8:	000003c4 	andeq	r0, r0, r4, asr #7
     5dc:	4e0e5201 	cdpmi	2, 0, cr5, cr14, cr1, {0}
     5e0:	05000001 	streq	r0, [r0, #-1]
     5e4:	02c27c03 	sbceq	r7, r2, #768	; 0x300
     5e8:	03db0f00 	bicseq	r0, fp, #0, 30
     5ec:	53010000 	movwpl	r0, #4096	; 0x1000
     5f0:	00014e0e 	andeq	r4, r1, lr, lsl #28
     5f4:	90030500 	andls	r0, r3, r0, lsl #10
     5f8:	0f0002c2 	svceq	0x000002c2
     5fc:	000005be 			; <UNDEFINED> instruction: 0x000005be
     600:	5b105401 	blpl	41560c <__bss_end+0x2e7fac>
     604:	05000002 	streq	r0, [r0, #-2]
     608:	02c2a403 	sbceq	sl, r2, #50331648	; 0x3000000
     60c:	4e040900 	vmlami.f16	s0, s8, s0	; <UNPREDICTABLE>
     610:	0a000001 	beq	61c <_start-0xf9e4>
     614:	0000025b 	andeq	r0, r0, fp, asr r2
     618:	00053a0f 	andeq	r3, r5, pc, lsl #20
     61c:	10550100 	subsne	r0, r5, r0, lsl #2
     620:	0000025b 	andeq	r0, r0, fp, asr r2
     624:	c2a80305 	adcgt	r0, r8, #335544320	; 0x14000000
     628:	cf0f0002 	svcgt	0x000f0002
     62c:	01000004 	tsteq	r0, r4
     630:	014e0e56 	cmpeq	lr, r6, asr lr
     634:	03050000 	movweq	r0, #20480	; 0x5000
     638:	0002c2ac 	andeq	ip, r2, ip, lsr #5
     63c:	0004a010 	andeq	sl, r4, r0, lsl r0
     640:	0b590100 	bleq	1640a48 <__bss_end+0x15133e8>
     644:	0000029c 	muleq	r0, ip, r2
     648:	c2c00305 	sbcgt	r0, r0, #335544320	; 0x14000000
     64c:	04090002 	streq	r0, [r9], #-2
     650:	000001f7 	strdeq	r0, [r0], -r7
     654:	0003a80f 	andeq	sl, r3, pc, lsl #16
     658:	1f5a0100 	svcne	0x005a0100
     65c:	0000004f 	andeq	r0, r0, pc, asr #32
     660:	c2c40305 	sbcgt	r0, r4, #335544320	; 0x14000000
     664:	7d0f0002 	stcvc	0, cr0, [pc, #-8]	; 664 <_start-0xf99c>
     668:	01000003 	tsteq	r0, r3
     66c:	0043155b 	subeq	r1, r3, fp, asr r5
     670:	03050000 	movweq	r0, #20480	; 0x5000
     674:	0002c2c8 	andeq	ip, r2, r8, asr #5
     678:	00036e0f 	andeq	r6, r3, pc, lsl #28
     67c:	2e5b0100 	rdfcse	f0, f3, f0
     680:	00000043 	andeq	r0, r0, r3, asr #32
     684:	c2cc0305 	sbcgt	r0, ip, #335544320	; 0x14000000
     688:	2f0f0002 	svccs	0x000f0002
     68c:	01000003 	tsteq	r0, r3
     690:	0043425b 	subeq	r4, r3, fp, asr r2
     694:	03050000 	movweq	r0, #20480	; 0x5000
     698:	0002c2d0 	ldrdeq	ip, [r2], -r0
     69c:	00042d11 	andeq	r2, r4, r1, lsl sp
     6a0:	016c0100 	cmneq	ip, r0, lsl #2
     6a4:	00005b16 	andeq	r5, r0, r6, lsl fp
     6a8:	020cc800 	andeq	ip, ip, #0, 16
     6ac:	00008c00 	andeq	r8, r0, r0, lsl #24
     6b0:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
     6b4:	12000003 	andne	r0, r0, #3
     6b8:	000004f1 	strdeq	r0, [r0], -r1
     6bc:	42016c01 	andmi	r6, r1, #256	; 0x100
     6c0:	00000336 	andeq	r0, r0, r6, lsr r3
     6c4:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     6c8:	000002dd 	ldrdeq	r0, [r0], -sp
     6cc:	0a016e01 	beq	5bed8 <ramdisk+0x2e880>
     6d0:	0000029c 	muleq	r0, ip, r2
     6d4:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
     6d8:	0000091c 	andeq	r0, r0, ip, lsl r9
     6dc:	16016f01 	strne	r6, [r1], -r1, lsl #30
     6e0:	0000005b 	andeq	r0, r0, fp, asr r0
     6e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6e8:	015a0409 	cmpeq	sl, r9, lsl #8
     6ec:	ff140000 			; <UNDEFINED> instruction: 0xff140000
     6f0:	01000005 	tsteq	r0, r5
     6f4:	200d0158 	andcs	r0, sp, r8, asr r1
     6f8:	a800020c 	stmdage	r0, {r2, r3, r9}
     6fc:	01000000 	mrseq	r0, (UNDEF: 0)
     700:	0003649c 	muleq	r3, ip, r4
     704:	04b31300 	ldrteq	r1, [r3], #768	; 0x300
     708:	5a010000 	bpl	40710 <ramdisk+0x130b8>
     70c:	004f1801 	subeq	r1, pc, r1, lsl #16
     710:	91020000 	mrsls	r0, (UNDEF: 2)
     714:	07150074 			; <UNDEFINED> instruction: 0x07150074
     718:	01000005 	tsteq	r0, r5
     71c:	fc06013a 	stc2	1, cr0, [r6], {58}	; 0x3a
     720:	2400020a 	strcs	r0, [r0], #-522	; 0xfffffdf6
     724:	01000001 	tsteq	r0, r1
     728:	0003969c 	muleq	r3, ip, r6
     72c:	0b641600 	bleq	1905f34 <__bss_end+0x17d88d4>
     730:	00780002 	rsbseq	r0, r8, r2
     734:	9c130000 	ldcls	0, cr0, [r3], {-0}
     738:	01000003 	tsteq	r0, r3
     73c:	6102014f 	tstvs	r2, pc, asr #2
     740:	02000002 	andeq	r0, r0, #2
     744:	00007491 	muleq	r0, r1, r4
     748:	00062a14 	andeq	r2, r6, r4, lsl sl
     74c:	01000100 	mrseq	r0, (UNDEF: 16)
     750:	02092c0d 	andeq	r2, r9, #3328	; 0xd00
     754:	0001d000 	andeq	sp, r1, r0
     758:	d89c0100 	ldmle	ip, {r8}
     75c:	13000003 	movwne	r0, #3
     760:	000003f2 	strdeq	r0, [r0], -r2
     764:	0a010201 	beq	40f70 <ramdisk+0x13918>
     768:	0000029c 	muleq	r0, ip, r2
     76c:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
     770:	00020990 	muleq	r2, r0, r9
     774:	00000028 	andeq	r0, r0, r8, lsr #32
     778:	0002ed13 	andeq	lr, r2, r3, lsl sp
     77c:	010d0100 	mrseq	r0, (UNDEF: 29)
     780:	00025b0c 	andeq	r5, r2, ip, lsl #22
     784:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     788:	d5170000 	ldrle	r0, [r7, #-0]
     78c:	01000005 	tsteq	r0, r5
     790:	083c0de9 	ldmdaeq	ip!, {r0, r3, r5, r6, r7, r8, sl, fp}
     794:	00f00002 	rscseq	r0, r0, r2
     798:	9c010000 	stcls	0, cr0, [r1], {-0}
     79c:	00000408 	andeq	r0, r0, r8, lsl #8
     7a0:	02084c16 	andeq	r4, r8, #5632	; 0x1600
     7a4:	0000b400 	andeq	fp, r0, r0, lsl #8
     7a8:	02dd0f00 	sbcseq	r0, sp, #0, 30
     7ac:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     7b0:	00029c0c 	andeq	r9, r2, ip, lsl #24
     7b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     7b8:	f4180000 			; <UNDEFINED> instruction: 0xf4180000
     7bc:	01000002 	tsteq	r0, r2
     7c0:	075806c3 	ldrbeq	r0, [r8, -r3, asr #13]
     7c4:	00e40002 	rsceq	r0, r4, r2
     7c8:	9c010000 	stcls	0, cr0, [r1], {-0}
     7cc:	0000044c 	andeq	r0, r0, ip, asr #8
     7d0:	00034f19 	andeq	r4, r3, r9, lsl pc
     7d4:	2fc30100 	svccs	0x00c30100
     7d8:	00000043 	andeq	r0, r0, r3, asr #32
     7dc:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     7e0:	000004f1 	strdeq	r0, [r0], -r1
     7e4:	5b45c301 	blpl	11713f0 <__bss_end+0x1043d90>
     7e8:	02000002 	andeq	r0, r0, #2
     7ec:	1a0f6891 	bne	3daa38 <__bss_end+0x2ad3d8>
     7f0:	01000005 	tsteq	r0, r5
     7f4:	00430ec5 	subeq	r0, r3, r5, asr #29
     7f8:	91020000 	mrsls	r0, (UNDEF: 2)
     7fc:	771a0074 			; <UNDEFINED> instruction: 0x771a0074
     800:	01000004 	tsteq	r0, r4
     804:	005b168a 	subseq	r1, fp, sl, lsl #13
     808:	05f00000 	ldrbeq	r0, [r0, #0]!
     80c:	01680002 	cmneq	r8, r2
     810:	9c010000 	stcls	0, cr0, [r1], {-0}
     814:	0003f919 	andeq	pc, r3, r9, lsl r9	; <UNPREDICTABLE>
     818:	398a0100 	stmibcc	sl, {r8}
     81c:	00000179 	andeq	r0, r0, r9, ror r1
     820:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     824:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
     828:	4f618a01 	svcmi	0x00618a01
     82c:	02000000 	andeq	r0, r0, #0
     830:	61196891 			; <UNDEFINED> instruction: 0x61196891
     834:	01000004 	tsteq	r0, r4
     838:	004f848a 	subeq	r8, pc, sl, lsl #9
     83c:	91020000 	mrsls	r0, (UNDEF: 2)
     840:	091c0f64 	ldmdbeq	ip, {r2, r5, r6, r8, r9, sl, fp}
     844:	8c010000 	stchi	0, cr0, [r1], {-0}
     848:	00005b16 	andeq	r5, r0, r6, lsl fp
     84c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     850:	0005260f 	andeq	r2, r5, pc, lsl #12
     854:	0a8d0100 	beq	fe340c5c <_estack+0xf6320c5c>
     858:	0000029c 	muleq	r0, ip, r2
     85c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     860:	0002a100 	andeq	sl, r2, r0, lsl #2
     864:	b9000400 	stmdblt	r0, {sl}
     868:	04000003 	streq	r0, [r0], #-3
     86c:	00003701 	andeq	r3, r0, r1, lsl #14
     870:	06c80c00 	strbeq	r0, [r8], r0, lsl #24
     874:	00ae0000 	adceq	r0, lr, r0
     878:	0d540000 	ldcleq	0, cr0, [r4, #-0]
     87c:	029c0002 	addseq	r0, ip, #2
     880:	05cf0000 	strbeq	r0, [pc]	; 888 <_start-0xf778>
     884:	04020000 	streq	r0, [r2], #-0
     888:	00065907 	andeq	r5, r6, r7, lsl #18
     88c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     890:	00746e69 	rsbseq	r6, r4, r9, ror #28
     894:	7b050802 	blvc	1428a4 <__bss_end+0x15244>
     898:	02000001 	andeq	r0, r0, #1
     89c:	01a90408 			; <UNDEFINED> instruction: 0x01a90408
     8a0:	01020000 	mrseq	r0, (UNDEF: 2)
     8a4:	00066806 	andeq	r6, r6, r6, lsl #16
     8a8:	08010200 	stmdaeq	r1, {r9}
     8ac:	00000666 	andeq	r0, r0, r6, ror #12
     8b0:	31050202 	tstcc	r5, r2, lsl #4
     8b4:	02000007 	andeq	r0, r0, #7
     8b8:	009b0702 	addseq	r0, fp, r2, lsl #14
     8bc:	04020000 	streq	r0, [r2], #-0
     8c0:	00018005 	andeq	r8, r1, r5
     8c4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     8c8:	00000654 	andeq	r0, r0, r4, asr r6
     8cc:	00006404 	andeq	r6, r0, r4, lsl #8
     8d0:	07080200 	streq	r0, [r8, -r0, lsl #4]
     8d4:	0000064f 	andeq	r0, r0, pc, asr #12
     8d8:	01020405 	tsteq	r2, r5, lsl #8
     8dc:	00066f08 	andeq	r6, r6, r8, lsl #30
     8e0:	000c0600 	andeq	r0, ip, r0, lsl #12
     8e4:	61030000 	mrsvs	r0, (UNDEF: 3)
     8e8:	0000641c 	andeq	r6, r0, ip, lsl r4
     8ec:	03910700 	orrseq	r0, r1, #0, 14
     8f0:	02140000 	andseq	r0, r4, #0
     8f4:	00db0869 	sbcseq	r0, fp, r9, ror #16
     8f8:	44080000 	strmi	r0, [r8], #-0
     8fc:	02000003 	andeq	r0, r0, #3
     900:	00800f6b 	addeq	r0, r0, fp, ror #30
     904:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     908:	000004ea 	andeq	r0, r0, sl, ror #9
     90c:	e01f6c02 	ands	r6, pc, r2, lsl #24
     910:	04000000 	streq	r0, [r0], #-0
     914:	00040908 	andeq	r0, r4, r8, lsl #18
     918:	1f6d0200 	svcne	0x006d0200
     91c:	000000e0 	andeq	r0, r0, r0, ror #1
     920:	03660808 	cmneq	r6, #8, 16	; 0x80000
     924:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
     928:	00007709 	andeq	r7, r0, r9, lsl #14
     92c:	0f080c00 	svceq	0x00080c00
     930:	02000003 	andeq	r0, r0, #3
     934:	0077096f 	rsbseq	r0, r7, pc, ror #18
     938:	00100000 	andseq	r0, r0, r0
     93c:	00008c04 	andeq	r8, r0, r4, lsl #24
     940:	db040900 	blle	102d48 <ramdisk+0xd56f0>
     944:	06000000 	streq	r0, [r0], -r0
     948:	000004fd 	strdeq	r0, [r0], -sp
     94c:	8c1b7102 	ldfhis	f7, [fp], {2}
     950:	04000000 	streq	r0, [r0], #-0
     954:	000000e6 	andeq	r0, r0, r6, ror #1
     958:	00055907 	andeq	r5, r5, r7, lsl #18
     95c:	73020c00 	movwvc	r0, #11264	; 0x2c00
     960:	00012c08 	andeq	r2, r1, r8, lsl #24
     964:	03440800 	movteq	r0, #18432	; 0x4800
     968:	75020000 	strvc	r0, [r2, #-0]
     96c:	0000800f 	andeq	r8, r0, pc
     970:	ea080000 	b	200978 <__bss_end+0xd3318>
     974:	02000004 	andeq	r0, r0, #4
     978:	00e01e76 	rsceq	r1, r0, r6, ror lr
     97c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     980:	00000409 	andeq	r0, r0, r9, lsl #8
     984:	e01e7702 	ands	r7, lr, r2, lsl #14
     988:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     98c:	04690600 	strbteq	r0, [r9], #-1536	; 0xfffffa00
     990:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
     994:	0000f720 	andeq	pc, r0, r0, lsr #14
     998:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
     99c:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
     9a0:	14000005 	strne	r0, [r0], #-5
     9a4:	72107e02 	andsvc	r7, r0, #2, 28
     9a8:	08000001 	stmdaeq	r0, {r0}
     9ac:	00000490 	muleq	r0, r0, r4
     9b0:	6b228002 	blvs	8a09c0 <__bss_end+0x773360>
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	00033c08 	andeq	r3, r3, r8, lsl #24
     9bc:	17810200 	strne	r0, [r1, r0, lsl #4]
     9c0:	00000172 	andeq	r0, r0, r2, ror r1
     9c4:	035d0804 	cmpeq	sp, #4, 16	; 0x40000
     9c8:	82020000 	andhi	r0, r2, #0
     9cc:	00013819 	andeq	r3, r1, r9, lsl r8
     9d0:	09000800 	stmdbeq	r0, {fp}
     9d4:	0000f204 	andeq	pc, r0, r4, lsl #4
     9d8:	073c0600 	ldreq	r0, [ip, -r0, lsl #12]!
     9dc:	83020000 	movwhi	r0, #8192	; 0x2000
     9e0:	00013d03 	andeq	r3, r1, r3, lsl #26
     9e4:	071a0a00 	ldreq	r0, [sl, -r0, lsl #20]
     9e8:	b7010000 	strlt	r0, [r1, -r0]
     9ec:	020f5806 	andeq	r5, pc, #393216	; 0x60000
     9f0:	00009800 	andeq	r9, r0, r0, lsl #16
     9f4:	b99c0100 	ldmiblt	ip, {r8}
     9f8:	0b000001 	bleq	a04 <_start-0xf5fc>
     9fc:	00000674 	andeq	r0, r0, r4, ror r6
     a00:	b91eb701 	ldmdblt	lr, {r0, r8, r9, sl, ip, sp, pc}
     a04:	02000001 	andeq	r0, r0, #1
     a08:	3b0c6c91 	blcc	31bc54 <__bss_end+0x1ee5f4>
     a0c:	01000007 	tsteq	r0, r7
     a10:	01bf09b9 			; <UNDEFINED> instruction: 0x01bf09b9
     a14:	91020000 	mrsls	r0, (UNDEF: 2)
     a18:	04090074 	streq	r0, [r9], #-116	; 0xffffff8c
     a1c:	000000e6 	andeq	r0, r0, r6, ror #1
     a20:	01780409 	cmneq	r8, r9, lsl #8
     a24:	500a0000 	andpl	r0, sl, r0
     a28:	01000007 	tsteq	r0, r7
     a2c:	0e80067e 	mcreq	6, 4, r0, cr0, cr14, {3}
     a30:	00d80002 	sbcseq	r0, r8, r2
     a34:	9c010000 	stcls	0, cr0, [r1], {-0}
     a38:	00000218 	andeq	r0, r0, r8, lsl r2
     a3c:	00073b0b 	andeq	r3, r7, fp, lsl #22
     a40:	1a7e0100 	bne	1f80e48 <__bss_end+0x1e537e8>
     a44:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     a48:	0b6c9102 	bleq	1b24e58 <__bss_end+0x19f77f8>
     a4c:	00000742 	andeq	r0, r0, r2, asr #14
     a50:	b92d7e01 	pushlt	{r0, r9, sl, fp, ip, sp, lr}
     a54:	02000001 	andeq	r0, r0, #1
     a58:	260c6891 			; <UNDEFINED> instruction: 0x260c6891
     a5c:	01000007 	tsteq	r0, r7
     a60:	01721580 	cmneq	r2, r0, lsl #11
     a64:	91020000 	mrsls	r0, (UNDEF: 2)
     a68:	06b60c74 	sxtaheq	r0, r6, r4, ror #24
     a6c:	81010000 	mrshi	r0, (UNDEF: 1)
     a70:	0000800e 	andeq	r8, r0, lr
     a74:	70910200 	addsvc	r0, r1, r0, lsl #4
     a78:	06970a00 	ldreq	r0, [r7], r0, lsl #20
     a7c:	67010000 	strvs	r0, [r1, -r0]
     a80:	020de806 	andeq	lr, sp, #393216	; 0x60000
     a84:	00009800 	andeq	r9, r0, r0, lsl #16
     a88:	5c9c0100 	ldfpls	f0, [ip], {0}
     a8c:	0b000002 	bleq	a9c <_start-0xf564>
     a90:	0000073b 	andeq	r0, r0, fp, lsr r7
     a94:	bf1d6701 	svclt	0x001d6701
     a98:	02000001 	andeq	r0, r0, #1
     a9c:	420b6c91 	andmi	r6, fp, #37120	; 0x9100
     aa0:	01000007 	tsteq	r0, r7
     aa4:	01b93067 			; <UNDEFINED> instruction: 0x01b93067
     aa8:	91020000 	mrsls	r0, (UNDEF: 2)
     aac:	033c0c68 	teqeq	ip, #104, 24	; 0x6800
     ab0:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     ab4:	00017216 	andeq	r7, r1, r6, lsl r2
     ab8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     abc:	06830a00 	streq	r0, [r3], r0, lsl #20
     ac0:	60010000 	andvs	r0, r1, r0
     ac4:	020dbc06 	andeq	fp, sp, #1536	; 0x600
     ac8:	00002c00 	andeq	r2, r0, r0, lsl #24
     acc:	829c0100 	addshi	r0, ip, #0, 2
     ad0:	0b000002 	bleq	ae0 <_start-0xf520>
     ad4:	00000713 	andeq	r0, r0, r3, lsl r7
     ad8:	b9266001 	stmdblt	r6!, {r0, sp, lr}
     adc:	02000001 	andeq	r0, r0, #1
     ae0:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
     ae4:	000006a6 	andeq	r0, r0, r6, lsr #13
     ae8:	54064c01 	strpl	r4, [r6], #-3073	; 0xfffff3ff
     aec:	6800020d 	stmdavs	r0, {r0, r2, r3, r9}
     af0:	01000000 	mrseq	r0, (UNDEF: 0)
     af4:	073b0b9c 			; <UNDEFINED> instruction: 0x073b0b9c
     af8:	4c010000 	stcmi	0, cr0, [r1], {-0}
     afc:	0001bf1e 	andeq	fp, r1, lr, lsl pc
     b00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b04:	07840000 	streq	r0, [r4, r0]
     b08:	00040000 	andeq	r0, r4, r0
     b0c:	00000483 	andeq	r0, r0, r3, lsl #9
     b10:	00370104 	eorseq	r0, r7, r4, lsl #2
     b14:	700c0000 	andvc	r0, ip, r0
     b18:	ae000008 	cdpge	0, 0, cr0, cr0, cr8, {0}
     b1c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     b20:	b000020f 	andlt	r0, r0, pc, lsl #4
     b24:	d200000b 	andle	r0, r0, #11
     b28:	02000007 	andeq	r0, r0, #7
     b2c:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
     b30:	3117d102 	tstcc	r7, r2, lsl #2
     b34:	03000000 	movweq	r0, #0
     b38:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
     b3c:	04040000 	streq	r0, [r4], #-0
     b40:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     b44:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     b48:	0000017b 	andeq	r0, r0, fp, ror r1
     b4c:	a9040803 	stmdbge	r4, {r0, r1, fp}
     b50:	03000001 	movweq	r0, #1
     b54:	06680601 	strbteq	r0, [r8], -r1, lsl #12
     b58:	01030000 	mrseq	r0, (UNDEF: 3)
     b5c:	00066608 	andeq	r6, r6, r8, lsl #12
     b60:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
     b64:	00000731 	andeq	r0, r0, r1, lsr r7
     b68:	9b070203 	blls	1c137c <__bss_end+0x93d1c>
     b6c:	03000000 	movweq	r0, #0
     b70:	01800504 	orreq	r0, r0, r4, lsl #10
     b74:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
     b78:	03000000 	movweq	r0, #0
     b7c:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
     b80:	75050000 	strvc	r0, [r5, #-0]
     b84:	03000000 	movweq	r0, #0
     b88:	064f0708 	strbeq	r0, [pc], -r8, lsl #14
     b8c:	04060000 	streq	r0, [r6], #-0
     b90:	00008807 	andeq	r8, r0, r7, lsl #16
     b94:	08010300 	stmdaeq	r1, {r8, r9}
     b98:	0000066f 	andeq	r0, r0, pc, ror #12
     b9c:	00a10408 	adceq	r0, r1, r8, lsl #8
     ba0:	96070000 	strls	r0, [r7], -r0
     ba4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     ba8:	00000c02 	andeq	r0, r0, r2, lsl #24
     bac:	1c610300 	stclne	3, cr0, [r1], #-0
     bb0:	00000075 	andeq	r0, r0, r5, ror r0
     bb4:	0003910a 	andeq	r9, r3, sl, lsl #2
     bb8:	69041400 	stmdbvs	r4, {sl, ip}
     bbc:	0000fd08 	andeq	pc, r0, r8, lsl #26
     bc0:	03440b00 	movteq	r0, #19200	; 0x4b00
     bc4:	6b040000 	blvs	100bcc <ramdisk+0xd3574>
     bc8:	0000a20f 	andeq	sl, r0, pc, lsl #4
     bcc:	ea0b0000 	b	2c0bd4 <__bss_end+0x193574>
     bd0:	04000004 	streq	r0, [r0], #-4
     bd4:	01021f6c 	tsteq	r2, ip, ror #30
     bd8:	0b040000 	bleq	100be0 <ramdisk+0xd3588>
     bdc:	00000409 	andeq	r0, r0, r9, lsl #8
     be0:	021f6d04 	andseq	r6, pc, #4, 26	; 0x100
     be4:	08000001 	stmdaeq	r0, {r0}
     be8:	0003660b 	andeq	r6, r3, fp, lsl #12
     bec:	096e0400 	stmdbeq	lr!, {sl}^
     bf0:	00000088 	andeq	r0, r0, r8, lsl #1
     bf4:	030f0b0c 	movweq	r0, #64268	; 0xfb0c
     bf8:	6f040000 	svcvs	0x00040000
     bfc:	00008809 	andeq	r8, r0, r9, lsl #16
     c00:	05001000 	streq	r1, [r0, #-0]
     c04:	000000ae 	andeq	r0, r0, lr, lsr #1
     c08:	00fd0408 	rscseq	r0, sp, r8, lsl #8
     c0c:	fd020000 	stc2	0, cr0, [r2, #-0]
     c10:	04000004 	streq	r0, [r0], #-4
     c14:	00ae1b71 	adceq	r1, lr, r1, ror fp
     c18:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
     c1c:	0a000001 	beq	c28 <_start-0xf3d8>
     c20:	00000559 	andeq	r0, r0, r9, asr r5
     c24:	0873040c 	ldmdaeq	r3!, {r2, r3, sl}^
     c28:	0000014e 	andeq	r0, r0, lr, asr #2
     c2c:	0003440b 	andeq	r4, r3, fp, lsl #8
     c30:	0f750400 	svceq	0x00750400
     c34:	000000a2 	andeq	r0, r0, r2, lsr #1
     c38:	04ea0b00 	strbteq	r0, [sl], #2816	; 0xb00
     c3c:	76040000 	strvc	r0, [r4], -r0
     c40:	0001021e 	andeq	r0, r1, lr, lsl r2
     c44:	090b0400 	stmdbeq	fp, {sl}
     c48:	04000004 	streq	r0, [r0], #-4
     c4c:	01021e77 	tsteq	r2, r7, ror lr
     c50:	00080000 	andeq	r0, r8, r0
     c54:	00046902 	andeq	r6, r4, r2, lsl #18
     c58:	20790400 	rsbscs	r0, r9, r0, lsl #8
     c5c:	00000119 	andeq	r0, r0, r9, lsl r1
     c60:	00014e05 	andeq	r4, r1, r5, lsl #28
     c64:	05b80a00 	ldreq	r0, [r8, #2560]!	; 0xa00
     c68:	04140000 	ldreq	r0, [r4], #-0
     c6c:	0194107e 	orrseq	r1, r4, lr, ror r0
     c70:	900b0000 	andls	r0, fp, r0
     c74:	04000004 	streq	r0, [r0], #-4
     c78:	007c2280 	rsbseq	r2, ip, r0, lsl #5
     c7c:	0b000000 	bleq	c84 <_start-0xf37c>
     c80:	0000033c 	andeq	r0, r0, ip, lsr r3
     c84:	94178104 	ldrls	r8, [r7], #-260	; 0xfffffefc
     c88:	04000001 	streq	r0, [r0], #-1
     c8c:	00035d0b 	andeq	r5, r3, fp, lsl #26
     c90:	19820400 	stmibne	r2, {sl}
     c94:	0000015a 	andeq	r0, r0, sl, asr r1
     c98:	04080008 	streq	r0, [r8], #-8
     c9c:	00000114 	andeq	r0, r0, r4, lsl r1
     ca0:	00073c02 	andeq	r3, r7, r2, lsl #24
     ca4:	03830400 	orreq	r0, r3, #0, 8
     ca8:	0000015f 	andeq	r0, r0, pc, asr r1
     cac:	00082f0a 	andeq	r2, r8, sl, lsl #30
     cb0:	68050800 	stmdavs	r5, {fp}
     cb4:	0001ce10 	andeq	ip, r1, r0, lsl lr
     cb8:	08bc0b00 	ldmeq	ip!, {r8, r9, fp}
     cbc:	6a050000 	bvs	140cc4 <__bss_end+0x13664>
     cc0:	00006910 	andeq	r6, r0, r0, lsl r9
     cc4:	df0b0000 	svcle	0x000b0000
     cc8:	05000008 	streq	r0, [r0, #-8]
     ccc:	00a2106b 	adceq	r1, r2, fp, rrx
     cd0:	00040000 	andeq	r0, r4, r0
     cd4:	00090e02 	andeq	r0, r9, r2, lsl #28
     cd8:	036c0500 	cmneq	ip, #0, 10
     cdc:	000001a6 	andeq	r0, r0, r6, lsr #3
     ce0:	0009c40a 	andeq	ip, r9, sl, lsl #8
     ce4:	79014c00 	stmdbvc	r1, {sl, fp, lr}
     ce8:	00027710 	andeq	r7, r2, r0, lsl r7
     cec:	08d80b00 	ldmeq	r8, {r8, r9, fp}^
     cf0:	7b010000 	blvc	40cf8 <ramdisk+0x136a0>
     cf4:	0002770f 	andeq	r7, r2, pc, lsl #14
     cf8:	5a0b0000 	bpl	2c0d00 <__bss_end+0x1936a0>
     cfc:	0100000a 	tsteq	r0, sl
     d00:	02770f7c 	rsbseq	r0, r7, #124, 30	; 0x1f0
     d04:	0b040000 	bleq	100d0c <ramdisk+0xd36b4>
     d08:	00000a99 	muleq	r0, r9, sl
     d0c:	770f7e01 	strvc	r7, [pc, -r1, lsl #28]
     d10:	08000002 	stmdaeq	r0, {r1}
     d14:	0008390b 	andeq	r3, r8, fp, lsl #18
     d18:	0f7f0100 	svceq	0x007f0100
     d1c:	00000277 	andeq	r0, r0, r7, ror r2
     d20:	0a6b0b0c 	beq	1ac3958 <__bss_end+0x19962f8>
     d24:	81010000 	mrshi	r0, (UNDEF: 1)
     d28:	00019a08 	andeq	r9, r1, r8, lsl #20
     d2c:	6c0b1000 	stcvs	0, cr1, [fp], {-0}
     d30:	01000009 	tsteq	r0, r9
     d34:	019a0882 	orrseq	r0, sl, r2, lsl #17
     d38:	0b240000 	bleq	900d40 <__bss_end+0x7d36e0>
     d3c:	00000a07 	andeq	r0, r0, r7, lsl #20
     d40:	7c228401 	cfstrsvc	mvf8, [r2], #-4
     d44:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     d48:	0009550b 	andeq	r5, r9, fp, lsl #10
     d4c:	19850100 	stmibne	r5, {r8}
     d50:	00000075 	andeq	r0, r0, r5, ror r0
     d54:	0aa30b3c 	beq	fe8c3a4c <_estack+0xf68a3a4c>
     d58:	86010000 	strhi	r0, [r1], -r0
     d5c:	00007519 	andeq	r7, r0, r9, lsl r5
     d60:	520b4000 	andpl	r4, fp, #0
     d64:	0100000a 	tsteq	r0, sl
     d68:	00702088 	rsbseq	r2, r0, r8, lsl #1
     d6c:	0b440000 	bleq	1100d74 <__bss_end+0xfd3714>
     d70:	000009d4 	ldrdeq	r0, [r0], -r4
     d74:	70208901 	eorvc	r8, r0, r1, lsl #18
     d78:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     d7c:	4d040800 	stcmi	8, cr0, [r4, #-0]
     d80:	02000000 	andeq	r0, r0, #0
     d84:	000009af 	andeq	r0, r0, pc, lsr #19
     d88:	da039001 	ble	e4d94 <ramdisk+0xb773c>
     d8c:	02000001 	andeq	r0, r0, #1
     d90:	00000924 	andeq	r0, r0, r4, lsr #18
     d94:	9a129801 	bls	4a6da0 <__bss_end+0x379740>
     d98:	07000002 	streq	r0, [r0, -r2]
     d9c:	00000289 	andeq	r0, r0, r9, lsl #5
     da0:	027d0408 	rsbseq	r0, sp, #8, 8	; 0x8000000
     da4:	9a070000 	bls	1c0dac <__bss_end+0x9374c>
     da8:	0c000002 	stceq	0, cr0, [r0], {2}
     dac:	00000781 	andeq	r0, r0, r1, lsl #15
     db0:	16056901 	strne	r6, [r5], -r1, lsl #18
     db4:	00000069 	andeq	r0, r0, r9, rrx
     db8:	00021b58 	andeq	r1, r2, r8, asr fp
     dbc:	00000048 	andeq	r0, r0, r8, asr #32
     dc0:	02e19c01 	rsceq	r9, r1, #256	; 0x100
     dc4:	910d0000 	mrsls	r0, (UNDEF: 13)
     dc8:	0100000a 	tsteq	r0, sl
     dcc:	95430569 	strbls	r0, [r3, #-1385]	; 0xfffffa97
     dd0:	02000002 	andeq	r0, r0, #2
     dd4:	1c0e6c91 	stcne	12, cr6, [lr], {145}	; 0x91
     dd8:	01000009 	tsteq	r0, r9
     ddc:	6916056b 	ldmdbvs	r6, {r0, r1, r3, r5, r6, r8, sl}
     de0:	02000000 	andeq	r0, r0, #0
     de4:	0f007491 	svceq	0x00007491
     de8:	00000946 	andeq	r0, r0, r6, asr #18
     dec:	1d055d01 	stcne	13, cr5, [r5, #-4]
     df0:	00000069 	andeq	r0, r0, r9, rrx
     df4:	00021b0c 	andeq	r1, r2, ip, lsl #22
     df8:	0000004c 	andeq	r0, r0, ip, asr #32
     dfc:	031d9c01 	tsteq	sp, #256	; 0x100
     e00:	910d0000 	mrsls	r0, (UNDEF: 13)
     e04:	0100000a 	tsteq	r0, sl
     e08:	9540055d 	strbls	r0, [r0, #-1373]	; 0xfffffaa3
     e0c:	02000002 	andeq	r0, r0, #2
     e10:	1c0e6c91 	stcne	12, cr6, [lr], {145}	; 0x91
     e14:	01000009 	tsteq	r0, r9
     e18:	6916055f 	ldmdbvs	r6, {r0, r1, r2, r3, r4, r6, r8, sl}
     e1c:	02000000 	andeq	r0, r0, #0
     e20:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
     e24:	000007d2 	ldrdeq	r0, [r0], -r2
     e28:	16055201 	strne	r5, [r5], -r1, lsl #4
     e2c:	00000069 	andeq	r0, r0, r9, rrx
     e30:	00021acc 	andeq	r1, r2, ip, asr #21
     e34:	00000040 	andeq	r0, r0, r0, asr #32
     e38:	03599c01 	cmpeq	r9, #256	; 0x100
     e3c:	910d0000 	mrsls	r0, (UNDEF: 13)
     e40:	0100000a 	tsteq	r0, sl
     e44:	95440552 	strbls	r0, [r4, #-1362]	; 0xfffffaae
     e48:	02000002 	andeq	r0, r0, #2
     e4c:	1c0e6c91 	stcne	12, cr6, [lr], {145}	; 0x91
     e50:	01000009 	tsteq	r0, r9
     e54:	69160554 	ldmdbvs	r6, {r2, r4, r6, r8, sl}
     e58:	02000000 	andeq	r0, r0, #0
     e5c:	0f007491 	svceq	0x00007491
     e60:	000007ec 	andeq	r0, r0, ip, ror #15
     e64:	1d054601 	stcne	6, cr4, [r5, #-4]
     e68:	00000069 	andeq	r0, r0, r9, rrx
     e6c:	00021a88 	andeq	r1, r2, r8, lsl #21
     e70:	00000044 	andeq	r0, r0, r4, asr #32
     e74:	03959c01 	orrseq	r9, r5, #256	; 0x100
     e78:	910d0000 	mrsls	r0, (UNDEF: 13)
     e7c:	0100000a 	tsteq	r0, sl
     e80:	95410546 	strbls	r0, [r1, #-1350]	; 0xfffffaba
     e84:	02000002 	andeq	r0, r0, #2
     e88:	1c0e6c91 	stcne	12, cr6, [lr], {145}	; 0x91
     e8c:	01000009 	tsteq	r0, r9
     e90:	69160548 	ldmdbvs	r6, {r3, r6, r8, sl}
     e94:	02000000 	andeq	r0, r0, #0
     e98:	10007491 	mulne	r0, r1, r4
     e9c:	00000a43 	andeq	r0, r0, r3, asr #20
     ea0:	0d050601 	stceq	6, cr0, [r5, #-4]
     ea4:	00021984 	andeq	r1, r2, r4, lsl #19
     ea8:	00000104 	andeq	r0, r0, r4, lsl #2
     eac:	03bd9c01 			; <UNDEFINED> instruction: 0x03bd9c01
     eb0:	910d0000 	mrsls	r0, (UNDEF: 13)
     eb4:	0100000a 	tsteq	r0, sl
     eb8:	892a0506 	stmdbhi	sl!, {r1, r2, r8, sl}
     ebc:	02000002 	andeq	r0, r0, #2
     ec0:	10007491 	mulne	r0, r1, r4
     ec4:	000007fc 	strdeq	r0, [r0], -ip
     ec8:	0d04f801 	stceq	8, cr15, [r4, #-4]
     ecc:	000218f4 	strdeq	r1, [r2], -r4
     ed0:	00000090 	muleq	r0, r0, r0
     ed4:	03f59c01 	mvnseq	r9, #256	; 0x100
     ed8:	910d0000 	mrsls	r0, (UNDEF: 13)
     edc:	0100000a 	tsteq	r0, sl
     ee0:	a03204f8 	ldrshtge	r0, [r2], -r8
     ee4:	02000002 	andeq	r0, r0, #2
     ee8:	190d7491 	stmdbne	sp, {r0, r4, r7, sl, ip, sp, lr}
     eec:	0100000a 	tsteq	r0, sl
     ef0:	964704f8 			; <UNDEFINED> instruction: 0x964704f8
     ef4:	02000000 	andeq	r0, r0, #0
     ef8:	10007091 	mulne	r0, r1, r0
     efc:	0000081c 	andeq	r0, r0, ip, lsl r8
     f00:	0d04d201 	sfmeq	f5, 1, [r4, #-4]
     f04:	000217c8 	andeq	r1, r2, r8, asr #15
     f08:	0000012c 	andeq	r0, r0, ip, lsr #2
     f0c:	043d9c01 	ldrteq	r9, [sp], #-3073	; 0xfffff3ff
     f10:	910d0000 	mrsls	r0, (UNDEF: 13)
     f14:	0100000a 	tsteq	r0, sl
     f18:	9a2904d2 	bls	a42268 <__bss_end+0x914c08>
     f1c:	02000002 	andeq	r0, r0, #2
     f20:	a10d7491 			; <UNDEFINED> instruction: 0xa10d7491
     f24:	01000009 	tsteq	r0, r9
     f28:	963e04d2 			; <UNDEFINED> instruction: 0x963e04d2
     f2c:	02000000 	andeq	r0, r0, #0
     f30:	610d7091 	swpvs	r7, r1, [sp]
     f34:	0100000a 	tsteq	r0, sl
     f38:	695b04d2 	ldmdbvs	fp, {r1, r4, r6, r7, sl}^
     f3c:	02000000 	andeq	r0, r0, #0
     f40:	11006c91 			; <UNDEFINED> instruction: 0x11006c91
     f44:	000008cb 	andeq	r0, r0, fp, asr #17
     f48:	0604a901 	streq	sl, [r4], -r1, lsl #18
     f4c:	00021794 	muleq	r2, r4, r7
     f50:	00000034 	andeq	r0, r0, r4, lsr r0
     f54:	04659c01 	strbteq	r9, [r5], #-3073	; 0xfffff3ff
     f58:	910d0000 	mrsls	r0, (UNDEF: 13)
     f5c:	0100000a 	tsteq	r0, sl
     f60:	892104a9 	stmdbhi	r1!, {r0, r3, r5, r7, sl}
     f64:	02000002 	andeq	r0, r0, #2
     f68:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
     f6c:	00000983 	andeq	r0, r0, r3, lsl #19
     f70:	18049d01 	stmdane	r4, {r0, r8, sl, fp, ip, pc}
     f74:	00000075 	andeq	r0, r0, r5, ror r0
     f78:	00021764 	andeq	r1, r2, r4, ror #14
     f7c:	00000030 	andeq	r0, r0, r0, lsr r0
     f80:	04a19c01 	strteq	r9, [r1], #3073	; 0xc01
     f84:	910d0000 	mrsls	r0, (UNDEF: 13)
     f88:	0100000a 	tsteq	r0, sl
     f8c:	954a049d 	strbls	r0, [sl, #-1181]	; 0xfffffb63
     f90:	02000002 	andeq	r0, r0, #2
     f94:	1b0e6c91 	blne	39c1e0 <__bss_end+0x26eb80>
     f98:	01000009 	tsteq	r0, r9
     f9c:	7518049f 	ldrvc	r0, [r8, #-1183]	; 0xfffffb61
     fa0:	02000000 	andeq	r0, r0, #0
     fa4:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
     fa8:	0000079a 	muleq	r0, sl, r7
     fac:	18048f01 	stmdane	r4, {r0, r8, r9, sl, fp, pc}
     fb0:	00000075 	andeq	r0, r0, r5, ror r0
     fb4:	00021730 	andeq	r1, r2, r0, lsr r7
     fb8:	00000034 	andeq	r0, r0, r4, lsr r0
     fbc:	04dd9c01 	ldrbeq	r9, [sp], #3073	; 0xc01
     fc0:	910d0000 	mrsls	r0, (UNDEF: 13)
     fc4:	0100000a 	tsteq	r0, sl
     fc8:	9543048f 	strbls	r0, [r3, #-1167]	; 0xfffffb71
     fcc:	02000002 	andeq	r0, r0, #2
     fd0:	1b0e6c91 	blne	39c21c <__bss_end+0x26ebbc>
     fd4:	01000009 	tsteq	r0, r9
     fd8:	75180491 	ldrvc	r0, [r8, #-1169]	; 0xfffffb6f
     fdc:	02000000 	andeq	r0, r0, #0
     fe0:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
     fe4:	00000931 	andeq	r0, r0, r1, lsr r9
     fe8:	16045601 	strne	r5, [r4], -r1, lsl #12
     fec:	00000069 	andeq	r0, r0, r9, rrx
     ff0:	00021650 	andeq	r1, r2, r0, asr r6
     ff4:	000000e0 	andeq	r0, r0, r0, ror #1
     ff8:	05499c01 	strbeq	r9, [r9, #-3073]	; 0xfffff3ff
     ffc:	910d0000 	mrsls	r0, (UNDEF: 13)
    1000:	0100000a 	tsteq	r0, sl
    1004:	89390456 	ldmdbhi	r9!, {r1, r2, r4, r6, sl}
    1008:	02000002 	andeq	r0, r0, #2
    100c:	190d6c91 	stmdbne	sp, {r0, r4, r7, sl, fp, sp, lr}
    1010:	0100000a 	tsteq	r0, sl
    1014:	8a4f0456 	bhi	13c2174 <__bss_end+0x1294b14>
    1018:	02000000 	andeq	r0, r0, #0
    101c:	b80d6891 	stmdalt	sp, {r0, r4, r7, fp, sp, lr}
    1020:	01000007 	tsteq	r0, r7
    1024:	496f0456 	stmdbmi	pc!, {r1, r2, r4, r6, sl}^	; <UNPREDICTABLE>
    1028:	02000005 	andeq	r0, r0, #5
    102c:	1c0e6491 	cfstrsne	mvf6, [lr], {145}	; 0x91
    1030:	01000009 	tsteq	r0, r9
    1034:	69160458 	ldmdbvs	r6, {r3, r4, r6, sl}
    1038:	02000000 	andeq	r0, r0, #0
    103c:	f00e7491 			; <UNDEFINED> instruction: 0xf00e7491
    1040:	01000009 	tsteq	r0, r9
    1044:	75180459 	ldrvc	r0, [r8, #-1113]	; 0xfffffba7
    1048:	02000000 	andeq	r0, r0, #0
    104c:	08007091 	stmdaeq	r0, {r0, r4, r7, ip, sp, lr}
    1050:	00006904 	andeq	r6, r0, r4, lsl #18
    1054:	08441200 	stmdaeq	r4, {r9, ip}^
    1058:	c1010000 	mrsgt	r0, (UNDEF: 1)
    105c:	00691603 	rsbeq	r1, r9, r3, lsl #12
    1060:	144c0000 	strbne	r0, [ip], #-0
    1064:	02040002 	andeq	r0, r4, #2
    1068:	9c010000 	stcls	0, cr0, [r1], {-0}
    106c:	000005db 	ldrdeq	r0, [r0], -fp
    1070:	000a910d 	andeq	r9, sl, sp, lsl #2
    1074:	03c10100 	biceq	r0, r1, #0, 2
    1078:	00028939 	andeq	r8, r2, r9, lsr r9
    107c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1080:	000a190d 	andeq	r1, sl, sp, lsl #18
    1084:	03c10100 	biceq	r0, r1, #0, 2
    1088:	00008a4f 	andeq	r8, r0, pc, asr #20
    108c:	60910200 	addsvs	r0, r1, r0, lsl #4
    1090:	000c8c0d 	andeq	r8, ip, sp, lsl #24
    1094:	03c10100 	biceq	r0, r1, #0, 2
    1098:	0000a266 	andeq	sl, r0, r6, ror #4
    109c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    10a0:	0008ef0d 	andeq	lr, r8, sp, lsl #30
    10a4:	03c10100 	biceq	r0, r1, #0, 2
    10a8:	00006982 	andeq	r6, r0, r2, lsl #19
    10ac:	58910200 	ldmpl	r1, {r9}
    10b0:	0009b60e 	andeq	fp, r9, lr, lsl #12
    10b4:	03c30100 	biceq	r0, r3, #0, 2
    10b8:	00006916 	andeq	r6, r0, r6, lsl r9
    10bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10c0:	000df70e 	andeq	pc, sp, lr, lsl #14
    10c4:	03c40100 	biceq	r0, r4, #0, 2
    10c8:	0001ce0e 	andeq	ip, r1, lr, lsl #28
    10cc:	68910200 	ldmvs	r1, {r9}
    10d0:	0008590e 	andeq	r5, r8, lr, lsl #18
    10d4:	03c50100 	biceq	r0, r5, #0, 2
    10d8:	0002770e 	andeq	r7, r2, lr, lsl #14
    10dc:	70910200 	addsvc	r0, r1, r0, lsl #4
    10e0:	075c1200 	ldrbeq	r1, [ip, -r0, lsl #4]
    10e4:	86010000 	strhi	r0, [r1], -r0
    10e8:	00691603 	rsbeq	r1, r9, r3, lsl #12
    10ec:	13700000 	cmnne	r0, #0
    10f0:	00dc0002 	sbcseq	r0, ip, r2
    10f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    10f8:	00000657 	andeq	r0, r0, r7, asr r6
    10fc:	000a910d 	andeq	r9, sl, sp, lsl #2
    1100:	03860100 	orreq	r0, r6, #0, 2
    1104:	0002893d 	andeq	r8, r2, sp, lsr r9
    1108:	6c910200 	lfmvs	f0, 4, [r1], {0}
    110c:	0009a10d 	andeq	sl, r9, sp, lsl #2
    1110:	03860100 	orreq	r0, r6, #0, 2
    1114:	00009c59 	andeq	r9, r0, r9, asr ip
    1118:	68910200 	ldmvs	r1, {r9}
    111c:	0007b80d 	andeq	fp, r7, sp, lsl #16
    1120:	03860100 	orreq	r0, r6, #0, 2
    1124:	0005497e 	andeq	r4, r5, lr, ror r9
    1128:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    112c:	000a350d 	andeq	r3, sl, sp, lsl #10
    1130:	03860100 	orreq	r0, r6, #0, 2
    1134:	000069a7 	andeq	r6, r0, r7, lsr #19
    1138:	60910200 	addsvs	r0, r1, r0, lsl #4
    113c:	00091c0e 	andeq	r1, r9, lr, lsl #24
    1140:	03880100 	orreq	r0, r8, #0, 2
    1144:	00006916 	andeq	r6, r0, r6, lsl r9
    1148:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    114c:	0009f00e 	andeq	pc, r9, lr
    1150:	03890100 	orreq	r0, r9, #0, 2
    1154:	00007518 	andeq	r7, r0, r8, lsl r5
    1158:	70910200 	addsvc	r0, r1, r0, lsl #4
    115c:	08fc1200 	ldmeq	ip!, {r9, ip}^
    1160:	41010000 	mrsmi	r0, (UNDEF: 1)
    1164:	00691602 	rsbeq	r1, r9, r2, lsl #12
    1168:	11cc0000 	bicne	r0, ip, r0
    116c:	01a40002 			; <UNDEFINED> instruction: 0x01a40002
    1170:	9c010000 	stcls	0, cr0, [r1], {-0}
    1174:	000006d3 	ldrdeq	r0, [r0], -r3
    1178:	000a910d 	andeq	r9, sl, sp, lsl #2
    117c:	02410100 	subeq	r0, r1, #0, 2
    1180:	00028936 	andeq	r8, r2, r6, lsr r9
    1184:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1188:	0009a10d 	andeq	sl, r9, sp, lsl #2
    118c:	02410100 	subeq	r0, r1, #0, 2
    1190:	00009c52 	andeq	r9, r0, r2, asr ip
    1194:	60910200 	addsvs	r0, r1, r0, lsl #4
    1198:	000c8c0d 	andeq	r8, ip, sp, lsl #24
    119c:	02410100 	subeq	r0, r1, #0, 2
    11a0:	0000a26e 	andeq	sl, r0, lr, ror #4
    11a4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    11a8:	000a350d 	andeq	r3, sl, sp, lsl #10
    11ac:	02410100 	subeq	r0, r1, #0, 2
    11b0:	0000698a 	andeq	r6, r0, sl, lsl #19
    11b4:	58910200 	ldmpl	r1, {r9}
    11b8:	0009b60e 	andeq	fp, r9, lr, lsl #12
    11bc:	02430100 	subeq	r0, r3, #0, 2
    11c0:	00006916 	andeq	r6, r0, r6, lsl r9
    11c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11c8:	000df70e 	andeq	pc, sp, lr, lsl #14
    11cc:	02440100 	subeq	r0, r4, #0, 2
    11d0:	0001ce0e 	andeq	ip, r1, lr, lsl #28
    11d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    11d8:	09dc1200 	ldmibeq	ip, {r9, ip}^
    11dc:	42010000 	andmi	r0, r1, #0
    11e0:	02890e01 	addeq	r0, r9, #1, 28
    11e4:	11040000 	mrsne	r0, (UNDEF: 4)
    11e8:	00c80002 	sbceq	r0, r8, r2
    11ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    11f0:	0000074f 	andeq	r0, r0, pc, asr #14
    11f4:	00095e0d 	andeq	r5, r9, sp, lsl #28
    11f8:	01420100 	mrseq	r0, (UNDEF: 82)
    11fc:	0000753a 	andeq	r7, r0, sl, lsr r5
    1200:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1204:	000aa30d 	andeq	sl, sl, sp, lsl #6
    1208:	01420100 	mrseq	r0, (UNDEF: 82)
    120c:	00007560 	andeq	r7, r0, r0, ror #10
    1210:	60910200 	addsvs	r0, r1, r0, lsl #4
    1214:	0007750d 	andeq	r7, r7, sp, lsl #10
    1218:	01420100 	mrseq	r0, (UNDEF: 82)
    121c:	0000547a 	andeq	r5, r0, sl, ror r4
    1220:	5f910200 	svcpl	0x00910200
    1224:	0008110e 	andeq	r1, r8, lr, lsl #2
    1228:	01440100 	mrseq	r0, (UNDEF: 84)
    122c:	00029a09 	andeq	r9, r2, r9, lsl #20
    1230:	70910200 	addsvc	r0, r1, r0, lsl #4
    1234:	000a7f0e 	andeq	r7, sl, lr, lsl #30
    1238:	01450100 	mrseq	r0, (UNDEF: 85)
    123c:	00002508 	andeq	r2, r0, r8, lsl #10
    1240:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1244:	00091c0e 	andeq	r1, r9, lr, lsl #24
    1248:	01460100 	mrseq	r0, (UNDEF: 86)
    124c:	0002890e 	andeq	r8, r2, lr, lsl #18
    1250:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1254:	0a221300 	beq	885e5c <__bss_end+0x7587fc>
    1258:	17010000 	strne	r0, [r1, -r0]
    125c:	00690f01 	rsbeq	r0, r9, r1, lsl #30
    1260:	0ff00000 	svceq	0x00f00000	; IMB
    1264:	01140002 	tsteq	r4, r2
    1268:	9c010000 	stcls	0, cr0, [r1], {-0}
    126c:	000a910d 	andeq	r9, sl, sp, lsl #2
    1270:	01170100 	tsteq	r7, r0, lsl #2
    1274:	00028930 	andeq	r8, r2, r0, lsr r9
    1278:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    127c:	0008120d 	andeq	r1, r8, sp, lsl #4
    1280:	01170100 	tsteq	r7, r0, lsl #2
    1284:	00006947 	andeq	r6, r0, r7, asr #18
    1288:	70910200 	addsvc	r0, r1, r0, lsl #4
    128c:	0dd20000 	ldcleq	0, cr0, [r2]
    1290:	00040000 	andeq	r0, r4, r0
    1294:	000005cd 	andeq	r0, r0, sp, asr #11
    1298:	00370104 	eorseq	r0, r7, r4, lsl #2
    129c:	070c0000 	streq	r0, [ip, -r0]
    12a0:	ae00000f 	cdpge	0, 0, cr0, cr0, cr15, {0}
    12a4:	a0000000 	andge	r0, r0, r0
    12a8:	2400021b 	strcs	r0, [r0], #-539	; 0xfffffde5
    12ac:	17000019 	smladne	r0, r9, r0, r0
    12b0:	0200000d 	andeq	r0, r0, #13
    12b4:	06680601 	strbteq	r0, [r8], -r1, lsl #12
    12b8:	25030000 	strcs	r0, [r3, #-0]
    12bc:	02000000 	andeq	r0, r0, #0
    12c0:	06660801 	strbteq	r0, [r6], -r1, lsl #16
    12c4:	02020000 	andeq	r0, r2, #0
    12c8:	00073105 	andeq	r3, r7, r5, lsl #2
    12cc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    12d0:	0000009b 	muleq	r0, fp, r0
    12d4:	80050402 	andhi	r0, r5, r2, lsl #8
    12d8:	04000001 	streq	r0, [r0], #-1
    12dc:	00000046 	andeq	r0, r0, r6, asr #32
    12e0:	54070402 	strpl	r0, [r7], #-1026	; 0xfffffbfe
    12e4:	04000006 	streq	r0, [r0], #-6
    12e8:	00000052 	andeq	r0, r0, r2, asr r0
    12ec:	7b050802 	blvc	1432fc <__bss_end+0x15c9c>
    12f0:	02000001 	andeq	r0, r0, #1
    12f4:	064f0708 	strbeq	r0, [pc], -r8, lsl #14
    12f8:	04050000 	streq	r0, [r5], #-0
    12fc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1300:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1304:	00000659 	andeq	r0, r0, r9, asr r6
    1308:	0007b106 	andeq	fp, r7, r6, lsl #2
    130c:	17d10200 	ldrbne	r0, [r1, r0, lsl #4]
    1310:	00000073 	andeq	r0, r0, r3, ror r0
    1314:	a9040802 	stmdbge	r4, {r1, fp}
    1318:	07000001 	streq	r0, [r0, -r1]
    131c:	08010204 	stmdaeq	r1, {r2, r9}
    1320:	0000066f 	andeq	r0, r0, pc, ror #12
    1324:	0000e206 	andeq	lr, r0, r6, lsl #4
    1328:	10470300 	subne	r0, r7, r0, lsl #6
    132c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1330:	00a80408 	adceq	r0, r8, r8, lsl #8
    1334:	b3090000 	movwlt	r0, #36864	; 0x9000
    1338:	0a000000 	beq	1340 <_start-0xecc0>
    133c:	0000008d 	andeq	r0, r0, sp, lsl #1
    1340:	000c0600 	andeq	r0, ip, r0, lsl #12
    1344:	61040000 	mrsvs	r0, (UNDEF: 4)
    1348:	0000521c 	andeq	r5, r0, ip, lsl r2
    134c:	00b30400 	adcseq	r0, r3, r0, lsl #8
    1350:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    1354:	0500000d 	streq	r0, [r0, #-13]
    1358:	00d01957 	sbcseq	r1, r0, r7, asr r9
    135c:	04080000 	streq	r0, [r8], #-0
    1360:	000000d6 	ldrdeq	r0, [r0], -r6
    1364:	0000460b 	andeq	r4, r0, fp, lsl #12
    1368:	0000e500 	andeq	lr, r0, r0, lsl #10
    136c:	008d0a00 	addeq	r0, sp, r0, lsl #20
    1370:	0c000000 	stceq	0, cr0, [r0], {-0}
    1374:	00000391 	muleq	r0, r1, r3
    1378:	08690614 	stmdaeq	r9!, {r2, r4, r9, sl}^
    137c:	00000134 	andeq	r0, r0, r4, lsr r1
    1380:	0003440d 	andeq	r4, r3, sp, lsl #8
    1384:	0f6b0600 	svceq	0x006b0600
    1388:	000000b3 	strheq	r0, [r0], -r3
    138c:	04ea0d00 	strbteq	r0, [sl], #3328	; 0xd00
    1390:	6c060000 	stcvs	0, cr0, [r6], {-0}
    1394:	0001391f 	andeq	r3, r1, pc, lsl r9
    1398:	090d0400 	stmdbeq	sp, {sl}
    139c:	06000004 	streq	r0, [r0], -r4
    13a0:	01391f6d 	teqeq	r9, sp, ror #30
    13a4:	0d080000 	stceq	0, cr0, [r8, #-0]
    13a8:	00000366 	andeq	r0, r0, r6, ror #6
    13ac:	8d096e06 	stchi	14, cr6, [r9, #-24]	; 0xffffffe8
    13b0:	0c000000 	stceq	0, cr0, [r0], {-0}
    13b4:	00030f0d 	andeq	r0, r3, sp, lsl #30
    13b8:	096f0600 	stmdbeq	pc!, {r9, sl}^	; <UNPREDICTABLE>
    13bc:	0000008d 	andeq	r0, r0, sp, lsl #1
    13c0:	e5040010 	str	r0, [r4, #-16]
    13c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    13c8:	00013404 	andeq	r3, r1, r4, lsl #8
    13cc:	04fd0600 	ldrbteq	r0, [sp], #1536	; 0x600
    13d0:	71060000 	mrsvc	r0, (UNDEF: 6)
    13d4:	0000e51b 	andeq	lr, r0, fp, lsl r5
    13d8:	013f0400 	teqeq	pc, r0, lsl #8
    13dc:	590c0000 	stmdbpl	ip, {}	; <UNPREDICTABLE>
    13e0:	0c000005 	stceq	0, cr0, [r0], {5}
    13e4:	85087306 	strhi	r7, [r8, #-774]	; 0xfffffcfa
    13e8:	0d000001 	stceq	0, cr0, [r0, #-4]
    13ec:	00000344 	andeq	r0, r0, r4, asr #6
    13f0:	b30f7506 	movwlt	r7, #62726	; 0xf506
    13f4:	00000000 	andeq	r0, r0, r0
    13f8:	0004ea0d 	andeq	lr, r4, sp, lsl #20
    13fc:	1e760600 	cdpne	6, 7, cr0, cr6, cr0, {0}
    1400:	00000139 	andeq	r0, r0, r9, lsr r1
    1404:	04090d04 	streq	r0, [r9], #-3332	; 0xfffff2fc
    1408:	77060000 	strvc	r0, [r6, -r0]
    140c:	0001391e 	andeq	r3, r1, lr, lsl r9
    1410:	06000800 	streq	r0, [r0], -r0, lsl #16
    1414:	00000469 	andeq	r0, r0, r9, ror #8
    1418:	50207906 	eorpl	r7, r0, r6, lsl #18
    141c:	04000001 	streq	r0, [r0], #-1
    1420:	00000185 	andeq	r0, r0, r5, lsl #3
    1424:	0005b80c 	andeq	fp, r5, ip, lsl #16
    1428:	7e061400 	cfcpysvc	mvf1, mvf6
    142c:	0001cb10 	andeq	ip, r1, r0, lsl fp
    1430:	04900d00 	ldreq	r0, [r0], #3328	; 0xd00
    1434:	80060000 	andhi	r0, r6, r0
    1438:	00005922 	andeq	r5, r0, r2, lsr #18
    143c:	3c0d0000 	stccc	0, cr0, [sp], {-0}
    1440:	06000003 	streq	r0, [r0], -r3
    1444:	01cb1781 	biceq	r1, fp, r1, lsl #15
    1448:	0d040000 	stceq	0, cr0, [r4, #-0]
    144c:	0000035d 	andeq	r0, r0, sp, asr r3
    1450:	91198206 	tstls	r9, r6, lsl #4
    1454:	08000001 	stmdaeq	r0, {r0}
    1458:	4b040800 	blmi	103460 <ramdisk+0xd5e08>
    145c:	06000001 	streq	r0, [r0], -r1
    1460:	0000073c 	andeq	r0, r0, ip, lsr r7
    1464:	96038306 	strls	r8, [r3], -r6, lsl #6
    1468:	03000001 	movweq	r0, #1
    146c:	000001d1 	ldrdeq	r0, [r0], -r1
    1470:	000c7f06 	andeq	r7, ip, r6, lsl #30
    1474:	10630700 	rsbne	r0, r3, r0, lsl #14
    1478:	0000008d 	andeq	r0, r0, sp, lsl #1
    147c:	00082f0c 	andeq	r2, r8, ip, lsl #30
    1480:	68070800 	stmdavs	r7, {fp}
    1484:	00021610 	andeq	r1, r2, r0, lsl r6
    1488:	08bc0d00 	ldmeq	ip!, {r8, sl, fp}
    148c:	6a070000 	bvs	1c1494 <__bss_end+0x93e34>
    1490:	00004610 	andeq	r4, r0, r0, lsl r6
    1494:	df0d0000 	svcle	0x000d0000
    1498:	07000008 	streq	r0, [r0, -r8]
    149c:	00b3106b 	adcseq	r1, r3, fp, rrx
    14a0:	00040000 	andeq	r0, r4, r0
    14a4:	00090e06 	andeq	r0, r9, r6, lsl #28
    14a8:	036c0700 	cmneq	ip, #0, 14
    14ac:	000001ee 	andeq	r0, r0, lr, ror #3
    14b0:	000e660c 	andeq	r6, lr, ip, lsl #12
    14b4:	71070c00 	tstvc	r7, r0, lsl #24
    14b8:	00025710 	andeq	r5, r2, r0, lsl r7
    14bc:	0fd90d00 	svceq	0x00d90d00
    14c0:	73070000 	movwvc	r0, #28672	; 0x7000
    14c4:	00008d08 	andeq	r8, r0, r8, lsl #26
    14c8:	d10d0000 	mrsle	r0, (UNDEF: 13)
    14cc:	0700000d 	streq	r0, [r0, -sp]
    14d0:	00521074 	subseq	r1, r2, r4, ror r0
    14d4:	0d040000 	stceq	0, cr0, [r4, #-0]
    14d8:	00000b54 	andeq	r0, r0, r4, asr fp
    14dc:	52107507 	andspl	r7, r0, #29360128	; 0x1c00000
    14e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    14e4:	0e1e0600 	cfmsub32eq	mvax0, mvfx0, mvfx14, mvfx0
    14e8:	76070000 	strvc	r0, [r7], -r0
    14ec:	00022203 	andeq	r2, r2, r3, lsl #4
    14f0:	02570300 	subseq	r0, r7, #0, 6
    14f4:	04080000 	streq	r0, [r8], #-0
    14f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    14fc:	00026803 	andeq	r6, r2, r3, lsl #16
    1500:	52040800 	andpl	r0, r4, #0, 16
    1504:	0c000000 	stceq	0, cr0, [r0], {-0}
    1508:	00000ab9 			; <UNDEFINED> instruction: 0x00000ab9
    150c:	10660148 	rsbne	r0, r6, r8, asr #2
    1510:	000002e2 	andeq	r0, r0, r2, ror #5
    1514:	00019c0d 	andeq	r9, r1, sp, lsl #24
    1518:	1b680100 	blne	1a01920 <__bss_end+0x18d42c0>
    151c:	000002e2 	andeq	r0, r0, r2, ror #5
    1520:	05ee0d00 	strbeq	r0, [lr, #3328]!	; 0xd00
    1524:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1528:	00013f0f 	andeq	r3, r1, pc, lsl #30
    152c:	1b0d0400 	blne	342534 <__bss_end+0x214ed4>
    1530:	01000006 	tsteq	r0, r6
    1534:	013f0f6f 	teqeq	pc, pc, ror #30
    1538:	0d180000 	ldceq	0, cr0, [r8, #-0]
    153c:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    1540:	52197001 	andspl	r7, r9, #1
    1544:	2c000000 	stccs	0, cr0, [r0], {-0}
    1548:	000eff0d 	andeq	pc, lr, sp, lsl #30
    154c:	14710100 	ldrbtne	r0, [r1], #-256	; 0xffffff00
    1550:	00000273 	andeq	r0, r0, r3, ror r2
    1554:	0aae0d30 	beq	feb84a1c <_estack+0xf6b64a1c>
    1558:	72010000 	andvc	r0, r1, #0
    155c:	0002e811 	andeq	lr, r2, r1, lsl r8
    1560:	d40d3400 	strle	r3, [sp], #-1024	; 0xfffffc00
    1564:	0100000e 	tsteq	r0, lr
    1568:	00c41486 	sbceq	r1, r4, r6, lsl #9
    156c:	00440000 	subeq	r0, r4, r0
    1570:	00590408 	subseq	r0, r9, r8, lsl #8
    1574:	250e0000 	strcs	r0, [lr, #-0]
    1578:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    157c:	0f000002 	svceq	0x00000002
    1580:	00000073 	andeq	r0, r0, r3, ror r0
    1584:	a106000f 	tstge	r6, pc
    1588:	0100000b 	tsteq	r0, fp
    158c:	02790393 	rsbseq	r0, r9, #1275068418	; 0x4c000002
    1590:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    1594:	10000002 	andne	r0, r0, r2
    1598:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    159c:	21239f01 			; <UNDEFINED> instruction: 0x21239f01
    15a0:	05000003 	streq	r0, [r0, #-3]
    15a4:	02c2d403 	sbceq	sp, r2, #50331648	; 0x3000000
    15a8:	f8040800 			; <UNDEFINED> instruction: 0xf8040800
    15ac:	04000002 	streq	r0, [r0], #-2
    15b0:	0000031b 	andeq	r0, r0, fp, lsl r3
    15b4:	0001d10e 	andeq	sp, r1, lr, lsl #2
    15b8:	00033600 	andeq	r3, r3, r0, lsl #12
    15bc:	00730f00 	rsbseq	r0, r3, r0, lsl #30
    15c0:	00040000 	andeq	r0, r4, r0
    15c4:	000b0911 	andeq	r0, fp, r1, lsl r9
    15c8:	1ea30100 	fdvnes	f0, f3, f0
    15cc:	00000326 	andeq	r0, r0, r6, lsr #6
    15d0:	c2d80305 	sbcsgt	r0, r8, #335544320	; 0x14000000
    15d4:	30110002 	andscc	r0, r1, r2
    15d8:	0100000b 	tsteq	r0, fp
    15dc:	01d11ea4 	bicseq	r1, r1, r4, lsr #29
    15e0:	03050000 	movweq	r0, #20480	; 0x5000
    15e4:	0002c33c 	andeq	ip, r2, ip, lsr r3
    15e8:	000b4211 	andeq	r4, fp, r1, lsl r2
    15ec:	1ea50100 	fdvnes	f0, f5, f0
    15f0:	000001d1 	ldrdeq	r0, [r0], -r1
    15f4:	c3500305 	cmpgt	r0, #335544320	; 0x14000000
    15f8:	ed110002 	ldc	0, cr0, [r1, #-8]
    15fc:	0100000e 	tsteq	r0, lr
    1600:	038429a6 	orreq	r2, r4, #2719744	; 0x298000
    1604:	03050000 	movweq	r0, #20480	; 0x5000
    1608:	0002c364 	andeq	ip, r2, r4, ror #6
    160c:	01d10408 	bicseq	r0, r1, r8, lsl #8
    1610:	7e040000 	cdpvc	0, 0, cr0, cr4, cr0, {0}
    1614:	03000003 	movweq	r0, #3
    1618:	0000037e 	andeq	r0, r0, lr, ror r3
    161c:	000cd711 	andeq	sp, ip, r1, lsl r7
    1620:	29a70100 	stmibcs	r7!, {r8}
    1624:	00000384 	andeq	r0, r0, r4, lsl #7
    1628:	c3680305 	cmngt	r8, #335544320	; 0x14000000
    162c:	0e110002 	cdpeq	0, 1, cr0, cr1, cr2, {0}
    1630:	0100000c 	tsteq	r0, ip
    1634:	01d11ea8 	bicseq	r1, r1, r8, lsr #29
    1638:	03050000 	movweq	r0, #20480	; 0x5000
    163c:	0002c36c 	andeq	ip, r2, ip, ror #6
    1640:	000d2b11 	andeq	r2, sp, r1, lsl fp
    1644:	1fac0100 	svcne	0x00ac0100
    1648:	000001d1 	ldrdeq	r0, [r0], -r1
    164c:	c3800305 	orrgt	r0, r0, #335544320	; 0x14000000
    1650:	99110002 	ldmdbls	r1, {r1}
    1654:	0100000c 	tsteq	r0, ip
    1658:	005939ad 	subseq	r3, r9, sp, lsr #19
    165c:	03050000 	movweq	r0, #20480	; 0x5000
    1660:	0002c394 	muleq	r2, r4, r3
    1664:	000be211 	andeq	lr, fp, r1, lsl r2
    1668:	1fb30100 	svcne	0x00b30100
    166c:	000001d1 	ldrdeq	r0, [r0], -r1
    1670:	c3980305 	orrsgt	r0, r8, #335544320	; 0x14000000
    1674:	55110002 	ldrpl	r0, [r1, #-2]
    1678:	01000010 	tsteq	r0, r0, lsl r0
    167c:	005938be 	ldrheq	r3, [r9], #-142	; 0xffffff72
    1680:	03050000 	movweq	r0, #20480	; 0x5000
    1684:	0002c3ac 	andeq	ip, r2, ip, lsr #7
    1688:	000ca811 	andeq	sl, ip, r1, lsl r8
    168c:	2ebf0100 	frdcse	f0, f7, f0
    1690:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1694:	c3b00305 	movsgt	r0, #335544320	; 0x14000000
    1698:	5d110002 	ldcpl	0, cr0, [r1, #-8]
    169c:	0100000c 	tsteq	r0, ip
    16a0:	00522fc0 	subseq	r2, r2, r0, asr #31
    16a4:	03050000 	movweq	r0, #20480	; 0x5000
    16a8:	0002c3b4 			; <UNDEFINED> instruction: 0x0002c3b4
    16ac:	000ae411 	andeq	lr, sl, r1, lsl r4
    16b0:	38c10100 	stmiacc	r1, {r8}^
    16b4:	00000059 	andeq	r0, r0, r9, asr r0
    16b8:	c3b80305 			; <UNDEFINED> instruction: 0xc3b80305
    16bc:	f7110002 			; <UNDEFINED> instruction: 0xf7110002
    16c0:	0100000a 	tsteq	r0, sl
    16c4:	004d36c2 	subeq	r3, sp, r2, asr #13
    16c8:	03050000 	movweq	r0, #20480	; 0x5000
    16cc:	0002c3bc 			; <UNDEFINED> instruction: 0x0002c3bc
    16d0:	00108111 	andseq	r8, r0, r1, lsl r1
    16d4:	38c30100 	stmiacc	r3, {r8}^
    16d8:	00000059 	andeq	r0, r0, r9, asr r0
    16dc:	c3c00305 	bicgt	r0, r0, #335544320	; 0x14000000
    16e0:	93110002 	tstls	r1, #2
    16e4:	0100000b 	tsteq	r0, fp
    16e8:	005938c4 	subseq	r3, r9, r4, asr #17
    16ec:	03050000 	movweq	r0, #20480	; 0x5000
    16f0:	0002c3c4 	andeq	ip, r2, r4, asr #7
    16f4:	000c5011 	andeq	r5, ip, r1, lsl r0
    16f8:	2fc50100 	svccs	0x00c50100
    16fc:	0000004d 	andeq	r0, r0, sp, asr #32
    1700:	c3c80305 	bicgt	r0, r8, #335544320	; 0x14000000
    1704:	c4110002 	ldrgt	r0, [r1], #-2
    1708:	0100000e 	tsteq	r0, lr
    170c:	004d2fc6 	subeq	r2, sp, r6, asr #31
    1710:	03050000 	movweq	r0, #20480	; 0x5000
    1714:	0002c3cc 	andeq	ip, r2, ip, asr #7
    1718:	000e0011 	andeq	r0, lr, r1, lsl r0
    171c:	2fc70100 	svccs	0x00c70100
    1720:	00000052 	andeq	r0, r0, r2, asr r0
    1724:	c3d00305 	bicsgt	r0, r0, #335544320	; 0x14000000
    1728:	bc110002 	ldclt	0, cr0, [r1], {2}
    172c:	0100000d 	tsteq	r0, sp
    1730:	00b325c8 	adcseq	r2, r3, r8, asr #11
    1734:	03050000 	movweq	r0, #20480	; 0x5000
    1738:	0002c240 	andeq	ip, r2, r0, asr #4
    173c:	000ff712 	andeq	pc, pc, r2, lsl r7	; <UNPREDICTABLE>
    1740:	09290100 	stmdbeq	r9!, {r8}
    1744:	0234900e 	eorseq	r9, r4, #14
    1748:	00003400 	andeq	r3, r0, r0, lsl #8
    174c:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    1750:	13000004 	movwne	r0, #4
    1754:	0000107b 	andeq	r1, r0, fp, ror r0
    1758:	24092901 	strcs	r2, [r9], #-2305	; 0xfffff6ff
    175c:	0000031b 	andeq	r0, r0, fp, lsl r3
    1760:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1764:	000b6114 	andeq	r6, fp, r4, lsl r1
    1768:	086a0100 	stmdaeq	sl!, {r8}^
    176c:	00031b10 	andeq	r1, r3, r0, lsl fp
    1770:	0233e000 	eorseq	lr, r3, #0
    1774:	0000b000 	andeq	fp, r0, r0
    1778:	229c0100 	addscs	r0, ip, #0, 2
    177c:	13000005 	movwne	r0, #5
    1780:	00000bd5 	ldrdeq	r0, [r0], -r5
    1784:	37086a01 	strcc	r6, [r8, -r1, lsl #20]
    1788:	0000003f 	andeq	r0, r0, pc, lsr r0
    178c:	136e9102 	cmnne	lr, #-2147483648	; 0x80000000
    1790:	00001096 	muleq	r0, r6, r0
    1794:	55086a01 	strpl	r6, [r8, #-2561]	; 0xfffff5ff
    1798:	00000273 	andeq	r0, r0, r3, ror r2
    179c:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    17a0:	00000d96 	muleq	r0, r6, sp
    17a4:	09086c01 	stmdbeq	r8, {r0, sl, fp, sp, lr}
    17a8:	0000031b 	andeq	r0, r0, fp, lsl r3
    17ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17b0:	00103612 	andseq	r3, r0, r2, lsl r6
    17b4:	08500100 	ldmdaeq	r0, {r8}^
    17b8:	0233280d 	eorseq	r2, r3, #851968	; 0xd0000
    17bc:	0000b800 	andeq	fp, r0, r0, lsl #16
    17c0:	4a9c0100 	bmi	fe701bc8 <_estack+0xf66e1bc8>
    17c4:	13000005 	movwne	r0, #5
    17c8:	0000051a 	andeq	r0, r0, sl, lsl r5
    17cc:	3a085001 	bcc	2157d8 <__bss_end+0xe8178>
    17d0:	000000b3 	strheq	r0, [r0], -r3
    17d4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17d8:	0010d612 	andseq	sp, r0, r2, lsl r6
    17dc:	082d0100 	stmdaeq	sp!, {r8}
    17e0:	02326c0d 	eorseq	r6, r2, #3328	; 0xd00
    17e4:	0000bc00 	andeq	fp, r0, r0, lsl #24
    17e8:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    17ec:	16000005 	strne	r0, [r0], -r5
    17f0:	00023278 	andeq	r3, r2, r8, ror r2
    17f4:	00000098 	muleq	r0, r8, r0
    17f8:	000d7a15 	andeq	r7, sp, r5, lsl sl
    17fc:	08310100 	ldmdaeq	r1!, {r8}
    1800:	00004611 	andeq	r4, r0, r1, lsl r6
    1804:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1808:	0232b816 	eorseq	fp, r2, #1441792	; 0x160000
    180c:	00005800 	andeq	r5, r0, r0, lsl #16
    1810:	107b1500 	rsbsne	r1, fp, r0, lsl #10
    1814:	3d010000 	stccc	0, cr0, [r1, #-0]
    1818:	031b0d08 	tsteq	fp, #8, 26	; 0x200
    181c:	91020000 	mrsls	r0, (UNDEF: 2)
    1820:	00000070 	andeq	r0, r0, r0, ror r0
    1824:	0010b112 	andseq	fp, r0, r2, lsl r1
    1828:	080d0100 	stmdaeq	sp, {r8}
    182c:	0231ac0d 	eorseq	sl, r1, #3328	; 0xd00
    1830:	0000c000 	andeq	ip, r0, r0
    1834:	be9c0100 	fmllte	f0, f4, f0
    1838:	15000005 	strne	r0, [r0, #-5]
    183c:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    1840:	18080f01 	stmdane	r8, {r0, r8, r9, sl, fp}
    1844:	00000052 	andeq	r0, r0, r2, asr r0
    1848:	00749102 	rsbseq	r9, r4, r2, lsl #2
    184c:	000e4c12 	andeq	r4, lr, r2, lsl ip
    1850:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    1854:	0230ec0d 	eorseq	lr, r0, #3328	; 0xd00
    1858:	0000c000 	andeq	ip, r0, r0
    185c:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    1860:	13000006 	movwne	r0, #6
    1864:	0000107b 	andeq	r1, r0, fp, ror r0
    1868:	3007b701 	andcc	fp, r7, r1, lsl #14
    186c:	0000031b 	andeq	r0, r0, fp, lsl r3
    1870:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    1874:	00000def 	andeq	r0, r0, pc, ror #27
    1878:	5107b701 	tstpl	r7, r1, lsl #14
    187c:	0000026e 	andeq	r0, r0, lr, ror #4
    1880:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    1884:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    1888:	7007b701 	andvc	fp, r7, r1, lsl #14
    188c:	00000052 	andeq	r0, r0, r2, asr r0
    1890:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1894:	0000102d 	andeq	r1, r0, sp, lsr #32
    1898:	9807b701 	stmdals	r7, {r0, r8, r9, sl, ip, sp, pc}
    189c:	0000062c 	andeq	r0, r0, ip, lsr #12
    18a0:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    18a4:	00000bd5 	ldrdeq	r0, [r0], -r5
    18a8:	b107b701 	tstlt	r7, r1, lsl #14
    18ac:	0000003f 	andeq	r0, r0, pc, lsr r0
    18b0:	00009102 	andeq	r9, r0, r2, lsl #2
    18b4:	02630408 	rsbeq	r0, r3, #8, 8	; 0x8000000
    18b8:	26030000 	strcs	r0, [r3], -r0
    18bc:	12000006 	andne	r0, r0, #6
    18c0:	00000d5d 	andeq	r0, r0, sp, asr sp
    18c4:	08077601 	stmdaeq	r7, {r0, r9, sl, ip, sp, lr}
    18c8:	000230bc 	strheq	r3, [r2], -ip
    18cc:	00000030 	andeq	r0, r0, r0, lsr r0
    18d0:	06599c01 	ldrbeq	r9, [r9], -r1, lsl #24
    18d4:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
    18d8:	01000001 	tsteq	r0, r1
    18dc:	8d080776 	stchi	7, cr0, [r8, #-472]	; 0xfffffe28
    18e0:	02000000 	andeq	r0, r0, #0
    18e4:	17007491 			; <UNDEFINED> instruction: 0x17007491
    18e8:	00000fad 	andeq	r0, r0, sp, lsr #31
    18ec:	06074201 	streq	r4, [r7], -r1, lsl #4
    18f0:	00023094 	muleq	r2, r4, r0
    18f4:	00000028 	andeq	r0, r0, r8, lsr #32
    18f8:	53189c01 	tstpl	r8, #256	; 0x100
    18fc:	0100000f 	tsteq	r0, pc
    1900:	460f0714 			; <UNDEFINED> instruction: 0x460f0714
    1904:	a0000000 	andge	r0, r0, r0
    1908:	f400022f 	vst1.8	{d0-d3}, [r0 :128]
    190c:	01000000 	mrseq	r0, (UNDEF: 0)
    1910:	0006b89c 	muleq	r6, ip, r8
    1914:	0df61300 	ldcleq	3, cr1, [r6]
    1918:	14010000 	strne	r0, [r1], #-0
    191c:	06be3a07 	ldrteq	r3, [lr], r7, lsl #20
    1920:	91020000 	mrsls	r0, (UNDEF: 2)
    1924:	0c8b136c 	stceq	3, cr1, [fp], {108}	; 0x6c
    1928:	14010000 	strne	r0, [r1], #-0
    192c:	06c95a07 	strbeq	r5, [r9], r7, lsl #20
    1930:	91020000 	mrsls	r0, (UNDEF: 2)
    1934:	091c1568 	ldmdbeq	ip, {r3, r5, r6, r8, sl, ip}
    1938:	16010000 	strne	r0, [r1], -r0
    193c:	00460f07 	subeq	r0, r6, r7, lsl #30
    1940:	91020000 	mrsls	r0, (UNDEF: 2)
    1944:	04080074 	streq	r0, [r8], #-116	; 0xffffff8c
    1948:	00000216 	andeq	r0, r0, r6, lsl r2
    194c:	0006b803 	andeq	fp, r6, r3, lsl #16
    1950:	b3040800 	movwlt	r0, #18432	; 0x4800
    1954:	03000000 	movweq	r0, #0
    1958:	000006c3 	andeq	r0, r0, r3, asr #13
    195c:	000b1b19 	andeq	r1, fp, r9, lsl fp
    1960:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    1964:	022f5806 	eoreq	r5, pc, #393216	; 0x60000
    1968:	00004800 	andeq	r4, r0, r0, lsl #16
    196c:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    1970:	13000006 	movwne	r0, #6
    1974:	00000df6 	strdeq	r0, [r0], -r6
    1978:	31070c01 	tstcc	r7, r1, lsl #24
    197c:	000006be 			; <UNDEFINED> instruction: 0x000006be
    1980:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1984:	000d4418 	andeq	r4, sp, r8, lsl r4
    1988:	06d90100 	ldrbeq	r0, [r9], r0, lsl #2
    198c:	00004616 	andeq	r4, r0, r6, lsl r6
    1990:	022e4000 	eoreq	r4, lr, #0
    1994:	00011800 	andeq	r1, r1, r0, lsl #16
    1998:	429c0100 	addsmi	r0, ip, #0, 2
    199c:	13000007 	movwne	r0, #7
    19a0:	000004f1 	strdeq	r0, [r0], -r1
    19a4:	4406d901 	strmi	sp, [r6], #-2305	; 0xfffff6ff
    19a8:	00000748 	andeq	r0, r0, r8, asr #14
    19ac:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    19b0:	00000bc6 	andeq	r0, r0, r6, asr #23
    19b4:	0906db01 	stmdbeq	r6, {r0, r8, r9, fp, ip, lr, pc}
    19b8:	0000031b 	andeq	r0, r0, fp, lsl r3
    19bc:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    19c0:	0000091c 	andeq	r0, r0, ip, lsl r9
    19c4:	0f06dc01 	svceq	0x0006dc01
    19c8:	00000046 	andeq	r0, r0, r6, asr #32
    19cc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19d0:	01dd0408 	bicseq	r0, sp, r8, lsl #8
    19d4:	42030000 	andmi	r0, r3, #0
    19d8:	1a000007 	bne	19fc <_start-0xe604>
    19dc:	00000cf1 	strdeq	r0, [r0], -r1
    19e0:	06068701 	streq	r8, [r6], -r1, lsl #14
    19e4:	00022da4 	andeq	r2, r2, r4, lsr #27
    19e8:	0000009c 	muleq	r0, ip, r0
    19ec:	07959c01 	ldreq	r9, [r5, r1, lsl #24]
    19f0:	f1130000 			; <UNDEFINED> instruction: 0xf1130000
    19f4:	01000004 	tsteq	r0, r4
    19f8:	48310687 	ldmdami	r1!, {r0, r1, r2, r7, r9, sl}
    19fc:	02000007 	andeq	r0, r0, #7
    1a00:	8c136c91 	ldchi	12, cr6, [r3], {145}	; 0x91
    1a04:	0100000c 	tsteq	r0, ip
    1a08:	b34b0687 	movtlt	r0, #46727	; 0xb687
    1a0c:	02000000 	andeq	r0, r0, #0
    1a10:	1a156891 	bne	55bc5c <__bss_end+0x42e5fc>
    1a14:	01000005 	tsteq	r0, r5
    1a18:	b30e0689 	movwlt	r0, #59017	; 0xe689
    1a1c:	02000000 	andeq	r0, r0, #0
    1a20:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    1a24:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    1a28:	06064b01 	streq	r4, [r6], -r1, lsl #22
    1a2c:	00022c9c 	muleq	r2, ip, ip
    1a30:	00000108 	andeq	r0, r0, r8, lsl #2
    1a34:	07c79c01 	strbeq	r9, [r7, r1, lsl #24]
    1a38:	08160000 	ldmdaeq	r6, {}	; <UNPREDICTABLE>
    1a3c:	7800022d 	stmdavc	r0, {r0, r2, r3, r5, r9}
    1a40:	15000000 	strne	r0, [r0, #-0]
    1a44:	0000039c 	muleq	r0, ip, r3
    1a48:	03067c01 	movweq	r7, #27649	; 0x6c01
    1a4c:	00000389 	andeq	r0, r0, r9, lsl #7
    1a50:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1a54:	0e811800 	cdpeq	8, 8, cr1, cr1, cr0, {0}
    1a58:	2d010000 	stccs	0, cr0, [r1, #-0]
    1a5c:	00461006 	subeq	r1, r6, r6
    1a60:	2c200000 	stccs	0, cr0, [r0], #-0
    1a64:	007c0002 	rsbseq	r0, ip, r2
    1a68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a6c:	00000823 	andeq	r0, r0, r3, lsr #16
    1a70:	000d2513 	andeq	r2, sp, r3, lsl r5
    1a74:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    1a78:	0001e23a 	andeq	lr, r1, sl, lsr r2
    1a7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a80:	00102113 	andseq	r2, r0, r3, lsl r1
    1a84:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    1a88:	00008d47 	andeq	r8, r0, r7, asr #26
    1a8c:	68910200 	ldmvs	r1, {r9}
    1a90:	00107c15 	andseq	r7, r0, r5, lsl ip
    1a94:	062f0100 	strteq	r0, [pc], -r0, lsl #2
    1a98:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1a9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1aa0:	00091c15 	andeq	r1, r9, r5, lsl ip
    1aa4:	06300100 	ldrteq	r0, [r0], -r0, lsl #2
    1aa8:	00004610 	andeq	r4, r0, r0, lsl r6
    1aac:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ab0:	0c351800 	ldceq	8, cr1, [r5], #-0
    1ab4:	10010000 	andne	r0, r1, r0
    1ab8:	00c41306 	sbceq	r1, r4, r6, lsl #6
    1abc:	2bc40000 	blcs	ff101ac4 <_estack+0xf70e1ac4>
    1ac0:	005c0002 	subseq	r0, ip, r2
    1ac4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ac8:	0000086f 	andeq	r0, r0, pc, ror #16
    1acc:	000d2513 	andeq	r2, sp, r3, lsl r5
    1ad0:	06100100 	ldreq	r0, [r0], -r0, lsl #2
    1ad4:	0001e23b 	andeq	lr, r1, fp, lsr r2
    1ad8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1adc:	00107c15 	andseq	r7, r0, r5, lsl ip
    1ae0:	06120100 	ldreq	r0, [r2], -r0, lsl #2
    1ae4:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1ae8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1aec:	00091c15 	andeq	r1, r9, r5, lsl ip
    1af0:	06130100 	ldreq	r0, [r3], -r0, lsl #2
    1af4:	0000c413 	andeq	ip, r0, r3, lsl r4
    1af8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1afc:	0b781a00 	bleq	1e08304 <__bss_end+0x1cdaca4>
    1b00:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    1b04:	2b680705 	blcs	1a03720 <__bss_end+0x18d60c0>
    1b08:	005c0002 	subseq	r0, ip, r2
    1b0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b10:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    1b14:	000d2513 	andeq	r2, sp, r3, lsl r5
    1b18:	05f60100 	ldrbeq	r0, [r6, #256]!	; 0x100
    1b1c:	0001e22f 	andeq	lr, r1, pc, lsr #4
    1b20:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1b24:	000d8713 	andeq	r8, sp, r3, lsl r7
    1b28:	05f60100 	ldrbeq	r0, [r6, #256]!	; 0x100
    1b2c:	0000c447 	andeq	ip, r0, r7, asr #8
    1b30:	68910200 	ldmvs	r1, {r9}
    1b34:	00107c15 	andseq	r7, r0, r5, lsl ip
    1b38:	05f80100 	ldrbeq	r0, [r8, #256]!	; 0x100
    1b3c:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1b40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b44:	0e2c1a00 	vmuleq.f32	s2, s24, s0
    1b48:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    1b4c:	294c0605 	stmdbcs	ip, {r0, r2, r9, sl}^
    1b50:	021c0002 	andseq	r0, ip, #2
    1b54:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b58:	00000917 	andeq	r0, r0, r7, lsl r9
    1b5c:	00107b15 	andseq	r7, r0, r5, lsl fp
    1b60:	05ab0100 	streq	r0, [fp, #256]!	; 0x100
    1b64:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1b68:	70910200 	addsvc	r0, r1, r0, lsl #4
    1b6c:	02298c1b 	eoreq	r8, r9, #6912	; 0x1b00
    1b70:	00008400 	andeq	r8, r0, r0, lsl #8
    1b74:	0008fc00 	andeq	pc, r8, r0, lsl #24
    1b78:	02ed1500 	rsceq	r1, sp, #0, 10
    1b7c:	b5010000 	strlt	r0, [r1, #-0]
    1b80:	037e0b05 	cmneq	lr, #5120	; 0x1400
    1b84:	91020000 	mrsls	r0, (UNDEF: 2)
    1b88:	10160074 	andsne	r0, r6, r4, ror r0
    1b8c:	1000022a 	andne	r0, r0, sl, lsr #4
    1b90:	15000001 	strne	r0, [r0, #-1]
    1b94:	00000344 	andeq	r0, r0, r4, asr #6
    1b98:	0305d601 	movweq	sp, #22017	; 0x5601
    1b9c:	000000b3 	strheq	r0, [r0], -r3
    1ba0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1ba4:	0acd1c00 	beq	ff348bac <_estack+0xf7328bac>
    1ba8:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    1bac:	00521804 	subseq	r1, r2, r4, lsl #16
    1bb0:	29280000 	stmdbcs	r8!, {}	; <UNPREDICTABLE>
    1bb4:	00240002 	eoreq	r0, r4, r2
    1bb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bbc:	000bf51d 	andeq	pc, fp, sp, lsl r5	; <UNPREDICTABLE>
    1bc0:	04ea0100 	strbteq	r0, [sl], #256	; 0x100
    1bc4:	0000b30e 	andeq	fp, r0, lr, lsl #6
    1bc8:	0228f000 	eoreq	pc, r8, #0
    1bcc:	00003800 	andeq	r3, r0, r0, lsl #16
    1bd0:	6a9c0100 	bvs	fe701fd8 <_estack+0xf66e1fd8>
    1bd4:	15000009 	strne	r0, [r0, #-9]
    1bd8:	0000091c 	andeq	r0, r0, ip, lsl r9
    1bdc:	0e04ec01 	cdpeq	12, 0, cr14, cr4, cr1, {0}
    1be0:	000000b3 	strheq	r0, [r0], -r3
    1be4:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    1be8:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1bec:	1804ed01 	stmdane	r4, {r0, r8, sl, fp, sp, lr, pc}
    1bf0:	00000052 	andeq	r0, r0, r2, asr r0
    1bf4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1bf8:	000daa18 	andeq	sl, sp, r8, lsl sl
    1bfc:	04db0100 	ldrbeq	r0, [fp], #256	; 0x100
    1c00:	0000b30e 	andeq	fp, r0, lr, lsl #6
    1c04:	0228bc00 	eoreq	fp, r8, #0, 24
    1c08:	00003400 	andeq	r3, r0, r0, lsl #8
    1c0c:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    1c10:	15000009 	strne	r0, [r0, #-9]
    1c14:	00000fbe 			; <UNDEFINED> instruction: 0x00000fbe
    1c18:	0e04dd01 	cdpeq	13, 0, cr13, cr4, cr1, {0}
    1c1c:	000000b3 	strheq	r0, [r0], -r3
    1c20:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1c24:	000ede18 	andeq	sp, lr, r8, lsl lr
    1c28:	04840100 	streq	r0, [r4], #256	; 0x100
    1c2c:	00004616 	andeq	r4, r0, r6, lsl r6
    1c30:	02271800 	eoreq	r1, r7, #0, 16
    1c34:	0001a400 	andeq	sl, r1, r0, lsl #8
    1c38:	eb9c0100 	bl	fe702040 <_estack+0xf66e2040>
    1c3c:	15000009 	strne	r0, [r0, #-9]
    1c40:	0000107b 	andeq	r1, r0, fp, ror r0
    1c44:	12048601 	andne	r8, r4, #1048576	; 0x100000
    1c48:	0000031b 	andeq	r0, r0, fp, lsl r3
    1c4c:	11155401 	tstne	r5, r1, lsl #8
    1c50:	01000010 	tsteq	r0, r0, lsl r0
    1c54:	46160487 	ldrmi	r0, [r6], -r7, lsl #9
    1c58:	02000000 	andeq	r0, r0, #0
    1c5c:	64166c91 	ldrvs	r6, [r6], #-3217	; 0xfffff36f
    1c60:	24000227 	strcs	r0, [r0], #-551	; 0xfffffdd9
    1c64:	15000001 	strne	r0, [r0, #-1]
    1c68:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    1c6c:	13049a01 	movwne	r9, #18945	; 0x4a01
    1c70:	00000046 	andeq	r0, r0, r6, asr #32
    1c74:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1c78:	0c6f1700 	stcleq	7, cr1, [pc], #-0	; 1c80 <_start-0xe380>
    1c7c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    1c80:	26e80604 	strbtcs	r0, [r8], r4, lsl #12
    1c84:	00300002 	eorseq	r0, r0, r2
    1c88:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c8c:	000cb31e 	andeq	fp, ip, lr, lsl r3
    1c90:	04710100 	ldrbteq	r0, [r1], #-256	; 0xffffff00
    1c94:	0226b006 	eoreq	fp, r6, #6
    1c98:	00003800 	andeq	r3, r0, r0, lsl #16
    1c9c:	1a9c0100 	bne	fe7020a4 <_estack+0xf66e20a4>
    1ca0:	00000fc5 	andeq	r0, r0, r5, asr #31
    1ca4:	06043001 	streq	r3, [r4], -r1
    1ca8:	00022614 	andeq	r2, r2, r4, lsl r6
    1cac:	0000009c 	muleq	r0, ip, r0
    1cb0:	0a399c01 	beq	e68cbc <__bss_end+0xd3b65c>
    1cb4:	1c150000 	ldcne	0, cr0, [r5], {-0}
    1cb8:	01000009 	tsteq	r0, r9
    1cbc:	460f0432 			; <UNDEFINED> instruction: 0x460f0432
    1cc0:	02000000 	andeq	r0, r0, #0
    1cc4:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    1cc8:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    1ccc:	10040201 	andne	r0, r4, r1, lsl #4
    1cd0:	00000046 	andeq	r0, r0, r6, asr #32
    1cd4:	000224f8 	strdeq	r2, [r2], -r8
    1cd8:	0000011c 	andeq	r0, r0, ip, lsl r1
    1cdc:	0a959c01 	beq	fe568ce8 <_estack+0xf6548ce8>
    1ce0:	a8130000 	ldmdage	r3, {}	; <UNPREDICTABLE>
    1ce4:	0100000b 	tsteq	r0, fp
    1ce8:	e2300402 	eors	r0, r0, #33554432	; 0x2000000
    1cec:	02000001 	andeq	r0, r0, #1
    1cf0:	b7156491 			; <UNDEFINED> instruction: 0xb7156491
    1cf4:	0100000b 	tsteq	r0, fp
    1cf8:	46100404 	ldrmi	r0, [r0], -r4, lsl #8
    1cfc:	02000000 	andeq	r0, r0, #0
    1d00:	7b157491 	blvc	55ef4c <__bss_end+0x4318ec>
    1d04:	01000010 	tsteq	r0, r0, lsl r0
    1d08:	1b0a0405 	blne	282d24 <__bss_end+0x1556c4>
    1d0c:	02000003 	andeq	r0, r0, #3
    1d10:	f0157091 			; <UNDEFINED> instruction: 0xf0157091
    1d14:	01000009 	tsteq	r0, r9
    1d18:	52190406 	andspl	r0, r9, #100663296	; 0x6000000
    1d1c:	02000000 	andeq	r0, r0, #0
    1d20:	1a006c91 	bne	1cf6c <__module_entries_end+0xcec8>
    1d24:	000010a5 	andeq	r1, r0, r5, lsr #1
    1d28:	0703d501 	streq	sp, [r3, -r1, lsl #10]
    1d2c:	00022400 	andeq	r2, r2, r0, lsl #8
    1d30:	000000f8 	strdeq	r0, [r0], -r8
    1d34:	0acd9c01 	beq	ff368d40 <_estack+0xf7348d40>
    1d38:	a8130000 	ldmdage	r3, {}	; <UNPREDICTABLE>
    1d3c:	0100000b 	tsteq	r0, fp
    1d40:	e22003d5 	eor	r0, r0, #1409286147	; 0x54000003
    1d44:	02000001 	andeq	r0, r0, #1
    1d48:	7b156c91 	blvc	55cf94 <__bss_end+0x42f934>
    1d4c:	01000010 	tsteq	r0, r0, lsl r0
    1d50:	1b0a03d7 	blne	282cb4 <__bss_end+0x155654>
    1d54:	02000003 	andeq	r0, r0, #3
    1d58:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    1d5c:	00000c20 	andeq	r0, r0, r0, lsr #24
    1d60:	1703b301 	strne	fp, [r3, -r1, lsl #6]
    1d64:	00000046 	andeq	r0, r0, r6, asr #32
    1d68:	00022384 	andeq	r2, r2, r4, lsl #7
    1d6c:	0000007c 	andeq	r0, r0, ip, ror r0
    1d70:	0b199c01 	bleq	668d7c <__bss_end+0x53b71c>
    1d74:	25130000 	ldrcs	r0, [r3, #-0]
    1d78:	0100000d 	tsteq	r0, sp
    1d7c:	e23903b3 	eors	r0, r9, #-872415230	; 0xcc000002
    1d80:	02000001 	andeq	r0, r0, #1
    1d84:	1c156c91 	ldcne	12, cr6, [r5], {145}	; 0x91
    1d88:	01000009 	tsteq	r0, r9
    1d8c:	461003b5 			; <UNDEFINED> instruction: 0x461003b5
    1d90:	02000000 	andeq	r0, r0, #0
    1d94:	7b157491 	blvc	55efe0 <__bss_end+0x431980>
    1d98:	01000010 	tsteq	r0, r0, lsl r0
    1d9c:	1f1703b6 	svcne	0x001703b6
    1da0:	0200000b 	andeq	r0, r0, #11
    1da4:	08007091 	stmdaeq	r0, {r0, r4, r7, ip, sp, lr}
    1da8:	00030404 	andeq	r0, r3, r4, lsl #8
    1dac:	0b190300 	bleq	6429b4 <__bss_end+0x515354>
    1db0:	041a0000 	ldreq	r0, [sl], #-0
    1db4:	01000010 	tsteq	r0, r0, lsl r0
    1db8:	80070373 	andhi	r0, r7, r3, ror r3
    1dbc:	04000222 	streq	r0, [r0], #-546	; 0xfffffdde
    1dc0:	01000001 	tsteq	r0, r1
    1dc4:	000b5c9c 	muleq	fp, ip, ip
    1dc8:	0f681300 	svceq	0x00681300
    1dcc:	73010000 	movwvc	r0, #4096	; 0x1000
    1dd0:	01e22103 	mvneq	r2, r3, lsl #2
    1dd4:	91020000 	mrsls	r0, (UNDEF: 2)
    1dd8:	107b156c 	rsbsne	r1, fp, ip, ror #10
    1ddc:	75010000 	strvc	r0, [r1, #-0]
    1de0:	031b0a03 	tsteq	fp, #12288	; 0x3000
    1de4:	91020000 	mrsls	r0, (UNDEF: 2)
    1de8:	0d1a0074 	ldceq	0, cr0, [sl, #-464]	; 0xfffffe30
    1dec:	0100000e 	tsteq	r0, lr
    1df0:	d8070307 	stmdale	r7, {r0, r1, r2, r8, r9}
    1df4:	a8000220 	stmdage	r0, {r5, r9}
    1df8:	01000001 	tsteq	r0, r1
    1dfc:	000bc49c 	muleq	fp, ip, r4
    1e00:	0d241300 	stceq	3, cr1, [r4, #-0]
    1e04:	07010000 	streq	r0, [r1, -r0]
    1e08:	01e22503 	mvneq	r2, r3, lsl #10
    1e0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e10:	0de11364 	stcleq	3, cr1, [r1, #400]!	; 0x190
    1e14:	07010000 	streq	r0, [r1, -r0]
    1e18:	00524403 	subseq	r4, r2, r3, lsl #8
    1e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e20:	107b1560 	rsbsne	r1, fp, r0, ror #10
    1e24:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1e28:	031b0a03 	tsteq	fp, #12288	; 0x3000
    1e2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e30:	0d121570 	cfldr32eq	mvfx1, [r2, #-448]	; 0xfffffe40
    1e34:	0a010000 	beq	41e3c <ramdisk+0x147e4>
    1e38:	00521903 	subseq	r1, r2, r3, lsl #18
    1e3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e40:	0bb7156c 	bleq	fedc73f8 <_estack+0xf6da73f8>
    1e44:	0b010000 	bleq	41e4c <ramdisk+0x147f4>
    1e48:	00461003 	subeq	r1, r6, r3
    1e4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e50:	c5180074 	ldrgt	r0, [r8, #-116]	; 0xffffff8c
    1e54:	0100000c 	tsteq	r0, ip
    1e58:	521902f1 	andspl	r0, r9, #268435471	; 0x1000000f
    1e5c:	80000000 	andhi	r0, r0, r0
    1e60:	58000220 	stmdapl	r0, {r5, r9}
    1e64:	01000000 	mrseq	r0, (UNDEF: 0)
    1e68:	000c109c 	muleq	ip, ip, r0
    1e6c:	0d241300 	stceq	3, cr1, [r4, #-0]
    1e70:	f1010000 	setend	le
    1e74:	01e23802 	mvneq	r3, r2, lsl #16
    1e78:	91020000 	mrsls	r0, (UNDEF: 2)
    1e7c:	107b156c 	rsbsne	r1, fp, ip, ror #10
    1e80:	f3010000 	vhadd.u8	d0, d1, d0
    1e84:	031b0a02 	tsteq	fp, #8192	; 0x2000
    1e88:	91020000 	mrsls	r0, (UNDEF: 2)
    1e8c:	091b1574 	ldmdbeq	fp, {r2, r4, r5, r6, r8, sl, ip}
    1e90:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    1e94:	00521902 	subseq	r1, r2, r2, lsl #18
    1e98:	91020000 	mrsls	r0, (UNDEF: 2)
    1e9c:	071a0070 			; <UNDEFINED> instruction: 0x071a0070
    1ea0:	0100000d 	tsteq	r0, sp
    1ea4:	fc0702c3 	stc2	2, cr0, [r7], {195}	; 0xc3
    1ea8:	8400021f 	strhi	r0, [r0], #-543	; 0xfffffde1
    1eac:	01000000 	mrseq	r0, (UNDEF: 0)
    1eb0:	000c589c 	muleq	ip, ip, r8
    1eb4:	034f1300 	movteq	r1, #62208	; 0xf300
    1eb8:	c3010000 	movwgt	r0, #4096	; 0x1000
    1ebc:	00b32002 	adcseq	r2, r3, r2
    1ec0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ec4:	051a156c 	ldreq	r1, [sl, #-1388]	; 0xfffffa94
    1ec8:	c5010000 	strgt	r0, [r1, #-0]
    1ecc:	00b30f02 	adcseq	r0, r3, r2, lsl #30
    1ed0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ed4:	10111570 	andsne	r1, r1, r0, ror r5
    1ed8:	c6010000 	strgt	r0, [r1], -r0
    1edc:	00461702 	subeq	r1, r6, r2, lsl #14
    1ee0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ee4:	e71a0074 			; <UNDEFINED> instruction: 0xe71a0074
    1ee8:	0100000f 	tsteq	r0, pc
    1eec:	ec070282 	sfm	f0, 4, [r7], {130}	; 0x82
    1ef0:	1000021e 	andne	r0, r0, lr, lsl r2
    1ef4:	01000001 	tsteq	r0, r1
    1ef8:	000cc09c 	muleq	ip, ip, r0
    1efc:	0f781300 	svceq	0x00781300
    1f00:	82010000 	andhi	r0, r1, #0
    1f04:	06c92d02 	strbeq	r2, [r9], r2, lsl #26
    1f08:	91020000 	mrsls	r0, (UNDEF: 2)
    1f0c:	106c1364 	rsbne	r1, ip, r4, ror #6
    1f10:	82010000 	andhi	r0, r1, #0
    1f14:	00b34e02 	adcseq	r4, r3, r2, lsl #28
    1f18:	91020000 	mrsls	r0, (UNDEF: 2)
    1f1c:	051a1560 	ldreq	r1, [sl, #-1376]	; 0xfffffaa0
    1f20:	84010000 	strhi	r0, [r1], #-0
    1f24:	00b30f02 	adcseq	r0, r3, r2, lsl #30
    1f28:	91020000 	mrsls	r0, (UNDEF: 2)
    1f2c:	10111570 	andsne	r1, r1, r0, ror r5
    1f30:	85010000 	strhi	r0, [r1, #-0]
    1f34:	00461002 	subeq	r1, r6, r2
    1f38:	91020000 	mrsls	r0, (UNDEF: 2)
    1f3c:	0e3f156c 	cdpeq	5, 3, cr1, cr15, cr12, {3}
    1f40:	85010000 	strhi	r0, [r1, #-0]
    1f44:	00462102 	subeq	r2, r6, r2, lsl #2
    1f48:	91020000 	mrsls	r0, (UNDEF: 2)
    1f4c:	751a0074 	ldrvc	r0, [sl, #-116]	; 0xffffff8c
    1f50:	0100000e 	tsteq	r0, lr
    1f54:	ec070240 	sfm	f0, 4, [r7], {64}	; 0x40
    1f58:	0000021d 	andeq	r0, r0, sp, lsl r2
    1f5c:	01000001 	tsteq	r0, r1
    1f60:	000cf89c 	muleq	ip, ip, r8
    1f64:	0f8b1300 	svceq	0x008b1300
    1f68:	40010000 	andmi	r0, r1, r0
    1f6c:	01e22002 	mvneq	r2, r2
    1f70:	91020000 	mrsls	r0, (UNDEF: 2)
    1f74:	107b156c 	rsbsne	r1, fp, ip, ror #10
    1f78:	42010000 	andmi	r0, r1, #0
    1f7c:	031b0a02 	tsteq	fp, #8192	; 0x2000
    1f80:	91020000 	mrsls	r0, (UNDEF: 2)
    1f84:	9e180074 	mrcls	0, 0, r0, cr8, cr4, {3}
    1f88:	0100000e 	tsteq	r0, lr
    1f8c:	4616019b 			; <UNDEFINED> instruction: 0x4616019b
    1f90:	a0000000 	andge	r0, r0, r0
    1f94:	4c00021b 	sfmmi	f0, 4, [r0], {27}
    1f98:	01000002 	tsteq	r0, r2
    1f9c:	000dcf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    1fa0:	0d9f1300 	ldceq	3, cr1, [pc]	; 1fa8 <_start-0xe058>
    1fa4:	9b010000 	blls	41fac <ramdisk+0x14954>
    1fa8:	00963601 	addseq	r3, r6, r1, lsl #12
    1fac:	91020000 	mrsls	r0, (UNDEF: 2)
    1fb0:	0def1364 	stcleq	3, cr1, [pc, #400]!	; 2148 <_start-0xdeb8>
    1fb4:	9b010000 	blls	41fbc <ramdisk+0x14964>
    1fb8:	026e5c01 	rsbeq	r5, lr, #256	; 0x100
    1fbc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fc0:	0bd51360 	bleq	ff546d48 <_estack+0xf7526d48>
    1fc4:	9b010000 	blls	41fcc <ramdisk+0x14974>
    1fc8:	003f7301 	eorseq	r7, pc, r1, lsl #6
    1fcc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fd0:	0189135e 	orreq	r1, r9, lr, asr r3
    1fd4:	9b010000 	blls	41fdc <ramdisk+0x14984>
    1fd8:	008d8701 	addeq	r8, sp, r1, lsl #14
    1fdc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fe0:	04b31358 	ldrteq	r1, [r3], #856	; 0x358
    1fe4:	9b010000 	blls	41fec <ramdisk+0x14994>
    1fe8:	0052ac01 	subseq	sl, r2, r1, lsl #24
    1fec:	91020000 	mrsls	r0, (UNDEF: 2)
    1ff0:	10c81300 	sbcne	r1, r8, r0, lsl #6
    1ff4:	9b010000 	blls	41ffc <ramdisk+0x149a4>
    1ff8:	0dcfc501 	cfstr64eq	mvdx12, [pc, #4]	; 2004 <_start-0xdffc>
    1ffc:	91020000 	mrsls	r0, (UNDEF: 2)
    2000:	10961304 	addsne	r1, r6, r4, lsl #6
    2004:	9b010000 	blls	4200c <ramdisk+0x149b4>
    2008:	0273e401 	rsbseq	lr, r3, #16777216	; 0x1000000
    200c:	91020000 	mrsls	r0, (UNDEF: 2)
    2010:	102d1f08 	eorne	r1, sp, r8, lsl #30
    2014:	9b010000 	blls	4201c <ramdisk+0x149c4>
    2018:	2c011001 	stccs	0, cr1, [r1], {1}
    201c:	02000006 	andeq	r0, r0, #6
    2020:	1c150c91 	ldcne	12, cr0, [r5], {145}	; 0x91
    2024:	01000009 	tsteq	r0, r9
    2028:	4616019d 			; <UNDEFINED> instruction: 0x4616019d
    202c:	02000000 	andeq	r0, r0, #0
    2030:	96157491 			; <UNDEFINED> instruction: 0x96157491
    2034:	0100000d 	tsteq	r0, sp
    2038:	1b0a019e 	blne	2826b8 <__bss_end+0x155058>
    203c:	02000003 	andeq	r0, r0, #3
    2040:	e0167091 	muls	r6, r1, r0
    2044:	9c00021b 	sfmls	f0, 4, [r0], {27}
    2048:	15000001 	strne	r0, [r0, #-1]
    204c:	0000019c 	muleq	r0, ip, r1
    2050:	1301a901 	movwne	sl, #6401	; 0x1901
    2054:	00000273 	andeq	r0, r0, r3, ror r2
    2058:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    205c:	e2040800 	and	r0, r4, #0, 16
    2060:	00000001 	andeq	r0, r0, r1
    2064:	000002d7 	ldrdeq	r0, [r0], -r7
    2068:	07d80004 	ldrbeq	r0, [r8, r4]
    206c:	01040000 	mrseq	r0, (UNDEF: 4)
    2070:	00000037 	andeq	r0, r0, r7, lsr r0
    2074:	0011710c 	andseq	r7, r1, ip, lsl #2
    2078:	0000ae00 	andeq	sl, r0, r0, lsl #28
    207c:	0234c400 	eorseq	ip, r4, #0, 8
    2080:	0003a400 	andeq	sl, r3, r0, lsl #8
    2084:	0015b900 	andseq	fp, r5, r0, lsl #18
    2088:	11f50200 	mvnsne	r0, r0, lsl #4
    208c:	0b020000 	bleq	82094 <ramdisk+0x54a3c>
    2090:	00003110 	andeq	r3, r0, r0, lsl r1
    2094:	37040300 	strcc	r0, [r4, -r0, lsl #6]
    2098:	04000000 	streq	r0, [r0], #-0
    209c:	00000047 	andeq	r0, r0, r7, asr #32
    20a0:	00004705 	andeq	r4, r0, r5, lsl #14
    20a4:	00530500 	subseq	r0, r3, r0, lsl #10
    20a8:	06000000 	streq	r0, [r0], -r0
    20ac:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
    20b0:	47070000 	strmi	r0, [r7, -r0]
    20b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    20b8:	02080904 	andeq	r0, r8, #4, 18	; 0x10000
    20bc:	0079090d 	rsbseq	r0, r9, sp, lsl #18
    20c0:	660a0000 	strvs	r0, [sl], -r0
    20c4:	02000011 	andeq	r0, r0, #17
    20c8:	0025180e 	eoreq	r1, r5, lr, lsl #16
    20cc:	0a000000 	beq	20d4 <_start-0xdf2c>
    20d0:	00000030 	andeq	r0, r0, r0, lsr r0
    20d4:	530f0f02 	movwpl	r0, #65282	; 0xff02
    20d8:	04000000 	streq	r0, [r0], #-0
    20dc:	120a0200 	andne	r0, sl, #0, 4
    20e0:	10020000 	andne	r0, r2, r0
    20e4:	00005503 	andeq	r5, r0, r3, lsl #10
    20e8:	00790b00 	rsbseq	r0, r9, r0, lsl #22
    20ec:	00950000 	addseq	r0, r5, r0
    20f0:	470c0000 	strmi	r0, [ip, -r0]
    20f4:	47000000 	strmi	r0, [r0, -r0]
    20f8:	11dd0d00 	bicsne	r0, sp, r0, lsl #26
    20fc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    2100:	00008519 	andeq	r8, r0, r9, lsl r5
    2104:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    2108:	090002c3 	stmdbeq	r0, {r0, r1, r6, r7, r9}
    210c:	090c0128 	stmdbeq	ip, {r3, r5, r8}
    2110:	00000133 	andeq	r0, r0, r3, lsr r1
    2114:	00122c0a 	andseq	r2, r2, sl, lsl #24
    2118:	100d0100 	andne	r0, sp, r0, lsl #2
    211c:	00000133 	andeq	r0, r0, r3, lsr r1
    2120:	10f60a00 	rscsne	r0, r6, r0, lsl #20
    2124:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2128:	00013310 	andeq	r3, r1, r0, lsl r3
    212c:	230a0400 	movwcs	r0, #41984	; 0xa400
    2130:	01000012 	tsteq	r0, r2, lsl r0
    2134:	0133100f 	teqeq	r3, pc
    2138:	0a080000 	beq	202140 <__bss_end+0xd4ae0>
    213c:	0000111e 	andeq	r1, r0, lr, lsl r1
    2140:	33101001 	tstcc	r0, #1
    2144:	0c000001 	stceq	0, cr0, [r0], {1}
    2148:	00124c0a 	andseq	r4, r2, sl, lsl #24
    214c:	10110100 	andsne	r0, r1, r0, lsl #2
    2150:	00000133 	andeq	r0, r0, r3, lsr r1
    2154:	11c30a10 	bicne	r0, r3, r0, lsl sl
    2158:	12010000 	andne	r0, r1, #0
    215c:	00013310 	andeq	r3, r1, r0, lsl r3
    2160:	400a1400 	andmi	r1, sl, r0, lsl #8
    2164:	01000012 	tsteq	r0, r2, lsl r0
    2168:	01331013 	teqeq	r3, r3, lsl r0
    216c:	0a180000 	beq	602174 <__bss_end+0x4d4b14>
    2170:	000011cb 	andeq	r1, r0, fp, asr #3
    2174:	33101401 	tstcc	r0, #16777216	; 0x1000000
    2178:	1c000001 	stcne	0, cr0, [r0], {1}
    217c:	0011d40a 	andseq	sp, r1, sl, lsl #8
    2180:	10150100 	andsne	r0, r5, r0, lsl #2
    2184:	00000133 	andeq	r0, r0, r3, lsr r1
    2188:	10ff0a20 	rscsne	r0, pc, r0, lsr #20
    218c:	16010000 	strne	r0, [r1], -r0
    2190:	00013310 	andeq	r3, r1, r0, lsl r3
    2194:	06002400 	streq	r2, [r0], -r0, lsl #8
    2198:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
    219c:	0c020000 	stceq	0, cr0, [r2], {-0}
    21a0:	01000011 	tsteq	r0, r1, lsl r0
    21a4:	00a70317 	adceq	r0, r7, r7, lsl r3
    21a8:	3a0e0000 	bcc	3821b0 <__bss_end+0x254b50>
    21ac:	0d000001 	stceq	0, cr0, [r0, #-4]
    21b0:	00000196 	muleq	r0, r6, r1
    21b4:	632b1901 			; <UNDEFINED> instruction: 0x632b1901
    21b8:	05000001 	streq	r0, [r0, #-1]
    21bc:	02bad403 	adcseq	sp, sl, #50331648	; 0x3000000
    21c0:	46040300 	strmi	r0, [r4], -r0, lsl #6
    21c4:	07000001 	streq	r0, [r0, -r1]
    21c8:	0000015d 	andeq	r0, r0, sp, asr r1
    21cc:	0001330b 	andeq	r3, r1, fp, lsl #6
    21d0:	00017800 	andeq	r7, r1, r0, lsl #16
    21d4:	00470c00 	subeq	r0, r7, r0, lsl #24
    21d8:	00020000 	andeq	r0, r2, r0
    21dc:	001ca10d 	andseq	sl, ip, sp, lsl #2
    21e0:	161c0100 	ldrne	r0, [ip], -r0, lsl #2
    21e4:	00000168 	andeq	r0, r0, r8, ror #2
    21e8:	c6140305 	ldrgt	r0, [r4], -r5, lsl #6
    21ec:	5b0f0002 	blpl	3c21fc <__bss_end+0x294b9c>
    21f0:	01000011 	tsteq	r0, r1, lsl r0
    21f4:	3788066d 	strcc	r0, [r8, sp, ror #12]
    21f8:	00e00002 	rsceq	r0, r0, r2
    21fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2200:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    2204:	71726910 	cmnvc	r2, r0, lsl r9
    2208:	256d0100 	strbcs	r0, [sp, #-256]!	; 0xffffff00
    220c:	0000004e 	andeq	r0, r0, lr, asr #32
    2210:	0d6c9102 	stfeqp	f1, [ip, #-8]!
    2214:	00001156 	andeq	r1, r0, r6, asr r1
    2218:	33106f01 	tstcc	r0, #1, 30
    221c:	02000001 	andeq	r0, r0, #1
    2220:	0f007491 	svceq	0x00007491
    2224:	000011eb 	andeq	r1, r0, fp, ror #3
    2228:	b4065b01 	strlt	r5, [r6], #-2817	; 0xfffff4ff
    222c:	d4000236 	strle	r0, [r0], #-566	; 0xfffffdca
    2230:	01000000 	mrseq	r0, (UNDEF: 0)
    2234:	0001f49c 	muleq	r1, ip, r4
    2238:	72691000 	rsbvc	r1, r9, #0
    223c:	5b010071 	blpl	42408 <ramdisk+0x14db0>
    2240:	00004e24 	andeq	r4, r0, r4, lsr #28
    2244:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2248:	0011560d 	andseq	r5, r1, sp, lsl #12
    224c:	105d0100 	subsne	r0, sp, r0, lsl #2
    2250:	00000133 	andeq	r0, r0, r3, lsr r1
    2254:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2258:	00112611 	andseq	r2, r1, r1, lsl r6
    225c:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
    2260:	00023650 	andeq	r3, r2, r0, asr r6
    2264:	00000064 	andeq	r0, r0, r4, rrx
    2268:	02389c01 	eorseq	r9, r8, #256	; 0x100
    226c:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
    2270:	01007172 	tsteq	r0, r2, ror r1
    2274:	004e2651 	subeq	r2, lr, r1, asr r6
    2278:	91020000 	mrsls	r0, (UNDEF: 2)
    227c:	11661274 	smcne	24868	; 0x6124
    2280:	51010000 	mrspl	r0, (UNDEF: 1)
    2284:	00002540 	andeq	r2, r0, r0, asr #10
    2288:	70910200 	addsvc	r0, r1, r0, lsl #4
    228c:	00003012 	andeq	r3, r0, r2, lsl r0
    2290:	52510100 	subspl	r0, r1, #0, 2
    2294:	00000053 	andeq	r0, r0, r3, asr r0
    2298:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    229c:	00113213 	andseq	r3, r1, r3, lsl r2
    22a0:	064c0100 	strbeq	r0, [ip], -r0, lsl #2
    22a4:	00023634 	andeq	r3, r2, r4, lsr r6
    22a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    22ac:	35139c01 	ldrcc	r9, [r3, #-3073]	; 0xfffff3ff
    22b0:	01000012 	tsteq	r0, r2, lsl r0
    22b4:	36180647 	ldrcc	r0, [r8], -r7, asr #12
    22b8:	001c0002 	andseq	r0, ip, r2
    22bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    22c0:	0011b811 	andseq	fp, r1, r1, lsl r8
    22c4:	06360100 	ldrteq	r0, [r6], -r0, lsl #2
    22c8:	00023578 	andeq	r3, r2, r8, ror r5
    22cc:	000000a0 	andeq	r0, r0, r0, lsr #1
    22d0:	02819c01 	addeq	r9, r1, #256	; 0x100
    22d4:	3b0d0000 	blcc	3422dc <__bss_end+0x214c7c>
    22d8:	01000011 	tsteq	r0, r1, lsl r0
    22dc:	01331938 	teqeq	r3, r8, lsr r9
    22e0:	54010000 	strpl	r0, [r1], #-0
    22e4:	114a1400 	cmpne	sl, r0, lsl #8
    22e8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    22ec:	0234c40d 	eorseq	ip, r4, #218103808	; 0xd000000
    22f0:	0000b400 	andeq	fp, r0, r0, lsl #8
    22f4:	129c0100 	addsne	r0, ip, #0, 2
    22f8:	0000121b 	andeq	r1, r0, fp, lsl r2
    22fc:	33281e01 			; <UNDEFINED> instruction: 0x33281e01
    2300:	02000001 	andeq	r0, r0, #1
    2304:	27126c91 			; <UNDEFINED> instruction: 0x27126c91
    2308:	01000017 	tsteq	r0, r7, lsl r0
    230c:	004e441e 	subeq	r4, lr, lr, lsl r4
    2310:	91020000 	mrsls	r0, (UNDEF: 2)
    2314:	34dc1568 	ldrbcc	r1, [ip], #1384	; 0x568
    2318:	007c0002 	rsbseq	r0, ip, r2
    231c:	62160000 	andsvs	r0, r6, #0
    2320:	01007469 	tsteq	r0, r9, ror #8
    2324:	00471023 	subeq	r1, r7, r3, lsr #32
    2328:	91020000 	mrsls	r0, (UNDEF: 2)
    232c:	72691674 	rsbvc	r1, r9, #116, 12	; 0x7400000
    2330:	26010071 			; <UNDEFINED> instruction: 0x26010071
    2334:	00004710 	andeq	r4, r0, r0, lsl r7
    2338:	70910200 	addsvc	r0, r1, r0, lsl #4
    233c:	e7000000 	str	r0, [r0, -r0]
    2340:	04000002 	streq	r0, [r0], #-2
    2344:	00091d00 	andeq	r1, r9, r0, lsl #26
    2348:	37010400 	strcc	r0, [r1, -r0, lsl #8]
    234c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2350:	000012f0 	strdeq	r1, [r0], -r0
    2354:	000000ae 	andeq	r0, r0, lr, lsr #1
    2358:	00023868 	andeq	r3, r2, r8, ror #16
    235c:	00000520 	andeq	r0, r0, r0, lsr #10
    2360:	0000173e 	andeq	r1, r0, lr, lsr r7
    2364:	0012dd02 	andseq	sp, r2, r2, lsl #26
    2368:	62010700 	andvs	r0, r1, #0, 14
    236c:	02000000 	andeq	r0, r0, #0
    2370:	00620647 	rsbeq	r0, r2, r7, asr #12
    2374:	55030000 	strpl	r0, [r3, #-0]
    2378:	00000013 	andeq	r0, r0, r3, lsl r0
    237c:	00137103 	andseq	r7, r3, r3, lsl #2
    2380:	ac030100 	stfges	f0, [r3], {-0}
    2384:	02000013 	andeq	r0, r0, #19
    2388:	00134903 	andseq	r4, r3, r3, lsl #18
    238c:	7f030300 	svcvc	0x00030300
    2390:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2394:	0012a303 	andseq	sl, r2, r3, lsl #6
    2398:	b7030500 	strlt	r0, [r3, -r0, lsl #10]
    239c:	06000012 			; <UNDEFINED> instruction: 0x06000012
    23a0:	08010400 	stmdaeq	r1, {sl}
    23a4:	00000666 	andeq	r0, r0, r6, ror #12
    23a8:	00133802 	andseq	r3, r3, r2, lsl #16
    23ac:	62010700 	andvs	r0, r1, #0, 14
    23b0:	02000000 	andeq	r0, r0, #0
    23b4:	0088065a 	addeq	r0, r8, sl, asr r6
    23b8:	41030000 	mrsmi	r0, (UNDEF: 3)
    23bc:	00000013 	andeq	r0, r0, r3, lsl r0
    23c0:	0013d503 	andseq	sp, r3, r3, lsl #10
    23c4:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    23c8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    23cc:	00000098 	muleq	r0, r8, r0
    23d0:	00009806 	andeq	r9, r0, r6, lsl #16
    23d4:	04000500 	streq	r0, [r0], #-1280	; 0xfffffb00
    23d8:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
    23dc:	04040000 	streq	r0, [r4], #-0
    23e0:	00065407 	andeq	r5, r6, r7, lsl #8
    23e4:	009f0500 	addseq	r0, pc, r0, lsl #10
    23e8:	00b60000 	adcseq	r0, r6, r0
    23ec:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
    23f0:	01000000 	mrseq	r0, (UNDEF: 0)
    23f4:	12590700 	subsne	r0, r9, #0, 14
    23f8:	6b010000 	blvs	42400 <ramdisk+0x14da8>
    23fc:	0000a616 	andeq	sl, r0, r6, lsl r6
    2400:	20030500 	andcs	r0, r3, r0, lsl #10
    2404:	070002c6 	streq	r0, [r0, -r6, asr #5]
    2408:	0000128d 	andeq	r1, r0, sp, lsl #5
    240c:	88166c01 	ldmdahi	r6, {r0, sl, fp, sp, lr}
    2410:	05000000 	streq	r0, [r0, #-0]
    2414:	02c62803 	sbceq	r2, r6, #196608	; 0x30000
    2418:	138a0800 	orrne	r0, sl, #0, 16
    241c:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    2420:	023d2006 	eorseq	r2, sp, #6
    2424:	00006800 	andeq	r6, r0, r0, lsl #16
    2428:	1e9c0100 	fmlnee	f0, f4, f0
    242c:	09000001 	stmdbeq	r0, {r0}
    2430:	0000126c 	andeq	r1, r0, ip, ror #4
    2434:	9826c901 	stmdals	r6!, {r0, r8, fp, lr, pc}
    2438:	02000000 	andeq	r0, r0, #0
    243c:	56076c91 			; <UNDEFINED> instruction: 0x56076c91
    2440:	01000011 	tsteq	r0, r1, lsl r0
    2444:	009f10cb 	addseq	r1, pc, fp, asr #1
    2448:	91020000 	mrsls	r0, (UNDEF: 2)
    244c:	13a50774 			; <UNDEFINED> instruction: 0x13a50774
    2450:	cc010000 	stcgt	0, cr0, [r1], {-0}
    2454:	00009f10 	andeq	r9, r0, r0, lsl pc
    2458:	70910200 	addsvc	r0, r1, r0, lsl #4
    245c:	13c30800 	bicne	r0, r3, #0, 16
    2460:	ac010000 	stcge	0, cr0, [r1], {-0}
    2464:	023bc806 	eorseq	ip, fp, #393216	; 0x60000
    2468:	00015800 	andeq	r5, r1, r0, lsl #16
    246c:	719c0100 	orrsvc	r0, ip, r0, lsl #2
    2470:	09000001 	stmdbeq	r0, {r0}
    2474:	0000126c 	andeq	r1, r0, ip, ror #4
    2478:	9825ac01 	stmdals	r5!, {r0, sl, fp, sp, pc}
    247c:	02000000 	andeq	r0, r0, #0
    2480:	db096c91 	blle	25d6cc <__bss_end+0x13006c>
    2484:	01000015 	tsteq	r0, r5, lsl r0
    2488:	00253eac 	eoreq	r3, r5, ip, lsr #29
    248c:	91020000 	mrsls	r0, (UNDEF: 2)
    2490:	1156076b 	cmpne	r6, fp, ror #14
    2494:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
    2498:	00009f10 	andeq	r9, r0, r0, lsl pc
    249c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    24a0:	0013a507 	andseq	sl, r3, r7, lsl #10
    24a4:	10af0100 	adcne	r0, pc, r0, lsl #2
    24a8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    24ac:	00709102 	rsbseq	r9, r0, r2, lsl #2
    24b0:	0012cc08 	andseq	ip, r2, r8, lsl #24
    24b4:	068f0100 	streq	r0, [pc], r0, lsl #2
    24b8:	00023a78 	andeq	r3, r2, r8, ror sl
    24bc:	00000150 	andeq	r0, r0, r0, asr r1
    24c0:	01c49c01 	biceq	r9, r4, r1, lsl #24
    24c4:	6c090000 	stcvs	0, cr0, [r9], {-0}
    24c8:	01000012 	tsteq	r0, r2, lsl r0
    24cc:	0098248f 	addseq	r2, r8, pc, lsl #9
    24d0:	91020000 	mrsls	r0, (UNDEF: 2)
    24d4:	15db096c 	ldrbne	r0, [fp, #2412]	; 0x96c
    24d8:	8f010000 	svchi	0x00010000
    24dc:	0000253d 	andeq	r2, r0, sp, lsr r5
    24e0:	6b910200 	blvs	fe442ce8 <_estack+0xf6422ce8>
    24e4:	00115607 	andseq	r5, r1, r7, lsl #12
    24e8:	10910100 	addsne	r0, r1, r0, lsl #2
    24ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    24f0:	07749102 	ldrbeq	r9, [r4, -r2, lsl #2]!
    24f4:	000013a5 	andeq	r1, r0, r5, lsr #7
    24f8:	9f109201 	svcls	0x00109201
    24fc:	02000000 	andeq	r0, r0, #0
    2500:	0a007091 	beq	1e74c <__module_entries_end+0xe6a8>
    2504:	00001273 	andeq	r1, r0, r3, ror r2
    2508:	0c058701 	stceq	7, cr8, [r5], {1}
    250c:	10000002 	andne	r0, r0, r2
    2510:	6800023a 	stmdavs	r0, {r1, r3, r4, r5, r9}
    2514:	01000000 	mrseq	r0, (UNDEF: 0)
    2518:	00020c9c 	muleq	r2, ip, ip
    251c:	126c0900 	rsbne	r0, ip, #0, 18
    2520:	87010000 	strhi	r0, [r1, -r0]
    2524:	0000981b 	andeq	r9, r0, fp, lsl r8
    2528:	6c910200 	lfmvs	f0, 4, [r1], {0}
    252c:	0013a507 	andseq	sl, r3, r7, lsl #10
    2530:	10880100 	addne	r0, r8, r0, lsl #2
    2534:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    2538:	07749102 	ldrbeq	r9, [r4, -r2, lsl #2]!
    253c:	00001156 	andeq	r1, r0, r6, asr r1
    2540:	9f108901 	svcls	0x00108901
    2544:	02000000 	andeq	r0, r0, #0
    2548:	0b007091 	bleq	1e794 <__module_entries_end+0xe6f0>
    254c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2550:	bb080074 	bllt	202728 <__bss_end+0xd50c8>
    2554:	01000013 	tsteq	r0, r3, lsl r0
    2558:	3974067b 	ldmdbcc	r4!, {r0, r1, r3, r4, r5, r6, r9, sl}^
    255c:	009c0002 	addseq	r0, ip, r2
    2560:	9c010000 	stcls	0, cr0, [r1], {-0}
    2564:	00000266 	andeq	r0, r0, r6, ror #4
    2568:	00126c09 	andseq	r6, r2, r9, lsl #24
    256c:	1b7b0100 	blne	1ec2974 <__bss_end+0x1d95314>
    2570:	00000098 	muleq	r0, r8, r0
    2574:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    2578:	000012e9 	andeq	r1, r0, r9, ror #5
    257c:	98307b01 	ldmdals	r0!, {r0, r8, r9, fp, ip, sp, lr}
    2580:	02000000 	andeq	r0, r0, #0
    2584:	a5076891 	strge	r6, [r7, #-2193]	; 0xfffff76f
    2588:	01000013 	tsteq	r0, r3, lsl r0
    258c:	009f107c 	addseq	r1, pc, ip, ror r0	; <UNPREDICTABLE>
    2590:	91020000 	mrsls	r0, (UNDEF: 2)
    2594:	11560774 	cmpne	r6, r4, ror r7
    2598:	7d010000 	stcvc	0, cr0, [r1, #-0]
    259c:	00009f10 	andeq	r9, r0, r0, lsl pc
    25a0:	70910200 	addsvc	r0, r1, r0, lsl #4
    25a4:	127c0c00 	rsbsne	r0, ip, #0, 24
    25a8:	77010000 	strvc	r0, [r1, -r0]
    25ac:	02394006 	eorseq	r4, r9, #6
    25b0:	00003400 	andeq	r3, r0, r0, lsl #8
    25b4:	9b9c0100 	blls	fe7029bc <_estack+0xf66e29bc>
    25b8:	09000002 	stmdbeq	r0, {r1}
    25bc:	0000126c 	andeq	r1, r0, ip, ror #4
    25c0:	98247701 	stmdals	r4!, {r0, r8, r9, sl, ip, sp, lr}
    25c4:	02000000 	andeq	r0, r0, #0
    25c8:	640d7491 	strvs	r7, [sp], #-1169	; 0xfffffb6f
    25cc:	01007269 	tsteq	r0, r9, ror #4
    25d0:	00693a77 	rsbeq	r3, r9, r7, ror sl
    25d4:	91020000 	mrsls	r0, (UNDEF: 2)
    25d8:	610e0073 	tstvs	lr, r3, ror r0
    25dc:	01000013 	tsteq	r0, r3, lsl r0
    25e0:	3868066e 	stmdacc	r8!, {r1, r2, r3, r5, r6, r9, sl}^
    25e4:	00d80002 	sbcseq	r0, r8, r2
    25e8:	9c010000 	stcls	0, cr0, [r1], {-0}
    25ec:	00126c09 	andseq	r6, r2, r9, lsl #24
    25f0:	236e0100 	cmncs	lr, #0, 2
    25f4:	00000098 	muleq	r0, r8, r0
    25f8:	096c9102 	stmdbeq	ip!, {r1, r8, ip, pc}^
    25fc:	0000139d 	muleq	r0, sp, r3
    2600:	98386e01 	ldmdals	r8!, {r0, r9, sl, fp, sp, lr}
    2604:	02000000 	andeq	r0, r0, #0
    2608:	a5076891 	strge	r6, [r7, #-2193]	; 0xfffff76f
    260c:	01000013 	tsteq	r0, r3, lsl r0
    2610:	020c066f 	andeq	r0, ip, #116391936	; 0x6f00000
    2614:	91020000 	mrsls	r0, (UNDEF: 2)
    2618:	12540774 	subsne	r0, r4, #116, 14	; 0x1d00000
    261c:	70010000 	andvc	r0, r1, r0
    2620:	00020c06 	andeq	r0, r2, r6, lsl #24
    2624:	70910200 	addsvc	r0, r1, r0, lsl #4
    2628:	02e50000 	rsceq	r0, r5, #0
    262c:	00040000 	andeq	r0, r4, r0
    2630:	00000a1a 	andeq	r0, r0, sl, lsl sl
    2634:	00370104 	eorseq	r0, r7, r4, lsl #2
    2638:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
    263c:	ae000014 	mcrge	0, 0, r0, cr0, cr4, {0}
    2640:	88000000 	stmdahi	r0, {}	; <UNPREDICTABLE>
    2644:	ac00023d 	sfmge	f0, 4, [r0], {61}	; 0x3d
    2648:	bb000004 	bllt	2660 <_start-0xd9a0>
    264c:	02000018 	andeq	r0, r0, #24
    2650:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
    2654:	3617d102 	ldrcc	sp, [r7], -r2, lsl #2
    2658:	03000000 	movweq	r0, #0
    265c:	00000025 	andeq	r0, r0, r5, lsr #32
    2660:	59070404 	stmdbpl	r7, {r2, sl}
    2664:	05000006 	streq	r0, [r0, #-6]
    2668:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    266c:	08040074 	stmdaeq	r4, {r2, r4, r5, r6}
    2670:	00017b05 	andeq	r7, r1, r5, lsl #22
    2674:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    2678:	000001a9 	andeq	r0, r0, r9, lsr #3
    267c:	68060104 	stmdavs	r6, {r2, r8}
    2680:	04000006 	streq	r0, [r0], #-6
    2684:	06660801 	strbteq	r0, [r6], -r1, lsl #16
    2688:	02040000 	andeq	r0, r4, #0
    268c:	00073105 	andeq	r3, r7, r5, lsl #2
    2690:	07020400 	streq	r0, [r2, -r0, lsl #8]
    2694:	0000009b 	muleq	r0, fp, r0
    2698:	00006703 	andeq	r6, r0, r3, lsl #14
    269c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    26a0:	00000180 	andeq	r0, r0, r0, lsl #3
    26a4:	54070404 	strpl	r0, [r7], #-1028	; 0xfffffbfc
    26a8:	04000006 	streq	r0, [r0], #-6
    26ac:	064f0708 	strbeq	r0, [pc], -r8, lsl #14
    26b0:	04060000 	streq	r0, [r6], #-0
    26b4:	00590407 	subseq	r0, r9, r7, lsl #8
    26b8:	01040000 	mrseq	r0, (UNDEF: 4)
    26bc:	00066f08 	andeq	r6, r6, r8, lsl #30
    26c0:	14540800 	ldrbne	r0, [r4], #-2048	; 0xfffff800
    26c4:	10000000 	andne	r0, r0, r0
    26c8:	be0e5c01 	cdplt	12, 0, cr5, cr14, cr1, {0}
    26cc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    26d0:	00001466 	andeq	r1, r0, r6, ror #8
    26d4:	c5175f01 	ldrgt	r5, [r7, #-3841]	; 0xfffff0ff
    26d8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    26dc:	0000145f 	andeq	r1, r0, pc, asr r4
    26e0:	ca106301 	bgt	41b2ec <__bss_end+0x2edc8c>
    26e4:	00000000 	andeq	r0, r0, r0
    26e8:	ae040804 	cdpge	8, 0, cr0, cr4, cr4, {0}
    26ec:	0a000001 	beq	26f8 <_start-0xd908>
    26f0:	000000be 	strheq	r0, [r0], -lr
    26f4:	0000590b 	andeq	r5, r0, fp, lsl #18
    26f8:	0000db00 	andeq	sp, r0, r0, lsl #22
    26fc:	00360c00 	eorseq	r0, r6, r0, lsl #24
    2700:	0fff0000 	svceq	0x00ff0000
    2704:	14d70d00 	ldrbne	r0, [r7], #3328	; 0xd00
    2708:	64010000 	strvs	r0, [r1], #-0
    270c:	00009703 	andeq	r9, r0, r3, lsl #14
    2710:	40030500 	andmi	r0, r3, r0, lsl #10
    2714:	0e0002c6 	cdpeq	2, 0, cr0, cr0, cr6, {6}
    2718:	0000140e 	andeq	r1, r0, lr, lsl #8
    271c:	10680108 	rsbne	r0, r8, r8, lsl #2
    2720:	00000115 	andeq	r0, r0, r5, lsl r1
    2724:	0015860f 	andseq	r8, r5, pc, lsl #12
    2728:	176a0100 	strbne	r0, [sl, -r0, lsl #2]!
    272c:	00000115 	andeq	r0, r0, r5, lsl r1
    2730:	14cc0f00 	strbne	r0, [ip], #3840	; 0xf00
    2734:	6b010000 	blvs	4273c <ramdisk+0x150e4>
    2738:	00002509 	andeq	r2, r0, r9, lsl #10
    273c:	07000400 	streq	r0, [r0, -r0, lsl #8]
    2740:	0000ed04 	andeq	lr, r0, r4, lsl #26
    2744:	15380200 	ldrne	r0, [r8, #-512]!	; 0xfffffe00
    2748:	6c010000 	stcvs	0, cr0, [r1], {-0}
    274c:	0000ed03 	andeq	lr, r0, r3, lsl #26
    2750:	15210d00 	strne	r0, [r1, #-3328]!	; 0xfffff300
    2754:	82010000 	andhi	r0, r1, #0
    2758:	00006e1d 	andeq	r6, r0, sp, lsl lr
    275c:	d8030500 	stmdale	r3, {r8, sl}
    2760:	0d0002ba 	sfmeq	f0, 4, [r0, #-744]	; 0xfffffd18
    2764:	000014f3 	strdeq	r1, [r0], -r3
    2768:	31158501 	tstcc	r5, r1, lsl #10
    276c:	05000000 	streq	r0, [r0, #-0]
    2770:	02badc03 	adcseq	sp, sl, #768	; 0x300
    2774:	15310d00 	ldrne	r0, [r1, #-3328]!	; 0xfffff300
    2778:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    277c:	00011b13 	andeq	r1, r1, r3, lsl fp
    2780:	40030500 	andmi	r0, r3, r0, lsl #10
    2784:	0d0002d6 	sfmeq	f0, 4, [r0, #-856]	; 0xfffffca8
    2788:	000014dd 	ldrdeq	r1, [r0], -sp
    278c:	6f1c8801 	svcvs	0x001c8801
    2790:	05000001 	streq	r0, [r0, #-1]
    2794:	02d64803 	sbcseq	r4, r6, #196608	; 0x30000
    2798:	1b040700 	blne	1043a0 <ramdisk+0xd6d48>
    279c:	0d000001 	stceq	0, cr0, [r0, #-4]
    27a0:	00001563 	andeq	r1, r0, r3, ror #10
    27a4:	250f8c01 	strcs	r8, [pc, #-3073]	; 1bab <_start-0xe455>
    27a8:	05000000 	streq	r0, [r0, #-0]
    27ac:	02c24403 	sbceq	r4, r2, #50331648	; 0x3000000
    27b0:	15431000 	strbne	r1, [r3, #-0]
    27b4:	91010000 	mrsls	r0, (UNDEF: 1)
    27b8:	00002508 	andeq	r2, r0, r8, lsl #10
    27bc:	4c030500 	cfstr32mi	mvfx0, [r3], {-0}
    27c0:	110002d6 	ldrdne	r0, [r0, -r6]
    27c4:	000013de 	ldrdeq	r1, [r0], -lr
    27c8:	0d013401 	cfstrseq	mvf3, [r1, #-4]
    27cc:	000240e0 	andeq	r4, r2, r0, ror #1
    27d0:	00000154 	andeq	r0, r0, r4, asr r1
    27d4:	01e19c01 	mvneq	r9, r1, lsl #24
    27d8:	a1120000 	tstge	r2, r0
    27dc:	01000015 	tsteq	r0, r5, lsl r0
    27e0:	6f350134 	svcvs	0x00350134
    27e4:	02000001 	andeq	r0, r0, #1
    27e8:	26136c91 			; <UNDEFINED> instruction: 0x26136c91
    27ec:	01000007 	tsteq	r0, r7
    27f0:	6f0d0136 	svcvs	0x000d0136
    27f4:	02000001 	andeq	r0, r0, #1
    27f8:	70147491 	mulsvc	r4, r1, r4
    27fc:	01006375 	tsteq	r0, r5, ror r3
    2800:	8a100137 	bhi	402ce4 <__bss_end+0x2d5684>
    2804:	02000000 	andeq	r0, r0, #0
    2808:	11007091 	swpne	r7, r1, [r0]
    280c:	0000141b 	andeq	r1, r0, fp, lsl r4
    2810:	0d011301 	stceq	3, cr1, [r1, #-4]
    2814:	00024008 	andeq	r4, r2, r8
    2818:	000000d8 	ldrdeq	r0, [r0], -r8
    281c:	02199c01 	andseq	r9, r9, #256	; 0x100
    2820:	43130000 	tstmi	r3, #0
    2824:	01000014 	tsteq	r0, r4, lsl r0
    2828:	6f0d0115 	svcvs	0x000d0115
    282c:	02000001 	andeq	r0, r0, #1
    2830:	96137091 			; <UNDEFINED> instruction: 0x96137091
    2834:	01000015 	tsteq	r0, r5, lsl r0
    2838:	8a100116 	bhi	402c98 <__bss_end+0x2d5638>
    283c:	02000000 	andeq	r0, r0, #0
    2840:	15007491 	strne	r7, [r0, #-1169]	; 0xfffffb6f
    2844:	0000150b 	andeq	r1, r0, fp, lsl #10
    2848:	06010d01 	streq	r0, [r1], -r1, lsl #26
    284c:	00023ff0 	strdeq	r3, [r2], -r0
    2850:	00000018 	andeq	r0, r0, r8, lsl r0
    2854:	f9169c01 			; <UNDEFINED> instruction: 0xf9169c01
    2858:	01000013 	tsteq	r0, r3, lsl r0
    285c:	25080107 	strcs	r0, [r8, #-263]	; 0xfffffef9
    2860:	cc000000 	stcgt	0, cr0, [r0], {-0}
    2864:	2400023f 	strcs	r0, [r0], #-575	; 0xfffffdc1
    2868:	01000000 	mrseq	r0, (UNDEF: 0)
    286c:	1559179c 	ldrbne	r1, [r9, #-1948]	; 0xfffff864
    2870:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
    2874:	023f5006 	eorseq	r5, pc, #6
    2878:	00007c00 	andeq	r7, r0, r0, lsl #24
    287c:	869c0100 	ldrhi	r0, [ip], r0, lsl #2
    2880:	18000002 	stmdane	r0, {r1}
    2884:	01007670 	tsteq	r0, r0, ror r6
    2888:	008817ee 	addeq	r1, r8, lr, ror #15
    288c:	91020000 	mrsls	r0, (UNDEF: 2)
    2890:	7570196c 	ldrbvc	r1, [r0, #-2412]!	; 0xfffff694
    2894:	f0010063 			; <UNDEFINED> instruction: 0xf0010063
    2898:	00008a10 	andeq	r8, r0, r0, lsl sl
    289c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28a0:	00142f0d 	andseq	r2, r4, sp, lsl #30
    28a4:	0df10100 	ldfeqe	f0, [r1]
    28a8:	0000016f 	andeq	r0, r0, pc, ror #2
    28ac:	00709102 	rsbseq	r9, r0, r2, lsl #2
    28b0:	0014361a 	andseq	r3, r4, sl, lsl r6
    28b4:	07920100 	ldreq	r0, [r2, r0, lsl #2]
    28b8:	00000088 	andeq	r0, r0, r8, lsl #1
    28bc:	00023d88 	andeq	r3, r2, r8, lsl #27
    28c0:	000001c8 	andeq	r0, r0, r8, asr #3
    28c4:	4d1b9c01 	ldcmi	12, cr9, [fp, #-4]
    28c8:	01000015 	tsteq	r0, r5, lsl r0
    28cc:	00251c92 	mlaeq	r5, r2, ip, r1
    28d0:	91020000 	mrsls	r0, (UNDEF: 2)
    28d4:	14270d64 	strtne	r0, [r7], #-3428	; 0xfffff29c
    28d8:	94010000 	strls	r0, [r1], #-0
    28dc:	00016f0d 	andeq	r6, r1, sp, lsl #30
    28e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    28e4:	0014e30d 	andseq	lr, r4, sp, lsl #6
    28e8:	17940100 	ldrne	r0, [r4, r0, lsl #2]
    28ec:	0000016f 	andeq	r0, r0, pc, ror #2
    28f0:	0d709102 	ldfeqp	f1, [r0, #-8]!
    28f4:	00001577 	andeq	r1, r0, r7, ror r5
    28f8:	6f299401 	svcvs	0x00299401
    28fc:	02000001 	andeq	r0, r0, #1
    2900:	020d6891 	andeq	r6, sp, #9502720	; 0x910000
    2904:	01000015 	tsteq	r0, r5, lsl r0
    2908:	00880795 	umulleq	r0, r8, r5, r7
    290c:	91020000 	mrsls	r0, (UNDEF: 2)
    2910:	1900006c 	stmdbne	r0, {r2, r3, r5, r6}
    2914:	04000007 	streq	r0, [r0], #-7
    2918:	000bd700 	andeq	sp, fp, r0, lsl #14
    291c:	37010400 	strcc	r0, [r1, -r0, lsl #8]
    2920:	0c000000 	stceq	0, cr0, [r0], {-0}
    2924:	000017af 	andeq	r1, r0, pc, lsr #15
    2928:	000000ae 	andeq	r0, r0, lr, lsr #1
    292c:	0002424c 	andeq	r4, r2, ip, asr #4
    2930:	000008e4 	andeq	r0, r0, r4, ror #17
    2934:	00001ae8 	andeq	r1, r0, r8, ror #21
    2938:	69050402 	stmdbvs	r5, {r1, sl}
    293c:	0300746e 	movweq	r7, #1134	; 0x46e
    2940:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
    2944:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2948:	00017b05 	andeq	r7, r1, r5, lsl #22
    294c:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    2950:	000001a9 	andeq	r0, r0, r9, lsr #3
    2954:	04030404 	streq	r0, [r3], #-1028	; 0xfffffbfc
    2958:	00065407 	andeq	r5, r6, r7, lsl #8
    295c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    2960:	00000180 	andeq	r0, r0, r0, lsl #3
    2964:	68060103 	stmdavs	r6, {r0, r1, r8}
    2968:	03000006 	movweq	r0, #6
    296c:	009b0702 	addseq	r0, fp, r2, lsl #14
    2970:	01030000 	mrseq	r0, (UNDEF: 3)
    2974:	00066608 	andeq	r6, r6, r8, lsl #12
    2978:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
    297c:	00000731 	andeq	r0, r0, r1, lsr r7
    2980:	4f070803 	svcmi	0x00070803
    2984:	03000006 	movweq	r0, #6
    2988:	066f0801 	strbteq	r0, [pc], -r1, lsl #16
    298c:	74050000 	strvc	r0, [r5], #-0
    2990:	06000000 	streq	r0, [r0], -r0
    2994:	00007b04 	andeq	r7, r0, r4, lsl #22
    2998:	181d0700 	ldmdane	sp, {r8, r9, sl}
    299c:	31020000 	mrscc	r0, (UNDEF: 2)
    29a0:	00005819 	andeq	r5, r0, r9, lsl r8
    29a4:	17030700 	strne	r0, [r3, -r0, lsl #14]
    29a8:	34020000 	strcc	r0, [r2], #-0
    29ac:	00004319 	andeq	r4, r0, r9, lsl r3
    29b0:	16830700 	strne	r0, [r3], r0, lsl #14
    29b4:	32030000 	andcc	r0, r3, #0
    29b8:	00002c16 	andeq	r2, r0, r6, lsl ip
    29bc:	15f80700 	ldrbne	r0, [r8, #1792]!	; 0x700
    29c0:	33030000 	movwcc	r0, #12288	; 0x3000
    29c4:	00005f17 	andeq	r5, r0, r7, lsl pc
    29c8:	16c90700 	strbne	r0, [r9], r0, lsl #14
    29cc:	34030000 	strcc	r0, [r3], #-0
    29d0:	00008613 	andeq	r8, r0, r3, lsl r6
    29d4:	16c80700 	strbne	r0, [r8], r0, lsl #14
    29d8:	35030000 	strcc	r0, [r3, #-0]
    29dc:	00009213 	andeq	r9, r0, r3, lsl r2
    29e0:	178f0700 	strne	r0, [pc, r0, lsl #14]
    29e4:	53030000 	movwpl	r0, #12288	; 0x3000
    29e8:	0000c20f 	andeq	ip, r0, pc, lsl #4
    29ec:	15e00700 	strbne	r0, [r0, #1792]!	; 0x700
    29f0:	54030000 	strpl	r0, [r3], #-0
    29f4:	0000c20f 	andeq	ip, r0, pc, lsl #4
    29f8:	16190700 	ldrne	r0, [r9], -r0, lsl #14
    29fc:	6a030000 	bvs	c2a04 <ramdisk+0x953ac>
    2a00:	0000740e 	andeq	r7, r0, lr, lsl #8
    2a04:	02300800 	eorseq	r0, r0, #0, 16
    2a08:	f3098503 	vrshl.u8	d8, d3, d9
    2a0c:	09000001 	stmdbeq	r0, {r0}
    2a10:	000015d8 	ldrdeq	r1, [r0], -r8
    2a14:	aa078603 	bge	1e4228 <__bss_end+0xb6bc8>
    2a18:	00000000 	andeq	r0, r0, r0
    2a1c:	0015bb09 	andseq	fp, r5, r9, lsl #22
    2a20:	07870300 	streq	r0, [r7, r0, lsl #6]
    2a24:	000000aa 	andeq	r0, r0, sl, lsr #1
    2a28:	18ce0901 	stmiane	lr, {r0, r8, fp}^
    2a2c:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
    2a30:	0000aa07 	andeq	sl, r0, r7, lsl #20
    2a34:	4c090200 	sfmmi	f0, 4, [r9], {-0}
    2a38:	03000018 	movweq	r0, #24
    2a3c:	00aa0789 	adceq	r0, sl, r9, lsl #15
    2a40:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    2a44:	000016f6 	strdeq	r1, [r0], -r6
    2a48:	aa078a03 	bge	1e525c <__bss_end+0xb7bfc>
    2a4c:	04000000 	streq	r0, [r0], #-0
    2a50:	0016ce09 	andseq	ip, r6, r9, lsl #28
    2a54:	078b0300 	streq	r0, [fp, r0, lsl #6]
    2a58:	000000aa 	andeq	r0, r0, sl, lsr #1
    2a5c:	64690a05 	strbtvs	r0, [r9], #-2565	; 0xfffff5fb
    2a60:	078c0300 	streq	r0, [ip, r0, lsl #6]
    2a64:	000000b6 	strheq	r0, [r0], -r6
    2a68:	18260906 	stmdane	r6!, {r1, r2, r8, fp}
    2a6c:	8d030000 	stchi	0, cr0, [r3, #-0]
    2a70:	0000b607 	andeq	fp, r0, r7, lsl #12
    2a74:	6a090800 	bvs	244a7c <__bss_end+0x11741c>
    2a78:	03000016 	movweq	r0, #22
    2a7c:	00b6078e 	adcseq	r0, r6, lr, lsl #15
    2a80:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    2a84:	0000172c 	andeq	r1, r0, ip, lsr #14
    2a88:	c2089903 	andgt	r9, r8, #49152	; 0xc000
    2a8c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2a90:	00160f09 	andseq	r0, r6, r9, lsl #30
    2a94:	089a0300 	ldmeq	sl, {r8, r9}
    2a98:	000000c2 	andeq	r0, r0, r2, asr #1
    2a9c:	15cf0910 	strbne	r0, [pc, #2320]	; 33b4 <_start-0xcc4c>
    2aa0:	a4030000 	strge	r0, [r3], #-0
    2aa4:	0000c208 	andeq	ip, r0, r8, lsl #4
    2aa8:	68091400 	stmdavs	r9, {sl, ip}
    2aac:	03000017 	movweq	r0, #23
    2ab0:	00c208a5 	sbceq	r0, r2, r5, lsr #17
    2ab4:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    2ab8:	00001688 	andeq	r1, r0, r8, lsl #13
    2abc:	da08a603 	ble	22c2d0 <__bss_end+0xfec70>
    2ac0:	1c000000 	stcne	0, cr0, [r0], {-0}
    2ac4:	00177709 	andseq	r7, r7, r9, lsl #14
    2ac8:	08a70300 	stmiaeq	r7!, {r8, r9}
    2acc:	000000da 	ldrdeq	r0, [r0], -sl
    2ad0:	167b0920 	ldrbtne	r0, [fp], -r0, lsr #18
    2ad4:	a8030000 	stmdage	r3, {}	; <UNPREDICTABLE>
    2ad8:	0000da08 	andeq	sp, r0, r8, lsl #20
    2adc:	23092400 	movwcs	r2, #37888	; 0x9400
    2ae0:	03000017 	movweq	r0, #23
    2ae4:	00da08a9 	sbcseq	r0, sl, r9, lsr #17
    2ae8:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
    2aec:	0000187e 	andeq	r1, r0, lr, ror r8
    2af0:	da08ad03 	ble	22df04 <__bss_end+0x1008a4>
    2af4:	2c000000 	stccs	0, cr0, [r0], {-0}
    2af8:	6e69770a 	cdpvs	7, 6, cr7, cr9, cr10, {0}
    2afc:	07ae0300 	streq	r0, [lr, r0, lsl #6]!
    2b00:	000001f3 	strdeq	r0, [r0], -r3
    2b04:	aa0b0030 	bge	2c2bcc <__bss_end+0x19556c>
    2b08:	04000000 	streq	r0, [r0], #-0
    2b0c:	0c000002 	stceq	0, cr0, [r0], {2}
    2b10:	0000002c 	andeq	r0, r0, ip, lsr #32
    2b14:	070001ff 			; <UNDEFINED> instruction: 0x070001ff
    2b18:	000017a9 	andeq	r1, r0, r9, lsr #15
    2b1c:	f203af03 	vmax.f32	d10, d3, d3
    2b20:	0d000000 	stceq	0, cr0, [r0, #-0]
    2b24:	09b50310 	ldmibeq	r5!, {r4, r8, r9}
    2b28:	00000266 	andeq	r0, r0, r6, ror #4
    2b2c:	0073660a 	rsbseq	r6, r3, sl, lsl #12
    2b30:	6609b603 	strvs	fp, [r9], -r3, lsl #12
    2b34:	00000002 	andeq	r0, r0, r2
    2b38:	0064690a 	rsbeq	r6, r4, sl, lsl #18
    2b3c:	b607b703 	strlt	fp, [r7], -r3, lsl #14
    2b40:	04000000 	streq	r0, [r0], #-0
    2b44:	00181809 	andseq	r1, r8, r9, lsl #16
    2b48:	07b80300 	ldreq	r0, [r8, r0, lsl #6]!
    2b4c:	000000aa 	andeq	r0, r0, sl, lsr #1
    2b50:	1c670906 			; <UNDEFINED> instruction: 0x1c670906
    2b54:	b9030000 	stmdblt	r3, {}	; <UNPREDICTABLE>
    2b58:	0000aa07 	andeq	sl, r0, r7, lsl #20
    2b5c:	59090700 	stmdbpl	r9, {r8, r9, sl}
    2b60:	03000016 	movweq	r0, #22
    2b64:	00c208ba 	strheq	r0, [r2], #138	; 0x8a
    2b68:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    2b6c:	0000177f 	andeq	r1, r0, pc, ror r7
    2b70:	ce0abb03 	vmlagt.f64	d11, d10, d3
    2b74:	0c000000 	stceq	0, cr0, [r0], {-0}
    2b78:	04040600 	streq	r0, [r4], #-1536	; 0xfffffa00
    2b7c:	07000002 	streq	r0, [r0, -r2]
    2b80:	000016ee 	andeq	r1, r0, lr, ror #13
    2b84:	1003c603 	andne	ip, r3, r3, lsl #12
    2b88:	08000002 	stmdaeq	r0, {r1}
    2b8c:	cc030228 	sfmgt	f0, 4, [r3], {40}	; 0x28
    2b90:	0002f809 	andeq	pc, r2, r9, lsl #16
    2b94:	626f0a00 	rsbvs	r0, pc, #0, 20
    2b98:	cd03006a 	stcgt	0, cr0, [r3, #-424]	; 0xfffffe58
    2b9c:	00026c0a 	andeq	r6, r2, sl, lsl #24
    2ba0:	d2090000 	andle	r0, r9, #0
    2ba4:	03000016 	movweq	r0, #22
    2ba8:	00aa07ce 	adceq	r0, sl, lr, asr #15
    2bac:	0a100000 	beq	402bb4 <__bss_end+0x2d5554>
    2bb0:	00727265 	rsbseq	r7, r2, r5, ror #4
    2bb4:	aa07cf03 	bge	1f67c8 <__bss_end+0xc9168>
    2bb8:	11000000 	mrsne	r0, (UNDEF: 0)
    2bbc:	0019f409 	andseq	pc, r9, r9, lsl #8
    2bc0:	0ad00300 	beq	ff4037c8 <_estack+0xf73e37c8>
    2bc4:	000000ce 	andeq	r0, r0, lr, asr #1
    2bc8:	1bf50914 	blne	ffd45020 <_estack+0xf7d25020>
    2bcc:	d1030000 	mrsle	r0, (UNDEF: 3)
    2bd0:	0000c208 	andeq	ip, r0, r8, lsl #4
    2bd4:	28091800 	stmdacs	r9, {fp, ip}
    2bd8:	0300001b 	movweq	r0, #27
    2bdc:	00da08d2 	ldrsbeq	r0, [sl], #130	; 0x82
    2be0:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
    2be4:	00001886 	andeq	r1, r0, r6, lsl #17
    2be8:	da08d403 	ble	237bfc <__bss_end+0x10a59c>
    2bec:	20000000 	andcs	r0, r0, r0
    2bf0:	00176009 	andseq	r6, r7, r9
    2bf4:	08d50300 	ldmeq	r5, {r8, r9}^
    2bf8:	000002f8 	strdeq	r0, [r0], -r8
    2bfc:	75620a24 	strbvc	r0, [r2, #-2596]!	; 0xfffff5dc
    2c00:	db030066 	blle	c2da0 <ramdisk+0x95748>
    2c04:	0001f307 	andeq	pc, r1, r7, lsl #6
    2c08:	06002800 	streq	r2, [r0], -r0, lsl #16
    2c0c:	0000aa04 	andeq	sl, r0, r4, lsl #20
    2c10:	49460e00 	stmdbmi	r6, {r9, sl, fp}^
    2c14:	dd03004c 	stcle	0, cr0, [r3, #-304]	; 0xfffffed0
    2c18:	00027803 	andeq	r7, r2, r3, lsl #16
    2c1c:	032c0d00 			; <UNDEFINED> instruction: 0x032c0d00
    2c20:	036109e3 	cmneq	r1, #3719168	; 0x38c000
    2c24:	6f0a0000 	svcvs	0x000a0000
    2c28:	03006a62 	movweq	r6, #2658	; 0xa62
    2c2c:	026c0ae4 	rsbeq	r0, ip, #228, 20	; 0xe4000
    2c30:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2c34:	000018c9 	andeq	r1, r0, r9, asr #17
    2c38:	c208e503 	andgt	lr, r8, #12582912	; 0xc00000
    2c3c:	10000000 	andne	r0, r0, r0
    2c40:	001bf509 	andseq	pc, fp, r9, lsl #10
    2c44:	08e60300 	stmiaeq	r6!, {r8, r9}^
    2c48:	000000c2 	andeq	r0, r0, r2, asr #1
    2c4c:	1b280914 	blne	a050a4 <__bss_end+0x8d7a44>
    2c50:	e7030000 	str	r0, [r3, -r0]
    2c54:	0000da08 	andeq	sp, r0, r8, lsl #20
    2c58:	640a1800 	strvs	r1, [sl], #-2048	; 0xfffff800
    2c5c:	03007269 	movweq	r7, #617	; 0x269
    2c60:	02f808e8 	rscseq	r0, r8, #232, 16	; 0xe80000
    2c64:	0a1c0000 	beq	702c6c <__bss_end+0x5d560c>
    2c68:	03006e66 	movweq	r6, #3686	; 0xe66
    2c6c:	036107e9 	cmneq	r1, #61079552	; 0x3a40000
    2c70:	00200000 	eoreq	r0, r0, r0
    2c74:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    2c78:	00037100 	andeq	r7, r3, r0, lsl #2
    2c7c:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    2c80:	000b0000 	andeq	r0, fp, r0
    2c84:	5249440e 	subpl	r4, r9, #234881024	; 0xe000000
    2c88:	03f00300 	mvnseq	r0, #0, 6
    2c8c:	0000030a 	andeq	r0, r0, sl, lsl #6
    2c90:	f603180d 			; <UNDEFINED> instruction: 0xf603180d
    2c94:	0003c809 	andeq	ip, r3, r9, lsl #16
    2c98:	17680900 	strbne	r0, [r8, -r0, lsl #18]!
    2c9c:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    2ca0:	0000ce0a 	andeq	ip, r0, sl, lsl #28
    2ca4:	53090000 	movwpl	r0, #36864	; 0x9000
    2ca8:	03000018 	movweq	r0, #24
    2cac:	00b607f8 	ldrshteq	r0, [r6], r8
    2cb0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    2cb4:	0000161f 	andeq	r1, r0, pc, lsl r6
    2cb8:	b607f903 	strlt	pc, [r7], -r3, lsl #18
    2cbc:	06000000 	streq	r0, [r0], -r0
    2cc0:	00178709 	andseq	r8, r7, r9, lsl #14
    2cc4:	07fa0300 	ldrbeq	r0, [sl, r0, lsl #6]!
    2cc8:	000000aa 	andeq	r0, r0, sl, lsr #1
    2ccc:	174b0908 	strbne	r0, [fp, -r8, lsl #18]
    2cd0:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    2cd4:	0003c808 	andeq	ip, r3, r8, lsl #16
    2cd8:	0b000900 	bleq	50e0 <_start-0xaf20>
    2cdc:	000000e6 	andeq	r0, r0, r6, ror #1
    2ce0:	000003d8 	ldrdeq	r0, [r0], -r8
    2ce4:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2ce8:	10000c00 	andne	r0, r0, r0, lsl #24
    2cec:	000018b1 			; <UNDEFINED> instruction: 0x000018b1
    2cf0:	03010103 	movweq	r0, #4355	; 0x1103
    2cf4:	0000037d 	andeq	r0, r0, sp, ror r3
    2cf8:	07031011 	smladeq	r3, r1, r0, r1
    2cfc:	04360901 	ldrteq	r0, [r6], #-2305	; 0xfffff6ff
    2d00:	66120000 	ldrvs	r0, [r2], -r0
    2d04:	0300746d 	movweq	r7, #1133	; 0x46d
    2d08:	aa070108 	bge	1c3130 <__bss_end+0x95ad0>
    2d0c:	00000000 	andeq	r0, r0, r0
    2d10:	00180713 	andseq	r0, r8, r3, lsl r7
    2d14:	01090300 	mrseq	r0, (UNDEF: 57)
    2d18:	0000aa07 	andeq	sl, r0, r7, lsl #20
    2d1c:	3c130100 	ldfccs	f0, [r3], {-0}
    2d20:	03000018 	movweq	r0, #24
    2d24:	9e07010a 	adflss	f0, f7, #2.0
    2d28:	04000000 	streq	r0, [r0], #-0
    2d2c:	0015f113 	andseq	pc, r5, r3, lsl r1	; <UNPREDICTABLE>
    2d30:	010b0300 	mrseq	r0, (UNDEF: 59)
    2d34:	00009e07 	andeq	r9, r0, r7, lsl #28
    2d38:	ff130800 			; <UNDEFINED> instruction: 0xff130800
    2d3c:	03000017 	movweq	r0, #23
    2d40:	c208010c 	andgt	r0, r8, #12, 2
    2d44:	0c000000 	stceq	0, cr0, [r0], {-0}
    2d48:	16601000 	strbtne	r1, [r0], -r0
    2d4c:	0d030000 	stceq	0, cr0, [r3, #-0]
    2d50:	03e50301 	mvneq	r0, #67108864	; 0x4000000
    2d54:	07140000 	ldreq	r0, [r4, -r0]
    2d58:	00005f01 	andeq	r5, r0, r1, lsl #30
    2d5c:	01130300 	tsteq	r3, r0, lsl #6
    2d60:	0004cb0e 	andeq	ip, r4, lr, lsl #22
    2d64:	16371500 	ldrtne	r1, [r7], -r0, lsl #10
    2d68:	15000000 	strne	r0, [r0, #-0]
    2d6c:	000016e2 	andeq	r1, r0, r2, ror #13
    2d70:	163d1501 	ldrtne	r1, [sp], -r1, lsl #10
    2d74:	15020000 	strne	r0, [r2, #-0]
    2d78:	000016a8 	andeq	r1, r0, r8, lsr #13
    2d7c:	180d1503 	stmdane	sp, {r0, r1, r8, sl, ip}
    2d80:	15040000 	strne	r0, [r4, #-0]
    2d84:	000015e6 	andeq	r1, r0, r6, ror #11
    2d88:	18b91505 	ldmne	r9!, {r0, r2, r8, sl, ip}
    2d8c:	15060000 	strne	r0, [r6, #-0]
    2d90:	000015c5 	andeq	r1, r0, r5, asr #11
    2d94:	176e1507 	strbne	r1, [lr, -r7, lsl #10]!
    2d98:	15080000 	strne	r0, [r8, #-0]
    2d9c:	00001625 	andeq	r1, r0, r5, lsr #12
    2da0:	16b51509 	ldrtne	r1, [r5], r9, lsl #10
    2da4:	150a0000 	strne	r0, [sl, #-0]
    2da8:	00001863 	andeq	r1, r0, r3, ror #16
    2dac:	1751150b 	ldrbne	r1, [r1, -fp, lsl #10]
    2db0:	150c0000 	strne	r0, [ip, #-0]
    2db4:	00001648 	andeq	r1, r0, r8, asr #12
    2db8:	1690150d 	ldrne	r1, [r0], sp, lsl #10
    2dbc:	150e0000 	strne	r0, [lr, #-0]
    2dc0:	00001797 	muleq	r0, r7, r7
    2dc4:	1874150f 	ldmdane	r4!, {r0, r1, r2, r3, r8, sl, ip}^
    2dc8:	15100000 	ldrne	r0, [r0, #-0]
    2dcc:	0000189e 	muleq	r0, lr, r8
    2dd0:	170c1511 	smladne	ip, r1, r5, r1
    2dd4:	15120000 	ldrne	r0, [r2, #-0]
    2dd8:	00001736 	andeq	r1, r0, r6, lsr r7
    2ddc:	f7100013 			; <UNDEFINED> instruction: 0xf7100013
    2de0:	03000017 	movweq	r0, #23
    2de4:	43030128 	movwmi	r0, #12584	; 0x3128
    2de8:	16000004 	strne	r0, [r0], -r4
    2dec:	00001b4f 	andeq	r1, r0, pc, asr #22
    2df0:	06012e01 	streq	r2, [r1], -r1, lsl #28
    2df4:	00024a4c 	andeq	r4, r2, ip, asr #20
    2df8:	000000e4 	andeq	r0, r0, r4, ror #1
    2dfc:	70179c01 	andsvc	r9, r7, r1, lsl #24
    2e00:	01000016 	tsteq	r0, r6, lsl r0
    2e04:	464406ab 	strbmi	r0, [r4], -fp, lsr #13
    2e08:	04080002 	streq	r0, [r8], #-2
    2e0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e10:	000005d8 	ldrdeq	r0, [r0], -r8
    2e14:	00003018 	andeq	r3, r0, r8, lsl r0
    2e18:	17ab0100 	strne	r0, [fp, r0, lsl #2]!
    2e1c:	00000041 	andeq	r0, r0, r1, asr #32
    2e20:	71cc9103 	bicvc	r9, ip, r3, lsl #2
    2e24:	00736619 	rsbseq	r6, r3, r9, lsl r6
    2e28:	040bac01 	streq	sl, [fp], #-3073	; 0xfffff3ff
    2e2c:	03000002 	movweq	r0, #2
    2e30:	197bc091 	ldmdbne	fp!, {r0, r4, r7, lr, pc}^
    2e34:	006c6966 	rsbeq	r6, ip, r6, ror #18
    2e38:	fe09ad01 	vdot.bf16	d10, d9, d1[0]
    2e3c:	03000002 	movweq	r0, #2
    2e40:	19779891 	ldmdbne	r7!, {r0, r4, r7, fp, ip, pc}^
    2e44:	00726964 	rsbseq	r6, r2, r4, ror #18
    2e48:	7109ae01 	tstvc	r9, r1, lsl #28
    2e4c:	03000003 	movweq	r0, #3
    2e50:	1976ec91 	ldmdbne	r6!, {r0, r4, r7, sl, fp, sp, lr, pc}^
    2e54:	00736572 	rsbseq	r6, r3, r2, ror r5
    2e58:	cb0daf01 	blgt	36ea64 <__bss_end+0x241404>
    2e5c:	02000004 	andeq	r0, r0, #4
    2e60:	62197791 	andsvs	r7, r9, #38010880	; 0x2440000
    2e64:	b0010077 	andlt	r0, r1, r7, ror r0
    2e68:	00009e0a 	andeq	r9, r0, sl, lsl #28
    2e6c:	e8910300 	ldm	r1, {r8, r9}
    2e70:	17a21a76 			; <UNDEFINED> instruction: 0x17a21a76
    2e74:	b1010000 	mrslt	r0, (UNDEF: 1)
    2e78:	0005d80a 	andeq	sp, r5, sl, lsl #16
    2e7c:	84910300 	ldrhi	r0, [r1], #768	; 0x300
    2e80:	15c01a76 	strbne	r1, [r0, #2678]	; 0xa76
    2e84:	b2010000 	andlt	r0, r1, #0
    2e88:	0001f30a 	andeq	pc, r1, sl, lsl #6
    2e8c:	84910300 	ldrhi	r0, [r1], #768	; 0x300
    2e90:	6e661972 			; <UNDEFINED> instruction: 0x6e661972
    2e94:	b301006f 	movwlt	r0, #4207	; 0x106f
    2e98:	0003d80d 	andeq	sp, r3, sp, lsl #16
    2e9c:	ec910300 	ldc	3, cr0, [r1], {0}
    2ea0:	16a01a71 			; <UNDEFINED> instruction: 0x16a01a71
    2ea4:	c5010000 	strgt	r0, [r1, #-0]
    2ea8:	0004360f 	andeq	r3, r4, pc, lsl #12
    2eac:	dc910300 	ldcle	3, cr0, [r1], {0}
    2eb0:	16d71a71 			; <UNDEFINED> instruction: 0x16d71a71
    2eb4:	e5010000 	str	r0, [r1, #-0]
    2eb8:	0000c20b 	andeq	ip, r0, fp, lsl #4
    2ebc:	d8910300 	ldmle	r1, {r8, r9}
    2ec0:	16fc1a71 			; <UNDEFINED> instruction: 0x16fc1a71
    2ec4:	e6010000 	str	r0, [r1], -r0
    2ec8:	0002660c 	andeq	r6, r2, ip, lsl #12
    2ecc:	d4910300 	ldrle	r0, [r1], #768	; 0x300
    2ed0:	48841b71 	stmmi	r4, {r0, r4, r5, r6, r8, r9, fp, ip}
    2ed4:	01400002 	cmpeq	r0, r2
    2ed8:	ef1a0000 	svc	0x001a0000
    2edc:	01000017 	tsteq	r0, r7, lsl r0
    2ee0:	008015fe 	strdeq	r1, [r0], lr
    2ee4:	91020000 	mrsls	r0, (UNDEF: 2)
    2ee8:	0b000070 	bleq	30b0 <_start-0xcf50>
    2eec:	00000074 	andeq	r0, r0, r4, ror r0
    2ef0:	000005e8 	andeq	r0, r0, r8, ror #11
    2ef4:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2ef8:	17006300 	strne	r6, [r0, -r0, lsl #6]
    2efc:	00001836 	andeq	r1, r0, r6, lsr r8
    2f00:	00069f01 	andeq	r9, r6, r1, lsl #30
    2f04:	44000246 	strmi	r0, [r0], #-582	; 0xfffffdba
    2f08:	01000000 	mrseq	r0, (UNDEF: 0)
    2f0c:	00061b9c 	muleq	r6, ip, fp
    2f10:	00301800 	eorseq	r1, r0, r0, lsl #16
    2f14:	9f010000 	svcls	0x00010000
    2f18:	00004112 	andeq	r4, r0, r2, lsl r1
    2f1c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2f20:	01006919 	tsteq	r0, r9, lsl r9
    2f24:	002509a2 	eoreq	r0, r5, r2, lsr #19
    2f28:	91020000 	mrsls	r0, (UNDEF: 2)
    2f2c:	30170074 	andscc	r0, r7, r4, ror r0
    2f30:	01000018 	tsteq	r0, r8, lsl r0
    2f34:	45c40694 	strbmi	r0, [r4, #1684]	; 0x694
    2f38:	003c0002 	eorseq	r0, ip, r2
    2f3c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2f40:	0000064e 	andeq	r0, r0, lr, asr #12
    2f44:	00003018 	andeq	r3, r0, r8, lsl r0
    2f48:	12940100 	addsne	r0, r4, #0, 2
    2f4c:	00000041 	andeq	r0, r0, r1, asr #32
    2f50:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    2f54:	97010069 	strls	r0, [r1, -r9, rrx]
    2f58:	00002509 	andeq	r2, r0, r9, lsl #10
    2f5c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2f60:	15b11c00 	ldrne	r1, [r1, #3072]!	; 0xc00
    2f64:	8f010000 	svchi	0x00010000
    2f68:	0245ac06 	subeq	sl, r5, #1536	; 0x600
    2f6c:	00001800 	andeq	r1, r0, r0, lsl #16
    2f70:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    2f74:	000015fd 	strdeq	r1, [r0], -sp
    2f78:	c4067301 	strgt	r7, [r6], #-769	; 0xfffffcff
    2f7c:	e8000243 	stmda	r0, {r0, r1, r6, r9}
    2f80:	01000001 	tsteq	r0, r1
    2f84:	0006869c 	muleq	r6, ip, r6
    2f88:	65721d00 	ldrbvs	r1, [r2, #-3328]!	; 0xfffff300
    2f8c:	73010073 	movwvc	r0, #4211	; 0x1073
    2f90:	0004cb20 	andeq	ip, r4, r0, lsr #22
    2f94:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    2f98:	188f1700 	stmne	pc, {r8, r9, sl, ip}	; <UNPREDICTABLE>
    2f9c:	5d010000 	stcpl	0, cr0, [r1, #-0]
    2fa0:	0242e806 	subeq	lr, r2, #393216	; 0x60000
    2fa4:	0000dc00 	andeq	sp, r0, r0, lsl #24
    2fa8:	c89c0100 	ldmgt	ip, {r8}
    2fac:	1d000006 	stcne	0, cr0, [r0, #-24]	; 0xffffffe8
    2fb0:	006d756e 	rsbeq	r7, sp, lr, ror #10
    2fb4:	cb1d5d01 	blgt	75a3c0 <__bss_end+0x62cd60>
    2fb8:	02000004 	andeq	r0, r0, #4
    2fbc:	62196f91 	andsvs	r6, r9, #580	; 0x244
    2fc0:	01006675 	tsteq	r0, r5, ror r6
    2fc4:	06c80a5e 			; <UNDEFINED> instruction: 0x06c80a5e
    2fc8:	91020000 	mrsls	r0, (UNDEF: 2)
    2fcc:	00691970 	rsbeq	r1, r9, r0, ror r9
    2fd0:	25095f01 	strcs	r5, [r9, #-3841]	; 0xfffff0ff
    2fd4:	02000000 	andeq	r0, r0, #0
    2fd8:	0b007491 	bleq	20224 <pxPortInitialiseStack+0x224>
    2fdc:	00000074 	andeq	r0, r0, r4, ror r0
    2fe0:	000006d8 	ldrdeq	r0, [r0], -r8
    2fe4:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2fe8:	17000300 	strne	r0, [r0, -r0, lsl #6]
    2fec:	00001842 	andeq	r1, r0, r2, asr #16
    2ff0:	9c065601 	stcls	6, cr5, [r6], {1}
    2ff4:	4c000242 	sfmmi	f0, 4, [r0], {66}	; 0x42
    2ff8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ffc:	0006fc9c 	muleq	r6, ip, ip
    3000:	00731d00 	rsbseq	r1, r3, r0, lsl #26
    3004:	801c5601 	andshi	r5, ip, r1, lsl #12
    3008:	02000000 	andeq	r0, r0, #0
    300c:	1e007491 	mcrne	4, 0, r7, cr0, cr1, {4}
    3010:	00001859 	andeq	r1, r0, r9, asr r8
    3014:	4c065101 	stfmis	f5, [r6], {1}
    3018:	50000242 	andpl	r0, r0, r2, asr #4
    301c:	01000000 	mrseq	r0, (UNDEF: 0)
    3020:	00631d9c 	mlseq	r3, ip, sp, r1
    3024:	74155101 	ldrvc	r5, [r5], #-257	; 0xfffffeff
    3028:	02000000 	andeq	r0, r0, #0
    302c:	00007791 	muleq	r0, r1, r7
    3030:	00001e22 	andeq	r1, r0, r2, lsr #28
    3034:	0da20004 	stceq	0, cr0, [r2, #16]!
    3038:	01040000 	mrseq	r0, (UNDEF: 4)
    303c:	00000037 	andeq	r0, r0, r7, lsr r0
    3040:	001add0c 	andseq	sp, sl, ip, lsl #26
    3044:	0000ae00 	andeq	sl, r0, r0, lsl #28
    3048:	024b3000 	subeq	r3, fp, #0
    304c:	00658800 	rsbeq	r8, r5, r0, lsl #16
    3050:	001de200 	andseq	lr, sp, r0, lsl #4
    3054:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    3058:	00746e69 	rsbseq	r6, r4, r9, ror #28
    305c:	59070403 	stmdbpl	r7, {r0, r1, sl}
    3060:	03000006 	movweq	r0, #6
    3064:	017b0508 	cmneq	fp, r8, lsl #10
    3068:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    306c:	0001a904 	andeq	sl, r1, r4, lsl #18
    3070:	06010300 	streq	r0, [r1], -r0, lsl #6
    3074:	00000668 	andeq	r0, r0, r8, ror #12
    3078:	66080103 	strvs	r0, [r8], -r3, lsl #2
    307c:	03000006 	movweq	r0, #6
    3080:	07310502 	ldreq	r0, [r1, -r2, lsl #10]!
    3084:	02030000 	andeq	r0, r3, #0
    3088:	00009b07 	andeq	r9, r0, r7, lsl #22
    308c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    3090:	00000180 	andeq	r0, r0, r0, lsl #3
    3094:	54070403 	strpl	r0, [r7], #-1027	; 0xfffffbfd
    3098:	03000006 	movweq	r0, #6
    309c:	064f0708 	strbeq	r0, [pc], -r8, lsl #14
    30a0:	04040000 	streq	r0, [r4], #-0
    30a4:	6f080103 	svcvs	0x00080103
    30a8:	05000006 	streq	r0, [r0, #-6]
    30ac:	00000074 	andeq	r0, r0, r4, ror r0
    30b0:	007b0406 	rsbseq	r0, fp, r6, lsl #8
    30b4:	1d070000 	stcne	0, cr0, [r7, #-0]
    30b8:	02000018 	andeq	r0, r0, #24
    30bc:	00561931 	subseq	r1, r6, r1, lsr r9
    30c0:	03070000 	movweq	r0, #28672	; 0x7000
    30c4:	02000017 	andeq	r0, r0, #23
    30c8:	00641934 	rsbeq	r1, r4, r4, lsr r9
    30cc:	83070000 	movwhi	r0, #28672	; 0x7000
    30d0:	03000016 	movweq	r0, #22
    30d4:	002c1632 	eoreq	r1, ip, r2, lsr r6
    30d8:	f8070000 			; <UNDEFINED> instruction: 0xf8070000
    30dc:	03000015 	movweq	r0, #21
    30e0:	00481733 	subeq	r1, r8, r3, lsr r7
    30e4:	aa050000 	bge	1430ec <__bss_end+0x15a8c>
    30e8:	07000000 	streq	r0, [r0, -r0]
    30ec:	000016c9 	andeq	r1, r0, r9, asr #13
    30f0:	86133403 	ldrhi	r3, [r3], -r3, lsl #8
    30f4:	05000000 	streq	r0, [r0, #-0]
    30f8:	000000bb 	strheq	r0, [r0], -fp
    30fc:	0016c807 	andseq	ip, r6, r7, lsl #16
    3100:	13350300 	teqne	r5, #0, 6
    3104:	00000092 	muleq	r0, r2, r0
    3108:	00178f07 	andseq	r8, r7, r7, lsl #30
    310c:	0f530300 	svceq	0x00530300
    3110:	000000cc 	andeq	r0, r0, ip, asr #1
    3114:	0015e007 	andseq	lr, r5, r7
    3118:	0f540300 	svceq	0x00540300
    311c:	000000cc 	andeq	r0, r0, ip, asr #1
    3120:	0000e405 	andeq	lr, r0, r5, lsl #8
    3124:	16190700 	ldrne	r0, [r9], -r0, lsl #14
    3128:	6a030000 	bvs	c3130 <ramdisk+0x95ad8>
    312c:	0000740e 	andeq	r7, r0, lr, lsl #8
    3130:	00f50500 	rscseq	r0, r5, r0, lsl #10
    3134:	30080000 	andcc	r0, r8, r0
    3138:	09850302 	stmibeq	r5, {r1, r8, r9}
    313c:	00000207 	andeq	r0, r0, r7, lsl #4
    3140:	0015d809 	andseq	sp, r5, r9, lsl #16
    3144:	07860300 	streq	r0, [r6, r0, lsl #6]
    3148:	000000aa 	andeq	r0, r0, sl, lsr #1
    314c:	15bb0900 	ldrne	r0, [fp, #2304]!	; 0x900
    3150:	87030000 	strhi	r0, [r3, -r0]
    3154:	0000aa07 	andeq	sl, r0, r7, lsl #20
    3158:	ce090100 	adfgte	f0, f1, f0
    315c:	03000018 	movweq	r0, #24
    3160:	00aa0788 	adceq	r0, sl, r8, lsl #15
    3164:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    3168:	0000184c 	andeq	r1, r0, ip, asr #16
    316c:	aa078903 	bge	1e5580 <__bss_end+0xb7f20>
    3170:	03000000 	movweq	r0, #0
    3174:	0016f609 	andseq	pc, r6, r9, lsl #12
    3178:	078a0300 	streq	r0, [sl, r0, lsl #6]
    317c:	000000aa 	andeq	r0, r0, sl, lsr #1
    3180:	16ce0904 	strbne	r0, [lr], r4, lsl #18
    3184:	8b030000 	blhi	c318c <ramdisk+0x95b34>
    3188:	0000aa07 	andeq	sl, r0, r7, lsl #20
    318c:	690a0500 	stmdbvs	sl, {r8, sl}
    3190:	8c030064 	stchi	0, cr0, [r3], {100}	; 0x64
    3194:	0000bb07 	andeq	fp, r0, r7, lsl #22
    3198:	26090600 	strcs	r0, [r9], -r0, lsl #12
    319c:	03000018 	movweq	r0, #24
    31a0:	00bb078d 	adcseq	r0, fp, sp, lsl #15
    31a4:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    31a8:	0000166a 	andeq	r1, r0, sl, ror #12
    31ac:	bb078e03 	bllt	1e69c0 <__bss_end+0xb9360>
    31b0:	0a000000 	beq	31b8 <_start-0xce48>
    31b4:	00172c09 	andseq	r2, r7, r9, lsl #24
    31b8:	08990300 	ldmeq	r9, {r8, r9}
    31bc:	000000cc 	andeq	r0, r0, ip, asr #1
    31c0:	160f090c 	strne	r0, [pc], -ip, lsl #18
    31c4:	9a030000 	bls	c31cc <ramdisk+0x95b74>
    31c8:	0000cc08 	andeq	ip, r0, r8, lsl #24
    31cc:	cf091000 	svcgt	0x00091000
    31d0:	03000015 	movweq	r0, #21
    31d4:	00cc08a4 	sbceq	r0, ip, r4, lsr #17
    31d8:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    31dc:	00001768 	andeq	r1, r0, r8, ror #14
    31e0:	cc08a503 	cfstr32gt	mvfx10, [r8], {3}
    31e4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    31e8:	00168809 	andseq	r8, r6, r9, lsl #16
    31ec:	08a60300 	stmiaeq	r6!, {r8, r9}
    31f0:	000000e4 	andeq	r0, r0, r4, ror #1
    31f4:	1777091c 			; <UNDEFINED> instruction: 0x1777091c
    31f8:	a7030000 	strge	r0, [r3, -r0]
    31fc:	0000e408 	andeq	lr, r0, r8, lsl #8
    3200:	7b092000 	blvc	24b208 <__bss_end+0x11dba8>
    3204:	03000016 	movweq	r0, #22
    3208:	00e408a8 	rsceq	r0, r4, r8, lsr #17
    320c:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    3210:	00001723 	andeq	r1, r0, r3, lsr #14
    3214:	e408a903 	str	sl, [r8], #-2307	; 0xfffff6fd
    3218:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    321c:	00187e09 	andseq	r7, r8, r9, lsl #28
    3220:	08ad0300 	stmiaeq	sp!, {r8, r9}
    3224:	000000e4 	andeq	r0, r0, r4, ror #1
    3228:	69770a2c 	ldmdbvs	r7!, {r2, r3, r5, r9, fp}^
    322c:	ae03006e 	cdpge	0, 0, cr0, cr3, cr14, {3}
    3230:	00020707 	andeq	r0, r2, r7, lsl #14
    3234:	0b003000 	bleq	f23c <_start-0xdc4>
    3238:	000000aa 	andeq	r0, r0, sl, lsr #1
    323c:	00000218 	andeq	r0, r0, r8, lsl r2
    3240:	00002c0c 	andeq	r2, r0, ip, lsl #24
    3244:	0001ff00 	andeq	pc, r1, r0, lsl #30
    3248:	0017a907 	andseq	sl, r7, r7, lsl #18
    324c:	03af0300 			; <UNDEFINED> instruction: 0x03af0300
    3250:	00000106 	andeq	r0, r0, r6, lsl #2
    3254:	b503100d 	strlt	r1, [r3, #-13]
    3258:	00027a09 	andeq	r7, r2, r9, lsl #20
    325c:	73660a00 	cmnvc	r6, #0, 20
    3260:	09b60300 	ldmibeq	r6!, {r8, r9}
    3264:	0000027a 	andeq	r0, r0, sl, ror r2
    3268:	64690a00 	strbtvs	r0, [r9], #-2560	; 0xfffff600
    326c:	07b70300 	ldreq	r0, [r7, r0, lsl #6]!
    3270:	000000bb 	strheq	r0, [r0], -fp
    3274:	18180904 	ldmdane	r8, {r2, r8, fp}
    3278:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    327c:	0000aa07 	andeq	sl, r0, r7, lsl #20
    3280:	67090600 	strvs	r0, [r9, -r0, lsl #12]
    3284:	0300001c 	movweq	r0, #28
    3288:	00aa07b9 	strhteq	r0, [sl], r9
    328c:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    3290:	00001659 	andeq	r1, r0, r9, asr r6
    3294:	cc08ba03 			; <UNDEFINED> instruction: 0xcc08ba03
    3298:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    329c:	00177f09 	andseq	r7, r7, r9, lsl #30
    32a0:	0abb0300 	beq	feec3ea8 <_estack+0xf6ea3ea8>
    32a4:	000000d8 	ldrdeq	r0, [r0], -r8
    32a8:	0406000c 	streq	r0, [r6], #-12
    32ac:	00000218 	andeq	r0, r0, r8, lsl r2
    32b0:	0016ee07 	andseq	lr, r6, r7, lsl #28
    32b4:	03c60300 	biceq	r0, r6, #0, 6
    32b8:	00000224 	andeq	r0, r0, r4, lsr #4
    32bc:	03022808 	movweq	r2, #10248	; 0x2808
    32c0:	030c09cc 	movweq	r0, #51660	; 0xc9cc
    32c4:	6f0a0000 	svcvs	0x000a0000
    32c8:	03006a62 	movweq	r6, #2658	; 0xa62
    32cc:	02800acd 	addeq	r0, r0, #839680	; 0xcd000
    32d0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    32d4:	000016d2 	ldrdeq	r1, [r0], -r2
    32d8:	aa07ce03 	bge	1f6aec <__bss_end+0xc948c>
    32dc:	10000000 	andne	r0, r0, r0
    32e0:	7272650a 	rsbsvc	r6, r2, #41943040	; 0x2800000
    32e4:	07cf0300 	strbeq	r0, [pc, r0, lsl #6]
    32e8:	000000aa 	andeq	r0, r0, sl, lsr #1
    32ec:	19f40911 	ldmibne	r4!, {r0, r4, r8, fp}^
    32f0:	d0030000 	andle	r0, r3, r0
    32f4:	0000d80a 	andeq	sp, r0, sl, lsl #16
    32f8:	f5091400 			; <UNDEFINED> instruction: 0xf5091400
    32fc:	0300001b 	movweq	r0, #27
    3300:	00cc08d1 	ldrdeq	r0, [ip], #129	; 0x81
    3304:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    3308:	00001b28 	andeq	r1, r0, r8, lsr #22
    330c:	e408d203 	str	sp, [r8], #-515	; 0xfffffdfd
    3310:	1c000000 	stcne	0, cr0, [r0], {-0}
    3314:	00188609 	andseq	r8, r8, r9, lsl #12
    3318:	08d40300 	ldmeq	r4, {r8, r9}^
    331c:	000000e4 	andeq	r0, r0, r4, ror #1
    3320:	17600920 	strbne	r0, [r0, -r0, lsr #18]!
    3324:	d5030000 	strle	r0, [r3, #-0]
    3328:	00030c08 	andeq	r0, r3, r8, lsl #24
    332c:	620a2400 	andvs	r2, sl, #0, 8
    3330:	03006675 	movweq	r6, #1653	; 0x675
    3334:	020707db 	andeq	r0, r7, #57409536	; 0x36c0000
    3338:	00280000 	eoreq	r0, r8, r0
    333c:	00aa0406 	adceq	r0, sl, r6, lsl #8
    3340:	460e0000 	strmi	r0, [lr], -r0
    3344:	03004c49 	movweq	r4, #3145	; 0xc49
    3348:	028c03dd 	addeq	r0, ip, #1946157059	; 0x74000003
    334c:	2c0d0000 	stccs	0, cr0, [sp], {-0}
    3350:	7509e303 	strvc	lr, [r9, #-771]	; 0xfffffcfd
    3354:	0a000003 	beq	3368 <_start-0xcc98>
    3358:	006a626f 	rsbeq	r6, sl, pc, ror #4
    335c:	800ae403 	andhi	lr, sl, r3, lsl #8
    3360:	00000002 	andeq	r0, r0, r2
    3364:	0018c909 	andseq	ip, r8, r9, lsl #18
    3368:	08e50300 	stmiaeq	r5!, {r8, r9}^
    336c:	000000cc 	andeq	r0, r0, ip, asr #1
    3370:	1bf50910 	blne	ffd457b8 <_estack+0xf7d257b8>
    3374:	e6030000 	str	r0, [r3], -r0
    3378:	0000cc08 	andeq	ip, r0, r8, lsl #24
    337c:	28091400 	stmdacs	r9, {sl, ip}
    3380:	0300001b 	movweq	r0, #27
    3384:	00e408e7 	rsceq	r0, r4, r7, ror #17
    3388:	0a180000 	beq	603390 <__bss_end+0x4d5d30>
    338c:	00726964 	rsbseq	r6, r2, r4, ror #18
    3390:	0c08e803 	stceq	8, cr14, [r8], {3}
    3394:	1c000003 	stcne	0, cr0, [r0], {3}
    3398:	006e660a 	rsbeq	r6, lr, sl, lsl #12
    339c:	7507e903 	strvc	lr, [r7, #-2307]	; 0xfffff6fd
    33a0:	20000003 	andcs	r0, r0, r3
    33a4:	00aa0b00 	adceq	r0, sl, r0, lsl #22
    33a8:	03850000 	orreq	r0, r5, #0
    33ac:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    33b0:	0b000000 	bleq	33b8 <_start-0xcc48>
    33b4:	49440e00 	stmdbmi	r4, {r9, sl, fp}^
    33b8:	f0030052 			; <UNDEFINED> instruction: 0xf0030052
    33bc:	00031e03 	andeq	r1, r3, r3, lsl #28
    33c0:	03180d00 	tsteq	r8, #0, 26
    33c4:	03dc09f6 	bicseq	r0, ip, #4030464	; 0x3d8000
    33c8:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
    33cc:	03000017 	movweq	r0, #23
    33d0:	00d80af7 	ldrsheq	r0, [r8], #167	; 0xa7
    33d4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    33d8:	00001853 	andeq	r1, r0, r3, asr r8
    33dc:	bb07f803 	bllt	2013f0 <__bss_end+0xd3d90>
    33e0:	04000000 	streq	r0, [r0], #-0
    33e4:	00161f09 	andseq	r1, r6, r9, lsl #30
    33e8:	07f90300 	ldrbeq	r0, [r9, r0, lsl #6]!
    33ec:	000000bb 	strheq	r0, [r0], -fp
    33f0:	17870906 	strne	r0, [r7, r6, lsl #18]
    33f4:	fa030000 	blx	c33fc <ramdisk+0x95da4>
    33f8:	0000aa07 	andeq	sl, r0, r7, lsl #20
    33fc:	4b090800 	blmi	245404 <__bss_end+0x117da4>
    3400:	03000017 	movweq	r0, #23
    3404:	03dc08ff 	bicseq	r0, ip, #16711680	; 0xff0000
    3408:	00090000 	andeq	r0, r9, r0
    340c:	0000f50b 	andeq	pc, r0, fp, lsl #10
    3410:	0003ec00 	andeq	lr, r3, r0, lsl #24
    3414:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    3418:	000c0000 	andeq	r0, ip, r0
    341c:	0018b110 	andseq	fp, r8, r0, lsl r1
    3420:	01010300 	mrseq	r0, SP_irq
    3424:	00039103 	andeq	r9, r3, r3, lsl #2
    3428:	03101100 	tsteq	r0, #0, 2
    342c:	4a090107 	bmi	243850 <__bss_end+0x1161f0>
    3430:	12000004 	andne	r0, r0, #4
    3434:	00746d66 	rsbseq	r6, r4, r6, ror #26
    3438:	07010803 	streq	r0, [r1, -r3, lsl #16]
    343c:	000000aa 	andeq	r0, r0, sl, lsr #1
    3440:	18071300 	stmdane	r7, {r8, r9, ip}
    3444:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
    3448:	00aa0701 	adceq	r0, sl, r1, lsl #14
    344c:	13010000 	movwne	r0, #4096	; 0x1000
    3450:	0000183c 	andeq	r1, r0, ip, lsr r8
    3454:	07010a03 	streq	r0, [r1, -r3, lsl #20]
    3458:	0000009e 	muleq	r0, lr, r0
    345c:	15f11304 	ldrbne	r1, [r1, #772]!	; 0x304
    3460:	0b030000 	bleq	c3468 <ramdisk+0x95e10>
    3464:	009e0701 	addseq	r0, lr, r1, lsl #14
    3468:	13080000 	movwne	r0, #32768	; 0x8000
    346c:	000017ff 	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
    3470:	08010c03 	stmdaeq	r1, {r0, r1, sl, fp}
    3474:	000000cc 	andeq	r0, r0, ip, asr #1
    3478:	6010000c 	andsvs	r0, r0, ip
    347c:	03000016 	movweq	r0, #22
    3480:	f903010d 			; <UNDEFINED> instruction: 0xf903010d
    3484:	05000003 	streq	r0, [r0, #-3]
    3488:	0000044a 	andeq	r0, r0, sl, asr #8
    348c:	48010714 	stmdami	r1, {r2, r4, r8, r9, sl}
    3490:	03000000 	movweq	r0, #0
    3494:	e40e0113 	str	r0, [lr], #-275	; 0xfffffeed
    3498:	15000004 	strne	r0, [r0, #-4]
    349c:	00001637 	andeq	r1, r0, r7, lsr r6
    34a0:	16e21500 	strbtne	r1, [r2], r0, lsl #10
    34a4:	15010000 	strne	r0, [r1, #-0]
    34a8:	0000163d 	andeq	r1, r0, sp, lsr r6
    34ac:	16a81502 	strtne	r1, [r8], r2, lsl #10
    34b0:	15030000 	strne	r0, [r3, #-0]
    34b4:	0000180d 	andeq	r1, r0, sp, lsl #16
    34b8:	15e61504 	strbne	r1, [r6, #1284]!	; 0x504
    34bc:	15050000 	strne	r0, [r5, #-0]
    34c0:	000018b9 			; <UNDEFINED> instruction: 0x000018b9
    34c4:	15c51506 	strbne	r1, [r5, #1286]	; 0x506
    34c8:	15070000 	strne	r0, [r7, #-0]
    34cc:	0000176e 	andeq	r1, r0, lr, ror #14
    34d0:	16251508 	strtne	r1, [r5], -r8, lsl #10
    34d4:	15090000 	strne	r0, [r9, #-0]
    34d8:	000016b5 			; <UNDEFINED> instruction: 0x000016b5
    34dc:	1863150a 	stmdane	r3!, {r1, r3, r8, sl, ip}^
    34e0:	150b0000 	strne	r0, [fp, #-0]
    34e4:	00001751 	andeq	r1, r0, r1, asr r7
    34e8:	1648150c 	strbne	r1, [r8], -ip, lsl #10
    34ec:	150d0000 	strne	r0, [sp, #-0]
    34f0:	00001690 	muleq	r0, r0, r6
    34f4:	1797150e 	ldrne	r1, [r7, lr, lsl #10]
    34f8:	150f0000 	strne	r0, [pc, #-0]	; 3500 <_start-0xcb00>
    34fc:	00001874 	andeq	r1, r0, r4, ror r8
    3500:	189e1510 	ldmne	lr, {r4, r8, sl, ip}
    3504:	15110000 	ldrne	r0, [r1, #-0]
    3508:	0000170c 	andeq	r1, r0, ip, lsl #14
    350c:	17361512 			; <UNDEFINED> instruction: 0x17361512
    3510:	00130000 	andseq	r0, r3, r0
    3514:	0017f710 	andseq	pc, r7, r0, lsl r7	; <UNPREDICTABLE>
    3518:	01280300 			; <UNDEFINED> instruction: 0x01280300
    351c:	00045c03 	andeq	r5, r4, r3, lsl #24
    3520:	1c030700 	stcne	7, cr0, [r3], {-0}
    3524:	0d040000 	stceq	0, cr0, [r4, #-0]
    3528:	0000aa0e 	andeq	sl, r0, lr, lsl #20
    352c:	01071600 	tsteq	r7, r0, lsl #12
    3530:	00000048 	andeq	r0, r0, r8, asr #32
    3534:	2a0e1004 	bcs	38754c <__bss_end+0x259eec>
    3538:	15000005 	strne	r0, [r0, #-5]
    353c:	00001c18 	andeq	r1, r0, r8, lsl ip
    3540:	1a581500 	bne	1608948 <__bss_end+0x14db2e8>
    3544:	15010000 	strne	r0, [r1, #-0]
    3548:	00001ad3 	ldrdeq	r1, [r0], -r3
    354c:	1c381502 	cfldr32ne	mvfx1, [r8], #-8
    3550:	15030000 	strne	r0, [r3, #-0]
    3554:	00001aae 	andeq	r1, r0, lr, lsr #21
    3558:	7a0b0004 	bvc	2c3570 <__bss_end+0x195f10>
    355c:	3a000002 	bcc	356c <_start-0xca94>
    3560:	0f000005 	svceq	0x00000005
    3564:	0000002c 	andeq	r0, r0, ip, lsr #32
    3568:	60170000 	andsvs	r0, r7, r0
    356c:	01000019 	tsteq	r0, r9, lsl r0
    3570:	2a0f01d1 	bcs	3c3cbc <__bss_end+0x29665c>
    3574:	05000005 	streq	r0, [r0, #-5]
    3578:	02d65003 	sbcseq	r5, r6, #3
    357c:	1aa91700 	bne	fea49184 <_estack+0xf6a29184>
    3580:	d2010000 	andle	r0, r1, #0
    3584:	00bb0d01 	adcseq	r0, fp, r1, lsl #26
    3588:	03050000 	movweq	r0, #20480	; 0x5000
    358c:	0002d654 	andeq	sp, r2, r4, asr r6
    3590:	0000b60b 	andeq	fp, r0, fp, lsl #12
    3594:	00057000 	andeq	r7, r5, r0
    3598:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    359c:	007f0000 	rsbseq	r0, pc, r0
    35a0:	00056005 	andeq	r6, r5, r5
    35a4:	1ab91700 	bne	fee491ac <_estack+0xf6e291ac>
    35a8:	56010000 	strpl	r0, [r1], -r0
    35ac:	05701302 	ldrbeq	r1, [r0, #-770]!	; 0xfffffcfe
    35b0:	03050000 	movweq	r0, #20480	; 0x5000
    35b4:	0002c0c4 	andeq	ip, r2, r4, asr #1
    35b8:	00199118 	andseq	r9, r9, r8, lsl r1
    35bc:	170c0100 	strne	r0, [ip, -r0, lsl #2]
    35c0:	0004e409 	andeq	lr, r4, r9, lsl #8
    35c4:	02a22400 	adceq	r2, r2, #0, 8
    35c8:	000e9400 	andeq	r9, lr, r0, lsl #8
    35cc:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    35d0:	19000008 	stmdbne	r0, {r3}
    35d4:	000019e2 	andeq	r1, r0, r2, ror #19
    35d8:	0f170d01 	svceq	0x00170d01
    35dc:	00000815 	andeq	r0, r0, r5, lsl r8
    35e0:	7f849103 	svcvc	0x00849103
    35e4:	74706f1a 	ldrbtvc	r6, [r0], #-3866	; 0xfffff0e6
    35e8:	170e0100 	strne	r0, [lr, -r0, lsl #2]
    35ec:	00081b13 	andeq	r1, r8, r3, lsl fp
    35f0:	80910300 	addshi	r0, r1, r0, lsl #6
    35f4:	15c0197f 	strbne	r1, [r0, #2431]	; 0x97f
    35f8:	0f010000 	svceq	0x00010000
    35fc:	00720817 	rsbseq	r0, r2, r7, lsl r8
    3600:	91030000 	mrsls	r0, (UNDEF: 3)
    3604:	6c1a7efc 	ldcvs	14, cr7, [sl], {252}	; 0xfc
    3608:	01006e65 	tsteq	r0, r5, ror #28
    360c:	9e071710 	mcrls	7, 0, r1, cr7, cr0, {0}
    3610:	03000000 	movweq	r0, #0
    3614:	1b7ef891 	blne	1fc1860 <__bss_end+0x1e94200>
    3618:	00747363 	rsbseq	r7, r4, r3, ror #6
    361c:	14171301 	ldrne	r1, [r7], #-769	; 0xfffffcff
    3620:	00000831 	andeq	r0, r0, r1, lsr r8
    3624:	c1b40305 			; <UNDEFINED> instruction: 0xc1b40305
    3628:	48170002 	ldmdami	r7, {r1}
    362c:	01000019 	tsteq	r0, r9, lsl r0
    3630:	31141714 	tstcc	r4, r4, lsl r7
    3634:	05000008 	streq	r0, [r0, #-8]
    3638:	02c1a403 	sbceq	sl, r1, #50331648	; 0x3000000
    363c:	194e1700 	stmdbne	lr, {r8, r9, sl, ip}^
    3640:	15010000 	strne	r0, [r1, #-0]
    3644:	04571917 	ldrbeq	r1, [r7], #-2327	; 0xfffff6e9
    3648:	03050000 	movweq	r0, #20480	; 0x5000
    364c:	0002c194 	muleq	r2, r4, r1
    3650:	001c1f17 	andseq	r1, ip, r7, lsl pc
    3654:	17160100 	ldrne	r0, [r6, -r0, lsl #2]
    3658:	0000aa07 	andeq	sl, r0, r7, lsl #20
    365c:	bd910300 	ldclt	3, cr0, [r1]
    3660:	1b9c177f 	blne	fe709464 <_estack+0xf66e9464>
    3664:	16010000 	strne	r0, [r1], -r0
    3668:	00aa0e17 	adceq	r0, sl, r7, lsl lr
    366c:	91020000 	mrsls	r0, (UNDEF: 2)
    3670:	79731b5b 	ldmdbvc	r3!, {r0, r1, r3, r4, r6, r8, r9, fp, ip}^
    3674:	16010073 			; <UNDEFINED> instruction: 0x16010073
    3678:	00aa1417 	adceq	r1, sl, r7, lsl r4
    367c:	91020000 	mrsls	r0, (UNDEF: 2)
    3680:	15bb175a 	ldrne	r1, [fp, #1882]!	; 0x75a
    3684:	16010000 	strne	r0, [r1], -r0
    3688:	00aa1917 	adceq	r1, sl, r7, lsl r9
    368c:	91020000 	mrsls	r0, (UNDEF: 2)
    3690:	18f41743 	ldmne	r4!, {r0, r1, r6, r8, r9, sl, ip}^
    3694:	16010000 	strne	r0, [r1], -r0
    3698:	00aa1f17 	adceq	r1, sl, r7, lsl pc
    369c:	91020000 	mrsls	r0, (UNDEF: 2)
    36a0:	75621b42 	strbvc	r1, [r2, #-2882]!	; 0xfffff4be
    36a4:	17010066 	strne	r0, [r1, -r6, rrx]
    36a8:	030c0817 	movweq	r0, #51223	; 0xc817
    36ac:	91030000 	mrsls	r0, (UNDEF: 3)
    36b0:	701c7fac 	andsvc	r7, ip, ip, lsr #31
    36b4:	01006574 	tsteq	r0, r4, ror r5
    36b8:	0c081718 	stceq	7, cr1, [r8], {24}
    36bc:	1b000003 	blne	36d0 <_start-0xc930>
    36c0:	01007373 	tsteq	r0, r3, ror r3
    36c4:	bb071719 	bllt	1c9330 <__bss_end+0x9bcd0>
    36c8:	03000000 	movweq	r0, #0
    36cc:	177fbe91 			; <UNDEFINED> instruction: 0x177fbe91
    36d0:	00001902 	andeq	r1, r0, r2, lsl #18
    36d4:	08171a01 	ldmdaeq	r7, {r0, r9, fp, ip}
    36d8:	000000cc 	andeq	r0, r0, ip, asr #1
    36dc:	7fb09103 	svcvc	0x00b09103
    36e0:	001a6817 	andseq	r6, sl, r7, lsl r8
    36e4:	171a0100 	ldrne	r0, [sl, -r0, lsl #2]
    36e8:	0000cc10 	andeq	ip, r0, r0, lsl ip
    36ec:	98910300 	ldmls	r1, {r8, r9}
    36f0:	1b5e177f 	blne	17894f4 <__bss_end+0x165be94>
    36f4:	1a010000 	bne	436fc <ramdisk+0x160a4>
    36f8:	00cc1817 	sbceq	r1, ip, r7, lsl r8
    36fc:	91030000 	mrsls	r0, (UNDEF: 3)
    3700:	701b7fa4 	andsvc	r7, fp, r4, lsr #31
    3704:	01007561 	tsteq	r0, r1, ror #10
    3708:	cc20171a 	stcgt	7, cr1, [r0], #-104	; 0xffffff98
    370c:	02000000 	andeq	r0, r0, #0
    3710:	80176091 	mulshi	r7, r1, r0
    3714:	01000018 	tsteq	r0, r8, lsl r0
    3718:	cc25171a 	stcgt	7, cr1, [r5], #-104	; 0xffffff98
    371c:	02000000 	andeq	r0, r0, #0
    3720:	6e1b5c91 	mrcvs	12, 0, r5, cr11, cr1, {4}
    3724:	171a0100 	ldrne	r0, [sl, -r0, lsl #2]
    3728:	0000cc2c 	andeq	ip, r0, ip, lsr #24
    372c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3730:	6e73761b 	mrcvs	6, 3, r7, cr3, cr11, {0}
    3734:	171a0100 	ldrne	r0, [sl, -r0, lsl #2]
    3738:	0000cc2f 	andeq	ip, r0, pc, lsr #24
    373c:	a8910300 	ldmge	r1, {r8, r9}
    3740:	1b37177f 	blne	dc9544 <__bss_end+0xc9bee4>
    3744:	1b010000 	blne	4374c <ramdisk+0x160f4>
    3748:	00e40817 	rsceq	r0, r4, r7, lsl r8
    374c:	91030000 	mrsls	r0, (UNDEF: 3)
    3750:	b4177f94 	ldrlt	r7, [r7], #-3988	; 0xfffff06c
    3754:	0100001b 	tsteq	r0, fp, lsl r0
    3758:	e410171b 	ldr	r1, [r0], #-1819	; 0xfffff8e5
    375c:	02000000 	andeq	r0, r0, #0
    3760:	43176c91 	tstmi	r7, #37120	; 0x9100
    3764:	0100001c 	tsteq	r0, ip, lsl r0
    3768:	e417171b 	ldr	r1, [r7], #-1819	; 0xfffff8e5
    376c:	02000000 	andeq	r0, r0, #0
    3770:	23176891 	tstcs	r7, #9502720	; 0x910000
    3774:	01000019 	tsteq	r0, r9, lsl r0
    3778:	e41e171b 	ldr	r1, [lr], #-1819	; 0xfffff8e5
    377c:	03000000 	movweq	r0, #0
    3780:	177fa091 			; <UNDEFINED> instruction: 0x177fa091
    3784:	00001b28 	andeq	r1, r0, r8, lsr #22
    3788:	08171c01 	ldmdaeq	r7, {r0, sl, fp, ip}
    378c:	000000e4 	andeq	r0, r0, r4, ror #1
    3790:	1b709102 	blne	1c27ba0 <__bss_end+0x1afa540>
    3794:	0061626c 	rsbeq	r6, r1, ip, ror #4
    3798:	0e171c01 	cdpeq	12, 1, cr1, cr7, cr1, {0}
    379c:	00000836 	andeq	r0, r0, r6, lsr r8
    37a0:	7f8c9103 	svcvc	0x008c9103
    37a4:	0019a117 	andseq	sl, r9, r7, lsl r1
    37a8:	171d0100 	ldrne	r0, [sp, -r0, lsl #2]
    37ac:	0000cc08 	andeq	ip, r0, r8, lsl #24
    37b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    37b4:	0019d417 	andseq	sp, r9, r7, lsl r4
    37b8:	171d0100 	ldrne	r0, [sp, -r0, lsl #2]
    37bc:	0000cc10 	andeq	ip, r0, r0, lsl ip
    37c0:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    37c4:	00190917 	andseq	r0, r9, r7, lsl r9
    37c8:	171d0100 	ldrne	r0, [sp, -r0, lsl #2]
    37cc:	0000cc18 	andeq	ip, r0, r8, lsl ip
    37d0:	50910200 	addspl	r0, r1, r0, lsl #4
    37d4:	0019bf17 	andseq	fp, r9, r7, lsl pc
    37d8:	171d0100 	ldrne	r0, [sp, -r0, lsl #2]
    37dc:	0000cc20 	andeq	ip, r0, r0, lsr #24
    37e0:	4c910200 	lfmmi	f0, 4, [r1], {0}
    37e4:	00180717 	andseq	r0, r8, r7, lsl r7
    37e8:	171e0100 	ldrne	r0, [lr, -r0, lsl #2]
    37ec:	00009e07 	andeq	r9, r0, r7, lsl #28
    37f0:	b8910300 	ldmlt	r1, {r8, r9}
    37f4:	15f1177f 	ldrbne	r1, [r1, #1919]!	; 0x77f
    37f8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    37fc:	009e0e17 	addseq	r0, lr, r7, lsl lr
    3800:	91030000 	mrsls	r0, (UNDEF: 3)
    3804:	691b7fb4 	ldmdbvs	fp, {r2, r4, r5, r7, r8, r9, sl, fp, ip, sp, lr}
    3808:	171e0100 	ldrne	r0, [lr, -r0, lsl #2]
    380c:	00009e16 	andeq	r9, r0, r6, lsl lr
    3810:	48910200 	ldmmi	r1, {r9}
    3814:	6c6f761b 	stclvs	6, cr7, [pc], #-108	; 37b0 <_start-0xc850>
    3818:	171f0100 	ldrne	r0, [pc, -r0, lsl #2]
    381c:	00002506 	andeq	r2, r0, r6, lsl #10
    3820:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    3824:	0073641b 	rsbseq	r6, r3, fp, lsl r4
    3828:	0a172001 	beq	5cb834 <__bss_end+0x49e1d4>
    382c:	000004f1 	strdeq	r0, [r0], -r1
    3830:	1b419102 	blne	1067c40 <__bss_end+0xf3a5e0>
    3834:	00736572 	rsbseq	r6, r3, r2, ror r5
    3838:	0a172101 	beq	5cbc44 <__bss_end+0x49e5e4>
    383c:	000004e4 	andeq	r0, r0, r4, ror #9
    3840:	7f9f9103 	svcvc	0x009f9103
    3844:	01040600 	tsteq	r4, r0, lsl #12
    3848:	06000001 	streq	r0, [r0], -r1
    384c:	00045704 	andeq	r5, r4, r4, lsl #14
    3850:	00c70b00 	sbceq	r0, r7, r0, lsl #22
    3854:	08310000 	ldmdaeq	r1!, {}	; <UNPREDICTABLE>
    3858:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    385c:	06000000 	streq	r0, [r0], -r0
    3860:	08210500 	stmdaeq	r1!, {r8, sl}
    3864:	e40b0000 	str	r0, [fp], #-0
    3868:	46000000 	strmi	r0, [r0], -r0
    386c:	0f000008 	svceq	0x00000008
    3870:	0000002c 	andeq	r0, r0, ip, lsr #32
    3874:	6f1d0001 	svcvs	0x001d0001
    3878:	01000019 	tsteq	r0, r9, lsl r0
    387c:	e410167d 	ldr	r1, [r0], #-1661	; 0xfffff983
    3880:	cc000004 	stcgt	0, cr0, [r0], {4}
    3884:	5800029d 	stmdapl	r0, {r0, r2, r3, r4, r7, r9}
    3888:	01000004 	tsteq	r0, r4
    388c:	00094d9c 	muleq	r9, ip, sp
    3890:	72641a00 	rsbvc	r1, r4, #0, 20
    3894:	7e010076 	mcrvc	0, 0, r0, cr1, cr6, {3}
    3898:	00aa0716 	adceq	r0, sl, r6, lsl r7
    389c:	91020000 	mrsls	r0, (UNDEF: 2)
    38a0:	1b74194f 	blne	1d09de4 <__bss_end+0x1bdc784>
    38a4:	7f010000 	svcvc	0x00010000
    38a8:	094d0e16 	stmdbeq	sp, {r1, r2, r4, r9, sl, fp}^
    38ac:	91020000 	mrsls	r0, (UNDEF: 2)
    38b0:	79731a48 	ldmdbvc	r3!, {r3, r6, r9, fp, ip}^
    38b4:	80010073 	andhi	r0, r1, r3, ror r0
    38b8:	00aa0716 	adceq	r0, sl, r6, lsl r7
    38bc:	91020000 	mrsls	r0, (UNDEF: 2)
    38c0:	75621a4e 	strbvc	r1, [r2, #-2638]!	; 0xfffff5b2
    38c4:	81010066 	tsthi	r1, r6, rrx
    38c8:	030c0816 	movweq	r0, #51222	; 0xc816
    38cc:	91020000 	mrsls	r0, (UNDEF: 2)
    38d0:	00691b44 	rsbeq	r1, r9, r4, asr #22
    38d4:	07168401 	ldreq	r8, [r6, -r1, lsl #8]
    38d8:	0000009e 	muleq	r0, lr, r0
    38dc:	1b749102 	blne	1d27cec <__bss_end+0x1bfa68c>
    38e0:	01007963 	tsteq	r0, r3, ror #18
    38e4:	9e0a1684 	cfmadd32ls	mvax4, mvfx1, mvfx10, mvfx4
    38e8:	02000000 	andeq	r0, r0, #0
    38ec:	65175891 	ldrvs	r5, [r7, #-2193]	; 0xfffff76f
    38f0:	0100001b 	tsteq	r0, fp, lsl r0
    38f4:	e4081685 	str	r1, [r8], #-1669	; 0xfffff97b
    38f8:	02000000 	andeq	r0, r0, #0
    38fc:	d3175091 	tstle	r7, #145	; 0x91
    3900:	0100001b 	tsteq	r0, fp, lsl r0
    3904:	cc081686 	stcgt	6, cr1, [r8], {134}	; 0x86
    3908:	02000000 	andeq	r0, r0, #0
    390c:	96176091 			; <UNDEFINED> instruction: 0x96176091
    3910:	0100001a 	tsteq	r0, sl, lsl r0
    3914:	cc121686 	ldcgt	6, cr1, [r2], {134}	; 0x86
    3918:	02000000 	andeq	r0, r0, #0
    391c:	2d177091 	ldccs	0, cr7, [r7, #-580]	; 0xfffffdbc
    3920:	0100001b 	tsteq	r0, fp, lsl r0
    3924:	cc1f1686 	ldcgt	6, cr1, [pc], {134}	; 0x86
    3928:	02000000 	andeq	r0, r0, #0
    392c:	701b6c91 	mulsvc	fp, r1, ip
    3930:	01006574 	tsteq	r0, r4, ror r5
    3934:	0c081687 	stceq	6, cr1, [r8], {135}	; 0x87
    3938:	02000003 	andeq	r0, r0, #3
    393c:	681b6891 	ldmdavs	fp, {r0, r4, r7, fp, sp, lr}
    3940:	88010064 	stmdahi	r1, {r2, r5, r6}
    3944:	00aa0716 	adceq	r0, sl, r6, lsl r7
    3948:	91020000 	mrsls	r0, (UNDEF: 2)
    394c:	1b3e1757 	blne	f896b0 <__bss_end+0xe5c050>
    3950:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    3954:	00aa0b16 	adceq	r0, sl, r6, lsl fp
    3958:	91020000 	mrsls	r0, (UNDEF: 2)
    395c:	63731b67 	cmnvs	r3, #105472	; 0x19c00
    3960:	16880100 	strne	r0, [r8], r0, lsl #2
    3964:	0000aa11 	andeq	sl, r0, r1, lsl sl
    3968:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    396c:	0019f917 	andseq	pc, r9, r7, lsl r9	; <UNPREDICTABLE>
    3970:	16880100 	strne	r0, [r8], r0, lsl #2
    3974:	0000aa15 	andeq	sl, r0, r5, lsl sl
    3978:	5f910200 	svcpl	0x00910200
    397c:	f0040600 			; <UNDEFINED> instruction: 0xf0040600
    3980:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3984:	00001a7f 	andeq	r1, r0, pc, ror sl
    3988:	09142301 	ldmdbeq	r4, {r0, r8, r9, sp}
    398c:	000004e4 	andeq	r0, r0, r4, ror #9
    3990:	00029ac0 	andeq	r9, r2, r0, asr #21
    3994:	0000030c 	andeq	r0, r0, ip, lsl #6
    3998:	0a039c01 	beq	ea9a4 <ramdisk+0xbd34c>
    399c:	66190000 	ldrvs	r0, [r9], -r0
    39a0:	01000019 	tsteq	r0, r9, lsl r0
    39a4:	150f1424 	strne	r1, [pc, #-1060]	; 3588 <_start-0xca78>
    39a8:	03000008 	movweq	r0, #8
    39ac:	197ee491 	ldmdbne	lr!, {r0, r4, r7, sl, sp, lr, pc}^
    39b0:	00001a32 	andeq	r1, r0, r2, lsr sl
    39b4:	0f142501 	svceq	0x00142501
    39b8:	00000815 	andeq	r0, r0, r5, lsl r8
    39bc:	7ee09103 	urdvcs	f1, f3
    39c0:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    39c4:	14280100 	strtne	r0, [r8], #-256	; 0xffffff00
    39c8:	0004e40a 	andeq	lr, r4, sl, lsl #8
    39cc:	6f910200 	svcvs	0x00910200
    39d0:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    39d4:	09142901 	ldmdbeq	r4, {r0, r8, fp, sp}
    39d8:	0000027a 	andeq	r0, r0, sl, ror r2
    39dc:	1b609102 	blne	1827dec <__bss_end+0x16fa78c>
    39e0:	006f6a64 	rsbeq	r6, pc, r4, ror #20
    39e4:	06142a01 	ldreq	r2, [r4], -r1, lsl #20
    39e8:	00000385 	andeq	r0, r0, r5, lsl #7
    39ec:	7fb49103 	svcvc	0x00b49103
    39f0:	6e6a641b 	mcrvs	4, 3, r6, cr10, cr11, {0}
    39f4:	142a0100 	strtne	r0, [sl], #-256	; 0xffffff00
    39f8:	0003850b 	andeq	r8, r3, fp, lsl #10
    39fc:	88910300 	ldmhi	r1, {r8, r9}
    3a00:	75621b7f 	strbvc	r1, [r2, #-2943]!	; 0xfffff481
    3a04:	2b010066 	blcs	43ba4 <ramdisk+0x1654c>
    3a08:	0a030714 	beq	c5660 <ramdisk+0x98008>
    3a0c:	91030000 	mrsls	r0, (UNDEF: 3)
    3a10:	641b7ee8 	ldrvs	r7, [fp], #-3816	; 0xfffff118
    3a14:	01007269 	tsteq	r0, r9, ror #4
    3a18:	0c30142b 	cfldrseq	mvf1, [r0], #-172	; 0xffffff54
    3a1c:	02000003 	andeq	r0, r0, #3
    3a20:	28176891 	ldmdacs	r7, {r0, r4, r7, fp, sp, lr}
    3a24:	0100001b 	tsteq	r0, fp, lsl r0
    3a28:	e408142c 	str	r1, [r8], #-1068	; 0xfffffbd4
    3a2c:	02000000 	andeq	r0, r0, #0
    3a30:	0b006491 	bleq	1cc7c <__module_entries_end+0xcbd8>
    3a34:	000000aa 	andeq	r0, r0, sl, lsr #1
    3a38:	00000a13 	andeq	r0, r0, r3, lsl sl
    3a3c:	00002c0f 	andeq	r2, r0, pc, lsl #24
    3a40:	18001f00 	stmdane	r0, {r8, r9, sl, fp, ip}
    3a44:	000019ae 	andeq	r1, r0, lr, lsr #19
    3a48:	0913cf01 	ldmdbeq	r3, {r0, r8, r9, sl, fp, lr, pc}
    3a4c:	000004e4 	andeq	r0, r0, r4, ror #9
    3a50:	00029840 	andeq	r9, r2, r0, asr #16
    3a54:	00000280 	andeq	r0, r0, r0, lsl #5
    3a58:	0aaf9c01 	beq	febeaa64 <_estack+0xf6bcaa64>
    3a5c:	e2190000 	ands	r0, r9, #0
    3a60:	01000019 	tsteq	r0, r9, lsl r0
    3a64:	150f13d0 	strne	r1, [pc, #-976]	; 369c <_start-0xc964>
    3a68:	03000008 	movweq	r0, #8
    3a6c:	1b7fa491 	blne	1feccb8 <__bss_end+0x1ebf658>
    3a70:	00736572 	rsbseq	r6, r3, r2, ror r5
    3a74:	0a13d301 	beq	4f8680 <__bss_end+0x3cb020>
    3a78:	000004e4 	andeq	r0, r0, r4, ror #9
    3a7c:	1b779102 	blne	1de7e8c <__bss_end+0x1cba82c>
    3a80:	01007366 	tsteq	r0, r6, ror #6
    3a84:	7a0913d4 	bvc	2489dc <__bss_end+0x11b37c>
    3a88:	02000002 	andeq	r0, r0, #2
    3a8c:	641b6491 	ldrvs	r6, [fp], #-1169	; 0xfffffb6f
    3a90:	d501006a 	strle	r0, [r1, #-106]	; 0xffffff96
    3a94:	03850613 	orreq	r0, r5, #19922944	; 0x1300000
    3a98:	91030000 	mrsls	r0, (UNDEF: 3)
    3a9c:	fe177fb8 	mrc2	15, 0, r7, cr7, cr8, {5}
    3aa0:	01000019 	tsteq	r0, r9, lsl r0
    3aa4:	800a13d6 	ldrdhi	r1, [sl], -r6
    3aa8:	03000002 	movweq	r0, #2
    3aac:	1b7fa891 	blne	1fedcf8 <__bss_end+0x1ec0698>
    3ab0:	006c6364 	rsbeq	r6, ip, r4, ror #6
    3ab4:	0813d701 	ldmdaeq	r3, {r0, r8, r9, sl, ip, lr, pc}
    3ab8:	000000cc 	andeq	r0, r0, ip, asr #1
    3abc:	1b709102 	blne	1c27ecc <__bss_end+0x1afa86c>
    3ac0:	006c6370 	rsbeq	r6, ip, r0, ror r3
    3ac4:	0d13d701 	ldceq	7, cr13, [r3, #-4]
    3ac8:	000000cc 	andeq	r0, r0, ip, asr #1
    3acc:	1b689102 	blne	1a27edc <__bss_end+0x18fa87c>
    3ad0:	01006d74 	tsteq	r0, r4, ror sp
    3ad4:	cc1213d7 	ldcgt	3, cr1, [r2], {215}	; 0xd7
    3ad8:	02000000 	andeq	r0, r0, #0
    3adc:	18006c91 	stmdane	r0, {r0, r4, r7, sl, fp, sp, lr}
    3ae0:	00001998 	muleq	r0, r8, r9
    3ae4:	09137101 	ldmdbeq	r3, {r0, r8, ip, sp, lr}
    3ae8:	000004e4 	andeq	r0, r0, r4, ror #9
    3aec:	00029670 	andeq	r9, r2, r0, ror r6
    3af0:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3af4:	0b2b9c01 	bleq	aeab00 <__bss_end+0x9bd4a0>
    3af8:	e2190000 	ands	r0, r9, #0
    3afc:	01000019 	tsteq	r0, r9, lsl r0
    3b00:	150f1372 	strne	r1, [pc, #-882]	; 3796 <_start-0xc86a>
    3b04:	03000008 	movweq	r0, #8
    3b08:	1b7f8c91 	blne	1fe6d54 <__bss_end+0x1eb96f4>
    3b0c:	00736572 	rsbseq	r6, r3, r2, ror r5
    3b10:	0a137501 	beq	4e0f1c <__bss_end+0x3b38bc>
    3b14:	000004e4 	andeq	r0, r0, r4, ror #9
    3b18:	1b779102 	blne	1de7f28 <__bss_end+0x1cba8c8>
    3b1c:	01007366 	tsteq	r0, r6, ror #6
    3b20:	7a091376 	bvc	248900 <__bss_end+0x11b2a0>
    3b24:	02000002 	andeq	r0, r0, #2
    3b28:	641b6c91 	ldrvs	r6, [fp], #-3217	; 0xfffff36f
    3b2c:	7701006a 	strvc	r0, [r1, -sl, rrx]
    3b30:	03850613 	orreq	r0, r5, #19922944	; 0x1300000
    3b34:	91020000 	mrsls	r0, (UNDEF: 2)
    3b38:	64731b40 	ldrbtvs	r1, [r3], #-2880	; 0xfffff4c0
    3b3c:	7701006a 	strvc	r0, [r1, -sl, rrx]
    3b40:	03850a13 	orreq	r0, r5, #77824	; 0x13000
    3b44:	91030000 	mrsls	r0, (UNDEF: 3)
    3b48:	82177f94 	andshi	r7, r7, #148, 30	; 0x250
    3b4c:	0100001b 	tsteq	r0, fp, lsl r0
    3b50:	cc081378 	stcgt	3, cr1, [r8], {120}	; 0x78
    3b54:	02000000 	andeq	r0, r0, #0
    3b58:	18007091 	stmdane	r0, {r0, r4, r7, ip, sp, lr}
    3b5c:	0000192a 	andeq	r1, r0, sl, lsr #18
    3b60:	09133f01 	ldmdbeq	r3, {r0, r8, r9, sl, fp, ip, sp}
    3b64:	000004e4 	andeq	r0, r0, r4, ror #9
    3b68:	00029450 	andeq	r9, r2, r0, asr r4
    3b6c:	00000220 	andeq	r0, r0, r0, lsr #4
    3b70:	0b859c01 	bleq	fe16ab7c <_estack+0xf614ab7c>
    3b74:	661a0000 	ldrvs	r0, [sl], -r0
    3b78:	40010070 	andmi	r0, r1, r0, ror r0
    3b7c:	0b850713 	bleq	fe1457d0 <_estack+0xf61257d0>
    3b80:	91020000 	mrsls	r0, (UNDEF: 2)
    3b84:	65721b64 	ldrbvs	r1, [r2, #-2916]!	; 0xfffff49c
    3b88:	43010073 	movwmi	r0, #4211	; 0x1073
    3b8c:	04e40a13 	strbteq	r0, [r4], #2579	; 0xa13
    3b90:	91020000 	mrsls	r0, (UNDEF: 2)
    3b94:	73661b77 	cmnvc	r6, #121856	; 0x1dc00
    3b98:	13440100 	movtne	r0, #16640	; 0x4100
    3b9c:	00027a09 	andeq	r7, r2, r9, lsl #20
    3ba0:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3ba4:	6c636e1b 	stclvs	14, cr6, [r3], #-108	; 0xffffff94
    3ba8:	13450100 	movtne	r0, #20736	; 0x5100
    3bac:	0000cc08 	andeq	ip, r0, r8, lsl #24
    3bb0:	70910200 	addsvc	r0, r1, r0, lsl #4
    3bb4:	12040600 	andne	r0, r4, #0, 12
    3bb8:	18000003 	stmdane	r0, {r0, r1}
    3bbc:	00001b92 	muleq	r0, r2, fp
    3bc0:	0912df01 	ldmdbeq	r2, {r0, r8, r9, sl, fp, ip, lr, pc}
    3bc4:	000004e4 	andeq	r0, r0, r4, ror #9
    3bc8:	000291c8 	andeq	r9, r2, r8, asr #3
    3bcc:	00000288 	andeq	r0, r0, r8, lsl #5
    3bd0:	0c559c01 	mrrceq	12, 0, r9, r5, cr1
    3bd4:	e2190000 	ands	r0, r9, #0
    3bd8:	01000019 	tsteq	r0, r9, lsl r0
    3bdc:	150f12e0 	strne	r1, [pc, #-736]	; 3904 <_start-0xc6fc>
    3be0:	02000008 	andeq	r0, r0, #8
    3be4:	5a194491 	bpl	654e30 <__bss_end+0x5277d0>
    3be8:	01000019 	tsteq	r0, r9, lsl r0
    3bec:	550912e1 	strpl	r1, [r9, #-737]	; 0xfffffd1f
    3bf0:	0200000c 	andeq	r0, r0, #12
    3bf4:	42194091 	andsmi	r4, r9, #145	; 0x91
    3bf8:	01000019 	tsteq	r0, r9, lsl r0
    3bfc:	5b0a12e2 	blpl	28878c <__bss_end+0x15b12c>
    3c00:	0300000c 	movweq	r0, #12
    3c04:	1b7fbc91 	blne	1ff2e50 <__bss_end+0x1ec57f0>
    3c08:	00736572 	rsbseq	r6, r3, r2, ror r5
    3c0c:	0a12e501 	beq	4bd018 <__bss_end+0x38f9b8>
    3c10:	000004e4 	andeq	r0, r0, r4, ror #9
    3c14:	1b779102 	blne	1de8024 <__bss_end+0x1cba9c4>
    3c18:	01007366 	tsteq	r0, r6, ror #6
    3c1c:	7a0912e6 	bvc	2487bc <__bss_end+0x11b15c>
    3c20:	02000002 	andeq	r0, r0, #2
    3c24:	3b175c91 	blcc	5dae70 <__bss_end+0x4ad810>
    3c28:	0100001a 	tsteq	r0, sl, lsl r0
    3c2c:	cc0812e7 	sfmgt	f1, 4, [r8], {231}	; 0xe7
    3c30:	02000000 	andeq	r0, r0, #0
    3c34:	14177091 	ldrne	r7, [r7], #-145	; 0xffffff6f
    3c38:	01000016 	tsteq	r0, r6, lsl r0
    3c3c:	cc0f12e7 	sfmgt	f1, 4, [pc], {231}	; 0xe7
    3c40:	02000000 	andeq	r0, r0, #0
    3c44:	67176c91 			; <UNDEFINED> instruction: 0x67176c91
    3c48:	0100001c 	tsteq	r0, ip, lsl r0
    3c4c:	cc1512e7 	lfmgt	f1, 4, [r5], {231}	; 0xe7
    3c50:	02000000 	andeq	r0, r0, #0
    3c54:	28176091 	ldmdacs	r7, {r0, r4, r7, sp, lr}
    3c58:	0100001b 	tsteq	r0, fp, lsl r0
    3c5c:	e40812e8 	str	r1, [r8], #-744	; 0xfffffd18
    3c60:	02000000 	andeq	r0, r0, #0
    3c64:	691b6891 	ldmdbvs	fp, {r0, r4, r7, fp, sp, lr}
    3c68:	12e90100 	rscne	r0, r9, #0, 2
    3c6c:	00009e07 	andeq	r9, r0, r7, lsl #28
    3c70:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3c74:	6a626f1b 	bvs	189f8e8 <__bss_end+0x1772288>
    3c78:	12ea0100 	rscne	r0, sl, #0, 2
    3c7c:	0002800a 	andeq	r8, r2, sl
    3c80:	4c910200 	lfmmi	f0, 4, [r1], {0}
    3c84:	cc040600 	stcgt	6, cr0, [r4], {-0}
    3c88:	06000000 	streq	r0, [r0], -r0
    3c8c:	00027a04 	andeq	r7, r2, r4, lsl #20
    3c90:	1c651800 	stclne	8, cr1, [r5], #-0
    3c94:	bc010000 	stclt	0, cr0, [r1], {-0}
    3c98:	04e40912 	strbteq	r0, [r4], #2322	; 0x912
    3c9c:	911c0000 	tstls	ip, r0
    3ca0:	00ac0002 	adceq	r0, ip, r2
    3ca4:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ca8:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
    3cac:	0019e219 	andseq	lr, r9, r9, lsl r2
    3cb0:	12bd0100 	adcsne	r0, sp, #0, 2
    3cb4:	0008150f 	andeq	r1, r8, pc, lsl #10
    3cb8:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    3cbc:	6f6e661a 	svcvs	0x006e661a
    3cc0:	12be0100 	adcsne	r0, lr, #0, 2
    3cc4:	000cbc0b 	andeq	fp, ip, fp, lsl #24
    3cc8:	40910200 	addsmi	r0, r1, r0, lsl #4
    3ccc:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    3cd0:	12c10100 	sbcne	r0, r1, #0, 2
    3cd4:	0004e40a 	andeq	lr, r4, sl, lsl #8
    3cd8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3cdc:	006a641b 	rsbeq	r6, sl, fp, lsl r4
    3ce0:	0612c201 	ldreq	ip, [r2], -r1, lsl #4
    3ce4:	00000385 	andeq	r0, r0, r5, lsl #7
    3ce8:	00489102 	subeq	r9, r8, r2, lsl #2
    3cec:	03ec0406 	mvneq	r0, #100663296	; 0x6000000
    3cf0:	43180000 	tstmi	r8, #0
    3cf4:	0100001b 	tsteq	r0, fp, lsl r0
    3cf8:	e4091264 	str	r1, [r9], #-612	; 0xfffffd9c
    3cfc:	44000004 	strmi	r0, [r0], #-4
    3d00:	d8000290 	stmdale	r0, {r4, r7, r9}
    3d04:	01000000 	mrseq	r0, (UNDEF: 0)
    3d08:	000d1c9c 	muleq	sp, ip, ip
    3d0c:	70641a00 	rsbvc	r1, r4, r0, lsl #20
    3d10:	12650100 	rsbne	r0, r5, #0, 2
    3d14:	000d1c07 	andeq	r1, sp, r7, lsl #24
    3d18:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3d1c:	6f6e661a 	svcvs	0x006e661a
    3d20:	12660100 	rsbne	r0, r6, #0, 2
    3d24:	000cbc0b 	andeq	fp, ip, fp, lsl #24
    3d28:	68910200 	ldmvs	r1, {r9}
    3d2c:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    3d30:	12690100 	rsbne	r0, r9, #0, 2
    3d34:	0004e40a 	andeq	lr, r4, sl, lsl #8
    3d38:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3d3c:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    3d40:	09126a01 	ldmdbeq	r2, {r0, r9, fp, sp, lr}
    3d44:	0000027a 	andeq	r0, r0, sl, ror r2
    3d48:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3d4c:	03850406 	orreq	r0, r5, #100663296	; 0x6000000
    3d50:	25180000 	ldrcs	r0, [r8, #-0]
    3d54:	0100001c 	tsteq	r0, ip, lsl r0
    3d58:	e4091246 	str	r1, [r9], #-582	; 0xfffffdba
    3d5c:	f0000004 			; <UNDEFINED> instruction: 0xf0000004
    3d60:	5400028f 	strpl	r0, [r0], #-655	; 0xfffffd71
    3d64:	01000000 	mrseq	r0, (UNDEF: 0)
    3d68:	000d6c9c 	muleq	sp, ip, ip
    3d6c:	70641a00 	rsbvc	r1, r4, r0, lsl #20
    3d70:	12470100 	subne	r0, r7, #0, 2
    3d74:	000d1c07 	andeq	r1, sp, r7, lsl #24
    3d78:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3d7c:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    3d80:	124a0100 	subne	r0, sl, #0, 2
    3d84:	0004e40a 	andeq	lr, r4, sl, lsl #8
    3d88:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3d8c:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    3d90:	09124b01 	ldmdbeq	r2, {r0, r8, r9, fp, lr}
    3d94:	0000027a 	andeq	r0, r0, sl, ror r2
    3d98:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3d9c:	001a4118 	andseq	r4, sl, r8, lsl r1
    3da0:	12040100 	andne	r0, r4, #0, 2
    3da4:	0004e409 	andeq	lr, r4, r9, lsl #8
    3da8:	028eac00 	addeq	sl, lr, #0, 24
    3dac:	00014400 	andeq	r4, r1, r0, lsl #8
    3db0:	c69c0100 	ldrgt	r0, [ip], r0, lsl #2
    3db4:	1a00000d 	bne	3df0 <_start-0xc210>
    3db8:	01007064 	tsteq	r0, r4, rrx
    3dbc:	1c071205 	sfmne	f1, 4, [r7], {5}
    3dc0:	0200000d 	andeq	r0, r0, #13
    3dc4:	e2196c91 	ands	r6, r9, #37120	; 0x9100
    3dc8:	01000019 	tsteq	r0, r9, lsl r0
    3dcc:	150f1206 	strne	r1, [pc, #-518]	; 3bce <_start-0xc432>
    3dd0:	02000008 	andeq	r0, r0, #8
    3dd4:	721b6891 	andsvc	r6, fp, #9502720	; 0x910000
    3dd8:	01007365 	tsteq	r0, r5, ror #6
    3ddc:	e40a1209 	str	r1, [sl], #-521	; 0xfffffdf7
    3de0:	02000004 	andeq	r0, r0, #4
    3de4:	661b7791 			; <UNDEFINED> instruction: 0x661b7791
    3de8:	0a010073 	beq	43fbc <ramdisk+0x16964>
    3dec:	027a0912 	rsbseq	r0, sl, #294912	; 0x48000
    3df0:	91020000 	mrsls	r0, (UNDEF: 2)
    3df4:	21180070 	tstcs	r8, r0, ror r0
    3df8:	0100001a 	tsteq	r0, sl, lsl r0
    3dfc:	e4091160 	str	r1, [r9], #-352	; 0xfffffea0
    3e00:	34000004 	strcc	r0, [r0], #-4
    3e04:	7800028a 	stmdavc	r0, {r1, r3, r7, r9}
    3e08:	01000004 	tsteq	r0, r4
    3e0c:	000e609c 	muleq	lr, ip, r0
    3e10:	70661a00 	rsbvc	r1, r6, r0, lsl #20
    3e14:	11610100 	cmnne	r1, r0, lsl #2
    3e18:	000b8507 	andeq	r8, fp, r7, lsl #10
    3e1c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    3e20:	73666f1a 	cmnvc	r6, #26, 30	; 0x68
    3e24:	11620100 	cmnne	r2, r0, lsl #2
    3e28:	0000d80a 	andeq	sp, r0, sl, lsl #16
    3e2c:	50910200 	addspl	r0, r1, r0, lsl #4
    3e30:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    3e34:	11650100 	cmnne	r5, r0, lsl #2
    3e38:	0004e40a 	andeq	lr, r4, sl, lsl #8
    3e3c:	6f910200 	svcvs	0x00910200
    3e40:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    3e44:	09116601 	ldmdbeq	r1, {r0, r9, sl, sp, lr}
    3e48:	0000027a 	andeq	r0, r0, sl, ror r2
    3e4c:	17589102 	ldrbne	r9, [r8, -r2, lsl #2]
    3e50:	00001614 	andeq	r1, r0, r4, lsl r6
    3e54:	08116701 	ldmdaeq	r1, {r0, r8, r9, sl, sp, lr}
    3e58:	000000cc 	andeq	r0, r0, ip, asr #1
    3e5c:	1b689102 	blne	1a2826c <__bss_end+0x18fac0c>
    3e60:	00736362 	rsbseq	r6, r3, r2, ror #6
    3e64:	0e116701 	cdpeq	7, 1, cr6, cr1, cr1, {0}
    3e68:	000000cc 	andeq	r0, r0, ip, asr #1
    3e6c:	175c9102 	ldrbne	r9, [ip, -r2, lsl #2]
    3e70:	00001880 	andeq	r1, r0, r0, lsl #17
    3e74:	08116801 	ldmdaeq	r1, {r0, fp, sp, lr}
    3e78:	000000e4 	andeq	r0, r0, r4, ror #1
    3e7c:	17649102 	strbne	r9, [r4, -r2, lsl #2]!
    3e80:	000019f3 	strdeq	r1, [r0], -r3
    3e84:	0a116901 	beq	45e290 <__bss_end+0x330c30>
    3e88:	000000d8 	ldrdeq	r0, [r0], -r8
    3e8c:	00609102 	rsbeq	r9, r0, r2, lsl #2
    3e90:	00191018 	andseq	r1, r9, r8, lsl r0
    3e94:	10870100 	addne	r0, r7, r0, lsl #2
    3e98:	0004e409 	andeq	lr, r4, r9, lsl #8
    3e9c:	0289c400 	addeq	ip, r9, #0, 8
    3ea0:	00007000 	andeq	r7, r0, r0
    3ea4:	aa9c0100 	bge	fe7042ac <_estack+0xf66e42ac>
    3ea8:	1a00000e 	bne	3ee8 <_start-0xc118>
    3eac:	01007066 	tsteq	r0, r6, rrx
    3eb0:	85071088 	strhi	r1, [r7, #-136]	; 0xffffff78
    3eb4:	0200000b 	andeq	r0, r0, #11
    3eb8:	721b6c91 	andsvc	r6, fp, #37120	; 0x9100
    3ebc:	01007365 	tsteq	r0, r5, ror #6
    3ec0:	e40a108b 	str	r1, [sl], #-139	; 0xffffff75
    3ec4:	02000004 	andeq	r0, r0, #4
    3ec8:	661b7791 			; <UNDEFINED> instruction: 0x661b7791
    3ecc:	8c010073 	stchi	0, cr0, [r1], {115}	; 0x73
    3ed0:	027a0910 	rsbseq	r0, sl, #16, 18	; 0x40000
    3ed4:	91020000 	mrsls	r0, (UNDEF: 2)
    3ed8:	ad180070 	ldcge	0, cr0, [r8, #-448]	; 0xfffffe40
    3edc:	0100001b 	tsteq	r0, fp, lsl r0
    3ee0:	e4091036 	str	r1, [r9], #-54	; 0xffffffca
    3ee4:	0c000004 	stceq	0, cr0, [r0], {4}
    3ee8:	b8000288 	stmdalt	r0, {r3, r7, r9}
    3eec:	01000001 	tsteq	r0, r1
    3ef0:	000f139c 	muleq	pc, ip, r3	; <UNPREDICTABLE>
    3ef4:	70661a00 	rsbvc	r1, r6, r0, lsl #20
    3ef8:	10370100 	eorsne	r0, r7, r0, lsl #2
    3efc:	000b8507 	andeq	r8, fp, r7, lsl #10
    3f00:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3f04:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    3f08:	103a0100 	eorsne	r0, sl, r0, lsl #2
    3f0c:	0004e40a 	andeq	lr, r4, sl, lsl #8
    3f10:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3f14:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    3f18:	09103b01 	ldmdbeq	r0, {r0, r8, r9, fp, ip, sp}
    3f1c:	0000027a 	andeq	r0, r0, sl, ror r2
    3f20:	1b689102 	blne	1a28330 <__bss_end+0x18facd0>
    3f24:	01006d74 	tsteq	r0, r4, ror sp
    3f28:	cc08103c 	stcgt	0, cr1, [r8], {60}	; 0x3c
    3f2c:	02000000 	andeq	r0, r0, #0
    3f30:	641b7091 	ldrvs	r7, [fp], #-145	; 0xffffff6f
    3f34:	01007269 	tsteq	r0, r9, ror #4
    3f38:	0c08103d 	stceq	0, cr1, [r8], {61}	; 0x3d
    3f3c:	02000003 	andeq	r0, r0, #3
    3f40:	18006c91 	stmdane	r0, {r0, r4, r7, sl, fp, sp, lr}
    3f44:	00001a8e 	andeq	r1, r0, lr, lsl #21
    3f48:	090fbd01 	stmdbeq	pc, {r0, r8, sl, fp, ip, sp, pc}	; <UNPREDICTABLE>
    3f4c:	000004e4 	andeq	r0, r0, r4, ror #9
    3f50:	000282e4 	andeq	r8, r2, r4, ror #5
    3f54:	00000528 	andeq	r0, r0, r8, lsr #10
    3f58:	0feb9c01 	svceq	0x00eb9c01
    3f5c:	661a0000 	ldrvs	r0, [sl], -r0
    3f60:	be010070 	mcrlt	0, 0, r0, cr1, cr0, {3}
    3f64:	0b85070f 	bleq	fe145ba8 <_estack+0xf6125ba8>
    3f68:	91020000 	mrsls	r0, (UNDEF: 2)
    3f6c:	1bbb1954 	blne	feeca4c4 <_estack+0xf6eaa4c4>
    3f70:	bf010000 	svclt	0x00010000
    3f74:	0feb0e0f 	svceq	0x00eb0e0f
    3f78:	91020000 	mrsls	r0, (UNDEF: 2)
    3f7c:	74621a50 	strbtvc	r1, [r2], #-2640	; 0xfffff5b0
    3f80:	c0010077 	andgt	r0, r1, r7, ror r0
    3f84:	009e070f 	addseq	r0, lr, pc, lsl #14
    3f88:	91020000 	mrsls	r0, (UNDEF: 2)
    3f8c:	77621a4c 	strbvc	r1, [r2, -ip, asr #20]!
    3f90:	0fc10100 	svceq	0x00c10100
    3f94:	000ff208 	andeq	pc, pc, r8, lsl #4
    3f98:	48910200 	ldmmi	r1, {r9}
    3f9c:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    3fa0:	0fc40100 	svceq	0x00c40100
    3fa4:	0004e40a 	andeq	lr, r4, sl, lsl #8
    3fa8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3fac:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    3fb0:	090fc501 	stmdbeq	pc, {r0, r8, sl, lr, pc}	; <UNPREDICTABLE>
    3fb4:	0000027a 	andeq	r0, r0, sl, ror r2
    3fb8:	17589102 	ldrbne	r9, [r8, -r2, lsl #2]
    3fbc:	00001614 	andeq	r1, r0, r4, lsl r6
    3fc0:	080fc601 	stmdaeq	pc, {r0, r9, sl, lr, pc}	; <UNPREDICTABLE>
    3fc4:	000000cc 	andeq	r0, r0, ip, asr #1
    3fc8:	17709102 	ldrbne	r9, [r0, -r2, lsl #2]!
    3fcc:	00001b28 	andeq	r1, r0, r8, lsr #22
    3fd0:	080fc701 	stmdaeq	pc, {r0, r8, r9, sl, lr, pc}	; <UNPREDICTABLE>
    3fd4:	000000e4 	andeq	r0, r0, r4, ror #1
    3fd8:	175c9102 	ldrbne	r9, [ip, -r2, lsl #2]
    3fdc:	00001b88 	andeq	r1, r0, r8, lsl #23
    3fe0:	070fc801 	streq	ip, [pc, -r1, lsl #16]
    3fe4:	0000009e 	muleq	r0, lr, r0
    3fe8:	1b6c9102 	blne	1b283f8 <__bss_end+0x19fad98>
    3fec:	01006363 	tsteq	r0, r3, ror #6
    3ff0:	9e0d0fc8 	cdpls	15, 0, cr0, cr13, cr8, {6}
    3ff4:	02000000 	andeq	r0, r0, #0
    3ff8:	62176891 	andsvs	r6, r7, #9502720	; 0x910000
    3ffc:	0100001a 	tsteq	r0, sl, lsl r0
    4000:	9e110fc8 	cdpls	15, 1, cr0, cr1, cr8, {6}
    4004:	02000000 	andeq	r0, r0, #0
    4008:	18176091 	ldmdane	r7, {r0, r4, r7, sp, lr}
    400c:	01000019 	tsteq	r0, r9, lsl r0
    4010:	f80e0fc9 			; <UNDEFINED> instruction: 0xf80e0fc9
    4014:	0200000f 	andeq	r0, r0, #15
    4018:	06006491 			; <UNDEFINED> instruction: 0x06006491
    401c:	000ff104 	andeq	pc, pc, r4, lsl #2
    4020:	04061e00 	streq	r1, [r6], #-3584	; 0xfffff200
    4024:	0000009e 	muleq	r0, lr, r0
    4028:	00b60406 	adcseq	r0, r6, r6, lsl #8
    402c:	4b180000 	blmi	604034 <__bss_end+0x4d69d4>
    4030:	0100001a 	tsteq	r0, sl, lsl r0
    4034:	e4090f59 	str	r0, [r9], #-3929	; 0xfffff0a7
    4038:	80000004 	andhi	r0, r0, r4
    403c:	6400027e 	strvs	r0, [r0], #-638	; 0xfffffd82
    4040:	01000004 	tsteq	r0, r4
    4044:	0010e69c 	mulseq	r0, ip, r6
    4048:	70661a00 	rsbvc	r1, r6, r0, lsl #20
    404c:	0f5a0100 	svceq	0x005a0100
    4050:	000b8507 	andeq	r8, fp, r7, lsl #10
    4054:	4c910200 	lfmmi	f0, 4, [r1], {0}
    4058:	001bbb19 	andseq	fp, fp, r9, lsl fp
    405c:	0f5b0100 	svceq	0x005b0100
    4060:	00007208 	andeq	r7, r0, r8, lsl #4
    4064:	48910200 	ldmmi	r1, {r9}
    4068:	7274621a 	rsbsvc	r6, r4, #-1610612735	; 0xa0000001
    406c:	0f5c0100 	svceq	0x005c0100
    4070:	00009e07 	andeq	r9, r0, r7, lsl #28
    4074:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    4078:	0072621a 	rsbseq	r6, r2, sl, lsl r2
    407c:	080f5d01 	stmdaeq	pc, {r0, r8, sl, fp, ip, lr}	; <UNPREDICTABLE>
    4080:	00000ff2 	strdeq	r0, [r0], -r2
    4084:	1b409102 	blne	1028494 <__bss_end+0xefae34>
    4088:	00736572 	rsbseq	r6, r3, r2, ror r5
    408c:	0a0f6001 	beq	3dc098 <__bss_end+0x2aea38>
    4090:	000004e4 	andeq	r0, r0, r4, ror #9
    4094:	1b779102 	blne	1de84a4 <__bss_end+0x1cbae44>
    4098:	01007366 	tsteq	r0, r6, ror #6
    409c:	7a090f61 	bvc	247e28 <__bss_end+0x11a7c8>
    40a0:	02000002 	andeq	r0, r0, #2
    40a4:	14175491 	ldrne	r5, [r7], #-1169	; 0xfffffb6f
    40a8:	01000016 	tsteq	r0, r6, lsl r0
    40ac:	cc080f62 	stcgt	15, cr0, [r8], {98}	; 0x62
    40b0:	02000000 	andeq	r0, r0, #0
    40b4:	28177091 	ldmdacs	r7, {r0, r4, r7, ip, sp, lr}
    40b8:	0100001b 	tsteq	r0, fp, lsl r0
    40bc:	e4080f63 	str	r0, [r8], #-3939	; 0xfffff09d
    40c0:	02000000 	andeq	r0, r0, #0
    40c4:	4d175891 	ldcmi	8, cr5, [r7, #-580]	; 0xfffffdbc
    40c8:	0100001b 	tsteq	r0, fp, lsl r0
    40cc:	d80a0f64 	stmdale	sl, {r2, r5, r6, r8, r9, sl, fp}
    40d0:	02000000 	andeq	r0, r0, #0
    40d4:	dc176091 	ldcle	0, cr6, [r7], {145}	; 0x91
    40d8:	0100001b 	tsteq	r0, fp, lsl r0
    40dc:	9e070f65 	cdpls	15, 0, cr0, cr7, cr5, {3}
    40e0:	02000000 	andeq	r0, r0, #0
    40e4:	631b6c91 	tstvs	fp, #37120	; 0x9100
    40e8:	65010063 	strvs	r0, [r1, #-99]	; 0xffffff9d
    40ec:	009e0d0f 	addseq	r0, lr, pc, lsl #26
    40f0:	91020000 	mrsls	r0, (UNDEF: 2)
    40f4:	1a621768 	bne	1889e9c <__bss_end+0x175c83c>
    40f8:	65010000 	strvs	r0, [r1, #-0]
    40fc:	009e110f 	addseq	r1, lr, pc, lsl #2
    4100:	91020000 	mrsls	r0, (UNDEF: 2)
    4104:	1bba175c 	blne	fee89e7c <_estack+0xf6e69e7c>
    4108:	66010000 	strvs	r0, [r1], -r0
    410c:	030c080f 	movweq	r0, #51215	; 0xc80f
    4110:	91020000 	mrsls	r0, (UNDEF: 2)
    4114:	cd180064 	ldcgt	0, cr0, [r8, #-400]	; 0xfffffe70
    4118:	01000019 	tsteq	r0, r9, lsl r0
    411c:	e4090e94 	str	r0, [r9], #-3732	; 0xfffff16c
    4120:	6c000004 	stcvs	0, cr0, [r0], {4}
    4124:	14000279 	strne	r0, [r0], #-633	; 0xfffffd87
    4128:	01000005 	tsteq	r0, r5
    412c:	0011c19c 	mulseq	r1, ip, r1
    4130:	70661a00 	rsbvc	r1, r6, r0, lsl #20
    4134:	0e950100 	fmleqs	f0, f5, f0
    4138:	000b8507 	andeq	r8, fp, r7, lsl #10
    413c:	a4910300 	ldrge	r0, [r1], #768	; 0x300
    4140:	19e2197f 	stmibne	r2!, {r0, r1, r2, r3, r4, r5, r6, r8, fp, ip}^
    4144:	96010000 	strls	r0, [r1], -r0
    4148:	08150f0e 	ldmdaeq	r5, {r1, r2, r3, r8, r9, sl, fp}
    414c:	91030000 	mrsls	r0, (UNDEF: 3)
    4150:	1e197fa0 	cdpne	15, 1, cr7, cr9, cr0, {5}
    4154:	01000019 	tsteq	r0, r9, lsl r0
    4158:	aa070e97 	bge	1c7bbc <__bss_end+0x9a55c>
    415c:	03000000 	movweq	r0, #0
    4160:	1b7f9f91 	blne	1febfac <__bss_end+0x1ebe94c>
    4164:	00736572 	rsbseq	r6, r3, r2, ror r5
    4168:	0a0e9a01 	beq	3aa974 <__bss_end+0x27d314>
    416c:	000004e4 	andeq	r0, r0, r4, ror #9
    4170:	1b779102 	blne	1de8580 <__bss_end+0x1cbaf20>
    4174:	01006a64 	tsteq	r0, r4, ror #20
    4178:	85060e9b 	strhi	r0, [r6, #-3739]	; 0xfffff165
    417c:	03000003 	movweq	r0, #3
    4180:	1b7fb091 	blne	1ff03cc <__bss_end+0x1ec2d6c>
    4184:	01007366 	tsteq	r0, r6, ror #6
    4188:	7a090e9c 	bvc	247c00 <__bss_end+0x11a5a0>
    418c:	03000002 	movweq	r0, #2
    4190:	1b7fac91 	blne	1fef3dc <__bss_end+0x1ec1d7c>
    4194:	01006c63 	tsteq	r0, r3, ror #24
    4198:	cc080e9e 	stcgt	14, cr0, [r8], {158}	; 0x9e
    419c:	02000000 	andeq	r0, r0, #0
    41a0:	621b6491 	andsvs	r6, fp, #-1862270976	; 0x91000000
    41a4:	01007363 	tsteq	r0, r3, ror #6
    41a8:	cc0c0e9e 	stcgt	14, cr0, [ip], {158}	; 0x9e
    41ac:	02000000 	andeq	r0, r0, #0
    41b0:	14175c91 	ldrne	r5, [r7], #-3217	; 0xfffff36f
    41b4:	01000016 	tsteq	r0, r6, lsl r0
    41b8:	cc110e9e 	ldcgt	14, cr0, [r1], {158}	; 0x9e
    41bc:	02000000 	andeq	r0, r0, #0
    41c0:	741b7091 	ldrvc	r7, [fp], #-145	; 0xffffff6f
    41c4:	9e01006d 	cdpls	0, 0, cr0, cr1, cr13, {3}
    41c8:	00cc170e 	sbceq	r1, ip, lr, lsl #14
    41cc:	91020000 	mrsls	r0, (UNDEF: 2)
    41d0:	63731b68 	cmnvs	r3, #104, 22	; 0x1a000
    41d4:	0e9f0100 	fmleqe	f0, f7, f0
    41d8:	0000e408 	andeq	lr, r0, r8, lsl #8
    41dc:	60910200 	addsvs	r0, r1, r0, lsl #4
    41e0:	73666f1b 	cmnvc	r6, #27, 30	; 0x6c
    41e4:	0ea00100 	fdveqs	f0, f0, f0
    41e8:	0000d80a 	andeq	sp, r0, sl, lsl #16
    41ec:	6c910200 	lfmvs	f0, 4, [r1], {0}
    41f0:	1b6c1800 	blne	1b0a1f8 <__bss_end+0x19dcb98>
    41f4:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    41f8:	04e4090e 	strbteq	r0, [r4], #2318	; 0x90e
    41fc:	78700000 	ldmdavc	r0!, {}^	; <UNPREDICTABLE>
    4200:	00fc0002 	rscseq	r0, ip, r2
    4204:	9c010000 	stcls	0, cr0, [r1], {-0}
    4208:	0000124b 	andeq	r1, r0, fp, asr #4
    420c:	0073661a 	rsbseq	r6, r3, sl, lsl r6
    4210:	090e5901 	stmdbeq	lr, {r0, r8, fp, ip, lr}
    4214:	0000027a 	andeq	r0, r0, sl, ror r2
    4218:	19649102 	stmdbne	r4!, {r1, r8, ip, pc}^
    421c:	000019e2 	andeq	r1, r0, r2, ror #19
    4220:	0f0e5a01 	svceq	0x000e5a01
    4224:	00000815 	andeq	r0, r0, r5, lsl r8
    4228:	1a609102 	bne	1828638 <__bss_end+0x16fafd8>
    422c:	0074706f 	rsbseq	r7, r4, pc, rrx
    4230:	070e5b01 	streq	r5, [lr, -r1, lsl #22]
    4234:	000000aa 	andeq	r0, r0, sl, lsr #1
    4238:	1b5f9102 	blne	17e8648 <__bss_end+0x16bafe8>
    423c:	00736663 	rsbseq	r6, r3, r3, ror #12
    4240:	090e5e01 	stmdbeq	lr, {r0, r9, sl, fp, ip, lr}
    4244:	0000027a 	andeq	r0, r0, sl, ror r2
    4248:	1b709102 	blne	1c28658 <__bss_end+0x1afaff8>
    424c:	006c6f76 	rsbeq	r6, ip, r6, ror pc
    4250:	060e5f01 	streq	r5, [lr], -r1, lsl #30
    4254:	00000025 	andeq	r0, r0, r5, lsr #32
    4258:	1b749102 	blne	1d28668 <__bss_end+0x1bfb008>
    425c:	00736572 	rsbseq	r6, r3, r2, ror r5
    4260:	0a0e6001 	beq	39c26c <__bss_end+0x26ec0c>
    4264:	000004e4 	andeq	r0, r0, r4, ror #9
    4268:	1b6f9102 	blne	1be8678 <__bss_end+0x1abb018>
    426c:	01007072 	tsteq	r0, r2, ror r0
    4270:	150f0e61 	strne	r0, [pc, #-3681]	; 3417 <_start-0xcbe9>
    4274:	02000008 	andeq	r0, r0, #8
    4278:	1d006891 	stcne	8, cr6, [r0, #-580]	; 0xfffffdbc
    427c:	00001c85 	andeq	r1, r0, r5, lsl #25
    4280:	100e2c01 	andne	r2, lr, r1, lsl #24
    4284:	000004e4 	andeq	r0, r0, r4, ror #9
    4288:	000277a8 	andeq	r7, r2, r8, lsr #15
    428c:	000000c8 	andeq	r0, r0, r8, asr #1
    4290:	12979c01 	addsne	r9, r7, #256	; 0x100
    4294:	6f1a0000 	svcvs	0x001a0000
    4298:	01006a62 	tsteq	r0, r2, ror #20
    429c:	970b0e2d 	strls	r0, [fp, -sp, lsr #28]
    42a0:	02000012 	andeq	r0, r0, #18
    42a4:	721a6c91 	andsvc	r6, sl, #37120	; 0x9100
    42a8:	01007366 	tsteq	r0, r6, ror #6
    42ac:	5b0a0e2e 	blpl	287b6c <__bss_end+0x15a50c>
    42b0:	0200000c 	andeq	r0, r0, #12
    42b4:	721b6891 	andsvc	r6, fp, #9502720	; 0x910000
    42b8:	01007365 	tsteq	r0, r5, ror #6
    42bc:	e40a0e31 	str	r0, [sl], #-3633	; 0xfffff1cf
    42c0:	02000004 	andeq	r0, r0, #4
    42c4:	06007791 			; <UNDEFINED> instruction: 0x06007791
    42c8:	00028004 	andeq	r8, r2, r4
    42cc:	19351d00 	ldmdbne	r5!, {r8, sl, fp, ip}
    42d0:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
    42d4:	04e4100d 	strbteq	r1, [r4], #13
    42d8:	70880000 	addvc	r0, r8, r0
    42dc:	07200002 	streq	r0, [r0, -r2]!
    42e0:	9c010000 	stcls	0, cr0, [r1], {-0}
    42e4:	00001399 	muleq	r0, r9, r3
    42e8:	0019e219 	andseq	lr, r9, r9, lsl r2
    42ec:	0d4a0100 	stfeqe	f0, [sl, #-0]
    42f0:	00139910 	andseq	r9, r3, r0, lsl r9
    42f4:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    42f8:	7366721a 	cmnvc	r6, #-1610612735	; 0xa0000001
    42fc:	0d4b0100 	stfeqe	f0, [fp, #-0]
    4300:	000c5b0a 	andeq	r5, ip, sl, lsl #22
    4304:	40910200 	addsmi	r0, r1, r0, lsl #4
    4308:	00191e19 	andseq	r1, r9, r9, lsl lr
    430c:	0d4c0100 	stfeqe	f0, [ip, #-0]
    4310:	0000aa07 	andeq	sl, r0, r7, lsl #20
    4314:	bf910300 	svclt	0x00910300
    4318:	6f761b7f 	svcvs	0x00761b7f
    431c:	4f01006c 	svcmi	0x0001006c
    4320:	0025060d 	eoreq	r0, r5, sp, lsl #12
    4324:	91020000 	mrsls	r0, (UNDEF: 2)
    4328:	73661b64 	cmnvc	r6, #100, 22	; 0x19000
    432c:	0d500100 	ldfeqe	f0, [r0, #-0]
    4330:	00027a09 	andeq	r7, r2, r9, lsl #20
    4334:	60910200 	addsvs	r0, r1, r0, lsl #4
    4338:	001c6717 	andseq	r6, ip, r7, lsl r7
    433c:	0d510100 	ldfeqe	f0, [r1, #-0]
    4340:	0004f10a 	andeq	pc, r4, sl, lsl #2
    4344:	5f910200 	svcpl	0x00910200
    4348:	001bc017 	andseq	ip, fp, r7, lsl r0
    434c:	0d520100 	ldfeqe	f0, [r2, #-0]
    4350:	0000e408 	andeq	lr, r0, r8, lsl #8
    4354:	58910200 	ldmpl	r1, {r9}
    4358:	001a5217 	andseq	r5, sl, r7, lsl r2
    435c:	0d530100 	ldfeqe	f0, [r3, #-0]
    4360:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4364:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4368:	001c5617 	andseq	r5, ip, r7, lsl r6
    436c:	0d530100 	ldfeqe	f0, [r3, #-0]
    4370:	0000cc0f 	andeq	ip, r0, pc, lsl #24
    4374:	50910200 	addspl	r0, r1, r0, lsl #4
    4378:	001a7817 	andseq	r7, sl, r7, lsl r8
    437c:	0d530100 	ldfeqe	f0, [r3, #-0]
    4380:	0000cc17 	andeq	ip, r0, r7, lsl ip
    4384:	70910200 	addsvc	r0, r1, r0, lsl #4
    4388:	00195a17 	andseq	r5, r9, r7, lsl sl
    438c:	0d530100 	ldfeqe	f0, [r3, #-0]
    4390:	0000cc1f 	andeq	ip, r0, pc, lsl ip
    4394:	4c910200 	lfmmi	f0, 4, [r1], {0}
    4398:	001aa217 	andseq	sl, sl, r7, lsl r2
    439c:	0d530100 	ldfeqe	f0, [r3, #-0]
    43a0:	0000cc26 	andeq	ip, r0, r6, lsr #24
    43a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    43a8:	001c4917 	andseq	r4, ip, r7, lsl r9
    43ac:	0d540100 	ldfeqe	f0, [r4, #-0]
    43b0:	0000bb07 	andeq	fp, r0, r7, lsl #22
    43b4:	56910200 	ldrpl	r0, [r1], r0, lsl #4
    43b8:	746d661b 	strbtvc	r6, [sp], #-1563	; 0xfffff9e5
    43bc:	0d550100 	ldfeqe	f0, [r5, #-0]
    43c0:	00009e07 	andeq	r9, r0, r7, lsl #28
    43c4:	68910200 	ldmvs	r1, {r9}
    43c8:	15040600 	strne	r0, [r4, #-1536]	; 0xfffffa00
    43cc:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
    43d0:	00001ac7 	andeq	r1, r0, r7, asr #21
    43d4:	0d0d1301 	stceq	3, cr1, [sp, #-4]
    43d8:	0000009e 	muleq	r0, lr, r0
    43dc:	00026f2c 	andeq	r6, r2, ip, lsr #30
    43e0:	0000015c 	andeq	r0, r0, ip, asr r1
    43e4:	14089c01 	strne	r9, [r8], #-3073	; 0xfffff3ff
    43e8:	661a0000 	ldrvs	r0, [sl], -r0
    43ec:	14010073 	strne	r0, [r1], #-115	; 0xffffff8d
    43f0:	027a090d 	rsbseq	r0, sl, #212992	; 0x34000
    43f4:	91020000 	mrsls	r0, (UNDEF: 2)
    43f8:	18f5195c 	ldmne	r5!, {r2, r3, r4, r6, r8, fp, ip}^
    43fc:	15010000 	strne	r0, [r1, #-0]
    4400:	009e070d 	addseq	r0, lr, sp, lsl #14
    4404:	91020000 	mrsls	r0, (UNDEF: 2)
    4408:	6d661b58 	vstmdbvs	r6!, {d17-<overflow reg d60>}
    440c:	18010074 	stmdane	r1, {r2, r4, r5, r6}
    4410:	009e070d 	addseq	r0, lr, sp, lsl #14
    4414:	91020000 	mrsls	r0, (UNDEF: 2)
    4418:	00691b70 	rsbeq	r1, r9, r0, ror fp
    441c:	0c0d1801 	stceq	8, cr1, [sp], {1}
    4420:	0000009e 	muleq	r0, lr, r0
    4424:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    4428:	00001980 	andeq	r1, r0, r0, lsl #19
    442c:	080d1901 	stmdaeq	sp, {r0, r8, fp, ip}
    4430:	00001408 	andeq	r1, r0, r8, lsl #8
    4434:	00609102 	rsbeq	r9, r0, r2, lsl #2
    4438:	0000cc0b 	andeq	ip, r0, fp, lsl #24
    443c:	00141800 	andseq	r1, r4, r0, lsl #16
    4440:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    4444:	00030000 	andeq	r0, r3, r0
    4448:	001a181d 	andseq	r1, sl, sp, lsl r8
    444c:	0ceb0100 	stfeqe	f0, [fp]
    4450:	00009e0d 	andeq	r9, r0, sp, lsl #28
    4454:	026ce800 	rsbeq	lr, ip, #0, 16
    4458:	00024400 	andeq	r4, r2, r0, lsl #8
    445c:	7f9c0100 	svcvc	0x009c0100
    4460:	1a000014 	bne	44b8 <_start-0xbb48>
    4464:	01007366 	tsteq	r0, r6, ror #6
    4468:	7a090cec 	bvc	247820 <__bss_end+0x11a1c0>
    446c:	02000002 	andeq	r0, r0, #2
    4470:	28196c91 	ldmdacs	r9, {r0, r4, r7, sl, fp, sp, lr}
    4474:	0100001b 	tsteq	r0, fp, lsl r0
    4478:	e4080ced 	str	r0, [r8], #-3309	; 0xfffff313
    447c:	02000000 	andeq	r0, r0, #0
    4480:	771b6891 			; <UNDEFINED> instruction: 0x771b6891
    4484:	0cf00100 	ldfeqe	f0, [r0]
    4488:	0000bb07 	andeq	fp, r0, r7, lsl #22
    448c:	72910200 	addsvc	r0, r1, #0, 4
    4490:	001b8d17 	andseq	r8, fp, r7, lsl sp
    4494:	0cf00100 	ldfeqe	f0, [r0]
    4498:	0000bb0a 	andeq	fp, r0, sl, lsl #22
    449c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    44a0:	0100621b 	tsteq	r0, fp, lsl r2
    44a4:	aa070cf1 	bge	1c7870 <__bss_end+0x9a210>
    44a8:	02000000 	andeq	r0, r0, #0
    44ac:	1f007591 	svcne	0x00007591
    44b0:	00001c0b 	andeq	r1, r0, fp, lsl #24
    44b4:	0c0c5801 	stceq	8, cr5, [ip], {1}
    44b8:	00000025 	andeq	r0, r0, r5, lsr #32
    44bc:	00026bf0 	strdeq	r6, [r2], -r0
    44c0:	000000f8 	strdeq	r0, [r0], -r8
    44c4:	14e79c01 	strbtne	r9, [r7], #3073	; 0xc01
    44c8:	e2190000 	ands	r0, r9, #0
    44cc:	01000019 	tsteq	r0, r9, lsl r0
    44d0:	99100c59 	ldmdbls	r0, {r0, r3, r4, r6, sl, fp}
    44d4:	02000013 	andeq	r0, r0, #19
    44d8:	741b6491 	ldrvc	r6, [fp], #-1169	; 0xfffffb6f
    44dc:	5c010070 	stcpl	0, cr0, [r1], {112}	; 0x70
    44e0:	08150f0c 	ldmdaeq	r5, {r2, r3, r8, r9, sl, fp}
    44e4:	91020000 	mrsls	r0, (UNDEF: 2)
    44e8:	74741b6c 	ldrbtvc	r1, [r4], #-2924	; 0xfffff494
    44ec:	0c5d0100 	ldfeqe	f0, [sp], {-0}
    44f0:	0008150f 	andeq	r1, r8, pc, lsl #10
    44f4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    44f8:	7268631b 	rsbvc	r6, r8, #1811939328	; 0x6c000000
    44fc:	0c5e0100 	ldfeqe	f0, [lr], {-0}
    4500:	0000f508 	andeq	pc, r0, r8, lsl #10
    4504:	6b910200 	blvs	fe444d0c <_estack+0xf6424d0c>
    4508:	0100691b 	tsteq	r0, fp, lsl r9
    450c:	25060c5f 	strcs	r0, [r6, #-3167]	; 0xfffff3a1
    4510:	02000000 	andeq	r0, r0, #0
    4514:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    4518:	000019db 	ldrdeq	r1, [r0], -fp
    451c:	100c0101 	andne	r0, ip, r1, lsl #2
    4520:	000004e4 	andeq	r0, r0, r4, ror #9
    4524:	00026a60 	andeq	r6, r2, r0, ror #20
    4528:	00000190 	muleq	r0, r0, r1
    452c:	15509c01 	ldrbne	r9, [r0, #-3073]	; 0xfffff3ff
    4530:	641a0000 	ldrvs	r0, [sl], #-0
    4534:	02010070 	andeq	r0, r1, #112	; 0x70
    4538:	0d1c070c 	ldceq	7, cr0, [ip, #-48]	; 0xffffffd0
    453c:	91020000 	mrsls	r0, (UNDEF: 2)
    4540:	19e21964 	stmibne	r2!, {r2, r5, r6, r8, fp, ip}^
    4544:	03010000 	movweq	r0, #4096	; 0x1000
    4548:	08150f0c 	ldmdaeq	r5, {r2, r3, r8, r9, sl, fp}
    454c:	91020000 	mrsls	r0, (UNDEF: 2)
    4550:	65721b60 	ldrbvs	r1, [r2, #-2912]!	; 0xfffff4a0
    4554:	06010073 			; <UNDEFINED> instruction: 0x06010073
    4558:	04e40a0c 	strbteq	r0, [r4], #2572	; 0xa0c
    455c:	91020000 	mrsls	r0, (UNDEF: 2)
    4560:	736e1b77 	cmnvc	lr, #121856	; 0x1dc00
    4564:	0c070100 	stfeqs	f0, [r7], {-0}
    4568:	0000aa07 	andeq	sl, r0, r7, lsl #20
    456c:	6f910200 	svcvs	0x00910200
    4570:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    4574:	090c0801 	stmdbeq	ip, {r0, fp}
    4578:	0000027a 	andeq	r0, r0, sl, ror r2
    457c:	00709102 	rsbseq	r9, r0, r2, lsl #2
    4580:	001ba11d 	andseq	sl, fp, sp, lsl r1
    4584:	0b350100 	bleq	d4498c <__bss_end+0xc1732c>
    4588:	0004e410 	andeq	lr, r4, r0, lsl r4
    458c:	02677000 	rsbeq	r7, r7, #0
    4590:	0002f000 	andeq	pc, r2, r0
    4594:	f19c0100 			; <UNDEFINED> instruction: 0xf19c0100
    4598:	1a000015 	bne	45f4 <_start-0xba0c>
    459c:	01007064 	tsteq	r0, r4, rrx
    45a0:	1c070b36 			; <UNDEFINED> instruction: 0x1c070b36
    45a4:	0200000d 	andeq	r0, r0, #13
    45a8:	e2195491 	ands	r5, r9, #-1862270976	; 0x91000000
    45ac:	01000019 	tsteq	r0, r9, lsl r0
    45b0:	99100b37 	ldmdbls	r0, {r0, r1, r2, r4, r5, r8, r9, fp}
    45b4:	02000013 	andeq	r0, r0, #19
    45b8:	631b5091 	tstvs	fp, #145	; 0x91
    45bc:	0bba0100 	bleq	fee849c4 <_estack+0xf6e649c4>
    45c0:	0000aa07 	andeq	sl, r0, r7, lsl #20
    45c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    45c8:	0100641b 	tsteq	r0, fp, lsl r4
    45cc:	aa0a0bba 	bge	2874bc <__bss_end+0x159e5c>
    45d0:	02000000 	andeq	r0, r0, #0
    45d4:	731b5f91 	tstvc	fp, #580	; 0x244
    45d8:	01006e66 	tsteq	r0, r6, ror #28
    45dc:	0c080bbb 			; <UNDEFINED> instruction: 0x0c080bbb
    45e0:	02000003 	andeq	r0, r0, #3
    45e4:	6e1b6091 	mrcvs	0, 0, r6, cr11, cr1, {4}
    45e8:	bc010069 	stclt	0, cr0, [r1], {105}	; 0x69
    45ec:	009e070b 	addseq	r0, lr, fp, lsl #14
    45f0:	91020000 	mrsls	r0, (UNDEF: 2)
    45f4:	69731b70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, fp, ip}^
    45f8:	0bbc0100 	bleq	fef04a00 <_estack+0xf6ee4a00>
    45fc:	00009e0b 	andeq	r9, r0, fp, lsl #28
    4600:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4604:	0100691b 	tsteq	r0, fp, lsl r9
    4608:	9e0f0bbc 	vmovls.16	d31[0], r0
    460c:	02000000 	andeq	r0, r0, #0
    4610:	701b6891 	mulsvc	fp, r1, r8
    4614:	0bbd0100 	bleq	fef44a1c <_estack+0xf6f24a1c>
    4618:	0000800e 	andeq	r8, r0, lr
    461c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4620:	1a032000 	bne	cc628 <ramdisk+0x9efd0>
    4624:	4f010000 	svcmi	0x00010000
    4628:	65e80d0a 	strbvs	r0, [r8, #3338]!	; 0xd0a
    462c:	01880002 	orreq	r0, r8, r2
    4630:	9c010000 	stcls	0, cr0, [r1], {-0}
    4634:	00001654 	andeq	r1, r0, r4, asr r6
    4638:	0070641a 	rsbseq	r6, r0, sl, lsl r4
    463c:	070a5001 	streq	r5, [sl, -r1]
    4640:	00000d1c 	andeq	r0, r0, ip, lsl sp
    4644:	1a649102 	bne	1928a54 <__bss_end+0x17fb3f4>
    4648:	006f6e66 	rsbeq	r6, pc, r6, ror #28
    464c:	0b0a5101 	bleq	298a58 <__bss_end+0x16b3f8>
    4650:	00000cbc 			; <UNDEFINED> instruction: 0x00000cbc
    4654:	1b609102 	blne	1828a64 <__bss_end+0x16fb404>
    4658:	01006973 	tsteq	r0, r3, ror r9
    465c:	9e070a54 			; <UNDEFINED> instruction: 0x9e070a54
    4660:	02000000 	andeq	r0, r0, #0
    4664:	641b7491 	ldrvs	r7, [fp], #-1169	; 0xfffffb6f
    4668:	54010069 	strpl	r0, [r1], #-105	; 0xffffff97
    466c:	009e0b0a 	addseq	r0, lr, sl, lsl #22
    4670:	91020000 	mrsls	r0, (UNDEF: 2)
    4674:	00631b70 	rsbeq	r1, r3, r0, ror fp
    4678:	080a5b01 	stmdaeq	sl, {r0, r8, r9, fp, ip, lr}
    467c:	000000f5 	strdeq	r0, [r0], -r5
    4680:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    4684:	0018dc1d 	andseq	sp, r8, sp, lsl ip
    4688:	0a210100 	beq	844a90 <__bss_end+0x717430>
    468c:	0004e410 	andeq	lr, r4, r0, lsl r4
    4690:	02657800 	rsbeq	r7, r5, #0, 16
    4694:	00007000 	andeq	r7, r0, r0
    4698:	9e9c0100 	fmllse	f0, f4, f0
    469c:	1a000016 	bne	46fc <_start-0xb904>
    46a0:	01007064 	tsteq	r0, r4, rrx
    46a4:	1c070a22 			; <UNDEFINED> instruction: 0x1c070a22
    46a8:	0200000d 	andeq	r0, r0, #13
    46ac:	721b6c91 	andsvc	r6, fp, #37120	; 0x9100
    46b0:	01007365 	tsteq	r0, r5, ror #6
    46b4:	e40a0a25 	str	r0, [sl], #-2597	; 0xfffff5db
    46b8:	02000004 	andeq	r0, r0, #4
    46bc:	661b7391 			; <UNDEFINED> instruction: 0x661b7391
    46c0:	26010073 			; <UNDEFINED> instruction: 0x26010073
    46c4:	027a090a 	rsbseq	r0, sl, #163840	; 0x28000
    46c8:	91020000 	mrsls	r0, (UNDEF: 2)
    46cc:	6c1d0074 	ldcvs	0, cr0, [sp], {116}	; 0x74
    46d0:	0100001c 	tsteq	r0, ip, lsl r0
    46d4:	e41009b7 	ldr	r0, [r0], #-2487	; 0xfffff649
    46d8:	c4000004 	strgt	r0, [r0], #-4
    46dc:	b4000264 	strlt	r0, [r0], #-612	; 0xfffffd9c
    46e0:	01000000 	mrseq	r0, (UNDEF: 0)
    46e4:	0016e89c 	mulseq	r6, ip, r8
    46e8:	70641a00 	rsbvc	r1, r4, r0, lsl #20
    46ec:	09b80100 	ldmibeq	r8!, {r8}
    46f0:	000d1c07 	andeq	r1, sp, r7, lsl #24
    46f4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    46f8:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    46fc:	09bb0100 	ldmibeq	fp!, {r8}
    4700:	0004e40a 	andeq	lr, r4, sl, lsl #8
    4704:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4708:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    470c:	0909bc01 	stmdbeq	r9, {r0, sl, fp, ip, sp, pc}
    4710:	0000027a 	andeq	r0, r0, sl, ror r2
    4714:	00709102 	rsbseq	r9, r0, r2, lsl #2
    4718:	0018d31d 	andseq	sp, r8, sp, lsl r3
    471c:	09650100 	stmdbeq	r5!, {r8}^
    4720:	0004e410 	andeq	lr, r4, r0, lsl r4
    4724:	02638c00 	rsbeq	r8, r3, #0, 24
    4728:	00013800 	andeq	r3, r1, r0, lsl #16
    472c:	409c0100 	addsmi	r0, ip, r0, lsl #2
    4730:	1a000017 	bne	4794 <_start-0xb86c>
    4734:	01007064 	tsteq	r0, r4, rrx
    4738:	1c070966 			; <UNDEFINED> instruction: 0x1c070966
    473c:	0200000d 	andeq	r0, r0, #13
    4740:	721b6491 	andsvc	r6, fp, #-1862270976	; 0x91000000
    4744:	01007365 	tsteq	r0, r5, ror #6
    4748:	e40a0969 	str	r0, [sl], #-2409	; 0xfffff697
    474c:	02000004 	andeq	r0, r0, #4
    4750:	661b7791 			; <UNDEFINED> instruction: 0x661b7791
    4754:	6a010073 	bvs	44928 <ramdisk+0x172d0>
    4758:	027a0909 	rsbseq	r0, sl, #147456	; 0x24000
    475c:	91020000 	mrsls	r0, (UNDEF: 2)
    4760:	00631b70 	rsbeq	r1, r3, r0, ror fp
    4764:	07096b01 	streq	r6, [r9, -r1, lsl #22]
    4768:	000000aa 	andeq	r0, r0, sl, lsr #1
    476c:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    4770:	001a6f1d 	andseq	r6, sl, sp, lsl pc
    4774:	09170100 	ldmdbeq	r7, {r8}
    4778:	0004e410 	andeq	lr, r4, r0, lsl r4
    477c:	02623000 	rsbeq	r3, r2, #0
    4780:	00015c00 	andeq	r5, r1, r0, lsl #24
    4784:	b89c0100 	ldmlt	ip, {r8}
    4788:	1a000017 	bne	47ec <_start-0xb814>
    478c:	01007064 	tsteq	r0, r4, rrx
    4790:	1c070918 			; <UNDEFINED> instruction: 0x1c070918
    4794:	0200000d 	andeq	r0, r0, #13
    4798:	761a6491 			; <UNDEFINED> instruction: 0x761a6491
    479c:	01006c6f 	tsteq	r0, pc, ror #24
    47a0:	25060919 	strcs	r0, [r6, #-2329]	; 0xfffff6e7
    47a4:	02000000 	andeq	r0, r0, #0
    47a8:	721b6091 	andsvc	r6, fp, #145	; 0x91
    47ac:	01007365 	tsteq	r0, r5, ror #6
    47b0:	e40a091c 	str	r0, [sl], #-2332	; 0xfffff6e4
    47b4:	02000004 	andeq	r0, r0, #4
    47b8:	661b7791 			; <UNDEFINED> instruction: 0x661b7791
    47bc:	1d010073 	stcne	0, cr0, [r1, #-460]	; 0xfffffe34
    47c0:	027a0909 	rsbseq	r0, sl, #147456	; 0x24000
    47c4:	91020000 	mrsls	r0, (UNDEF: 2)
    47c8:	18181770 	ldmdane	r8, {r4, r5, r6, r8, r9, sl, ip}
    47cc:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    47d0:	00aa0709 	adceq	r0, sl, r9, lsl #14
    47d4:	91020000 	mrsls	r0, (UNDEF: 2)
    47d8:	00621b6e 	rsbeq	r1, r2, lr, ror #22
    47dc:	0d091e01 	stceq	14, cr1, [r9, #-4]
    47e0:	000000aa 	andeq	r0, r0, sl, lsr #1
    47e4:	006f9102 	rsbeq	r9, pc, r2, lsl #2
    47e8:	0019b620 	andseq	fp, r9, r0, lsr #12
    47ec:	075b0100 	ldrbeq	r0, [fp, -r0, lsl #2]
    47f0:	0261c00d 	rsbeq	ip, r1, #13
    47f4:	00007000 	andeq	r7, r0, r0
    47f8:	fe9c0100 	cdp2	1, 9, cr0, cr12, cr0, {0}
    47fc:	1a000017 	bne	4860 <_start-0xb7a0>
    4800:	01007366 	tsteq	r0, r6, ror #6
    4804:	7a09075c 	bvc	24657c <__bss_end+0x118f1c>
    4808:	02000002 	andeq	r0, r0, #2
    480c:	641a7491 	ldrvs	r7, [sl], #-1169	; 0xfffffb6f
    4810:	01007269 	tsteq	r0, r9, ror #4
    4814:	0c08075d 	stceq	7, cr0, [r8], {93}	; 0x5d
    4818:	02000003 	andeq	r0, r0, #3
    481c:	631a7091 	tstvs	sl, #145	; 0x91
    4820:	5e01006c 	cdppl	0, 0, cr0, cr1, cr12, {3}
    4824:	00cc0807 	sbceq	r0, ip, r7, lsl #16
    4828:	91020000 	mrsls	r0, (UNDEF: 2)
    482c:	f21d006c 	vhadd.s16	q0, <illegal reg q6.5>, q14
    4830:	0100001b 	tsteq	r0, fp, lsl r0
    4834:	cc0e074a 	stcgt	7, cr0, [lr], {74}	; 0x4a
    4838:	50000000 	andpl	r0, r0, r0
    483c:	70000261 	andvc	r0, r0, r1, ror #4
    4840:	01000000 	mrseq	r0, (UNDEF: 0)
    4844:	0018489c 	mulseq	r8, ip, r8
    4848:	73661a00 	cmnvc	r6, #0, 20
    484c:	074b0100 	strbeq	r0, [fp, -r0, lsl #2]
    4850:	00027a09 	andeq	r7, r2, r9, lsl #20
    4854:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4858:	7269641a 	rsbvc	r6, r9, #436207616	; 0x1a000000
    485c:	074c0100 	strbeq	r0, [ip, -r0, lsl #2]
    4860:	000ff80e 	andeq	pc, pc, lr, lsl #16
    4864:	68910200 	ldmvs	r1, {r9}
    4868:	006c631b 	rsbeq	r6, ip, fp, lsl r3
    486c:	08074f01 	stmdaeq	r7, {r0, r8, r9, sl, fp, lr}
    4870:	000000cc 	andeq	r0, r0, ip, asr #1
    4874:	00749102 	rsbseq	r9, r4, r2, lsl #2
    4878:	001b541d 	andseq	r5, fp, sp, lsl r4
    487c:	07200100 	streq	r0, [r0, -r0, lsl #2]!
    4880:	0004e410 	andeq	lr, r4, r0, lsl r4
    4884:	02604400 	rsbeq	r4, r0, #0, 8
    4888:	00010c00 	andeq	r0, r1, r0, lsl #24
    488c:	b09c0100 	addslt	r0, ip, r0, lsl #2
    4890:	1a000018 	bne	48f8 <_start-0xb708>
    4894:	01007064 	tsteq	r0, r4, rrx
    4898:	1c070721 	stcne	7, cr0, [r7], {33}	; 0x21
    489c:	0200000d 	andeq	r0, r0, #13
    48a0:	a8196491 	ldmdage	r9, {r0, r4, r7, sl, sp, lr}
    48a4:	01000019 	tsteq	r0, r9, lsl r0
    48a8:	9e070722 	cdpls	7, 0, cr0, cr7, cr2, {1}
    48ac:	02000000 	andeq	r0, r0, #0
    48b0:	721b6091 	andsvc	r6, fp, #145	; 0x91
    48b4:	01007365 	tsteq	r0, r5, ror #6
    48b8:	e40a0725 	str	r0, [sl], #-1829	; 0xfffff8db
    48bc:	02000004 	andeq	r0, r0, #4
    48c0:	6e1b7791 	mrcvs	7, 0, r7, cr11, cr1, {4}
    48c4:	07260100 	streq	r0, [r6, -r0, lsl #2]!
    48c8:	00009e07 	andeq	r9, r0, r7, lsl #28
    48cc:	70910200 	addsvc	r0, r1, r0, lsl #4
    48d0:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    48d4:	09072701 	stmdbeq	r7, {r0, r8, r9, sl, sp}
    48d8:	0000027a 	andeq	r0, r0, sl, ror r2
    48dc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    48e0:	001b791d 	andseq	r7, fp, sp, lsl r9
    48e4:	06e30100 	strbteq	r0, [r3], r0, lsl #2
    48e8:	0004e410 	andeq	lr, r4, r0, lsl r4
    48ec:	025e1000 	subseq	r1, lr, #0
    48f0:	00023400 	andeq	r3, r2, r0, lsl #8
    48f4:	1a9c0100 	bne	fe704cfc <_estack+0xf66e4cfc>
    48f8:	1a000019 	bne	4964 <_start-0xb69c>
    48fc:	01007064 	tsteq	r0, r4, rrx
    4900:	1c0706e4 	stcne	6, cr0, [r7], {228}	; 0xe4
    4904:	0200000d 	andeq	r0, r0, #13
    4908:	4e196491 	cfcmpsmi	r6, mvf9, mvf1
    490c:	0100001c 	tsteq	r0, ip, lsl r0
    4910:	250606e5 	strcs	r0, [r6, #-1765]	; 0xfffff91b
    4914:	02000000 	andeq	r0, r0, #0
    4918:	6f1b6091 	svcvs	0x001b6091
    491c:	01007366 	tsteq	r0, r6, ror #6
    4920:	cc0806e8 	stcgt	6, cr0, [r8], {232}	; 0xe8
    4924:	02000000 	andeq	r0, r0, #0
    4928:	14176c91 	ldrne	r6, [r7], #-3217	; 0xfffff36f
    492c:	01000016 	tsteq	r0, r6, lsl r0
    4930:	cc0d06e8 	stcgt	6, cr0, [sp], {232}	; 0xe8
    4934:	02000000 	andeq	r0, r0, #0
    4938:	661b7491 			; <UNDEFINED> instruction: 0x661b7491
    493c:	e9010073 	stmdb	r1, {r0, r1, r4, r5, r6}
    4940:	027a0906 	rsbseq	r0, sl, #98304	; 0x18000
    4944:	91020000 	mrsls	r0, (UNDEF: 2)
    4948:	fb1d0070 	blx	744b12 <__bss_end+0x6174b2>
    494c:	0100001b 	tsteq	r0, fp, lsl r0
    4950:	e41006b3 	ldr	r0, [r0], #-1715	; 0xfffff94d
    4954:	40000004 	andmi	r0, r0, r4
    4958:	d000025c 	andle	r0, r0, ip, asr r2
    495c:	01000001 	tsteq	r0, r1
    4960:	0019849c 	mulseq	r9, ip, r4
    4964:	70641a00 	rsbvc	r1, r4, r0, lsl #20
    4968:	06b40100 	ldrteq	r0, [r4], r0, lsl #2
    496c:	000d1c07 	andeq	r1, sp, r7, lsl #24
    4970:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4974:	73666f1a 	cmnvc	r6, #26, 30	; 0x68
    4978:	06b50100 	ldrteq	r0, [r5], r0, lsl #2
    497c:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4980:	60910200 	addsvs	r0, r1, r0, lsl #4
    4984:	7a73631b 	bvc	1cdd5f8 <__bss_end+0x1baff98>
    4988:	06b80100 	ldrteq	r0, [r8], r0, lsl #2
    498c:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4990:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4994:	00161417 	andseq	r1, r6, r7, lsl r4
    4998:	06b80100 	ldrteq	r0, [r8], r0, lsl #2
    499c:	0000cc0d 	andeq	ip, r0, sp, lsl #24
    49a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    49a4:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    49a8:	0906b901 	stmdbeq	r6, {r0, r8, fp, ip, sp, pc}
    49ac:	0000027a 	andeq	r0, r0, sl, ror r2
    49b0:	00709102 	rsbseq	r9, r0, r2, lsl #2
    49b4:	0019871d 	andseq	r8, r9, sp, lsl r7
    49b8:	068c0100 	streq	r0, [ip], r0, lsl #2
    49bc:	0004e410 	andeq	lr, r4, r0, lsl r4
    49c0:	025b3c00 	subseq	r3, fp, #0, 24
    49c4:	00010400 	andeq	r0, r1, r0, lsl #8
    49c8:	fd9c0100 	ldc2	1, cr0, [ip]
    49cc:	1a000019 	bne	4a38 <_start-0xb5c8>
    49d0:	01007366 	tsteq	r0, r6, ror #6
    49d4:	7a09068d 	bvc	246410 <__bss_end+0x118db0>
    49d8:	02000002 	andeq	r0, r0, #2
    49dc:	14196491 	ldrne	r6, [r9], #-1169	; 0xfffffb6f
    49e0:	01000016 	tsteq	r0, r6, lsl r0
    49e4:	cc08068e 	stcgt	6, cr0, [r8], {142}	; 0x8e
    49e8:	02000000 	andeq	r0, r0, #0
    49ec:	28176091 	ldmdacs	r7, {r0, r4, r7, sp, lr}
    49f0:	0100001b 	tsteq	r0, fp, lsl r0
    49f4:	e4080691 	str	r0, [r8], #-1681	; 0xfffff96f
    49f8:	02000000 	andeq	r0, r0, #0
    49fc:	6e1b7091 	mrcvs	0, 0, r7, cr11, cr1, {4}
    4a00:	06920100 	ldreq	r0, [r2], r0, lsl #2
    4a04:	00009e07 	andeq	r9, r0, r7, lsl #28
    4a08:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4a0c:	627a731b 	rsbsvs	r7, sl, #1811939328	; 0x6c000000
    4a10:	06920100 	ldreq	r0, [r2], r0, lsl #2
    4a14:	00009e0a 	andeq	r9, r0, sl, lsl #28
    4a18:	68910200 	ldmvs	r1, {r9}
    4a1c:	00195517 	andseq	r5, r9, r7, lsl r5
    4a20:	06930100 	ldreq	r0, [r3], r0, lsl #2
    4a24:	00030c08 	andeq	r0, r3, r8, lsl #24
    4a28:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4a2c:	1bc61d00 	blne	ff18be34 <_estack+0xf716be34>
    4a30:	04010000 	streq	r0, [r1], #-0
    4a34:	00cc0e06 	sbceq	r0, ip, r6, lsl #28
    4a38:	58180000 	ldmdapl	r8, {}	; <UNPREDICTABLE>
    4a3c:	03240002 			; <UNDEFINED> instruction: 0x03240002
    4a40:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a44:	00001a87 	andeq	r1, r0, r7, lsl #21
    4a48:	6a626f1a 	bvs	18a06b8 <__bss_end+0x1773058>
    4a4c:	06050100 	streq	r0, [r5], -r0, lsl #2
    4a50:	0012970b 	andseq	r9, r2, fp, lsl #14
    4a54:	5c910200 	lfmpl	f0, 4, [r1], {0}
    4a58:	00161419 	andseq	r1, r6, r9, lsl r4
    4a5c:	06060100 	streq	r0, [r6], -r0, lsl #2
    4a60:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4a64:	58910200 	ldmpl	r1, {r9}
    4a68:	0073631b 	rsbseq	r6, r3, fp, lsl r3
    4a6c:	08060901 	stmdaeq	r6, {r0, r8, fp}
    4a70:	000000cc 	andeq	r0, r0, ip, asr #1
    4a74:	1b649102 	blne	1928e84 <__bss_end+0x17fb824>
    4a78:	006c636e 	rsbeq	r6, ip, lr, ror #6
    4a7c:	0c060901 			; <UNDEFINED> instruction: 0x0c060901
    4a80:	000000cc 	andeq	r0, r0, ip, asr #1
    4a84:	1b749102 	blne	1d28e94 <__bss_end+0x1bfb834>
    4a88:	006c6373 	rsbeq	r6, ip, r3, ror r3
    4a8c:	11060901 	tstne	r6, r1, lsl #18
    4a90:	000000cc 	andeq	r0, r0, ip, asr #1
    4a94:	1b709102 	blne	1c28ea4 <__bss_end+0x1afb844>
    4a98:	00736572 	rsbseq	r6, r3, r2, ror r5
    4a9c:	0a060a01 	beq	1872a8 <__bss_end+0x59c48>
    4aa0:	000004e4 	andeq	r0, r0, r4, ror #9
    4aa4:	1b6f9102 	blne	1be8eb4 <__bss_end+0x1abb854>
    4aa8:	01007366 	tsteq	r0, r6, ror #6
    4aac:	7a09060b 	bvc	2462e0 <__bss_end+0x118c80>
    4ab0:	02000002 	andeq	r0, r0, #2
    4ab4:	1d006891 	stcne	8, cr6, [r0, #-580]	; 0xfffffdbc
    4ab8:	000018e7 	andeq	r1, r0, r7, ror #17
    4abc:	1005a501 	andne	sl, r5, r1, lsl #10
    4ac0:	000004e4 	andeq	r0, r0, r4, ror #9
    4ac4:	000256a0 	andeq	r5, r2, r0, lsr #13
    4ac8:	00000178 	andeq	r0, r0, r8, ror r1
    4acc:	1b029c01 	blne	abad8 <ramdisk+0x7e480>
    4ad0:	6f1a0000 	svcvs	0x001a0000
    4ad4:	01006a62 	tsteq	r0, r2, ror #20
    4ad8:	970b05a6 	strls	r0, [fp, -r6, lsr #11]
    4adc:	02000012 	andeq	r0, r0, #18
    4ae0:	14196491 	ldrne	r6, [r9], #-1169	; 0xfffffb6f
    4ae4:	01000016 	tsteq	r0, r6, lsl r0
    4ae8:	cc0805a7 	cfstr32gt	mvfx0, [r8], {167}	; 0xa7
    4aec:	02000000 	andeq	r0, r0, #0
    4af0:	88196091 	ldmdahi	r9, {r0, r4, r7, sp, lr}
    4af4:	0100001a 	tsteq	r0, sl, lsl r0
    4af8:	cc0805a8 	cfstr32gt	mvfx0, [r8], {168}	; 0xa8
    4afc:	02000000 	andeq	r0, r0, #0
    4b00:	721b5c91 	andsvc	r5, fp, #37120	; 0x9100
    4b04:	01007365 	tsteq	r0, r5, ror #6
    4b08:	e40a05ab 	str	r0, [sl], #-1451	; 0xfffffa55
    4b0c:	02000004 	andeq	r0, r0, #4
    4b10:	6e1b7791 	mrcvs	7, 0, r7, cr11, cr1, {4}
    4b14:	01007478 	tsteq	r0, r8, ror r4
    4b18:	cc0805ac 	cfstr32gt	mvfx0, [r8], {172}	; 0xac
    4b1c:	02000000 	andeq	r0, r0, #0
    4b20:	661b6c91 			; <UNDEFINED> instruction: 0x661b6c91
    4b24:	ad010073 	stcge	0, cr0, [r1, #-460]	; 0xfffffe34
    4b28:	027a0905 	rsbseq	r0, sl, #81920	; 0x14000
    4b2c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b30:	101d0070 	andsne	r0, sp, r0, ror r0
    4b34:	0100001a 	tsteq	r0, sl, lsl r0
    4b38:	e41004e7 	ldr	r0, [r0], #-1255	; 0xfffffb19
    4b3c:	58000004 	stmdapl	r0, {r2}
    4b40:	48000253 	stmdami	r0, {r0, r1, r4, r6, r9}
    4b44:	01000003 	tsteq	r0, r3
    4b48:	001b7a9c 	mulseq	fp, ip, sl
    4b4c:	73661a00 	cmnvc	r6, #0, 20
    4b50:	04e80100 	strbteq	r0, [r8], #256	; 0x100
    4b54:	00027a09 	andeq	r7, r2, r9, lsl #20
    4b58:	5c910200 	lfmpl	f0, 4, [r1], {0}
    4b5c:	00161419 	andseq	r1, r6, r9, lsl r4
    4b60:	04e90100 	strbteq	r0, [r9], #256	; 0x100
    4b64:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4b68:	58910200 	ldmpl	r1, {r9}
    4b6c:	6c61761a 	stclvs	6, cr7, [r1], #-104	; 0xffffff98
    4b70:	04ea0100 	strbteq	r0, [sl], #256	; 0x100
    4b74:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4b78:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    4b7c:	0063621b 	rsbeq	r6, r3, fp, lsl r2
    4b80:	0704ed01 	streq	lr, [r4, -r1, lsl #26]
    4b84:	0000009e 	muleq	r0, lr, r0
    4b88:	1b689102 	blne	1a28f98 <__bss_end+0x18fb938>
    4b8c:	ee010070 	mcr	0, 0, r0, cr1, cr0, {3}
    4b90:	030c0804 	movweq	r0, #51204	; 0xc804
    4b94:	91020000 	mrsls	r0, (UNDEF: 2)
    4b98:	65721b64 	ldrbvs	r1, [r2, #-2916]!	; 0xfffff49c
    4b9c:	ef010073 	svc	0x00010073
    4ba0:	04e40a04 	strbteq	r0, [r4], #2564	; 0xa04
    4ba4:	91020000 	mrsls	r0, (UNDEF: 2)
    4ba8:	c51d006f 	ldrgt	r0, [sp, #-111]	; 0xffffff91
    4bac:	01000019 	tsteq	r0, r9, lsl r0
    4bb0:	cc0e0499 	cfstrsgt	mvf0, [lr], {153}	; 0x99
    4bb4:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    4bb8:	68000250 	stmdavs	r0, {r4, r6, r9}
    4bbc:	01000002 	tsteq	r0, r2
    4bc0:	001bf39c 	mulseq	fp, ip, r3
    4bc4:	626f1a00 	rsbvs	r1, pc, #0, 20
    4bc8:	9a01006a 	bls	44d78 <ramdisk+0x17720>
    4bcc:	12970b04 	addsne	r0, r7, #4, 22	; 0x1000
    4bd0:	91020000 	mrsls	r0, (UNDEF: 2)
    4bd4:	16141964 	ldrne	r1, [r4], -r4, ror #18
    4bd8:	9b010000 	blls	44be0 <ramdisk+0x17588>
    4bdc:	00cc0804 	sbceq	r0, ip, r4, lsl #16
    4be0:	91020000 	mrsls	r0, (UNDEF: 2)
    4be4:	63771b60 	cmnvs	r7, #96, 22	; 0x18000
    4be8:	049e0100 	ldreq	r0, [lr], #256	; 0x100
    4bec:	00009e07 	andeq	r9, r0, r7, lsl #28
    4bf0:	68910200 	ldmvs	r1, {r9}
    4bf4:	0063621b 	rsbeq	r6, r3, fp, lsl r2
    4bf8:	0b049e01 	bleq	12c404 <ramdisk+0xfedac>
    4bfc:	0000009e 	muleq	r0, lr, r0
    4c00:	1b6c9102 	blne	1b29010 <__bss_end+0x19fb9b0>
    4c04:	006c6176 	rsbeq	r6, ip, r6, ror r1
    4c08:	08049f01 	stmdaeq	r4, {r0, r8, r9, sl, fp, ip, pc}
    4c0c:	000000cc 	andeq	r0, r0, ip, asr #1
    4c10:	1b749102 	blne	1d29020 <__bss_end+0x1bfb9c0>
    4c14:	01007366 	tsteq	r0, r6, ror #6
    4c18:	7a0904a0 	bvc	245ea0 <__bss_end+0x118840>
    4c1c:	02000002 	andeq	r0, r0, #2
    4c20:	1f007091 	svcne	0x00007091
    4c24:	00001b23 	andeq	r1, r0, r3, lsr #22
    4c28:	0e048801 	cdpeq	8, 0, cr8, cr4, cr1, {0}
    4c2c:	000000e4 	andeq	r0, r0, r4, ror #1
    4c30:	00025080 	andeq	r5, r2, r0, lsl #1
    4c34:	00000070 	andeq	r0, r0, r0, ror r0
    4c38:	1c2e9c01 	stcne	12, cr9, [lr], #-4
    4c3c:	661a0000 	ldrvs	r0, [sl], -r0
    4c40:	89010073 	stmdbhi	r1, {r0, r1, r4, r5, r6}
    4c44:	027a0904 	rsbseq	r0, sl, #4, 18	; 0x10000
    4c48:	91020000 	mrsls	r0, (UNDEF: 2)
    4c4c:	16141974 			; <UNDEFINED> instruction: 0x16141974
    4c50:	8a010000 	bhi	44c58 <ramdisk+0x17600>
    4c54:	00cc0804 	sbceq	r0, ip, r4, lsl #16
    4c58:	91020000 	mrsls	r0, (UNDEF: 2)
    4c5c:	ea1d0070 	b	744e24 <__bss_end+0x6177c4>
    4c60:	0100001b 	tsteq	r0, fp, lsl r0
    4c64:	e4100457 	ldr	r0, [r0], #-1111	; 0xfffffba9
    4c68:	0c000004 	stceq	0, cr0, [r0], {4}
    4c6c:	7400024f 	strvc	r0, [r0], #-591	; 0xfffffdb1
    4c70:	01000001 	tsteq	r0, r1
    4c74:	001c699c 	mulseq	ip, ip, r9
    4c78:	73661a00 	cmnvc	r6, #0, 20
    4c7c:	04580100 	ldrbeq	r0, [r8], #-256	; 0xffffff00
    4c80:	00027a09 	andeq	r7, r2, r9, lsl #20
    4c84:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4c88:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    4c8c:	045b0100 	ldrbeq	r0, [fp], #-256	; 0xffffff00
    4c90:	0004e40a 	andeq	lr, r4, sl, lsl #8
    4c94:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4c98:	19e71d00 	stmibne	r7!, {r8, sl, fp, ip}^
    4c9c:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
    4ca0:	04e41004 	strbteq	r1, [r4], #4
    4ca4:	4e6c0000 	cdpmi	0, 6, cr0, cr12, cr0, {0}
    4ca8:	00a00002 	adceq	r0, r0, r2
    4cac:	9c010000 	stcls	0, cr0, [r1], {-0}
    4cb0:	00001cb4 			; <UNDEFINED> instruction: 0x00001cb4
    4cb4:	0073661a 	rsbseq	r6, r3, sl, lsl r6
    4cb8:	09043901 	stmdbeq	r4, {r0, r8, fp, ip, sp}
    4cbc:	0000027a 	andeq	r0, r0, sl, ror r2
    4cc0:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
    4cc4:	00001b28 	andeq	r1, r0, r8, lsr #22
    4cc8:	08043a01 	stmdaeq	r4, {r0, r9, fp, ip, sp}
    4ccc:	000000e4 	andeq	r0, r0, r4, ror #1
    4cd0:	1b689102 	blne	1a290e0 <__bss_end+0x18fba80>
    4cd4:	00736572 	rsbseq	r6, r3, r2, ror r5
    4cd8:	0a043d01 	beq	1140e4 <ramdisk+0xe6a8c>
    4cdc:	000004e4 	andeq	r0, r0, r4, ror #9
    4ce0:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4ce4:	001c791d 	andseq	r7, ip, sp, lsl r9
    4ce8:	04220100 	strteq	r0, [r2], #-256	; 0xffffff00
    4cec:	0004e410 	andeq	lr, r4, r0, lsl r4
    4cf0:	024d9000 	subeq	r9, sp, #0
    4cf4:	0000dc00 	andeq	sp, r0, r0, lsl #24
    4cf8:	ef9c0100 	svc	0x009c0100
    4cfc:	1a00001c 	bne	4d74 <_start-0xb28c>
    4d00:	01007366 	tsteq	r0, r6, ror #6
    4d04:	7a090423 	bvc	245d98 <__bss_end+0x118738>
    4d08:	02000002 	andeq	r0, r0, #2
    4d0c:	721b6c91 	andsvc	r6, fp, #37120	; 0x9100
    4d10:	01007365 	tsteq	r0, r5, ror #6
    4d14:	e40a0426 	str	r0, [sl], #-1062	; 0xfffffbda
    4d18:	02000004 	andeq	r0, r0, #4
    4d1c:	1f007791 	svcne	0x00007791
    4d20:	00001c30 	andeq	r1, r0, r0, lsr ip
    4d24:	0c02ca01 			; <UNDEFINED> instruction: 0x0c02ca01
    4d28:	00000025 	andeq	r0, r0, r5, lsr #32
    4d2c:	00024d54 	andeq	r4, r2, r4, asr sp
    4d30:	0000003c 	andeq	r0, r0, ip, lsr r0
    4d34:	1d199c01 	ldcne	12, cr9, [r9, #-4]
    4d38:	631a0000 	tstvs	sl, #0
    4d3c:	02ca0100 	sbceq	r0, sl, #0, 2
    4d40:	0000aa1a 	andeq	sl, r0, sl, lsl sl
    4d44:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4d48:	1c5d1f00 	mrrcne	15, 0, r1, sp, cr0
    4d4c:	b6010000 	strlt	r0, [r1], -r0
    4d50:	00250c02 	eoreq	r0, r5, r2, lsl #24
    4d54:	4d180000 	ldcmi	0, cr0, [r8, #-0]
    4d58:	003c0002 	eorseq	r0, ip, r2
    4d5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d60:	00001d43 	andeq	r1, r0, r3, asr #26
    4d64:	0100631a 	tsteq	r0, sl, lsl r3
    4d68:	aa1a02b6 	bge	685848 <__bss_end+0x5581e8>
    4d6c:	02000000 	andeq	r0, r0, #0
    4d70:	21007791 			; <UNDEFINED> instruction: 0x21007791
    4d74:	00001be1 	andeq	r1, r0, r1, ror #23
    4d78:	0d029801 	stceq	8, cr9, [r2, #-4]
    4d7c:	00024c70 	andeq	r4, r2, r0, ror ip
    4d80:	000000a8 	andeq	r0, r0, r8, lsr #1
    4d84:	1d7b9c01 	ldclne	12, cr9, [fp, #-4]!
    4d88:	701a0000 	andsvc	r0, sl, r0
    4d8c:	01007274 	tsteq	r0, r4, ror r2
    4d90:	0c1d0298 	lfmeq	f0, 4, [sp], {152}	; 0x98
    4d94:	02000003 	andeq	r0, r0, #3
    4d98:	761a7491 			; <UNDEFINED> instruction: 0x761a7491
    4d9c:	01006c61 	tsteq	r0, r1, ror #24
    4da0:	cc280298 	sfmgt	f0, 4, [r8], #-608	; 0xfffffda0
    4da4:	02000000 	andeq	r0, r0, #0
    4da8:	21007091 	swpcs	r7, r1, [r0]
    4dac:	000018fa 	strdeq	r1, [r0], -sl
    4db0:	0d029201 	sfmeq	f1, 1, [r2, #-4]
    4db4:	00024c0c 	andeq	r4, r2, ip, lsl #24
    4db8:	00000064 	andeq	r0, r0, r4, rrx
    4dbc:	1db39c01 	ldcne	12, cr9, [r3, #4]!
    4dc0:	701a0000 	andsvc	r0, sl, r0
    4dc4:	01007274 	tsteq	r0, r4, ror r2
    4dc8:	0c1c0292 	lfmeq	f0, 4, [ip], {146}	; 0x92
    4dcc:	02000003 	andeq	r0, r0, #3
    4dd0:	761a7491 			; <UNDEFINED> instruction: 0x761a7491
    4dd4:	01006c61 	tsteq	r0, r1, ror #24
    4dd8:	bb260292 	bllt	985828 <__bss_end+0x8581c8>
    4ddc:	02000000 	andeq	r0, r0, #0
    4de0:	1f007291 	svcne	0x00007291
    4de4:	00001a29 	andeq	r1, r0, r9, lsr #20
    4de8:	0e027501 	cfsh32eq	mvfx7, mvfx2, #1
    4dec:	000000cc 	andeq	r0, r0, ip, asr #1
    4df0:	00024b88 	andeq	r4, r2, r8, lsl #23
    4df4:	00000084 	andeq	r0, r0, r4, lsl #1
    4df8:	1dee9c01 	stclne	12, cr9, [lr, #4]!
    4dfc:	701a0000 	andsvc	r0, sl, r0
    4e00:	01007274 	tsteq	r0, r4, ror r2
    4e04:	f8240275 			; <UNDEFINED> instruction: 0xf8240275
    4e08:	0200000f 	andeq	r0, r0, #15
    4e0c:	721b6c91 	andsvc	r6, fp, #37120	; 0x9100
    4e10:	77010076 	smlsdxvc	r1, r6, r0, r0
    4e14:	00cc0802 	sbceq	r0, ip, r2, lsl #16
    4e18:	91020000 	mrsls	r0, (UNDEF: 2)
    4e1c:	bf220074 	svclt	0x00220074
    4e20:	0100001a 	tsteq	r0, sl, lsl r0
    4e24:	bb0d026c 	bllt	3457dc <__bss_end+0x21817c>
    4e28:	30000000 	andcc	r0, r0, r0
    4e2c:	5800024b 	stmdapl	r0, {r0, r1, r3, r6, r9}
    4e30:	01000000 	mrseq	r0, (UNDEF: 0)
    4e34:	74701a9c 	ldrbtvc	r1, [r0], #-2716	; 0xfffff564
    4e38:	6c010072 	stcvs	0, cr0, [r1], {114}	; 0x72
    4e3c:	0ff82202 	svceq	0x00f82202
    4e40:	91020000 	mrsls	r0, (UNDEF: 2)
    4e44:	76721b6c 	ldrbtvc	r1, [r2], -ip, ror #22
    4e48:	026e0100 	rsbeq	r0, lr, #0, 2
    4e4c:	0000bb07 	andeq	fp, r0, r7, lsl #22
    4e50:	76910200 	ldrvc	r0, [r1], r0, lsl #4
    4e54:	02d20000 	sbcseq	r0, r2, #0
    4e58:	00040000 	andeq	r0, r4, r0
    4e5c:	00000fc7 	andeq	r0, r0, r7, asr #31
    4e60:	00370104 	eorseq	r0, r7, r4, lsl #2
    4e64:	f90c0000 			; <UNDEFINED> instruction: 0xf90c0000
    4e68:	ae00001c 	mcrge	0, 0, r0, cr0, cr12, {0}
    4e6c:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    4e70:	740002b0 	strvc	r0, [r0], #-688	; 0xfffffd50
    4e74:	eb000003 	bl	4e88 <_start-0xb178>
    4e78:	02000042 	andeq	r0, r0, #66	; 0x42
    4e7c:	06680601 	strbteq	r0, [r8], -r1, lsl #12
    4e80:	02020000 	andeq	r0, r2, #0
    4e84:	00073105 	andeq	r3, r7, r5, lsl #2
    4e88:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    4e8c:	00000180 	andeq	r0, r0, r0, lsl #3
    4e90:	7b050802 	blvc	146ea0 <__bss_end+0x19840>
    4e94:	02000001 	andeq	r0, r0, #1
    4e98:	06660801 	strbteq	r0, [r6], -r1, lsl #16
    4e9c:	1d030000 	stcne	0, cr0, [r3, #-0]
    4ea0:	02000018 	andeq	r0, r0, #24
    4ea4:	00541931 	subseq	r1, r4, r1, lsr r9
    4ea8:	02020000 	andeq	r0, r2, #0
    4eac:	00009b07 	andeq	r9, r0, r7, lsl #22
    4eb0:	17030300 	strne	r0, [r3, -r0, lsl #6]
    4eb4:	34020000 	strcc	r0, [r2], #-0
    4eb8:	00006719 	andeq	r6, r0, r9, lsl r7
    4ebc:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4ec0:	00000654 	andeq	r0, r0, r4, asr r6
    4ec4:	4f070802 	svcmi	0x00070802
    4ec8:	04000006 	streq	r0, [r0], #-6
    4ecc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    4ed0:	04020074 	streq	r0, [r2], #-116	; 0xffffff8c
    4ed4:	00065907 	andeq	r5, r6, r7, lsl #18
    4ed8:	16830300 	strne	r0, [r3], r0, lsl #6
    4edc:	32030000 	andcc	r0, r3, #0
    4ee0:	00007c16 	andeq	r7, r0, r6, lsl ip
    4ee4:	15f80300 	ldrbne	r0, [r8, #768]!	; 0x300
    4ee8:	33030000 	movwcc	r0, #12288	; 0x3000
    4eec:	00004117 	andeq	r4, r0, r7, lsl r1
    4ef0:	008f0500 	addeq	r0, pc, r0, lsl #10
    4ef4:	c9030000 	stmdbgt	r3, {}	; <UNPREDICTABLE>
    4ef8:	03000016 	movweq	r0, #22
    4efc:	00481334 	subeq	r1, r8, r4, lsr r3
    4f00:	c8030000 	stmdagt	r3, {}	; <UNPREDICTABLE>
    4f04:	03000016 	movweq	r0, #22
    4f08:	005b1335 	subseq	r1, fp, r5, lsr r3
    4f0c:	e0030000 	and	r0, r3, r0
    4f10:	03000015 	movweq	r0, #21
    4f14:	00ac0f54 	adceq	r0, ip, r4, asr pc
    4f18:	01020000 	mrseq	r0, (UNDEF: 2)
    4f1c:	00066f08 	andeq	r6, r6, r8, lsl #30
    4f20:	8f040600 	svchi	0x00040600
    4f24:	03000000 	movweq	r0, #0
    4f28:	00001c03 	andeq	r1, r0, r3, lsl #24
    4f2c:	8f0e0d04 	svchi	0x000e0d04
    4f30:	07000000 	streq	r0, [r0, -r0]
    4f34:	00410107 	subeq	r0, r1, r7, lsl #2
    4f38:	10040000 	andne	r0, r4, r0
    4f3c:	00010a0e 	andeq	r0, r1, lr, lsl #20
    4f40:	1c180800 	ldcne	8, cr0, [r8], {-0}
    4f44:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    4f48:	00001a58 	andeq	r1, r0, r8, asr sl
    4f4c:	1ad30801 	bne	ff4c6f58 <_estack+0xf74a6f58>
    4f50:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    4f54:	00001c38 	andeq	r1, r0, r8, lsr ip
    4f58:	1aae0803 	bne	feb86f6c <_estack+0xf6b66f6c>
    4f5c:	00040000 	andeq	r0, r4, r0
    4f60:	001d4a03 	andseq	r4, sp, r3, lsl #20
    4f64:	03160400 	tsteq	r6, #0, 8
    4f68:	000000dd 	ldrdeq	r0, [r0], -sp
    4f6c:	a9040802 	stmdbge	r4, {r1, fp}
    4f70:	09000001 	stmdbeq	r0, {r0}
    4f74:	008f0a04 	addeq	r0, pc, r4, lsl #20
    4f78:	01320000 	teqeq	r2, r0
    4f7c:	7c0b0000 	stcvc	0, cr0, [fp], {-0}
    4f80:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    4f84:	00000fff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    4f88:	001ce60c 	andseq	lr, ip, ip, lsl #12
    4f8c:	0d1f0100 	ldfeqs	f0, [pc, #-0]	; 4f94 <_start-0xb06c>
    4f90:	0000011f 	andeq	r0, r0, pc, lsl r1
    4f94:	d6580305 	ldrble	r0, [r8], -r5, lsl #6
    4f98:	d60c0002 	strle	r0, [ip], -r2
    4f9c:	0100001c 	tsteq	r0, ip, lsl r0
    4fa0:	00d11020 	sbcseq	r1, r1, r0, lsr #32
    4fa4:	03050000 	movweq	r0, #20480	; 0x5000
    4fa8:	0002c248 	andeq	ip, r2, r8, asr #4
    4fac:	001cc50c 	andseq	ip, ip, ip, lsl #10
    4fb0:	0c230100 	stfeqs	f0, [r3], #-0
    4fb4:	00000075 	andeq	r0, r0, r5, ror r0
    4fb8:	d6580305 	ldrble	r0, [r8], -r5, lsl #6
    4fbc:	940c0012 	strls	r0, [ip], #-18	; 0xffffffee
    4fc0:	0100001c 	tsteq	r0, ip, lsl r0
    4fc4:	00750c26 	rsbseq	r0, r5, r6, lsr #24
    4fc8:	03050000 	movweq	r0, #20480	; 0x5000
    4fcc:	0012d65c 	andseq	sp, r2, ip, asr r6
    4fd0:	001cdb0d 	andseq	sp, ip, sp, lsl #22
    4fd4:	09830100 	stmibeq	r3, {r8}
    4fd8:	0000010a 	andeq	r0, r0, sl, lsl #2
    4fdc:	0002b33c 	andeq	fp, r2, ip, lsr r3
    4fe0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    4fe4:	01d19c01 	bicseq	r9, r1, r1, lsl #24
    4fe8:	bb0e0000 	bllt	384ff0 <__bss_end+0x257990>
    4fec:	01000015 	tsteq	r0, r5, lsl r0
    4ff0:	008f1983 	addeq	r1, pc, r3, lsl #19
    4ff4:	91020000 	mrsls	r0, (UNDEF: 2)
    4ff8:	6d630f6f 	stclvs	15, cr0, [r3, #-444]!	; 0xfffffe44
    4ffc:	83010064 	movwhi	r0, #4196	; 0x1064
    5000:	00008f24 	andeq	r8, r0, r4, lsr #30
    5004:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    5008:	001bbb0e 	andseq	fp, fp, lr, lsl #22
    500c:	2f830100 	svccs	0x00830100
    5010:	0000011d 	andeq	r0, r0, sp, lsl r1
    5014:	10689102 	rsbne	r9, r8, r2, lsl #2
    5018:	00736572 	rsbseq	r6, r3, r2, ror r5
    501c:	0a0d8401 	beq	366028 <__bss_end+0x2389c8>
    5020:	02000001 	andeq	r0, r0, #1
    5024:	11007791 			; <UNDEFINED> instruction: 0x11007791
    5028:	00001cee 	andeq	r1, r0, lr, ror #25
    502c:	0a096c01 	beq	260038 <__bss_end+0x1329d8>
    5030:	88000001 	stmdahi	r0, {r0}
    5034:	b40002b2 	strlt	r0, [r0], #-690	; 0xfffffd4e
    5038:	01000000 	mrseq	r0, (UNDEF: 0)
    503c:	0002289c 	muleq	r2, ip, r8
    5040:	15bb0e00 	ldrne	r0, [fp, #3584]!	; 0xe00
    5044:	6c010000 	stcvs	0, cr0, [r1], {-0}
    5048:	00008f19 	andeq	r8, r0, r9, lsl pc
    504c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    5050:	001bbb0e 	andseq	fp, fp, lr, lsl #22
    5054:	2b6c0100 	blcs	1b0545c <__bss_end+0x19d7dfc>
    5058:	00000228 	andeq	r0, r0, r8, lsr #4
    505c:	0e709102 	expeqs	f1, f2
    5060:	00001d43 	andeq	r1, r0, r3, asr #26
    5064:	b8376c01 	ldmdalt	r7!, {r0, sl, fp, sp, lr}
    5068:	02000000 	andeq	r0, r0, #0
    506c:	8e0e6c91 	mcrhi	12, 0, r6, cr14, cr1, {4}
    5070:	0100001c 	tsteq	r0, ip, lsl r0
    5074:	0083446c 	addeq	r4, r3, ip, ror #8
    5078:	91020000 	mrsls	r0, (UNDEF: 2)
    507c:	04060068 	streq	r0, [r6], #-104	; 0xffffff98
    5080:	0000009b 	muleq	r0, fp, r0
    5084:	001d5211 	andseq	r5, sp, r1, lsl r2
    5088:	09550100 	ldmdbeq	r5, {r8}^
    508c:	0000010a 	andeq	r0, r0, sl, lsl #2
    5090:	0002b1d4 	ldrdeq	fp, [r2], -r4
    5094:	000000b4 	strheq	r0, [r0], -r4
    5098:	02859c01 	addeq	r9, r5, #256	; 0x100
    509c:	bb0e0000 	bllt	3850a4 <__bss_end+0x257a44>
    50a0:	01000015 	tsteq	r0, r5, lsl r0
    50a4:	008f1855 	addeq	r1, pc, r5, asr r8	; <UNPREDICTABLE>
    50a8:	91020000 	mrsls	r0, (UNDEF: 2)
    50ac:	1bbb0e77 	blne	feec8a90 <_estack+0xf6ea8a90>
    50b0:	55010000 	strpl	r0, [r1, #-0]
    50b4:	0000cb24 	andeq	ip, r0, r4, lsr #22
    50b8:	70910200 	addsvc	r0, r1, r0, lsl #4
    50bc:	001d430e 	andseq	r4, sp, lr, lsl #6
    50c0:	30550100 	subscc	r0, r5, r0, lsl #2
    50c4:	000000b8 	strheq	r0, [r0], -r8
    50c8:	0e6c9102 	lgneqe	f1, f2
    50cc:	00001c8e 	andeq	r1, r0, lr, lsl #25
    50d0:	833d5501 	teqhi	sp, #4194304	; 0x400000
    50d4:	02000000 	andeq	r0, r0, #0
    50d8:	11006891 			; <UNDEFINED> instruction: 0x11006891
    50dc:	00001ca9 	andeq	r1, r0, r9, lsr #25
    50e0:	d1093701 	tstle	r9, r1, lsl #14
    50e4:	fc000000 	stc2	0, cr0, [r0], {-0}
    50e8:	d80002b0 	stmdale	r0, {r4, r5, r7, r9}
    50ec:	01000000 	mrseq	r0, (UNDEF: 0)
    50f0:	0002af9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    50f4:	15bb0e00 	ldrne	r0, [fp, #3584]!	; 0xe00
    50f8:	37010000 	strcc	r0, [r1, -r0]
    50fc:	00008f1e 	andeq	r8, r0, lr, lsl pc
    5100:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    5104:	1cb91200 	lfmne	f1, 4, [r9]
    5108:	2c010000 	stccs	0, cr0, [r1], {-0}
    510c:	0000d109 	andeq	sp, r0, r9, lsl #2
    5110:	02b0b800 	adcseq	fp, r0, #0, 16
    5114:	00004400 	andeq	r4, r0, r0, lsl #8
    5118:	0e9c0100 	fmleqe	f0, f4, f0
    511c:	000015bb 			; <UNDEFINED> instruction: 0x000015bb
    5120:	8f1a2c01 	svchi	0x001a2c01
    5124:	02000000 	andeq	r0, r0, #0
    5128:	00007791 	muleq	r0, r1, r7
    512c:	000000a4 	andeq	r0, r0, r4, lsr #1
    5130:	10e10004 	rscne	r0, r1, r4
    5134:	01040000 	mrseq	r0, (UNDEF: 4)
    5138:	00000037 	andeq	r0, r0, r7, lsr r0
    513c:	001d680c 	andseq	r6, sp, ip, lsl #16
    5140:	0000ae00 	andeq	sl, r0, r0, lsl #28
    5144:	02b42c00 	adcseq	r2, r4, #0, 24
    5148:	00002000 	andeq	r2, r0, r0
    514c:	0044a300 	subeq	sl, r4, r0, lsl #6
    5150:	06010200 	streq	r0, [r1], -r0, lsl #4
    5154:	00000668 	andeq	r0, r0, r8, ror #12
    5158:	31050202 	tstcc	r5, r2, lsl #4
    515c:	02000007 	andeq	r0, r0, #7
    5160:	01800504 	orreq	r0, r0, r4, lsl #10
    5164:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5168:	00017b05 	andeq	r7, r1, r5, lsl #22
    516c:	08010200 	stmdaeq	r1, {r9}
    5170:	00000666 	andeq	r0, r0, r6, ror #12
    5174:	9b070202 	blls	1c5984 <__bss_end+0x98324>
    5178:	03000000 	movweq	r0, #0
    517c:	00001703 	andeq	r1, r0, r3, lsl #14
    5180:	5b193402 	blpl	652190 <__bss_end+0x524b30>
    5184:	02000000 	andeq	r0, r0, #0
    5188:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
    518c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5190:	00064f07 	andeq	r4, r6, r7, lsl #30
    5194:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
    5198:	00746e69 	rsbseq	r6, r4, r9, ror #28
    519c:	59070402 	stmdbpl	r7, {r1, sl}
    51a0:	03000006 	movweq	r0, #6
    51a4:	000016c8 	andeq	r1, r0, r8, asr #13
    51a8:	4f133503 	svcmi	0x00133503
    51ac:	02000000 	andeq	r0, r0, #0
    51b0:	066f0801 	strbteq	r0, [pc], -r1, lsl #16
    51b4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    51b8:	0001a904 	andeq	sl, r1, r4, lsl #18
    51bc:	1d5c0500 	cfldr64ne	mvdx0, [ip, #-0]
    51c0:	0b010000 	bleq	451c8 <ramdisk+0x17b70>
    51c4:	00007707 	andeq	r7, r0, r7, lsl #14
    51c8:	02b42c00 	adcseq	r2, r4, #0, 24
    51cc:	00002000 	andeq	r2, r0, r0
    51d0:	009c0100 	addseq	r0, ip, r0, lsl #2
    51d4:	00000067 	andeq	r0, r0, r7, rrx
    51d8:	11360004 	teqne	r6, r4
    51dc:	01040000 	mrseq	r0, (UNDEF: 4)
    51e0:	00000037 	andeq	r0, r0, r7, lsr r0
    51e4:	001db40c 	andseq	fp, sp, ip, lsl #8
    51e8:	0000ae00 	andeq	sl, r0, r0, lsl #28
    51ec:	00456400 	subeq	r6, r5, r0, lsl #8
    51f0:	06010200 	streq	r0, [r1], -r0, lsl #4
    51f4:	00000668 	andeq	r0, r0, r8, ror #12
    51f8:	31050202 	tstcc	r5, r2, lsl #4
    51fc:	02000007 	andeq	r0, r0, #7
    5200:	01800504 	orreq	r0, r0, r4, lsl #10
    5204:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5208:	00017b05 	andeq	r7, r1, r5, lsl #22
    520c:	08010200 	stmdaeq	r1, {r9}
    5210:	00000666 	andeq	r0, r0, r6, ror #12
    5214:	9b070202 	blls	1c5a24 <__bss_end+0x983c4>
    5218:	02000000 	andeq	r0, r0, #0
    521c:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
    5220:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
    5224:	00064f07 	andeq	r4, r6, r7, lsl #30
    5228:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    522c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5230:	59070402 	stmdbpl	r7, {r1, sl}
    5234:	02000006 	andeq	r0, r0, #6
    5238:	066f0801 	strbteq	r0, [pc], -r1, lsl #16
    523c:	22000000 	andcs	r0, r0, #0
    5240:	02000000 	andeq	r0, r0, #0
    5244:	00115c00 	andseq	r5, r1, r0, lsl #24
    5248:	81010400 	tsthi	r1, r0, lsl #8
    524c:	4c000045 	stcmi	0, cr0, [r0], {69}	; 0x45
    5250:	600002b4 			; <UNDEFINED> instruction: 0x600002b4
    5254:	010002b5 			; <UNDEFINED> instruction: 0x010002b5
    5258:	2800001e 	stmdacs	r0, {r1, r2, r3, r4}
    525c:	8200001e 	andhi	r0, r0, #30
    5260:	0100001e 	tsteq	r0, lr, lsl r0
    5264:	00002280 	andeq	r2, r0, r0, lsl #5
    5268:	70000200 	andvc	r0, r0, r0, lsl #4
    526c:	04000011 	streq	r0, [r0], #-17	; 0xffffffef
    5270:	0045f501 	subeq	pc, r5, r1, lsl #10
    5274:	02b56000 	adcseq	r6, r5, #0
    5278:	02b56400 	adcseq	r6, r5, #0, 8
    527c:	001e0100 	andseq	r0, lr, r0, lsl #2
    5280:	001e2800 	andseq	r2, lr, r0, lsl #16
    5284:	001e8200 	andseq	r8, lr, r0, lsl #4
    5288:	34800100 	strcc	r0, [r0], #256	; 0x100
    528c:	04000001 	streq	r0, [r0], #-1
    5290:	00118400 	andseq	r8, r1, r0, lsl #8
    5294:	09010400 	stmdbeq	r1, {sl}
    5298:	0c00001f 	stceq	0, cr0, [r0], {31}
    529c:	00001ede 	ldrdeq	r1, [r0], -lr
    52a0:	00001e95 	muleq	r0, r5, lr
    52a4:	0002b564 	andeq	fp, r2, r4, ror #10
    52a8:	000000ac 	andeq	r0, r0, ip, lsr #1
    52ac:	0000464c 	andeq	r4, r0, ip, asr #12
    52b0:	69050402 	stmdbvs	r5, {r1, sl}
    52b4:	0300746e 	movweq	r7, #1134	; 0x46e
    52b8:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
    52bc:	3817d102 	ldmdacc	r7, {r1, r8, ip, lr, pc}
    52c0:	04000000 	streq	r0, [r0], #-0
    52c4:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
    52c8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    52cc:	00017b05 	andeq	r7, r1, r5, lsl #22
    52d0:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    52d4:	000001a9 	andeq	r0, r0, r9, lsr #3
    52d8:	68060104 	stmdavs	r6, {r2, r8}
    52dc:	04000006 	streq	r0, [r0], #-6
    52e0:	06660801 	strbteq	r0, [r6], -r1, lsl #16
    52e4:	02040000 	andeq	r0, r4, #0
    52e8:	00073105 	andeq	r3, r7, r5, lsl #2
    52ec:	07020400 	streq	r0, [r2, -r0, lsl #8]
    52f0:	0000009b 	muleq	r0, fp, r0
    52f4:	80050404 	andhi	r0, r5, r4, lsl #8
    52f8:	04000001 	streq	r0, [r0], #-1
    52fc:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
    5300:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    5304:	00064f07 	andeq	r4, r6, r7, lsl #30
    5308:	54040500 	strpl	r0, [r4], #-1280	; 0xfffffb00
    530c:	04000000 	streq	r0, [r0], #-0
    5310:	066f0801 	strbteq	r0, [pc], -r1, lsl #16
    5314:	8e060000 	cdphi	0, 0, cr0, cr6, cr0, {0}
    5318:	0300001e 	movweq	r0, #30
    531c:	0025071e 	eoreq	r0, r5, lr, lsl r7
    5320:	b5640000 	strblt	r0, [r4, #-0]!
    5324:	00ac0002 	adceq	r0, ip, r2
    5328:	9c010000 	stcls	0, cr0, [r1], {-0}
    532c:	0000012a 	andeq	r0, r0, sl, lsr #2
    5330:	00316d07 	eorseq	r6, r1, r7, lsl #26
    5334:	2a152e01 	bcs	550b40 <__bss_end+0x4234e0>
    5338:	04000001 	streq	r0, [r0], #-1
    533c:	00000000 	andeq	r0, r0, r0
    5340:	07000000 	streq	r0, [r0, -r0]
    5344:	0100326d 	tsteq	r0, sp, ror #4
    5348:	012a0e2f 			; <UNDEFINED> instruction: 0x012a0e2f
    534c:	00290000 	eoreq	r0, r9, r0
    5350:	00250000 	eoreq	r0, r5, r0
    5354:	6e070000 	cdpvs	0, 0, cr0, cr7, cr0, {0}
    5358:	09300100 	ldmdbeq	r0!, {r8}
    535c:	0000002c 	andeq	r0, r0, ip, lsr #32
    5360:	0000005c 	andeq	r0, r0, ip, asr r0
    5364:	0000004a 	andeq	r0, r0, sl, asr #32
    5368:	00317308 	eorseq	r7, r1, r8, lsl #6
    536c:	7e124101 	mufvcs	f4, f2, f1
    5370:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    5374:	e4000000 	str	r0, [r0], #-0
    5378:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    537c:	01003273 	tsteq	r0, r3, ror r2
    5380:	007e1242 	rsbseq	r1, lr, r2, asr #4
    5384:	01490000 	mrseq	r0, (UNDEF: 73)
    5388:	01410000 	mrseq	r0, (UNDEF: 65)
    538c:	61080000 	mrsvs	r0, (UNDEF: 8)
    5390:	43010031 	movwmi	r0, #4145	; 0x1031
    5394:	00013112 	andeq	r3, r1, r2, lsl r1
    5398:	00017f00 	andeq	r7, r1, r0, lsl #30
    539c:	00017d00 	andeq	r7, r1, r0, lsl #26
    53a0:	32610800 	rsbcc	r0, r1, #0, 16
    53a4:	12440100 	subne	r0, r4, #0, 2
    53a8:	00000131 	andeq	r0, r0, r1, lsr r1
    53ac:	00000198 	muleq	r0, r8, r1
    53b0:	00000192 	muleq	r0, r2, r1
    53b4:	30040500 	andcc	r0, r4, r0, lsl #10
    53b8:	09000001 	stmdbeq	r0, {r0}
    53bc:	00700405 	rsbseq	r0, r0, r5, lsl #8
    53c0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
    53c4:	04000001 	streq	r0, [r0], #-1
    53c8:	00121100 	andseq	r1, r2, r0, lsl #2
    53cc:	09010400 	stmdbeq	r1, {sl}
    53d0:	0c00001f 	stceq	0, cr0, [r0], {31}
    53d4:	00001f78 	andeq	r1, r0, r8, ror pc
    53d8:	00001fd9 	ldrdeq	r1, [r0], -r9
    53dc:	0002b610 	andeq	fp, r2, r0, lsl r6
    53e0:	00000120 	andeq	r0, r0, r0, lsr #2
    53e4:	000047bd 			; <UNDEFINED> instruction: 0x000047bd
    53e8:	69050402 	stmdbvs	r5, {r1, sl}
    53ec:	0300746e 	movweq	r7, #1134	; 0x46e
    53f0:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
    53f4:	3817d102 	ldmdacc	r7, {r1, r8, ip, lr, pc}
    53f8:	04000000 	streq	r0, [r0], #-0
    53fc:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
    5400:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    5404:	00017b05 	andeq	r7, r1, r5, lsl #22
    5408:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    540c:	000001a9 	andeq	r0, r0, r9, lsr #3
    5410:	68060104 	stmdavs	r6, {r2, r8}
    5414:	04000006 	streq	r0, [r0], #-6
    5418:	06660801 	strbteq	r0, [r6], -r1, lsl #16
    541c:	02040000 	andeq	r0, r4, #0
    5420:	00073105 	andeq	r3, r7, r5, lsl #2
    5424:	07020400 	streq	r0, [r2, -r0, lsl #8]
    5428:	0000009b 	muleq	r0, fp, r0
    542c:	80050404 	andhi	r0, r5, r4, lsl #8
    5430:	05000001 	streq	r0, [r0, #-1]
    5434:	00000069 	andeq	r0, r0, r9, rrx
    5438:	54070404 	strpl	r0, [r7], #-1028	; 0xfffffbfc
    543c:	04000006 	streq	r0, [r0], #-6
    5440:	064f0708 	strbeq	r0, [pc], -r8, lsl #14
    5444:	04060000 	streq	r0, [r6], #-0
    5448:	00008307 	andeq	r8, r0, r7, lsl #6
    544c:	90040800 	andls	r0, r4, r0, lsl #16
    5450:	04000000 	streq	r0, [r0], #-0
    5454:	066f0801 	strbteq	r0, [pc], -r1, lsl #16
    5458:	90050000 	andls	r0, r5, r0
    545c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5460:	00009704 	andeq	r9, r0, r4, lsl #14
    5464:	ad040800 	stcge	8, cr0, [r4, #-0]
    5468:	07000000 	streq	r0, [r0, -r0]
    546c:	000000a2 	andeq	r0, r0, r2, lsr #1
    5470:	1fcd0a09 	svcne	0x00cd0a09
    5474:	1f030000 	svcne	0x00030000
    5478:	00008309 	andeq	r8, r0, r9, lsl #6
    547c:	02b61000 	adcseq	r1, r6, #0
    5480:	00012000 	andeq	r2, r1, r0
    5484:	4f9c0100 	svcmi	0x009c0100
    5488:	0b000001 	bleq	5494 <_start-0xab6c>
    548c:	00001fb0 			; <UNDEFINED> instruction: 0x00001fb0
    5490:	851a3101 	ldrhi	r3, [sl, #-257]	; 0xfffffeff
    5494:	01000000 	mrseq	r0, (UNDEF: 0)
    5498:	1f730c50 	svcne	0x00730c50
    549c:	32010000 	andcc	r0, r1, #0
    54a0:	0000a819 	andeq	sl, r0, r9, lsl r8
    54a4:	0001cb00 	andeq	ip, r1, r0, lsl #22
    54a8:	0001c100 	andeq	ip, r1, r0, lsl #2
    54ac:	1fd40c00 	svcne	0x00d40c00
    54b0:	33010000 	movwcc	r0, #4096	; 0x1000
    54b4:	00002c09 	andeq	r2, r0, r9, lsl #24
    54b8:	00022200 	andeq	r2, r2, r0, lsl #4
    54bc:	00021000 	andeq	r1, r2, r0
    54c0:	73640d00 	cmnvc	r4, #0, 26
    54c4:	42010074 	andmi	r0, r1, #116	; 0x74
    54c8:	00008a09 	andeq	r8, r0, r9, lsl #20
    54cc:	00029b00 	andeq	r9, r2, r0, lsl #22
    54d0:	00029100 	andeq	r9, r2, r0, lsl #2
    54d4:	72730d00 	rsbsvc	r0, r3, #0, 26
    54d8:	43010063 	movwmi	r0, #4195	; 0x1063
    54dc:	00009c0f 	andeq	r9, r0, pc, lsl #24
    54e0:	0002e800 	andeq	lr, r2, r0, lsl #16
    54e4:	0002da00 	andeq	sp, r2, r0, lsl #20
    54e8:	1fb50e00 	svcne	0x00b50e00
    54ec:	44010000 	strmi	r0, [r1], #-0
    54f0:	00014f09 	andeq	r4, r1, r9, lsl #30
    54f4:	00034600 	andeq	r4, r3, r0, lsl #12
    54f8:	00034400 	andeq	r4, r3, r0, lsl #8
    54fc:	1fc10e00 	svcne	0x00c10e00
    5500:	45010000 	strmi	r0, [r1, #-0]
    5504:	0001550f 	andeq	r5, r1, pc, lsl #10
    5508:	00036b00 	andeq	r6, r3, r0, lsl #22
    550c:	00035900 	andeq	r5, r3, r0, lsl #18
    5510:	04080000 	streq	r0, [r8], #-0
    5514:	00000069 	andeq	r0, r0, r9, rrx
    5518:	00700408 	rsbseq	r0, r0, r8, lsl #8
    551c:	39000000 	stmdbcc	r0, {}	; <UNPREDICTABLE>
    5520:	04000001 	streq	r0, [r0], #-1
    5524:	0012d800 	andseq	sp, r2, r0, lsl #16
    5528:	09010400 	stmdbeq	r1, {sl}
    552c:	0c00001f 	stceq	0, cr0, [r0], {31}
    5530:	00002034 	andeq	r2, r0, r4, lsr r0
    5534:	00001e95 	muleq	r0, r5, lr
    5538:	0002b730 	andeq	fp, r2, r0, lsr r7
    553c:	0000011c 	andeq	r0, r0, ip, lsl r1
    5540:	00004977 	andeq	r4, r0, r7, ror r9
    5544:	69050402 	stmdbvs	r5, {r1, sl}
    5548:	0300746e 	movweq	r7, #1134	; 0x46e
    554c:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
    5550:	3817d102 	ldmdacc	r7, {r1, r8, ip, lr, pc}
    5554:	04000000 	streq	r0, [r0], #-0
    5558:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
    555c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    5560:	00017b05 	andeq	r7, r1, r5, lsl #22
    5564:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    5568:	000001a9 	andeq	r0, r0, r9, lsr #3
    556c:	68060104 	stmdavs	r6, {r2, r8}
    5570:	04000006 	streq	r0, [r0], #-6
    5574:	06660801 	strbteq	r0, [r6], -r1, lsl #16
    5578:	02040000 	andeq	r0, r4, #0
    557c:	00073105 	andeq	r3, r7, r5, lsl #2
    5580:	07020400 	streq	r0, [r2, -r0, lsl #8]
    5584:	0000009b 	muleq	r0, fp, r0
    5588:	80050404 	andhi	r0, r5, r4, lsl #8
    558c:	04000001 	streq	r0, [r0], #-1
    5590:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
    5594:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    5598:	00064f07 	andeq	r4, r6, r7, lsl #30
    559c:	06040500 	streq	r0, [r4], -r0, lsl #10
    55a0:	00008604 	andeq	r8, r0, r4, lsl #12
    55a4:	08010400 	stmdaeq	r1, {sl}
    55a8:	0000066f 	andeq	r0, r0, pc, ror #12
    55ac:	00205f07 	eoreq	r5, r0, r7, lsl #30
    55b0:	09210300 	stmdbeq	r1!, {r8, r9}
    55b4:	0000007e 	andeq	r0, r0, lr, ror r0
    55b8:	0002b730 	andeq	fp, r2, r0, lsr r7
    55bc:	0000011c 	andeq	r0, r0, ip, lsl r1
    55c0:	01369c01 	teqeq	r6, r1, lsl #24
    55c4:	6d080000 	stcvs	0, cr0, [r8, #-0]
    55c8:	0f260100 	svceq	0x00260100
    55cc:	0000007e 	andeq	r0, r0, lr, ror r0
    55d0:	63095001 	movwvs	r5, #36865	; 0x9001
    55d4:	06270100 	strteq	r0, [r7], -r0, lsl #2
    55d8:	00000025 	andeq	r0, r0, r5, lsr #32
    55dc:	000003ec 	andeq	r0, r0, ip, ror #7
    55e0:	000003e2 	andeq	r0, r0, r2, ror #7
    55e4:	01006e09 	tsteq	r0, r9, lsl #28
    55e8:	002c0928 	eoreq	r0, ip, r8, lsr #18
    55ec:	04430000 	strbeq	r0, [r3], #-0
    55f0:	04310000 	ldrteq	r0, [r1], #-0
    55f4:	730a0000 	movwvc	r0, #40960	; 0xa000
    55f8:	092a0100 	stmdbeq	sl!, {r8}
    55fc:	00000080 	andeq	r0, r0, r0, lsl #1
    5600:	000004ca 	andeq	r0, r0, sl, asr #9
    5604:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
    5608:	0100690a 	tsteq	r0, sl, lsl #18
    560c:	0038102d 	eorseq	r1, r8, sp, lsr #32
    5610:	05570000 	ldrbeq	r0, [r7, #-0]
    5614:	05510000 	ldrbeq	r0, [r1, #-0]
    5618:	a20b0000 	andge	r0, fp, #0
    561c:	01000017 	tsteq	r0, r7, lsl r0
    5620:	0070112e 	rsbseq	r1, r0, lr, lsr #2
    5624:	058e0000 	streq	r0, [lr]
    5628:	05860000 	streq	r0, [r6]
    562c:	270b0000 	strcs	r0, [fp, -r0]
    5630:	01000020 	tsteq	r0, r0, lsr #32
    5634:	0136122f 	teqeq	r6, pc, lsr #4
    5638:	05fb0000 	ldrbeq	r0, [fp, #0]!
    563c:	05e30000 	strbeq	r0, [r3, #0]!
    5640:	640a0000 	strvs	r0, [sl], #-0
    5644:	10300100 	eorsne	r0, r0, r0, lsl #2
    5648:	00000038 	andeq	r0, r0, r8, lsr r0
    564c:	0000069b 	muleq	r0, fp, r6
    5650:	00000691 	muleq	r0, r1, r6
    5654:	70040600 	andvc	r0, r4, r0, lsl #12
    5658:	00000000 	andeq	r0, r0, r0
    565c:	00000136 	andeq	r0, r0, r6, lsr r1
    5660:	138c0004 	orrne	r0, ip, #4
    5664:	01040000 	mrseq	r0, (UNDEF: 4)
    5668:	00001f09 	andeq	r1, r0, r9, lsl #30
    566c:	00206d0c 	eoreq	r6, r0, ip, lsl #26
    5670:	001e9500 	andseq	r9, lr, r0, lsl #10
    5674:	02b84c00 	adcseq	r4, r8, #0, 24
    5678:	00015000 	andeq	r5, r1, r0
    567c:	004b4c00 	subeq	r4, fp, r0, lsl #24
    5680:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    5684:	00746e69 	rsbseq	r6, r4, r9, ror #28
    5688:	59070403 	stmdbpl	r7, {r0, r1, sl}
    568c:	03000006 	movweq	r0, #6
    5690:	017b0508 	cmneq	fp, r8, lsl #10
    5694:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    5698:	0001a904 	andeq	sl, r1, r4, lsl #18
    569c:	06010300 	streq	r0, [r1], -r0, lsl #6
    56a0:	00000668 	andeq	r0, r0, r8, ror #12
    56a4:	66080103 	strvs	r0, [r8], -r3, lsl #2
    56a8:	04000006 	streq	r0, [r0], #-6
    56ac:	00000048 	andeq	r0, r0, r8, asr #32
    56b0:	31050203 	tstcc	r5, r3, lsl #4
    56b4:	03000007 	movweq	r0, #7
    56b8:	009b0702 	addseq	r0, fp, r2, lsl #14
    56bc:	04030000 	streq	r0, [r3], #-0
    56c0:	00018005 	andeq	r8, r1, r5
    56c4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    56c8:	00000654 	andeq	r0, r0, r4, asr r6
    56cc:	4f070803 	svcmi	0x00070803
    56d0:	05000006 	streq	r0, [r0, #-6]
    56d4:	00007d04 	andeq	r7, r0, r4, lsl #26
    56d8:	08010300 	stmdaeq	r1, {r8, r9}
    56dc:	0000066f 	andeq	r0, r0, pc, ror #12
    56e0:	00007d04 	andeq	r7, r0, r4, lsl #26
    56e4:	84040500 	strhi	r0, [r4], #-1280	; 0xfffffb00
    56e8:	06000000 	streq	r0, [r0], -r0
    56ec:	00002066 	andeq	r2, r0, r6, rrx
    56f0:	77082302 	strvc	r2, [r8, -r2, lsl #6]
    56f4:	4c000000 	stcmi	0, cr0, [r0], {-0}
    56f8:	500002b8 			; <UNDEFINED> instruction: 0x500002b8
    56fc:	01000001 	tsteq	r0, r1
    5700:	00012d9c 	muleq	r1, ip, sp
    5704:	31730700 	cmncc	r3, r0, lsl #14
    5708:	15370100 	ldrne	r0, [r7, #-256]!	; 0xffffff00
    570c:	00000089 	andeq	r0, r0, r9, lsl #1
    5710:	000006fd 	strdeq	r0, [r0], -sp
    5714:	000006f5 	strdeq	r0, [r0], -r5
    5718:	01006907 	tsteq	r0, r7, lsl #18
    571c:	00250638 	eoreq	r0, r5, r8, lsr r6
    5720:	073b0000 	ldreq	r0, [fp, -r0]!
    5724:	07370000 	ldreq	r0, [r7, -r0]!
    5728:	73080000 	movwvc	r0, #32768	; 0x8000
    572c:	183a0100 	ldmdane	sl!, {r8}
    5730:	0000012d 	andeq	r0, r0, sp, lsr #2
    5734:	00000770 	andeq	r0, r0, r0, ror r7
    5738:	0000075c 	andeq	r0, r0, ip, asr r7
    573c:	01006308 	tsteq	r0, r8, lsl #6
    5740:	0048113b 	subeq	r1, r8, fp, lsr r1
    5744:	07f00000 	ldrbeq	r0, [r0, r0]!
    5748:	07ee0000 	strbeq	r0, [lr, r0]!
    574c:	56090000 	strpl	r0, [r9], -r0
    5750:	01000011 	tsteq	r0, r1, lsl r0
    5754:	0069113e 	rsbeq	r1, r9, lr, lsr r1
    5758:	080e0000 	stmdaeq	lr, {}	; <UNPREDICTABLE>
    575c:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
    5760:	6a080000 	bvs	205768 <__bss_end+0xd8108>
    5764:	163e0100 	ldrtne	r0, [lr], -r0, lsl #2
    5768:	00000069 	andeq	r0, r0, r9, rrx
    576c:	0000085b 	andeq	r0, r0, fp, asr r8
    5770:	00000853 	andeq	r0, r0, r3, asr r8
    5774:	00202709 	eoreq	r2, r0, r9, lsl #14
    5778:	123f0100 	eorsne	r0, pc, #0, 2
    577c:	00000133 	andeq	r0, r0, r3, lsr r1
    5780:	000008a1 	andeq	r0, r0, r1, lsr #17
    5784:	00000895 	muleq	r0, r5, r8
    5788:	4f040500 	svcmi	0x00040500
    578c:	05000000 	streq	r0, [r0, #-0]
    5790:	00006904 	andeq	r6, r0, r4, lsl #18
    5794:	00b80000 	adcseq	r0, r8, r0
    5798:	00040000 	andeq	r0, r4, r0
    579c:	00001420 	andeq	r1, r0, r0, lsr #8
    57a0:	1f090104 	svcne	0x00090104
    57a4:	9f0c0000 	svcls	0x000c0000
    57a8:	d9000020 	stmdble	r0, {r5}
    57ac:	0000001f 	andeq	r0, r0, pc, lsl r0
    57b0:	00000000 	andeq	r0, r0, r0
    57b4:	0a000000 	beq	57bc <_start-0xa844>
    57b8:	0200004d 	andeq	r0, r0, #77	; 0x4d
    57bc:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    57c0:	b1030074 	tstlt	r3, r4, ror r0
    57c4:	02000007 	andeq	r0, r0, #7
    57c8:	003817d1 	ldrsbteq	r1, [r8], -r1
    57cc:	04040000 	streq	r0, [r4], #-0
    57d0:	00065907 	andeq	r5, r6, r7, lsl #18
    57d4:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    57d8:	0000017b 	andeq	r0, r0, fp, ror r1
    57dc:	a9040804 	stmdbge	r4, {r2, fp}
    57e0:	04000001 	streq	r0, [r0], #-1
    57e4:	06680601 	strbteq	r0, [r8], -r1, lsl #12
    57e8:	01040000 	mrseq	r0, (UNDEF: 4)
    57ec:	00066608 	andeq	r6, r6, r8, lsl #12
    57f0:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    57f4:	00000731 	andeq	r0, r0, r1, lsr r7
    57f8:	9b070204 	blls	1c6010 <__bss_end+0x989b0>
    57fc:	04000000 	streq	r0, [r0], #-0
    5800:	01800504 	orreq	r0, r0, r4, lsl #10
    5804:	04040000 	streq	r0, [r4], #-0
    5808:	00065407 	andeq	r5, r6, r7, lsl #8
    580c:	07080400 	streq	r0, [r8, -r0, lsl #8]
    5810:	0000064f 	andeq	r0, r0, pc, asr #12
    5814:	6f080104 	svcvs	0x00080104
    5818:	05000006 	streq	r0, [r0, #-6]
    581c:	0000007e 	andeq	r0, r0, lr, ror r0
    5820:	00850406 	addeq	r0, r5, r6, lsl #8
    5824:	98070000 	stmdals	r7, {}	; <UNPREDICTABLE>
    5828:	03000020 	movweq	r0, #32
    582c:	002c0929 	eoreq	r0, ip, r9, lsr #18
    5830:	b99c0000 	ldmiblt	ip, {}	; <UNPREDICTABLE>
    5834:	00600002 	rsbeq	r0, r0, r2
    5838:	9c010000 	stcls	0, cr0, [r1], {-0}
    583c:	72747308 	rsbsvc	r7, r4, #8, 6	; 0x20000000
    5840:	15370100 	ldrne	r0, [r7, #-256]!	; 0xffffff00
    5844:	0000008a 	andeq	r0, r0, sl, lsl #1
    5848:	000008f3 	strdeq	r0, [r0], -r3
    584c:	000008ef 	andeq	r0, r0, pc, ror #17
    5850:	014f0000 	mrseq	r0, SPSR
    5854:	00040000 	andeq	r0, r4, r0
    5858:	00001499 	muleq	r0, r9, r4
    585c:	1f090104 	svcne	0x00090104
    5860:	df0c0000 	svcle	0x000c0000
    5864:	95000020 	strls	r0, [r0, #-32]	; 0xffffffe0
    5868:	fc00001e 	stc2	0, cr0, [r0], {30}
    586c:	cc0002b9 	sfmgt	f0, 4, [r0], {185}	; 0xb9
    5870:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    5874:	0200004d 	andeq	r0, r0, #77	; 0x4d
    5878:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    587c:	b1030074 	tstlt	r3, r4, ror r0
    5880:	02000007 	andeq	r0, r0, #7
    5884:	003817d1 	ldrsbteq	r1, [r8], -r1
    5888:	04040000 	streq	r0, [r4], #-0
    588c:	00065907 	andeq	r5, r6, r7, lsl #18
    5890:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    5894:	0000017b 	andeq	r0, r0, fp, ror r1
    5898:	a9040804 	stmdbge	r4, {r2, fp}
    589c:	04000001 	streq	r0, [r0], #-1
    58a0:	06680601 	strbteq	r0, [r8], -r1, lsl #12
    58a4:	01040000 	mrseq	r0, (UNDEF: 4)
    58a8:	00066608 	andeq	r6, r6, r8, lsl #12
    58ac:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    58b0:	00000731 	andeq	r0, r0, r1, lsr r7
    58b4:	9b070204 	blls	1c60cc <__bss_end+0x98a6c>
    58b8:	04000000 	streq	r0, [r0], #-0
    58bc:	01800504 	orreq	r0, r0, r4, lsl #10
    58c0:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    58c4:	04000000 	streq	r0, [r0], #-0
    58c8:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
    58cc:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    58d0:	00064f07 	andeq	r4, r6, r7, lsl #30
    58d4:	8e040600 	cfmadd32hi	mvax0, mvfx0, mvfx4, mvfx0
    58d8:	07000000 	streq	r0, [r0, -r0]
    58dc:	00000083 	andeq	r0, r0, r3, lsl #1
    58e0:	6f080104 	svcvs	0x00080104
    58e4:	05000006 	streq	r0, [r0, #-6]
    58e8:	0000008e 	andeq	r0, r0, lr, lsl #1
    58ec:	00950406 	addseq	r0, r5, r6, lsl #8
    58f0:	9a070000 	bls	1c58f8 <__bss_end+0x98298>
    58f4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    58f8:	000020d7 	ldrdeq	r2, [r0], -r7
    58fc:	83082c03 	movwhi	r2, #35843	; 0x8c03
    5900:	fc000000 	stc2	0, cr0, [r0], {-0}
    5904:	cc0002b9 	sfmgt	f0, 4, [r0], {185}	; 0xb9
    5908:	01000000 	mrseq	r0, (UNDEF: 0)
    590c:	0001469c 	muleq	r1, ip, r6
    5910:	1fb00900 	svcne	0x00b00900
    5914:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5918:	0000891b 	andeq	r8, r0, fp, lsl r9
    591c:	0a500100 	beq	1405d24 <__bss_end+0x12d86c4>
    5920:	00001f73 	andeq	r1, r0, r3, ror pc
    5924:	a0193f01 	andsge	r3, r9, r1, lsl #30
    5928:	1c000000 	stcne	0, cr0, [r0], {-0}
    592c:	14000009 	strne	r0, [r0], #-9
    5930:	0a000009 	beq	595c <_start-0xa6a4>
    5934:	00001c8e 	andeq	r1, r0, lr, lsl #25
    5938:	2c094001 	stccs	0, cr4, [r9], {1}
    593c:	62000000 	andvs	r0, r0, #0
    5940:	56000009 	strpl	r0, [r0], -r9
    5944:	0b000009 	bleq	5970 <_start-0xa690>
    5948:	00747364 	rsbseq	r7, r4, r4, ror #6
    594c:	83095301 	movwhi	r5, #37633	; 0x9301
    5950:	be000000 	cdplt	0, 0, cr0, cr0, cr0, {0}
    5954:	ae000009 	cdpge	0, 0, cr0, cr0, cr9, {0}
    5958:	0b000009 	bleq	5984 <_start-0xa67c>
    595c:	00637273 	rsbeq	r7, r3, r3, ror r2
    5960:	9a0f5401 	bls	3da96c <__bss_end+0x2ad30c>
    5964:	2a000000 	bcs	596c <_start-0xa694>
    5968:	2000000a 	andcs	r0, r0, sl
    596c:	0c00000a 	stceq	0, cr0, [r0], {10}
    5970:	00001fb5 			; <UNDEFINED> instruction: 0x00001fb5
    5974:	46095501 	strmi	r5, [r9], -r1, lsl #10
    5978:	6f000001 	svcvs	0x00000001
    597c:	6900000a 	stmdbvs	r0, {r1, r3}
    5980:	0c00000a 	stceq	0, cr0, [r0], {10}
    5984:	00001fc1 	andeq	r1, r0, r1, asr #31
    5988:	4c0f5601 	stcmi	6, cr5, [pc], {1}
    598c:	a0000001 	andge	r0, r0, r1
    5990:	9a00000a 	bls	59c0 <_start-0xa640>
    5994:	0000000a 	andeq	r0, r0, sl
    5998:	00690406 	rsbeq	r0, r9, r6, lsl #8
    599c:	04060000 	streq	r0, [r6], #-0
    59a0:	00000070 	andeq	r0, r0, r0, ror r0
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end+0x192a4c>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end+0xd561e0>
      30:	0b390b3b 	bleq	e42d24 <__bss_end+0xd156c4>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	0b000f05 	bleq	3c54 <_start-0xc3ac>
      3c:	0013490b 	andseq	r4, r3, fp, lsl #18
      40:	01150600 	tsteq	r5, r0, lsl #12
      44:	13011927 	movwne	r1, #6439	; 0x1927
      48:	05070000 	streq	r0, [r7, #-0]
      4c:	00134900 	andseq	r4, r3, r0, lsl #18
      50:	000f0800 	andeq	r0, pc, r0, lsl #16
      54:	00000b0b 	andeq	r0, r0, fp, lsl #22
      58:	03011309 	movweq	r1, #4873	; 0x1309
      5c:	3a0b0b0e 	bcc	2c2c9c <__bss_end+0x19563c>
      60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      64:	0013010b 	andseq	r0, r3, fp, lsl #2
      68:	000d0a00 	andeq	r0, sp, r0, lsl #20
      6c:	0b3a0803 	bleq	e82080 <__bss_end+0xd54a20>
      70:	0b390b3b 	bleq	e42d64 <__bss_end+0xd15704>
      74:	0b381349 	bleq	e04da0 <__bss_end+0xcd7740>
      78:	350b0000 	strcc	r0, [fp, #-0]
      7c:	00134900 	andseq	r4, r3, r0, lsl #18
      80:	00340c00 	eorseq	r0, r4, r0, lsl #24
      84:	0b3a0e03 	bleq	e83898 <__bss_end+0xd56238>
      88:	0b390b3b 	bleq	e42d7c <__bss_end+0xd1571c>
      8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
      90:	260d0000 	strcs	r0, [sp], -r0
      94:	00134900 	andseq	r4, r3, r0, lsl #18
      98:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
      9c:	0b3a0e03 	bleq	e838b0 <__bss_end+0xd56250>
      a0:	0b390b3b 	bleq	e42d94 <__bss_end+0xd15734>
      a4:	01111927 	tsteq	r1, r7, lsr #18
      a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
      b0:	0f000013 	svceq	0x00000013
      b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
      b8:	0b3a0e03 	bleq	e838cc <__bss_end+0xd5626c>
      bc:	0b390b3b 	bleq	e42db0 <__bss_end+0xd15750>
      c0:	01111927 	tsteq	r1, r7, lsr #18
      c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
      cc:	10000013 	andne	r0, r0, r3, lsl r0
      d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
      d4:	0b3b0b3a 	bleq	ec2dc4 <__bss_end+0xd95764>
      d8:	13490b39 	movtne	r0, #39737	; 0x9b39
      dc:	00001802 	andeq	r1, r0, r2, lsl #16
      e0:	3f002e11 	svccc	0x00002e11
      e4:	3a0e0319 	bcc	380d50 <__bss_end+0x2536f0>
      e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      ec:	1119270b 	tstne	r9, fp, lsl #14
      f0:	40061201 	andmi	r1, r6, r1, lsl #4
      f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
      f8:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
      fc:	03193f00 	tsteq	r9, #0, 30
     100:	3b0b3a0e 	blcc	2ce940 <__bss_end+0x1a12e0>
     104:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     108:	11134919 	tstne	r3, r9, lsl r9
     10c:	40061201 	andmi	r1, r6, r1, lsl #4
     110:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     114:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     118:	03193f01 	tsteq	r9, #1, 30
     11c:	3b0b3a0e 	blcc	2ce95c <__bss_end+0x1a12fc>
     120:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     124:	11134919 	tstne	r3, r9, lsl r9
     128:	40061201 	andmi	r1, r6, r1, lsl #4
     12c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     130:	01000000 	mrseq	r0, (UNDEF: 0)
     134:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     138:	0e030b13 	vmoveq.32	d3[0], r0
     13c:	01110e1b 	tsteq	r1, fp, lsl lr
     140:	17100612 			; <UNDEFINED> instruction: 0x17100612
     144:	24020000 	strcs	r0, [r2], #-0
     148:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     14c:	0008030b 	andeq	r0, r8, fp, lsl #6
     150:	00240300 	eoreq	r0, r4, r0, lsl #6
     154:	0b3e0b0b 	bleq	f82d88 <__bss_end+0xe55728>
     158:	00000e03 	andeq	r0, r0, r3, lsl #28
     15c:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     160:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     164:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     168:	0b3b0b3a 	bleq	ec2e58 <__bss_end+0xd957f8>
     16c:	13490b39 	movtne	r0, #39737	; 0x9b39
     170:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     174:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     178:	03193f00 	tsteq	r9, #0, 30
     17c:	3b0b3a0e 	blcc	2ce9bc <__bss_end+0x1a135c>
     180:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     184:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     188:	97184006 	ldrls	r4, [r8, -r6]
     18c:	00001942 	andeq	r1, r0, r2, asr #18
     190:	3f012e07 	svccc	0x00012e07
     194:	3a0e0319 	bcc	380e00 <__bss_end+0x2537a0>
     198:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     19c:	1119270b 	tstne	r9, fp, lsl #14
     1a0:	40061201 	andmi	r1, r6, r1, lsl #4
     1a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     1a8:	00001301 	andeq	r1, r0, r1, lsl #6
     1ac:	11010b08 	tstne	r1, r8, lsl #22
     1b0:	01061201 	tsteq	r6, r1, lsl #4
     1b4:	09000013 	stmdbeq	r0, {r0, r1, r4}
     1b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1bc:	0b3b0b3a 	bleq	ec2eac <__bss_end+0xd9584c>
     1c0:	13490b39 	movtne	r0, #39737	; 0x9b39
     1c4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1c8:	0b0a0000 	bleq	2801d0 <__bss_end+0x152b70>
     1cc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1d0:	0b000006 	bleq	1f0 <_start-0xfe10>
     1d4:	0b0b000f 	bleq	2c0218 <__bss_end+0x192bb8>
     1d8:	00001349 	andeq	r1, r0, r9, asr #6
     1dc:	0000350c 	andeq	r3, r0, ip, lsl #10
     1e0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
     1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     1e8:	0b3b0b3a 	bleq	ec2ed8 <__bss_end+0xd95878>
     1ec:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     1f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1f8:	00130119 	andseq	r0, r3, r9, lsl r1
     1fc:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
     200:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     204:	0b3b0b3a 	bleq	ec2ef4 <__bss_end+0xd95894>
     208:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     20c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     210:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     214:	00000019 	andeq	r0, r0, r9, lsl r0
     218:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     21c:	030b130e 	movweq	r1, #45838	; 0xb30e
     220:	110e1b0e 	tstne	lr, lr, lsl #22
     224:	10061201 	andne	r1, r6, r1, lsl #4
     228:	02000017 	andeq	r0, r0, #23
     22c:	0b0b0024 	bleq	2c02c4 <__bss_end+0x192c64>
     230:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     234:	24030000 	strcs	r0, [r3], #-0
     238:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     23c:	000e030b 	andeq	r0, lr, fp, lsl #6
     240:	000f0400 	andeq	r0, pc, r0, lsl #8
     244:	00000b0b 	andeq	r0, r0, fp, lsl #22
     248:	03001605 	movweq	r1, #1541	; 0x605
     24c:	3b0b3a0e 	blcc	2cea8c <__bss_end+0x1a142c>
     250:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     254:	06000013 			; <UNDEFINED> instruction: 0x06000013
     258:	13490035 	movtne	r0, #36917	; 0x9035
     25c:	13070000 	movwne	r0, #28672	; 0x7000
     260:	0b0e0301 	bleq	380e6c <__bss_end+0x25380c>
     264:	3b0b3a0b 	blcc	2cea98 <__bss_end+0x1a1438>
     268:	010b390b 	tsteq	fp, fp, lsl #18
     26c:	08000013 	stmdaeq	r0, {r0, r1, r4}
     270:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     274:	0b3b0b3a 	bleq	ec2f64 <__bss_end+0xd95904>
     278:	13490b39 	movtne	r0, #39737	; 0x9b39
     27c:	00000b38 	andeq	r0, r0, r8, lsr fp
     280:	0b000f09 	bleq	3eac <_start-0xc154>
     284:	0013490b 	andseq	r4, r3, fp, lsl #18
     288:	00260a00 	eoreq	r0, r6, r0, lsl #20
     28c:	00001349 	andeq	r1, r0, r9, asr #6
     290:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
     294:	00130119 	andseq	r0, r3, r9, lsl r1
     298:	00050c00 	andeq	r0, r5, r0, lsl #24
     29c:	00001349 	andeq	r1, r0, r9, asr #6
     2a0:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
     2a4:	00130113 	andseq	r0, r3, r3, lsl r1
     2a8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     2ac:	0b2f1349 	bleq	bc4fd8 <__bss_end+0xa97978>
     2b0:	340f0000 	strcc	r0, [pc], #-0	; 2b8 <_start-0xfd48>
     2b4:	3a0e0300 	bcc	380ebc <__bss_end+0x25385c>
     2b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2c0:	10000018 	andne	r0, r0, r8, lsl r0
     2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2c8:	0b3b0b3a 	bleq	ec2fb8 <__bss_end+0xd95958>
     2cc:	13490b39 	movtne	r0, #39737	; 0x9b39
     2d0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     2d4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     2d8:	03193f01 	tsteq	r9, #1, 30
     2dc:	3b0b3a0e 	blcc	2ceb1c <__bss_end+0x1a14bc>
     2e0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     2e4:	11134919 	tstne	r3, r9, lsl r9
     2e8:	40061201 	andmi	r1, r6, r1, lsl #4
     2ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     2f0:	00001301 	andeq	r1, r0, r1, lsl #6
     2f4:	03000512 	movweq	r0, #1298	; 0x512
     2f8:	3b0b3a0e 	blcc	2ceb38 <__bss_end+0x1a14d8>
     2fc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     300:	00180213 	andseq	r0, r8, r3, lsl r2
     304:	00341300 	eorseq	r1, r4, r0, lsl #6
     308:	0b3a0e03 	bleq	e83b1c <__bss_end+0xd564bc>
     30c:	0b39053b 	bleq	e41800 <__bss_end+0xd141a0>
     310:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     314:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     318:	3a0e0301 	bcc	380f24 <__bss_end+0x2538c4>
     31c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     320:	1119270b 	tstne	r9, fp, lsl #14
     324:	40061201 	andmi	r1, r6, r1, lsl #4
     328:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     32c:	00001301 	andeq	r1, r0, r1, lsl #6
     330:	3f012e15 	svccc	0x00012e15
     334:	3a0e0319 	bcc	380fa0 <__bss_end+0x253940>
     338:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     33c:	1119270b 	tstne	r9, fp, lsl #14
     340:	40061201 	andmi	r1, r6, r1, lsl #4
     344:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     348:	00001301 	andeq	r1, r0, r1, lsl #6
     34c:	11010b16 	tstne	r1, r6, lsl fp
     350:	00061201 	andeq	r1, r6, r1, lsl #4
     354:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
     358:	0b3a0e03 	bleq	e83b6c <__bss_end+0xd5650c>
     35c:	0b390b3b 	bleq	e43050 <__bss_end+0xd159f0>
     360:	01111927 	tsteq	r1, r7, lsr #18
     364:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     368:	01194296 			; <UNDEFINED> instruction: 0x01194296
     36c:	18000013 	stmdane	r0, {r0, r1, r4}
     370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     374:	0b3a0e03 	bleq	e83b88 <__bss_end+0xd56528>
     378:	0b390b3b 	bleq	e4306c <__bss_end+0xd15a0c>
     37c:	01111927 	tsteq	r1, r7, lsr #18
     380:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     384:	01194296 			; <UNDEFINED> instruction: 0x01194296
     388:	19000013 	stmdbne	r0, {r0, r1, r4}
     38c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     390:	0b3b0b3a 	bleq	ec3080 <__bss_end+0xd95a20>
     394:	13490b39 	movtne	r0, #39737	; 0x9b39
     398:	00001802 	andeq	r1, r0, r2, lsl #16
     39c:	3f012e1a 	svccc	0x00012e1a
     3a0:	3a0e0319 	bcc	38100c <__bss_end+0x2539ac>
     3a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     3ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     3b0:	96184006 	ldrls	r4, [r8], -r6
     3b4:	00001942 	andeq	r1, r0, r2, asr #18
     3b8:	01110100 	tsteq	r1, r0, lsl #2
     3bc:	0b130e25 	bleq	4c3c58 <__bss_end+0x3965f8>
     3c0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3c8:	00001710 	andeq	r1, r0, r0, lsl r7
     3cc:	0b002402 	bleq	93dc <_start-0x6c24>
     3d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     3d4:	0300000e 	movweq	r0, #14
     3d8:	0b0b0024 	bleq	2c0470 <__bss_end+0x192e10>
     3dc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     3e0:	35040000 	strcc	r0, [r4, #-0]
     3e4:	00134900 	andseq	r4, r3, r0, lsl #18
     3e8:	000f0500 	andeq	r0, pc, r0, lsl #10
     3ec:	00000b0b 	andeq	r0, r0, fp, lsl #22
     3f0:	03001606 	movweq	r1, #1542	; 0x606
     3f4:	3b0b3a0e 	blcc	2cec34 <__bss_end+0x1a15d4>
     3f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     3fc:	07000013 	smladeq	r0, r3, r0, r0
     400:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     404:	0b3a0b0b 	bleq	e83038 <__bss_end+0xd559d8>
     408:	0b390b3b 	bleq	e430fc <__bss_end+0xd15a9c>
     40c:	00001301 	andeq	r1, r0, r1, lsl #6
     410:	03000d08 	movweq	r0, #3336	; 0xd08
     414:	3b0b3a0e 	blcc	2cec54 <__bss_end+0x1a15f4>
     418:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     41c:	000b3813 	andeq	r3, fp, r3, lsl r8
     420:	000f0900 	andeq	r0, pc, r0, lsl #18
     424:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     428:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     42c:	03193f01 	tsteq	r9, #1, 30
     430:	3b0b3a0e 	blcc	2cec70 <__bss_end+0x1a1610>
     434:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     438:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     43c:	97184006 	ldrls	r4, [r8, -r6]
     440:	13011942 	movwne	r1, #6466	; 0x1942
     444:	050b0000 	streq	r0, [fp, #-0]
     448:	3a0e0300 	bcc	381050 <__bss_end+0x2539f0>
     44c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     450:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     454:	0c000018 	stceq	0, cr0, [r0], {24}
     458:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     45c:	0b3b0b3a 	bleq	ec314c <__bss_end+0xd95aec>
     460:	13490b39 	movtne	r0, #39737	; 0x9b39
     464:	00001802 	andeq	r1, r0, r2, lsl #16
     468:	3f012e0d 	svccc	0x00012e0d
     46c:	3a0e0319 	bcc	3810d8 <__bss_end+0x253a78>
     470:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     474:	1119270b 	tstne	r9, fp, lsl #14
     478:	40061201 	andmi	r1, r6, r1, lsl #4
     47c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     480:	01000000 	mrseq	r0, (UNDEF: 0)
     484:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     488:	0e030b13 	vmoveq.32	d3[0], r0
     48c:	01110e1b 	tsteq	r1, fp, lsl lr
     490:	17100612 			; <UNDEFINED> instruction: 0x17100612
     494:	16020000 	strne	r0, [r2], -r0
     498:	3a0e0300 	bcc	3810a0 <__bss_end+0x253a40>
     49c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4a0:	0013490b 	andseq	r4, r3, fp, lsl #18
     4a4:	00240300 	eoreq	r0, r4, r0, lsl #6
     4a8:	0b3e0b0b 	bleq	f830dc <__bss_end+0xe55a7c>
     4ac:	00000e03 	andeq	r0, r0, r3, lsl #28
     4b0:	0b002404 	bleq	94c8 <_start-0x6b38>
     4b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     4b8:	05000008 	streq	r0, [r0, #-8]
     4bc:	13490035 	movtne	r0, #36917	; 0x9035
     4c0:	0f060000 	svceq	0x00060000
     4c4:	000b0b00 	andeq	r0, fp, r0, lsl #22
     4c8:	00260700 	eoreq	r0, r6, r0, lsl #14
     4cc:	00001349 	andeq	r1, r0, r9, asr #6
     4d0:	0b000f08 	bleq	40f8 <_start-0xbf08>
     4d4:	0013490b 	andseq	r4, r3, fp, lsl #18
     4d8:	00260900 	eoreq	r0, r6, r0, lsl #18
     4dc:	130a0000 	movwne	r0, #40960	; 0xa000
     4e0:	0b0e0301 	bleq	3810ec <__bss_end+0x253a8c>
     4e4:	3b0b3a0b 	blcc	2ced18 <__bss_end+0x1a16b8>
     4e8:	010b390b 	tsteq	fp, fp, lsl #18
     4ec:	0b000013 	bleq	540 <_start-0xfac0>
     4f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     4f4:	0b3b0b3a 	bleq	ec31e4 <__bss_end+0xd95b84>
     4f8:	13490b39 	movtne	r0, #39737	; 0x9b39
     4fc:	00000b38 	andeq	r0, r0, r8, lsr fp
     500:	3f012e0c 	svccc	0x00012e0c
     504:	3a0e0319 	bcc	381170 <__bss_end+0x253b10>
     508:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     50c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     510:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     514:	97184006 	ldrls	r4, [r8, -r6]
     518:	13011942 	movwne	r1, #6466	; 0x1942
     51c:	050d0000 	streq	r0, [sp, #-0]
     520:	3a0e0300 	bcc	381128 <__bss_end+0x253ac8>
     524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     528:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     52c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     530:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     534:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     538:	13490b39 	movtne	r0, #39737	; 0x9b39
     53c:	00001802 	andeq	r1, r0, r2, lsl #16
     540:	03012e0f 	movweq	r2, #7695	; 0x1e0f
     544:	3b0b3a0e 	blcc	2ced84 <__bss_end+0x1a1724>
     548:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     54c:	11134919 	tstne	r3, r9, lsl r9
     550:	40061201 	andmi	r1, r6, r1, lsl #4
     554:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     558:	00001301 	andeq	r1, r0, r1, lsl #6
     55c:	03012e10 	movweq	r2, #7696	; 0x1e10
     560:	3b0b3a0e 	blcc	2ceda0 <__bss_end+0x1a1740>
     564:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     568:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     56c:	96184006 	ldrls	r4, [r8], -r6
     570:	13011942 	movwne	r1, #6466	; 0x1942
     574:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     578:	03193f01 	tsteq	r9, #1, 30
     57c:	3b0b3a0e 	blcc	2cedbc <__bss_end+0x1a175c>
     580:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     584:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     588:	96184006 	ldrls	r4, [r8], -r6
     58c:	13011942 	movwne	r1, #6466	; 0x1942
     590:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     594:	03193f01 	tsteq	r9, #1, 30
     598:	3b0b3a0e 	blcc	2cedd8 <__bss_end+0x1a1778>
     59c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     5a0:	11134919 	tstne	r3, r9, lsl r9
     5a4:	40061201 	andmi	r1, r6, r1, lsl #4
     5a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     5ac:	00001301 	andeq	r1, r0, r1, lsl #6
     5b0:	3f012e13 	svccc	0x00012e13
     5b4:	3a0e0319 	bcc	381220 <__bss_end+0x253bc0>
     5b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     5c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5c4:	96184006 	ldrls	r4, [r8], -r6
     5c8:	00001942 	andeq	r1, r0, r2, asr #18
     5cc:	01110100 	tsteq	r1, r0, lsl #2
     5d0:	0b130e25 	bleq	4c3e6c <__bss_end+0x39680c>
     5d4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     5d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5dc:	00001710 	andeq	r1, r0, r0, lsl r7
     5e0:	0b002402 	bleq	95f0 <_start-0x6a10>
     5e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5e8:	0300000e 	movweq	r0, #14
     5ec:	13490026 	movtne	r0, #36902	; 0x9026
     5f0:	35040000 	strcc	r0, [r4, #-0]
     5f4:	00134900 	andseq	r4, r3, r0, lsl #18
     5f8:	00240500 	eoreq	r0, r4, r0, lsl #10
     5fc:	0b3e0b0b 	bleq	f83230 <__bss_end+0xe55bd0>
     600:	00000803 	andeq	r0, r0, r3, lsl #16
     604:	03001606 	movweq	r1, #1542	; 0x606
     608:	3b0b3a0e 	blcc	2cee48 <__bss_end+0x1a17e8>
     60c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     610:	07000013 	smladeq	r0, r3, r0, r0
     614:	0b0b000f 	bleq	2c0658 <__bss_end+0x192ff8>
     618:	0f080000 	svceq	0x00080000
     61c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     620:	09000013 	stmdbeq	r0, {r0, r1, r4}
     624:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     628:	00001301 	andeq	r1, r0, r1, lsl #6
     62c:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     630:	0b000013 	bleq	684 <_start-0xf97c>
     634:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     638:	13011349 	movwne	r1, #4937	; 0x1349
     63c:	130c0000 	movwne	r0, #49152	; 0xc000
     640:	0b0e0301 	bleq	38124c <__bss_end+0x253bec>
     644:	3b0b3a0b 	blcc	2cee78 <__bss_end+0x1a1818>
     648:	010b390b 	tsteq	fp, fp, lsl #18
     64c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     650:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     654:	0b3b0b3a 	bleq	ec3344 <__bss_end+0xd95ce4>
     658:	13490b39 	movtne	r0, #39737	; 0x9b39
     65c:	00000b38 	andeq	r0, r0, r8, lsr fp
     660:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
     664:	00130113 	andseq	r0, r3, r3, lsl r1
     668:	00210f00 	eoreq	r0, r1, r0, lsl #30
     66c:	0b2f1349 	bleq	bc5398 <__bss_end+0xa97d38>
     670:	34100000 	ldrcc	r0, [r0], #-0
     674:	3a0e0300 	bcc	38127c <__bss_end+0x253c1c>
     678:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     67c:	3f13490b 	svccc	0x0013490b
     680:	00180219 	andseq	r0, r8, r9, lsl r2
     684:	00341100 	eorseq	r1, r4, r0, lsl #2
     688:	0b3a0e03 	bleq	e83e9c <__bss_end+0xd5683c>
     68c:	0b390b3b 	bleq	e43380 <__bss_end+0xd15d20>
     690:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     694:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     698:	3a0e0301 	bcc	3812a4 <__bss_end+0x253c44>
     69c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6a0:	1119270b 	tstne	r9, fp, lsl #14
     6a4:	40061201 	andmi	r1, r6, r1, lsl #4
     6a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     6ac:	00001301 	andeq	r1, r0, r1, lsl #6
     6b0:	03000513 	movweq	r0, #1299	; 0x513
     6b4:	3b0b3a0e 	blcc	2ceef4 <__bss_end+0x1a1894>
     6b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     6bc:	00180213 	andseq	r0, r8, r3, lsl r2
     6c0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     6c4:	0b3a0e03 	bleq	e83ed8 <__bss_end+0xd56878>
     6c8:	0b39053b 	bleq	e41bbc <__bss_end+0xd1455c>
     6cc:	13491927 	movtne	r1, #39207	; 0x9927
     6d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6d4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     6d8:	00130119 	andseq	r0, r3, r9, lsl r1
     6dc:	00341500 	eorseq	r1, r4, r0, lsl #10
     6e0:	0b3a0e03 	bleq	e83ef4 <__bss_end+0xd56894>
     6e4:	0b39053b 	bleq	e41bd8 <__bss_end+0xd14578>
     6e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     6ec:	0b160000 	bleq	5806f4 <__bss_end+0x453094>
     6f0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     6f4:	17000006 	strne	r0, [r0, -r6]
     6f8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     6fc:	0b3a0e03 	bleq	e83f10 <__bss_end+0xd568b0>
     700:	0b39053b 	bleq	e41bf4 <__bss_end+0xd14594>
     704:	01111927 	tsteq	r1, r7, lsr #18
     708:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     70c:	00194297 	mulseq	r9, r7, r2
     710:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
     714:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     718:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     71c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     720:	01111349 	tsteq	r1, r9, asr #6
     724:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     728:	01194296 			; <UNDEFINED> instruction: 0x01194296
     72c:	19000013 	stmdbne	r0, {r0, r1, r4}
     730:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     734:	0b3a0e03 	bleq	e83f48 <__bss_end+0xd568e8>
     738:	0b39053b 	bleq	e41c2c <__bss_end+0xd145cc>
     73c:	01111927 	tsteq	r1, r7, lsr #18
     740:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     744:	01194297 			; <UNDEFINED> instruction: 0x01194297
     748:	1a000013 	bne	79c <_start-0xf864>
     74c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     750:	0b3a0e03 	bleq	e83f64 <__bss_end+0xd56904>
     754:	0b39053b 	bleq	e41c48 <__bss_end+0xd145e8>
     758:	01111927 	tsteq	r1, r7, lsr #18
     75c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     760:	01194296 			; <UNDEFINED> instruction: 0x01194296
     764:	1b000013 	blne	7b8 <_start-0xf848>
     768:	0111010b 	tsteq	r1, fp, lsl #2
     76c:	13010612 	movwne	r0, #5650	; 0x1612
     770:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     774:	03193f00 	tsteq	r9, #0, 30
     778:	3b0b3a0e 	blcc	2cefb8 <__bss_end+0x1a1958>
     77c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     780:	11134919 	tstne	r3, r9, lsl r9
     784:	40061201 	andmi	r1, r6, r1, lsl #4
     788:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     78c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     790:	03193f01 	tsteq	r9, #1, 30
     794:	3b0b3a0e 	blcc	2cefd4 <__bss_end+0x1a1974>
     798:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     79c:	11134919 	tstne	r3, r9, lsl r9
     7a0:	40061201 	andmi	r1, r6, r1, lsl #4
     7a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     7a8:	00001301 	andeq	r1, r0, r1, lsl #6
     7ac:	3f002e1e 	svccc	0x00002e1e
     7b0:	3a0e0319 	bcc	38141c <__bss_end+0x253dbc>
     7b4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7b8:	1119270b 	tstne	r9, fp, lsl #14
     7bc:	40061201 	andmi	r1, r6, r1, lsl #4
     7c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     7c4:	051f0000 	ldreq	r0, [pc, #-0]	; 7cc <_start-0xf834>
     7c8:	3a0e0300 	bcc	3813d0 <__bss_end+0x253d70>
     7cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7d0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     7d4:	00000018 	andeq	r0, r0, r8, lsl r0
     7d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     7dc:	030b130e 	movweq	r1, #45838	; 0xb30e
     7e0:	110e1b0e 	tstne	lr, lr, lsl #22
     7e4:	10061201 	andne	r1, r6, r1, lsl #4
     7e8:	02000017 	andeq	r0, r0, #23
     7ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     7f0:	0b3b0b3a 	bleq	ec34e0 <__bss_end+0xd95e80>
     7f4:	13490b39 	movtne	r0, #39737	; 0x9b39
     7f8:	0f030000 	svceq	0x00030000
     7fc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     800:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     804:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     808:	00001301 	andeq	r1, r0, r1, lsl #6
     80c:	49000505 	stmdbmi	r0, {r0, r2, r8, sl}
     810:	06000013 			; <UNDEFINED> instruction: 0x06000013
     814:	0b0b0024 	bleq	2c08ac <__bss_end+0x19324c>
     818:	0e030b3e 	vmoveq.16	d3[0], r0
     81c:	26070000 	strcs	r0, [r7], -r0
     820:	00134900 	andseq	r4, r3, r0, lsl #18
     824:	000f0800 	andeq	r0, pc, r0, lsl #16
     828:	00000b0b 	andeq	r0, r0, fp, lsl #22
     82c:	0b011309 	bleq	45458 <ramdisk+0x17e00>
     830:	3b0b3a0b 	blcc	2cf064 <__bss_end+0x1a1a04>
     834:	010b390b 	tsteq	fp, fp, lsl #18
     838:	0a000013 	beq	88c <_start-0xf774>
     83c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     840:	0b3b0b3a 	bleq	ec3530 <__bss_end+0xd95ed0>
     844:	13490b39 	movtne	r0, #39737	; 0x9b39
     848:	00000b38 	andeq	r0, r0, r8, lsr fp
     84c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     850:	00130113 	andseq	r0, r3, r3, lsl r1
     854:	00210c00 	eoreq	r0, r1, r0, lsl #24
     858:	0b2f1349 	bleq	bc5584 <__bss_end+0xa97f24>
     85c:	340d0000 	strcc	r0, [sp], #-0
     860:	3a0e0300 	bcc	381468 <__bss_end+0x253e08>
     864:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     868:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     86c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     870:	13490035 	movtne	r0, #36917	; 0x9035
     874:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     878:	03193f01 	tsteq	r9, #1, 30
     87c:	3b0b3a0e 	blcc	2cf0bc <__bss_end+0x1a1a5c>
     880:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     884:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     888:	97184006 	ldrls	r4, [r8, -r6]
     88c:	13011942 	movwne	r1, #6466	; 0x1942
     890:	05100000 	ldreq	r0, [r0, #-0]
     894:	3a080300 	bcc	20149c <__bss_end+0xd3e3c>
     898:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     89c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8a0:	11000018 	tstne	r0, r8, lsl r0
     8a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8a8:	0b3a0e03 	bleq	e840bc <__bss_end+0xd56a5c>
     8ac:	0b390b3b 	bleq	e435a0 <__bss_end+0xd15f40>
     8b0:	01111927 	tsteq	r1, r7, lsr #18
     8b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8b8:	01194296 			; <UNDEFINED> instruction: 0x01194296
     8bc:	12000013 	andne	r0, r0, #19
     8c0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     8c4:	0b3b0b3a 	bleq	ec35b4 <__bss_end+0xd95f54>
     8c8:	13490b39 	movtne	r0, #39737	; 0x9b39
     8cc:	00001802 	andeq	r1, r0, r2, lsl #16
     8d0:	3f002e13 	svccc	0x00002e13
     8d4:	3a0e0319 	bcc	381540 <__bss_end+0x253ee0>
     8d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8dc:	1119270b 	tstne	r9, fp, lsl #14
     8e0:	40061201 	andmi	r1, r6, r1, lsl #4
     8e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8e8:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     8ec:	3a0e0301 	bcc	3814f8 <__bss_end+0x253e98>
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8f4:	1119270b 	tstne	r9, fp, lsl #14
     8f8:	40061201 	andmi	r1, r6, r1, lsl #4
     8fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     900:	0b150000 	bleq	540908 <__bss_end+0x4132a8>
     904:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     908:	16000006 	strne	r0, [r0], -r6
     90c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     910:	0b3b0b3a 	bleq	ec3600 <__bss_end+0xd95fa0>
     914:	13490b39 	movtne	r0, #39737	; 0x9b39
     918:	00001802 	andeq	r1, r0, r2, lsl #16
     91c:	01110100 	tsteq	r1, r0, lsl #2
     920:	0b130e25 	bleq	4c41bc <__bss_end+0x396b5c>
     924:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     928:	06120111 			; <UNDEFINED> instruction: 0x06120111
     92c:	00001710 	andeq	r1, r0, r0, lsl r7
     930:	03010402 	movweq	r0, #5122	; 0x1402
     934:	0b0b3e0e 	bleq	2d0174 <__bss_end+0x1a2b14>
     938:	3a13490b 	bcc	4d2d6c <__bss_end+0x3a570c>
     93c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     940:	0013010b 	andseq	r0, r3, fp, lsl #2
     944:	00280300 	eoreq	r0, r8, r0, lsl #6
     948:	0b1c0e03 	bleq	70415c <__bss_end+0x5d6afc>
     94c:	24040000 	strcs	r0, [r4], #-0
     950:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     954:	000e030b 	andeq	r0, lr, fp, lsl #6
     958:	01010500 	tsteq	r1, r0, lsl #10
     95c:	13011349 	movwne	r1, #4937	; 0x1349
     960:	21060000 	mrscs	r0, (UNDEF: 6)
     964:	2f134900 	svccs	0x00134900
     968:	0700000b 	streq	r0, [r0, -fp]
     96c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     970:	0b3b0b3a 	bleq	ec3660 <__bss_end+0xd96000>
     974:	13490b39 	movtne	r0, #39737	; 0x9b39
     978:	00001802 	andeq	r1, r0, r2, lsl #16
     97c:	3f012e08 	svccc	0x00012e08
     980:	3a0e0319 	bcc	3815ec <__bss_end+0x253f8c>
     984:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     988:	1119270b 	tstne	r9, fp, lsl #14
     98c:	40061201 	andmi	r1, r6, r1, lsl #4
     990:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     994:	00001301 	andeq	r1, r0, r1, lsl #6
     998:	03000509 	movweq	r0, #1289	; 0x509
     99c:	3b0b3a0e 	blcc	2cf1dc <__bss_end+0x1a1b7c>
     9a0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     9a4:	00180213 	andseq	r0, r8, r3, lsl r2
     9a8:	012e0a00 			; <UNDEFINED> instruction: 0x012e0a00
     9ac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     9b0:	0b3b0b3a 	bleq	ec36a0 <__bss_end+0xd96040>
     9b4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     9b8:	01111349 	tsteq	r1, r9, asr #6
     9bc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     9c0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     9c4:	0b000013 	bleq	a18 <_start-0xf5e8>
     9c8:	0b0b0024 	bleq	2c0a60 <__bss_end+0x193400>
     9cc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     9d0:	2e0c0000 	cdpcs	0, 0, cr0, cr12, cr0, {0}
     9d4:	03193f01 	tsteq	r9, #1, 30
     9d8:	3b0b3a0e 	blcc	2cf218 <__bss_end+0x1a1bb8>
     9dc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     9e0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     9e4:	96184006 	ldrls	r4, [r8], -r6
     9e8:	13011942 	movwne	r1, #6466	; 0x1942
     9ec:	050d0000 	streq	r0, [sp, #-0]
     9f0:	3a080300 	bcc	2015f8 <__bss_end+0xd3f98>
     9f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9f8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     9fc:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     a00:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a04:	0b3a0e03 	bleq	e84218 <__bss_end+0xd56bb8>
     a08:	0b390b3b 	bleq	e436fc <__bss_end+0xd1609c>
     a0c:	01111927 	tsteq	r1, r7, lsr #18
     a10:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a14:	00194297 	mulseq	r9, r7, r2
     a18:	11010000 	mrsne	r0, (UNDEF: 1)
     a1c:	130e2501 	movwne	r2, #58625	; 0xe501
     a20:	1b0e030b 	blne	381654 <__bss_end+0x253ff4>
     a24:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     a28:	00171006 	andseq	r1, r7, r6
     a2c:	00160200 	andseq	r0, r6, r0, lsl #4
     a30:	0b3a0e03 	bleq	e84244 <__bss_end+0xd56be4>
     a34:	0b390b3b 	bleq	e43728 <__bss_end+0xd160c8>
     a38:	00001349 	andeq	r1, r0, r9, asr #6
     a3c:	49002603 	stmdbmi	r0, {r0, r1, r9, sl, sp}
     a40:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     a44:	0b0b0024 	bleq	2c0adc <__bss_end+0x19347c>
     a48:	0e030b3e 	vmoveq.16	d3[0], r0
     a4c:	24050000 	strcs	r0, [r5], #-0
     a50:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     a54:	0008030b 	andeq	r0, r8, fp, lsl #6
     a58:	000f0600 	andeq	r0, pc, r0, lsl #12
     a5c:	00000b0b 	andeq	r0, r0, fp, lsl #22
     a60:	0b000f07 	bleq	4684 <_start-0xb97c>
     a64:	0013490b 	andseq	r4, r3, fp, lsl #18
     a68:	01170800 	tsteq	r7, r0, lsl #16
     a6c:	050b0e03 	streq	r0, [fp, #-3587]	; 0xfffff1fd
     a70:	0b3b0b3a 	bleq	ec3760 <__bss_end+0xd96100>
     a74:	13010b39 	movwne	r0, #6969	; 0x1b39
     a78:	0d090000 	stceq	0, cr0, [r9, #-0]
     a7c:	3a0e0300 	bcc	381684 <__bss_end+0x254024>
     a80:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a84:	0013490b 	andseq	r4, r3, fp, lsl #18
     a88:	00350a00 	eorseq	r0, r5, r0, lsl #20
     a8c:	00001349 	andeq	r1, r0, r9, asr #6
     a90:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     a94:	00130113 	andseq	r0, r3, r3, lsl r1
     a98:	00210c00 	eoreq	r0, r1, r0, lsl #24
     a9c:	052f1349 	streq	r1, [pc, #-841]!	; 75b <_start-0xf8a5>
     aa0:	340d0000 	strcc	r0, [sp], #-0
     aa4:	3a0e0300 	bcc	3816ac <__bss_end+0x25404c>
     aa8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     aac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ab0:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     ab4:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     ab8:	0b3a0b0b 	bleq	e836ec <__bss_end+0xd5608c>
     abc:	0b390b3b 	bleq	e437b0 <__bss_end+0xd16150>
     ac0:	00001301 	andeq	r1, r0, r1, lsl #6
     ac4:	03000d0f 	movweq	r0, #3343	; 0xd0f
     ac8:	3b0b3a0e 	blcc	2cf308 <__bss_end+0x1a1ca8>
     acc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ad0:	000b3813 	andeq	r3, fp, r3, lsl r8
     ad4:	00341000 	eorseq	r1, r4, r0
     ad8:	0b3a0e03 	bleq	e842ec <__bss_end+0xd56c8c>
     adc:	0b390b3b 	bleq	e437d0 <__bss_end+0xd16170>
     ae0:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     ae4:	00001802 	andeq	r1, r0, r2, lsl #16
     ae8:	03012e11 	movweq	r2, #7697	; 0x1e11
     aec:	3b0b3a0e 	blcc	2cf32c <__bss_end+0x1a1ccc>
     af0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     af4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     af8:	97184006 	ldrls	r4, [r8, -r6]
     afc:	13011942 	movwne	r1, #6466	; 0x1942
     b00:	05120000 	ldreq	r0, [r2, #-0]
     b04:	3a0e0300 	bcc	38170c <__bss_end+0x2540ac>
     b08:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b10:	13000018 	movwne	r0, #24
     b14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b18:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b1c:	13490b39 	movtne	r0, #39737	; 0x9b39
     b20:	00001802 	andeq	r1, r0, r2, lsl #16
     b24:	03003414 	movweq	r3, #1044	; 0x414
     b28:	3b0b3a08 	blcc	2cf350 <__bss_end+0x1a1cf0>
     b2c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     b30:	00180213 	andseq	r0, r8, r3, lsl r2
     b34:	002e1500 	eoreq	r1, lr, r0, lsl #10
     b38:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     b3c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     b40:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     b44:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b48:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b4c:	16000019 			; <UNDEFINED> instruction: 0x16000019
     b50:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     b54:	0b3a0e03 	bleq	e84368 <__bss_end+0xd56d08>
     b58:	0b39053b 	bleq	e4204c <__bss_end+0xd149ec>
     b5c:	13491927 	movtne	r1, #39207	; 0x9927
     b60:	06120111 			; <UNDEFINED> instruction: 0x06120111
     b64:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     b68:	17000019 	smladne	r0, r9, r0, r0
     b6c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     b70:	0b3a0e03 	bleq	e84384 <__bss_end+0xd56d24>
     b74:	0b390b3b 	bleq	e43868 <__bss_end+0xd16208>
     b78:	01111927 	tsteq	r1, r7, lsr #18
     b7c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b80:	01194296 			; <UNDEFINED> instruction: 0x01194296
     b84:	18000013 	stmdane	r0, {r0, r1, r4}
     b88:	08030005 	stmdaeq	r3, {r0, r2}
     b8c:	0b3b0b3a 	bleq	ec387c <__bss_end+0xd9621c>
     b90:	13490b39 	movtne	r0, #39737	; 0x9b39
     b94:	00001802 	andeq	r1, r0, r2, lsl #16
     b98:	03003419 	movweq	r3, #1049	; 0x419
     b9c:	3b0b3a08 	blcc	2cf3c4 <__bss_end+0x1a1d64>
     ba0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     ba4:	00180213 	andseq	r0, r8, r3, lsl r2
     ba8:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
     bac:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     bb0:	0b3b0b3a 	bleq	ec38a0 <__bss_end+0xd96240>
     bb4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     bb8:	01111349 	tsteq	r1, r9, asr #6
     bbc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     bc0:	00194296 	mulseq	r9, r6, r2
     bc4:	00051b00 	andeq	r1, r5, r0, lsl #22
     bc8:	0b3a0e03 	bleq	e843dc <__bss_end+0xd56d7c>
     bcc:	0b390b3b 	bleq	e438c0 <__bss_end+0xd16260>
     bd0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     bd4:	01000000 	mrseq	r0, (UNDEF: 0)
     bd8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     bdc:	0e030b13 	vmoveq.32	d3[0], r0
     be0:	01110e1b 	tsteq	r1, fp, lsl lr
     be4:	17100612 			; <UNDEFINED> instruction: 0x17100612
     be8:	24020000 	strcs	r0, [r2], #-0
     bec:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     bf0:	0008030b 	andeq	r0, r8, fp, lsl #6
     bf4:	00240300 	eoreq	r0, r4, r0, lsl #6
     bf8:	0b3e0b0b 	bleq	f8382c <__bss_end+0xe561cc>
     bfc:	00000e03 	andeq	r0, r0, r3, lsl #28
     c00:	0b000f04 	bleq	4818 <_start-0xb7e8>
     c04:	0500000b 	streq	r0, [r0, #-11]
     c08:	13490026 	movtne	r0, #36902	; 0x9026
     c0c:	0f060000 	svceq	0x00060000
     c10:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     c14:	07000013 	smladeq	r0, r3, r0, r0
     c18:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     c1c:	0b3b0b3a 	bleq	ec390c <__bss_end+0xd962ac>
     c20:	13490b39 	movtne	r0, #39737	; 0x9b39
     c24:	13080000 	movwne	r0, #32768	; 0x8000
     c28:	3a050b01 	bcc	143834 <__bss_end+0x161d4>
     c2c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c30:	0013010b 	andseq	r0, r3, fp, lsl #2
     c34:	000d0900 	andeq	r0, sp, r0, lsl #18
     c38:	0b3a0e03 	bleq	e8444c <__bss_end+0xd56dec>
     c3c:	0b390b3b 	bleq	e43930 <__bss_end+0xd162d0>
     c40:	0b381349 	bleq	e0596c <__bss_end+0xcd830c>
     c44:	0d0a0000 	stceq	0, cr0, [sl, #-0]
     c48:	3a080300 	bcc	201850 <__bss_end+0xd41f0>
     c4c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c50:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     c54:	0b00000b 	bleq	c88 <_start-0xf378>
     c58:	13490101 	movtne	r0, #37121	; 0x9101
     c5c:	00001301 	andeq	r1, r0, r1, lsl #6
     c60:	4900210c 	stmdbmi	r0, {r2, r3, r8, sp}
     c64:	00052f13 	andeq	r2, r5, r3, lsl pc
     c68:	01130d00 	tsteq	r3, r0, lsl #26
     c6c:	0b3a0b0b 	bleq	e838a0 <__bss_end+0xd56240>
     c70:	0b390b3b 	bleq	e43964 <__bss_end+0xd16304>
     c74:	00001301 	andeq	r1, r0, r1, lsl #6
     c78:	0300160e 	movweq	r1, #1550	; 0x60e
     c7c:	3b0b3a08 	blcc	2cf4a4 <__bss_end+0x1a1e44>
     c80:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     c84:	0f000013 	svceq	0x00000013
     c88:	13490021 	movtne	r0, #36897	; 0x9021
     c8c:	00000b2f 	andeq	r0, r0, pc, lsr #22
     c90:	03001610 	movweq	r1, #1552	; 0x610
     c94:	3b0b3a0e 	blcc	2cf4d4 <__bss_end+0x1a1e74>
     c98:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     c9c:	11000013 	tstne	r0, r3, lsl r0
     ca0:	0b0b0113 	bleq	2c10f4 <__bss_end+0x193a94>
     ca4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ca8:	13010b39 	movwne	r0, #6969	; 0x1b39
     cac:	0d120000 	ldceq	0, cr0, [r2, #-0]
     cb0:	3a080300 	bcc	2018b8 <__bss_end+0xd4258>
     cb4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     cb8:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     cbc:	1300000b 	movwne	r0, #11
     cc0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     cc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     cc8:	13490b39 	movtne	r0, #39737	; 0x9b39
     ccc:	00000b38 	andeq	r0, r0, r8, lsr fp
     cd0:	3e010414 	cfmvdlrcc	mvd1, r0
     cd4:	490b0b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp}
     cd8:	3b0b3a13 	blcc	2cf52c <__bss_end+0x1a1ecc>
     cdc:	010b3905 	tsteq	fp, r5, lsl #18
     ce0:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
     ce4:	0e030028 	cdpeq	0, 0, cr0, cr3, cr8, {1}
     ce8:	00000b1c 	andeq	r0, r0, ip, lsl fp
     cec:	3f002e16 	svccc	0x00002e16
     cf0:	3a0e0319 	bcc	38195c <__bss_end+0x2542fc>
     cf4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     cf8:	1119270b 	tstne	r9, fp, lsl #14
     cfc:	40061201 	andmi	r1, r6, r1, lsl #4
     d00:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     d04:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     d08:	03193f01 	tsteq	r9, #1, 30
     d0c:	3b0b3a0e 	blcc	2cf54c <__bss_end+0x1a1eec>
     d10:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     d14:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d18:	96184006 	ldrls	r4, [r8], -r6
     d1c:	13011942 	movwne	r1, #6466	; 0x1942
     d20:	05180000 	ldreq	r0, [r8, #-0]
     d24:	3a0e0300 	bcc	38192c <__bss_end+0x2542cc>
     d28:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d2c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d30:	19000018 	stmdbne	r0, {r3, r4}
     d34:	08030034 	stmdaeq	r3, {r2, r4, r5}
     d38:	0b3b0b3a 	bleq	ec3a28 <__bss_end+0xd963c8>
     d3c:	13490b39 	movtne	r0, #39737	; 0x9b39
     d40:	00001802 	andeq	r1, r0, r2, lsl #16
     d44:	0300341a 	movweq	r3, #1050	; 0x41a
     d48:	3b0b3a0e 	blcc	2cf588 <__bss_end+0x1a1f28>
     d4c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d50:	00180213 	andseq	r0, r8, r3, lsl r2
     d54:	010b1b00 	tsteq	fp, r0, lsl #22
     d58:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d5c:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     d60:	03193f00 	tsteq	r9, #0, 30
     d64:	3b0b3a0e 	blcc	2cf5a4 <__bss_end+0x1a1f44>
     d68:	110b390b 	tstne	fp, fp, lsl #18
     d6c:	40061201 	andmi	r1, r6, r1, lsl #4
     d70:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d74:	051d0000 	ldreq	r0, [sp, #-0]
     d78:	3a080300 	bcc	201980 <__bss_end+0xd4320>
     d7c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d80:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     d84:	1e000018 	mcrne	0, 0, r0, cr0, cr8, {0}
     d88:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     d8c:	0b3a0e03 	bleq	e845a0 <__bss_end+0xd56f40>
     d90:	0b390b3b 	bleq	e43a84 <__bss_end+0xd16424>
     d94:	01111927 	tsteq	r1, r7, lsr #18
     d98:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d9c:	00194297 	mulseq	r9, r7, r2
     da0:	11010000 	mrsne	r0, (UNDEF: 1)
     da4:	130e2501 	movwne	r2, #58625	; 0xe501
     da8:	1b0e030b 	blne	3819dc <__bss_end+0x25437c>
     dac:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     db0:	00171006 	andseq	r1, r7, r6
     db4:	00240200 	eoreq	r0, r4, r0, lsl #4
     db8:	0b3e0b0b 	bleq	f839ec <__bss_end+0xe5638c>
     dbc:	00000803 	andeq	r0, r0, r3, lsl #16
     dc0:	0b002403 	bleq	9dd4 <_start-0x622c>
     dc4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     dc8:	0400000e 	streq	r0, [r0], #-14
     dcc:	0b0b000f 	bleq	2c0e10 <__bss_end+0x1937b0>
     dd0:	26050000 	strcs	r0, [r5], -r0
     dd4:	00134900 	andseq	r4, r3, r0, lsl #18
     dd8:	000f0600 	andeq	r0, pc, r0, lsl #12
     ddc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     de0:	16070000 	strne	r0, [r7], -r0
     de4:	3a0e0300 	bcc	3819ec <__bss_end+0x25438c>
     de8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     dec:	0013490b 	andseq	r4, r3, fp, lsl #18
     df0:	01130800 	tsteq	r3, r0, lsl #16
     df4:	0b3a050b 	bleq	e82228 <__bss_end+0xd54bc8>
     df8:	0b390b3b 	bleq	e43aec <__bss_end+0xd1648c>
     dfc:	00001301 	andeq	r1, r0, r1, lsl #6
     e00:	03000d09 	movweq	r0, #3337	; 0xd09
     e04:	3b0b3a0e 	blcc	2cf644 <__bss_end+0x1a1fe4>
     e08:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e0c:	000b3813 	andeq	r3, fp, r3, lsl r8
     e10:	000d0a00 	andeq	r0, sp, r0, lsl #20
     e14:	0b3a0803 	bleq	e82e28 <__bss_end+0xd557c8>
     e18:	0b390b3b 	bleq	e43b0c <__bss_end+0xd164ac>
     e1c:	0b381349 	bleq	e05b48 <__bss_end+0xcd84e8>
     e20:	010b0000 	mrseq	r0, (UNDEF: 11)
     e24:	01134901 	tsteq	r3, r1, lsl #18
     e28:	0c000013 	stceq	0, cr0, [r0], {19}
     e2c:	13490021 	movtne	r0, #36897	; 0x9021
     e30:	0000052f 	andeq	r0, r0, pc, lsr #10
     e34:	0b01130d 	bleq	45a70 <ramdisk+0x18418>
     e38:	3b0b3a0b 	blcc	2cf66c <__bss_end+0x1a200c>
     e3c:	010b390b 	tsteq	fp, fp, lsl #18
     e40:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     e44:	08030016 	stmdaeq	r3, {r1, r2, r4}
     e48:	0b3b0b3a 	bleq	ec3b38 <__bss_end+0xd964d8>
     e4c:	13490b39 	movtne	r0, #39737	; 0x9b39
     e50:	210f0000 	mrscs	r0, CPSR
     e54:	2f134900 	svccs	0x00134900
     e58:	1000000b 	andne	r0, r0, fp
     e5c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     e60:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     e64:	13490b39 	movtne	r0, #39737	; 0x9b39
     e68:	13110000 	tstne	r1, #0
     e6c:	3a0b0b01 	bcc	2c3a78 <__bss_end+0x196418>
     e70:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e74:	0013010b 	andseq	r0, r3, fp, lsl #2
     e78:	000d1200 	andeq	r1, sp, r0, lsl #4
     e7c:	0b3a0803 	bleq	e82e90 <__bss_end+0xd55830>
     e80:	0b39053b 	bleq	e42374 <__bss_end+0xd14d14>
     e84:	0b381349 	bleq	e05bb0 <__bss_end+0xcd8550>
     e88:	0d130000 	ldceq	0, cr0, [r3, #-0]
     e8c:	3a0e0300 	bcc	381a94 <__bss_end+0x254434>
     e90:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     e94:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     e98:	1400000b 	strne	r0, [r0], #-11
     e9c:	0b3e0104 	bleq	f812b4 <__bss_end+0xe53c54>
     ea0:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     ea4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ea8:	13010b39 	movwne	r0, #6969	; 0x1b39
     eac:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
     eb0:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     eb4:	1600000b 	strne	r0, [r0], -fp
     eb8:	0b3e0104 	bleq	f812d0 <__bss_end+0xe53c70>
     ebc:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     ec0:	0b3b0b3a 	bleq	ec3bb0 <__bss_end+0xd96550>
     ec4:	13010b39 	movwne	r0, #6969	; 0x1b39
     ec8:	34170000 	ldrcc	r0, [r7], #-0
     ecc:	3a0e0300 	bcc	381ad4 <__bss_end+0x254474>
     ed0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ed4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ed8:	18000018 	stmdane	r0, {r3, r4}
     edc:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     ee0:	0b3a0e03 	bleq	e846f4 <__bss_end+0xd57094>
     ee4:	0b39053b 	bleq	e423d8 <__bss_end+0xd14d78>
     ee8:	13491927 	movtne	r1, #39207	; 0x9927
     eec:	06120111 			; <UNDEFINED> instruction: 0x06120111
     ef0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     ef4:	00130119 	andseq	r0, r3, r9, lsl r1
     ef8:	00051900 	andeq	r1, r5, r0, lsl #18
     efc:	0b3a0e03 	bleq	e84710 <__bss_end+0xd570b0>
     f00:	0b39053b 	bleq	e423f4 <__bss_end+0xd14d94>
     f04:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f08:	051a0000 	ldreq	r0, [sl, #-0]
     f0c:	3a080300 	bcc	201b14 <__bss_end+0xd44b4>
     f10:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f14:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f18:	1b000018 	blne	f80 <_start-0xf080>
     f1c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     f20:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f24:	13490b39 	movtne	r0, #39737	; 0x9b39
     f28:	00001802 	andeq	r1, r0, r2, lsl #16
     f2c:	0300341c 	movweq	r3, #1052	; 0x41c
     f30:	3b0b3a08 	blcc	2cf758 <__bss_end+0x1a20f8>
     f34:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     f38:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     f3c:	0e03012e 	adfeqsp	f0, f3, #0.5
     f40:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f44:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     f48:	01111349 	tsteq	r1, r9, asr #6
     f4c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f50:	01194296 			; <UNDEFINED> instruction: 0x01194296
     f54:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     f58:	00000026 	andeq	r0, r0, r6, lsr #32
     f5c:	03012e1f 	movweq	r2, #7711	; 0x1e1f
     f60:	3b0b3a0e 	blcc	2cf7a0 <__bss_end+0x1a2140>
     f64:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     f68:	11134919 	tstne	r3, r9, lsl r9
     f6c:	40061201 	andmi	r1, r6, r1, lsl #4
     f70:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     f74:	00001301 	andeq	r1, r0, r1, lsl #6
     f78:	03012e20 	movweq	r2, #7712	; 0x1e20
     f7c:	3b0b3a0e 	blcc	2cf7bc <__bss_end+0x1a215c>
     f80:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     f84:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     f88:	96184006 	ldrls	r4, [r8], -r6
     f8c:	13011942 	movwne	r1, #6466	; 0x1942
     f90:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
     f94:	3a0e0301 	bcc	381ba0 <__bss_end+0x254540>
     f98:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f9c:	1119270b 	tstne	r9, fp, lsl #14
     fa0:	40061201 	andmi	r1, r6, r1, lsl #4
     fa4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     fa8:	00001301 	andeq	r1, r0, r1, lsl #6
     fac:	03012e22 	movweq	r2, #7714	; 0x1e22
     fb0:	3b0b3a0e 	blcc	2cf7f0 <__bss_end+0x1a2190>
     fb4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     fb8:	11134919 	tstne	r3, r9, lsl r9
     fbc:	40061201 	andmi	r1, r6, r1, lsl #4
     fc0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     fc4:	01000000 	mrseq	r0, (UNDEF: 0)
     fc8:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     fcc:	0e030b13 	vmoveq.32	d3[0], r0
     fd0:	01110e1b 	tsteq	r1, fp, lsl lr
     fd4:	17100612 			; <UNDEFINED> instruction: 0x17100612
     fd8:	24020000 	strcs	r0, [r2], #-0
     fdc:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     fe0:	000e030b 	andeq	r0, lr, fp, lsl #6
     fe4:	00160300 	andseq	r0, r6, r0, lsl #6
     fe8:	0b3a0e03 	bleq	e847fc <__bss_end+0xd5719c>
     fec:	0b390b3b 	bleq	e43ce0 <__bss_end+0xd16680>
     ff0:	00001349 	andeq	r1, r0, r9, asr #6
     ff4:	0b002404 	bleq	a00c <_start-0x5ff4>
     ff8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ffc:	05000008 	streq	r0, [r0, #-8]
    1000:	13490026 	movtne	r0, #36902	; 0x9026
    1004:	0f060000 	svceq	0x00060000
    1008:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    100c:	07000013 	smladeq	r0, r3, r0, r0
    1010:	0b3e0104 	bleq	f81428 <__bss_end+0xe53dc8>
    1014:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    1018:	0b3b0b3a 	bleq	ec3d08 <__bss_end+0xd966a8>
    101c:	13010b39 	movwne	r0, #6969	; 0x1b39
    1020:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    1024:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    1028:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    102c:	0b0b000f 	bleq	2c1070 <__bss_end+0x193a10>
    1030:	010a0000 	mrseq	r0, (UNDEF: 10)
    1034:	01134901 	tsteq	r3, r1, lsl #18
    1038:	0b000013 	bleq	108c <_start-0xef74>
    103c:	13490021 	movtne	r0, #36897	; 0x9021
    1040:	0000062f 	andeq	r0, r0, pc, lsr #12
    1044:	0300340c 	movweq	r3, #1036	; 0x40c
    1048:	3b0b3a0e 	blcc	2cf888 <__bss_end+0x1a2228>
    104c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1050:	00180213 	andseq	r0, r8, r3, lsl r2
    1054:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    1058:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    105c:	0b3b0b3a 	bleq	ec3d4c <__bss_end+0xd966ec>
    1060:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1064:	01111349 	tsteq	r1, r9, asr #6
    1068:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    106c:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1070:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    1074:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1078:	0b3b0b3a 	bleq	ec3d68 <__bss_end+0xd96708>
    107c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1080:	00001802 	andeq	r1, r0, r2, lsl #16
    1084:	0300050f 	movweq	r0, #1295	; 0x50f
    1088:	3b0b3a08 	blcc	2cf8b0 <__bss_end+0x1a2250>
    108c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1090:	00180213 	andseq	r0, r8, r3, lsl r2
    1094:	00341000 	eorseq	r1, r4, r0
    1098:	0b3a0803 	bleq	e830ac <__bss_end+0xd55a4c>
    109c:	0b390b3b 	bleq	e43d90 <__bss_end+0xd16730>
    10a0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    10a4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    10a8:	03193f01 	tsteq	r9, #1, 30
    10ac:	3b0b3a0e 	blcc	2cf8ec <__bss_end+0x1a228c>
    10b0:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    10b4:	11134919 	tstne	r3, r9, lsl r9
    10b8:	40061201 	andmi	r1, r6, r1, lsl #4
    10bc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    10c0:	00001301 	andeq	r1, r0, r1, lsl #6
    10c4:	3f012e12 	svccc	0x00012e12
    10c8:	3a0e0319 	bcc	381d34 <__bss_end+0x2546d4>
    10cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10d0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    10d4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    10d8:	97184006 	ldrls	r4, [r8, -r6]
    10dc:	00001942 	andeq	r1, r0, r2, asr #18
    10e0:	01110100 	tsteq	r1, r0, lsl #2
    10e4:	0b130e25 	bleq	4c4980 <__bss_end+0x397320>
    10e8:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    10ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10f0:	00001710 	andeq	r1, r0, r0, lsl r7
    10f4:	0b002402 	bleq	a104 <_start-0x5efc>
    10f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    10fc:	0300000e 	movweq	r0, #14
    1100:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1104:	0b3b0b3a 	bleq	ec3df4 <__bss_end+0xd96794>
    1108:	13490b39 	movtne	r0, #39737	; 0x9b39
    110c:	24040000 	strcs	r0, [r4], #-0
    1110:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1114:	0008030b 	andeq	r0, r8, fp, lsl #6
    1118:	002e0500 	eoreq	r0, lr, r0, lsl #10
    111c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1120:	0b3b0b3a 	bleq	ec3e10 <__bss_end+0xd967b0>
    1124:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1128:	01111349 	tsteq	r1, r9, asr #6
    112c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1130:	00194297 	mulseq	r9, r7, r2
    1134:	11010000 	mrsne	r0, (UNDEF: 1)
    1138:	130e2501 	movwne	r2, #58625	; 0xe501
    113c:	1b0e030b 	blne	381d70 <__bss_end+0x254710>
    1140:	0017100e 	andseq	r1, r7, lr
    1144:	00240200 	eoreq	r0, r4, r0, lsl #4
    1148:	0b3e0b0b 	bleq	f83d7c <__bss_end+0xe5671c>
    114c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1150:	0b002403 	bleq	a164 <_start-0x5e9c>
    1154:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1158:	00000008 	andeq	r0, r0, r8
    115c:	10001101 	andne	r1, r0, r1, lsl #2
    1160:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    1164:	1b0e0301 	blne	381d70 <__bss_end+0x254710>
    1168:	130e250e 	movwne	r2, #58638	; 0xe50e
    116c:	00000005 	andeq	r0, r0, r5
    1170:	10001101 	andne	r1, r0, r1, lsl #2
    1174:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    1178:	1b0e0301 	blne	381d84 <__bss_end+0x254724>
    117c:	130e250e 	movwne	r2, #58638	; 0xe50e
    1180:	00000005 	andeq	r0, r0, r5
    1184:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1188:	030b130e 	movweq	r1, #45838	; 0xb30e
    118c:	110e1b0e 	tstne	lr, lr, lsl #22
    1190:	10061201 	andne	r1, r6, r1, lsl #4
    1194:	02000017 	andeq	r0, r0, #23
    1198:	0b0b0024 	bleq	2c1230 <__bss_end+0x193bd0>
    119c:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    11a0:	16030000 	strne	r0, [r3], -r0
    11a4:	3a0e0300 	bcc	381dac <__bss_end+0x25474c>
    11a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    11ac:	0013490b 	andseq	r4, r3, fp, lsl #18
    11b0:	00240400 	eoreq	r0, r4, r0, lsl #8
    11b4:	0b3e0b0b 	bleq	f83de8 <__bss_end+0xe56788>
    11b8:	00000e03 	andeq	r0, r0, r3, lsl #28
    11bc:	0b000f05 	bleq	4dd8 <_start-0xb228>
    11c0:	0013490b 	andseq	r4, r3, fp, lsl #18
    11c4:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
    11c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    11cc:	0b3b0b3a 	bleq	ec3ebc <__bss_end+0xd9685c>
    11d0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    11d4:	01111349 	tsteq	r1, r9, asr #6
    11d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    11dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    11e0:	07000013 	smladeq	r0, r3, r0, r0
    11e4:	08030005 	stmdaeq	r3, {r0, r2}
    11e8:	0b3b0b3a 	bleq	ec3ed8 <__bss_end+0xd96878>
    11ec:	13490b39 	movtne	r0, #39737	; 0x9b39
    11f0:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    11f4:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    11f8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    11fc:	0b3b0b3a 	bleq	ec3eec <__bss_end+0xd9688c>
    1200:	13490b39 	movtne	r0, #39737	; 0x9b39
    1204:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1208:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    120c:	00000026 	andeq	r0, r0, r6, lsr #32
    1210:	01110100 	tsteq	r1, r0, lsl #2
    1214:	0b130e25 	bleq	4c4ab0 <__bss_end+0x397450>
    1218:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    121c:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1220:	00001710 	andeq	r1, r0, r0, lsl r7
    1224:	0b002402 	bleq	a234 <_start-0x5dcc>
    1228:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    122c:	03000008 	movweq	r0, #8
    1230:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1234:	0b3b0b3a 	bleq	ec3f24 <__bss_end+0xd968c4>
    1238:	13490b39 	movtne	r0, #39737	; 0x9b39
    123c:	24040000 	strcs	r0, [r4], #-0
    1240:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1244:	000e030b 	andeq	r0, lr, fp, lsl #6
    1248:	00260500 	eoreq	r0, r6, r0, lsl #10
    124c:	00001349 	andeq	r1, r0, r9, asr #6
    1250:	0b000f06 	bleq	4e70 <_start-0xb190>
    1254:	0700000b 	streq	r0, [r0, -fp]
    1258:	13490037 	movtne	r0, #36919	; 0x9037
    125c:	0f080000 	svceq	0x00080000
    1260:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1264:	09000013 	stmdbeq	r0, {r0, r1, r4}
    1268:	00000026 	andeq	r0, r0, r6, lsr #32
    126c:	3f012e0a 	svccc	0x00012e0a
    1270:	3a0e0319 	bcc	381edc <__bss_end+0x25487c>
    1274:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1278:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    127c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1280:	97184006 	ldrls	r4, [r8, -r6]
    1284:	13011942 	movwne	r1, #6466	; 0x1942
    1288:	050b0000 	streq	r0, [fp, #-0]
    128c:	3a0e0300 	bcc	381e94 <__bss_end+0x254834>
    1290:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1294:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1298:	0c000018 	stceq	0, cr0, [r0], {24}
    129c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    12a0:	0b3b0b3a 	bleq	ec3f90 <__bss_end+0xd96930>
    12a4:	13490b39 	movtne	r0, #39737	; 0x9b39
    12a8:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    12ac:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    12b0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    12b4:	0b3b0b3a 	bleq	ec3fa4 <__bss_end+0xd96944>
    12b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    12bc:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    12c0:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
    12c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12c8:	0b3b0b3a 	bleq	ec3fb8 <__bss_end+0xd96958>
    12cc:	13490b39 	movtne	r0, #39737	; 0x9b39
    12d0:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    12d4:	00000017 	andeq	r0, r0, r7, lsl r0
    12d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    12dc:	030b130e 	movweq	r1, #45838	; 0xb30e
    12e0:	110e1b0e 	tstne	lr, lr, lsl #22
    12e4:	10061201 	andne	r1, r6, r1, lsl #4
    12e8:	02000017 	andeq	r0, r0, #23
    12ec:	0b0b0024 	bleq	2c1384 <__bss_end+0x193d24>
    12f0:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    12f4:	16030000 	strne	r0, [r3], -r0
    12f8:	3a0e0300 	bcc	381f00 <__bss_end+0x2548a0>
    12fc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1300:	0013490b 	andseq	r4, r3, fp, lsl #18
    1304:	00240400 	eoreq	r0, r4, r0, lsl #8
    1308:	0b3e0b0b 	bleq	f83f3c <__bss_end+0xe568dc>
    130c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1310:	0b000f05 	bleq	4f2c <_start-0xb0d4>
    1314:	0600000b 	streq	r0, [r0], -fp
    1318:	0b0b000f 	bleq	2c135c <__bss_end+0x193cfc>
    131c:	00001349 	andeq	r1, r0, r9, asr #6
    1320:	3f012e07 	svccc	0x00012e07
    1324:	3a0e0319 	bcc	381f90 <__bss_end+0x254930>
    1328:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    132c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1330:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1334:	97184006 	ldrls	r4, [r8, -r6]
    1338:	13011942 	movwne	r1, #6466	; 0x1942
    133c:	05080000 	streq	r0, [r8, #-0]
    1340:	3a080300 	bcc	201f48 <__bss_end+0xd48e8>
    1344:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1348:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    134c:	09000018 	stmdbeq	r0, {r3, r4}
    1350:	08030005 	stmdaeq	r3, {r0, r2}
    1354:	0b3b0b3a 	bleq	ec4044 <__bss_end+0xd969e4>
    1358:	13490b39 	movtne	r0, #39737	; 0x9b39
    135c:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1360:	0a000017 	beq	13c4 <_start-0xec3c>
    1364:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1368:	0b3b0b3a 	bleq	ec4058 <__bss_end+0xd969f8>
    136c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1370:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1374:	0b000017 	bleq	13d8 <_start-0xec28>
    1378:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    137c:	0b3b0b3a 	bleq	ec406c <__bss_end+0xd96a0c>
    1380:	13490b39 	movtne	r0, #39737	; 0x9b39
    1384:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1388:	00000017 	andeq	r0, r0, r7, lsl r0
    138c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1390:	030b130e 	movweq	r1, #45838	; 0xb30e
    1394:	110e1b0e 	tstne	lr, lr, lsl #22
    1398:	10061201 	andne	r1, r6, r1, lsl #4
    139c:	02000017 	andeq	r0, r0, #23
    13a0:	0b0b0024 	bleq	2c1438 <__bss_end+0x193dd8>
    13a4:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    13a8:	24030000 	strcs	r0, [r3], #-0
    13ac:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    13b0:	000e030b 	andeq	r0, lr, fp, lsl #6
    13b4:	00260400 	eoreq	r0, r6, r0, lsl #8
    13b8:	00001349 	andeq	r1, r0, r9, asr #6
    13bc:	0b000f05 	bleq	4fd8 <_start-0xb028>
    13c0:	0013490b 	andseq	r4, r3, fp, lsl #18
    13c4:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
    13c8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    13cc:	0b3b0b3a 	bleq	ec40bc <__bss_end+0xd96a5c>
    13d0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    13d4:	01111349 	tsteq	r1, r9, asr #6
    13d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    13dc:	01194297 			; <UNDEFINED> instruction: 0x01194297
    13e0:	07000013 	smladeq	r0, r3, r0, r0
    13e4:	08030005 	stmdaeq	r3, {r0, r2}
    13e8:	0b3b0b3a 	bleq	ec40d8 <__bss_end+0xd96a78>
    13ec:	13490b39 	movtne	r0, #39737	; 0x9b39
    13f0:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    13f4:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    13f8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    13fc:	0b3b0b3a 	bleq	ec40ec <__bss_end+0xd96a8c>
    1400:	13490b39 	movtne	r0, #39737	; 0x9b39
    1404:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1408:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    140c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1410:	0b3b0b3a 	bleq	ec4100 <__bss_end+0xd96aa0>
    1414:	13490b39 	movtne	r0, #39737	; 0x9b39
    1418:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    141c:	00000017 	andeq	r0, r0, r7, lsl r0
    1420:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1424:	030b130e 	movweq	r1, #45838	; 0xb30e
    1428:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    142c:	10011117 	andne	r1, r1, r7, lsl r1
    1430:	02000017 	andeq	r0, r0, #23
    1434:	0b0b0024 	bleq	2c14cc <__bss_end+0x193e6c>
    1438:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    143c:	16030000 	strne	r0, [r3], -r0
    1440:	3a0e0300 	bcc	382048 <__bss_end+0x2549e8>
    1444:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1448:	0013490b 	andseq	r4, r3, fp, lsl #18
    144c:	00240400 	eoreq	r0, r4, r0, lsl #8
    1450:	0b3e0b0b 	bleq	f84084 <__bss_end+0xe56a24>
    1454:	00000e03 	andeq	r0, r0, r3, lsl #28
    1458:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    145c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1460:	0b0b000f 	bleq	2c14a4 <__bss_end+0x193e44>
    1464:	00001349 	andeq	r1, r0, r9, asr #6
    1468:	3f012e07 	svccc	0x00012e07
    146c:	3a0e0319 	bcc	3820d8 <__bss_end+0x254a78>
    1470:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1474:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1478:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    147c:	97184006 	ldrls	r4, [r8, -r6]
    1480:	00001942 	andeq	r1, r0, r2, asr #18
    1484:	03000508 	movweq	r0, #1288	; 0x508
    1488:	3b0b3a08 	blcc	2cfcb0 <__bss_end+0x1a2650>
    148c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1490:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    1494:	00001742 	andeq	r1, r0, r2, asr #14
    1498:	01110100 	tsteq	r1, r0, lsl #2
    149c:	0b130e25 	bleq	4c4d38 <__bss_end+0x3976d8>
    14a0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    14a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
    14a8:	00001710 	andeq	r1, r0, r0, lsl r7
    14ac:	0b002402 	bleq	a4bc <_start-0x5b44>
    14b0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    14b4:	03000008 	movweq	r0, #8
    14b8:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    14bc:	0b3b0b3a 	bleq	ec41ac <__bss_end+0xd96b4c>
    14c0:	13490b39 	movtne	r0, #39737	; 0x9b39
    14c4:	24040000 	strcs	r0, [r4], #-0
    14c8:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    14cc:	000e030b 	andeq	r0, lr, fp, lsl #6
    14d0:	00260500 	eoreq	r0, r6, r0, lsl #10
    14d4:	00001349 	andeq	r1, r0, r9, asr #6
    14d8:	0b000f06 	bleq	50f8 <_start-0xaf08>
    14dc:	0013490b 	andseq	r4, r3, fp, lsl #18
    14e0:	00370700 	eorseq	r0, r7, r0, lsl #14
    14e4:	00001349 	andeq	r1, r0, r9, asr #6
    14e8:	3f012e08 	svccc	0x00012e08
    14ec:	3a0e0319 	bcc	382158 <__bss_end+0x254af8>
    14f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14f4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    14f8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    14fc:	97184006 	ldrls	r4, [r8, -r6]
    1500:	13011942 	movwne	r1, #6466	; 0x1942
    1504:	05090000 	streq	r0, [r9, #-0]
    1508:	3a0e0300 	bcc	382110 <__bss_end+0x254ab0>
    150c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1510:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1514:	0a000018 	beq	157c <_start-0xea84>
    1518:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    151c:	0b3b0b3a 	bleq	ec420c <__bss_end+0xd96bac>
    1520:	13490b39 	movtne	r0, #39737	; 0x9b39
    1524:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1528:	0b000017 	bleq	158c <_start-0xea74>
    152c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1530:	0b3b0b3a 	bleq	ec4220 <__bss_end+0xd96bc0>
    1534:	13490b39 	movtne	r0, #39737	; 0x9b39
    1538:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    153c:	0c000017 	stceq	0, cr0, [r0], {23}
    1540:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1544:	0b3b0b3a 	bleq	ec4234 <__bss_end+0xd96bd4>
    1548:	13490b39 	movtne	r0, #39737	; 0x9b39
    154c:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1550:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00020000 	andeq	r0, r2, r0
  14:	00000344 	andeq	r0, r0, r4, asr #6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02160002 	andseq	r0, r6, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00020344 	andeq	r0, r2, r4, asr #6
  34:	000002a4 	andeq	r0, r0, r4, lsr #5
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03b20002 			; <UNDEFINED> instruction: 0x03b20002
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000205f0 	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
  54:	00000764 	andeq	r0, r0, r4, ror #14
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	08610002 	stmdaeq	r1!, {r1}^
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00020d54 	andeq	r0, r2, r4, asr sp
  74:	0000029c 	muleq	r0, ip, r2
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0b060002 	bleq	180094 <__bss_end+0x52a34>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00020ff0 	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
  94:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	128e0002 	addne	r0, lr, #2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00021ba0 	andeq	r1, r2, r0, lsr #23
  b4:	00001924 	andeq	r1, r0, r4, lsr #18
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	20640002 	rsbcs	r0, r4, r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000234c4 	andeq	r3, r2, r4, asr #9
  d4:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	233f0002 	teqcs	pc, #2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00023868 	andeq	r3, r2, r8, ror #16
  f4:	00000520 	andeq	r0, r0, r0, lsr #10
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	262a0002 	strtcs	r0, [sl], -r2
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00023d88 	andeq	r3, r2, r8, lsl #27
 114:	000004ac 	andeq	r0, r0, ip, lsr #9
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	29130002 	ldmdbcs	r3, {r1}
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	0002424c 	andeq	r4, r2, ip, asr #4
 134:	000008e4 	andeq	r0, r0, r4, ror #17
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	30300002 	eorscc	r0, r0, r2
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00024b30 	andeq	r4, r2, r0, lsr fp
 154:	00006588 	andeq	r6, r0, r8, lsl #11
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	4e560002 	cdpmi	0, 5, cr0, cr6, cr2, {0}
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	0002b0b8 	strheq	fp, [r2], -r8
 174:	00000374 	andeq	r0, r0, r4, ror r3
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	512c0002 			; <UNDEFINED> instruction: 0x512c0002
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	0002b42c 	andeq	fp, r2, ip, lsr #8
 194:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 1a0:	00000014 	andeq	r0, r0, r4, lsl r0
 1a4:	51d40002 	bicspl	r0, r4, r2
 1a8:	00040000 	andeq	r0, r4, r0
	...
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	523f0002 	eorspl	r0, pc, #2
 1c0:	00040000 	andeq	r0, r4, r0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	0002b44c 	andeq	fp, r2, ip, asr #8
 1cc:	00000114 	andeq	r0, r0, r4, lsl r1
	...
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	52650002 	rsbpl	r0, r5, #2
 1e0:	00040000 	andeq	r0, r4, r0
 1e4:	00000000 	andeq	r0, r0, r0
 1e8:	0002b560 	andeq	fp, r2, r0, ror #10
 1ec:	00000004 	andeq	r0, r0, r4
	...
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	528b0002 	addpl	r0, fp, #2
 200:	00040000 	andeq	r0, r4, r0
 204:	00000000 	andeq	r0, r0, r0
 208:	0002b564 	andeq	fp, r2, r4, ror #10
 20c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	53c30002 	bicpl	r0, r3, #2
 220:	00040000 	andeq	r0, r4, r0
 224:	00000000 	andeq	r0, r0, r0
 228:	0002b610 	andeq	fp, r2, r0, lsl r6
 22c:	00000120 	andeq	r0, r0, r0, lsr #2
	...
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	551f0002 	ldrpl	r0, [pc, #-2]	; 242 <_start-0xfdbe>
 240:	00040000 	andeq	r0, r4, r0
 244:	00000000 	andeq	r0, r0, r0
 248:	0002b730 	andeq	fp, r2, r0, lsr r7
 24c:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	565c0002 	ldrbpl	r0, [ip], -r2
 260:	00040000 	andeq	r0, r4, r0
 264:	00000000 	andeq	r0, r0, r0
 268:	0002b84c 	andeq	fp, r2, ip, asr #16
 26c:	00000150 	andeq	r0, r0, r0, asr r1
	...
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	57960002 	ldrpl	r0, [r6, r2]
 280:	00040000 	andeq	r0, r4, r0
 284:	00000000 	andeq	r0, r0, r0
 288:	0002b99c 	muleq	r2, ip, r9
 28c:	00000060 	andeq	r0, r0, r0, rrx
	...
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	58520002 	ldmdapl	r2, {r1}^
 2a0:	00040000 	andeq	r0, r4, r0
 2a4:	00000000 	andeq	r0, r0, r0
 2a8:	0002b9fc 	strdeq	fp, [r2], -ip
 2ac:	000000cc 	andeq	r0, r0, ip, asr #1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000001dc 	ldrdeq	r0, [r0], -ip
       4:	00e30003 	rsceq	r0, r3, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
      24:	2f796361 	svccs	0x00796361
      28:	61786548 	cmnvs	r8, r8, asr #10
      2c:	2f686372 	svccs	0x00686372
      30:	2f637273 	svccs	0x00637273
      34:	70736152 	rsbsvc	r6, r3, r2, asr r1
      38:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      3c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
      40:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      44:	534f5452 	movtpl	r5, #62546	; 0xf452
      48:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
      4c:	462f5346 	strtmi	r5, [pc], -r6, asr #6
      50:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      54:	2f534f54 	svccs	0x00534f54
      58:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
      5c:	702f6563 	eorvc	r6, pc, r3, ror #10
      60:	6174726f 	cmnvs	r4, pc, ror #4
      64:	2f656c62 	svccs	0x00656c62
      68:	2f434347 	svccs	0x00434347
      6c:	70736152 	rsbsvc	r6, r3, r2, asr r1
      70:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      74:	00695079 	rsbeq	r5, r9, r9, ror r0
      78:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffc4 <_estack+0xf7fdffc4>
      7c:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
      80:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
      84:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
      88:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      8c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
      90:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
      94:	72656270 	rsbvc	r6, r5, #112, 4
      98:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
      9c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
      a0:	4f545265 	svcmi	0x00545265
      a4:	61462d53 	cmpvs	r6, r3, asr sp
      a8:	2f534674 	svccs	0x00534674
      ac:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      b0:	534f5452 	movtpl	r5, #62546	; 0xf452
      b4:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffd8d <_estack+0xf7fdfd8d>
      b8:	2f656372 	svccs	0x00656372
      bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      c0:	00656475 	rsbeq	r6, r5, r5, ror r4
      c4:	726f7000 	rsbvc	r7, pc, #0
      c8:	00632e74 	rsbeq	r2, r3, r4, ror lr
      cc:	70000001 	andvc	r0, r0, r1
      d0:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
      d4:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
      d8:	00020068 	andeq	r0, r2, r8, rrx
      dc:	726f7000 	rsbvc	r7, pc, #0
      e0:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
      e4:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
      e8:	00000100 	andeq	r0, r0, r0, lsl #2
      ec:	00010500 	andeq	r0, r1, r0, lsl #10
      f0:	00000205 	andeq	r0, r0, r5, lsl #4
      f4:	f7030002 			; <UNDEFINED> instruction: 0xf7030002
      f8:	10050100 	andne	r0, r5, r0, lsl #2
      fc:	4e0e05bd 	mcrmi	5, 0, r0, cr14, cr13, {5}
     100:	056e1205 	strbeq	r1, [lr, #-517]!	; 0xfffffdfb
     104:	10052e2c 	andne	r2, r5, ip, lsr #28
     108:	4b0e052e 	blmi	3815c8 <__bss_end+0x253f68>
     10c:	05681005 	strbeq	r1, [r8, #-5]!
     110:	1205670e 	andne	r6, r5, #3670016	; 0x380000
     114:	2e100567 	cfmsc32cs	mvfx0, mvfx0, mvfx7
     118:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
     11c:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     120:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     124:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     128:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     12c:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     130:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     134:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     138:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     13c:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     140:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     144:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     148:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     14c:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     150:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     154:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     158:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     15c:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     160:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     164:	10056a12 	andne	r6, r5, r2, lsl sl
     168:	4b0e052e 	blmi	381628 <__bss_end+0x253fc8>
     16c:	056a1005 	strbeq	r1, [sl, #-5]!
     170:	21056808 	tstcs	r5, r8, lsl #16
     174:	2e04052e 	cfsh32cs	mvfx0, mvfx4, #30
     178:	054d1105 	strbeq	r1, [sp, #-261]	; 0xfffffefb
     17c:	1005a10e 	andne	sl, r5, lr, lsl #2
     180:	6809056c 	stmdavs	r9, {r2, r3, r5, r6, r8, sl}
     184:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     188:	02051622 	andeq	r1, r5, #35651584	; 0x2200000
     18c:	0905314d 	stmdbeq	r5, {r0, r2, r3, r6, r8, ip, sp}
     190:	2f010531 	svccs	0x00010531
     194:	0a034d4e 	beq	d36d4 <ramdisk+0xa607c>
     198:	9f020582 	svcls	0x00020582
     19c:	31070531 	tstcc	r7, r1, lsr r5
     1a0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1a4:	05884b01 	streq	r4, [r8, #2817]	; 0xb01
     1a8:	02056b11 	andeq	r6, r5, #17408	; 0x4400
     1ac:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
     1b0:	0d053007 	stceq	0, cr3, [r5, #-28]	; 0xffffffe4
     1b4:	4b07052e 	blmi	1c1674 <__bss_end+0x94014>
     1b8:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1bc:	0d054b07 	vstreq	d4, [r5, #-28]	; 0xffffffe4
     1c0:	4b07052e 	blmi	1c1680 <__bss_end+0x94020>
     1c4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1c8:	0d054b07 	vstreq	d4, [r5, #-28]	; 0xffffffe4
     1cc:	4b07052e 	blmi	1c168c <__bss_end+0x9402c>
     1d0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1d4:	4c844c02 	stcmi	12, cr4, [r4], {2}
     1d8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     1dc:	0101000e 	tsteq	r1, lr
     1e0:	000000e9 	andeq	r0, r0, r9, ror #1
     1e4:	007d0003 	rsbseq	r0, sp, r3
     1e8:	01020000 	mrseq	r0, (UNDEF: 2)
     1ec:	000d0efb 	strdeq	r0, [sp], -fp
     1f0:	01010101 	tsteq	r1, r1, lsl #2
     1f4:	01000000 	mrseq	r0, (UNDEF: 0)
     1f8:	2f010000 	svccs	0x00010000
     1fc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     200:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
     204:	2f796361 	svccs	0x00796361
     208:	61786548 	cmnvs	r8, r8, asr #10
     20c:	2f686372 	svccs	0x00686372
     210:	2f637273 	svccs	0x00637273
     214:	70736152 	rsbsvc	r6, r3, r2, asr r1
     218:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     21c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     220:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     224:	534f5452 	movtpl	r5, #62546	; 0xf452
     228:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
     22c:	462f5346 	strtmi	r5, [pc], -r6, asr #6
     230:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     234:	2f534f54 	svccs	0x00534f54
     238:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     23c:	702f6563 	eorvc	r6, pc, r3, ror #10
     240:	6174726f 	cmnvs	r4, pc, ror #4
     244:	2f656c62 	svccs	0x00656c62
     248:	2f434347 	svccs	0x00434347
     24c:	70736152 	rsbsvc	r6, r3, r2, asr r1
     250:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     254:	00695079 	rsbeq	r5, r9, r9, ror r0
     258:	726f7000 	rsbvc	r7, pc, #0
     25c:	72736974 	rsbsvc	r6, r3, #116, 18	; 0x1d0000
     260:	0100632e 	tsteq	r0, lr, lsr #6
     264:	05000000 	streq	r0, [r0, #-0]
     268:	02050001 	andeq	r0, r5, #1
     26c:	00020344 	andeq	r0, r2, r4, asr #6
     270:	0100f503 	tsteq	r0, r3, lsl #10	; <UNPREDICTABLE>
     274:	05520c05 	ldrbeq	r0, [r2, #-3077]	; 0xfffff3fb
     278:	2f2fa002 	svccs	0x002fa002
     27c:	13240234 			; <UNDEFINED> instruction: 0x13240234
     280:	036c0105 	cmneq	ip, #1073741825	; 0x40000001
     284:	0205d60e 	andeq	sp, r5, #14680064	; 0xe00000
     288:	2c023116 	stfcss	f3, [r2], {22}
     28c:	01053115 	tsteq	r5, r5, lsl r1
     290:	05132402 	ldreq	r2, [r3, #-1026]	; 0xfffffbfe
     294:	6616031c 			; <UNDEFINED> instruction: 0x6616031c
     298:	02130205 	andseq	r0, r3, #1342177280	; 0x50000000
     29c:	052f132c 	streq	r1, [pc, #-812]!	; ffffff78 <_estack+0xf7fdff78>
     2a0:	13240201 			; <UNDEFINED> instruction: 0x13240201
     2a4:	05662a03 	strbeq	r2, [r6, #-2563]!	; 0xfffff5fd
     2a8:	13054c02 	movwne	r4, #23554	; 0x5c02
     2ac:	059e0a03 	ldreq	r0, [lr, #2563]	; 0xa03
     2b0:	05a19f01 	streq	r9, [r1, #3841]!	; 0xf01
     2b4:	04054b18 	streq	r4, [r5], #-2840	; 0xfffff4e8
     2b8:	4d14054a 	cfldr32mi	mvfx0, [r4, #-296]	; 0xfffffed8
     2bc:	05a21905 	streq	r1, [r2, #2309]!	; 0x905
     2c0:	04054a05 	streq	r4, [r5], #-2565	; 0xfffff5fb
     2c4:	a601054d 	strge	r0, [r1], -sp, asr #10
     2c8:	01000e02 	tsteq	r0, r2, lsl #28
     2cc:	0002fe01 	andeq	pc, r2, r1, lsl #28
     2d0:	35000300 	strcc	r0, [r0, #-768]	; 0xfffffd00
     2d4:	02000001 	andeq	r0, r0, #1
     2d8:	0d0efb01 	vstreq	d15, [lr, #-4]
     2dc:	01010100 	mrseq	r0, (UNDEF: 17)
     2e0:	00000001 	andeq	r0, r0, r1
     2e4:	01000001 	tsteq	r0, r1
     2e8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 234 <_start-0xfdcc>
     2ec:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     2f0:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     2f4:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     2f8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     2fc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     300:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     304:	72656270 	rsbvc	r6, r5, #112, 4
     308:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     30c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     310:	4f545265 	svcmi	0x00545265
     314:	61462d53 	cmpvs	r6, r3, asr sp
     318:	2f534674 	svccs	0x00534674
     31c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     320:	534f5452 	movtpl	r5, #62546	; 0xf452
     324:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffffd <_estack+0xf7fdfffd>
     328:	00656372 	rsbeq	r6, r5, r2, ror r3
     32c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 278 <_start-0xfd88>
     330:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     334:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     338:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     33c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     340:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     344:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     348:	72656270 	rsbvc	r6, r5, #112, 4
     34c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     350:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     354:	4f545265 	svcmi	0x00545265
     358:	61462d53 	cmpvs	r6, r3, asr sp
     35c:	2f534674 	svccs	0x00534674
     360:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     364:	534f5452 	movtpl	r5, #62546	; 0xf452
     368:	756f532f 	strbvc	r5, [pc, #-815]!	; 41 <_start-0xffbf>
     36c:	2f656372 	svccs	0x00656372
     370:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     374:	00656475 	rsbeq	r6, r5, r5, ror r4
     378:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2c4 <_start-0xfd3c>
     37c:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     380:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     384:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     388:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     38c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     390:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     394:	72656270 	rsbvc	r6, r5, #112, 4
     398:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     39c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     3a0:	4f545265 	svcmi	0x00545265
     3a4:	61462d53 	cmpvs	r6, r3, asr sp
     3a8:	2f534674 	svccs	0x00534674
     3ac:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     3b0:	534f5452 	movtpl	r5, #62546	; 0xf452
     3b4:	756f532f 	strbvc	r5, [pc, #-815]!	; 8d <_start-0xff73>
     3b8:	2f656372 	svccs	0x00656372
     3bc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     3c0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     3c4:	4343472f 	movtmi	r4, #14127	; 0x372f
     3c8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     3cc:	72656270 	rsbvc	r6, r5, #112, 4
     3d0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     3d4:	72630000 	rsbvc	r0, r3, #0
     3d8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     3dc:	632e656e 			; <UNDEFINED> instruction: 0x632e656e
     3e0:	00000100 	andeq	r0, r0, r0, lsl #2
     3e4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     3e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     3ec:	6f700000 	svcvs	0x00700000
     3f0:	616d7472 	smcvs	55106	; 0xd742
     3f4:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     3f8:	00030068 	andeq	r0, r3, r8, rrx
     3fc:	6f726300 	svcvs	0x00726300
     400:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     404:	00682e65 	rsbeq	r2, r8, r5, ror #28
     408:	00000002 	andeq	r0, r0, r2
     40c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     410:	0205f002 	andeq	pc, r5, #2
     414:	018a0300 	orreq	r0, sl, r0, lsl #6
     418:	bf1e0501 	svclt	0x001e0501
     41c:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
     420:	05056a1a 	streq	r6, [r5, #-2586]	; 0xfffff5e6
     424:	4c17054a 	cfldr32mi	mvfx0, [r7], {74}	; 0x4a
     428:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
     42c:	0f053205 	svceq	0x00053205
     430:	4e180568 	cfmsc32mi	mvfx0, mvfx8, mvfx8
     434:	05671b05 	strbeq	r1, [r7, #-2821]!	; 0xfffff4fb
     438:	24056718 	strcs	r6, [r5], #-1816	; 0xfffff8e8
     43c:	69030567 	stmdbvs	r3, {r0, r1, r2, r5, r6, r8, sl}
     440:	69678783 	stmdbvs	r7!, {r0, r1, r7, r8, r9, sl, pc}^
     444:	04020086 	streq	r0, [r2], #-134	; 0xffffff7a
     448:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     44c:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     450:	02000b05 	andeq	r0, r0, #5120	; 0x1400
     454:	08060304 	stmdaeq	r6, {r2, r8, r9}
     458:	09056a92 	stmdbeq	r5, {r1, r4, r7, r9, fp, sp, lr}
     45c:	2f01054d 	svccs	0x0001054d
     460:	a32405be 			; <UNDEFINED> instruction: 0xa32405be
     464:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
     468:	02056b34 	andeq	r6, r5, #52, 22	; 0xd000
     46c:	1205694a 	andne	r6, r5, #1212416	; 0x128000
     470:	4a040584 	bmi	101a88 <ramdisk+0xd4430>
     474:	056a0305 	strbeq	r0, [sl, #-773]!	; 0xfffffcfb
     478:	03054a61 	movweq	r4, #23137	; 0x5a61
     47c:	5905a44a 	stmdbpl	r5, {r1, r3, r6, sl, sp, pc}
     480:	4a03054a 	bmi	c19b0 <ramdisk+0x94358>
     484:	05850405 	streq	r0, [r5, #1029]	; 0x405
     488:	03056a32 	movweq	r6, #23090	; 0x5a32
     48c:	8401054a 	strhi	r0, [r1], #-1354	; 0xfffffab6
     490:	6a0705da 	bvs	1c1c00 <__bss_end+0x945a0>
     494:	05330305 	ldreq	r0, [r3, #-773]!	; 0xfffffcfb
     498:	1405a024 	strne	sl, [r5], #-36	; 0xffffffdc
     49c:	4b04054a 	blmi	1019cc <ramdisk+0xd4374>
     4a0:	a0840305 	addge	r0, r4, r5, lsl #6
     4a4:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     4a8:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     4ac:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     4b0:	03060905 	movweq	r0, #26885	; 0x6905
     4b4:	05900873 	ldreq	r0, [r0, #2163]	; 0x873
     4b8:	01054a07 	tsteq	r5, r7, lsl #20
     4bc:	da4a0f03 	ble	12840d0 <__bss_end+0x1156a70>
     4c0:	05691105 	strbeq	r1, [r9, #-261]!	; 0xfffffefb
     4c4:	0f054a25 	svceq	0x00054a25
     4c8:	4b070566 	blmi	1c1a68 <__bss_end+0x94408>
     4cc:	05301605 	ldreq	r1, [r0, #-1541]!	; 0xfffff9fb
     4d0:	1b059f0f 	blne	168114 <__bss_end+0x3aab4>
     4d4:	4a0505a1 	bmi	141b60 <__bss_end+0x14500>
     4d8:	05500b05 	ldrbeq	r0, [r0, #-2821]	; 0xfffff4fb
     4dc:	2305671b 	movwcs	r6, #22299	; 0x571b
     4e0:	6a080583 	bvs	201af4 <__bss_end+0xd4494>
     4e4:	05301b05 	ldreq	r1, [r0, #-2821]!	; 0xfffff4fb
     4e8:	1e05660b 	cfmadd32ne	mvax0, mvfx6, mvfx5, mvfx11
     4ec:	4a1c054c 	bmi	701a24 <__bss_end+0x5d43c4>
     4f0:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     4f4:	04054d05 	streq	r4, [r5], #-3333	; 0xfffff2fb
     4f8:	a5050531 	strge	r0, [r5, #-1329]	; 0xfffffacf
     4fc:	05851f05 	streq	r1, [r5, #3845]	; 0xf05
     500:	06054a07 	streq	r4, [r5], -r7, lsl #20
     504:	8504054c 	strhi	r0, [r4, #-1356]	; 0xfffffab4
     508:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     50c:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     510:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     514:	03060a05 	movweq	r0, #27141	; 0x6a05
     518:	05900865 	ldreq	r0, [r0, #2149]	; 0x865
     51c:	09056608 	stmdbeq	r5, {r3, r9, sl, sp, lr}
     520:	054a6e03 	strbeq	r6, [sl, #-3587]	; 0xfffff1fd
     524:	11054a07 	tstne	r5, r7, lsl #20
     528:	054a3103 	strbeq	r3, [sl, #-259]	; 0xfffffefd
     52c:	40088301 	andmi	r8, r8, r1, lsl #6
     530:	31680205 	cmncc	r8, r5, lsl #4
     534:	05310705 	ldreq	r0, [r1, #-1797]!	; 0xfffff8fb
     538:	05053023 	streq	r3, [r5, #-35]	; 0xffffffdd
     53c:	4f03054a 	svcmi	0x0003054a
     540:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
     544:	0807059e 	stmdaeq	r7, {r1, r2, r3, r4, r7, r8, sl}
     548:	03020520 	movweq	r0, #9504	; 0x2520
     54c:	02004a0c 	andeq	r4, r0, #12, 20	; 0xc000
     550:	02060104 	andeq	r0, r6, #4, 2
     554:	02001228 	andeq	r1, r0, #40, 4	; 0x80000002
     558:	059e0304 	ldreq	r0, [lr, #772]	; 0x304
     55c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
     560:	05a10603 	streq	r0, [r1, #1539]!	; 0x603
     564:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
     568:	16059e03 	strne	r9, [r5], -r3, lsl #28
     56c:	03040200 	movweq	r0, #16896	; 0x4200
     570:	0002054a 	andeq	r0, r2, sl, asr #10
     574:	68030402 	stmdavs	r3, {r1, sl}
     578:	74030405 	strvc	r0, [r3], #-1029	; 0xfffffbfb
     57c:	0301052e 	movweq	r0, #5422	; 0x152e
     580:	05a22e0d 	streq	r2, [r2, #3597]!	; 0xe0d
     584:	02056912 	andeq	r6, r5, #294912	; 0x48000
     588:	0003054a 	andeq	r0, r3, sl, asr #10
     58c:	30030402 	andcc	r0, r3, r2, lsl #8
     590:	02004f05 	andeq	r4, r0, #5, 30
     594:	1e080304 	cdpne	3, 0, cr0, cr8, cr4, {0}
     598:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
     59c:	6b660104 	blvs	19809b4 <__bss_end+0x1853354>
     5a0:	19054b4b 	stmdbne	r5, {r0, r1, r3, r6, r8, r9, fp, lr}
     5a4:	6721054e 	strvs	r0, [r1, -lr, asr #10]!
     5a8:	08670105 	stmdaeq	r7!, {r0, r2, r8}^
     5ac:	89220524 	stmdbhi	r2!, {r2, r5, r8, sl}
     5b0:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     5b4:	05834b02 	streq	r4, [r3, #2818]	; 0xb02
     5b8:	3705a015 	smladcc	r5, r5, r0, sl
     5bc:	6604054a 	strvs	r0, [r4], -sl, asr #10
     5c0:	6a4c0b05 	bvs	13031dc <__bss_end+0x11d5b7c>
     5c4:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
     5c8:	0a022f01 	beq	8c1d4 <ramdisk+0x5eb7c>
     5cc:	ff010100 			; <UNDEFINED> instruction: 0xff010100
     5d0:	03000001 	movweq	r0, #1
     5d4:	00012300 	andeq	r2, r1, r0, lsl #6
     5d8:	fb010200 	blx	40de2 <ramdisk+0x1378a>
     5dc:	01000d0e 	tsteq	r0, lr, lsl #26
     5e0:	00010101 	andeq	r0, r1, r1, lsl #2
     5e4:	00010000 	andeq	r0, r1, r0
     5e8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     5ec:	2f656d6f 	svccs	0x00656d6f
     5f0:	616e756c 	cmnvs	lr, ip, ror #10
     5f4:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
     5f8:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
     5fc:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
     600:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
     604:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     608:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     60c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     610:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     614:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     618:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
     61c:	72462f53 	subvc	r2, r6, #332	; 0x14c
     620:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     624:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     628:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     62c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     630:	2f656d6f 	svccs	0x00656d6f
     634:	616e756c 	cmnvs	lr, ip, ror #10
     638:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
     63c:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
     640:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
     644:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
     648:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     64c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     650:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     654:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     658:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     65c:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
     660:	72462f53 	subvc	r2, r6, #332	; 0x14c
     664:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     668:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     66c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     670:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     674:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     678:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     67c:	2f656d6f 	svccs	0x00656d6f
     680:	616e756c 	cmnvs	lr, ip, ror #10
     684:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
     688:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
     68c:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
     690:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
     694:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     698:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     69c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     6a0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     6a4:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     6a8:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
     6ac:	72462f53 	subvc	r2, r6, #332	; 0x14c
     6b0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     6b4:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     6b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     6bc:	6f702f65 	svcvs	0x00702f65
     6c0:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     6c4:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     6c8:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     6cc:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     6d0:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     6d4:	00006950 	andeq	r6, r0, r0, asr r9
     6d8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     6dc:	0100632e 	tsteq	r0, lr, lsr #6
     6e0:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     6e4:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     6e8:	00000200 	andeq	r0, r0, r0, lsl #4
     6ec:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     6f0:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     6f4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     6f8:	00000003 	andeq	r0, r0, r3
     6fc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     700:	020d5402 	andeq	r5, sp, #33554432	; 0x2000000
     704:	00cc0300 	sbceq	r0, ip, r0, lsl #6
     708:	86240501 	strthi	r0, [r4], -r1, lsl #10
     70c:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     710:	2c054e1e 	stccs	14, cr4, [r5], {30}
     714:	4a1a056a 	bmi	681cc4 <__bss_end+0x554664>
     718:	054b3005 	strbeq	r3, [fp, #-5]
     71c:	1a054a1e 	bne	152f9c <__bss_end+0x2593c>
     720:	6701054c 	strvs	r0, [r1, -ip, asr #10]
     724:	84160586 	ldrhi	r0, [r6], #-1414	; 0xfffffa7a
     728:	86670105 	strbthi	r0, [r7], -r5, lsl #2
     72c:	05a50a05 	streq	r0, [r5, #2565]!	; 0xa05
     730:	18056821 	stmdane	r5, {r0, r5, fp, sp, lr}
     734:	4b24054a 	blmi	901c64 <__bss_end+0x7d4604>
     738:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
     73c:	1e054b09 	vmlane.f64	d4, d5, d9
     740:	4b12054a 	blmi	481c70 <__bss_end+0x354610>
     744:	691d0567 	ldmdbvs	sp, {r0, r1, r2, r5, r6, r8, sl}
     748:	05680a05 	strbeq	r0, [r8, #-2565]!	; 0xfffff5fb
     74c:	01054a1d 	tsteq	r5, sp, lsl sl
     750:	14058667 	strne	r8, [r5], #-1639	; 0xfffff999
     754:	030405a3 	movweq	r0, #17827	; 0x45a3
     758:	0e056609 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx9
     75c:	03130568 	tsteq	r3, #104, 10	; 0x1a000000
     760:	03058214 	movweq	r8, #21012	; 0x5214
     764:	007c0566 	rsbseq	r0, ip, r6, ror #10
     768:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
     76c:	02004605 	andeq	r4, r0, #5242880	; 0x500000
     770:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
     774:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
     778:	03054a01 	movweq	r4, #23041	; 0x5a01
     77c:	01040200 	mrseq	r0, R12_usr
     780:	6d24052e 	cfstr32vs	mvfx0, [r4, #-184]!	; 0xffffff48
     784:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     788:	24054b0f 	strcs	r4, [r5], #-2831	; 0xfffff4f1
     78c:	4b1c054a 	blmi	701cbc <__bss_end+0x5d465c>
     790:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
     794:	0a056a1d 	beq	15b010 <__bss_end+0x2d9b0>
     798:	4a1d0568 	bmi	741d40 <__bss_end+0x6146e0>
     79c:	86670105 	strbthi	r0, [r7], -r5, lsl #2
     7a0:	05851005 	streq	r1, [r5, #5]
     7a4:	25054a35 	strcs	r4, [r5, #-2613]	; 0xfffff5cb
     7a8:	2f10054a 	svccs	0x0010054a
     7ac:	054a3505 	strbeq	r3, [sl, #-1285]	; 0xfffffafb
     7b0:	09054a25 	stmdbeq	r5, {r0, r2, r5, r9, fp, lr}
     7b4:	690c0532 	stmdbvs	ip, {r1, r4, r5, r8, sl}
     7b8:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
     7bc:	13056823 	movwne	r6, #22563	; 0x5823
     7c0:	4d1e054a 	cfldr32mi	mvfx0, [lr, #-296]	; 0xfffffed8
     7c4:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
     7c8:	01054a1d 	tsteq	r5, sp, lsl sl
     7cc:	00080267 	andeq	r0, r8, r7, ror #4
     7d0:	05410101 	strbeq	r0, [r1, #-257]	; 0xfffffeff
     7d4:	00030000 	andeq	r0, r3, r0
     7d8:	00000164 	andeq	r0, r0, r4, ror #2
     7dc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     7e0:	0101000d 	tsteq	r1, sp
     7e4:	00000101 	andeq	r0, r0, r1, lsl #2
     7e8:	00000100 	andeq	r0, r0, r0, lsl #2
     7ec:	6f682f01 	svcvs	0x00682f01
     7f0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 644 <_start-0xf9bc>
     7f4:	63616e75 	cmnvs	r1, #1872	; 0x750
     7f8:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
     7fc:	63726178 	cmnvs	r2, #120, 2
     800:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
     804:	61522f63 	cmpvs	r2, r3, ror #30
     808:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     80c:	50797272 	rsbspl	r7, r9, r2, ror r2
     810:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     814:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     818:	462d534f 	strtmi	r5, [sp], -pc, asr #6
     81c:	53467461 	movtpl	r7, #25697	; 0x6461
     820:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     824:	4f545265 	svcmi	0x00545265
     828:	6f532f53 	svcvs	0x00532f53
     82c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     830:	73752f00 	cmnvc	r5, #0, 30
     834:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     838:	63672f62 	cmnvs	r7, #392	; 0x188
     83c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     840:	6f6e2d6d 	svcvs	0x006e2d6d
     844:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     848:	2f696261 	svccs	0x00696261
     84c:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
     850:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     854:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     858:	2f006564 	svccs	0x00006564
     85c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     860:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
     864:	2f796361 	svccs	0x00796361
     868:	61786548 	cmnvs	r8, r8, asr #10
     86c:	2f686372 	svccs	0x00686372
     870:	2f637273 	svccs	0x00637273
     874:	70736152 	rsbsvc	r6, r3, r2, asr r1
     878:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     87c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     880:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     884:	534f5452 	movtpl	r5, #62546	; 0xf452
     888:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
     88c:	462f5346 	strtmi	r5, [pc], -r6, asr #6
     890:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     894:	2f534f54 	svccs	0x00534f54
     898:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     89c:	702f6563 	eorvc	r6, pc, r3, ror #10
     8a0:	6174726f 	cmnvs	r4, pc, ror #4
     8a4:	2f656c62 	svccs	0x00656c62
     8a8:	2f434347 	svccs	0x00434347
     8ac:	70736152 	rsbsvc	r6, r3, r2, asr r1
     8b0:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     8b4:	00695079 	rsbeq	r5, r9, r9, ror r0
     8b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 804 <_start-0xf7fc>
     8bc:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     8c0:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     8c4:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     8c8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     8cc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     8d0:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     8d4:	72656270 	rsbvc	r6, r5, #112, 4
     8d8:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     8dc:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     8e0:	4f545265 	svcmi	0x00545265
     8e4:	61462d53 	cmpvs	r6, r3, asr sp
     8e8:	2f534674 	svccs	0x00534674
     8ec:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     8f0:	534f5452 	movtpl	r5, #62546	; 0xf452
     8f4:	756f532f 	strbvc	r5, [pc, #-815]!	; 5cd <_start-0xfa33>
     8f8:	2f656372 	svccs	0x00656372
     8fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     900:	00656475 	rsbeq	r6, r5, r5, ror r4
     904:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
     908:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
     90c:	00000100 	andeq	r0, r0, r0, lsl #2
     910:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
     914:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     918:	00000200 	andeq	r0, r0, r0, lsl #4
     91c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     920:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     924:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     928:	6c000003 	stcvs	0, cr0, [r0], {3}
     92c:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     930:	00040068 	andeq	r0, r4, r8, rrx
     934:	73617400 	cmnvc	r1, #0, 8
     938:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     93c:	00000004 	andeq	r0, r0, r4
     940:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     944:	020ff002 	andeq	pc, pc, #2
     948:	02970300 	addseq	r0, r7, #0, 6
     94c:	a1020501 	tstge	r2, r1, lsl #10
     950:	05301c05 	ldreq	r1, [r0, #-3077]!	; 0xfffff3fb
     954:	44054a30 	strmi	r4, [r5], #-2608	; 0xfffff5d0
     958:	4a3b054a 	bmi	ec1e88 <__bss_end+0xd94828>
     95c:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
     960:	1e052e13 	mcrne	14, 0, r2, cr5, cr3, {0}
     964:	671f054b 	ldrvs	r0, [pc, -fp, asr #10]
     968:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
     96c:	36054b20 	strcc	r4, [r5], -r0, lsr #22
     970:	4a41054a 	bmi	1041ea0 <__bss_end+0xf14840>
     974:	052e6c05 	streq	r6, [lr, #-3077]!	; 0xfffff3fb
     978:	29054a63 	stmdbcs	r5, {r0, r1, r5, r6, r9, fp, lr}
     97c:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
     980:	674b1405 	strbvs	r1, [fp, -r5, lsl #8]
     984:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     988:	06056d08 	streq	r6, [r5], -r8, lsl #26
     98c:	4c23054a 	cfstr32mi	mvfx0, [r3], #-296	; 0xfffffed8
     990:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     994:	06056607 	streq	r6, [r5], -r7, lsl #12
     998:	5104054c 	tstpl	r4, ip, asr #10
     99c:	85020583 	strhi	r0, [r2, #-1411]	; 0xfffffa7d
     9a0:	05320905 	ldreq	r0, [r2, #-2309]!	; 0xfffff6fb
     9a4:	056a2f01 	strbeq	r2, [sl, #-3841]!	; 0xfffff0ff
     9a8:	0405d90e 	streq	sp, [r5], #-2318	; 0xfffff6f2
     9ac:	681d0551 	ldmdavs	sp, {r0, r4, r6, r8, sl}
     9b0:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
     9b4:	16056a33 			; <UNDEFINED> instruction: 0x16056a33
     9b8:	4c2b0566 	cfstr32mi	mvfx0, [fp], #-408	; 0xfffffe68
     9bc:	05661705 	strbeq	r1, [r6, #-1797]!	; 0xfffff8fb
     9c0:	06054b12 			; <UNDEFINED> instruction: 0x06054b12
     9c4:	4e1a054a 	cfmac32mi	mvfx0, mvfx10, mvfx10
     9c8:	05671c05 	strbeq	r1, [r7, #-3077]!	; 0xfffff3fb
     9cc:	0d056705 	stceq	7, cr6, [r5, #-20]	; 0xffffffec
     9d0:	6b05056e 	blvs	141f90 <__bss_end+0x14930>
     9d4:	05510905 	ldrbeq	r0, [r1, #-2309]	; 0xfffff6fb
     9d8:	d0032f01 	andle	r2, r3, r1, lsl #30
     9dc:	16056601 	strne	r6, [r5], -r1, lsl #12
     9e0:	030305d7 	movweq	r0, #13783	; 0x35d7
     9e4:	0f054a0b 	svceq	0x00054a0b
     9e8:	4a2c0532 	bmi	b01eb8 <__bss_end+0x9d4858>
     9ec:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     9f0:	09054d05 	stmdbeq	r5, {r0, r2, r8, sl, fp, lr}
     9f4:	4a070586 	bmi	1c2014 <__bss_end+0x949b4>
     9f8:	054c2405 	strbeq	r2, [ip, #-1029]	; 0xfffffbfb
     9fc:	08054a0a 	stmdaeq	r5, {r1, r3, r9, fp, lr}
     a00:	50070566 	andpl	r0, r7, r6, ror #10
     a04:	05320505 	ldreq	r0, [r2, #-1285]!	; 0xfffffafb
     a08:	1605320c 	strne	r3, [r5], -ip, lsl #4
     a0c:	2e07054e 	cfsh32cs	mvfx0, mvfx7, #46
     a10:	054e0605 	strbeq	r0, [lr, #-1541]	; 0xfffff9fb
     a14:	0c05330d 	stceq	3, cr3, [r5], {13}
     a18:	6a06054c 	bvs	181f50 <__bss_end+0x548f0>
     a1c:	05671405 	strbeq	r1, [r7, #-1029]!	; 0xfffffbfb
     a20:	2f334e03 	svccs	0x00334e03
     a24:	01040200 	mrseq	r0, R12_usr
     a28:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     a2c:	00660304 	rsbeq	r0, r6, r4, lsl #6
     a30:	82040402 	andhi	r0, r4, #33554432	; 0x2000000
     a34:	06040200 	streq	r0, [r4], -r0, lsl #4
     a38:	00070566 	andeq	r0, r7, r6, ror #10
     a3c:	06060402 	streq	r0, [r6], -r2, lsl #8
     a40:	00050531 	andeq	r0, r5, r1, lsr r5
     a44:	ba060402 	blt	181a54 <__bss_end+0x543f4>
     a48:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
     a4c:	1c056606 	stcne	6, cr6, [r5], {6}
     a50:	4a05054d 	bmi	141f8c <__bss_end+0x1492c>
     a54:	51090589 	smlabbpl	r9, r9, r5, r0
     a58:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     a5c:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
     a60:	4b0e0550 	blmi	381fa8 <__bss_end+0x254948>
     a64:	05500405 	ldrbeq	r0, [r0, #-1029]	; 0xfffffbfb
     a68:	0b054b0d 	bleq	1536a4 <__bss_end+0x26044>
     a6c:	00010533 	andeq	r0, r1, r3, lsr r5
     a70:	31030402 	tstcc	r3, r2, lsl #8
     a74:	6601d203 	strvs	sp, [r1], -r3, lsl #4
     a78:	0c031905 			; <UNDEFINED> instruction: 0x0c031905
     a7c:	4c0e05d6 	cfstr32mi	mvfx0, [lr], {214}	; 0xd6
     a80:	054a2b05 	strbeq	r2, [sl, #-2821]	; 0xfffff4fb
     a84:	04054a05 	streq	r4, [r5], #-2565	; 0xfffff5fb
     a88:	860f054e 	strhi	r0, [pc], -lr, asr #10
     a8c:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     a90:	07054c09 	streq	r4, [r5, -r9, lsl #24]
     a94:	4c24054a 	cfstr32mi	mvfx0, [r4], #-296	; 0xfffffed8
     a98:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
     a9c:	09056608 	stmdbeq	r5, {r3, r9, sl, sp, lr}
     aa0:	6823054e 	stmdavs	r3!, {r1, r2, r3, r6, r8, sl}
     aa4:	09031005 	stmdbeq	r3, {r0, r2, ip}
     aa8:	4a050582 	bmi	1420b8 <__bss_end+0x14a58>
     aac:	6b690c05 	blvs	1a43ac8 <__bss_end+0x1916468>
     ab0:	054f0905 	strbeq	r0, [pc, #-2309]	; 1b3 <_start-0xfe4d>
     ab4:	056a2f01 	strbeq	r2, [sl, #-3841]!	; 0xfffff0ff
     ab8:	0305d716 	movweq	sp, #22294	; 0x5716
     abc:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
     ac0:	0605320f 	streq	r3, [r5], -pc, lsl #4
     ac4:	4d1c054a 	cfldr32mi	mvfx0, [ip, #-296]	; 0xfffffed8
     ac8:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     acc:	11056807 	tstne	r5, r7, lsl #16
     ad0:	4a06056b 	bmi	182084 <__bss_end+0x54a24>
     ad4:	0d030a05 	vstreq	s0, [r3, #-20]	; 0xffffffec
     ad8:	4a080566 	bmi	202078 <__bss_end+0xd4a18>
     adc:	054c2505 	strbeq	r2, [ip, #-1285]	; 0xfffffafb
     ae0:	09054a0b 	stmdbeq	r5, {r0, r1, r3, r9, fp, lr}
     ae4:	4c080566 	cfstr32mi	mvfx0, [r8], {102}	; 0x66
     ae8:	0a031a05 	beq	c7304 <ramdisk+0x99cac>
     aec:	6a0a054a 	bvs	28201c <__bss_end+0x1549bc>
     af0:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     af4:	0b054e25 	bleq	154390 <__bss_end+0x26d30>
     af8:	6609054a 	strvs	r0, [r9], -sl, asr #10
     afc:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
     b00:	0c053305 	stceq	3, cr3, [r5], {5}
     b04:	4e16052f 	cfmul64mi	mvdx0, mvdx6, mvdx15
     b08:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     b0c:	0d054e06 	stceq	14, cr4, [r5, #-24]	; 0xffffffe8
     b10:	4c0c0530 	cfstr32mi	mvfx0, [ip], {48}	; 0x30
     b14:	056a0605 	strbeq	r0, [sl, #-1541]!	; 0xfffff9fb
     b18:	03056714 	movweq	r6, #22292	; 0x5714
     b1c:	002f334e 	eoreq	r3, pc, lr, asr #6
     b20:	06010402 	streq	r0, [r1], -r2, lsl #8
     b24:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     b28:	02006603 	andeq	r6, r0, #3145728	; 0x300000
     b2c:	00820404 	addeq	r0, r2, r4, lsl #8
     b30:	66060402 	strvs	r0, [r6], -r2, lsl #8
     b34:	02000705 	andeq	r0, r0, #1310720	; 0x140000
     b38:	31060604 	tstcc	r6, r4, lsl #12
     b3c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
     b40:	05ba0604 	ldreq	r0, [sl, #1540]!	; 0x604
     b44:	06054c08 	streq	r4, [r5], -r8, lsl #24
     b48:	031c0566 	tsteq	ip, #427819008	; 0x19800000
     b4c:	05054a11 	streq	r4, [r5, #-2577]	; 0xfffff5ef
     b50:	0905834a 	stmdbeq	r5, {r1, r3, r6, r8, r9, pc}
     b54:	4a07054b 	bmi	1c2088 <__bss_end+0x94a28>
     b58:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
     b5c:	0e055005 	cdpeq	0, 0, cr5, cr5, cr5, {0}
     b60:	4f04054b 	svcmi	0x0004054b
     b64:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
     b68:	0105300b 	tsteq	r5, fp
     b6c:	03040200 	movweq	r0, #16896	; 0x4200
     b70:	19056a31 	stmdbne	r5, {r0, r4, r5, r9, fp, sp, lr}
     b74:	4d0e05c1 	cfstr32mi	mvfx0, [lr, #-772]	; 0xfffffcfc
     b78:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     b7c:	0f054e04 	svceq	0x00054e04
     b80:	4a040567 	bmi	102124 <ramdisk+0xd4acc>
     b84:	056b0f05 	strbeq	r0, [fp, #-3845]!	; 0xfffff0fb
     b88:	09054a06 	stmdbeq	r5, {r1, r2, r9, fp, lr}
     b8c:	4a07054c 	bmi	1c20c4 <__bss_end+0x94a64>
     b90:	054c2405 	strbeq	r2, [ip, #-1029]	; 0xfffffbfb
     b94:	08054a0a 	stmdaeq	r5, {r1, r3, r9, fp, lr}
     b98:	4e090566 	cfsh32mi	mvfx0, mvfx9, #54
     b9c:	05682305 	strbeq	r2, [r8, #-773]!	; 0xfffffcfb
     ba0:	82090310 	andhi	r0, r9, #16, 6	; 0x40000000
     ba4:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ba8:	056a690c 	strbeq	r6, [sl, #-2316]!	; 0xfffff6f4
     bac:	01055009 	tsteq	r5, r9
     bb0:	02056a2f 	andeq	r6, r5, #192512	; 0x2f000
     bb4:	2f0c0587 	svccs	0x000c0587
     bb8:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
     bbc:	01053009 	tsteq	r5, r9
     bc0:	0b056a2f 	bleq	15b484 <__bss_end+0x2de24>
     bc4:	68090587 	stmdavs	r9, {r0, r1, r2, r7, r8, sl}
     bc8:	862f0105 	strthi	r0, [pc], -r5, lsl #2
     bcc:	05871405 	streq	r1, [r7, #1029]	; 0x405
     bd0:	054b4a02 	strbeq	r4, [fp, #-2562]	; 0xfffff5fe
     bd4:	22034b01 	andcs	r4, r3, #1024	; 0x400
     bd8:	bb0d0566 	bllt	342178 <__bss_end+0x214b18>
     bdc:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
     be0:	4a0d0309 	bmi	34180c <__bss_end+0x2141ac>
     be4:	05681d05 	strbeq	r1, [r8, #-3333]!	; 0xfffff2fb
     be8:	03054a4d 	movweq	r4, #23117	; 0x5a4d
     bec:	6716054a 	ldrvs	r0, [r6, -sl, asr #10]
     bf0:	054a2005 	strbeq	r2, [sl, #-5]
     bf4:	0e054a16 			; <UNDEFINED> instruction: 0x0e054a16
     bf8:	4a240567 	bmi	90219c <__bss_end+0x7d4b3c>
     bfc:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     c00:	17054c20 	strne	r4, [r5, -r0, lsr #24]
     c04:	6b1d054a 	blvs	742134 <__bss_end+0x614ad4>
     c08:	054a4e05 	strbeq	r4, [sl, #-3589]	; 0xfffff1fb
     c0c:	17054a03 	strne	r4, [r5, -r3, lsl #20]
     c10:	4a210567 	bmi	8421b4 <__bss_end+0x714b54>
     c14:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     c18:	2405830e 	strcs	r8, [r5], #-782	; 0xfffffcf2
     c1c:	4a05054a 	bmi	14214c <__bss_end+0x14aec>
     c20:	054c2305 	strbeq	r2, [ip, #-773]	; 0xfffffcfb
     c24:	2c054a35 			; <UNDEFINED> instruction: 0x2c054a35
     c28:	4a18054a 	bmi	602158 <__bss_end+0x4d4af8>
     c2c:	054e0d05 	strbeq	r0, [lr, #-3333]	; 0xfffff2fb
     c30:	01054a02 	tsteq	r5, r2, lsl #20
     c34:	0d056a67 	vstreq	s12, [r5, #-412]	; 0xfffffe64
     c38:	4a04059f 	bmi	1022bc <ramdisk+0xd4c64>
     c3c:	054c1705 	strbeq	r1, [ip, #-1797]	; 0xfffff8fb
     c40:	17054a21 	strne	r4, [r5, -r1, lsr #20]
     c44:	670e054a 	strvs	r0, [lr, -sl, asr #10]
     c48:	054a2505 	strbeq	r2, [sl, #-1285]	; 0xfffffafb
     c4c:	21054a05 	tstcs	r5, r5, lsl #20
     c50:	4a18054c 	bmi	602188 <__bss_end+0x4d4b28>
     c54:	054c3205 	strbeq	r3, [ip, #-517]	; 0xfffffdfb
     c58:	03054a54 	movweq	r4, #23124	; 0x5a54
     c5c:	6801054a 	stmdavs	r1, {r1, r3, r6, r8, sl}
     c60:	8902056a 	stmdbhi	r2, {r1, r3, r5, r6, r8, sl}
     c64:	32310805 	eorscc	r0, r1, #327680	; 0x50000
     c68:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     c6c:	09054e23 	stmdbeq	r5, {r0, r1, r5, r9, sl, fp, lr}
     c70:	6607054a 	strvs	r0, [r7], -sl, asr #10
     c74:	054e0605 	strbeq	r0, [lr, #-1541]	; 0xfffff9fb
     c78:	05053110 	streq	r3, [r5, #-272]	; 0xfffffef0
     c7c:	0311054a 	tsteq	r1, #310378496	; 0x12800000
     c80:	08056671 	stmdaeq	r5, {r0, r4, r5, r6, r9, sl, sp, lr}
     c84:	0305054a 	movweq	r0, #21834	; 0x554a
     c88:	14056613 	strne	r6, [r5], #-1555	; 0xfffff9ed
     c8c:	68020532 	stmdavs	r2, {r1, r4, r5, r8, sl}
     c90:	30080531 	andcc	r0, r8, r1, lsr r5
     c94:	4a060530 	bmi	18215c <__bss_end+0x54afc>
     c98:	054c2305 	strbeq	r2, [ip, #-773]	; 0xfffffcfb
     c9c:	07054a09 	streq	r4, [r5, -r9, lsl #20]
     ca0:	4c060566 	cfstr32mi	mvfx0, [r6], {102}	; 0x66
     ca4:	05311005 	ldreq	r1, [r1, #-5]!
     ca8:	11054a05 	tstne	r5, r5, lsl #20
     cac:	05667703 	strbeq	r7, [r6, #-1795]!	; 0xfffff8fd
     cb0:	05054a08 	streq	r4, [r5, #-2568]	; 0xfffff5f8
     cb4:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
     cb8:	02053214 	andeq	r3, r5, #20, 4	; 0x40000001
     cbc:	2f010568 	svccs	0x00010568
     cc0:	8502056a 	strhi	r0, [r2, #-1386]	; 0xfffffa96
     cc4:	052f1605 	streq	r1, [pc, #-1541]!	; 6c7 <_start-0xf939>
     cc8:	0b054a2a 	bleq	153578 <__bss_end+0x25f18>
     ccc:	2f020582 	svccs	0x00020582
     cd0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     cd4:	056a2f01 	strbeq	r2, [sl, #-3841]!	; 0xfffff0ff
     cd8:	29058615 	stmdbcs	r5, {r0, r2, r4, r9, sl, pc}
     cdc:	820a054a 	andhi	r0, sl, #310378496	; 0x12800000
     ce0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     ce4:	05862f01 	streq	r2, [r6, #3841]	; 0xf01
     ce8:	16058502 	strne	r8, [r5], -r2, lsl #10
     cec:	4a34052f 	bmi	d021b0 <__bss_end+0xbd4b50>
     cf0:	054a2a05 	strbeq	r2, [sl, #-2565]	; 0xfffff5fb
     cf4:	0205820b 	andeq	r8, r5, #-1342177280	; 0xb0000000
     cf8:	3009052f 	andcc	r0, r9, pc, lsr #10
     cfc:	6a2f0105 	bvs	bc1118 <__bss_end+0xa93ab8>
     d00:	05861505 	streq	r1, [r6, #1285]	; 0x505
     d04:	29054a33 	stmdbcs	r5, {r0, r1, r4, r5, r9, fp, lr}
     d08:	820a054a 	andhi	r0, sl, #310378496	; 0x12800000
     d0c:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     d10:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     d14:	9e010100 	adflss	f0, f1, f0
     d18:	03000008 	movweq	r0, #8
     d1c:	00018000 	andeq	r8, r1, r0
     d20:	fb010200 	blx	4152a <ramdisk+0x13ed2>
     d24:	01000d0e 	tsteq	r0, lr, lsl #26
     d28:	00010101 	andeq	r0, r1, r1, lsl #2
     d2c:	00010000 	andeq	r0, r1, r0
     d30:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     d34:	2f656d6f 	svccs	0x00656d6f
     d38:	616e756c 	cmnvs	lr, ip, ror #10
     d3c:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
     d40:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
     d44:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
     d48:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
     d4c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     d50:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     d54:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     d58:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     d5c:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     d60:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
     d64:	72462f53 	subvc	r2, r6, #332	; 0x14c
     d68:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     d6c:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     d70:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d74:	752f0065 	strvc	r0, [pc, #-101]!	; d17 <_start-0xf2e9>
     d78:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; bb4 <_start-0xf44c>
     d7c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     d80:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
     d84:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     d88:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     d8c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     d90:	2e30312f 	rsfcssp	f3, f0, #10.0
     d94:	2f312e33 	svccs	0x00312e33
     d98:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     d9c:	00656475 	rsbeq	r6, r5, r5, ror r4
     da0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; cec <_start-0xf314>
     da4:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     da8:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     dac:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     db0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     db4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     db8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     dbc:	72656270 	rsbvc	r6, r5, #112, 4
     dc0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     dc4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     dc8:	4f545265 	svcmi	0x00545265
     dcc:	61462d53 	cmpvs	r6, r3, asr sp
     dd0:	2f534674 	svccs	0x00534674
     dd4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     dd8:	534f5452 	movtpl	r5, #62546	; 0xf452
     ddc:	756f532f 	strbvc	r5, [pc, #-815]!	; ab5 <_start-0xf54b>
     de0:	2f656372 	svccs	0x00656372
     de4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     de8:	00656475 	rsbeq	r6, r5, r5, ror r4
     dec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d38 <_start-0xf2c8>
     df0:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     df4:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     df8:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     dfc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     e00:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     e04:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     e08:	72656270 	rsbvc	r6, r5, #112, 4
     e0c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     e10:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     e14:	4f545265 	svcmi	0x00545265
     e18:	61462d53 	cmpvs	r6, r3, asr sp
     e1c:	2f534674 	svccs	0x00534674
     e20:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     e24:	534f5452 	movtpl	r5, #62546	; 0xf452
     e28:	756f532f 	strbvc	r5, [pc, #-815]!	; b01 <_start-0xf4ff>
     e2c:	2f656372 	svccs	0x00656372
     e30:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     e34:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     e38:	4343472f 	movtmi	r4, #14127	; 0x372f
     e3c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     e40:	72656270 	rsbvc	r6, r5, #112, 4
     e44:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     e48:	61740000 	cmnvs	r4, r0
     e4c:	2e736b73 	vmovcs.s8	r6, d3[7]
     e50:	00010063 	andeq	r0, r1, r3, rrx
     e54:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     e58:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
     e5c:	00020068 	andeq	r0, r2, r8, rrx
     e60:	6f727000 	svcvs	0x00727000
     e64:	6665646a 	strbtvs	r6, [r5], -sl, ror #8
     e68:	00682e73 	rsbeq	r2, r8, r3, ror lr
     e6c:	70000003 	andvc	r0, r0, r3
     e70:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
     e74:	6f726361 	svcvs	0x00726361
     e78:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     e7c:	72460000 	subvc	r0, r6, #0
     e80:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     e84:	682e534f 	stmdavs	lr!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}
     e88:	00000300 	andeq	r0, r0, r0, lsl #6
     e8c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     e90:	0300682e 	movweq	r6, #2094	; 0x82e
     e94:	61740000 	cmnvs	r4, r0
     e98:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     e9c:	00000300 	andeq	r0, r0, r0, lsl #6
     ea0:	00010500 	andeq	r0, r1, r0, lsl #10
     ea4:	1ba00205 	blne	fe8016c0 <_estack+0xf67e16c0>
     ea8:	9b030002 	blls	c0eb8 <ramdisk+0x93860>
     eac:	0d050103 	stfeqs	f0, [r5, #-12]
     eb0:	05f20903 	ldrbeq	r0, [r2, #2307]!	; 0x903
     eb4:	1b05a004 	blne	168ecc <__bss_end+0x3b86c>
     eb8:	05661803 	strbeq	r1, [r6, #-2051]!	; 0xfffff7fd
     ebc:	11054a25 	tstne	r5, r5, lsr #20
     ec0:	4b2c0566 	blmi	b02460 <__bss_end+0x9d4e00>
     ec4:	052e5505 	streq	r5, [lr, #-1285]!	; 0xfffffafb
     ec8:	03052e11 	movweq	r2, #24081	; 0x5e11
     ecc:	052e1403 	streq	r1, [lr, #-1027]!	; 0xfffffbfd
     ed0:	d60c031d 			; <UNDEFINED> instruction: 0xd60c031d
     ed4:	059e1b05 	ldreq	r1, [lr, #2821]	; 0xb05
     ed8:	13055105 	movwne	r5, #20741	; 0x5105
     edc:	6b03056b 	blvs	c2490 <ramdisk+0x94e38>
     ee0:	05301a05 	ldreq	r1, [r0, #-2565]!	; 0xfffff5fb
     ee4:	06059f15 			; <UNDEFINED> instruction: 0x06059f15
     ee8:	4e12054a 	cfmac32mi	mvfx0, mvfx2, mvfx10
     eec:	05682005 	strbeq	r2, [r8, #-5]!
     ef0:	06054a07 	streq	r4, [r5], -r7, lsl #20
     ef4:	521b054f 	andspl	r0, fp, #331350016	; 0x13c00000
     ef8:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     efc:	08054c16 	stmdaeq	r5, {r1, r2, r4, sl, fp, lr}
     f00:	68140566 	ldmdavs	r4, {r1, r2, r5, r6, r8, sl}
     f04:	056d1005 	strbeq	r1, [sp, #-5]!
     f08:	06054a1d 			; <UNDEFINED> instruction: 0x06054a1d
     f0c:	4c21054a 	cfstr32mi	mvfx0, [r1], #-296	; 0xfffffed8
     f10:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     f14:	4a090310 	bmi	241b5c <__bss_end+0x1144fc>
     f18:	00a00405 	adceq	r0, r0, r5, lsl #8
     f1c:	06010402 	streq	r0, [r1], -r2, lsl #8
     f20:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     f24:	0c058203 	sfmeq	f0, 1, [r5], {3}
     f28:	03040200 	movweq	r0, #16896	; 0x4200
     f2c:	05920806 	ldreq	r0, [r2, #2054]	; 0x806
     f30:	04020003 	streq	r0, [r2], #-3
     f34:	0b054e03 	bleq	154748 <__bss_end+0x270e8>
     f38:	4e04054e 	cfsh32mi	mvfx0, mvfx4, #46
     f3c:	05681905 	strbeq	r1, [r8, #-2309]!	; 0xfffff6fb
     f40:	14054a05 	strne	r4, [r5], #-2565	; 0xfffff5fb
     f44:	6606054e 	strvs	r0, [r6], -lr, asr #10
     f48:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     f4c:	01053309 	tsteq	r5, r9, lsl #6
     f50:	0802052f 	stmdaeq	r2, {r0, r1, r2, r3, r5, r8, sl}
     f54:	85030542 	strhi	r0, [r3, #-1346]	; 0xfffffabe
     f58:	05321705 	ldreq	r1, [r2, #-1797]!	; 0xfffff8fb
     f5c:	14054a06 	strne	r4, [r5], #-2566	; 0xfffff5fa
     f60:	4e0c0568 	cfsh32mi	mvfx0, mvfx12, #56
     f64:	01040200 	mrseq	r0, R12_usr
     f68:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     f6c:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
     f70:	0402000a 	streq	r0, [r2], #-10
     f74:	052e0604 	streq	r0, [lr, #-1540]!	; 0xfffff9fc
     f78:	04020004 	streq	r0, [r2], #-4
     f7c:	1d053404 	cfstrsne	mvf3, [r5, #-16]
     f80:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     f84:	00060585 	andeq	r0, r6, r5, lsl #11
     f88:	4a040402 	bmi	101f98 <ramdisk+0xd4940>
     f8c:	054c0505 	strbeq	r0, [ip, #-1285]	; 0xfffffafb
     f90:	05a38504 	streq	r8, [r3, #1284]!	; 0x504
     f94:	0305a210 	movweq	sl, #21008	; 0x5210
     f98:	311905a2 	tstcc	r9, r2, lsr #11
     f9c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     fa0:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
     fa4:	31020568 	tstcc	r2, r8, ror #10
     fa8:	05f21003 	ldrbeq	r1, [r2, #3]!
     fac:	0305a021 	movweq	sl, #20513	; 0x5021
     fb0:	3112054f 	tstcc	r2, pc, asr #10
     fb4:	054a1005 	strbeq	r1, [sl, #-5]
     fb8:	13056815 	movwne	r6, #22549	; 0x5815
     fbc:	4a06054a 	bmi	1824ec <__bss_end+0x54e8c>
     fc0:	05511905 	ldrbeq	r1, [r1, #-2309]	; 0xfffff6fb
     fc4:	40054a07 	andmi	r4, r5, r7, lsl #20
     fc8:	01040200 	mrseq	r0, R12_usr
     fcc:	002f0566 	eoreq	r0, pc, r6, ror #10
     fd0:	4a010402 	bmi	41fe0 <ramdisk+0x14988>
     fd4:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
     fd8:	07056e19 	smladeq	r5, r9, lr, r6
     fdc:	0040054a 	subeq	r0, r0, sl, asr #10
     fe0:	66010402 	strvs	r0, [r1], -r2, lsl #8
     fe4:	02002f05 	andeq	r2, r0, #5, 30
     fe8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     fec:	18056813 	stmdane	r5, {r0, r1, r4, fp, sp, lr}
     ff0:	6806054f 	stmdavs	r6, {r0, r1, r2, r3, r6, r8, sl}
     ff4:	056d3105 	strbeq	r3, [sp, #-261]!	; 0xfffffefb
     ff8:	05674a05 	strbeq	r4, [r7, #-2565]!	; 0xfffff5fb
     ffc:	05054d15 	streq	r4, [r5, #-3349]	; 0xfffff2eb
    1000:	6804054e 	stmdavs	r4, {r1, r2, r3, r6, r8, sl}
    1004:	a6300205 	ldrtge	r0, [r0], -r5, lsl #4
    1008:	05841705 	streq	r1, [r4, #1797]	; 0x705
    100c:	04054d05 	streq	r4, [r5], #-3333	; 0xfffff2fb
    1010:	031e0568 	tsteq	lr, #104, 10	; 0x1a000000
    1014:	11052e0e 	tstne	r5, lr, lsl #28
    1018:	6b31054a 	blvs	c42548 <__bss_end+0xb14ee8>
    101c:	674a0505 	strbvs	r0, [sl, -r5, lsl #10]
    1020:	054c1605 	strbeq	r1, [ip, #-1541]	; 0xfffff9fb
    1024:	04054f05 	streq	r4, [r5], #-3845	; 0xfffff0fb
    1028:	30020568 	andcc	r0, r2, r8, ror #10
    102c:	860305a6 	strhi	r0, [r3], -r6, lsr #11
    1030:	00320c05 	eorseq	r0, r2, r5, lsl #24
    1034:	06010402 	streq	r0, [r1], -r2, lsl #8
    1038:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    103c:	0a056602 	beq	15a84c <__bss_end+0x2d1ec>
    1040:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1044:	0d052e06 	stceq	14, cr2, [r5, #-24]	; 0xffffffe8
    1048:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    104c:	0003052f 	andeq	r0, r3, pc, lsr #10
    1050:	68040402 	stmdavs	r4, {r1, sl}
    1054:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    1058:	05300404 	ldreq	r0, [r0, #-1028]!	; 0xfffffbfc
    105c:	04020002 	streq	r0, [r2], #-2
    1060:	058a2f04 	streq	r2, [sl, #3844]	; 0xf04
    1064:	0505a110 	streq	sl, [r5, #-272]	; 0xfffffef0
    1068:	6812054f 	ldmdavs	r2, {r0, r1, r2, r3, r6, r8, sl}
    106c:	054d0305 	strbeq	r0, [sp, #-773]	; 0xfffffcfb
    1070:	0605300f 	streq	r3, [r5], -pc
    1074:	680c054a 	stmdavs	ip, {r1, r3, r6, r8, sl}
    1078:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
    107c:	00660601 	rsbeq	r0, r6, r1, lsl #12
    1080:	66020402 	strvs	r0, [r2], -r2, lsl #8
    1084:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    1088:	2e060404 	cdpcs	4, 0, cr0, cr6, cr4, {0}
    108c:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    1090:	0a030404 	beq	c20a8 <ramdisk+0x94a50>
    1094:	0006052e 	andeq	r0, r6, lr, lsr #10
    1098:	6a040402 	bvs	1020a8 <ramdisk+0xd4a50>
    109c:	05860705 	streq	r0, [r6, #1797]	; 0x705
    10a0:	16058408 	strne	r8, [r5], -r8, lsl #8
    10a4:	690c056c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl}
    10a8:	056a1505 	strbeq	r1, [sl, #-1285]!	; 0xfffffafb
    10ac:	4a130318 	bmi	4c1d14 <__bss_end+0x3946b4>
    10b0:	056a0505 	strbeq	r0, [sl, #-1285]!	; 0xfffffafb
    10b4:	07058809 	streq	r8, [r5, -r9, lsl #16]
    10b8:	06052008 	streq	r2, [r5], -r8
    10bc:	0200834f 	andeq	r8, r0, #1006632961	; 0x3c000001
    10c0:	ba060104 	blt	1814d8 <__bss_end+0x53e78>
    10c4:	03040200 	movweq	r0, #16896	; 0x4200
    10c8:	06070582 	streq	r0, [r7], -r2, lsl #11
    10cc:	06059308 	streq	r9, [r5], -r8, lsl #6
    10d0:	32030568 	andcc	r0, r3, #104, 10	; 0x1a000000
    10d4:	c22f0205 	eorgt	r0, pc, #1342177280	; 0x50000000
    10d8:	05850305 	streq	r0, [r5, #773]	; 0x305
    10dc:	06053218 			; <UNDEFINED> instruction: 0x06053218
    10e0:	6815054a 	ldmdavs	r5, {r1, r3, r6, r8, sl}
    10e4:	004e0c05 	subeq	r0, lr, r5, lsl #24
    10e8:	06010402 	streq	r0, [r1], -r2, lsl #8
    10ec:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    10f0:	0a056602 	beq	15a900 <__bss_end+0x2d2a0>
    10f4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    10f8:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    10fc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1100:	001d0533 	andseq	r0, sp, r3, lsr r5
    1104:	85040402 	strhi	r0, [r4, #-1026]	; 0xfffffbfe
    1108:	02000605 	andeq	r0, r0, #5242880	; 0x500000
    110c:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
    1110:	04054c05 	streq	r4, [r5], #-3077	; 0xfffff3fb
    1114:	a0030585 	andge	r0, r3, r5, lsl #11
    1118:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
    111c:	0605681a 			; <UNDEFINED> instruction: 0x0605681a
    1120:	4d05054a 	cfstr32mi	mvfx0, [r5, #-296]	; 0xfffffed8
    1124:	15030205 	strne	r0, [r3, #-517]	; 0xfffffdfb
    1128:	0309052e 	movweq	r0, #38190	; 0x952e
    112c:	38052e72 	stmdacc	r5, {r1, r4, r5, r6, r9, sl, fp, sp}
    1130:	4a07054a 	bmi	1c2660 <__bss_end+0x95000>
    1134:	05501305 	ldrbeq	r1, [r0, #-773]	; 0xfffffcfb
    1138:	06056e02 	streq	r6, [r5], -r2, lsl #28
    113c:	3202052a 	andcc	r0, r2, #176160768	; 0xa800000
    1140:	831005de 	tsthi	r0, #931135488	; 0x37800000
    1144:	054b1705 	strbeq	r1, [fp, #-1797]	; 0xfffff8fb
    1148:	05055107 	streq	r5, [r5, #-263]	; 0xfffffef9
    114c:	6908054a 	stmdbvs	r8, {r1, r3, r6, r8, sl}
    1150:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    1154:	07056c09 	streq	r6, [r5, -r9, lsl #24]
    1158:	4c0e054a 	cfstr32mi	mvfx0, [lr], {74}	; 0x4a
    115c:	054f0a05 	strbeq	r0, [pc, #-2565]	; 75f <_start-0xf8a1>
    1160:	05c22f02 	strbeq	r2, [r2, #3842]	; 0xf02
    1164:	05058a09 	streq	r8, [r5, #-2569]	; 0xfffff5f7
    1168:	0024054e 	eoreq	r0, r4, lr, asr #10
    116c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1170:	02001905 	andeq	r1, r0, #81920	; 0x14000
    1174:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1178:	09056804 	stmdbeq	r5, {r2, fp, sp, lr}
    117c:	66070530 			; <UNDEFINED> instruction: 0x66070530
    1180:	83500605 	cmphi	r0, #5242880	; 0x500000
    1184:	01040200 	mrseq	r0, R12_usr
    1188:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
    118c:	05820304 	streq	r0, [r2, #772]	; 0x304
    1190:	0402000f 	streq	r0, [r2], #-15
    1194:	93080603 	movwls	r0, #34307	; 0x8603
    1198:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    119c:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    11a0:	04020008 	streq	r0, [r2], #-8
    11a4:	07056603 	streq	r6, [r5, -r3, lsl #12]
    11a8:	3204054e 	andcc	r0, r4, #327155712	; 0x13800000
    11ac:	03300205 	teqeq	r0, #1342177280	; 0x50000000
    11b0:	1005ba09 	andne	fp, r5, r9, lsl #20
    11b4:	50090583 	andpl	r0, r9, r3, lsl #11
    11b8:	054c1a05 	strbeq	r1, [ip, #-2565]	; 0xfffff5fb
    11bc:	06054c08 	streq	r4, [r5], -r8, lsl #24
    11c0:	4e1e0566 	cfmsc32mi	mvfx0, mvfx14, mvfx6
    11c4:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    11c8:	3a054c1e 	bcc	154248 <__bss_end+0x26be8>
    11cc:	662b054a 	strtvs	r0, [fp], -sl, asr #10
    11d0:	05821505 	streq	r1, [r2, #1285]	; 0x505
    11d4:	00832f06 	addeq	r2, r3, r6, lsl #30
    11d8:	06010402 	streq	r0, [r1], -r2, lsl #8
    11dc:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    11e0:	08068203 	stmdaeq	r6, {r0, r1, r9, pc}
    11e4:	a40a05b3 	strge	r0, [sl], #-1459	; 0xfffffa4d
    11e8:	052f0205 	streq	r0, [pc, #-517]!	; feb <_start-0xf015>
    11ec:	f20d0301 	vcgt.s8	d0, d13, d1
    11f0:	0d030d05 	stceq	13, cr0, [r3, #-20]	; 0xffffffec
    11f4:	03040566 	movweq	r0, #17766	; 0x4566
    11f8:	05ac080d 	streq	r0, [ip, #2061]!	; 0x80d
    11fc:	660a0303 	strvs	r0, [sl], -r3, lsl #6
    1200:	05a01505 	streq	r1, [r0, #1285]!	; 0x505
    1204:	0705670e 	streq	r6, [r5, -lr, lsl #14]
    1208:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
    120c:	2e0d0301 	cdpcs	3, 0, cr0, cr13, cr1, {0}
    1210:	4e0205da 	mcrmi	5, 0, r0, cr2, cr10, {6}
    1214:	059f1405 	ldreq	r1, [pc, #1029]	; 1621 <_start-0xe9df>
    1218:	01056702 	tsteq	r5, r2, lsl #14
    121c:	02056a2f 	andeq	r6, r5, #192512	; 0x2f000
    1220:	9f01054d 	svcls	0x0001054d
    1224:	681605a2 	ldmdavs	r6, {r1, r5, r7, r8, sl}
    1228:	0b030205 	bleq	c1a44 <ramdisk+0x943ec>
    122c:	3003054a 	andcc	r0, r3, sl, asr #10
    1230:	05a01c05 	streq	r1, [r0, #3077]!	; 0xc05
    1234:	1f054a05 	svcne	0x00054a05
    1238:	4a06054c 	bmi	182770 <__bss_end+0x55110>
    123c:	054c1305 	strbeq	r1, [ip, #-773]	; 0xfffffcfb
    1240:	1b054e0a 	blne	154a70 <__bss_end+0x27410>
    1244:	4a0c0530 	bmi	30270c <__bss_end+0x1d50ac>
    1248:	672f0605 	strvs	r0, [pc, -r5, lsl #12]!
    124c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1250:	009e0601 	addseq	r0, lr, r1, lsl #12
    1254:	66030402 	strvs	r0, [r3], -r2, lsl #8
    1258:	02000f05 	andeq	r0, r0, #5, 30
    125c:	08060304 	stmdaeq	r6, {r2, r8, r9}
    1260:	002b055c 	eoreq	r0, fp, ip, asr r5
    1264:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    1268:	02000805 	andeq	r0, r0, #327680	; 0x50000
    126c:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    1270:	0c054c16 	stceq	12, cr4, [r5], {22}
    1274:	054a7503 	strbeq	r7, [sl, #-1283]	; 0xfffffafd
    1278:	17054a0a 	strne	r4, [r5, -sl, lsl #20]
    127c:	054a1203 	strbeq	r1, [sl, #-515]	; 0xfffffdfd
    1280:	0b054a07 	bleq	153aa4 <__bss_end+0x26444>
    1284:	3007054c 	andcc	r0, r7, ip, asr #10
    1288:	9b1b052f 	blls	6c274c <__bss_end+0x5950ec>
    128c:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    1290:	4a0b0316 	bmi	2c1ef0 <__bss_end+0x194890>
    1294:	054f0705 	strbeq	r0, [pc, #-1797]	; b97 <_start-0xf469>
    1298:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    129c:	26056601 	strcs	r6, [r5], -r1, lsl #12
    12a0:	01040200 	mrseq	r0, R12_usr
    12a4:	4c16054a 	cfldr32mi	mvfx0, [r6], {74}	; 0x4a
    12a8:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    12ac:	02056706 	andeq	r6, r5, #1572864	; 0x180000
    12b0:	30090533 	andcc	r0, r9, r3, lsr r5
    12b4:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    12b8:	0558080e 	ldrbeq	r0, [r8, #-2062]	; 0xfffff7f2
    12bc:	0a056a02 	beq	15bacc <__bss_end+0x2e46c>
    12c0:	68020530 	stmdavs	r2, {r4, r5, r8, sl}
    12c4:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
    12c8:	05862f01 	streq	r2, [r6, #3841]	; 0xf01
    12cc:	0a056a19 	beq	15bb38 <__bss_end+0x2e4d8>
    12d0:	6909054b 	stmdbvs	r9, {r0, r1, r3, r6, r8, sl}
    12d4:	a22f0105 	eorge	r0, pc, #1073741825	; 0x40000001
    12d8:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    12dc:	ae034b01 	vmlage.f64	d4, d3, d1
    12e0:	1b059e01 	blne	168aec <__bss_end+0x3b48c>
    12e4:	4a04056c 	bmi	10289c <ramdisk+0xd5244>
    12e8:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    12ec:	05059f12 	streq	r9, [r5, #-3858]	; 0xfffff0ee
    12f0:	030b054a 	movweq	r0, #46410	; 0xb54a
    12f4:	16054a09 	strne	r4, [r5], -r9, lsl #20
    12f8:	831e0567 	tsthi	lr, #432013312	; 0x19c00000
    12fc:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
    1300:	0605a008 	streq	sl, [r5], -r8
    1304:	511a0566 	tstpl	sl, r6, ror #10
    1308:	660b058a 	strvs	r0, [fp], -sl, lsl #11
    130c:	054b1c05 	strbeq	r1, [fp, #-3077]	; 0xfffff3fb
    1310:	03054a1a 	movweq	r4, #23066	; 0x5a1a
    1314:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
    1318:	00ba060c 	adcseq	r0, sl, ip, lsl #12
    131c:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    1320:	03040200 	movweq	r0, #16896	; 0x4200
    1324:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
    1328:	00900804 	addseq	r0, r0, r4, lsl #16
    132c:	82050402 	andhi	r0, r5, #33554432	; 0x2000000
    1330:	06040200 	streq	r0, [r4], -r0, lsl #4
    1334:	040200f2 	streq	r0, [r2], #-242	; 0xffffff0e
    1338:	02008208 	andeq	r8, r0, #8, 4	; 0x80000000
    133c:	00ba0904 	adcseq	r0, sl, r4, lsl #18
    1340:	820b0402 	andhi	r0, fp, #33554432	; 0x2000000
    1344:	05b00806 	ldreq	r0, [r0, #2054]!	; 0x806
    1348:	9e170301 	cdpls	3, 1, cr0, cr7, cr1, {0}
    134c:	96080205 	strls	r0, [r8], -r5, lsl #4
    1350:	05a20505 	streq	r0, [r2, #1285]!	; 0x505
    1354:	05866809 	streq	r6, [r6, #2057]	; 0x809
    1358:	14054f03 	strne	r4, [r5], #-3843	; 0xfffff0fd
    135c:	6703052f 	strvs	r0, [r3, -pc, lsr #10]
    1360:	8a2f0205 	bhi	bc1b7c <__bss_end+0xa9451c>
    1364:	05870505 	streq	r0, [r7, #1285]	; 0x505
    1368:	05866809 	streq	r6, [r6, #2057]	; 0x809
    136c:	0c054f03 	stceq	15, cr4, [r5], {3}
    1370:	6703052f 	strvs	r0, [r3, -pc, lsr #10]
    1374:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    1378:	058a2f02 	streq	r2, [sl, #3842]	; 0xf02
    137c:	0905a305 	stmdbeq	r5, {r0, r2, r8, r9, sp, pc}
    1380:	0b058668 	bleq	162d28 <__bss_end+0x356c8>
    1384:	4a05054d 	bmi	1428c0 <__bss_end+0x15260>
    1388:	054c1205 	strbeq	r1, [ip, #-517]	; 0xfffffdfb
    138c:	0c054a0e 			; <UNDEFINED> instruction: 0x0c054a0e
    1390:	4d0a0586 	cfstr32mi	mvfx0, [sl, #-536]	; 0xfffffde8
    1394:	052f0205 	streq	r0, [pc, #-517]!	; 1197 <_start-0xee69>
    1398:	1b058801 	blne	1633a4 <__bss_end+0x35d44>
    139c:	4a040567 	bmi	102940 <ramdisk+0xd52e8>
    13a0:	054e1005 	strbeq	r1, [lr, #-5]
    13a4:	66330301 	ldrtvs	r0, [r3], -r1, lsl #6
    13a8:	6e030405 	cdpvs	4, 0, cr0, cr3, cr5, {0}
    13ac:	9b0a052e 	blls	28286c <__bss_end+0x15520c>
    13b0:	20080805 	andcs	r0, r8, r5, lsl #16
    13b4:	0d030305 	stceq	3, cr0, [r3, #-20]	; 0xffffffec
    13b8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    13bc:	28020601 	stmdacs	r2, {r0, r9, sl}
    13c0:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
    13c4:	01059e03 	tsteq	r5, r3, lsl #28
    13c8:	2408a606 	strcs	sl, [r8], #-1542	; 0xfffff9fa
    13cc:	0b034705 	bleq	d2fe8 <ramdisk+0xa5990>
    13d0:	4a02059e 	bmi	82a50 <ramdisk+0x553f8>
    13d4:	05872e05 	streq	r2, [r7, #3589]	; 0xe05
    13d8:	05054a02 	streq	r4, [r5, #-2562]	; 0xfffff5fe
    13dc:	6b54056b 	blvs	1502990 <__bss_end+0x13d5330>
    13e0:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
    13e4:	82120301 	andshi	r0, r2, #67108864	; 0x4000000
    13e8:	74031d05 	strvc	r1, [r3], #-3333	; 0xfffff2fb
    13ec:	4a10052e 	bmi	4028ac <__bss_end+0x2d524c>
    13f0:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    13f4:	4a0b0301 	bmi	2c2000 <__bss_end+0x1949a0>
    13f8:	05ba2603 	ldreq	r2, [sl, #1539]!	; 0x603
    13fc:	82110320 	andshi	r0, r1, #32, 6	; 0x80000000
    1400:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
    1404:	1b054c02 	blne	154414 <__bss_end+0x26db4>
    1408:	4a040584 	bmi	102a20 <ramdisk+0xd53c8>
    140c:	834c0305 	movthi	r0, #49925	; 0xc305
    1410:	01040200 	mrseq	r0, R12_usr
    1414:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
    1418:	06820304 	streq	r0, [r2], r4, lsl #6
    141c:	1405b208 	strne	fp, [r5], #-520	; 0xfffffdf8
    1420:	4a3005a1 	bmi	c02aac <__bss_end+0xad544c>
    1424:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
    1428:	056a500b 	strbeq	r5, [sl, #-11]!
    142c:	01054d09 	tsteq	r5, r9, lsl #26
    1430:	1c05f62f 	stcne	6, cr15, [r5], {47}	; 0x2f
    1434:	831d0584 	tsthi	sp, #132, 10	; 0x21000000
    1438:	be830105 	rmflts	f0, f3, f5
    143c:	05a40205 	streq	r0, [r4, #517]!	; 0x205
    1440:	06053408 	streq	r3, [r5], -r8, lsl #8
    1444:	4c0d054a 	cfstr32mi	mvfx0, [sp], {74}	; 0x4a
    1448:	056b2505 	strbeq	r2, [fp, #-1285]!	; 0xfffffafb
    144c:	05054a19 	streq	r4, [r5, #-2585]	; 0xfffff5e7
    1450:	0076054a 	rsbseq	r0, r6, sl, asr #10
    1454:	4a010402 	bmi	42464 <ramdisk+0x14e0c>
    1458:	02003d05 	andeq	r3, r0, #320	; 0x140
    145c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1460:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    1464:	0c054a01 			; <UNDEFINED> instruction: 0x0c054a01
    1468:	68210550 	stmdavs	r1!, {r4, r6, r8, sl}
    146c:	054a5905 	strbeq	r5, [sl, #-2309]	; 0xfffff6fb
    1470:	71054a0e 	tstvc	r5, lr, lsl #20
    1474:	4a0a052e 	bmi	282934 <__bss_end+0x1552d4>
    1478:	054d1805 	strbeq	r1, [sp, #-2053]	; 0xfffff7fb
    147c:	34054a50 	strcc	r4, [r5], #-2640	; 0xfffff5b0
    1480:	2e13054a 	cfmac32cs	mvfx0, mvfx3, mvfx10
    1484:	059f0405 	ldreq	r0, [pc, #1029]	; 1891 <_start-0xe76f>
    1488:	056a4b0c 	strbeq	r4, [sl, #-2828]!	; 0xfffff4f4
    148c:	09054d02 	stmdbeq	r5, {r1, r8, sl, fp, lr}
    1490:	2f010530 	svccs	0x00010530
    1494:	4b0f05a2 	blmi	3c2b24 <__bss_end+0x2954c4>
    1498:	03670105 	cmneq	r7, #1073741825	; 0x40000001
    149c:	03059e32 	movweq	r9, #24114	; 0x5e32
    14a0:	03080589 	movweq	r0, #34185	; 0x8589
    14a4:	06052e17 			; <UNDEFINED> instruction: 0x06052e17
    14a8:	4c05054a 	cfstr32mi	mvfx0, [r5], {74}	; 0x4a
    14ac:	67030305 	strvs	r0, [r3, -r5, lsl #6]
    14b0:	0301052e 	movweq	r0, #5422	; 0x152e
    14b4:	17054a3a 	smladxne	r5, sl, sl, r4
    14b8:	4a0305db 	bmi	c2c2c <ramdisk+0x955d4>
    14bc:	05855905 	streq	r5, [r5, #2309]	; 0x905
    14c0:	0e056a04 	vmlaeq.f32	s12, s10, s8
    14c4:	4d140568 	cfldr32mi	mvfx0, [r4, #-416]	; 0xfffffe60
    14c8:	836d0205 	cmnhi	sp, #1342177280	; 0x50000000
    14cc:	05836986 	streq	r6, [r3, #2438]	; 0x986
    14d0:	660a0314 			; <UNDEFINED> instruction: 0x660a0314
    14d4:	14030105 	strne	r0, [r3], #-261	; 0xfffffefb
    14d8:	66170366 	ldrvs	r0, [r7], -r6, ror #6
    14dc:	05691205 	strbeq	r1, [r9, #-517]!	; 0xfffffdfb
    14e0:	03054a02 	movweq	r4, #23042	; 0x5a02
    14e4:	03040200 	movweq	r0, #16896	; 0x4200
    14e8:	00600530 	rsbeq	r0, r0, r0, lsr r5
    14ec:	08030402 	stmdaeq	r3, {r1, sl}
    14f0:	0002051e 	andeq	r0, r2, lr, lsl r5
    14f4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    14f8:	054b4b6b 	strbeq	r4, [fp, #-2923]	; 0xfffff495
    14fc:	05504e03 	ldrbeq	r4, [r0, #-3587]	; 0xfffff1fd
    1500:	1c055014 	stcne	0, cr5, [r5], {20}
    1504:	67010567 	strvs	r0, [r1, -r7, ror #10]
    1508:	16055c08 	strne	r5, [r5], -r8, lsl #24
    150c:	4a05056d 	bmi	142ac8 <__bss_end+0x15468>
    1510:	054c0405 	strbeq	r0, [ip, #-1029]	; 0xfffffbfb
    1514:	12052f14 	andne	r2, r5, #20, 30	; 0x50
    1518:	2f0405ba 	svccs	0x000405ba
    151c:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    1520:	1b056a05 	blne	15bd3c <__bss_end+0x2e6dc>
    1524:	4a0c0530 	bmi	3029ec <__bss_end+0x1d538c>
    1528:	834b0605 	movthi	r0, #46597	; 0xb605
    152c:	a005059f 	mulge	r5, pc, r5	; <UNPREDICTABLE>
    1530:	4f010530 	svcmi	0x00010530
    1534:	840205be 	strhi	r0, [r2], #-1470	; 0xfffffa42
    1538:	05841205 	streq	r1, [r4, #517]	; 0x205
    153c:	03054a04 	movweq	r4, #23044	; 0x5a04
    1540:	4a560569 	bmi	1582aec <__bss_end+0x145548c>
    1544:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    1548:	820f0301 	andhi	r0, pc, #67108864	; 0x4000000
    154c:	76030305 	strvc	r0, [r3], -r5, lsl #6
    1550:	4a4e052e 	bmi	1382a10 <__bss_end+0x12553b0>
    1554:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    1558:	05058713 	streq	r8, [r5, #-1811]	; 0xfffff8ed
    155c:	6819054a 	ldmdavs	r9, {r1, r3, r6, r8, sl}
    1560:	f6690105 			; <UNDEFINED> instruction: 0xf6690105
    1564:	05bf1a05 	ldreq	r1, [pc, #2565]!	; 1f71 <_start-0xe08f>
    1568:	17056804 	strne	r6, [r5, -r4, lsl #16]
    156c:	002c056b 	eoreq	r0, ip, fp, ror #10
    1570:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1574:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    1578:	05ba0204 	ldreq	r0, [sl, #516]!	; 0x204
    157c:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    1580:	0f052e04 	svceq	0x00052e04
    1584:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1588:	0005054c 	andeq	r0, r5, ip, asr #10
    158c:	4a040402 	bmi	10259c <ramdisk+0xd4f44>
    1590:	054d0405 	strbeq	r0, [sp, #-1029]	; 0xfffffbfb
    1594:	14054b0d 	strne	r4, [r5], #-2829	; 0xfffff4f3
    1598:	4a3b056b 	bmi	ec2b4c <__bss_end+0xd954ec>
    159c:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
    15a0:	820a0309 	andhi	r0, sl, #603979776	; 0x24000000
    15a4:	052f0105 	streq	r0, [pc, #-261]!	; 14a7 <_start-0xeb59>
    15a8:	019d0302 	orrseq	r0, sp, r2, lsl #6
    15ac:	8a030566 	bhi	c2b4c <ramdisk+0x954f4>
    15b0:	4b020583 	blmi	82bc4 <ramdisk+0x5556c>
    15b4:	01000602 	tsteq	r0, r2, lsl #12
    15b8:	00018101 	andeq	r8, r1, r1, lsl #2
    15bc:	66000300 	strvs	r0, [r0], -r0, lsl #6
    15c0:	02000000 	andeq	r0, r0, #0
    15c4:	0d0efb01 	vstreq	d15, [lr, #-4]
    15c8:	01010100 	mrseq	r0, (UNDEF: 17)
    15cc:	00000001 	andeq	r0, r0, r1
    15d0:	01000001 	tsteq	r0, r1
    15d4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1520 <_start-0xeae0>
    15d8:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
    15dc:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    15e0:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    15e4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    15e8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    15ec:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    15f0:	72656270 	rsbvc	r6, r5, #112, 4
    15f4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    15f8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    15fc:	4f545265 	svcmi	0x00545265
    1600:	61462d53 	cmpvs	r6, r3, asr sp
    1604:	2f534674 	svccs	0x00534674
    1608:	6f6d6544 	svcvs	0x006d6544
    160c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1610:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1614:	72690000 	rsbvc	r0, r9, #0
    1618:	00632e71 	rsbeq	r2, r3, r1, ror lr
    161c:	69000001 	stmdbvs	r0, {r0}
    1620:	682e7172 	stmdavs	lr!, {r1, r4, r5, r6, r8, ip, sp, lr}
    1624:	00000100 	andeq	r0, r0, r0, lsl #2
    1628:	00010500 	andeq	r0, r1, r0, lsl #10
    162c:	34c40205 	strbcc	r0, [r4], #517	; 0x205
    1630:	1e030002 	cdpne	0, 0, cr0, cr3, cr2, {0}
    1634:	9f080501 	svcls	0x00080501
    1638:	05311b05 	ldreq	r1, [r1, #-2821]!	; 0xfffff4fb
    163c:	10054a19 	andne	r4, r5, r9, lsl sl
    1640:	1905312e 	stmdbne	r5, {r1, r2, r3, r5, r8, ip, sp}
    1644:	66060585 	strvs	r0, [r6], -r5, lsl #11
    1648:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
    164c:	14056604 	strne	r6, [r5], #-1540	; 0xfffff9fc
    1650:	660e05f5 			; <UNDEFINED> instruction: 0x660e05f5
    1654:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    1658:	66730308 	ldrbtvs	r0, [r3], -r8, lsl #6
    165c:	0f030105 	svceq	0x00030105
    1660:	2f05a666 	svccs	0x0005a666
    1664:	2e19054b 	cfmac32cs	mvfx0, mvfx9, mvfx11
    1668:	05311505 	ldreq	r1, [r1, #-1285]!	; 0xfffffafb
    166c:	14052e05 	strne	r2, [r5], #-3589	; 0xfffff1fb
    1670:	4a28054b 	bmi	a02ba4 <__bss_end+0x8d5544>
    1674:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    1678:	05058515 	streq	r8, [r5, #-1301]	; 0xfffffaeb
    167c:	4b14052e 	blmi	502b3c <__bss_end+0x3d54dc>
    1680:	054a2805 	strbeq	r2, [sl, #-2053]	; 0xfffff7fb
    1684:	15054a03 	strne	r4, [r5, #-2563]	; 0xfffff5fd
    1688:	2e050585 	cfsh32cs	mvfx0, mvfx5, #-59
    168c:	054b2e05 	strbeq	r2, [fp, #-3589]	; 0xfffff1fb
    1690:	03054a25 	movweq	r4, #23077	; 0x5a25
    1694:	8301052e 	movwhi	r0, #5422	; 0x152e
    1698:	4b020585 	blmi	82cb4 <ramdisk+0x5565c>
    169c:	852f0105 	strhi	r0, [pc, #-261]!	; 159f <_start-0xea61>
    16a0:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
    16a4:	05852f01 	streq	r2, [r5, #3841]	; 0xf01
    16a8:	0305bb05 	movweq	fp, #23301	; 0x5b05
    16ac:	2f210567 	svccs	0x00210567
    16b0:	bb030583 	bllt	c2cc4 <ramdisk+0x9566c>
    16b4:	85300105 	ldrhi	r0, [r0, #-261]!	; 0xfffffefb
    16b8:	05832305 	streq	r2, [r3, #773]	; 0x305
    16bc:	05054a10 	streq	r4, [r5, #-2576]	; 0xfffff5f0
    16c0:	67080568 	strvs	r0, [r8, -r8, ror #10]
    16c4:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    16c8:	01054b0e 	tsteq	r5, lr, lsl #22
    16cc:	05ba0a03 	ldreq	r0, [sl, #2563]!	; 0xa03
    16d0:	2e78030a 	cdpcs	3, 7, cr0, cr8, cr10, {0}
    16d4:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    16d8:	0e052e12 	mcreq	14, 0, r2, cr5, cr2, {0}
    16dc:	c001054b 	andgt	r0, r1, fp, asr #10
    16e0:	052a0a05 	streq	r0, [sl, #-2565]!	; 0xfffff5fb
    16e4:	16056708 	strne	r6, [r5], -r8, lsl #14
    16e8:	4b0e052e 	blmi	382ba8 <__bss_end+0x255548>
    16ec:	bdbc0105 	ldflts	f0, [ip, #20]!
    16f0:	05832305 	streq	r2, [r3, #773]	; 0x305
    16f4:	05054a10 	streq	r4, [r5, #-2576]	; 0xfffff5f0
    16f8:	67080568 	strvs	r0, [r8, -r8, ror #10]
    16fc:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    1700:	11054b0e 	tstne	r5, lr, lsl #22
    1704:	4a0e054a 	bmi	382c34 <__bss_end+0x2555d4>
    1708:	0a030105 	beq	c1b24 <ramdisk+0x944cc>
    170c:	030a0566 	movweq	r0, #42342	; 0xa566
    1710:	08052e78 	stmdaeq	r5, {r3, r4, r5, r6, r9, sl, fp, sp}
    1714:	2e130567 	cfmsc32cs	mvfx0, mvfx3, mvfx7
    1718:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    171c:	0e054a11 			; <UNDEFINED> instruction: 0x0e054a11
    1720:	6c01054a 	cfstr32vs	mvfx0, [r1], {74}	; 0x4a
    1724:	052a0a05 	streq	r0, [sl, #-2565]!	; 0xfffff5fb
    1728:	17056708 	strne	r6, [r5, -r8, lsl #14]
    172c:	4b0e052e 	blmi	382bec <__bss_end+0x25558c>
    1730:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
    1734:	01054a0e 	tsteq	r5, lr, lsl #20
    1738:	000c0268 	andeq	r0, ip, r8, ror #4
    173c:	01790101 	cmneq	r9, r1, lsl #2
    1740:	00030000 	andeq	r0, r3, r0
    1744:	00000068 	andeq	r0, r0, r8, rrx
    1748:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    174c:	0101000d 	tsteq	r1, sp
    1750:	00000101 	andeq	r0, r0, r1, lsl #2
    1754:	00000100 	andeq	r0, r0, r0, lsl #2
    1758:	6f682f01 	svcvs	0x00682f01
    175c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 15b0 <_start-0xea50>
    1760:	63616e75 	cmnvs	r1, #1872	; 0x750
    1764:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    1768:	63726178 	cmnvs	r2, #120, 2
    176c:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    1770:	61522f63 	cmpvs	r2, r3, ror #30
    1774:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1778:	50797272 	rsbspl	r7, r9, r2, ror r2
    177c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1780:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1784:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    1788:	53467461 	movtpl	r7, #25697	; 0x6461
    178c:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1790:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    1794:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1798:	67000073 	smlsdxvs	r0, r3, r0, r0
    179c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    17a0:	00010063 	andeq	r0, r1, r3, rrx
    17a4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    17a8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    17ac:	00000001 	andeq	r0, r0, r1
    17b0:	05004105 	streq	r4, [r0, #-261]	; 0xfffffefb
    17b4:	02386802 	eorseq	r6, r8, #131072	; 0x20000
    17b8:	00ed0300 	rsceq	r0, sp, r0, lsl #6
    17bc:	9f160501 	svcls	0x00160501
    17c0:	05820605 	streq	r0, [r2, #1541]	; 0x605
    17c4:	06052f14 			; <UNDEFINED> instruction: 0x06052f14
    17c8:	20052008 	andcs	r2, r5, r8
    17cc:	66320531 			; <UNDEFINED> instruction: 0x66320531
    17d0:	05822905 	streq	r2, [r2, #2309]	; 0x905
    17d4:	20054a23 	andcs	r4, r5, r3, lsr #20
    17d8:	2d05832e 	stccs	3, cr8, [r5, #-184]	; 0xffffff48
    17dc:	4a3d0566 	bmi	f42d7c <__bss_end+0xe1571c>
    17e0:	05823405 	streq	r3, [r2, #1029]	; 0x405
    17e4:	01052e20 	tsteq	r5, r0, lsr #28
    17e8:	bc3f0583 	cfldr32lt	mvfx0, [pc], #-524	; 15e4 <_start-0xea1c>
    17ec:	05bb0205 	ldreq	r0, [fp, #517]!	; 0x205
    17f0:	38058301 	stmdacc	r5, {r0, r8, r9, pc}
    17f4:	9f100568 	svcls	0x00100568
    17f8:	05672505 	strbeq	r2, [r7, #-1285]!	; 0xfffffafb
    17fc:	10054a1a 	andne	r4, r5, sl, lsl sl
    1800:	3105054a 	tstcc	r5, sl, asr #10
    1804:	05671e05 	strbeq	r1, [r7, #-3589]!	; 0xfffff1fb
    1808:	1e05f601 	cfmadd32ne	mvax0, mvfx15, mvfx5, mvfx1
    180c:	6621052c 	strtvs	r0, [r1], -ip, lsr #10
    1810:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
    1814:	23058401 	movwcs	r8, #21505	; 0x5401
    1818:	831005a0 	tsthi	r0, #160, 10	; 0x28000000
    181c:	05672505 	strbeq	r2, [r7, #-1285]!	; 0xfffffafb
    1820:	10054a1a 	andne	r4, r5, sl, lsl sl
    1824:	311c054a 	tstcc	ip, sl, asr #10
    1828:	05662505 	strbeq	r2, [r6, #-1285]!	; 0xfffffafb
    182c:	01054a31 	tsteq	r5, r1, lsr sl
    1830:	1705a183 	strne	sl, [r5, -r3, lsl #3]
    1834:	661005bb 			; <UNDEFINED> instruction: 0x661005bb
    1838:	6802052f 	stmdavs	r2, {r0, r1, r2, r3, r5, r8, sl}
    183c:	5a082005 	bpl	209858 <__bss_end+0xdc1f8>
    1840:	05f30305 	ldrbeq	r0, [r3, #773]!	; 0x305
    1844:	03053020 	movweq	r3, #20512	; 0x5020
    1848:	302005f3 	strdcc	r0, [r0], -r3	; <UNPREDICTABLE>
    184c:	05f30305 	ldrbeq	r0, [r3, #773]!	; 0x305
    1850:	03053020 	movweq	r3, #20512	; 0x5020
    1854:	302005f3 	strdcc	r0, [r0], -r3	; <UNPREDICTABLE>
    1858:	05f30305 	ldrbeq	r0, [r3, #773]!	; 0x305
    185c:	03053020 	movweq	r3, #20512	; 0x5020
    1860:	010530f3 	strdeq	r3, [r5, -r3]
    1864:	2105a130 	tstcs	r5, r0, lsr r1
    1868:	4a1805bb 	bmi	602f5c <__bss_end+0x4d58fc>
    186c:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
    1870:	052f2e10 	streq	r2, [pc, #-3600]!	; a68 <_start-0xf598>
    1874:	20056802 	andcs	r6, r5, r2, lsl #16
    1878:	03055a08 	movweq	r5, #23048	; 0x5a08
    187c:	302005f3 	strdcc	r0, [r0], -r3	; <UNPREDICTABLE>
    1880:	05f30305 	ldrbeq	r0, [r3, #773]!	; 0x305
    1884:	03053020 	movweq	r3, #20512	; 0x5020
    1888:	302005f3 	strdcc	r0, [r0], -r3	; <UNPREDICTABLE>
    188c:	05f30305 	ldrbeq	r0, [r3, #773]!	; 0x305
    1890:	03053020 	movweq	r3, #20512	; 0x5020
    1894:	302005f3 	strdcc	r0, [r0], -r3	; <UNPREDICTABLE>
    1898:	30f30305 	rscscc	r0, r3, r5, lsl #6
    189c:	a1300105 	teqge	r0, r5, lsl #2
    18a0:	05832005 	streq	r2, [r3, #5]
    18a4:	10054a17 	andne	r4, r5, r7, lsl sl
    18a8:	1d052f4a 	stcne	15, cr2, [r5, #-296]	; 0xfffffed8
    18ac:	66200569 	strtvs	r0, [r0], -r9, ror #10
    18b0:	054a1d05 	strbeq	r1, [sl, #-3333]	; 0xfffff2fb
    18b4:	0a028301 	beq	a24c0 <ramdisk+0x74e68>
    18b8:	29010100 	stmdbcs	r1, {r8}
    18bc:	03000002 	movweq	r0, #2
    18c0:	0000ab00 	andeq	sl, r0, r0, lsl #22
    18c4:	fb010200 	blx	420ce <ramdisk+0x14a76>
    18c8:	01000d0e 	tsteq	r0, lr, lsl #26
    18cc:	00010101 	andeq	r0, r1, r1, lsl #2
    18d0:	00010000 	andeq	r0, r1, r0
    18d4:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    18d8:	2f656d6f 	svccs	0x00656d6f
    18dc:	616e756c 	cmnvs	lr, ip, ror #10
    18e0:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
    18e4:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
    18e8:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
    18ec:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
    18f0:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    18f4:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    18f8:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    18fc:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1900:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1904:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    1908:	462f2f53 	qsaxmi	r2, pc, r3	; <UNPREDICTABLE>
    190c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1910:	2f534f54 	svccs	0x00534f54
    1914:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1918:	702f6563 	eorvc	r6, pc, r3, ror #10
    191c:	6174726f 	cmnvs	r4, pc, ror #4
    1920:	2f656c62 	svccs	0x00656c62
    1924:	4d6d654d 	cfstr64mi	mvdx6, [sp, #-308]!	; 0xfffffecc
    1928:	00676e61 	rsbeq	r6, r7, r1, ror #28
    192c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1930:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1934:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1938:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    193c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1940:	61652d65 	cmnvs	r5, r5, ror #26
    1944:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    1948:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    194c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    1950:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1954:	68000065 	stmdavs	r0, {r0, r2, r5, r6}
    1958:	5f706165 	svcpl	0x00706165
    195c:	00632e34 	rsbeq	r2, r3, r4, lsr lr
    1960:	73000001 	movwvc	r0, #1
    1964:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    1968:	00682e66 	rsbeq	r2, r8, r6, ror #28
    196c:	00000002 	andeq	r0, r0, r2
    1970:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1974:	023d8802 	eorseq	r8, sp, #131072	; 0x20000
    1978:	01920300 	orrseq	r0, r2, r0, lsl #6
    197c:	84070501 	strhi	r0, [r7], #-1281	; 0xfffffaff
    1980:	054c0205 	strbeq	r0, [ip, #-517]	; 0xfffffdfb
    1984:	0505320d 	streq	r3, [r5, #-525]	; 0xfffffdf3
    1988:	4c04054a 	cfstr32mi	mvfx0, [r4], {74}	; 0x4a
    198c:	05330505 	ldreq	r0, [r3, #-1285]!	; 0xfffffafb
    1990:	14056810 	strne	r6, [r5], #-2064	; 0xfffff7f0
    1994:	4a0605a2 	bmi	183024 <__bss_end+0x559c4>
    1998:	054d1105 	strbeq	r1, [sp, #-261]	; 0xfffffefb
    199c:	2c058605 	stccs	6, cr8, [r5], {5}
    19a0:	01040200 	mrseq	r0, R12_usr
    19a4:	001b0566 	andseq	r0, fp, r6, ror #10
    19a8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    19ac:	056a1405 	strbeq	r1, [sl, #-1029]!	; 0xfffffbfb
    19b0:	09054b0c 	stmdbeq	r5, {r2, r3, r8, r9, fp, lr}
    19b4:	30150567 	andscc	r0, r5, r7, ror #10
    19b8:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    19bc:	09056314 	stmdbeq	r5, {r2, r4, r8, r9, sp, lr}
    19c0:	003d054a 	eorseq	r0, sp, sl, asr #10
    19c4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    19c8:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
    19cc:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    19d0:	06055210 			; <UNDEFINED> instruction: 0x06055210
    19d4:	6a42054a 	bvs	1082f04 <__bss_end+0xf558a4>
    19d8:	054a1005 	strbeq	r1, [sl, #-5]
    19dc:	2f052e0e 	svccs	0x00052e0e
    19e0:	4a26054e 	bmi	982f20 <__bss_end+0x8558c0>
    19e4:	054d1205 	strbeq	r1, [sp, #-517]	; 0xfffffdfb
    19e8:	31054a1f 	tstcc	r5, pc, lsl sl
    19ec:	4a07054a 	bmi	1c2f1c <__bss_end+0x958bc>
    19f0:	054f1505 	strbeq	r1, [pc, #-1285]	; 14f3 <_start-0xeb0d>
    19f4:	3705862a 	strcc	r8, [r5, -sl, lsr #12]
    19f8:	4a21054a 	bmi	842f28 <__bss_end+0x7158c8>
    19fc:	054b1a05 	strbeq	r1, [fp, #-2565]	; 0xfffff5fb
    1a00:	19056906 	stmdbne	r5, {r1, r2, r8, fp, sp, lr}
    1a04:	4a23054d 	bmi	8c2f40 <__bss_end+0x7958e0>
    1a08:	054a1905 	strbeq	r1, [sl, #-2309]	; 0xfffff6fb
    1a0c:	0c056a02 			; <UNDEFINED> instruction: 0x0c056a02
    1a10:	052e0c03 	streq	r0, [lr, #-3075]!	; 0xfffff3fd
    1a14:	0105bc09 	tsteq	r5, r9, lsl #24
    1a18:	1005da2f 	andne	sp, r5, pc, lsr #20
    1a1c:	4d040583 	cfstr32mi	mvfx0, [r4, #-524]	; 0xfffffdf4
    1a20:	056a0705 	strbeq	r0, [sl, #-1797]!	; 0xfffff8fb
    1a24:	0305a10a 	movweq	sl, #20746	; 0x510a
    1a28:	3121054c 			; <UNDEFINED> instruction: 0x3121054c
    1a2c:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    1a30:	03059f04 	movweq	r9, #24324	; 0x5f04
    1a34:	3001054c 	andcc	r0, r1, ip, asr #10
    1a38:	4b090586 	blmi	243058 <__bss_end+0x1159f8>
    1a3c:	a24b0105 	subge	r0, fp, #1073741825	; 0x40000001
    1a40:	1905864c 	stmdbne	r5, {r2, r3, r6, r9, sl, pc}
    1a44:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
    1a48:	1c056714 	stcne	7, cr6, [r5], {20}
    1a4c:	2e0d056a 	cfsh32cs	mvfx0, mvfx13, #58
    1a50:	9f080567 	svcls	0x00080567
    1a54:	05680705 	strbeq	r0, [r8, #-1797]!	; 0xfffff8fb
    1a58:	07054a14 	smladeq	r5, r4, sl, r4
    1a5c:	4a19054b 	bmi	642f90 <__bss_end+0x515930>
    1a60:	054e1305 	strbeq	r1, [lr, #-773]	; 0xfffffcfb
    1a64:	1f054b30 	svcne	0x00054b30
    1a68:	4b240566 	blmi	903008 <__bss_end+0x7d59a8>
    1a6c:	05851605 	streq	r1, [r5, #1541]	; 0x605
    1a70:	05f6bb01 	ldrbeq	fp, [r6, #2817]!	; 0xb01
    1a74:	02058812 	andeq	r8, r5, #1179648	; 0x120000
    1a78:	0057054a 	subseq	r0, r7, sl, asr #10
    1a7c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    1a80:	02002705 	andeq	r2, r0, #1310720	; 0x140000
    1a84:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1a88:	04020002 	streq	r0, [r2], #-2
    1a8c:	06054a01 	streq	r4, [r5], -r1, lsl #20
    1a90:	4b18056d 	blmi	60304c <__bss_end+0x4d59ec>
    1a94:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1a98:	1a054a04 	bne	1542b0 <__bss_end+0x26c50>
    1a9c:	4a2c0568 	bmi	b03044 <__bss_end+0x9d59e4>
    1aa0:	054a1a05 	strbeq	r1, [sl, #-2565]	; 0xfffff5fb
    1aa4:	06056713 			; <UNDEFINED> instruction: 0x06056713
    1aa8:	4b1d054f 	blmi	742fec <__bss_end+0x61598c>
    1aac:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    1ab0:	04054a4d 	streq	r4, [r5], #-2637	; 0xfffff5b3
    1ab4:	4c11054a 	cfldr32mi	mvfx0, [r1], {74}	; 0x4a
    1ab8:	054a2305 	strbeq	r2, [sl, #-773]	; 0xfffffcfb
    1abc:	20054a05 	andcs	r4, r5, r5, lsl #20
    1ac0:	4a2d054d 	bmi	b42ffc <__bss_end+0xa1599c>
    1ac4:	054a3e05 	strbeq	r3, [sl, #-3589]	; 0xfffff1fb
    1ac8:	31052e20 	tstcc	r5, r0, lsr #28
    1acc:	4a420567 	bmi	1083070 <__bss_end+0xf55a10>
    1ad0:	6a2e2505 	bvs	b8aeec <__bss_end+0xa5d88c>
    1ad4:	05a33005 	streq	r3, [r3, #5]!
    1ad8:	04054a24 	streq	r4, [r5], #-2596	; 0xfffff5dc
    1adc:	841f0551 	ldrhi	r0, [pc], #-1361	; 1ae4 <_start-0xe51c>
    1ae0:	02680105 	rsbeq	r0, r8, #1073741825	; 0x40000001
    1ae4:	0101000c 	tsteq	r1, ip
    1ae8:	000002f6 	strdeq	r0, [r0], -r6
    1aec:	00d50003 	sbcseq	r0, r5, r3
    1af0:	01020000 	mrseq	r0, (UNDEF: 2)
    1af4:	000d0efb 	strdeq	r0, [sp], -fp
    1af8:	01010101 	tsteq	r1, r1, lsl #2
    1afc:	01000000 	mrseq	r0, (UNDEF: 0)
    1b00:	2f010000 	svccs	0x00010000
    1b04:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1b08:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
    1b0c:	2f796361 	svccs	0x00796361
    1b10:	61786548 	cmnvs	r8, r8, asr #10
    1b14:	2f686372 	svccs	0x00686372
    1b18:	2f637273 	svccs	0x00637273
    1b1c:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1b20:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1b24:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    1b28:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1b2c:	534f5452 	movtpl	r5, #62546	; 0xf452
    1b30:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
    1b34:	442f5346 	strtmi	r5, [pc], #-838	; 1b3c <_start-0xe4c4>
    1b38:	006f6d65 	rsbeq	r6, pc, r5, ror #26
    1b3c:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1b40:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1b44:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1b48:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1b4c:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1b50:	61652d65 	cmnvs	r5, r5, ror #26
    1b54:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    1b58:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    1b5c:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    1b60:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1b64:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    1b68:	2f656d6f 	svccs	0x00656d6f
    1b6c:	616e756c 	cmnvs	lr, ip, ror #10
    1b70:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1b74:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
    1b78:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
    1b7c:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
    1b80:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1b84:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1b88:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1b8c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1b90:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1b94:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    1b98:	61462f53 	cmpvs	r6, r3, asr pc
    1b9c:	2f534674 	svccs	0x00534674
    1ba0:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1ba4:	00006563 	andeq	r6, r0, r3, ror #10
    1ba8:	6e69616d 	powvsez	f6, f1, #5.0
    1bac:	0100632e 	tsteq	r0, lr, lsr #6
    1bb0:	74730000 	ldrbtvc	r0, [r3], #-0
    1bb4:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    1bb8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    1bbc:	66660000 	strbtvs	r0, [r6], -r0
    1bc0:	0300682e 	movweq	r6, #2094	; 0x82e
    1bc4:	05000000 	streq	r0, [r0, #-0]
    1bc8:	02050018 	andeq	r0, r5, #24
    1bcc:	0002424c 	andeq	r4, r2, ip, asr #4
    1bd0:	0100d003 	tsteq	r0, r3
    1bd4:	059f0b05 	ldreq	r0, [pc, #2821]	; 26e1 <_start-0xd91f>
    1bd8:	0402000c 	streq	r0, [r2], #-12
    1bdc:	15052e01 	strne	r2, [r5, #-3585]	; 0xfffff1ff
    1be0:	01040200 	mrseq	r0, R12_usr
    1be4:	000b054a 	andeq	r0, fp, sl, asr #10
    1be8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    1bec:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
    1bf0:	01052e0e 	tsteq	r5, lr, lsl #28
    1bf4:	bc1f054b 	cfldr32lt	mvfx0, [pc], {75}	; 0x4b
    1bf8:	05830b05 	streq	r0, [r3, #2821]	; 0xb05
    1bfc:	09052f15 	stmdbeq	r5, {r0, r2, r4, r8, r9, sl, fp, sp}
    1c00:	650c0566 	strvs	r0, [ip, #-1382]	; 0xfffffa9a
    1c04:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    1c08:	22054d01 	andcs	r4, r5, #1, 26	; 0x40
    1c0c:	a0090585 	andge	r0, r9, r5, lsl #11
    1c10:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
    1c14:	18056709 	stmdane	r5, {r0, r3, r8, r9, sl, sp, lr}
    1c18:	080e056c 	stmdaeq	lr, {r2, r3, r5, r6, r8, sl}
    1c1c:	6618053c 			; <UNDEFINED> instruction: 0x6618053c
    1c20:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
    1c24:	0b05670d 	bleq	15b860 <__bss_end+0x2e200>
    1c28:	09056c9c 	stmdbeq	r5, {r2, r3, r4, r7, sl, fp, sp, lr}
    1c2c:	080b052f 	stmdaeq	fp, {r0, r1, r2, r3, r5, r8, sl}
    1c30:	6901051f 	stmdbvs	r1, {r0, r1, r2, r3, r4, r8, sl}
    1c34:	05682505 	strbeq	r2, [r8, #-1285]!	; 0xfffffafb
    1c38:	054b9f05 	strbeq	r9, [fp, #-3845]	; 0xfffff0fb
    1c3c:	13300215 	teqne	r0, #1342177281	; 0x50000001
    1c40:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c44:	09052f1b 	stmdbeq	r5, {r0, r1, r3, r4, r8, r9, sl, fp, sp}
    1c48:	2f1a054a 	svccs	0x001a054a
    1c4c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c50:	09052f1c 	stmdbeq	r5, {r2, r3, r4, r8, r9, sl, fp, sp}
    1c54:	2f1a054a 	svccs	0x001a054a
    1c58:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c5c:	09052f1a 	stmdbeq	r5, {r1, r3, r4, r8, r9, sl, fp, sp}
    1c60:	2f1f054a 	svccs	0x001f054a
    1c64:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c68:	09052f19 	stmdbeq	r5, {r0, r3, r4, r8, r9, sl, fp, sp}
    1c6c:	2f18054a 	svccs	0x0018054a
    1c70:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c74:	09052f21 	stmdbeq	r5, {r0, r5, r8, r9, sl, fp, sp}
    1c78:	2f22054a 	svccs	0x0022054a
    1c7c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c80:	09052f20 	stmdbeq	r5, {r5, r8, r9, sl, fp, sp}
    1c84:	2f1e054a 	svccs	0x001e054a
    1c88:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c8c:	09052f20 	stmdbeq	r5, {r5, r8, r9, sl, fp, sp}
    1c90:	2f1f054a 	svccs	0x001f054a
    1c94:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c98:	09052f1a 	stmdbeq	r5, {r1, r3, r4, r8, r9, sl, fp, sp}
    1c9c:	2f19054a 	svccs	0x0019054a
    1ca0:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1ca4:	09052f22 	stmdbeq	r5, {r1, r5, r8, r9, sl, fp, sp}
    1ca8:	2f26054a 	svccs	0x0026054a
    1cac:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1cb0:	09052f24 	stmdbeq	r5, {r2, r5, r8, r9, sl, fp, sp}
    1cb4:	2f12054a 	svccs	0x0012054a
    1cb8:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1cbc:	01053005 	tsteq	r5, r5
    1cc0:	0212054b 	andseq	r0, r2, #314572800	; 0x12c00000
    1cc4:	01051434 	tsteq	r5, r4, lsr r4
    1cc8:	841a054d 	ldrhi	r0, [sl], #-1357	; 0xfffffab3
    1ccc:	05850905 	streq	r0, [r5, #2309]	; 0x905
    1cd0:	0402000a 	streq	r0, [r2], #-10
    1cd4:	09054c01 	stmdbeq	r5, {r0, sl, fp, lr}
    1cd8:	01040200 	mrseq	r0, R12_usr
    1cdc:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1ce0:	0a056701 	beq	15b8ec <__bss_end+0x2e28c>
    1ce4:	01040200 	mrseq	r0, R12_usr
    1ce8:	341a0548 	ldrcc	r0, [sl], #-1352	; 0xfffffab8
    1cec:	05850905 	streq	r0, [r5, #2309]	; 0x905
    1cf0:	0402000a 	streq	r0, [r2], #-10
    1cf4:	09054c01 	stmdbeq	r5, {r0, sl, fp, lr}
    1cf8:	01040200 	mrseq	r0, R12_usr
    1cfc:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1d00:	02004b01 	andeq	r4, r0, #1024	; 0x400
    1d04:	05670104 	strbeq	r0, [r7, #-260]!	; 0xfffffefc
    1d08:	0402000a 	streq	r0, [r2], #-10
    1d0c:	1f054701 	svcne	0x00054701
    1d10:	03050535 	movweq	r0, #21813	; 0x5535
    1d14:	054d820c 	strbeq	r8, [sp, #-524]	; 0xfffffdf4
    1d18:	1c058509 	cfstr32ne	mvfx8, [r5], {9}
    1d1c:	2e080566 	cfsh32cs	mvfx0, mvfx8, #54
    1d20:	4b4b0905 	blmi	12c413c <__bss_end+0x1196adc>
    1d24:	3205054b 	andcc	r0, r5, #314572800	; 0x12c00000
    1d28:	d711054c 	ldrle	r0, [r1, -ip, asr #10]
    1d2c:	054c0b05 	strbeq	r0, [ip, #-2821]	; 0xfffff4fb
    1d30:	05590808 	ldrbeq	r0, [r9, #-2056]	; 0xfffff7f8
    1d34:	674b6709 	strbvs	r6, [fp, -r9, lsl #14]
    1d38:	0505304b 	streq	r3, [r5, #-75]	; 0xffffffb5
    1d3c:	054b4d4e 	strbeq	r4, [fp, #-3406]	; 0xfffff2b2
    1d40:	08059f0b 	stmdaeq	r5, {r0, r1, r3, r8, r9, sl, fp, ip, pc}
    1d44:	670905d8 			; <UNDEFINED> instruction: 0x670905d8
    1d48:	054b674b 	strbeq	r6, [fp, #-1867]	; 0xfffff8b5
    1d4c:	0c053105 	stfeqs	f3, [r5], {5}
    1d50:	4b0b054e 	blmi	2c3290 <__bss_end+0x195c30>
    1d54:	3d080805 	stccc	8, cr0, [r8, #-20]	; 0xffffffec
    1d58:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    1d5c:	0c054b0f 			; <UNDEFINED> instruction: 0x0c054b0f
    1d60:	4b0d052e 	blmi	343220 <__bss_end+0x215bc0>
    1d64:	05671605 	strbeq	r1, [r7, #-1541]!	; 0xfffff9fb
    1d68:	0d052e13 	stceq	14, cr2, [r5, #-76]	; 0xffffffb4
    1d6c:	6716054b 	ldrvs	r0, [r6, -fp, asr #10]
    1d70:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    1d74:	16054b0d 	strne	r4, [r5], -sp, lsl #22
    1d78:	2e130567 	cfmsc32cs	mvfx0, mvfx3, mvfx7
    1d7c:	684b0d05 	stmdavs	fp, {r0, r2, r8, sl, fp}^
    1d80:	054f0505 	strbeq	r0, [pc, #-1285]	; 1883 <_start-0xe77d>
    1d84:	08054b0b 	stmdaeq	r5, {r0, r1, r3, r8, r9, fp, lr}
    1d88:	670905f4 			; <UNDEFINED> instruction: 0x670905f4
    1d8c:	05681505 	strbeq	r1, [r8, #-1285]!	; 0xfffffafb
    1d90:	0c054b0f 			; <UNDEFINED> instruction: 0x0c054b0f
    1d94:	0d055a08 	vstreq	s10, [r5, #-32]	; 0xffffffe0
    1d98:	09056867 	stmdbeq	r5, {r0, r1, r2, r5, r6, fp, sp, lr}
    1d9c:	0585834d 	streq	r8, [r5, #845]	; 0x34d
    1da0:	0c054b0f 			; <UNDEFINED> instruction: 0x0c054b0f
    1da4:	670d05f4 			; <UNDEFINED> instruction: 0x670d05f4
    1da8:	d8130568 	ldmdale	r3, {r3, r5, r6, r8, sl}
    1dac:	5a081005 	bpl	205dc8 <__bss_end+0xd8768>
    1db0:	68671105 	stmdavs	r7!, {r0, r2, r8, ip}^
    1db4:	a10d054b 	tstge	sp, fp, asr #10
    1db8:	05860505 	streq	r0, [r6, #1285]	; 0x505
    1dbc:	04020009 	streq	r0, [r2], #-9
    1dc0:	01054e01 	tsteq	r5, r1, lsl #28
    1dc4:	02090368 	andeq	r0, r9, #104, 6	; 0xa0000001
    1dc8:	0505013a 	streq	r0, [r5, #-314]	; 0xfffffec6
    1dcc:	684c2f67 	stmdavs	ip, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
    1dd0:	91089108 	tstls	r8, r8, lsl #2
    1dd4:	0a059208 	beq	1665fc <__bss_end+0x38f9c>
    1dd8:	01040200 	mrseq	r0, R12_usr
    1ddc:	00100234 	andseq	r0, r0, r4, lsr r2
    1de0:	25050101 	strcs	r0, [r5, #-257]	; 0xfffffeff
    1de4:	00030000 	andeq	r0, r3, r0
    1de8:	000000a6 	andeq	r0, r0, r6, lsr #1
    1dec:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1df0:	0101000d 	tsteq	r1, sp
    1df4:	00000101 	andeq	r0, r0, r1, lsl #2
    1df8:	00000100 	andeq	r0, r0, r0, lsl #2
    1dfc:	6f682f01 	svcvs	0x00682f01
    1e00:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 1c54 <_start-0xe3ac>
    1e04:	63616e75 	cmnvs	r1, #1872	; 0x750
    1e08:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    1e0c:	63726178 	cmnvs	r2, #120, 2
    1e10:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    1e14:	61522f63 	cmpvs	r2, r3, ror #30
    1e18:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1e1c:	50797272 	rsbspl	r7, r9, r2, ror r2
    1e20:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1e24:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1e28:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    1e2c:	53467461 	movtpl	r7, #25697	; 0x6461
    1e30:	7461462f 	strbtvc	r4, [r1], #-1583	; 0xfffff9d1
    1e34:	532f5346 			; <UNDEFINED> instruction: 0x532f5346
    1e38:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1e3c:	752f0065 	strvc	r0, [pc, #-101]!	; 1ddf <_start-0xe221>
    1e40:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1c7c <_start-0xe384>
    1e44:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1e48:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    1e4c:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1e50:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1e54:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1e58:	2e30312f 	rsfcssp	f3, f0, #10.0
    1e5c:	2f312e33 	svccs	0x00312e33
    1e60:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1e64:	00656475 	rsbeq	r6, r5, r5, ror r4
    1e68:	2e666600 	cdpcs	6, 6, cr6, cr6, cr0, {0}
    1e6c:	00010063 	andeq	r0, r1, r3, rrx
    1e70:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1e74:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1e78:	00020068 	andeq	r0, r2, r8, rrx
    1e7c:	2e666600 	cdpcs	6, 6, cr6, cr6, cr0, {0}
    1e80:	00010068 	andeq	r0, r1, r8, rrx
    1e84:	73696400 	cmnvc	r9, #0, 8
    1e88:	2e6f696b 	vnmulcs.f16	s13, s30, s23	; <UNPREDICTABLE>
    1e8c:	00010068 	andeq	r0, r1, r8, rrx
    1e90:	01050000 	mrseq	r0, (UNDEF: 5)
    1e94:	30020500 	andcc	r0, r2, r0, lsl #10
    1e98:	0300024b 	movweq	r0, #587	; 0x24b
    1e9c:	050104ec 	streq	r0, [r1, #-1260]	; 0xfffffb14
    1ea0:	0505850a 	streq	r8, [r5, #-1290]	; 0xfffffaf6
    1ea4:	2f0a0566 	svccs	0x000a0566
    1ea8:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
    1eac:	0f052e14 	svceq	0x00052e14
    1eb0:	4a050566 	bmi	143450 <__bss_end+0x15df0>
    1eb4:	052f0905 	streq	r0, [pc, #-2309]!	; 15b7 <_start-0xea49>
    1eb8:	05852f01 	streq	r2, [r5, #3841]	; 0xf01
    1ebc:	0505850a 	streq	r8, [r5, #-1290]	; 0xfffffaf6
    1ec0:	2f0a0566 	svccs	0x000a0566
    1ec4:	054a1405 	strbeq	r1, [sl, #-1029]	; 0xfffffbfb
    1ec8:	0a056605 	beq	15b6e4 <__bss_end+0x2e084>
    1ecc:	4a14054b 	bmi	503400 <__bss_end+0x3d5da0>
    1ed0:	05660505 	strbeq	r0, [r6, #-1285]!	; 0xfffffafb
    1ed4:	14054b0a 	strne	r4, [r5], #-2826	; 0xfffff4f6
    1ed8:	4a05054a 	bmi	143408 <__bss_end+0x15da8>
    1edc:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    1ee0:	15032f01 	strne	r2, [r3, #-3841]	; 0xfffff0ff
    1ee4:	bb060582 	bllt	1834f4 <__bss_end+0x55e94>
    1ee8:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
    1eec:	1a054a09 	bne	154718 <__bss_end+0x270b8>
    1ef0:	6706052e 	strvs	r0, [r6, -lr, lsr #10]
    1ef4:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
    1ef8:	01054a09 	tsteq	r5, r9, lsl #20
    1efc:	0605852f 	streq	r8, [r5], -pc, lsr #10
    1f00:	660b059f 			; <UNDEFINED> instruction: 0x660b059f
    1f04:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1f08:	06052e1a 			; <UNDEFINED> instruction: 0x06052e1a
    1f0c:	660b0567 	strvs	r0, [fp], -r7, ror #10
    1f10:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1f14:	06052e1a 			; <UNDEFINED> instruction: 0x06052e1a
    1f18:	660b0567 	strvs	r0, [fp], -r7, ror #10
    1f1c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1f20:	06052e1a 			; <UNDEFINED> instruction: 0x06052e1a
    1f24:	660b0567 	strvs	r0, [fp], -r7, ror #10
    1f28:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1f2c:	19032f01 	stmdbne	r3, {r0, r8, r9, sl, fp, sp}
    1f30:	03050582 	movweq	r0, #21890	; 0x5582
    1f34:	15059e0c 	strne	r9, [r5, #-3596]	; 0xfffff1f4
    1f38:	01040200 	mrseq	r0, R12_usr
    1f3c:	4c090566 	cfstr32mi	mvfx0, [r9], {102}	; 0x66
    1f40:	872f0105 	strhi	r0, [pc, -r5, lsl #2]!
    1f44:	0e030505 	cfsh32eq	mvfx0, mvfx3, #5
    1f48:	0015059e 	mulseq	r5, lr, r5
    1f4c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1f50:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
    1f54:	c9032f01 	stmdbgt	r3, {r0, r8, r9, sl, fp, sp}
    1f58:	0a058202 	beq	162768 <__bss_end+0x35108>
    1f5c:	4d080583 	cfstr32mi	mvfx0, [r8, #-524]	; 0xfffffdf4
    1f60:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    1f64:	1e054b07 	vmlane.f64	d4, d5, d7
    1f68:	4a07054a 	bmi	1c3498 <__bss_end+0x95e38>
    1f6c:	059e0605 	ldreq	r0, [lr, #1541]	; 0x605
    1f70:	0a054b0e 	beq	154bb0 <__bss_end+0x27550>
    1f74:	4a180567 	bmi	603518 <__bss_end+0x4d5eb8>
    1f78:	054a1405 	strbeq	r1, [sl, #-1029]	; 0xfffffbfb
    1f7c:	07052e26 	streq	r2, [r5, -r6, lsr #28]
    1f80:	4b0b054a 	blmi	2c34b0 <__bss_end+0x195e50>
    1f84:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    1f88:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    1f8c:	31054a01 	tstcc	r5, r1, lsl #20
    1f90:	01040200 	mrseq	r0, R12_usr
    1f94:	003a054a 	eorseq	r0, sl, sl, asr #10
    1f98:	4a010402 	bmi	42fa8 <ramdisk+0x15950>
    1f9c:	02004805 	andeq	r4, r0, #327680	; 0x50000
    1fa0:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1fa4:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    1fa8:	08054a01 	stmdaeq	r5, {r0, r9, fp, lr}
    1fac:	4d090585 	cfstr32mi	mvfx0, [r9, #-532]	; 0xfffffdec
    1fb0:	6e2f0105 	sufvse	f0, f7, f5
    1fb4:	059f0a05 	ldreq	r0, [pc, #2565]	; 29c1 <_start-0xd63f>
    1fb8:	05054d10 	streq	r4, [r5, #-3344]	; 0xfffff2f0
    1fbc:	6809054a 	stmdavs	r9, {r1, r3, r6, r8, sl}
    1fc0:	05840605 	streq	r0, [r4, #1541]	; 0x605
    1fc4:	1e056708 	cdpne	7, 0, cr6, cr5, cr8, {0}
    1fc8:	4a08054a 	bmi	2034f8 <__bss_end+0xd5e98>
    1fcc:	05820705 	streq	r0, [r2, #1797]	; 0x705
    1fd0:	09054b0a 	stmdbeq	r5, {r1, r3, r8, r9, fp, lr}
    1fd4:	4c10054b 	cfldr32mi	mvfx0, [r0], {75}	; 0x4b
    1fd8:	05690905 	strbeq	r0, [r9, #-2309]!	; 0xfffff6fb
    1fdc:	0d032f01 	stceq	15, cr2, [r3, #-4]
    1fe0:	86080566 	strhi	r0, [r8], -r6, ror #10
    1fe4:	05830505 	streq	r0, [r3, #1285]	; 0x505
    1fe8:	06056709 	streq	r6, [r5], -r9, lsl #14
    1fec:	4b11054a 	blmi	44351c <__bss_end+0x315ebc>
    1ff0:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
    1ff4:	0e054a07 	vmlaeq.f32	s8, s10, s14
    1ff8:	4a05054c 	bmi	143530 <__bss_end+0x15ed0>
    1ffc:	05830e05 	streq	r0, [r3, #3589]	; 0xe05
    2000:	0e054a05 	vmlaeq.f32	s8, s10, s10
    2004:	4a050567 	bmi	1435a8 <__bss_end+0x15f48>
    2008:	05830e05 	streq	r0, [r3, #3589]	; 0xe05
    200c:	0e054a05 	vmlaeq.f32	s8, s10, s10
    2010:	4a0505bb 	bmi	143704 <__bss_end+0x160a4>
    2014:	05bb0e05 	ldreq	r0, [fp, #3589]!	; 0xe05
    2018:	059f4a05 	ldreq	r4, [pc, #2565]	; 2a25 <_start-0xd5db>
    201c:	33054a1c 	movwcc	r4, #23068	; 0x5a1c
    2020:	4a3d054a 	bmi	f43550 <__bss_end+0xe15ef0>
    2024:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    2028:	05054a25 	streq	r4, [r5, #-2597]	; 0xfffff5db
    202c:	0307054a 	movweq	r0, #30026	; 0x754a
    2030:	06054a10 			; <UNDEFINED> instruction: 0x06054a10
    2034:	003905d6 	ldrsbteq	r0, [r9], -r6
    2038:	4a010402 	bmi	43048 <ramdisk+0x159f0>
    203c:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    2040:	0e032f01 	cdpeq	15, 0, cr2, cr3, cr1, {0}
    2044:	9f0705ba 	svcls	0x000705ba
    2048:	05671005 	strbeq	r1, [r7, #-5]!
    204c:	05054a1b 	streq	r4, [r5, #-2587]	; 0xfffff5e5
    2050:	0027052e 	eoreq	r0, r7, lr, lsr #10
    2054:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2058:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    205c:	18054a21 	stmdane	r5, {r0, r5, r9, fp, lr}
    2060:	2e29054a 	cfsh64cs	mvdx0, mvdx9, #42
    2064:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
    2068:	0d032f01 	stceq	15, cr2, [r3, #-4]
    206c:	a1090582 	smlabbge	r9, r2, r5, r0
    2070:	05690505 	strbeq	r0, [r9, #-1285]!	; 0xfffffafb
    2074:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    2078:	0f056601 	svceq	0x00056601
    207c:	01040200 	mrseq	r0, R12_usr
    2080:	6707054a 	strvs	r0, [r7, -sl, asr #10]
    2084:	4c0d0569 	cfstr32mi	mvfx0, [sp], {105}	; 0x69
    2088:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    208c:	05220807 	streq	r0, [r2, #-2055]!	; 0xfffff7f9
    2090:	18054a1e 	stmdane	r5, {r1, r2, r3, r4, r9, fp, lr}
    2094:	671a054a 	ldrvs	r0, [sl, -sl, asr #10]
    2098:	054a2a05 	strbeq	r2, [sl, #-2565]	; 0xfffff5fb
    209c:	07054a08 	streq	r4, [r5, -r8, lsl #20]
    20a0:	4b13059e 	blmi	4c3720 <__bss_end+0x3960c0>
    20a4:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    20a8:	07054a10 	smladeq	r5, r0, sl, r4
    20ac:	2f1a0566 	svccs	0x001a0566
    20b0:	054a2a05 	strbeq	r2, [sl, #-2565]	; 0xfffff5fb
    20b4:	07054a08 	streq	r4, [r5, -r8, lsl #20]
    20b8:	4b15059e 	blmi	543738 <__bss_end+0x4160d8>
    20bc:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
    20c0:	0705661f 	smladeq	r5, pc, r6, r6	; <UNPREDICTABLE>
    20c4:	6710054a 	ldrvs	r0, [r0, -sl, asr #10]
    20c8:	004a2105 	subeq	r2, sl, r5, lsl #2
    20cc:	06010402 	streq	r0, [r1], -r2, lsl #8
    20d0:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    20d4:	08056602 	stmdaeq	r5, {r1, r9, sl, sp, lr}
    20d8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    20dc:	04056606 	streq	r6, [r5], #-1542	; 0xfffff9fa
    20e0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    20e4:	311a052f 	tstcc	sl, pc, lsr #10
    20e8:	054a2c05 	strbeq	r2, [sl, #-3077]	; 0xfffff3fb
    20ec:	07054a08 	streq	r4, [r5, -r8, lsl #20]
    20f0:	4b12059e 	blmi	483770 <__bss_end+0x356110>
    20f4:	054a2105 	strbeq	r2, [sl, #-261]	; 0xfffffefb
    20f8:	0a054a25 	beq	154994 <__bss_end+0x27334>
    20fc:	8208054a 	andhi	r0, r8, #310378496	; 0x12800000
    2100:	052f0405 	streq	r0, [pc, #-1029]!	; 1d03 <_start-0xe2fd>
    2104:	2c05311a 	stfcss	f3, [r5], {26}
    2108:	4a08054a 	bmi	203638 <__bss_end+0xd5fd8>
    210c:	059e0705 	ldreq	r0, [lr, #1797]	; 0x705
    2110:	22054b13 	andcs	r4, r5, #19456	; 0x4c00
    2114:	4a26054a 	bmi	983644 <__bss_end+0x855fe4>
    2118:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    211c:	04058208 	streq	r8, [r5], #-520	; 0xfffffdf8
    2120:	0308054b 	movweq	r0, #34123	; 0x854b
    2124:	04052e1d 	streq	r2, [r5], #-3613	; 0xfffff1e3
    2128:	4c665403 	cfstrdmi	mvd5, [r6], #-12
    212c:	09054f50 	stmdbeq	r5, {r4, r6, r8, r9, sl, fp, lr}
    2130:	052e2303 	streq	r2, [lr, #-771]!	; 0xfffffcfd
    2134:	0f032f01 	svceq	0x00032f01
    2138:	bd0a0582 	cfstr32lt	mvfx0, [sl, #-520]	; 0xfffffdf8
    213c:	054d0505 	strbeq	r0, [sp, #-1285]	; 0xfffffafb
    2140:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    2144:	10056601 	andne	r6, r5, r1, lsl #12
    2148:	01040200 	mrseq	r0, R12_usr
    214c:	670d054a 	strvs	r0, [sp, -sl, asr #10]
    2150:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    2154:	05220807 	streq	r0, [r2, #-2055]!	; 0xfffff7f9
    2158:	18054a1e 	stmdane	r5, {r1, r2, r3, r4, r9, fp, lr}
    215c:	671c054a 	ldrvs	r0, [ip, -sl, asr #10]
    2160:	054a2c05 	strbeq	r2, [sl, #-3077]	; 0xfffff3fb
    2164:	07054a0a 	streq	r4, [r5, -sl, lsl #20]
    2168:	670805bb 			; <UNDEFINED> instruction: 0x670805bb
    216c:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    2170:	0f059e06 	svceq	0x00059e06
    2174:	4a07054b 	bmi	1c36a8 <__bss_end+0x96048>
    2178:	02001805 	andeq	r1, r0, #327680	; 0x50000
    217c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2180:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    2184:	26056601 	strcs	r6, [r5], -r1, lsl #12
    2188:	01040200 	mrseq	r0, R12_usr
    218c:	0030054a 	eorseq	r0, r0, sl, asr #10
    2190:	4a010402 	bmi	431a0 <ramdisk+0x15b48>
    2194:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
    2198:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    219c:	04020007 	streq	r0, [r2], #-7
    21a0:	02006601 	andeq	r6, r0, #1048576	; 0x100000
    21a4:	4a060204 	bmi	1829bc <__bss_end+0x5535c>
    21a8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    21ac:	000e054a 	andeq	r0, lr, sl, asr #10
    21b0:	06040402 	streq	r0, [r4], -r2, lsl #8
    21b4:	001c054b 	andseq	r0, ip, fp, asr #10
    21b8:	67040402 	strvs	r0, [r4, -r2, lsl #8]
    21bc:	02002c05 	andeq	r2, r0, #1280	; 0x500
    21c0:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
    21c4:	0402000a 	streq	r0, [r2], #-10
    21c8:	07054a04 	streq	r4, [r5, -r4, lsl #20]
    21cc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    21d0:	670805bb 			; <UNDEFINED> instruction: 0x670805bb
    21d4:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
    21d8:	0f056606 	svceq	0x00056606
    21dc:	4a07054b 	bmi	1c3710 <__bss_end+0x960b0>
    21e0:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
    21e4:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    21e8:	04020007 	streq	r0, [r2], #-7
    21ec:	2b054a01 	blcs	1549f8 <__bss_end+0x27398>
    21f0:	02040200 	andeq	r0, r4, #0, 4
    21f4:	002e054a 	eoreq	r0, lr, sl, asr #10
    21f8:	66020402 	strvs	r0, [r2], -r2, lsl #8
    21fc:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
    2200:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    2204:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    2208:	4a054a02 	bmi	154a18 <__bss_end+0x273b8>
    220c:	02040200 	andeq	r0, r4, #0, 4
    2210:	0036052e 	eorseq	r0, r6, lr, lsr #10
    2214:	4a020402 	bmi	83224 <ramdisk+0x55bcc>
    2218:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    221c:	004a0204 	subeq	r0, sl, r4, lsl #4
    2220:	06040402 	streq	r0, [r4], -r2, lsl #8
    2224:	000e052e 	andeq	r0, lr, lr, lsr #10
    2228:	06040402 	streq	r0, [r4], -r2, lsl #8
    222c:	0004054b 	andeq	r0, r4, fp, asr #10
    2230:	67040402 	strvs	r0, [r4, -r2, lsl #8]
    2234:	05311c05 	ldreq	r1, [r1, #-3077]!	; 0xfffff3fb
    2238:	0a054a2e 	beq	154af8 <__bss_end+0x27498>
    223c:	bb07054a 	bllt	1c376c <__bss_end+0x9610c>
    2240:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
    2244:	1f054a1b 	svcne	0x00054a1b
    2248:	4a04054a 	bmi	103778 <ramdisk+0xd6120>
    224c:	05bb0e05 	ldreq	r0, [fp, #3589]!	; 0xe05
    2250:	1c056704 	stcne	7, cr6, [r5], {4}
    2254:	4a2e0534 	bmi	b8372c <__bss_end+0xa560cc>
    2258:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
    225c:	1005bb07 	andne	fp, r5, r7, lsl #22
    2260:	4a2a0568 	bmi	a83808 <__bss_end+0x9561a8>
    2264:	054a3905 	strbeq	r3, [sl, #-2309]	; 0xfffff6fb
    2268:	21054a3d 	tstcs	r5, sp, lsr sl
    226c:	8247052e 	subhi	r0, r7, #192937984	; 0xb800000
    2270:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    2274:	1c054c0d 	stcne	12, cr4, [r5], {13}
    2278:	4a20054a 	bmi	8037a8 <__bss_end+0x6d6148>
    227c:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
    2280:	0405830e 	streq	r8, [r5], #-782	; 0xfffffcf2
    2284:	30020567 	andcc	r0, r2, r7, ror #10
    2288:	61030405 	tstvs	r3, r5, lsl #8
    228c:	03524f4a 	cmpeq	r2, #296	; 0x128
    2290:	09054a0a 	stmdbeq	r5, {r1, r3, r9, fp, lr}
    2294:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    2298:	92032f01 	andls	r2, r3, #1, 30
    229c:	0a058201 	beq	162aa8 <__bss_end+0x35448>
    22a0:	4c0905bb 	cfstr32mi	mvfx0, [r9], {187}	; 0xbb
    22a4:	056e0505 	strbeq	r0, [lr, #-1285]!	; 0xfffffafb
    22a8:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    22ac:	0f056602 	svceq	0x00056602
    22b0:	02040200 	andeq	r0, r4, #0, 4
    22b4:	002f054a 	eoreq	r0, pc, sl, asr #10
    22b8:	66030402 	strvs	r0, [r3], -r2, lsl #8
    22bc:	054d0505 	strbeq	r0, [sp, #-1285]	; 0xfffffafb
    22c0:	06056709 	streq	r6, [r5], -r9, lsl #14
    22c4:	001c05bb 			; <UNDEFINED> instruction: 0x001c05bb
    22c8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    22cc:	054f0905 	strbeq	r0, [pc, #-2309]	; 19cf <_start-0xe631>
    22d0:	05678306 	strbeq	r8, [r7, #-774]!	; 0xfffffcfa
    22d4:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    22d8:	06056601 	streq	r6, [r5], -r1, lsl #12
    22dc:	0021054b 	eoreq	r0, r1, fp, asr #10
    22e0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    22e4:	054c0a05 	strbeq	r0, [ip, #-2565]	; 0xfffff5fb
    22e8:	1d05bb07 	vstrne	d11, [r5, #-28]	; 0xffffffe4
    22ec:	01040200 	mrseq	r0, R12_usr
    22f0:	4c090566 	cfstr32mi	mvfx0, [r9], {102}	; 0x66
    22f4:	054a1905 	strbeq	r1, [sl, #-2309]	; 0xfffff6fb
    22f8:	06054a24 	streq	r4, [r5], -r4, lsr #20
    22fc:	11054b2e 	tstne	r5, lr, lsr #22
    2300:	0805674a 	stmdaeq	r5, {r1, r3, r6, r8, r9, sl, sp, lr}
    2304:	05ba1403 	ldreq	r1, [sl, #1027]!	; 0x403
    2308:	02054b14 	andeq	r4, r5, #20, 22	; 0x5000
    230c:	0303054a 	movweq	r0, #13642	; 0x354a
    2310:	09058262 	stmdbeq	r5, {r1, r5, r6, r9, pc}
    2314:	052e3a03 	streq	r3, [lr, #-2563]!	; 0xfffff5fd
    2318:	0d032f01 	stceq	15, cr2, [r3, #-4]
    231c:	a1090566 	tstge	r9, r6, ror #10
    2320:	05690505 	strbeq	r0, [r9, #-1285]!	; 0xfffffafb
    2324:	06056707 	streq	r6, [r5], -r7, lsl #14
    2328:	001c0567 	andseq	r0, ip, r7, ror #10
    232c:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2330:	02001005 	andeq	r1, r0, #5
    2334:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    2338:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    233c:	08056603 	stmdaeq	r5, {r0, r1, r9, sl, sp, lr}
    2340:	83060569 	movwhi	r0, #25961	; 0x6569
    2344:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    2348:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    234c:	20054b06 	andcs	r4, r5, r6, lsl #22
    2350:	01040200 	mrseq	r0, R12_usr
    2354:	4b0e0566 	blmi	3838f4 <__bss_end+0x256294>
    2358:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    235c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    2360:	07056601 	streq	r6, [r5, -r1, lsl #12]
    2364:	4c08054b 	cfstr32mi	mvfx0, [r8], {75}	; 0x4b
    2368:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    236c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    2370:	07054a01 	streq	r4, [r5, -r1, lsl #20]
    2374:	054a1d03 	strbeq	r1, [sl, #-3331]	; 0xfffff2fd
    2378:	08054b06 	stmdaeq	r5, {r1, r2, r8, r9, fp, lr}
    237c:	67110583 	ldrvs	r0, [r1, -r3, lsl #11]
    2380:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    2384:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    2388:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    238c:	8307054b 	movwhi	r0, #30027	; 0x754b
    2390:	02001005 	andeq	r1, r0, #5
    2394:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    2398:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    239c:	07056603 	streq	r6, [r5, -r3, lsl #12]
    23a0:	6708054b 	strvs	r0, [r8, -fp, asr #10]
    23a4:	001b0567 	andseq	r0, fp, r7, ror #10
    23a8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    23ac:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
    23b0:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    23b4:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    23b8:	09056602 	stmdbeq	r5, {r1, r9, sl, sp, lr}
    23bc:	4d06054b 	cfstr32mi	mvfx0, [r6, #-300]	; 0xfffffed4
    23c0:	4c670805 	stclmi	8, cr0, [r7], #-20	; 0xffffffec
    23c4:	05671205 	strbeq	r1, [r7, #-517]!	; 0xfffffdfb
    23c8:	0a054a08 	beq	154bf0 <__bss_end+0x27590>
    23cc:	4b090567 	blmi	243970 <__bss_end+0x116310>
    23d0:	02001c05 	andeq	r1, r0, #1280	; 0x500
    23d4:	05820104 	streq	r0, [r2, #260]	; 0x104
    23d8:	08054c0a 	stmdaeq	r5, {r1, r3, sl, fp, lr}
    23dc:	11056783 	smlabbne	r5, r3, r7, r6
    23e0:	02040200 	andeq	r0, r4, #0, 4
    23e4:	002d0566 	eoreq	r0, sp, r6, ror #10
    23e8:	66030402 	strvs	r0, [r3], -r2, lsl #8
    23ec:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    23f0:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    23f4:	05058201 	streq	r8, [r5, #-513]	; 0xfffffdff
    23f8:	33090548 	movwcc	r0, #38216	; 0x9548
    23fc:	05bb0605 	ldreq	r0, [fp, #1541]!	; 0x605
    2400:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    2404:	0a056601 	beq	15bc10 <__bss_end+0x2e5b0>
    2408:	be050567 	cfsh32lt	mvfx0, mvfx5, #55
    240c:	05671105 	strbeq	r1, [r7, #-261]!	; 0xfffffefb
    2410:	06056709 	streq	r6, [r5], -r9, lsl #14
    2414:	001e054a 	andseq	r0, lr, sl, asr #10
    2418:	4a010402 	bmi	43428 <ramdisk+0x15dd0>
    241c:	02002f05 	andeq	r2, r0, #5, 30
    2420:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2424:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
    2428:	19054a01 	stmdbne	r5, {r0, r9, fp, lr}
    242c:	01040200 	mrseq	r0, R12_usr
    2430:	4b06052e 	blmi	1838f0 <__bss_end+0x56290>
    2434:	674a1105 	strbvs	r1, [sl, -r5, lsl #2]
    2438:	00d92b05 	sbcseq	r2, r9, r5, lsl #22
    243c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2440:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    2444:	07054a02 	streq	r4, [r5, -r2, lsl #20]
    2448:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    244c:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
    2450:	2f010531 	svccs	0x00010531
    2454:	05662f03 	strbeq	r2, [r6, #-3843]!	; 0xfffff0fd
    2458:	0505a406 	streq	sl, [r5, #-1030]	; 0xfffffbfa
    245c:	00270566 	eoreq	r0, r7, r6, ror #10
    2460:	4a010402 	bmi	43470 <ramdisk+0x15e18>
    2464:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    2468:	0b05830e 	bleq	1630a8 <__bss_end+0x35a48>
    246c:	4a020567 	bmi	83a10 <ramdisk+0x563b8>
    2470:	0c030805 	stceq	8, cr0, [r3], {5}
    2474:	66170582 	ldrvs	r0, [r7], -r2, lsl #11
    2478:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    247c:	57054a03 	strpl	r4, [r5, -r3, lsl #20]
    2480:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2484:	0015052e 	andseq	r0, r5, lr, lsr #10
    2488:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
    248c:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
    2490:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2494:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    2498:	1d056603 	stcne	6, cr6, [r5, #-12]
    249c:	03040200 	movweq	r0, #16896	; 0x4200
    24a0:	11052008 	tstne	r5, r8
    24a4:	6622054c 	strtvs	r0, [r2], -ip, asr #10
    24a8:	039f0105 	orrseq	r0, pc, #1073741825	; 0x40000001
    24ac:	0905660e 	stmdbeq	r5, {r1, r2, r3, r9, sl, sp, lr}
    24b0:	690505a0 	stmdbvs	r5, {r5, r7, r8, sl}
    24b4:	02005d05 	andeq	r5, r0, #320	; 0x140
    24b8:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    24bc:	04020056 	streq	r0, [r2], #-86	; 0xffffffaa
    24c0:	0a054a01 	beq	154ccc <__bss_end+0x2766c>
    24c4:	4c0b054b 	cfstr32mi	mvfx0, [fp], {75}	; 0x4b
    24c8:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
    24cc:	15056705 	strne	r6, [r5, #-1797]	; 0xfffff8fb
    24d0:	01040200 	mrseq	r0, R12_usr
    24d4:	00100566 	andseq	r0, r0, r6, ror #10
    24d8:	4a010402 	bmi	434e8 <ramdisk+0x15e90>
    24dc:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    24e0:	0b056a05 	bleq	15ccfc <__bss_end+0x2f69c>
    24e4:	4a190567 	bmi	643a88 <__bss_end+0x516428>
    24e8:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    24ec:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
    24f0:	10054a01 	andne	r4, r5, r1, lsl #20
    24f4:	4a0c054b 	bmi	303a28 <__bss_end+0x1d63c8>
    24f8:	05691205 	strbeq	r1, [r9, #-517]!	; 0xfffffdfb
    24fc:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
    2500:	2f0b054b 	svccs	0x000b054b
    2504:	059f0705 	ldreq	r0, [pc, #1797]	; 2c11 <_start-0xd3ef>
    2508:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    250c:	07056601 	streq	r6, [r5, -r1, lsl #12]
    2510:	001e054b 	andseq	r0, lr, fp, asr #10
    2514:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2518:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
    251c:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    2520:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    2524:	08056603 	stmdaeq	r5, {r0, r1, r9, sl, sp, lr}
    2528:	7e09054b 	cfsh32vc	mvfx0, mvfx9, #43
    252c:	05880e05 	streq	r0, [r8, #3589]	; 0xe05
    2530:	054c820c 	strbeq	r8, [ip, #-524]	; 0xfffffdf4
    2534:	05056708 	streq	r6, [r5, #-1800]	; 0xfffff8f8
    2538:	001c054a 	andseq	r0, ip, sl, asr #10
    253c:	4a010402 	bmi	4354c <ramdisk+0x15ef4>
    2540:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    2544:	0b054a12 	bleq	154d94 <__bss_end+0x27734>
    2548:	670c054a 	strvs	r0, [ip, -sl, asr #10]
    254c:	054a1b05 	strbeq	r1, [sl, #-2821]	; 0xfffff4fb
    2550:	0a056614 	beq	15bda8 <__bss_end+0x2e748>
    2554:	4c09052e 	cfstr32mi	mvfx0, [r9], {46}	; 0x2e
    2558:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    255c:	0905660d 	stmdbeq	r5, {r0, r2, r3, r9, sl, sp, lr}
    2560:	690a05a0 	stmdbvs	sl, {r5, r7, r8, sl}
    2564:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    2568:	60054b05 	andvs	r4, r5, r5, lsl #22
    256c:	01040200 	mrseq	r0, R12_usr
    2570:	67080566 	strvs	r0, [r8, -r6, ror #10]
    2574:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    2578:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    257c:	0a054a01 	beq	154d88 <__bss_end+0x27728>
    2580:	6605054c 	strvs	r0, [r5], -ip, asr #10
    2584:	4a0b054b 	bmi	2c3ab8 <__bss_end+0x196458>
    2588:	05680905 	strbeq	r0, [r8, #-2309]!	; 0xfffff6fb
    258c:	0c054a06 			; <UNDEFINED> instruction: 0x0c054a06
    2590:	4a1a054b 	bmi	683ac4 <__bss_end+0x556464>
    2594:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    2598:	1a054b0e 	bne	1551d8 <__bss_end+0x27b78>
    259c:	4e0d0566 	cfsh32mi	mvfx0, mvfx13, #54
    25a0:	054a1b05 	strbeq	r1, [sl, #-2821]	; 0xfffff4fb
    25a4:	16054a23 	strne	r4, [r5], -r3, lsr #20
    25a8:	2e07052e 	cfsh32cs	mvfx0, mvfx7, #30
    25ac:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    25b0:	1b05d708 	blne	1781d8 <__bss_end+0x4ab78>
    25b4:	01040200 	mrseq	r0, R12_usr
    25b8:	4b080566 	blmi	203b58 <__bss_end+0xd64f8>
    25bc:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    25c0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    25c4:	08054b13 	stmdaeq	r5, {r0, r1, r4, r8, r9, fp, lr}
    25c8:	6809054a 	stmdavs	r9, {r1, r3, r6, r8, sl}
    25cc:	05671005 	strbeq	r1, [r7, #-5]!
    25d0:	0d05661c 	stceq	6, cr6, [r5, #-112]	; 0xffffff90
    25d4:	d709054c 	strle	r0, [r9, -ip, asr #10]
    25d8:	02001c05 	andeq	r1, r0, #1280	; 0x500
    25dc:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    25e0:	1c054b09 			; <UNDEFINED> instruction: 0x1c054b09
    25e4:	01040200 	mrseq	r0, R12_usr
    25e8:	4b090566 	blmi	243b88 <__bss_end+0x116528>
    25ec:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
    25f0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    25f4:	09054b0a 	stmdbeq	r5, {r1, r3, r8, r9, fp, lr}
    25f8:	002f0582 	eoreq	r0, pc, r2, lsl #11
    25fc:	4a010402 	bmi	4360c <ramdisk+0x15fb4>
    2600:	05510f05 	ldrbeq	r0, [r1, #-3845]	; 0xfffff0fb
    2604:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
    2608:	4e0b0582 	cfsh32mi	mvfx0, mvfx11, #-62
    260c:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
    2610:	14054a1a 	strne	r4, [r5], #-2586	; 0xfffff5e6
    2614:	2e0a0566 	cfsh32cs	mvfx0, mvfx10, #54
    2618:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
    261c:	0e032f01 	cdpeq	15, 0, cr2, cr3, cr1, {0}
    2620:	a1090566 	tstge	r9, r6, ror #10
    2624:	05690805 	strbeq	r0, [r9, #-2053]!	; 0xfffff7fb
    2628:	05679f05 	strbeq	r9, [r7, #-3845]!	; 0xfffff0fb
    262c:	07054c0a 	streq	r4, [r5, -sl, lsl #24]
    2630:	6a0a05d7 	bvs	283d94 <__bss_end+0x156734>
    2634:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
    2638:	27052e07 	strcs	r2, [r5, -r7, lsl #28]
    263c:	01040200 	mrseq	r0, R12_usr
    2640:	002c054a 	eoreq	r0, ip, sl, asr #10
    2644:	4a010402 	bmi	43654 <ramdisk+0x15ffc>
    2648:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
    264c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    2650:	05054c08 	streq	r4, [r5, #-3080]	; 0xfffff3f8
    2654:	300705d6 	ldrdcc	r0, [r7], -r6
    2658:	054c0a05 	strbeq	r0, [ip, #-2565]	; 0xfffff5fb
    265c:	04059f03 	streq	r9, [r5], #-3843	; 0xfffff0fd
    2660:	05827503 	streq	r7, [r2, #1283]	; 0x503
    2664:	2e0e0305 	cdpcs	3, 0, cr0, cr14, cr5, {0}
    2668:	02001d05 	andeq	r1, r0, #320	; 0x140
    266c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2670:	01054b09 	tsteq	r5, r9, lsl #22
    2674:	660f032f 	strvs	r0, [pc], -pc, lsr #6
    2678:	05a10705 	streq	r0, [r1, #1797]!	; 0x705
    267c:	08059e05 	stmdaeq	r5, {r0, r2, r9, sl, fp, ip, pc}
    2680:	4a05052f 	bmi	143b44 <__bss_end+0x164e4>
    2684:	054b1005 	strbeq	r1, [fp, #-5]
    2688:	06059e2d 	streq	r9, [r5], -sp, lsr #28
    268c:	6909052e 	stmdbvs	r9, {r1, r2, r3, r5, r8, sl}
    2690:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    2694:	02056609 	andeq	r6, r5, #9437184	; 0x900000
    2698:	d70805bb 			; <UNDEFINED> instruction: 0xd70805bb
    269c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    26a0:	2a054b03 	bcs	1552b4 <__bss_end+0x27c54>
    26a4:	4a03054a 	bmi	c3bd4 <ramdisk+0x9657c>
    26a8:	03840105 	orreq	r0, r4, #1073741825	; 0x40000001
    26ac:	056603b6 	strbeq	r0, [r6, #-950]!	; 0xfffffc4a
    26b0:	09059f0a 	stmdbeq	r5, {r1, r3, r8, r9, sl, fp, ip, pc}
    26b4:	6c08054b 	cfstr32vs	mvfx0, [r8], {75}	; 0x4b
    26b8:	052f0905 	streq	r0, [pc, #-2309]!	; 1dbb <_start-0xe245>
    26bc:	0905d706 	stmdbeq	r5, {r1, r2, r8, r9, sl, ip, lr, pc}
    26c0:	4a050567 	bmi	143c64 <__bss_end+0x16604>
    26c4:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
    26c8:	04056708 	streq	r6, [r5], #-1800	; 0xfffff8f8
    26cc:	031c054a 	tsteq	ip, #310378496	; 0x12800000
    26d0:	21052e13 	tstcs	r5, r3, lsl lr
    26d4:	4a18054a 	bmi	603c04 <__bss_end+0x4d65a4>
    26d8:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
    26dc:	66150307 	ldrvs	r0, [r5], -r7, lsl #6
    26e0:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
    26e4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    26e8:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    26ec:	3f056602 	svccc	0x00056602
    26f0:	03040200 	movweq	r0, #16896	; 0x4200
    26f4:	00330566 	eorseq	r0, r3, r6, ror #10
    26f8:	4a030402 	bmi	c3708 <ramdisk+0x960b0>
    26fc:	02003005 	andeq	r3, r0, #5
    2700:	059e0304 	ldreq	r0, [lr, #772]	; 0x304
    2704:	06056b09 	streq	r6, [r5], -r9, lsl #22
    2708:	030b059f 	movweq	r0, #46495	; 0xb59f
    270c:	0805664d 	stmdaeq	r5, {r0, r2, r3, r6, r9, sl, sp, lr}
    2710:	6803054a 	stmdavs	r3, {r1, r3, r6, r8, sl}
    2714:	2c030505 	cfstr32cs	mvfx0, [r3], {5}
    2718:	4f03054a 	svcmi	0x0003054a
    271c:	05310505 	ldreq	r0, [r1, #-1285]!	; 0xfffffafb
    2720:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    2724:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    2728:	2f010567 	svccs	0x00010567
    272c:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
    2730:	08058409 	stmdaeq	r5, {r0, r3, sl, pc}
    2734:	9f05056c 	svcls	0x0005056c
    2738:	02001b05 	andeq	r1, r0, #5120	; 0x1400
    273c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2740:	4a1a0309 	bmi	68336c <__bss_end+0x555d0c>
    2744:	05d70605 	ldrbeq	r0, [r7, #1541]	; 0x605
    2748:	05056709 	streq	r6, [r5, #-1801]	; 0xfffff8f7
    274c:	4b06054a 	blmi	183c7c <__bss_end+0x5661c>
    2750:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    2754:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2758:	04020003 	streq	r0, [r2], #-3
    275c:	14054a01 	strne	r4, [r5], #-2561	; 0xfffff5ff
    2760:	052e1803 	streq	r1, [lr, #-2051]!	; 0xfffff7fd
    2764:	24054a19 	strcs	r4, [r5], #-2585	; 0xfffff5e7
    2768:	4a10054a 	bmi	403c98 <__bss_end+0x2d6638>
    276c:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    2770:	1b054a10 	blne	154fb8 <__bss_end+0x27958>
    2774:	2e06054a 	cfsh32cs	mvfx0, mvfx6, #42
    2778:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
    277c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2780:	0402003b 	streq	r0, [r2], #-59	; 0xffffffc5
    2784:	29054a01 	stmdbcs	r5, {r0, r9, fp, lr}
    2788:	01040200 	mrseq	r0, R12_usr
    278c:	0025054a 	eoreq	r0, r5, sl, asr #10
    2790:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
    2794:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
    2798:	03059f02 	movweq	r9, #24322	; 0x5f02
    279c:	03826203 	orreq	r6, r2, #805306368	; 0x30000000
    27a0:	09054a1b 	stmdbeq	r5, {r0, r1, r3, r4, r9, fp, lr}
    27a4:	2f010533 	svccs	0x00010533
    27a8:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
    27ac:	08058409 	stmdaeq	r5, {r0, r3, sl, pc}
    27b0:	6600c803 	strvs	ip, [r0], -r3, lsl #16
    27b4:	05a30505 	streq	r0, [r3, #1285]!	; 0x505
    27b8:	06056709 	streq	r6, [r5], -r9, lsl #14
    27bc:	670d05d7 			; <UNDEFINED> instruction: 0x670d05d7
    27c0:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
    27c4:	21058313 	tstcs	r5, r3, lsl r3
    27c8:	4a04054a 	bmi	103cf8 <ramdisk+0xd66a0>
    27cc:	056a0e05 	strbeq	r0, [sl, #-3589]!	; 0xfffff1fb
    27d0:	01056a09 	tsteq	r5, r9, lsl #20
    27d4:	660e032f 	strvs	r0, [lr], -pc, lsr #6
    27d8:	05840905 	streq	r0, [r4, #2309]	; 0x905
    27dc:	66160308 	ldrvs	r0, [r6], -r8, lsl #6
    27e0:	67d70505 	ldrbvs	r0, [r7, r5, lsl #10]
    27e4:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
    27e8:	09054b0d 	stmdbeq	r5, {r0, r2, r3, r8, r9, fp, lr}
    27ec:	2f01056a 	svccs	0x0001056a
    27f0:	05660f03 	strbeq	r0, [r6, #-3843]!	; 0xfffff0fd
    27f4:	9e0c0310 	mcrls	3, 0, r0, cr12, cr0, {0}
    27f8:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    27fc:	0a054a05 	beq	155018 <__bss_end+0x279b8>
    2800:	4a00e303 	bmi	3b414 <ramdisk+0xddbc>
    2804:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    2808:	10054b08 	andne	r4, r5, r8, lsl #22
    280c:	4a18052f 	bmi	603cd0 <__bss_end+0x4d6670>
    2810:	05661505 	strbeq	r1, [r6, #-1285]!	; 0xfffffafb
    2814:	06052e05 	streq	r2, [r5], -r5, lsl #28
    2818:	0003054b 	andeq	r0, r3, fp, asr #10
    281c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2820:	052f0605 	streq	r0, [pc, #-1541]!	; 2223 <_start-0xdddd>
    2824:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    2828:	06056601 	streq	r6, [r5], -r1, lsl #12
    282c:	001d054b 	andseq	r0, sp, fp, asr #10
    2830:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2834:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
    2838:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    283c:	14058310 	strne	r8, [r5], #-784	; 0xfffffcf0
    2840:	7d080566 	cfstr32vc	mvfx0, [r8, #-408]	; 0xfffffe68
    2844:	056d1105 	strbeq	r1, [sp, #-261]!	; 0xfffffefb
    2848:	1805bd13 	stmdane	r5, {r0, r1, r4, r8, sl, fp, ip, sp, pc}
    284c:	4a23054a 	bmi	8c3d7c <__bss_end+0x79671c>
    2850:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
    2854:	20054b1a 	andcs	r4, r5, sl, lsl fp
    2858:	2e0f054a 	cfsh32cs	mvfx0, mvfx15, #42
    285c:	05660d05 	strbeq	r0, [r6, #-3333]!	; 0xfffff2fb
    2860:	2d054b19 	vstrcs	d4, [r5, #-100]	; 0xffffff9c
    2864:	2e0f054a 	cfsh32cs	mvfx0, mvfx15, #42
    2868:	05820d05 	streq	r0, [r2, #3333]	; 0xd05
    286c:	2d054b19 	vstrcs	d4, [r5, #-100]	; 0xffffff9c
    2870:	2e0f054a 	cfsh32cs	mvfx0, mvfx15, #42
    2874:	05820d05 	streq	r0, [r2, #3333]	; 0xd05
    2878:	7f8f0315 	svcvc	0x008f0315
    287c:	03010566 	movweq	r0, #5478	; 0x1566
    2880:	032e00f2 			; <UNDEFINED> instruction: 0x032e00f2
    2884:	054a00e7 	strbeq	r0, [sl, #-231]	; 0xffffff19
    2888:	01870304 	orreq	r0, r7, r4, lsl #6
    288c:	6611059e 			; <UNDEFINED> instruction: 0x6611059e
    2890:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
    2894:	05058309 	streq	r8, [r5, #-777]	; 0xfffffcf7
    2898:	4a11054a 	bmi	443dc8 <__bss_end+0x316768>
    289c:	054a0f03 	strbeq	r0, [sl, #-3843]	; 0xfffff0fd
    28a0:	0505660e 	streq	r6, [r5, #-1550]	; 0xfffff9f2
    28a4:	4b06054a 	blmi	183dd4 <__bss_end+0x56774>
    28a8:	00070567 	andeq	r0, r7, r7, ror #10
    28ac:	66010402 	strvs	r0, [r1], -r2, lsl #8
    28b0:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
    28b4:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    28b8:	0b052e04 	bleq	14e0d0 <__bss_end+0x20a70>
    28bc:	01040200 	mrseq	r0, R12_usr
    28c0:	000a0566 	andeq	r0, sl, r6, ror #10
    28c4:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
    28c8:	02000b05 	andeq	r0, r0, #5120	; 0x1400
    28cc:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    28d0:	0605bb04 	streq	fp, [r5], -r4, lsl #22
    28d4:	00100530 	andseq	r0, r0, r0, lsr r5
    28d8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    28dc:	05830705 	streq	r0, [r3, #1797]	; 0x705
    28e0:	04020011 	streq	r0, [r2], #-17	; 0xffffffef
    28e4:	25056602 	strcs	r6, [r5, #-1538]	; 0xfffff9fe
    28e8:	03040200 	movweq	r0, #16896	; 0x4200
    28ec:	4b060566 	blmi	183e8c <__bss_end+0x5682c>
    28f0:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
    28f4:	09054b04 	stmdbeq	r5, {r2, r8, r9, fp, lr}
    28f8:	2e060535 	mcrcs	5, 0, r0, cr6, cr5, {1}
    28fc:	054b1005 	strbeq	r1, [fp, #-5]
    2900:	07054a06 	streq	r4, [r5, -r6, lsl #20]
    2904:	82060569 	andhi	r0, r6, #440401920	; 0x1a400000
    2908:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
    290c:	0605660f 	streq	r6, [r5], -pc, lsl #12
    2910:	4b09054a 	blmi	243e40 <__bss_end+0x1167e0>
    2914:	05820705 	streq	r0, [r2, #1797]	; 0x705
    2918:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    291c:	14054a02 	strne	r4, [r5], #-2562	; 0xfffff5fe
    2920:	02040200 	andeq	r0, r4, #0, 4
    2924:	002b054a 	eoreq	r0, fp, sl, asr #10
    2928:	66030402 	strvs	r0, [r3], -r2, lsl #8
    292c:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    2930:	0d056607 	stceq	6, cr6, [r5, #-28]	; 0xffffffe4
    2934:	4b09054a 	blmi	243e64 <__bss_end+0x116804>
    2938:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
    293c:	08054a0d 	stmdaeq	r5, {r0, r2, r3, r9, fp, lr}
    2940:	9e070568 	cfsh32ls	mvfx0, mvfx7, #56
    2944:	02003605 	andeq	r3, r0, #5242880	; 0x500000
    2948:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    294c:	08054b07 	stmdaeq	r5, {r0, r1, r2, r8, r9, fp, lr}
    2950:	01040200 	mrseq	r0, R12_usr
    2954:	00160566 	andseq	r0, r6, r6, ror #10
    2958:	66020402 	strvs	r0, [r2], -r2, lsl #8
    295c:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    2960:	0d056607 	stceq	6, cr6, [r5, #-28]	; 0xffffffe4
    2964:	0305054a 	movweq	r0, #21834	; 0x554a
    2968:	03054a64 	movweq	r4, #23140	; 0x5a64
    296c:	030a052f 	movweq	r0, #42287	; 0xa52f
    2970:	08052e1e 	stmdaeq	r5, {r1, r2, r3, r4, r9, sl, fp, sp}
    2974:	4b050566 	blmi	143f14 <__bss_end+0x168b4>
    2978:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    297c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2980:	05054c09 	streq	r4, [r5, #-3081]	; 0xfffff3f7
    2984:	001d054a 	andseq	r0, sp, sl, asr #10
    2988:	4a010402 	bmi	43998 <ramdisk+0x16340>
    298c:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    2990:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    2994:	1a056602 	bne	15c1a4 <__bss_end+0x2eb44>
    2998:	02040200 	andeq	r0, r4, #0, 4
    299c:	000e0582 	andeq	r0, lr, r2, lsl #11
    29a0:	4a030402 	bmi	c39b0 <ramdisk+0x96358>
    29a4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    29a8:	05054a06 	streq	r4, [r5, #-2566]	; 0xfffff5fa
    29ac:	06040200 	streq	r0, [r4], -r0, lsl #4
    29b0:	0e052e06 	cdpeq	14, 0, cr2, cr5, cr6, {0}
    29b4:	06040200 	streq	r0, [r4], -r0, lsl #4
    29b8:	0009054a 	andeq	r0, r9, sl, asr #10
    29bc:	30060402 	andcc	r0, r6, r2, lsl #8
    29c0:	03300105 	teqeq	r0, #1073741825	; 0x40000001
    29c4:	09059e0d 	stmdbeq	r5, {r0, r2, r3, r9, sl, fp, ip, pc}
    29c8:	660903a1 	strvs	r0, [r9], -r1, lsr #7
    29cc:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
    29d0:	052e0404 	streq	r0, [lr, #-1028]!	; 0xfffffbfc
    29d4:	0402000a 	streq	r0, [r2], #-10
    29d8:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    29dc:	01040200 	mrseq	r0, R12_usr
    29e0:	000a054a 	andeq	r0, sl, sl, asr #10
    29e4:	4a030402 	bmi	c39f4 <ramdisk+0x9639c>
    29e8:	05831205 	streq	r1, [r3, #517]	; 0x205
    29ec:	6613030c 	ldrvs	r0, [r3], -ip, lsl #6
    29f0:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    29f4:	09054b12 	stmdbeq	r5, {r1, r4, r8, r9, fp, lr}
    29f8:	be0a0567 	cfsh32lt	mvfx0, mvfx10, #55
    29fc:	05bb0705 	ldreq	r0, [fp, #1797]!	; 0x705
    2a00:	0705670a 	streq	r6, [r5, -sl, lsl #14]
    2a04:	08056783 	stmdaeq	r5, {r0, r1, r7, r8, r9, sl, sp, lr}
    2a08:	6c100567 	cfldr32vs	mvfx0, [r0], {103}	; 0x67
    2a0c:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
    2a10:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    2a14:	05054a01 	streq	r4, [r5, #-2561]	; 0xfffff5ff
    2a18:	01040200 	mrseq	r0, R12_usr
    2a1c:	300b054d 	andcc	r0, fp, sp, asr #10
    2a20:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    2a24:	17054c11 	smladne	r5, r1, ip, r4
    2a28:	2e07054a 	cfsh32cs	mvfx0, mvfx7, #42
    2a2c:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    2a30:	23054a05 	movwcs	r4, #23045	; 0x5a05
    2a34:	052e0b03 	streq	r0, [lr, #-2819]!	; 0xfffff4fd
    2a38:	36054a2f 	strcc	r4, [r5], -pc, lsr #20
    2a3c:	4a16054a 	bmi	583f6c <__bss_end+0x45690c>
    2a40:	059e1405 	ldreq	r1, [lr, #1029]	; 0x405
    2a44:	4a620308 	bmi	188366c <__bss_end+0x175600c>
    2a48:	052f0405 	streq	r0, [pc, #-1029]!	; 264b <_start-0xd9b5>
    2a4c:	4a0d0305 	bmi	343668 <__bss_end+0x216008>
    2a50:	054c0405 	strbeq	r0, [ip, #-1029]	; 0xfffffbfb
    2a54:	2e130309 	cdpcs	3, 1, cr0, cr3, cr9, {0}
    2a58:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    2a5c:	0a05660c 	beq	15c294 <__bss_end+0x2ec34>
    2a60:	05820a03 	streq	r0, [r2, #2563]	; 0xa03
    2a64:	054b6605 	strbeq	r6, [fp, #-1541]	; 0xfffff9fb
    2a68:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
    2a6c:	0c056601 	stceq	6, cr6, [r5], {1}
    2a70:	02040200 	andeq	r0, r4, #0, 4
    2a74:	0007054c 	andeq	r0, r7, ip, asr #10
    2a78:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2a7c:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
    2a80:	054b0204 	strbeq	r0, [fp, #-516]	; 0xfffffdfc
    2a84:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    2a88:	05056601 	streq	r6, [r5, #-1537]	; 0xfffff9ff
    2a8c:	07056768 	streq	r6, [r5, -r8, ror #14]
    2a90:	4a06054b 	bmi	183fc4 <__bss_end+0x56964>
    2a94:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    2a98:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2a9c:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    2aa0:	14058202 	strne	r8, [r5], #-514	; 0xfffffdfe
    2aa4:	02040200 	andeq	r0, r4, #0, 4
    2aa8:	670d054a 	strvs	r0, [sp, -sl, asr #10]
    2aac:	034a0605 	movteq	r0, #42501	; 0xa605
    2ab0:	1f054a0f 	svcne	0x00054a0f
    2ab4:	01040200 	mrseq	r0, R12_usr
    2ab8:	4b090566 	blmi	244058 <__bss_end+0x1169f8>
    2abc:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
    2ac0:	4a170309 	bmi	5c36ec <__bss_end+0x49608c>
    2ac4:	03300105 	teqeq	r0, #1073741825	; 0x40000001
    2ac8:	058200d7 	streq	r0, [r2, #215]	; 0xd7
    2acc:	1d05a30c 	stcne	3, cr10, [r5, #-48]	; 0xffffffd0
    2ad0:	67060566 	strvs	r0, [r6, -r6, ror #10]
    2ad4:	05820505 	streq	r0, [r2, #1285]	; 0x505
    2ad8:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
    2adc:	11054a01 	tstne	r5, r1, lsl #20
    2ae0:	4a09054b 	bmi	244014 <__bss_end+0x1169b4>
    2ae4:	05be0405 	ldreq	r0, [lr, #1029]!	; 0x405
    2ae8:	10056705 	andne	r6, r5, r5, lsl #14
    2aec:	01040200 	mrseq	r0, R12_usr
    2af0:	001d0566 	andseq	r0, sp, r6, ror #10
    2af4:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2af8:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
    2afc:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    2b00:	1a058201 	bne	16330c <__bss_end+0x35cac>
    2b04:	01040200 	mrseq	r0, R12_usr
    2b08:	0016054a 	andseq	r0, r6, sl, asr #10
    2b0c:	ba010402 	blt	43b1c <ramdisk+0x164c4>
    2b10:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    2b14:	07054d0f 	streq	r4, [r5, -pc, lsl #26]
    2b18:	9f05054a 	svcls	0x0005054a
    2b1c:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
    2b20:	0a052e0f 	beq	14e364 <__bss_end+0x20d04>
    2b24:	2e06054a 	cfsh32cs	mvfx0, mvfx6, #42
    2b28:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    2b2c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2b30:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    2b34:	04056602 	streq	r6, [r5], #-1538	; 0xfffff9fe
    2b38:	00140567 	andseq	r0, r4, r7, ror #10
    2b3c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2b40:	02001905 	andeq	r1, r0, #81920	; 0x14000
    2b44:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    2b48:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    2b4c:	0e054a01 	vmlaeq.f32	s8, s10, s2
    2b50:	01040200 	mrseq	r0, R12_usr
    2b54:	4b0f052e 	blmi	3c4014 <__bss_end+0x2969b4>
    2b58:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    2b5c:	14058204 	strne	r8, [r5], #-516	; 0xfffffdfc
    2b60:	4a22054b 	bmi	884094 <__bss_end+0x756a34>
    2b64:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
    2b68:	07054b0f 	streq	r4, [r5, -pc, lsl #22]
    2b6c:	8204054a 	andhi	r0, r4, #310378496	; 0x12800000
    2b70:	054b1005 	strbeq	r1, [fp, #-5]
    2b74:	04054a08 	streq	r4, [r5], #-2568	; 0xfffff5f8
    2b78:	003b0582 	eorseq	r0, fp, r2, lsl #11
    2b7c:	4a010402 	bmi	43b8c <ramdisk+0x16534>
    2b80:	02003205 	andeq	r3, r0, #1342177280	; 0x50000000
    2b84:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2b88:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    2b8c:	0f058201 	svceq	0x00058201
    2b90:	4a07054b 	bmi	1c40c4 <__bss_end+0x96a64>
    2b94:	05820405 	streq	r0, [r2, #1029]	; 0x405
    2b98:	1c054b0c 			; <UNDEFINED> instruction: 0x1c054b0c
    2b9c:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
    2ba0:	00820601 	addeq	r0, r2, r1, lsl #12
    2ba4:	4a020402 	bmi	83bb4 <ramdisk+0x5655c>
    2ba8:	2f060105 	svccs	0x00060105
    2bac:	059e0a03 	ldreq	r0, [lr, #2563]	; 0xa03
    2bb0:	0505a308 	streq	sl, [r5, #-776]	; 0xfffffcf8
    2bb4:	000f0583 	andeq	r0, pc, r3, lsl #11
    2bb8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2bbc:	02001c05 	andeq	r1, r0, #1280	; 0x500
    2bc0:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    2bc4:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    2bc8:	09056604 	stmdbeq	r5, {r2, r9, sl, sp, lr}
    2bcc:	054a1b03 	strbeq	r1, [sl, #-2819]	; 0xfffff4fd
    2bd0:	18054a02 	stmdane	r5, {r1, r9, fp, lr}
    2bd4:	03040200 	movweq	r0, #16896	; 0x4200
    2bd8:	0030052f 	eorseq	r0, r0, pc, lsr #10
    2bdc:	4a030402 	bmi	c3bec <ramdisk+0x96594>
    2be0:	02003905 	andeq	r3, r0, #81920	; 0x14000
    2be4:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    2be8:	0402000f 	streq	r0, [r2], #-15
    2bec:	0d054a03 	vstreq	s8, [r5, #-12]
    2bf0:	03040200 	movweq	r0, #16896	; 0x4200
    2bf4:	00160582 	andseq	r0, r6, r2, lsl #11
    2bf8:	9d030402 	cfstrsls	mvf0, [r3, #-8]
    2bfc:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
    2c00:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2c04:	02006916 	andeq	r6, r0, #360448	; 0x58000
    2c08:	66060104 	strvs	r0, [r6], -r4, lsl #2
    2c0c:	02040200 	andeq	r0, r4, #0, 4
    2c10:	00040566 	andeq	r0, r4, r6, ror #10
    2c14:	06040402 	streq	r0, [r4], -r2, lsl #8
    2c18:	300f052e 	andcc	r0, pc, lr, lsr #10
    2c1c:	059e2d05 	ldreq	r2, [lr, #3333]	; 0xd05
    2c20:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    2c24:	2d054a01 	vstrcs	s8, [r5, #-4]
    2c28:	02040200 	andeq	r0, r4, #0, 4
    2c2c:	07053c08 	streq	r3, [r5, -r8, lsl #24]
    2c30:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2c34:	0002052e 	andeq	r0, r2, lr, lsr #10
    2c38:	2f040402 	svccs	0x00040402
    2c3c:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    2c40:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2c44:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    2c48:	09056602 	stmdbeq	r5, {r1, r9, sl, sp, lr}
    2c4c:	000105bb 			; <UNDEFINED> instruction: 0x000105bb
    2c50:	2f010402 	svccs	0x00010402
    2c54:	05660e03 	strbeq	r0, [r6, #-3587]!	; 0xfffff1fd
    2c58:	d60b0307 	strle	r0, [fp], -r7, lsl #6
    2c5c:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    2c60:	16056705 	strne	r6, [r5], -r5, lsl #14
    2c64:	01040200 	mrseq	r0, R12_usr
    2c68:	4d050566 	cfstr32mi	mvfx0, [r5, #-408]	; 0xfffffe68
    2c6c:	00120583 	andseq	r0, r2, r3, lsl #11
    2c70:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2c74:	684e0705 	stmdavs	lr, {r0, r2, r8, r9, sl}^
    2c78:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    2c7c:	0a054a05 	beq	155498 <__bss_end+0x27e38>
    2c80:	bb0e054b 	bllt	3841b4 <__bss_end+0x256b54>
    2c84:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    2c88:	29054b07 	stmdbcs	r5, {r0, r1, r2, r8, r9, fp, lr}
    2c8c:	01040200 	mrseq	r0, R12_usr
    2c90:	00200566 	eoreq	r0, r0, r6, ror #10
    2c94:	4a010402 	bmi	43ca4 <ramdisk+0x1664c>
    2c98:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    2c9c:	0e054c0b 	cdpeq	12, 0, cr4, cr5, cr11, {0}
    2ca0:	67090551 	smlsdvs	r9, r1, r5, r0
    2ca4:	05bb0b05 	ldreq	r0, [fp, #2821]!	; 0xb05
    2ca8:	0a054a05 	beq	1554c4 <__bss_end+0x27e64>
    2cac:	4c05054b 	cfstr32mi	mvfx0, [r5], {75}	; 0x4b
    2cb0:	02002705 	andeq	r2, r0, #1310720	; 0x140000
    2cb4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2cb8:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    2cbc:	0a054a01 	beq	1554c8 <__bss_end+0x27e68>
    2cc0:	5208054b 	andpl	r0, r8, #314572800	; 0x12c00000
    2cc4:	05830505 	streq	r0, [r3, #1285]	; 0x505
    2cc8:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
    2ccc:	05056601 	streq	r6, [r5, #-1537]	; 0xfffff9ff
    2cd0:	0017054b 	andseq	r0, r7, fp, asr #10
    2cd4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2cd8:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    2cdc:	00c5030f 	sbceq	r0, r5, pc, lsl #6
    2ce0:	4a070566 	bmi	1c4280 <__bss_end+0x96c20>
    2ce4:	05820605 	streq	r0, [r2, #1541]	; 0x605
    2ce8:	0402003b 	streq	r0, [r2], #-59	; 0xffffffc5
    2cec:	14054a01 	strne	r4, [r5], #-2561	; 0xfffff5ff
    2cf0:	4a0c054c 	bmi	304228 <__bss_end+0x1d6bc8>
    2cf4:	05820a05 	streq	r0, [r2, #2565]	; 0xa05
    2cf8:	26052f06 	strcs	r2, [r5], -r6, lsl #30
    2cfc:	01040200 	mrseq	r0, R12_usr
    2d00:	001d0566 	andseq	r0, sp, r6, ror #10
    2d04:	4a010402 	bmi	43d14 <ramdisk+0x166bc>
    2d08:	05830d05 	streq	r0, [r3, #3333]	; 0xd05
    2d0c:	0e056817 	mcreq	8, 0, r6, cr5, cr7, {0}
    2d10:	4b09054a 	blmi	244240 <__bss_end+0x116be0>
    2d14:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    2d18:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    2d1c:	17054a01 	strne	r4, [r5, -r1, lsl #20]
    2d20:	01040200 	mrseq	r0, R12_usr
    2d24:	0032054a 	eorseq	r0, r2, sl, asr #10
    2d28:	4a020402 	bmi	83d38 <ramdisk+0x566e0>
    2d2c:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
    2d30:	1605660a 	strne	r6, [r5], -sl, lsl #12
    2d34:	660d0568 	strvs	r0, [sp], -r8, ror #10
    2d38:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    2d3c:	1c054a06 			; <UNDEFINED> instruction: 0x1c054a06
    2d40:	02040200 	andeq	r0, r4, #0, 4
    2d44:	0029054a 	eoreq	r0, r9, sl, asr #10
    2d48:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2d4c:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
    2d50:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    2d54:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    2d58:	16052e02 	strne	r2, [r5], -r2, lsl #28
    2d5c:	02040200 	andeq	r0, r4, #0, 4
    2d60:	003f052e 	eorseq	r0, pc, lr, lsr #10
    2d64:	4a030402 	bmi	c3d74 <ramdisk+0x9671c>
    2d68:	054c1b05 	strbeq	r1, [ip, #-2821]	; 0xfffff4fb
    2d6c:	11054a13 	tstne	r5, r3, lsl sl
    2d70:	4b09059e 	blmi	2443f0 <__bss_end+0x116d90>
    2d74:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    2d78:	31054a06 	tstcc	r5, r6, lsl #20
    2d7c:	01040200 	mrseq	r0, R12_usr
    2d80:	4c13054a 	cfldr32mi	mvfx0, [r3], {74}	; 0x4a
    2d84:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    2d88:	06058209 	streq	r8, [r5], -r9, lsl #4
    2d8c:	0024052f 	eoreq	r0, r4, pc, lsr #10
    2d90:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2d94:	02001b05 	andeq	r1, r0, #5120	; 0x1400
    2d98:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2d9c:	0a058412 	beq	163dec <__bss_end+0x3678c>
    2da0:	9f06054a 	svcls	0x0006054a
    2da4:	02001905 	andeq	r1, r0, #81920	; 0x14000
    2da8:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2dac:	1e054d11 	mcrne	13, 0, r4, cr5, cr1, {0}
    2db0:	4a2a0566 	bmi	a84350 <__bss_end+0x956cf0>
    2db4:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
    2db8:	1e054b06 	vmlane.f64	d4, d5, d6
    2dbc:	01040200 	mrseq	r0, R12_usr
    2dc0:	4b120582 	blmi	4843d0 <__bss_end+0x356d70>
    2dc4:	05662005 	strbeq	r2, [r6, #-5]!
    2dc8:	06054a09 	streq	r4, [r5], -r9, lsl #20
    2dcc:	001a059f 	mulseq	sl, pc, r5	; <UNPREDICTABLE>
    2dd0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2dd4:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    2dd8:	1f054b06 	svcne	0x00054b06
    2ddc:	01040200 	mrseq	r0, R12_usr
    2de0:	4b060566 	blmi	184380 <__bss_end+0x56d20>
    2de4:	02001f05 	andeq	r1, r0, #5, 30
    2de8:	05820104 	streq	r0, [r2, #260]	; 0x104
    2dec:	1f054b06 	svcne	0x00054b06
    2df0:	01040200 	mrseq	r0, R12_usr
    2df4:	4b060582 	blmi	184404 <__bss_end+0x56da4>
    2df8:	02001805 	andeq	r1, r0, #327680	; 0x50000
    2dfc:	4d660104 	stfmie	f0, [r6, #-16]!
    2e00:	054a1005 	strbeq	r1, [sl, #-5]
    2e04:	17054b0f 	strne	r4, [r5, -pc, lsl #22]
    2e08:	660f0567 	strvs	r0, [pc], -r7, ror #10
    2e0c:	054b1805 	strbeq	r1, [fp, #-2053]	; 0xfffff7fb
    2e10:	06056610 			; <UNDEFINED> instruction: 0x06056610
    2e14:	6710054b 	ldrvs	r0, [r0, -fp, asr #10]
    2e18:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    2e1c:	34058207 	strcc	r8, [r5], #-519	; 0xfffffdf9
    2e20:	01040200 	mrseq	r0, R12_usr
    2e24:	4b0a054a 	blmi	284354 <__bss_end+0x156cf4>
    2e28:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    2e2c:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    2e30:	1b054a01 	blne	15563c <__bss_end+0x27fdc>
    2e34:	4a12054b 	bmi	484368 <__bss_end+0x356d08>
    2e38:	05821005 	streq	r1, [r2, #5]
    2e3c:	0b054b0f 	bleq	155a80 <__bss_end+0x28420>
    2e40:	680a054a 	stmdavs	sl, {r1, r3, r6, r8, sl}
    2e44:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    2e48:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    2e4c:	14054a01 	strne	r4, [r5], #-2561	; 0xfffff5ff
    2e50:	4a1e054b 	bmi	784384 <__bss_end+0x656d24>
    2e54:	054a1005 	strbeq	r1, [sl, #-5]
    2e58:	07054c16 	smladeq	r5, r6, ip, r4
    2e5c:	01040200 	mrseq	r0, R12_usr
    2e60:	00160566 	andseq	r0, r6, r6, ror #10
    2e64:	4a010402 	bmi	43e74 <ramdisk+0x1681c>
    2e68:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    2e6c:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    2e70:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    2e74:	29054a02 	stmdbcs	r5, {r1, r9, fp, lr}
    2e78:	02040200 	andeq	r0, r4, #0, 4
    2e7c:	00320566 	eorseq	r0, r2, r6, ror #10
    2e80:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    2e84:	02003d05 	andeq	r3, r0, #320	; 0x140
    2e88:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    2e8c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    2e90:	0b052e02 	bleq	14e6a0 <__bss_end+0x21040>
    2e94:	3109052d 	tstcc	r9, sp, lsr #10
    2e98:	054a1b05 	strbeq	r1, [sl, #-2821]	; 0xfffff4fb
    2e9c:	0605662b 	streq	r6, [r5], -fp, lsr #12
    2ea0:	003c052e 	eorseq	r0, ip, lr, lsr #10
    2ea4:	4a010402 	bmi	43eb4 <ramdisk+0x1685c>
    2ea8:	054e2105 	strbeq	r2, [lr, #-261]	; 0xfffffefb
    2eac:	11056615 	tstne	r5, r5, lsl r6
    2eb0:	4b10054a 	blmi	4043e0 <__bss_end+0x2d6d80>
    2eb4:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
    2eb8:	0705670f 	streq	r6, [r5, -pc, lsl #14]
    2ebc:	8204054a 	andhi	r0, r4, #310378496	; 0x12800000
    2ec0:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    2ec4:	1105ba04 	tstne	r5, r4, lsl #20
    2ec8:	6714054c 	ldrvs	r0, [r4, -ip, asr #10]
    2ecc:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    2ed0:	11056607 	tstne	r5, r7, lsl #12
    2ed4:	4a080567 	bmi	204478 <__bss_end+0xd6e18>
    2ed8:	05820505 	streq	r0, [r2, #1285]	; 0x505
    2edc:	08056711 	stmdaeq	r5, {r0, r4, r8, r9, sl, sp, lr}
    2ee0:	9e05054a 	cfsh32ls	mvfx0, mvfx5, #42
    2ee4:	05691e05 	strbeq	r1, [r9, #-3589]!	; 0xfffff1fb
    2ee8:	13054a15 	movwne	r4, #23061	; 0x5a15
    2eec:	4d1e0582 	cfldr32mi	mvfx0, [lr, #-520]	; 0xfffffdf8
    2ef0:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
    2ef4:	10058213 	andne	r8, r5, r3, lsl r2
    2ef8:	4a0e0551 	bmi	384444 <__bss_end+0x256de4>
    2efc:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    2f00:	0d038209 	sfmeq	f0, 1, [r3, #-36]	; 0xffffffdc
    2f04:	2f0105ba 	svccs	0x000105ba
    2f08:	3c080d03 	stccc	13, cr0, [r8], {3}
    2f0c:	059f0a05 	ldreq	r0, [pc, #2565]	; 3919 <_start-0xc6e7>
    2f10:	10054d05 	andne	r4, r5, r5, lsl #26
    2f14:	01040200 	mrseq	r0, R12_usr
    2f18:	000a0566 	andeq	r0, sl, r6, ror #10
    2f1c:	4a010402 	bmi	43f2c <ramdisk+0x168d4>
    2f20:	02001b05 	andeq	r1, r0, #5120	; 0x1400
    2f24:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    2f28:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    2f2c:	15054a02 	strne	r4, [r5, #-2562]	; 0xfffff5fe
    2f30:	02040200 	andeq	r0, r4, #0, 4
    2f34:	002f052e 	eoreq	r0, pc, lr, lsr #10
    2f38:	4a030402 	bmi	c3f48 <ramdisk+0x968f0>
    2f3c:	02003a05 	andeq	r3, r0, #20480	; 0x5000
    2f40:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    2f44:	0402003e 	streq	r0, [r2], #-62	; 0xffffffc2
    2f48:	29054a03 	stmdbcs	r5, {r0, r1, r9, fp, lr}
    2f4c:	03040200 	movweq	r0, #16896	; 0x4200
    2f50:	0318052e 	tsteq	r8, #192937984	; 0xb800000
    2f54:	09054a0c 	stmdbeq	r5, {r2, r3, r9, fp, lr}
    2f58:	8224054a 	eorhi	r0, r4, #310378496	; 0x12800000
    2f5c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2f60:	22054b08 	andcs	r4, r5, #8, 22	; 0x2000
    2f64:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
    2f68:	00660601 	rsbeq	r0, r6, r1, lsl #12
    2f6c:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2f70:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    2f74:	2e060404 	cdpcs	4, 0, cr0, cr6, cr4, {0}
    2f78:	02000905 	andeq	r0, r0, #81920	; 0x14000
    2f7c:	054b0404 	strbeq	r0, [fp, #-1028]	; 0xfffffbfc
    2f80:	04020001 	streq	r0, [r2], #-1
    2f84:	16032f04 	strne	r2, [r3], -r4, lsl #30
    2f88:	da0f0566 	ble	3c4528 <__bss_end+0x296ec8>
    2f8c:	054e0805 	strbeq	r0, [lr, #-2053]	; 0xfffff7fb
    2f90:	16058305 	strne	r8, [r5], -r5, lsl #6
    2f94:	01040200 	mrseq	r0, R12_usr
    2f98:	4b060566 	blmi	184538 <__bss_end+0x56ed8>
    2f9c:	05840505 	streq	r0, [r4, #1285]	; 0x505
    2fa0:	1005670e 	andne	r6, r5, lr, lsl #14
    2fa4:	69060589 	stmdbvs	r6, {r0, r3, r7, r8, sl}
    2fa8:	4b2e0505 	blmi	b843c4 <__bss_end+0xa56d64>
    2fac:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
    2fb0:	05054a0c 	streq	r4, [r5, #-2572]	; 0xfffff5f4
    2fb4:	052e0e03 	streq	r0, [lr, #-3587]!	; 0xfffff1fd
    2fb8:	0e052e0f 	cdpeq	14, 0, cr2, cr5, cr15, {0}
    2fbc:	8505054b 	strhi	r0, [r5, #-1355]	; 0xfffffab5
    2fc0:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    2fc4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2fc8:	02054c08 	andeq	r4, r5, #8, 24	; 0x800
    2fcc:	000105d7 	ldrdeq	r0, [r1], -r7
    2fd0:	2f010402 	svccs	0x00010402
    2fd4:	05820e03 	streq	r0, [r2, #3587]	; 0xe03
    2fd8:	d60c0305 	strle	r0, [ip], -r5, lsl #6
    2fdc:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
    2fe0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2fe4:	08054d07 	stmdaeq	r5, {r0, r1, r2, r8, sl, fp, lr}
    2fe8:	d7050567 	strle	r0, [r5, -r7, ror #10]
    2fec:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    2ff0:	06054c09 	streq	r4, [r5], -r9, lsl #24
    2ff4:	670d05d8 			; <UNDEFINED> instruction: 0x670d05d8
    2ff8:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    2ffc:	09052e07 	stmdbeq	r5, {r0, r1, r2, r9, sl, fp, sp}
    3000:	030c054b 	movweq	r0, #50507	; 0xc54b
    3004:	06054a09 	streq	r4, [r5], -r9, lsl #20
    3008:	4b07054a 	blmi	1c4538 <__bss_end+0x96ed8>
    300c:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    3010:	0a056a0c 	beq	15d848 <__bss_end+0x301e8>
    3014:	850f05a1 	strhi	r0, [pc, #-1441]	; 2a7b <_start-0xd585>
    3018:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
    301c:	0a052e08 	beq	14e844 <__bss_end+0x211e4>
    3020:	680f054b 	stmdavs	pc, {r0, r1, r3, r6, r8, sl}	; <UNPREDICTABLE>
    3024:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    3028:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    302c:	07054a01 	streq	r4, [r5, -r1, lsl #20]
    3030:	001e054d 	andseq	r0, lr, sp, asr #10
    3034:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3038:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    303c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3040:	4a150309 	bmi	543c6c <__bss_end+0x41660c>
    3044:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
    3048:	11052e06 	tstne	r5, r6, lsl #28
    304c:	2e060583 	cfsh32cs	mvfx0, mvfx6, #-61
    3050:	05830b05 	streq	r0, [r3, #2821]	; 0xb05
    3054:	0b052e1a 	bleq	14e8c4 <__bss_end+0x21264>
    3058:	8308052e 	movwhi	r0, #34094	; 0x852e
    305c:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    3060:	06052e17 			; <UNDEFINED> instruction: 0x06052e17
    3064:	9f11054b 	svcls	0x0011054b
    3068:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    306c:	10058308 	andne	r8, r5, r8, lsl #6
    3070:	4b09052e 	blmi	244530 <__bss_end+0x116ed0>
    3074:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    3078:	0d052e0a 	stceq	14, cr2, [r5, #-40]	; 0xffffffd8
    307c:	d70a054b 	strle	r0, [sl, -fp, asr #10]
    3080:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    3084:	1b05bb0a 	blne	171cb4 <__bss_end+0x44654>
    3088:	4a16052e 	bmi	584548 <__bss_end+0x456ee8>
    308c:	05510705 	ldrbeq	r0, [r1, #-1797]	; 0xfffff8fb
    3090:	1505670f 	strne	r6, [r5, #-1807]	; 0xfffff8f1
    3094:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    3098:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    309c:	09056810 	stmdbeq	r5, {r4, fp, sp, lr}
    30a0:	0026054a 	eoreq	r0, r6, sl, asr #10
    30a4:	4a010402 	bmi	440b4 <ramdisk+0x16a5c>
    30a8:	02002c05 	andeq	r2, r0, #1280	; 0x500
    30ac:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    30b0:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    30b4:	0b052e01 	bleq	14e8c0 <__bss_end+0x21260>
    30b8:	4f06054b 	svcmi	0x0006054b
    30bc:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    30c0:	26054a07 	strcs	r4, [r5], -r7, lsl #20
    30c4:	01040200 	mrseq	r0, R12_usr
    30c8:	6715054a 	ldrvs	r0, [r5, -sl, asr #10]
    30cc:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
    30d0:	10054b14 	andne	r4, r5, r4, lsl fp
    30d4:	0306052e 	movweq	r0, #25902	; 0x652e
    30d8:	16054a12 			; <UNDEFINED> instruction: 0x16054a12
    30dc:	05660a03 	strbeq	r0, [r6, #-2563]!	; 0xfffff5fd
    30e0:	16052e25 	strne	r2, [r5], -r5, lsr #28
    30e4:	8214052e 	andshi	r0, r4, #192937984	; 0xb800000
    30e8:	054b2205 	strbeq	r2, [fp, #-517]	; 0xfffffdfb
    30ec:	17052e27 	strne	r2, [r5, -r7, lsr #28]
    30f0:	6615052e 	ldrvs	r0, [r5], -lr, lsr #10
    30f4:	054f0f05 	strbeq	r0, [pc, #-3845]	; 21f7 <_start-0xde09>
    30f8:	0f056713 	svceq	0x00056713
    30fc:	4b0d054a 	blmi	34462c <__bss_end+0x216fcc>
    3100:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
    3104:	6967670d 	stmdbvs	r7!, {r0, r2, r3, r8, r9, sl, sp, lr}^
    3108:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
    310c:	0705840e 	streq	r8, [r5, -lr, lsl #8]
    3110:	0026054a 	eoreq	r0, r6, sl, asr #10
    3114:	4a010402 	bmi	44124 <ramdisk+0x16acc>
    3118:	02001c05 	andeq	r1, r0, #1280	; 0x500
    311c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3120:	0e054b17 	vmoveq.32	d5[0], r4
    3124:	4b14054a 	blmi	504654 <__bss_end+0x3d6ff4>
    3128:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    312c:	0e054b0a 	vmlaeq.f64	d4, d5, d10
    3130:	66050567 	strvs	r0, [r5], -r7, ror #10
    3134:	052f0d05 	streq	r0, [pc, #-3333]!	; 2437 <_start-0xdbc9>
    3138:	19059f09 	stmdbne	r5, {r0, r3, r8, r9, sl, fp, ip, pc}
    313c:	01040200 	mrseq	r0, R12_usr
    3140:	4b090566 	blmi	2446e0 <__bss_end+0x117080>
    3144:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
    3148:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    314c:	04020040 	streq	r0, [r2], #-64	; 0xffffffc0
    3150:	05054702 	streq	r4, [r5, #-1794]	; 0xfffff8fe
    3154:	01040200 	mrseq	r0, R12_usr
    3158:	002e0582 	eoreq	r0, lr, r2, lsl #11
    315c:	66030402 	strvs	r0, [r3], -r2, lsl #8
    3160:	05870f05 	streq	r0, [r7, #3845]	; 0xf05
    3164:	1d056708 	stcne	7, cr6, [r5, #-32]	; 0xffffffe0
    3168:	01040200 	mrseq	r0, R12_usr
    316c:	00160566 	andseq	r0, r6, r6, ror #10
    3170:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3174:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    3178:	0b059f09 	bleq	16ada4 <__bss_end+0x3d744>
    317c:	68170567 	ldmdavs	r7, {r0, r1, r2, r5, r6, r8, sl}
    3180:	054a1505 	strbeq	r1, [sl, #-1285]	; 0xfffffafb
    3184:	17054a10 	smladne	r5, r0, sl, r4
    3188:	2e0b054c 	cfsh32cs	mvfx0, mvfx11, #44
    318c:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
    3190:	0a054a0b 	beq	1559c4 <__bss_end+0x28364>
    3194:	0044059e 	umaaleq	r0, r4, lr, r5
    3198:	4a010402 	bmi	441a8 <ramdisk+0x16b50>
    319c:	0e030505 	cfsh32eq	mvfx0, mvfx3, #5
    31a0:	001f054a 	andseq	r0, pc, sl, asr #10
    31a4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    31a8:	05680205 	strbeq	r0, [r8, #-517]!	; 0xfffffdfb
    31ac:	04020001 	streq	r0, [r2], #-1
    31b0:	0f032f01 	svceq	0x00032f01
    31b4:	dd080582 	cfstr32le	mvfx0, [r8, #-520]	; 0xfffffdf8
    31b8:	054d0605 	strbeq	r0, [sp, #-1541]	; 0xfffff9fb
    31bc:	05056708 	streq	r6, [r5, #-1800]	; 0xfffff8f8
    31c0:	001b05d7 			; <UNDEFINED> instruction: 0x001b05d7
    31c4:	66020402 	strvs	r0, [r2], -r2, lsl #8
    31c8:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    31cc:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    31d0:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    31d4:	0a056603 	beq	15c9e8 <__bss_end+0x2f388>
    31d8:	4a11054b 	bmi	44470c <__bss_end+0x3170ac>
    31dc:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    31e0:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    31e4:	12054a01 	andne	r4, r5, #4096	; 0x1000
    31e8:	4a1f054b 	bmi	7c471c <__bss_end+0x6970bc>
    31ec:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    31f0:	18054b05 	stmdane	r5, {r0, r2, r8, r9, fp, lr}
    31f4:	01040200 	mrseq	r0, R12_usr
    31f8:	00020582 	andeq	r0, r2, r2, lsl #11
    31fc:	4c010402 	cfstrsmi	mvf0, [r1], {2}
    3200:	052f0905 	streq	r0, [pc, #-2309]!	; 2903 <_start-0xd6fd>
    3204:	06054a10 			; <UNDEFINED> instruction: 0x06054a10
    3208:	4b15054a 	blmi	544738 <__bss_end+0x4170d8>
    320c:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
    3210:	32052e2a 	andcc	r2, r5, #672	; 0x2a0
    3214:	2e0a054a 	cfsh32cs	mvfx0, mvfx10, #42
    3218:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    321c:	0805670b 	stmdaeq	r5, {r0, r1, r3, r8, r9, sl, sp, lr}
    3220:	4b0b054a 	blmi	2c4750 <__bss_end+0x1970f0>
    3224:	058a0e05 	streq	r0, [sl, #3589]	; 0xe05
    3228:	1305d908 	movwne	sp, #22792	; 0x5908
    322c:	01040200 	mrseq	r0, R12_usr
    3230:	9f080566 	svcls	0x00080566
    3234:	02001d05 	andeq	r1, r0, #320	; 0x140
    3238:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    323c:	0b059f0f 	bleq	16ae80 <__bss_end+0x3d820>
    3240:	d7070568 	strle	r0, [r7, -r8, ror #10]
    3244:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    3248:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    324c:	07059f09 	streq	r9, [r5, -r9, lsl #30]
    3250:	0f056783 	svceq	0x00056783
    3254:	66180567 	ldrvs	r0, [r8], -r7, ror #10
    3258:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    325c:	09054b0d 	stmdbeq	r5, {r0, r2, r3, r8, r9, fp, lr}
    3260:	68150566 	ldmdavs	r5, {r1, r2, r5, r6, r8, sl}
    3264:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    3268:	3905ba08 	stmdbcc	r5, {r3, r9, fp, ip, sp, pc}
    326c:	01040200 	mrseq	r0, R12_usr
    3270:	a50c054a 	strge	r0, [ip, #-1354]	; 0xfffffab6
    3274:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    3278:	24052e08 	strcs	r2, [r5], #-3592	; 0xfffff1f8
    327c:	01040200 	mrseq	r0, R12_usr
    3280:	002b054a 	eoreq	r0, fp, sl, asr #10
    3284:	4a010402 	bmi	44294 <ramdisk+0x16c3c>
    3288:	02001f05 	andeq	r1, r0, #5, 30
    328c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3290:	20056719 	andcs	r6, r5, r9, lsl r7
    3294:	4a28054a 	bmi	a047c4 <__bss_end+0x8d7164>
    3298:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    329c:	06054a35 			; <UNDEFINED> instruction: 0x06054a35
    32a0:	6a0a054a 	bvs	2847d0 <__bss_end+0x157170>
    32a4:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
    32a8:	0705310a 	streq	r3, [r5, -sl, lsl #2]
    32ac:	680b054a 	stmdavs	fp, {r1, r3, r6, r8, sl}
    32b0:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    32b4:	17052e08 	strne	r2, [r5, -r8, lsl #28]
    32b8:	2e0a054b 	cfsh32cs	mvfx0, mvfx10, #43
    32bc:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
    32c0:	09054a0a 	stmdbeq	r5, {r1, r3, r9, fp, lr}
    32c4:	0040059e 	umaaleq	r0, r0, lr, r5
    32c8:	4a010402 	bmi	442d8 <ramdisk+0x16c80>
    32cc:	059f0f05 	ldreq	r0, [pc, #3845]	; 41d9 <_start-0xbe27>
    32d0:	0905bd15 	stmdbeq	r5, {r0, r2, r4, r8, sl, fp, ip, sp, pc}
    32d4:	2e1f052e 	cfmul64cs	mvdx0, mvdx15, mvdx14
    32d8:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    32dc:	3a058208 	bcc	163b04 <__bss_end+0x364a4>
    32e0:	01040200 	mrseq	r0, R12_usr
    32e4:	a10d054a 	tstge	sp, sl, asr #10
    32e8:	05681b05 	strbeq	r1, [r8, #-2821]!	; 0xfffff4fb
    32ec:	08054a22 	stmdaeq	r5, {r1, r5, r9, fp, lr}
    32f0:	4b06054a 	blmi	184820 <__bss_end+0x571c0>
    32f4:	02001805 	andeq	r1, r0, #327680	; 0x50000
    32f8:	05820104 	streq	r0, [r2, #260]	; 0x104
    32fc:	1d054f11 	stcne	15, cr4, [r5, #-68]	; 0xffffffbc
    3300:	4a24054a 	bmi	904830 <__bss_end+0x7d71d0>
    3304:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    3308:	9e420317 	mcrls	3, 2, r0, cr2, cr7, {0}
    330c:	05822405 	streq	r2, [r2, #1029]	; 0x405
    3310:	4505ba33 	strmi	fp, [r5, #-2611]	; 0xfffff5cd
    3314:	00020582 	andeq	r0, r2, r2, lsl #11
    3318:	ba010402 	blt	44328 <ramdisk+0x16cd0>
    331c:	6600c203 	strvs	ip, [r0], -r3, lsl #4
    3320:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    3324:	032f0104 			; <UNDEFINED> instruction: 0x032f0104
    3328:	0e056610 	mcreq	6, 0, r6, cr5, cr0, {0}
    332c:	4d0605dc 	cfstr32mi	mvfx0, [r6, #-880]	; 0xfffffc90
    3330:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    3334:	1b05d705 	blne	178f50 <__bss_end+0x4b8f0>
    3338:	02040200 	andeq	r0, r4, #0, 4
    333c:	00130566 	andseq	r0, r3, r6, ror #10
    3340:	66020402 	strvs	r0, [r2], -r2, lsl #8
    3344:	02003905 	andeq	r3, r0, #81920	; 0x14000
    3348:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    334c:	11054b0a 	tstne	r5, sl, lsl #22
    3350:	2e05054a 	cfsh32cs	mvfx0, mvfx5, #42
    3354:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
    3358:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    335c:	33054d3d 	movwcc	r4, #23869	; 0x5d3d
    3360:	4a56054a 	bmi	1584890 <__bss_end+0x1457230>
    3364:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    3368:	07054b26 	streq	r4, [r5, -r6, lsr #22]
    336c:	4d02054a 	cfstr32mi	mvfx0, [r2, #-296]	; 0xfffffed8
    3370:	052f0905 	streq	r0, [pc, #-2309]!	; 2a73 <_start-0xd58d>
    3374:	06054a10 			; <UNDEFINED> instruction: 0x06054a10
    3378:	4b15054a 	blmi	5448a8 <__bss_end+0x417248>
    337c:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
    3380:	33052e2b 	movwcc	r2, #24107	; 0x5e2b
    3384:	2e0a054a 	cfsh32cs	mvfx0, mvfx10, #42
    3388:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    338c:	0805670b 	stmdaeq	r5, {r0, r1, r3, r8, r9, sl, sp, lr}
    3390:	4b0b054a 	blmi	2c48c0 <__bss_end+0x197260>
    3394:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    3398:	0903670e 	stmdbeq	r3, {r1, r2, r3, r8, r9, sl, sp, lr}
    339c:	d90805ba 	stmdble	r8, {r1, r3, r4, r5, r7, r8, sl}
    33a0:	00140567 	andseq	r0, r4, r7, ror #10
    33a4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    33a8:	059f0805 	ldreq	r0, [pc, #2053]	; 3bb5 <_start-0xc44b>
    33ac:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    33b0:	0f056601 	svceq	0x00056601
    33b4:	6710059f 			; <UNDEFINED> instruction: 0x6710059f
    33b8:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    33bc:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
    33c0:	0a054a01 	beq	155bcc <__bss_end+0x2856c>
    33c4:	4a08056b 	bmi	204978 <__bss_end+0xd7318>
    33c8:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    33cc:	09054b16 	stmdbeq	r5, {r1, r2, r4, r8, r9, fp, lr}
    33d0:	2e20052e 	cfsh64cs	mvdx0, mvdx0, #30
    33d4:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    33d8:	3f059e08 	svccc	0x00059e08
    33dc:	01040200 	mrseq	r0, R12_usr
    33e0:	9f0e054a 	svcls	0x000e054a
    33e4:	05bd0b05 	ldreq	r0, [sp, #2821]!	; 0xb05
    33e8:	1305d707 	movwne	sp, #22279	; 0x5707
    33ec:	01040200 	mrseq	r0, R12_usr
    33f0:	9f090566 	svcls	0x00090566
    33f4:	67830705 	strvs	r0, [r3, r5, lsl #14]
    33f8:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
    33fc:	08056618 	stmdaeq	r5, {r3, r4, r9, sl, sp, lr}
    3400:	4b0d054a 	blmi	344930 <__bss_end+0x2172d0>
    3404:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    3408:	09056816 	stmdbeq	r5, {r1, r2, r4, fp, sp, lr}
    340c:	ba08052e 	blt	2048cc <__bss_end+0xd726c>
    3410:	02003a05 	andeq	r3, r0, #20480	; 0x5000
    3414:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3418:	1205a60b 	andne	sl, r5, #11534336	; 0xb00000
    341c:	4a08054a 	bmi	20494c <__bss_end+0xd72ec>
    3420:	05670f05 	strbeq	r0, [r7, #-3845]!	; 0xfffff0fb
    3424:	29054a22 	stmdbcs	r5, {r1, r5, r9, fp, lr}
    3428:	4a31054a 	bmi	c44958 <__bss_end+0xb172f8>
    342c:	052e1c05 	streq	r1, [lr, #-3077]!	; 0xfffff3fb
    3430:	0f054a06 	svceq	0x00054a06
    3434:	be0a0567 	cfsh32lt	mvfx0, mvfx10, #55
    3438:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
    343c:	0705360a 	streq	r3, [r5, -sl, lsl #12]
    3440:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    3444:	17056701 	strne	r6, [r5, -r1, lsl #14]
    3448:	01040200 	mrseq	r0, R12_usr
    344c:	0019054a 	andseq	r0, r9, sl, asr #10
    3450:	49010402 	stmdbmi	r1, {r1, sl}
    3454:	054c1105 	strbeq	r1, [ip, #-261]	; 0xfffffefb
    3458:	1b052e05 	blne	14ec74 <__bss_end+0x21614>
    345c:	4a05052e 	bmi	14491c <__bss_end+0x172bc>
    3460:	05812005 	streq	r2, [r1, #5]
    3464:	0d054c06 	stceq	12, cr4, [r5, #-24]	; 0xffffffe8
    3468:	681b05a1 	ldmdavs	fp, {r0, r5, r7, r8, sl}
    346c:	054a2205 	strbeq	r2, [sl, #-517]	; 0xfffffdfb
    3470:	06054a08 	streq	r4, [r5], -r8, lsl #20
    3474:	0018054b 	andseq	r0, r8, fp, asr #10
    3478:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
    347c:	05500a05 	ldrbeq	r0, [r0, #-2565]	; 0xfffff5fb
    3480:	1d054a16 	vstrne	s8, [r5, #-88]	; 0xffffffa8
    3484:	4a03054a 	bmi	c49b4 <ramdisk+0x9735c>
    3488:	059f0c05 	ldreq	r0, [pc, #3077]	; 4095 <_start-0xbf6b>
    348c:	7fb00317 	svcvc	0x00b00317
    3490:	822405d6 	eorhi	r0, r4, #897581056	; 0x35800000
    3494:	05ba3305 	ldreq	r3, [sl, #773]!	; 0x305
    3498:	73058245 	movwvc	r8, #21061	; 0x5245
    349c:	4a6305ba 	bmi	18c4b8c <__bss_end+0x179752c>
    34a0:	4a018805 	bmi	654bc <ramdisk+0x37e64>
    34a4:	05665e05 	strbeq	r5, [r6, #-3589]!	; 0xfffff1fb
    34a8:	04020002 	streq	r0, [r2], #-2
    34ac:	05054a01 	streq	r4, [r5, #-2561]	; 0xfffff5ff
    34b0:	05821303 	streq	r1, [r2, #771]	; 0x303
    34b4:	00c1030b 	sbceq	r0, r1, fp, lsl #6
    34b8:	bc02052e 	cfstr32lt	mvfx0, [r2], {46}	; 0x2e
    34bc:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    34c0:	032f0104 			; <UNDEFINED> instruction: 0x032f0104
    34c4:	0805660c 	stmdaeq	r5, {r2, r3, r9, sl, sp, lr}
    34c8:	d7050589 	strle	r0, [r5, -r9, lsl #11]
    34cc:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    34d0:	06054a10 			; <UNDEFINED> instruction: 0x06054a10
    34d4:	4c0a052e 	cfstr32mi	mvfx0, [sl], {46}	; 0x2e
    34d8:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    34dc:	16052e07 	strne	r2, [r5], -r7, lsl #28
    34e0:	2e09054b 	cfsh32cs	mvfx0, mvfx9, #43
    34e4:	052e2005 	streq	r2, [lr, #-5]!
    34e8:	08054a09 	stmdaeq	r5, {r0, r3, r9, fp, lr}
    34ec:	003f059e 	mlaseq	pc, lr, r5, r0	; <UNPREDICTABLE>
    34f0:	4a010402 	bmi	44500 <ramdisk+0x16ea8>
    34f4:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    34f8:	0b05be07 	bleq	172d1c <__bss_end+0x456bc>
    34fc:	054a2103 	strbeq	r2, [sl, #-259]	; 0xfffffefd
    3500:	0a05f308 	beq	180128 <__bss_end+0x52ac8>
    3504:	67140567 	ldrvs	r0, [r4, -r7, ror #10]
    3508:	d7f30605 	ldrble	r0, [r3, r5, lsl #12]!
    350c:	054a3105 	strbeq	r3, [sl, #-261]	; 0xfffffefb
    3510:	9f674a06 	svcls	0x00674a06
    3514:	059f0805 	ldreq	r0, [pc, #2053]	; 3d21 <_start-0xc2df>
    3518:	0c052e10 	stceq	14, cr2, [r5], {16}
    351c:	9f0f054b 	svcls	0x000f054b
    3520:	05c00205 	strbeq	r0, [r0, #517]	; 0x205
    3524:	04020001 	streq	r0, [r2], #-1
    3528:	0e032f01 	cdpeq	15, 0, cr2, cr3, cr1, {0}
    352c:	87080582 	strhi	r0, [r8, -r2, lsl #11]
    3530:	05830505 	streq	r0, [r3, #1285]	; 0x505
    3534:	06056909 	streq	r6, [r5], -r9, lsl #18
    3538:	6b0f05d7 	blvs	3c4c9c <__bss_end+0x29763c>
    353c:	056d0905 	strbeq	r0, [sp, #-2309]!	; 0xfffff6fb
    3540:	c3032f01 	movwgt	r2, #16129	; 0x3f01
    3544:	08056601 	stmdaeq	r5, {r0, r9, sl, sp, lr}
    3548:	059e0c03 	ldreq	r0, [lr, #3075]	; 0xc03
    354c:	1805d705 	stmdane	r5, {r0, r2, r8, r9, sl, ip, lr, pc}
    3550:	01040200 	mrseq	r0, R12_usr
    3554:	6c050566 	cfstr32vs	mvfx0, [r5], {102}	; 0x66
    3558:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
    355c:	03660104 	cmneq	r6, #4, 2
    3560:	06054a3b 			; <UNDEFINED> instruction: 0x06054a3b
    3564:	0037054a 	eorseq	r0, r7, sl, asr #10
    3568:	66010402 	strvs	r0, [r1], -r2, lsl #8
    356c:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
    3570:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3574:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    3578:	08052e01 	stmdaeq	r5, {r0, r9, sl, fp, sp}
    357c:	6809054b 	stmdavs	r9, {r0, r1, r3, r6, r8, sl}
    3580:	05671405 	strbeq	r1, [r7, #-1029]!	; 0xfffffbfb
    3584:	06054a0c 	streq	r4, [r5], -ip, lsl #20
    3588:	67130567 	ldrvs	r0, [r3, -r7, ror #10]
    358c:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    3590:	0a054b07 	beq	1561b4 <__bss_end+0x28b54>
    3594:	01040200 	mrseq	r0, R12_usr
    3598:	000f0567 	andeq	r0, pc, r7, ror #10
    359c:	4a010402 	bmi	445ac <ramdisk+0x16f54>
    35a0:	02001f05 	andeq	r1, r0, #5, 30
    35a4:	059e0104 	ldreq	r0, [lr, #260]	; 0x104
    35a8:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    35ac:	12054a01 	andne	r4, r5, #4096	; 0x1000
    35b0:	01040200 	mrseq	r0, R12_usr
    35b4:	4c170581 	cfldr32mi	mvfx0, [r7], {129}	; 0x81
    35b8:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
    35bc:	0e054a1c 			; <UNDEFINED> instruction: 0x0e054a1c
    35c0:	09054b2e 	stmdbeq	r5, {r1, r2, r3, r5, r8, r9, fp, lr}
    35c4:	670a054a 	strvs	r0, [sl, -sl, asr #10]
    35c8:	68080584 	stmdavs	r8, {r2, r7, r8, sl}
    35cc:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    35d0:	15059f09 	strne	r9, [r5, #-3849]	; 0xfffff0f7
    35d4:	01040200 	mrseq	r0, R12_usr
    35d8:	9f090566 	svcls	0x00090566
    35dc:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
    35e0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    35e4:	0f059f15 	svceq	0x00059f15
    35e8:	68070569 	stmdavs	r7, {r0, r3, r5, r6, r8, sl}
    35ec:	05670b05 	strbeq	r0, [r7, #-2821]!	; 0xfffff4fb
    35f0:	1b052f0a 	blne	14f220 <__bss_end+0x21bc0>
    35f4:	bc0c0582 	cfstr32lt	mvfx0, [ip], {130}	; 0x82
    35f8:	054a1305 	strbeq	r1, [sl, #-773]	; 0xfffffcfb
    35fc:	0e052e09 	cdpeq	14, 0, cr2, cr5, cr9, {0}
    3600:	9f0a054f 	svcls	0x000a054f
    3604:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
    3608:	0e054a08 	vmlaeq.f32	s8, s10, s16
    360c:	a0090533 	andge	r0, r9, r3, lsr r5
    3610:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
    3614:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3618:	21059f09 	tstcs	r5, r9, lsl #30
    361c:	02040200 	andeq	r0, r4, #0, 4
    3620:	00140566 	andseq	r0, r4, r6, ror #10
    3624:	4a020402 	bmi	84634 <ramdisk+0x56fdc>
    3628:	02002d05 	andeq	r2, r0, #320	; 0x140
    362c:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    3630:	0b059f10 	bleq	16b278 <__bss_end+0x3dc18>
    3634:	05666d03 	strbeq	r6, [r6, #-3331]!	; 0xfffff2fd
    3638:	8215030e 	andshi	r0, r5, #939524096	; 0x38000000
    363c:	05bb0d05 	ldreq	r0, [fp, #3333]!	; 0xd05
    3640:	0e056608 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx8
    3644:	9f09054b 	svcls	0x0009054b
    3648:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    364c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3650:	0c059f0f 	stceq	15, cr9, [r5], {15}
    3654:	6a1c054a 	bvs	704b84 <__bss_end+0x5d7524>
    3658:	054a2c05 	strbeq	r2, [sl, #-3077]	; 0xfffff3fb
    365c:	18054a06 	stmdane	r5, {r1, r2, r9, fp, lr}
    3660:	4a14054b 	bmi	504b94 <__bss_end+0x3d7534>
    3664:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    3668:	1005bc09 	andne	fp, r5, r9, lsl #24
    366c:	4a06054a 	bmi	184b9c <__bss_end+0x5753c>
    3670:	02002705 	andeq	r2, r0, #1310720	; 0x140000
    3674:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3678:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
    367c:	0a054a01 	beq	155e88 <__bss_end+0x28828>
    3680:	4a080569 	bmi	204c2c <__bss_end+0xd75cc>
    3684:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    3688:	09054b16 	stmdbeq	r5, {r1, r2, r4, r8, r9, fp, lr}
    368c:	2e20052e 	cfsh64cs	mvdx0, mvdx0, #30
    3690:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    3694:	3f059e08 	svccc	0x00059e08
    3698:	01040200 	mrseq	r0, R12_usr
    369c:	9f0e054a 	svcls	0x000e054a
    36a0:	05bd1405 	ldreq	r1, [sp, #1029]!	; 0x405
    36a4:	1e052e08 	cdpne	14, 0, cr2, cr5, cr8, {0}
    36a8:	4a08052e 	bmi	204b68 <__bss_end+0xd7508>
    36ac:	05820705 	streq	r0, [r2, #1797]	; 0x705
    36b0:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
    36b4:	0d054a01 	vstreq	s8, [r5, #-4]
    36b8:	6a0205a0 	bvs	84d40 <ramdisk+0x576e8>
    36bc:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    36c0:	032f0104 			; <UNDEFINED> instruction: 0x032f0104
    36c4:	0505660d 	streq	r6, [r5, #-1549]	; 0xfffff9f3
    36c8:	001205a4 	andseq	r0, r2, r4, lsr #11
    36cc:	66010402 	strvs	r0, [r1], -r2, lsl #8
    36d0:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
    36d4:	0e05d705 	cdpeq	7, 0, cr13, cr5, cr5, {0}
    36d8:	68090567 	stmdavs	r9, {r0, r1, r2, r5, r6, r8, sl}
    36dc:	05bb0605 	ldreq	r0, [fp, #1541]!	; 0x605
    36e0:	08056710 	stmdaeq	r5, {r4, r8, r9, sl, sp, lr}
    36e4:	2e07054a 	cfsh32cs	mvfx0, mvfx7, #42
    36e8:	054b1005 	strbeq	r1, [fp, #-5]
    36ec:	08054a16 	stmdaeq	r5, {r1, r2, r4, r9, fp, lr}
    36f0:	0318052e 	tsteq	r8, #192937984	; 0xb800000
    36f4:	27054a0a 	strcs	r4, [r5, -sl, lsl #20]
    36f8:	4a18052e 	bmi	604bb8 <__bss_end+0x4d7558>
    36fc:	05821605 	streq	r1, [r2, #1541]	; 0x605
    3700:	0705690a 	streq	r6, [r5, -sl, lsl #18]
    3704:	6714054d 	ldrvs	r0, [r4, -sp, asr #10]
    3708:	054a1005 	strbeq	r1, [sl, #-5]
    370c:	06054b0b 	streq	r4, [r5], -fp, lsl #22
    3710:	059e0e03 	ldreq	r0, [lr, #3587]	; 0xe03
    3714:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    3718:	05056601 	streq	r6, [r5, #-1537]	; 0xfffff9ff
    371c:	001f054c 	andseq	r0, pc, ip, asr #10
    3720:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3724:	05680205 	strbeq	r0, [r8, #-517]!	; 0xfffffdfb
    3728:	04020001 	streq	r0, [r2], #-1
    372c:	0c032f01 	stceq	15, cr2, [r3], {1}
    3730:	87080566 	strhi	r0, [r8, -r6, ror #10]
    3734:	05d70505 	ldrbeq	r0, [r7, #1285]	; 0x505
    3738:	09056b0e 	stmdbeq	r5, {r1, r2, r3, r8, r9, fp, sp, lr}
    373c:	2f01056c 	svccs	0x0001056c
    3740:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
    3744:	0505a408 	streq	sl, [r5, #-1032]	; 0xfffffbf8
    3748:	670605d7 			; <UNDEFINED> instruction: 0x670605d7
    374c:	bd670a05 	vstmdblt	r7!, {s1-s5}
    3750:	059f0705 	ldreq	r0, [pc, #1797]	; 3e5d <_start-0xc1a3>
    3754:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    3758:	07056601 	streq	r6, [r5, -r1, lsl #12]
    375c:	6705054b 	strvs	r0, [r5, -fp, asr #10]
    3760:	05670b05 	strbeq	r0, [r7, #-2821]!	; 0xfffff4fb
    3764:	20059f08 	andcs	r9, r5, r8, lsl #30
    3768:	01040200 	mrseq	r0, R12_usr
    376c:	4f020566 	svcmi	0x00020566
    3770:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    3774:	056600c1 	strbeq	r0, [r6, #-193]!	; 0xffffff3f
    3778:	0505a508 	streq	sl, [r5, #-1288]	; 0xfffffaf8
    377c:	680905d7 	stmdavs	r9, {r0, r1, r2, r4, r6, r7, r8, sl}
    3780:	05d70605 	ldrbeq	r0, [r7, #1541]	; 0x605
    3784:	0805670d 	stmdaeq	r5, {r0, r2, r3, r8, r9, sl, sp, lr}
    3788:	2e07052e 	cfsh32cs	mvfx0, mvfx7, #30
    378c:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    3790:	0e056808 	cdpeq	8, 0, cr6, cr5, cr8, {0}
    3794:	01040200 	mrseq	r0, R12_usr
    3798:	88020566 	stmdahi	r2, {r1, r2, r5, r6, r8, sl}
    379c:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    37a0:	0805660e 	stmdaeq	r5, {r1, r2, r3, r9, sl, sp, lr}
    37a4:	05ba0a03 	ldreq	r0, [sl, #2563]!	; 0xa03
    37a8:	0a05d705 	beq	1793c4 <__bss_end+0x4bd64>
    37ac:	68090567 	stmdavs	r9, {r0, r1, r2, r5, r6, r8, sl}
    37b0:	054a1a05 	strbeq	r1, [sl, #-2565]	; 0xfffff5fb
    37b4:	06054a25 	streq	r4, [r5], -r5, lsr #20
    37b8:	4b0f052e 	blmi	3c4c78 <__bss_end+0x297618>
    37bc:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    37c0:	054b690a 	strbeq	r6, [fp, #-2314]	; 0xfffff6f6
    37c4:	0a054a07 	beq	155fe8 <__bss_end+0x28988>
    37c8:	4a16054b 	bmi	584cfc <__bss_end+0x45769c>
    37cc:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    37d0:	0b059f09 	bleq	16b3fc <__bss_end+0x3dd9c>
    37d4:	4a070567 	bmi	1c4d78 <__bss_end+0x97718>
    37d8:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
    37dc:	0705670b 	streq	r6, [r5, -fp, lsl #14]
    37e0:	3009054a 	andcc	r0, r9, sl, asr #10
    37e4:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    37e8:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    37ec:	19056705 	stmdbne	r5, {r0, r2, r8, r9, sl, sp, lr}
    37f0:	4a050566 	bmi	144d90 <__bss_end+0x17730>
    37f4:	18030f05 	stmdane	r3, {r0, r2, r8, r9, sl, fp}
    37f8:	2e0b0582 	cfsh32cs	mvfx0, mvfx11, #-62
    37fc:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
    3800:	08052e0b 	stmdaeq	r5, {r0, r1, r3, r9, sl, fp, sp}
    3804:	4c0a054b 	cfstr32mi	mvfx0, [sl], {75}	; 0x4b
    3808:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    380c:	0d05f30b 	stceq	3, cr15, [r5, #-44]	; 0xffffffd4
    3810:	4a0a0568 	bmi	284db8 <__bss_end+0x157758>
    3814:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
    3818:	0c052e14 	stceq	14, cr2, [r5], {20}
    381c:	9e0b052e 	cfsh32ls	mvfx0, mvfx11, #30
    3820:	02002c05 	andeq	r2, r0, #1280	; 0x500
    3824:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3828:	1805670a 	stmdane	r5, {r1, r3, r8, r9, sl, sp, lr}
    382c:	2e160584 	cdpcs	5, 1, cr0, cr6, cr4, {4}
    3830:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    3834:	0b059e23 	bleq	16b0c8 <__bss_end+0x3da68>
    3838:	003c052e 	eorseq	r0, ip, lr, lsr #10
    383c:	4a010402 	bmi	4484c <ramdisk+0x171f4>
    3840:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
    3844:	06056809 	streq	r6, [r5], -r9, lsl #16
    3848:	03080583 	movweq	r0, #34179	; 0x8583
    384c:	0705d676 	smlsdxeq	r5, r6, r6, sp
    3850:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    3854:	0705670c 	streq	r6, [r5, -ip, lsl #14]
    3858:	2e130567 	cfmsc32cs	mvfx0, mvfx3, mvfx7
    385c:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
    3860:	0105bf02 	tsteq	r5, r2, lsl #30
    3864:	660c032f 	strvs	r0, [ip], -pc, lsr #6
    3868:	05880805 	streq	r0, [r8, #2053]	; 0x805
    386c:	1b05d705 	blne	179488 <__bss_end+0x4be28>
    3870:	02040200 	andeq	r0, r4, #0, 4
    3874:	00130566 	andseq	r0, r3, r6, ror #10
    3878:	66020402 	strvs	r0, [r2], -r2, lsl #8
    387c:	02003905 	andeq	r3, r0, #81920	; 0x14000
    3880:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    3884:	11054b0a 	tstne	r5, sl, lsl #22
    3888:	2e05054a 	cfsh32cs	mvfx0, mvfx5, #42
    388c:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
    3890:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3894:	18054c08 	stmdane	r5, {r3, sl, fp, lr}
    3898:	4a05054a 	bmi	144dc8 <__bss_end+0x17768>
    389c:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    38a0:	0a054a06 	beq	1560c0 <__bss_end+0x28a60>
    38a4:	f313054b 	vrshl.u16	q0, <illegal reg q5.5>, <illegal reg q1.5>
    38a8:	05840a05 	streq	r0, [r4, #2565]	; 0xa05
    38ac:	0705d708 	streq	sp, [r5, -r8, lsl #14]
    38b0:	001f054b 	andseq	r0, pc, fp, asr #10
    38b4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    38b8:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    38bc:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    38c0:	07056601 	streq	r6, [r5, -r1, lsl #12]
    38c4:	0020054b 	eoreq	r0, r0, fp, asr #10
    38c8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    38cc:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    38d0:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    38d4:	1705670b 	strne	r6, [r5, -fp, lsl #14]
    38d8:	4a1305f5 	bmi	4c50b4 <__bss_end+0x397a54>
    38dc:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    38e0:	1a05bc06 	bne	172900 <__bss_end+0x452a0>
    38e4:	01040200 	mrseq	r0, R12_usr
    38e8:	00140566 	andseq	r0, r4, r6, ror #10
    38ec:	4a010402 	bmi	448fc <ramdisk+0x172a4>
    38f0:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
    38f4:	1f052e08 	svcne	0x00052e08
    38f8:	4a08052e 	bmi	204db8 <__bss_end+0xd7758>
    38fc:	059e0705 	ldreq	r0, [lr, #1797]	; 0x705
    3900:	0e054b09 	vmlaeq.f64	d4, d5, d9
    3904:	be060568 	cfsh32lt	mvfx0, mvfx6, #56
    3908:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    390c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3910:	0105a102 	tsteq	r5, r2, lsl #2
    3914:	01040200 	mrseq	r0, R12_usr
    3918:	660c032f 	strvs	r0, [ip], -pc, lsr #6
    391c:	52860805 	addpl	r0, r6, #327680	; 0x50000
    3920:	05d70505 	ldrbeq	r0, [r7, #1285]	; 0x505
    3924:	0905670d 	stmdbeq	r5, {r0, r2, r3, r8, r9, sl, sp, lr}
    3928:	dd06054c 	cfstr32le	mvfx0, [r6, #-304]	; 0xfffffed0
    392c:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    3930:	07052e08 	streq	r2, [r5, -r8, lsl #28]
    3934:	4b09052e 	blmi	244df4 <__bss_end+0x117794>
    3938:	05680f05 	strbeq	r0, [r8, #-3845]!	; 0xfffff0fb
    393c:	08052e15 	stmdaeq	r5, {r0, r2, r4, r9, sl, fp, sp}
    3940:	4b0a052e 	blmi	284e00 <__bss_end+0x1577a0>
    3944:	054d0705 	strbeq	r0, [sp, #-1797]	; 0xfffff8fb
    3948:	6609030e 	strvs	r0, [r9], -lr, lsl #6
    394c:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
    3950:	0f052e0e 	svceq	0x00052e0e
    3954:	2e150584 	cdpcs	5, 1, cr0, cr5, cr4, {4}
    3958:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    395c:	16055112 			; <UNDEFINED> instruction: 0x16055112
    3960:	510d054b 	tstpl	sp, fp, asr #10
    3964:	05bb0a05 	ldreq	r0, [fp, #2565]!	; 0xa05
    3968:	0b05670e 	bleq	15d5a8 <__bss_end+0x2ff48>
    396c:	001e05bb 			; <UNDEFINED> instruction: 0x001e05bb
    3970:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3974:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    3978:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    397c:	07056601 	streq	r6, [r5, -r1, lsl #12]
    3980:	670b054f 	strvs	r0, [fp, -pc, asr #10]
    3984:	059f0805 	ldreq	r0, [pc, #2053]	; 4191 <_start-0xbe6f>
    3988:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    398c:	0c056601 	stceq	6, cr6, [r5], {1}
    3990:	d908056a 	stmdble	r8, {r1, r3, r5, r6, r8, sl}
    3994:	02001d05 	andeq	r1, r0, #320	; 0x140
    3998:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    399c:	0105a402 	tsteq	r5, r2, lsl #8
    39a0:	660c032f 	strvs	r0, [ip], -pc, lsr #6
    39a4:	09030805 	stmdbeq	r3, {r0, r2, fp}
    39a8:	d7050582 	strle	r0, [r5, -r2, lsl #11]
    39ac:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    39b0:	06054c09 	streq	r4, [r5], -r9, lsl #24
    39b4:	001905d7 			; <UNDEFINED> instruction: 0x001905d7
    39b8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    39bc:	054e0605 	strbeq	r0, [lr, #-1541]	; 0xfffff9fb
    39c0:	0a05670c 	beq	15d5f8 <__bss_end+0x2ff98>
    39c4:	9f08054b 	svcls	0x0008054b
    39c8:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    39cc:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    39d0:	07056601 	streq	r6, [r5, -r1, lsl #12]
    39d4:	0016054b 	andseq	r0, r6, fp, asr #10
    39d8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    39dc:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    39e0:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    39e4:	07056601 	streq	r6, [r5, -r1, lsl #12]
    39e8:	0b054b4b 	bleq	15671c <__bss_end+0x290bc>
    39ec:	bb080567 	bllt	204f90 <__bss_end+0xd7930>
    39f0:	05681005 	strbeq	r1, [r8, #-5]!
    39f4:	07052e0e 	streq	r2, [r5, -lr, lsl #28]
    39f8:	8309052e 	movwhi	r0, #38190	; 0x952e
    39fc:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
    3a00:	19054b09 	stmdbne	r5, {r0, r3, r8, r9, fp, lr}
    3a04:	4b12052e 	blmi	484ec4 <__bss_end+0x357864>
    3a08:	052e1005 	streq	r1, [lr, #-5]!
    3a0c:	05832e07 	streq	r2, [r3, #3591]	; 0xe07
    3a10:	07052e16 	smladeq	r5, r6, lr, r2
    3a14:	6710054a 	ldrvs	r0, [r0, -sl, asr #10]
    3a18:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
    3a1c:	22052e07 	andcs	r2, r5, #7, 28	; 0x70
    3a20:	4a07052e 	bmi	1c4ee0 <__bss_end+0x97880>
    3a24:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    3a28:	26052e1b 			; <UNDEFINED> instruction: 0x26052e1b
    3a2c:	4b07054a 	blmi	1c4f5c <__bss_end+0x978fc>
    3a30:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    3a34:	07052e14 	smladeq	r5, r4, lr, r2
    3a38:	8309052e 	movwhi	r0, #38190	; 0x952e
    3a3c:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
    3a40:	07054c0c 	streq	r4, [r5, -ip, lsl #24]
    3a44:	031105a1 	tsteq	r1, #675282944	; 0x28400000
    3a48:	0605660d 	streq	r6, [r5], -sp, lsl #12
    3a4c:	0805832e 	stmdaeq	r5, {r1, r2, r3, r5, r8, r9, pc}
    3a50:	2e0c059f 	mcrcs	5, 0, r0, cr12, cr15, {4}
    3a54:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    3a58:	10054b08 	andne	r4, r5, r8, lsl #22
    3a5c:	4c08052e 	cfstr32mi	mvfx0, [r8], {46}	; 0x2e
    3a60:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
    3a64:	0205bd05 	andeq	fp, r5, #320	; 0x140
    3a68:	2f0105a4 	svccs	0x000105a4
    3a6c:	05820d03 	streq	r0, [r2, #3331]	; 0xd03
    3a70:	9e090302 	cdpls	3, 0, cr0, cr9, cr2, {0}
    3a74:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    3a78:	0e05d705 	cdpeq	7, 0, cr13, cr5, cr5, {0}
    3a7c:	4c090567 	cfstr32mi	mvfx0, [r9], {103}	; 0x67
    3a80:	05d70605 	ldrbeq	r0, [r7, #1541]	; 0x605
    3a84:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    3a88:	27056601 	strcs	r6, [r5, -r1, lsl #12]
    3a8c:	01040200 	mrseq	r0, R12_usr
    3a90:	0014052e 	andseq	r0, r4, lr, lsr #10
    3a94:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    3a98:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
    3a9c:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3aa0:	14055006 	strne	r5, [r5], #-6
    3aa4:	05661c03 	strbeq	r1, [r6, #-3075]!	; 0xfffff3fd
    3aa8:	75082e05 	strvc	r2, [r8, #-3589]	; 0xfffff1fb
    3aac:	05f30b05 	ldrbeq	r0, [r3, #2821]!	; 0xb05
    3ab0:	1405d708 	strne	sp, [r5], #-1800	; 0xfffff8f8
    3ab4:	2e260567 	cfsh64cs	mvdx0, mvdx6, #55
    3ab8:	052e5405 	streq	r5, [lr, #-1029]!	; 0xfffffbfb
    3abc:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
    3ac0:	40054a01 	andmi	r4, r5, r1, lsl #20
    3ac4:	01040200 	mrseq	r0, R12_usr
    3ac8:	002e052e 	eoreq	r0, lr, lr, lsr #10
    3acc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    3ad0:	02005405 	andeq	r5, r0, #83886080	; 0x5000000
    3ad4:	004a0304 	subeq	r0, sl, r4, lsl #6
    3ad8:	06040402 	streq	r0, [r4], -r2, lsl #8
    3adc:	000a054a 	andeq	r0, sl, sl, asr #10
    3ae0:	06060402 	streq	r0, [r6], -r2, lsl #8
    3ae4:	3008052e 	andcc	r0, r8, lr, lsr #10
    3ae8:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
    3aec:	0b059f09 	bleq	16b718 <__bss_end+0x3e0b8>
    3af0:	4b120567 	blmi	485094 <__bss_end+0x357a34>
    3af4:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    3af8:	1a059f0a 	bne	16b728 <__bss_end+0x3e0c8>
    3afc:	2e15054a 	cfmac32cs	mvfx0, mvfx5, mvfx10
    3b00:	052f1005 	streq	r1, [pc, #-5]!	; 3b03 <_start-0xc4fd>
    3b04:	0a05661b 	beq	15d378 <__bss_end+0x2fd18>
    3b08:	0034052e 	eorseq	r0, r4, lr, lsr #10
    3b0c:	4a010402 	bmi	44b1c <ramdisk+0x174c4>
    3b10:	05f30905 	ldrbeq	r0, [r3, #2309]!	; 0x905
    3b14:	0f052e11 	svceq	0x00052e11
    3b18:	661a054b 	ldrvs	r0, [sl], -fp, asr #10
    3b1c:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    3b20:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    3b24:	40054a01 	andmi	r4, r5, r1, lsl #20
    3b28:	01040200 	mrseq	r0, R12_usr
    3b2c:	0024052e 	eoreq	r0, r4, lr, lsr #10
    3b30:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    3b34:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
    3b38:	053d080b 	ldreq	r0, [sp, #-2059]!	; 0xfffff7f5
    3b3c:	0f05670d 	svceq	0x0005670d
    3b40:	bb110569 	bllt	4450ec <__bss_end+0x317a8c>
    3b44:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    3b48:	0c052e0d 	stceq	14, cr2, [r5], {13}
    3b4c:	0020054b 	eoreq	r0, r0, fp, asr #10
    3b50:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3b54:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    3b58:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3b5c:	0c054b0a 			; <UNDEFINED> instruction: 0x0c054b0a
    3b60:	2e14059f 	cfcmp32cs	r0, mvfx4, mvfx15
    3b64:	05510705 	ldrbeq	r0, [r1, #-1797]	; 0xfffff8fb
    3b68:	0805670b 	stmdaeq	r5, {r0, r1, r3, r8, r9, sl, sp, lr}
    3b6c:	670c059f 			; <UNDEFINED> instruction: 0x670c059f
    3b70:	05a60205 	streq	r0, [r6, #517]!	; 0x205
    3b74:	80032f01 	andhi	r2, r3, r1, lsl #30
    3b78:	06056604 	streq	r6, [r5], -r4, lsl #12
    3b7c:	05052808 	streq	r2, [r5, #-2056]	; 0xfffff7f8
    3b80:	004305ba 	strheq	r0, [r3], #-90	; 0xffffffa6
    3b84:	4a010402 	bmi	44b94 <ramdisk+0x1753c>
    3b88:	d6030c05 	strle	r0, [r3], -r5, lsl #24
    3b8c:	08054a00 	stmdaeq	r5, {r9, fp, lr}
    3b90:	4b0d054b 	blmi	3450c4 <__bss_end+0x217a64>
    3b94:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    3b98:	04020043 	streq	r0, [r2], #-67	; 0xffffffbd
    3b9c:	03052e04 	movweq	r2, #24068	; 0x5e04
    3ba0:	01040200 	mrseq	r0, R12_usr
    3ba4:	00280566 	eoreq	r0, r8, r6, ror #10
    3ba8:	66030402 	strvs	r0, [r3], -r2, lsl #8
    3bac:	02002f05 	andeq	r2, r0, #5, 30
    3bb0:	05ba0304 	ldreq	r0, [sl, #772]!	; 0x304
    3bb4:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    3bb8:	06059e03 	streq	r9, [r5], -r3, lsl #28
    3bbc:	0017054b 	andseq	r0, r7, fp, asr #10
    3bc0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3bc4:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    3bc8:	0a058307 	beq	1647ec <__bss_end+0x3718c>
    3bcc:	4a1b0583 	bmi	6c51e0 <__bss_end+0x597b80>
    3bd0:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    3bd4:	0e052f1b 	mcreq	15, 0, r2, cr5, cr11, {0}
    3bd8:	4b070582 	blmi	1c51e8 <__bss_end+0x97b88>
    3bdc:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
    3be0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3be4:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
    3be8:	44056602 	strmi	r6, [r5], #-1538	; 0xfffff9fe
    3bec:	02040200 	andeq	r0, r4, #0, 4
    3bf0:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
    3bf4:	05660603 	strbeq	r0, [r6, #-1539]!	; 0xfffff9fd
    3bf8:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    3bfc:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    3c00:	07052f14 	smladeq	r5, r4, pc, r2	; <UNPREDICTABLE>
    3c04:	003a0566 	eorseq	r0, sl, r6, ror #10
    3c08:	66020402 	strvs	r0, [r2], -r2, lsl #8
    3c0c:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    3c10:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    3c14:	0402005f 	streq	r0, [r2], #-95	; 0xffffffa1
    3c18:	07056603 	streq	r6, [r5, -r3, lsl #12]
    3c1c:	00040583 	andeq	r0, r4, r3, lsl #11
    3c20:	68020402 	stmdavs	r2, {r1, sl}
    3c24:	02040200 	andeq	r0, r4, #0, 4
    3c28:	0007059f 	muleq	r7, pc, r5	; <UNPREDICTABLE>
    3c2c:	9f020402 	svcls	0x00020402
    3c30:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
    3c34:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3c38:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    3c3c:	09054c02 	stmdbeq	r5, {r1, sl, fp, lr}
    3c40:	02040200 	andeq	r0, r4, #0, 4
    3c44:	000705ba 			; <UNDEFINED> instruction: 0x000705ba
    3c48:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    3c4c:	02001c05 	andeq	r1, r0, #1280	; 0x500
    3c50:	059f0204 	ldreq	r0, [pc, #516]	; 3e5c <_start-0xc1a4>
    3c54:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    3c58:	0705ba02 	streq	fp, [r5, -r2, lsl #20]
    3c5c:	02040200 	andeq	r0, r4, #0, 4
    3c60:	001c059e 	mulseq	ip, lr, r5
    3c64:	2f020402 	svccs	0x00020402
    3c68:	02000905 	andeq	r0, r0, #81920	; 0x14000
    3c6c:	05ba0204 	ldreq	r0, [sl, #516]!	; 0x204
    3c70:	04020007 	streq	r0, [r2], #-7
    3c74:	02002e02 	andeq	r2, r0, #2, 28
    3c78:	054b0204 	strbeq	r0, [fp, #-516]	; 0xfffffdfc
    3c7c:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    3c80:	20054a02 	andcs	r4, r5, r2, lsl #20
    3c84:	02040200 	andeq	r0, r4, #0, 4
    3c88:	0025054b 	eoreq	r0, r5, fp, asr #10
    3c8c:	4a020402 	bmi	84c9c <ramdisk+0x57644>
    3c90:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    3c94:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    3c98:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    3c9c:	13054a02 	movwne	r4, #23042	; 0x5a02
    3ca0:	02040200 	andeq	r0, r4, #0, 4
    3ca4:	00070566 	andeq	r0, r7, r6, ror #10
    3ca8:	2f020402 	svccs	0x00020402
    3cac:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    3cb0:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3cb4:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    3cb8:	1d054a02 	vstrne	s8, [r5, #-8]
    3cbc:	02040200 	andeq	r0, r4, #0, 4
    3cc0:	00290530 	eoreq	r0, r9, r0, lsr r5
    3cc4:	66020402 	strvs	r0, [r2], -r2, lsl #8
    3cc8:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
    3ccc:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
    3cd0:	04020009 	streq	r0, [r2], #-9
    3cd4:	0705ba02 	streq	fp, [r5, -r2, lsl #20]
    3cd8:	02040200 	andeq	r0, r4, #0, 4
    3cdc:	001d052e 	andseq	r0, sp, lr, lsr #10
    3ce0:	9f020402 	svcls	0x00020402
    3ce4:	02002905 	andeq	r2, r0, #81920	; 0x14000
    3ce8:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    3cec:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    3cf0:	35052e02 	strcc	r2, [r5, #-3586]	; 0xfffff1fe
    3cf4:	02040200 	andeq	r0, r4, #0, 4
    3cf8:	000705ba 			; <UNDEFINED> instruction: 0x000705ba
    3cfc:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    3d00:	02001d05 	andeq	r1, r0, #320	; 0x140
    3d04:	052f0204 	streq	r0, [pc, #-516]!	; 3b08 <_start-0xc4f8>
    3d08:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    3d0c:	2e056602 	cfmadd32cs	mvax0, mvfx6, mvfx5, mvfx2
    3d10:	02040200 	andeq	r0, r4, #0, 4
    3d14:	0009052e 	andeq	r0, r9, lr, lsr #10
    3d18:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    3d1c:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    3d20:	002e0204 	eoreq	r0, lr, r4, lsl #4
    3d24:	4b020402 	blmi	84d34 <ramdisk+0x576dc>
    3d28:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
    3d2c:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3d30:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    3d34:	25054b02 	strcs	r4, [r5, #-2818]	; 0xfffff4fe
    3d38:	02040200 	andeq	r0, r4, #0, 4
    3d3c:	0007054a 	andeq	r0, r7, sl, asr #10
    3d40:	66020402 	strvs	r0, [r2], -r2, lsl #8
    3d44:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    3d48:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3d4c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    3d50:	07056602 	streq	r6, [r5, -r2, lsl #12]
    3d54:	02040200 	andeq	r0, r4, #0, 4
    3d58:	0015052f 	andseq	r0, r5, pc, lsr #10
    3d5c:	4a020402 	bmi	84d6c <ramdisk+0x57714>
    3d60:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    3d64:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3d68:	04020008 	streq	r0, [r2], #-8
    3d6c:	59053002 	stmdbpl	r5, {r1, ip, sp}
    3d70:	02040200 	andeq	r0, r4, #0, 4
    3d74:	05666803 	strbeq	r6, [r6, #-2051]!	; 0xfffff7fd
    3d78:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
    3d7c:	03056602 	movweq	r6, #22018	; 0x5602
    3d80:	01040200 	mrseq	r0, R12_usr
    3d84:	00290582 	eoreq	r0, r9, r2, lsl #11
    3d88:	66030402 	strvs	r0, [r3], -r2, lsl #8
    3d8c:	02003d05 	andeq	r3, r0, #320	; 0x140
    3d90:	05660404 	strbeq	r0, [r6, #-1028]!	; 0xfffffbfc
    3d94:	0305a204 	movweq	sl, #20996	; 0x5204
    3d98:	052e1703 	streq	r1, [lr, #-1795]!	; 0xfffff8fd
    3d9c:	0605bb07 	streq	fp, [r5], -r7, lsl #22
    3da0:	003405ba 	ldrhteq	r0, [r4], -sl
    3da4:	4a010402 	bmi	44db4 <ramdisk+0x1775c>
    3da8:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    3dac:	04020001 	streq	r0, [r2], #-1
    3db0:	0a032f01 	beq	cf9bc <ramdisk+0xa2364>
    3db4:	0308059e 	movweq	r0, #34206	; 0x859e
    3db8:	0505d613 	streq	sp, [r5, #-1555]	; 0xfffff9ed
    3dbc:	00160583 	andseq	r0, r6, r3, lsl #11
    3dc0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3dc4:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    3dc8:	17056605 	strne	r6, [r5, -r5, lsl #12]
    3dcc:	01040200 	mrseq	r0, R12_usr
    3dd0:	0026054a 	eoreq	r0, r6, sl, asr #10
    3dd4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3dd8:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    3ddc:	07054b08 	streq	r4, [r5, -r8, lsl #22]
    3de0:	9f09054d 	svcls	0x0009054d
    3de4:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    3de8:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    3dec:	09054a01 	stmdbeq	r5, {r0, r9, fp, lr}
    3df0:	4a05054b 	bmi	145324 <__bss_end+0x17cc4>
    3df4:	02001f05 	andeq	r1, r0, #5, 30
    3df8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3dfc:	10054d05 	andne	r4, r5, r5, lsl #26
    3e00:	01040200 	mrseq	r0, R12_usr
    3e04:	4b0e0566 	blmi	3853a4 <__bss_end+0x257d44>
    3e08:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    3e0c:	05052f0d 	streq	r2, [r5, #-3853]	; 0xfffff0f3
    3e10:	0013052e 	andseq	r0, r3, lr, lsr #10
    3e14:	4a010402 	bmi	44e24 <ramdisk+0x177cc>
    3e18:	059f0e05 	ldreq	r0, [pc, #3589]	; 4c25 <_start-0xb3db>
    3e1c:	1d052e06 	stcne	14, cr2, [r5, #-24]	; 0xffffffe8
    3e20:	02040200 	andeq	r0, r4, #0, 4
    3e24:	0013054a 	andseq	r0, r3, sl, asr #10
    3e28:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    3e2c:	02003b05 	andeq	r3, r0, #5120	; 0x1400
    3e30:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
    3e34:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    3e38:	26054a04 	strcs	r4, [r5], -r4, lsl #20
    3e3c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3e40:	0049054a 	subeq	r0, r9, sl, asr #10
    3e44:	4a050402 	bmi	144e54 <__bss_end+0x177f4>
    3e48:	054f0505 	strbeq	r0, [pc, #-1285]	; 394b <_start-0xc6b5>
    3e4c:	08054e0d 	stmdaeq	r5, {r0, r2, r3, r9, sl, fp, lr}
    3e50:	4b0e054a 	blmi	385380 <__bss_end+0x257d20>
    3e54:	054a3c05 	strbeq	r3, [sl, #-3077]	; 0xfffff3fb
    3e58:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    3e5c:	1b054a01 	blne	156668 <__bss_end+0x29008>
    3e60:	01040200 	mrseq	r0, R12_usr
    3e64:	0034054a 	eorseq	r0, r4, sl, asr #10
    3e68:	4a030402 	bmi	c4e78 <ramdisk+0x97820>
    3e6c:	02003c05 	andeq	r3, r0, #1280	; 0x500
    3e70:	004a0304 	subeq	r0, sl, r4, lsl #6
    3e74:	06040402 	streq	r0, [r4], -r2, lsl #8
    3e78:	0008052e 	andeq	r0, r8, lr, lsr #10
    3e7c:	06060402 	streq	r0, [r6], -r2, lsl #8
    3e80:	000f052e 	andeq	r0, pc, lr, lsr #10
    3e84:	2f060402 	svccs	0x00060402
    3e88:	02006a05 	andeq	r6, r0, #20480	; 0x5000
    3e8c:	054a0604 	strbeq	r0, [sl, #-1540]	; 0xfffff9fc
    3e90:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    3e94:	1d054a01 	vstrne	s8, [r5, #-4]
    3e98:	01040200 	mrseq	r0, R12_usr
    3e9c:	003c054a 	eorseq	r0, ip, sl, asr #10
    3ea0:	4a030402 	bmi	c4eb0 <ramdisk+0x97858>
    3ea4:	02004b05 	andeq	r4, r0, #5120	; 0x1400
    3ea8:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    3eac:	04020045 	streq	r0, [r2], #-69	; 0xffffffbb
    3eb0:	35056603 	strcc	r6, [r5, #-1539]	; 0xfffff9fd
    3eb4:	03040200 	movweq	r0, #16896	; 0x4200
    3eb8:	006a0582 	rsbeq	r0, sl, r2, lsl #11
    3ebc:	4a050402 	bmi	144ecc <__bss_end+0x1786c>
    3ec0:	06040200 	streq	r0, [r4], -r0, lsl #4
    3ec4:	09056606 	stmdbeq	r5, {r1, r2, r9, sl, sp, lr}
    3ec8:	08040200 	stmdaeq	r4, {r9}
    3ecc:	0e052e06 	cdpeq	14, 0, cr2, cr5, cr6, {0}
    3ed0:	08040200 	stmdaeq	r4, {r9}
    3ed4:	0061052f 	rsbeq	r0, r1, pc, lsr #10
    3ed8:	4a080402 	bmi	204ee8 <__bss_end+0xd7888>
    3edc:	02002c05 	andeq	r2, r0, #1280	; 0x500
    3ee0:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3ee4:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    3ee8:	46054a01 	strmi	r4, [r5], -r1, lsl #20
    3eec:	01040200 	mrseq	r0, R12_usr
    3ef0:	0036054a 	eorseq	r0, r6, sl, asr #10
    3ef4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    3ef8:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
    3efc:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    3f00:	04020061 	streq	r0, [r2], #-97	; 0xffffff9f
    3f04:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    3f08:	66060404 	strvs	r0, [r6], -r4, lsl #8
    3f0c:	02000805 	andeq	r0, r0, #327680	; 0x50000
    3f10:	2e060604 	cfmadd32cs	mvax0, mvfx0, mvfx6, mvfx4
    3f14:	06040200 	streq	r0, [r4], -r0, lsl #4
    3f18:	000f052f 	andeq	r0, pc, pc, lsr #10
    3f1c:	bd060402 	cfstrslt	mvf0, [r6, #-8]
    3f20:	02000905 	andeq	r0, r0, #81920	; 0x14000
    3f24:	052e0604 	streq	r0, [lr, #-1540]!	; 0xfffff9fc
    3f28:	04020005 	streq	r0, [r2], #-5
    3f2c:	1a059f06 	bne	16bb4c <__bss_end+0x3e4ec>
    3f30:	01040200 	mrseq	r0, R12_usr
    3f34:	4b060566 	blmi	1854d4 <__bss_end+0x57e74>
    3f38:	054e0505 	strbeq	r0, [lr, #-1285]	; 0xfffffafb
    3f3c:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    3f40:	11056601 	tstne	r5, r1, lsl #12
    3f44:	4a08054d 	bmi	205480 <__bss_end+0xd7e20>
    3f48:	24030705 	strcs	r0, [r3], #-1797	; 0xfffff8fb
    3f4c:	ba06054a 	blt	18547c <__bss_end+0x57e1c>
    3f50:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
    3f54:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3f58:	06054b0f 	streq	r4, [r5], -pc, lsl #22
    3f5c:	0310054a 	tsteq	r0, #310378496	; 0x12800000
    3f60:	08054a09 	stmdaeq	r5, {r0, r3, r9, fp, lr}
    3f64:	4b0c052e 	blmi	305424 <__bss_end+0x1d7dc4>
    3f68:	054a2205 	strbeq	r2, [sl, #-517]	; 0xfffffdfb
    3f6c:	0505870d 	streq	r8, [r5, #-1805]	; 0xfffff8f3
    3f70:	0014052e 	andseq	r0, r4, lr, lsr #10
    3f74:	4a010402 	bmi	44f84 <ramdisk+0x1792c>
    3f78:	0d030605 	stceq	6, cr0, [r3, #-20]	; 0xffffffec
    3f7c:	001a054a 	andseq	r0, sl, sl, asr #10
    3f80:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3f84:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    3f88:	10054a06 	andne	r4, r5, r6, lsl #20
    3f8c:	4a07054b 	bmi	1c54c0 <__bss_end+0x97e60>
    3f90:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    3f94:	0f054a05 	svceq	0x00054a05
    3f98:	4a060531 	bmi	185464 <__bss_end+0x57e04>
    3f9c:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    3fa0:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3fa4:	054d4b08 	strbeq	r4, [sp, #-2824]	; 0xfffff4f8
    3fa8:	08052e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, sp}
    3fac:	6601a603 	strvs	sl, [r1], -r3, lsl #12
    3fb0:	054c0705 	strbeq	r0, [ip, #-1797]	; 0xfffff8fb
    3fb4:	0a056708 	beq	15dbdc <__bss_end+0x3057c>
    3fb8:	2e080567 	cfsh32cs	mvfx0, mvfx8, #55
    3fbc:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    3fc0:	06054a16 			; <UNDEFINED> instruction: 0x06054a16
    3fc4:	0037054a 	eorseq	r0, r7, sl, asr #10
    3fc8:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
    3fcc:	02003f05 	andeq	r3, r0, #5, 30
    3fd0:	05660404 	strbeq	r0, [r6, #-1028]!	; 0xfffffbfc
    3fd4:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    3fd8:	06056601 	streq	r6, [r5], -r1, lsl #12
    3fdc:	01040200 	mrseq	r0, R12_usr
    3fe0:	002c059e 	mlaeq	ip, lr, r5, r0
    3fe4:	4a030402 	bmi	c4ff4 <ramdisk+0x9799c>
    3fe8:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    3fec:	05ba0304 	ldreq	r0, [sl, #772]!	; 0x304
    3ff0:	0c05680e 	stceq	8, cr6, [r5], {14}
    3ff4:	9f1a052e 	svcls	0x001a052e
    3ff8:	05661e05 	strbeq	r1, [r6, #-3589]!	; 0xfffff1fb
    3ffc:	28054a23 	stmdacs	r5, {r0, r1, r5, r9, fp, lr}
    4000:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
    4004:	08054b9f 	stmdaeq	r5, {r0, r1, r2, r3, r4, r7, r8, r9, fp, lr}
    4008:	001d054b 	andseq	r0, sp, fp, asr #10
    400c:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    4010:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
    4014:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    4018:	0a054c08 	beq	157040 <__bss_end+0x299e0>
    401c:	2e080567 	cfsh32cs	mvfx0, mvfx8, #55
    4020:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    4024:	06054a16 			; <UNDEFINED> instruction: 0x06054a16
    4028:	0033054a 	eorseq	r0, r3, sl, asr #10
    402c:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
    4030:	02003b05 	andeq	r3, r0, #5120	; 0x1400
    4034:	05660404 	strbeq	r0, [r6, #-1028]!	; 0xfffffbfc
    4038:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    403c:	06056601 	streq	r6, [r5], -r1, lsl #12
    4040:	01040200 	mrseq	r0, R12_usr
    4044:	0028059e 	mlaeq	r8, lr, r5, r0
    4048:	4a030402 	bmi	c5058 <ramdisk+0x97a00>
    404c:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
    4050:	05ba0304 	ldreq	r0, [sl, #772]!	; 0x304
    4054:	0c05680e 	stceq	8, cr6, [r5], {14}
    4058:	9f08052e 	svcls	0x0008052e
    405c:	05831505 	streq	r1, [r3, #1285]	; 0x505
    4060:	0b054a08 	bleq	156888 <__bss_end+0x29228>
    4064:	4b120568 	blmi	48560c <__bss_end+0x357fac>
    4068:	05821605 	streq	r1, [r2, #1541]	; 0x605
    406c:	08052e1b 	stmdaeq	r5, {r0, r1, r3, r4, r9, sl, fp, sp}
    4070:	4c11052e 	cfldr32mi	mvfx0, [r1], {46}	; 0x2e
    4074:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    4078:	0c052e1b 	stceq	14, cr2, [r5], {27}
    407c:	1c059f2e 	stcne	15, cr9, [r5], {46}	; 0x2e
    4080:	4a25054b 	bmi	9455b4 <__bss_end+0x817f54>
    4084:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    4088:	1c05a00a 	stcne	0, cr10, [r5], {10}
    408c:	66130583 	ldrvs	r0, [r3], -r3, lsl #11
    4090:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    4094:	22056919 	andcs	r6, r5, #409600	; 0x64000
    4098:	2e290566 	cfsh64cs	mvdx0, mvdx9, #54
    409c:	054a2705 	strbeq	r2, [sl, #-1797]	; 0xfffff8fb
    40a0:	07052e06 	streq	r2, [r5, -r6, lsl #28]
    40a4:	670c0567 	strvs	r0, [ip, -r7, ror #10]
    40a8:	05821805 	streq	r1, [r2, #2053]	; 0x805
    40ac:	0805a00b 	stmdaeq	r5, {r0, r1, r3, sp, pc}
    40b0:	4b07059e 	blmi	1c5730 <__bss_end+0x980d0>
    40b4:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
    40b8:	1105661a 	tstne	r5, sl, lsl r6
    40bc:	9e0c0568 	cfsh32ls	mvfx0, mvfx12, #56
    40c0:	056a1e05 	strbeq	r1, [sl, #-3589]!	; 0xfffff1fb
    40c4:	23054a18 	movwcs	r4, #23064	; 0x5a18
    40c8:	4a0f054a 	bmi	3c55f8 <__bss_end+0x297f98>
    40cc:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    40d0:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    40d4:	0e054a01 	vmlaeq.f32	s8, s10, s2
    40d8:	2e1c054b 	cfmac32cs	mvfx0, mvfx12, mvfx11
    40dc:	054a2e05 	strbeq	r2, [sl, #-3589]	; 0xfffff1fb
    40e0:	36056625 	strcc	r6, [r5], -r5, lsr #12
    40e4:	4a0b052e 	bmi	2c55a4 <__bss_end+0x197f44>
    40e8:	059f0705 	ldreq	r0, [pc, #1797]	; 47f5 <_start-0xb80b>
    40ec:	09056708 	stmdbeq	r5, {r3, r8, r9, sl, sp, lr}
    40f0:	001f0583 	andseq	r0, pc, r3, lsl #11
    40f4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    40f8:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    40fc:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    4100:	07056706 	streq	r6, [r5, -r6, lsl #14]
    4104:	6708054d 	strvs	r0, [r8, -sp, asr #10]
    4108:	05830905 	streq	r0, [r3, #2309]	; 0x905
    410c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    4110:	15056601 	strne	r6, [r5, #-1537]	; 0xfffff9ff
    4114:	01040200 	mrseq	r0, R12_usr
    4118:	4b0d054a 	blmi	345648 <__bss_end+0x217fe8>
    411c:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
    4120:	09053011 	stmdbeq	r5, {r0, r4, ip, sp}
    4124:	4b0c054a 	blmi	305654 <__bss_end+0x1d7ff4>
    4128:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    412c:	1f053009 	svcne	0x00053009
    4130:	01040200 	mrseq	r0, R12_usr
    4134:	00150566 	andseq	r0, r5, r6, ror #10
    4138:	66010402 	strvs	r0, [r1], -r2, lsl #8
    413c:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
    4140:	05834c09 	streq	r4, [r3, #3081]	; 0xc09
    4144:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    4148:	15056601 	strne	r6, [r5, #-1537]	; 0xfffff9ff
    414c:	01040200 	mrseq	r0, R12_usr
    4150:	67060566 	strvs	r0, [r6, -r6, ror #10]
    4154:	054d0705 	strbeq	r0, [sp, #-1797]	; 0xfffff8fb
    4158:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
    415c:	30056601 	andcc	r6, r5, r1, lsl #12
    4160:	02040200 	andeq	r0, r4, #0, 4
    4164:	03060582 	movweq	r0, #25986	; 0x6582
    4168:	0c034a6c 			; <UNDEFINED> instruction: 0x0c034a6c
    416c:	08054e4a 	stmdaeq	r5, {r1, r3, r6, r9, sl, fp, lr}
    4170:	052e4103 	streq	r4, [lr, #-259]!	; 0xfffffefd
    4174:	00c60304 	sbceq	r0, r6, r4, lsl #6
    4178:	3603052e 	strcc	r0, [r3], -lr, lsr #10
    417c:	0605839f 			; <UNDEFINED> instruction: 0x0605839f
    4180:	4a1905bb 	bmi	645874 <__bss_end+0x518214>
    4184:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    4188:	06052f03 	streq	r2, [r5], -r3, lsl #30
    418c:	4a1605d7 	bmi	5858f0 <__bss_end+0x458290>
    4190:	054a1405 	strbeq	r1, [sl, #-1029]	; 0xfffffbfb
    4194:	02002f03 	andeq	r2, r0, #3, 30
    4198:	9e060104 	adflss	f0, f6, f4
    419c:	02040200 	andeq	r0, r4, #0, 4
    41a0:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    41a4:	0e052e04 	cdpeq	14, 0, cr2, cr5, cr4, {0}
    41a8:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    41ac:	06056706 	streq	r6, [r5], -r6, lsl #14
    41b0:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    41b4:	4b04052e 	blmi	105674 <ramdisk+0xd801c>
    41b8:	bc0605f4 	cfstr32lt	mvfx0, [r6], {244}	; 0xf4
    41bc:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
    41c0:	9f9f4b03 	svcls	0x009f4b03
    41c4:	059f0605 	ldreq	r0, [pc, #1541]	; 47d1 <_start-0xb82f>
    41c8:	9f9f6704 	svcls	0x009f6704
    41cc:	07059f9f 			; <UNDEFINED> instruction: 0x07059f9f
    41d0:	4a15059f 	bmi	545854 <__bss_end+0x4181f4>
    41d4:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    41d8:	0f054a16 	svceq	0x00054a16
    41dc:	4a04054b 	bmi	105710 <ramdisk+0xd80b8>
    41e0:	07059fa0 	streq	r9, [r5, -r0, lsr #31]
    41e4:	4a1305d7 	bmi	4c5948 <__bss_end+0x3982e8>
    41e8:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    41ec:	0f054a14 	svceq	0x00054a14
    41f0:	4a04054b 	bmi	105724 <ramdisk+0xd80cc>
    41f4:	05840305 	streq	r0, [r4, #773]	; 0x305
    41f8:	0605bb07 	streq	fp, [r5], -r7, lsl #22
    41fc:	003205ba 	ldrhteq	r0, [r2], -sl
    4200:	4a010402 	bmi	45210 <ramdisk+0x17bb8>
    4204:	054d0605 	strbeq	r0, [sp, #-1541]	; 0xfffff9fb
    4208:	9fbb6704 	svcls	0x00bb6704
    420c:	9fd79f67 	svcls	0x00d79f67
    4210:	0305bbbb 	movweq	fp, #23483	; 0x5bbb
    4214:	2e1905be 	cfcmp64cs	r0, mvdx9, mvdx14
    4218:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    421c:	0a058308 	beq	164e44 <__bss_end+0x377e4>
    4220:	4a03054b 	bmi	c5754 <ramdisk+0x980fc>
    4224:	052f0705 	streq	r0, [pc, #-1797]!	; 3b27 <_start-0xc4d9>
    4228:	9f676705 	svcls	0x00676705
    422c:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    4230:	00660601 	rsbeq	r0, r6, r1, lsl #12
    4234:	4a020402 	bmi	85244 <ramdisk+0x57bec>
    4238:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    423c:	060a052e 	streq	r0, [sl], -lr, lsr #10
    4240:	4c070568 	cfstr32mi	mvfx0, [r7], {104}	; 0x68
    4244:	05bb0905 	ldreq	r0, [fp, #2309]!	; 0x905
    4248:	3905ba08 	stmdbcc	r5, {r3, r9, fp, ip, sp, pc}
    424c:	01040200 	mrseq	r0, R12_usr
    4250:	4b05054a 	blmi	145780 <__bss_end+0x18120>
    4254:	059f0a05 	ldreq	r0, [pc, #2565]	; 4c61 <_start-0xb39f>
    4258:	04058216 	streq	r8, [r5], #-534	; 0xfffffdea
    425c:	001b0583 	andseq	r0, fp, r3, lsl #11
    4260:	03020402 	movweq	r0, #9218	; 0x2402
    4264:	03056672 	movweq	r6, #22130	; 0x5672
    4268:	01040200 	mrseq	r0, R12_usr
    426c:	03240566 			; <UNDEFINED> instruction: 0x03240566
    4270:	02008212 	andeq	r8, r0, #536870913	; 0x20000001
    4274:	66060104 	strvs	r0, [r6], -r4, lsl #2
    4278:	02040200 	andeq	r0, r4, #0, 4
    427c:	0009054a 	andeq	r0, r9, sl, asr #10
    4280:	06040402 	streq	r0, [r4], -r2, lsl #8
    4284:	3006052e 	andcc	r0, r6, lr, lsr #10
    4288:	05bb0805 	ldreq	r0, [fp, #2053]!	; 0x805
    428c:	3805ba07 	stmdacc	r5, {r0, r1, r2, r9, fp, ip, sp, pc}
    4290:	01040200 	mrseq	r0, R12_usr
    4294:	4b09054a 	blmi	2457c4 <__bss_end+0x118164>
    4298:	05821505 	streq	r1, [r2, #1285]	; 0x505
    429c:	0c058303 	stceq	3, cr8, [r5], {3}
    42a0:	6707056e 	strvs	r0, [r7, -lr, ror #10]
    42a4:	05671405 	strbeq	r1, [r7, #-1029]!	; 0xfffffbfb
    42a8:	07052e0c 	streq	r2, [r5, -ip, lsl #28]
    42ac:	670c054b 	strvs	r0, [ip, -fp, asr #10]
    42b0:	68670705 	stmdavs	r7!, {r0, r2, r8, r9, sl}^
    42b4:	0c030f05 	stceq	15, cr0, [r3], {5}
    42b8:	4a06054a 	bmi	1857e8 <__bss_end+0x58188>
    42bc:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    42c0:	0a054a1c 	beq	156b38 <__bss_end+0x294d8>
    42c4:	d707054b 	strle	r0, [r7, -fp, asr #10]
    42c8:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    42cc:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    42d0:	05054e06 	streq	r4, [r5, #-3590]	; 0xfffff1fa
    42d4:	003005ba 	ldrhteq	r0, [r0], -sl
    42d8:	4a010402 	bmi	452e8 <ramdisk+0x17c90>
    42dc:	054c0205 	strbeq	r0, [ip, #-517]	; 0xfffffdfb
    42e0:	04020001 	streq	r0, [r2], #-1
    42e4:	20022f01 	andcs	r2, r2, r1, lsl #30
    42e8:	b4010100 	strlt	r0, [r1], #-256	; 0xffffff00
    42ec:	03000001 	movweq	r0, #1
    42f0:	0000aa00 	andeq	sl, r0, r0, lsl #20
    42f4:	fb010200 	blx	44afe <ramdisk+0x174a6>
    42f8:	01000d0e 	tsteq	r0, lr, lsl #26
    42fc:	00010101 	andeq	r0, r1, r1, lsl #2
    4300:	00010000 	andeq	r0, r1, r0
    4304:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    4308:	2f656d6f 	svccs	0x00656d6f
    430c:	616e756c 	cmnvs	lr, ip, ror #10
    4310:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
    4314:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
    4318:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
    431c:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
    4320:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    4324:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    4328:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    432c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    4330:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    4334:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    4338:	61462f53 	cmpvs	r6, r3, asr pc
    433c:	2f534674 	svccs	0x00534674
    4340:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    4344:	2f006563 	svccs	0x00006563
    4348:	2f727375 	svccs	0x00727375
    434c:	2f62696c 	svccs	0x0062696c
    4350:	2f636367 	svccs	0x00636367
    4354:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4358:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    435c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4360:	30312f69 	eorscc	r2, r1, r9, ror #30
    4364:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    4368:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    436c:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4370:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
    4374:	6f696b73 	svcvs	0x00696b73
    4378:	0100632e 	tsteq	r0, lr, lsr #6
    437c:	74730000 	ldrbtvc	r0, [r3], #-0
    4380:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4384:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4388:	66660000 	strbtvs	r0, [r6], -r0
    438c:	0100682e 	tsteq	r0, lr, lsr #16
    4390:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
    4394:	6f696b73 	svcvs	0x00696b73
    4398:	0100682e 	tsteq	r0, lr, lsr #16
    439c:	05000000 	streq	r0, [r0, #-0]
    43a0:	02050020 	andeq	r0, r5, #32
    43a4:	0002b0b8 	strheq	fp, [r2], -r8
    43a8:	05012b03 	streq	r2, [r1, #-2819]	; 0xfffff4fd
    43ac:	21059f08 	tstcs	r5, r8, lsl #30
    43b0:	01040200 	mrseq	r0, R12_usr
    43b4:	4d0c0566 	cfstr32mi	mvfx0, [ip, #-408]	; 0xfffffe68
    43b8:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
    43bc:	0805a424 	stmdaeq	r5, {r2, r5, sl, sp, pc}
    43c0:	670d059f 			; <UNDEFINED> instruction: 0x670d059f
    43c4:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    43c8:	10054b0d 	andne	r4, r5, sp, lsl #22
    43cc:	4e09054c 	cfsh32mi	mvfx0, mvfx9, #44
    43d0:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    43d4:	0c054b0d 			; <UNDEFINED> instruction: 0x0c054b0d
    43d8:	4b0d054a 	blmi	345908 <__bss_end+0x2182a8>
    43dc:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
    43e0:	0a05831a 	beq	165050 <__bss_end+0x379f0>
    43e4:	6809056a 	stmdavs	r9, {r1, r3, r5, r6, r8, sl}
    43e8:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    43ec:	0c054b09 			; <UNDEFINED> instruction: 0x0c054b09
    43f0:	4b01054c 	blmi	45928 <ramdisk+0x182d0>
    43f4:	42084405 	andmi	r4, r8, #83886080	; 0x5000000
    43f8:	05f30805 	ldrbeq	r0, [r3, #2053]!	; 0x805
    43fc:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
    4400:	6608054d 	strvs	r0, [r8], -sp, asr #10
    4404:	054b1005 	strbeq	r1, [fp, #-5]
    4408:	2a054d08 	bcs	157830 <__bss_end+0x2a1d0>
    440c:	01040200 	mrseq	r0, R12_usr
    4410:	00200566 	eoreq	r0, r0, r6, ror #10
    4414:	66010402 	strvs	r0, [r1], -r2, lsl #8
    4418:	054b1005 	strbeq	r1, [fp, #-5]
    441c:	05054e23 	streq	r4, [r5, #-3619]	; 0xfffff1dd
    4420:	d80c054a 	stmdale	ip, {r1, r3, r6, r8, sl}
    4424:	052f0105 	streq	r0, [pc, #-261]!	; 4327 <_start-0xbcd9>
    4428:	0805a44b 	stmdaeq	r5, {r0, r1, r3, r6, sl, sp, pc}
    442c:	671005f3 			; <UNDEFINED> instruction: 0x671005f3
    4430:	054d0e05 	strbeq	r0, [sp, #-3589]	; 0xfffff1fb
    4434:	10056608 	andne	r6, r5, r8, lsl #12
    4438:	4d08054b 	cfstr32mi	mvfx0, [r8, #-300]	; 0xfffffed4
    443c:	02002a05 	andeq	r2, r0, #20480	; 0x5000
    4440:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    4444:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    4448:	10056601 	andne	r6, r5, r1, lsl #12
    444c:	4e1d054b 	cfmac32mi	mvfx0, mvfx13, mvfx11
    4450:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    4454:	0105d80c 	tsteq	r5, ip, lsl #16
    4458:	a435052f 	ldrtge	r0, [r5], #-1327	; 0xfffffad1
    445c:	05f30d05 	ldrbeq	r0, [r3, #3333]!	; 0xd05
    4460:	10054c08 	andne	r4, r5, r8, lsl #24
    4464:	4d0e0567 	cfstr32mi	mvfx0, [lr, #-412]	; 0xfffffe64
    4468:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    446c:	05054b10 	streq	r4, [r5, #-2832]	; 0xfffff4f0
    4470:	f411054d 			; <UNDEFINED> instruction: 0xf411054d
    4474:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    4478:	1105311b 	tstne	r5, fp, lsl r1
    447c:	4b0d0567 	blmi	345a20 <__bss_end+0x2183c0>
    4480:	05311a05 	ldreq	r1, [r1, #-2565]!	; 0xfffff5fb
    4484:	0d056711 	stceq	7, cr6, [r5, #-68]	; 0xffffffbc
    4488:	311b054b 	tstcc	fp, fp, asr #10
    448c:	05671105 	strbeq	r1, [r7, #-261]!	; 0xfffffefb
    4490:	11054b0d 	tstne	r5, sp, lsl #22
    4494:	4b0d0531 	blmi	345960 <__bss_end+0x218300>
    4498:	05310c05 	ldreq	r0, [r1, #-3077]!	; 0xfffff3fb
    449c:	0a022f01 	beq	900a8 <ramdisk+0x62a50>
    44a0:	bd010100 	stflts	f0, [r1, #-0]
    44a4:	03000000 	movweq	r0, #0
    44a8:	0000a000 	andeq	sl, r0, r0
    44ac:	fb010200 	blx	44cb6 <ramdisk+0x1765e>
    44b0:	01000d0e 	tsteq	r0, lr, lsl #26
    44b4:	00010101 	andeq	r0, r1, r1, lsl #2
    44b8:	00010000 	andeq	r0, r1, r0
    44bc:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    44c0:	2f656d6f 	svccs	0x00656d6f
    44c4:	616e756c 	cmnvs	lr, ip, ror #10
    44c8:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
    44cc:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
    44d0:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
    44d4:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
    44d8:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    44dc:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    44e0:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    44e4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    44e8:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    44ec:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    44f0:	61462f53 	cmpvs	r6, r3, asr pc
    44f4:	2f534674 	svccs	0x00534674
    44f8:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    44fc:	2f006563 	svccs	0x00006563
    4500:	2f727375 	svccs	0x00727375
    4504:	2f62696c 	svccs	0x0062696c
    4508:	2f636367 	svccs	0x00636367
    450c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4510:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4514:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4518:	30312f69 	eorscc	r2, r1, r9, ror #30
    451c:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    4520:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4524:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4528:	66660000 	strbtvs	r0, [r6], -r0
    452c:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
    4530:	632e6d65 			; <UNDEFINED> instruction: 0x632e6d65
    4534:	00000100 	andeq	r0, r0, r0, lsl #2
    4538:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    453c:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    4540:	00000200 	andeq	r0, r0, r0, lsl #4
    4544:	682e6666 	stmdavs	lr!, {r1, r2, r5, r6, r9, sl, sp, lr}
    4548:	00000100 	andeq	r0, r0, r0, lsl #2
    454c:	00190500 	andseq	r0, r9, r0, lsl #10
    4550:	b42c0205 	strtlt	r0, [ip], #-517	; 0xfffffdfb
    4554:	0a030002 	beq	c4564 <ramdisk+0x96f0c>
    4558:	4d0c0501 	cfstr32mi	mvfx0, [ip, #-4]
    455c:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
    4560:	0101000a 	tsteq	r1, sl
    4564:	00000019 	andeq	r0, r0, r9, lsl r0
    4568:	00130003 	andseq	r0, r3, r3
    456c:	01020000 	mrseq	r0, (UNDEF: 2)
    4570:	000d0efb 	strdeq	r0, [sp], -fp
    4574:	01010101 	tsteq	r1, r1, lsl #2
    4578:	01000000 	mrseq	r0, (UNDEF: 0)
    457c:	00010000 	andeq	r0, r1, r0
    4580:	00007000 	andeq	r7, r0, r0
    4584:	3d000300 	stccc	3, cr0, [r0, #-0]
    4588:	02000000 	andeq	r0, r0, #0
    458c:	0d0efb01 	vstreq	d15, [lr, #-4]
    4590:	01010100 	mrseq	r0, (UNDEF: 17)
    4594:	00000001 	andeq	r0, r0, r1
    4598:	01000001 	tsteq	r0, r1
    459c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    45a0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    45a4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    45a8:	2f636367 	svccs	0x00636367
    45ac:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    45b0:	612f6769 			; <UNDEFINED> instruction: 0x612f6769
    45b4:	00006d72 	andeq	r6, r0, r2, ror sp
    45b8:	3162696c 	cmncc	r2, ip, ror #18
    45bc:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    45c0:	00532e73 	subseq	r2, r3, r3, ror lr
    45c4:	00000001 	andeq	r0, r0, r1
    45c8:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    45cc:	030002b4 	movweq	r0, #692	; 0x2b4
    45d0:	300108cf 	andcc	r0, r1, pc, asr #17
    45d4:	2f2f2f2f 	svccs	0x002f2f2f
    45d8:	3e02302f 	cdpcc	0, 0, cr3, cr2, cr15, {1}
    45dc:	2f312f14 	svccs	0x00312f14
    45e0:	9208302f 	andls	r3, r8, #47	; 0x2f
    45e4:	1f03322f 	svcne	0x0003322f
    45e8:	2f2f2f66 	svccs	0x002f2f66
    45ec:	2f2f2f2f 	svccs	0x002f2f2f
    45f0:	01000202 	tsteq	r0, r2, lsl #4
    45f4:	00005301 	andeq	r5, r0, r1, lsl #6
    45f8:	3d000300 	stccc	3, cr0, [r0, #-0]
    45fc:	02000000 	andeq	r0, r0, #0
    4600:	0d0efb01 	vstreq	d15, [lr, #-4]
    4604:	01010100 	mrseq	r0, (UNDEF: 17)
    4608:	00000001 	andeq	r0, r0, r1
    460c:	01000001 	tsteq	r0, r1
    4610:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4614:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4618:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    461c:	2f636367 	svccs	0x00636367
    4620:	666e6f63 	strbtvs	r6, [lr], -r3, ror #30
    4624:	612f6769 			; <UNDEFINED> instruction: 0x612f6769
    4628:	00006d72 	andeq	r6, r0, r2, ror sp
    462c:	3162696c 	cmncc	r2, ip, ror #18
    4630:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    4634:	00532e73 	subseq	r2, r3, r3, ror lr
    4638:	00000001 	andeq	r0, r0, r1
    463c:	60020500 	andvs	r0, r2, r0, lsl #10
    4640:	030002b5 	movweq	r0, #693	; 0x2b5
    4644:	02010bb9 	andeq	r0, r1, #189440	; 0x2e400
    4648:	01010002 	tsteq	r1, r2
    464c:	0000016d 	andeq	r0, r0, sp, ror #2
    4650:	00b90003 	adcseq	r0, r9, r3
    4654:	01020000 	mrseq	r0, (UNDEF: 2)
    4658:	000d0efb 	strdeq	r0, [sp], -fp
    465c:	01010101 	tsteq	r1, r1, lsl #2
    4660:	01000000 	mrseq	r0, (UNDEF: 0)
    4664:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    4668:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    466c:	2f2e2e2f 	svccs	0x002e2e2f
    4670:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4674:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4678:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    467c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4680:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    4684:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4688:	73752f00 	cmnvc	r5, #0, 30
    468c:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    4690:	63672f62 	cmnvs	r7, #392	; 0x188
    4694:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    4698:	6f6e2d6d 	svcvs	0x006e2d6d
    469c:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    46a0:	2f696261 	svccs	0x00696261
    46a4:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
    46a8:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    46ac:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    46b0:	2f006564 	svccs	0x00006564
    46b4:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    46b8:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    46bc:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    46c0:	3342702d 	movtcc	r7, #8237	; 0x202d
    46c4:	2f656430 	svccs	0x00656430
    46c8:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    46cc:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    46d0:	302e332e 	eorcc	r3, lr, lr, lsr #6
    46d4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    46d8:	2f62696c 	svccs	0x0062696c
    46dc:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    46e0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    46e4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    46e8:	656d0000 	strbvs	r0, [sp, #-0]!
    46ec:	706d636d 	rsbvc	r6, sp, sp, ror #6
    46f0:	0100632e 	tsteq	r0, lr, lsr #6
    46f4:	74730000 	ldrbtvc	r0, [r3], #-0
    46f8:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    46fc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4700:	74730000 	ldrbtvc	r0, [r3], #-0
    4704:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4708:	0300682e 	movweq	r6, #2094	; 0x82e
    470c:	05000000 	streq	r0, [r0, #-0]
    4710:	02050001 	andeq	r0, r5, #1
    4714:	0002b564 	andeq	fp, r2, r4, ror #10
    4718:	05013003 	streq	r3, [r1, #-3]
    471c:	01100303 	tsteq	r0, r3, lsl #6
    4720:	17131313 			; <UNDEFINED> instruction: 0x17131313
    4724:	01060605 	tsteq	r6, r5, lsl #12
    4728:	68030105 	stmdavs	r3, {r0, r2, r8}
    472c:	0306052e 	movweq	r0, #25902	; 0x652e
    4730:	19052e18 	stmdbne	r5, {r3, r4, r9, sl, fp, sp}
    4734:	01040200 	mrseq	r0, R12_usr
    4738:	0015052e 	andseq	r0, r5, lr, lsr #10
    473c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    4740:	02001905 	andeq	r1, r0, #81920	; 0x14000
    4744:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    4748:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    474c:	0b054a01 	bleq	156f58 <__bss_end+0x298f8>
    4750:	2e0a0306 	cdpcs	3, 0, cr0, cr10, cr6, {0}
    4754:	060e0548 	streq	r0, [lr], -r8, asr #10
    4758:	0d058201 	sfmeq	f0, 1, [r5, #-4]
    475c:	2e7a034e 	cdpcs	3, 7, cr0, cr10, cr14, {2}
    4760:	060b0532 			; <UNDEFINED> instruction: 0x060b0532
    4764:	060d052f 	streq	r0, [sp], -pc, lsr #10
    4768:	060b0501 	streq	r0, [fp], -r1, lsl #10
    476c:	030d052f 	movweq	r0, #54575	; 0xd52f
    4770:	0905017a 	stmdbeq	r5, {r1, r3, r4, r5, r6, r8}
    4774:	052e0f03 	streq	r0, [lr, #-3843]!	; 0xfffff0fd
    4778:	0536060a 	ldreq	r0, [r6, #-1546]!	; 0xfffff9f6
    477c:	2e78030b 	cdpcs	3, 7, cr0, cr8, cr11, {0}
    4780:	2e2e0905 	vmulcs.f16	s0, s28, s10	; <UNPREDICTABLE>
    4784:	06070566 	streq	r0, [r7], -r6, ror #10
    4788:	0b05144c 	bleq	1498c0 <__bss_end+0x1c260>
    478c:	07051006 	streq	r1, [r5, -r6]
    4790:	09053106 	stmdbeq	r5, {r1, r2, r8, ip, sp}
    4794:	0612050d 	ldreq	r0, [r2], -sp, lsl #10
    4798:	2e0a0514 	mcrcs	5, 0, r0, cr10, cr4, {0}
    479c:	67060205 	strvs	r0, [r6, -r5, lsl #4]
    47a0:	01060d05 	tsteq	r6, r5, lsl #26
    47a4:	05350105 	ldreq	r0, [r5, #-261]!	; 0xfffffefb
    47a8:	76030609 	strvc	r0, [r3], -r9, lsl #12
    47ac:	060b054a 	streq	r0, [fp], -sl, asr #10
    47b0:	0a052e01 	beq	14ffbc <__bss_end+0x2295c>
    47b4:	30010536 	andcc	r0, r1, r6, lsr r5
    47b8:	01000402 	tsteq	r0, r2, lsl #8
    47bc:	0001b601 	andeq	fp, r1, r1, lsl #12
    47c0:	ce000300 	cdpgt	3, 0, cr0, cr0, cr0, {0}
    47c4:	02000000 	andeq	r0, r0, #0
    47c8:	0d0efb01 	vstreq	d15, [lr, #-4]
    47cc:	01010100 	mrseq	r0, (UNDEF: 17)
    47d0:	00000001 	andeq	r0, r0, r1
    47d4:	01000001 	tsteq	r0, r1
    47d8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    47dc:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    47e0:	2f2e2e2f 	svccs	0x002e2e2f
    47e4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    47e8:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    47ec:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    47f0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    47f4:	616d2f63 	cmnvs	sp, r3, ror #30
    47f8:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    47fc:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    4800:	2e2e2f6d 	cdpcs	15, 2, cr2, cr14, cr13, {3}
    4804:	2f2e2e2f 	svccs	0x002e2e2f
    4808:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    480c:	2f00676e 	svccs	0x0000676e
    4810:	2f727375 	svccs	0x00727375
    4814:	2f62696c 	svccs	0x0062696c
    4818:	2f636367 	svccs	0x00636367
    481c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4820:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4824:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4828:	30312f69 	eorscc	r2, r1, r9, ror #30
    482c:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    4830:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4834:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4838:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    483c:	2f646c69 	svccs	0x00646c69
    4840:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4844:	702d6269 	eorvc	r6, sp, r9, ror #4
    4848:	64303342 	ldrtvs	r3, [r0], #-834	; 0xfffffcbe
    484c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    4850:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4854:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    4858:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    485c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4860:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4864:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    4868:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    486c:	00006564 	andeq	r6, r0, r4, ror #10
    4870:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    4874:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    4878:	00000100 	andeq	r0, r0, r0, lsl #2
    487c:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    4880:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    4884:	00000200 	andeq	r0, r0, r0, lsl #4
    4888:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    488c:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    4890:	00000300 	andeq	r0, r0, r0, lsl #6
    4894:	00010500 	andeq	r0, r1, r0, lsl #10
    4898:	b6100205 	ldrlt	r0, [r0], -r5, lsl #4
    489c:	33030002 	movwcc	r0, #12290	; 0x3002
    48a0:	03030501 	movweq	r0, #13569	; 0x3501
    48a4:	1313010e 	tstne	r3, #-2147483645	; 0x80000003
    48a8:	06051613 			; <UNDEFINED> instruction: 0x06051613
    48ac:	1c050106 	stfnes	f0, [r5], {6}
    48b0:	01040200 	mrseq	r0, R12_usr
    48b4:	0018054a 	andseq	r0, r8, sl, asr #10
    48b8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    48bc:	6b030105 	blvs	c4cd8 <ramdisk+0x97680>
    48c0:	060b0566 	streq	r0, [fp], -r6, ror #10
    48c4:	05d61d03 	ldrbeq	r1, [r6, #3331]	; 0xd03
    48c8:	2f13061a 	svccs	0x0013061a
    48cc:	0d052f2c 	stceq	15, cr2, [r5, #-176]	; 0xffffff50
    48d0:	331a052b 	tstcc	sl, #180355072	; 0xac00000
    48d4:	05290d05 	streq	r0, [r9, #-3333]!	; 0xfffff2fb
    48d8:	052b331a 	streq	r3, [fp, #-794]!	; 0xfffffce6
    48dc:	132f060b 			; <UNDEFINED> instruction: 0x132f060b
    48e0:	030d0514 	movweq	r0, #54548	; 0xd514
    48e4:	0306017a 	movweq	r0, #24954	; 0x617a
    48e8:	1005660a 	andne	r6, r5, sl, lsl #12
    48ec:	2d28052a 	cfstr32cs	mvfx0, [r8, #-168]!	; 0xffffff58
    48f0:	05330d05 	ldreq	r0, [r3, #-3333]!	; 0xfffff2fb
    48f4:	0d052917 	vstreq.16	s4, [r5, #-46]	; 0xffffffd2	; <UNPREDICTABLE>
    48f8:	28053306 	stmdacs	r5, {r1, r2, r8, r9, ip, sp}
    48fc:	0b052906 	bleq	14ed1c <__bss_end+0x216bc>
    4900:	1a05c106 	bne	174d20 <__bss_end+0x476c0>
    4904:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    4908:	052f060b 	streq	r0, [pc, #-1547]!	; 4305 <_start-0xbcfb>
    490c:	10050f0d 	andne	r0, r5, sp, lsl #30
    4910:	17056906 	strne	r6, [r5, -r6, lsl #18]
    4914:	2e28052d 	cfsh64cs	mvdx0, mvdx8, #29
    4918:	03060905 	movweq	r0, #26885	; 0x6905
    491c:	0e052e09 	cdpeq	14, 0, cr2, cr5, cr9, {0}
    4920:	2e2e2e06 	cdpcs	14, 2, cr2, cr14, cr6, {0}
    4924:	2e09052e 	cfsh32cs	mvfx0, mvfx9, #30
    4928:	2f060505 	svccs	0x00060505
    492c:	01060c05 	tsteq	r6, r5, lsl #24
    4930:	052d0905 	streq	r0, [sp, #-2309]!	; 0xfffff6fb
    4934:	09052f0c 	stmdbeq	r5, {r2, r3, r8, r9, sl, fp, sp}
    4938:	01062d06 	tsteq	r6, r6, lsl #26
    493c:	05330105 	ldreq	r0, [r3, #-261]!	; 0xfffffefb
    4940:	5e034509 	cfsh32pl	mvfx4, mvfx3, #9
    4944:	2203062e 	andcs	r0, r3, #48234496	; 0x2e00000
    4948:	060e052e 	streq	r0, [lr], -lr, lsr #10
    494c:	2e090501 	cfsh32cs	mvfx0, mvfx9, #1
    4950:	05052e2e 	streq	r2, [r5, #-3630]	; 0xfffff1d2
    4954:	0c054b06 			; <UNDEFINED> instruction: 0x0c054b06
    4958:	09050106 	stmdbeq	r5, {r1, r2, r8}
    495c:	2f0c052d 	svccs	0x000c052d
    4960:	2d060905 	vstrcs.16	s0, [r6, #-10]	; <UNPREDICTABLE>
    4964:	4a060106 	bmi	184d84 <__bss_end+0x57724>
    4968:	015e0306 	cmpeq	lr, r6, lsl #6
    496c:	22030e05 	andcs	r0, r3, #5, 28	; 0x50
    4970:	02022e2e 	andeq	r2, r2, #736	; 0x2e0
    4974:	d1010100 	mrsle	r0, (UNDEF: 17)
    4978:	03000001 	movweq	r0, #1
    497c:	0000b900 	andeq	fp, r0, r0, lsl #18
    4980:	fb010200 	blx	4518a <ramdisk+0x17b32>
    4984:	01000d0e 	tsteq	r0, lr, lsl #26
    4988:	00010101 	andeq	r0, r1, r1, lsl #2
    498c:	00010000 	andeq	r0, r1, r0
    4990:	2e2e0100 	sufcse	f0, f6, f0
    4994:	2f2e2e2f 	svccs	0x002e2e2f
    4998:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    499c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    49a0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    49a4:	2f62696c 	svccs	0x0062696c
    49a8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    49ac:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    49b0:	00676e69 	rsbeq	r6, r7, r9, ror #28
    49b4:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    49b8:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    49bc:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    49c0:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    49c4:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    49c8:	61652d65 	cmnvs	r5, r5, ror #26
    49cc:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    49d0:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    49d4:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    49d8:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    49dc:	622f0065 	eorvs	r0, pc, #101	; 0x65
    49e0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    49e4:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    49e8:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    49ec:	30334270 	eorscc	r4, r3, r0, ror r2
    49f0:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    49f4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    49f8:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    49fc:	2f302e33 	svccs	0x00302e33
    4a00:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4a04:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4868 <_start-0xb798>
    4a08:	2f636269 	svccs	0x00636269
    4a0c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4a10:	00656475 	rsbeq	r6, r5, r5, ror r4
    4a14:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    4a18:	2e746573 	mrccs	5, 3, r6, cr4, cr3, {3}
    4a1c:	00010063 	andeq	r0, r1, r3, rrx
    4a20:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4a24:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    4a28:	00020068 	andeq	r0, r2, r8, rrx
    4a2c:	72747300 	rsbsvc	r7, r4, #0, 6
    4a30:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    4a34:	00030068 	andeq	r0, r3, r8, rrx
    4a38:	01050000 	mrseq	r0, (UNDEF: 5)
    4a3c:	30020500 	andcc	r0, r2, r0, lsl #10
    4a40:	030002b7 	movweq	r0, #695	; 0x2b7
    4a44:	03050128 	movweq	r0, #20776	; 0x5128
    4a48:	13131513 	tstne	r3, #79691776	; 0x4c00000
    4a4c:	09051513 	stmdbeq	r5, {r0, r1, r4, r8, sl, ip}
    4a50:	4c070501 	cfstr32mi	mvfx0, [r7], {1}
    4a54:	01060a05 	tsteq	r6, r5, lsl #20
    4a58:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    4a5c:	09052e0a 	stmdbeq	r5, {r1, r3, r9, sl, fp, sp}
    4a60:	052e7503 	streq	r7, [lr, #-1283]!	; 0xfffffafd
    4a64:	2e0c0310 	mcrcs	3, 0, r0, cr12, cr0, {0}
    4a68:	05490c05 	strbeq	r0, [r9, #-3077]	; 0xfffff3fb
    4a6c:	07052e0a 	streq	r2, [r5, -sl, lsl #28]
    4a70:	09054a06 	stmdbeq	r5, {r1, r2, r9, fp, lr}
    4a74:	060e0513 			; <UNDEFINED> instruction: 0x060e0513
    4a78:	06090501 	streq	r0, [r9], -r1, lsl #10
    4a7c:	5203052b 	andpl	r0, r3, #180355072	; 0xac00000
    4a80:	01060605 	tsteq	r6, r5, lsl #12
    4a84:	6e030105 	adfvss	f0, f3, f5
    4a88:	3510054a 	ldrcc	r0, [r0, #-1354]	; 0xfffffab6
    4a8c:	03060705 	movweq	r0, #26373	; 0x6705
    4a90:	05162e0e 	ldreq	r2, [r6, #-3598]	; 0xfffff1f2
    4a94:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    4a98:	052f0607 	streq	r0, [pc, #-1543]!	; 4499 <_start-0xbb67>
    4a9c:	0517060d 	ldreq	r0, [r7, #-1549]	; 0xfffff9f3
    4aa0:	0705290e 	streq	r2, [r5, -lr, lsl #18]
    4aa4:	14052f06 	strne	r2, [r5], #-3846	; 0xfffff0fa
    4aa8:	160d0501 	strne	r0, [sp], -r1, lsl #10
    4aac:	0b052e06 	bleq	1502cc <__bss_end+0x22c6c>
    4ab0:	1b05bc06 	blne	173ad0 <__bss_end+0x46470>
    4ab4:	0b050106 	bleq	144ed4 <__bss_end+0x17874>
    4ab8:	1b052f06 	blne	1506d8 <__bss_end+0x23078>
    4abc:	0b050106 	bleq	144edc <__bss_end+0x1787c>
    4ac0:	1b052f06 	blne	1506e0 <__bss_end+0x23080>
    4ac4:	0b050106 	bleq	144ee4 <__bss_end+0x17884>
    4ac8:	1b052f06 	blne	1506e8 <__bss_end+0x23088>
    4acc:	0b050106 	bleq	144eec <__bss_end+0x1788c>
    4ad0:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    4ad4:	06017a03 	streq	r7, [r1], -r3, lsl #20
    4ad8:	4f18052e 	svcmi	0x0018052e
    4adc:	05320d05 	ldreq	r0, [r2, #-3333]!	; 0xfffff2fb
    4ae0:	0d052a18 	vstreq	s4, [r5, #-96]	; 0xffffffa0
    4ae4:	0631062f 	ldrteq	r0, [r1], -pc, lsr #12
    4ae8:	0b052e2e 	bleq	1503a8 <__bss_end+0x22d48>
    4aec:	1b056806 	blne	15eb0c <__bss_end+0x314ac>
    4af0:	0b050106 	bleq	144f10 <__bss_end+0x178b0>
    4af4:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    4af8:	054d060f 	strbeq	r0, [sp, #-1551]	; 0xfffff9f1
    4afc:	06360609 	ldrteq	r0, [r6], -r9, lsl #12
    4b00:	03100501 	tsteq	r0, #4194304	; 0x400000
    4b04:	052e4a5a 	streq	r4, [lr, #-2650]!	; 0xfffff5a6
    4b08:	27030605 	strcs	r0, [r3, -r5, lsl #12]
    4b0c:	060a052e 	streq	r0, [sl], -lr, lsr #10
    4b10:	06090501 	streq	r0, [r9], -r1, lsl #10
    4b14:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    4b18:	052e4e01 	streq	r4, [lr, #-3585]!	; 0xfffff1ff
    4b1c:	062a0609 	strteq	r0, [sl], -r9, lsl #12
    4b20:	03100501 	tsteq	r0, #4194304	; 0x400000
    4b24:	052e4a5a 	streq	r4, [lr, #-2650]!	; 0xfffff5a6
    4b28:	27030605 	strcs	r0, [r3, -r5, lsl #12]
    4b2c:	060a052e 	streq	r0, [sl], -lr, lsr #10
    4b30:	06090501 	streq	r0, [r9], -r1, lsl #10
    4b34:	0501062d 	streq	r0, [r1, #-1581]	; 0xfffff9d3
    4b38:	66710318 			; <UNDEFINED> instruction: 0x66710318
    4b3c:	0309052e 	movweq	r0, #38190	; 0x952e
    4b40:	0d052e5d 	stceq	14, cr2, [r5, #-372]	; 0xfffffe8c
    4b44:	024a1e03 	subeq	r1, sl, #3, 28	; 0x30
    4b48:	01010004 	tsteq	r1, r4
    4b4c:	000001ba 			; <UNDEFINED> instruction: 0x000001ba
    4b50:	00830003 	addeq	r0, r3, r3
    4b54:	01020000 	mrseq	r0, (UNDEF: 2)
    4b58:	000d0efb 	strdeq	r0, [sp], -fp
    4b5c:	01010101 	tsteq	r1, r1, lsl #2
    4b60:	01000000 	mrseq	r0, (UNDEF: 0)
    4b64:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    4b68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4b6c:	2f2e2e2f 	svccs	0x002e2e2f
    4b70:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4b74:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    4b78:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4b7c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4b80:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    4b84:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4b88:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    4b8c:	2f646c69 	svccs	0x00646c69
    4b90:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4b94:	702d6269 	eorvc	r6, sp, r9, ror #4
    4b98:	64303342 	ldrtvs	r3, [r0], #-834	; 0xfffffcbe
    4b9c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    4ba0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4ba4:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    4ba8:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    4bac:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4bb0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4bb4:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    4bb8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4bbc:	00006564 	andeq	r6, r0, r4, ror #10
    4bc0:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    4bc4:	632e7268 			; <UNDEFINED> instruction: 0x632e7268
    4bc8:	00000100 	andeq	r0, r0, r0, lsl #2
    4bcc:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4bd0:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    4bd4:	00000200 	andeq	r0, r0, r0, lsl #4
    4bd8:	00010500 	andeq	r0, r1, r0, lsl #10
    4bdc:	b84c0205 	stmdalt	ip, {r0, r2, r9}^
    4be0:	38030002 	stmdacc	r3, {r1}
    4be4:	13030501 	movwne	r0, #13569	; 0x3501
    4be8:	1a060605 	bne	186404 <__bss_end+0x58da4>
    4bec:	03060305 	movweq	r0, #25349	; 0x6305
    4bf0:	13152e79 	tstne	r5, #1936	; 0x790
    4bf4:	06060515 			; <UNDEFINED> instruction: 0x06060515
    4bf8:	06090501 	streq	r0, [r9], -r1, lsl #10
    4bfc:	052e1403 	streq	r1, [lr, #-1027]!	; 0xfffffbfd
    4c00:	052e060a 	streq	r0, [lr, #-1546]!	; 0xfffff9f6
    4c04:	03052e09 	movweq	r2, #24073	; 0x5e09
    4c08:	2e090306 	cdpcs	3, 0, cr0, cr9, cr6, {0}
    4c0c:	010f0513 	tsteq	pc, r3, lsl r5	; <UNPREDICTABLE>
    4c10:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    4c14:	58030601 	stmdapl	r3, {r0, r9, sl}
    4c18:	030b0501 	movweq	r0, #46337	; 0xb501
    4c1c:	0a052e2b 	beq	1504d0 <__bss_end+0x22e70>
    4c20:	0623052b 	strteq	r0, [r3], -fp, lsr #10
    4c24:	010f052d 	tsteq	pc, sp, lsr #10
    4c28:	05130505 	ldreq	r0, [r3, #-1285]	; 0xfffffafb
    4c2c:	0515062a 	ldreq	r0, [r5, #-1578]	; 0xfffff9d6
    4c30:	23052b0a 	movwcs	r2, #23306	; 0x5b0a
    4c34:	0f052d06 	svceq	0x00052d06
    4c38:	16090501 	strne	r0, [r9], -r1, lsl #10
    4c3c:	01062a05 	tsteq	r6, r5, lsl #20
    4c40:	05660b05 	strbeq	r0, [r6, #-2821]!	; 0xfffff4fb
    4c44:	0b052e26 	bleq	1504e4 <__bss_end+0x22e84>
    4c48:	2e26052e 	cfsh64cs	mvdx0, mvdx6, #30
    4c4c:	67060505 	strvs	r0, [r6, -r5, lsl #10]
    4c50:	05110905 	ldreq	r0, [r1, #-2309]	; 0xfffff6fb
    4c54:	0501060b 	streq	r0, [r1, #-1547]	; 0xfffff9f5
    4c58:	0b052e2a 	bleq	150508 <__bss_end+0x22ea8>
    4c5c:	2e2a052e 	cfsh64cs	mvdx0, mvdx10, #30
    4c60:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    4c64:	26052e2a 	strcs	r2, [r5], -sl, lsr #28
    4c68:	0609052e 	streq	r0, [r9], -lr, lsr #10
    4c6c:	05660b03 	strbeq	r0, [r6, #-2819]!	; 0xfffff4fd
    4c70:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4c74:	054a2e09 	strbeq	r2, [sl, #-3593]	; 0xfffff1f7
    4c78:	09052e0a 	stmdbeq	r5, {r1, r3, r9, sl, fp, sp}
    4c7c:	0005052e 	andeq	r0, r5, lr, lsr #10
    4c80:	06010402 	streq	r0, [r1], -r2, lsl #8
    4c84:	0009054b 	andeq	r0, r9, fp, asr #10
    4c88:	11010402 	tstne	r1, r2, lsl #8
    4c8c:	02000d05 	andeq	r0, r0, #320	; 0x140
    4c90:	01060104 	tsteq	r6, r4, lsl #2
    4c94:	6b030a05 	blvs	c74b0 <ramdisk+0x99e58>
    4c98:	46090566 	strmi	r0, [r9], -r6, ror #10
    4c9c:	05340805 	ldreq	r0, [r4, #-2053]!	; 0xfffff7fb
    4ca0:	7a030609 	bvc	c64cc <ramdisk+0x98e74>
    4ca4:	3207052e 	andcc	r0, r7, #192937984	; 0xb800000
    4ca8:	0c052a14 			; <UNDEFINED> instruction: 0x0c052a14
    4cac:	0a050106 	beq	1450cc <__bss_end+0x17a6c>
    4cb0:	4b10052e 	blmi	406170 <__bss_end+0x2d8b10>
    4cb4:	1b030105 	blne	c50d0 <ramdisk+0x97a78>
    4cb8:	060d052e 	streq	r0, [sp], -lr, lsr #10
    4cbc:	052e5003 	streq	r5, [lr, #-3]!
    4cc0:	052e060e 	streq	r0, [lr, #-1550]!	; 0xfffff9f2
    4cc4:	0b052e0d 	bleq	150500 <__bss_end+0x22ea0>
    4cc8:	052c3206 	streq	r3, [ip, #-518]!	; 0xfffffdfa
    4ccc:	0501060e 	streq	r0, [r1, #-1550]	; 0xfffff9f2
    4cd0:	0c05800d 	stceq	0, cr8, [r5], {13}
    4cd4:	060d0532 			; <UNDEFINED> instruction: 0x060d0532
    4cd8:	0f05362a 	svceq	0x0005362a
    4cdc:	0d050106 	stfeqs	f0, [r5, #-24]	; 0xffffffe8
    4ce0:	0609059e 			; <UNDEFINED> instruction: 0x0609059e
    4ce4:	110d054b 	tstne	sp, fp, asr #10
    4ce8:	01060f05 	tsteq	r6, r5, lsl #30
    4cec:	4a0d052e 	bmi	3461ac <__bss_end+0x218b4c>
    4cf0:	09054e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, lr}
    4cf4:	110d0567 	tstne	sp, r7, ror #10
    4cf8:	10052e06 	andne	r2, r5, r6, lsl #28
    4cfc:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
    4d00:	2e1b0301 	cdpcs	3, 1, cr0, cr11, cr1, {0}
    4d04:	0006022e 	andeq	r0, r6, lr, lsr #4
    4d08:	00e70101 	rsceq	r0, r7, r1, lsl #2
    4d0c:	00030000 	andeq	r0, r3, r0
    4d10:	000000c6 	andeq	r0, r0, r6, asr #1
    4d14:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4d18:	0101000d 	tsteq	r1, sp
    4d1c:	00000101 	andeq	r0, r0, r1, lsl #2
    4d20:	00000100 	andeq	r0, r0, r0, lsl #2
    4d24:	2f2e2e01 	svccs	0x002e2e01
    4d28:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4d2c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4d30:	2f2e2e2f 	svccs	0x002e2e2f
    4d34:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4d38:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4d3c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4d40:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 4bc0 <_start-0xb440>
    4d44:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    4d48:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    4d4c:	2f006d72 	svccs	0x00006d72
    4d50:	2f727375 	svccs	0x00727375
    4d54:	2f62696c 	svccs	0x0062696c
    4d58:	2f636367 	svccs	0x00636367
    4d5c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4d60:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4d64:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4d68:	30312f69 	eorscc	r2, r1, r9, ror #30
    4d6c:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    4d70:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4d74:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4d78:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    4d7c:	2f646c69 	svccs	0x00646c69
    4d80:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4d84:	702d6269 	eorvc	r6, sp, r9, ror #4
    4d88:	64303342 	ldrtvs	r3, [r0], #-834	; 0xfffffcbe
    4d8c:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    4d90:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4d94:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    4d98:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    4d9c:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4da0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4da4:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    4da8:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4dac:	00006564 	andeq	r6, r0, r4, ror #10
    4db0:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
    4db4:	732d6e65 			; <UNDEFINED> instruction: 0x732d6e65
    4db8:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    4dbc:	00010063 	andeq	r0, r1, r3, rrx
    4dc0:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4dc4:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    4dc8:	00020068 	andeq	r0, r2, r8, rrx
    4dcc:	72747300 	rsbsvc	r7, r4, #0, 6
    4dd0:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    4dd4:	00030068 	andeq	r0, r3, r8, rrx
    4dd8:	01050000 	mrseq	r0, (UNDEF: 5)
    4ddc:	9c020500 	cfstr32ls	mvfx0, [r2], {-0}
    4de0:	030002b9 	movweq	r0, #697	; 0x2b9
    4de4:	03050137 	movweq	r0, #20791	; 0x5137
    4de8:	06010513 			; <UNDEFINED> instruction: 0x06010513
    4dec:	0200f303 	andeq	pc, r0, #201326592	; 0xc000000
    4df0:	01000130 	tsteq	r0, r0, lsr r1
    4df4:	00017b01 	andeq	r7, r1, r1, lsl #22
    4df8:	ba000300 	blt	5a00 <_start-0xa600>
    4dfc:	02000000 	andeq	r0, r0, #0
    4e00:	0d0efb01 	vstreq	d15, [lr, #-4]
    4e04:	01010100 	mrseq	r0, (UNDEF: 17)
    4e08:	00000001 	andeq	r0, r0, r1
    4e0c:	01000001 	tsteq	r0, r1
    4e10:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4e14:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4e18:	2f2e2e2f 	svccs	0x002e2e2f
    4e1c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4e20:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4e24:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4e28:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    4e2c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    4e30:	752f0067 	strvc	r0, [pc, #-103]!	; 4dd1 <_start-0xb22f>
    4e34:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4c70 <_start-0xb390>
    4e38:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4e3c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4e40:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    4e44:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4e48:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4e4c:	2e30312f 	rsfcssp	f3, f0, #10.0
    4e50:	2f312e33 	svccs	0x00312e33
    4e54:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4e58:	00656475 	rsbeq	r6, r5, r5, ror r4
    4e5c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    4e60:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    4e64:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4e68:	42702d62 	rsbsmi	r2, r0, #6272	; 0x1880
    4e6c:	65643033 	strbvs	r3, [r4, #-51]!	; 0xffffffcd
    4e70:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4e74:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4e78:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    4e7c:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    4e80:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4e84:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4e88:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    4e8c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4e90:	73000065 	movwvc	r0, #101	; 0x65
    4e94:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    4e98:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
    4e9c:	00000100 	andeq	r0, r0, r0, lsl #2
    4ea0:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
    4ea4:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
    4ea8:	00000200 	andeq	r0, r0, r0, lsl #4
    4eac:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4eb0:	682e676e 	stmdavs	lr!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
    4eb4:	00000300 	andeq	r0, r0, r0, lsl #6
    4eb8:	00010500 	andeq	r0, r1, r0, lsl #10
    4ebc:	b9fc0205 	ldmiblt	ip!, {r0, r2, r9}^
    4ec0:	c0030002 	andgt	r0, r3, r2
    4ec4:	03050100 	movweq	r0, #20736	; 0x5100
    4ec8:	13011203 	movwne	r1, #4611	; 0x1203
    4ecc:	05151313 	ldreq	r1, [r5, #-787]	; 0xfffffced
    4ed0:	05010608 	streq	r0, [r1, #-1544]	; 0xfffff9f8
    4ed4:	06052e1d 			; <UNDEFINED> instruction: 0x06052e1d
    4ed8:	2e1d052e 	cfmul64cs	mvdx0, mvdx13, mvdx14
    4edc:	7a030905 	bvc	c72f8 <ramdisk+0x99ca0>
    4ee0:	0301059e 	movweq	r0, #5534	; 0x159e
    4ee4:	1d052e6e 	stcne	14, cr2, [r5, #-440]	; 0xfffffe48
    4ee8:	2e2e1803 	cdpcs	8, 2, cr1, cr14, cr3, {0}
    4eec:	14031005 	strne	r1, [r3], #-5
    4ef0:	2e15054a 	cfmac32cs	mvfx0, mvfx5, mvfx10
    4ef4:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    4ef8:	07052e13 	smladeq	r5, r3, lr, r2
    4efc:	052f062d 	streq	r0, [pc, #-1581]!	; 48d7 <_start-0xb729>
    4f00:	0501060a 	streq	r0, [r1, #-1546]	; 0xfffff9f6
    4f04:	2e064907 	vmlacs.f16	s8, s12, s14	; <UNPREDICTABLE>
    4f08:	05100905 	ldreq	r0, [r0, #-2309]	; 0xfffff6fb
    4f0c:	4a0a0303 	bmi	285b20 <__bss_end+0x1584c0>
    4f10:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
    4f14:	45060905 	strmi	r0, [r6, #-2309]	; 0xfffff6fb
    4f18:	05050106 	streq	r0, [r5, #-262]	; 0xfffffefa
    4f1c:	0c056706 	stceq	7, cr6, [r5], {6}
    4f20:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4f24:	01062d06 	tsteq	r6, r6, lsl #26
    4f28:	4d060305 	stcmi	3, cr0, [r6, #-20]	; 0xffffffec
    4f2c:	14060105 	strne	r0, [r6], #-261	; 0xfffffefb
    4f30:	0313054a 	tsteq	r3, #310378496	; 0x12800000
    4f34:	2d052e65 	stccs	14, cr2, [r5, #-404]	; 0xfffffe6c
    4f38:	00040533 	andeq	r0, r4, r3, lsr r5
    4f3c:	06010402 	streq	r0, [r1], -r2, lsl #8
    4f40:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
    4f44:	05010601 	streq	r0, [r1, #-1537]	; 0xfffff9ff
    4f48:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
    4f4c:	02002c01 	andeq	r2, r0, #256	; 0x100
    4f50:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    4f54:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    4f58:	0a054a01 	beq	157764 <__bss_end+0x2a104>
    4f5c:	0604054c 	streq	r0, [r4], -ip, asr #10
    4f60:	060d052f 	streq	r0, [sp], -pc, lsr #10
    4f64:	3121050f 			; <UNDEFINED> instruction: 0x3121050f
    4f68:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    4f6c:	022b060d 	eoreq	r0, fp, #13631488	; 0xd00000
    4f70:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      10:	6b636954 	blvs	18da568 <__bss_end+0x17acf08>
      14:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      18:	76727000 	ldrbtvc	r7, [r2], -r0
      1c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
      20:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
      24:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
      28:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
      2c:	00747075 	rsbseq	r7, r4, r5, ror r0
      30:	72615070 	rsbvc	r5, r1, #112	; 0x70
      34:	47006d61 	strmi	r6, [r0, -r1, ror #26]
      38:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      3c:	31203731 			; <UNDEFINED> instruction: 0x31203731
      40:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
      44:	30322031 	eorscc	r2, r2, r1, lsr r0
      48:	36303132 			; <UNDEFINED> instruction: 0x36303132
      4c:	28203132 	stmdacs	r0!, {r1, r4, r5, r8, ip, sp}
      50:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
      54:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
      58:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
      5c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
      60:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
      64:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
      68:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
      6c:	206d7261 	rsbcs	r7, sp, r1, ror #4
      70:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      74:	613d6863 	teqvs	sp, r3, ror #16
      78:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      7c:	672d207a 			; <UNDEFINED> instruction: 0x672d207a
      80:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      84:	5f00672d 	svcpl	0x0000672d
      88:	324d4342 	subcc	r4, sp, #134217729	; 0x8000001
      8c:	5f353338 	svcpl	0x00353338
      90:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
      94:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
      98:	73005347 	movwvc	r5, #839	; 0x347
      9c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
      a0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
      a4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
      a8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      ac:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
      b0:	2f656d6f 	svccs	0x00656d6f
      b4:	616e756c 	cmnvs	lr, ip, ror #10
      b8:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
      bc:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
      c0:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
      c4:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
      c8:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
      cc:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      d0:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
      d4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      d8:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
      dc:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
      e0:	64700053 	ldrbtvs	r0, [r0], #-83	; 0xffffffad
      e4:	4b534154 	blmi	14d063c <__bss_end+0x13a2fdc>
      e8:	444f435f 	strbmi	r4, [pc], #-863	; f0 <_start-0xff10>
      ec:	682f0045 	stmdavs	pc!, {r0, r2, r6}	; <UNPREDICTABLE>
      f0:	2f656d6f 	svccs	0x00656d6f
      f4:	616e756c 	cmnvs	lr, ip, ror #10
      f8:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
      fc:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
     100:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
     104:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
     108:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     10c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     110:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     114:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     118:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     11c:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
     120:	72462f53 	subvc	r2, r6, #332	; 0x14c
     124:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     128:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     12c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     130:	6f702f65 	svcvs	0x00702f65
     134:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     138:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     13c:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     140:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     144:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     148:	702f6950 	eorvc	r6, pc, r0, asr r9	; <UNPREDICTABLE>
     14c:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
     150:	50760063 	rsbspl	r0, r6, r3, rrx
     154:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     158:	6353646e 	cmpvs	r3, #1845493760	; 0x6e000000
     15c:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     160:	0072656c 	rsbseq	r6, r2, ip, ror #10
     164:	724f7870 	subvc	r7, pc, #112, 16	; 0x700000
     168:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     16c:	4f546c61 	svcmi	0x00546c61
     170:	54760053 	ldrbtpl	r0, [r6], #-83	; 0xffffffad
     174:	496b6369 	stmdbmi	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
     178:	6c005253 	sfmvs	f5, 4, [r0], {83}	; 0x53
     17c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     180:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     184:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     188:	50767000 	rsbspl	r7, r6, r0
     18c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     190:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     194:	52700073 	rsbspl	r0, r0, #115	; 0x73
     198:	00736765 	rsbseq	r6, r3, r5, ror #14
     19c:	6f547870 	svcvs	0x00547870
     1a0:	53664f70 	cmnpl	r6, #112, 30	; 0x1c0
     1a4:	6b636174 	blvs	18d877c <__bss_end+0x17ab11c>
     1a8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     1ac:	6f642067 	svcvs	0x00642067
     1b0:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
     1b4:	6f507800 	svcvs	0x00507800
     1b8:	74537472 	ldrbvc	r7, [r3], #-1138	; 0xfffffb8e
     1bc:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     1c0:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     1c4:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     1c8:	50787000 	rsbspl	r7, r8, r0
     1cc:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     1d0:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     1d4:	73696c61 	cmnvc	r9, #24832	; 0x6100
     1d8:	61745365 	cmnvs	r4, r5, ror #6
     1dc:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
     1e0:	6d6f436c 	stclvs	3, cr4, [pc, #-432]!	; 38 <_start-0xffc8>
     1e4:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
     1e8:	6374614d 	cmnvs	r4, #1073741843	; 0x40000013
     1ec:	50760068 	rsbspl	r0, r6, r8, rrx
     1f0:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     1f4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1f8:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     1fc:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     200:	6f682f00 	svcvs	0x00682f00
     204:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 58 <_start-0xffa8>
     208:	63616e75 	cmnvs	r1, #1872	; 0x750
     20c:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
     210:	63726178 	cmnvs	r2, #120, 2
     214:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
     218:	61522f63 	cmpvs	r2, r3, ror #30
     21c:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     220:	50797272 	rsbspl	r7, r9, r2, ror r2
     224:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     228:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     22c:	462d534f 	strtmi	r5, [sp], -pc, asr #6
     230:	53467461 	movtpl	r7, #25697	; 0x6461
     234:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     238:	4f545265 	svcmi	0x00545265
     23c:	6f532f53 	svcvs	0x00532f53
     240:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     244:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     248:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     24c:	43472f65 	movtmi	r2, #32613	; 0x7f65
     250:	61522f43 	cmpvs	r2, r3, asr #30
     254:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     258:	50797272 	rsbspl	r7, r9, r2, ror r2
     25c:	6f702f69 	svcvs	0x00702f69
     260:	73697472 	cmnvc	r9, #1912602624	; 0x72000000
     264:	00632e72 	rsbeq	r2, r3, r2, ror lr
     268:	72436c75 	subvc	r6, r3, #29952	; 0x7500
     26c:	63697469 	cmnvs	r9, #1761607680	; 0x69000000
     270:	654e6c61 	strbvs	r6, [lr, #-3169]	; 0xfffff39f
     274:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
     278:	50760067 	rsbspl	r0, r6, r7, rrx
     27c:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     280:	43746978 	cmnmi	r4, #120, 18	; 0x1e0000
     284:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     288:	006c6163 	rsbeq	r6, ip, r3, ror #2
     28c:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     290:	52534974 	subspl	r4, r3, #116, 18	; 0x1d0000
     294:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     298:	72694674 	rsbvc	r4, r9, #116, 12	; 0x7400000
     29c:	61547473 	cmpvs	r4, r3, ror r4
     2a0:	76006b73 			; <UNDEFINED> instruction: 0x76006b73
     2a4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     2a8:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
     2ac:	6f725064 	svcvs	0x00725064
     2b0:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
     2b4:	7600726f 	strvc	r7, [r0], -pc, ror #4
     2b8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     2bc:	534f5452 	movtpl	r5, #62546	; 0xf452
     2c0:	5253495f 	subspl	r4, r3, #1556480	; 0x17c000
     2c4:	625f6700 	subsvs	r6, pc, #0, 14
     2c8:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     2cc:	00646574 	rsbeq	r6, r4, r4, ror r5
     2d0:	75437870 	strbvc	r7, [r3, #-2160]	; 0xfffff790
     2d4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     2d8:	42435474 	submi	r5, r3, #116, 8	; 0x74000000
     2dc:	55787000 	ldrbpl	r7, [r8, #-0]!
     2e0:	6f6c626e 	svcvs	0x006c626e
     2e4:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xfffff49d
     2e8:	42435243 	submi	r5, r3, #805306372	; 0x30000004
     2ec:	54787000 	ldrbtpl	r7, [r8], #-0
     2f0:	00706d65 	rsbseq	r6, r0, r5, ror #26
     2f4:	526f4376 	rsbpl	r4, pc, #-671088639	; 0xd8000001
     2f8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     2fc:	6441656e 	strbvs	r6, [r1], #-1390	; 0xfffffa92
     300:	446f5464 	strbtmi	r5, [pc], #-1124	; 308 <_start-0xfcf8>
     304:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     308:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
     30c:	70007473 	andvc	r7, r0, r3, ror r4
     310:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     314:	6e696174 	mcrvs	1, 3, r6, cr9, cr4, {3}
     318:	70007265 	andvc	r7, r0, r5, ror #4
     31c:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     320:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     324:	7546656e 	strbvc	r6, [r6, #-1390]	; 0xfffffa92
     328:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     32c:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     330:	73736150 	cmnvc	r3, #80, 2
     334:	69546465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, sp, lr}^
     338:	00736b63 	rsbseq	r6, r3, r3, ror #22
     33c:	6e497870 	mcrvs	8, 2, r7, cr9, cr0, {3}
     340:	00786564 	rsbseq	r6, r8, r4, ror #10
     344:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     348:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
     34c:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     350:	6b636954 	blvs	18da8a8 <__bss_end+0x17ad248>
     354:	446f5473 	strbtmi	r5, [pc], #-1139	; 35c <_start-0xfca4>
     358:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     35c:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     360:	6e457473 	mcrvs	4, 2, r7, cr5, cr3, {3}
     364:	76700064 	ldrbtvc	r0, [r0], -r4, rrx
     368:	656e774f 	strbvs	r7, [lr, #-1871]!	; 0xfffff8b1
     36c:	4c780072 	ldclmi	0, cr0, [r8], #-456	; 0xfffffe38
     370:	54747361 	ldrbtpl	r7, [r4], #-865	; 0xfffffc9f
     374:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     378:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     37c:	6f437800 	svcvs	0x00437800
     380:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     384:	54656e69 	strbtpl	r6, [r5], #-3689	; 0xfffff197
     388:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     38c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     390:	494c7800 	stmdbmi	ip, {fp, ip, sp, lr}^
     394:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     398:	004d4554 	subeq	r4, sp, r4, asr r5
     39c:	6f437870 	svcvs	0x00437870
     3a0:	4c74736e 	ldclmi	3, cr7, [r4], #-440	; 0xfffffe48
     3a4:	00747369 	rsbseq	r7, r4, r9, ror #6
     3a8:	6f547875 	svcvs	0x00547875
     3ac:	526f4370 	rsbpl	r4, pc, #112, 6	; 0xc0000001
     3b0:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     3b4:	6552656e 	ldrbvs	r6, [r2, #-1390]	; 0xfffffa92
     3b8:	50796461 	rsbspl	r6, r9, r1, ror #8
     3bc:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     3c0:	00797469 	rsbseq	r7, r9, r9, ror #8
     3c4:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     3c8:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     3cc:	6f526f43 	svcvs	0x00526f43
     3d0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     3d4:	73694c65 	cmnvc	r9, #25856	; 0x6500
     3d8:	78003174 	stmdavc	r0, {r2, r4, r5, r6, r8, ip, sp}
     3dc:	616c6544 	cmnvs	ip, r4, asr #10
     3e0:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     3e4:	756f526f 	strbvc	r5, [pc, #-623]!	; 17d <_start-0xfe83>
     3e8:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     3ec:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     3f0:	78700032 	ldmdavc	r0!, {r1, r4, r5}^
     3f4:	42435243 	submi	r5, r3, #805306372	; 0x30000004
     3f8:	43787000 	cmnmi	r8, #0
     3fc:	756f526f 	strbvc	r5, [pc, #-623]!	; 195 <_start-0xfe6b>
     400:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     404:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     408:	50787000 	rsbspl	r7, r8, r0
     40c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     410:	0073756f 	rsbseq	r7, r3, pc, ror #10
     414:	43726f63 	cmnmi	r2, #396	; 0x18c
     418:	756f526f 	strbvc	r5, [pc, #-623]!	; 1b1 <_start-0xfe4f>
     41c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     420:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     424:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
     428:	6b636f6c 	blvs	18dc1e0 <__bss_end+0x17aeb80>
     42c:	6f437800 	svcvs	0x00437800
     430:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     434:	52656e69 	rsbpl	r6, r5, #1680	; 0x690
     438:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     43c:	6f724665 	svcvs	0x00724665
     440:	6576456d 	ldrbvs	r4, [r6, #-1389]!	; 0xfffffa93
     444:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     448:	70007473 	andvc	r7, r0, r3, ror r4
     44c:	61655278 	smcvs	21800	; 0x5528
     450:	6f437964 	svcvs	0x00437964
     454:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     458:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     45c:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
     460:	49787500 	ldmdbmi	r8!, {r8, sl, ip, sp, lr}^
     464:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     468:	694d7800 	stmdbvs	sp, {fp, ip, sp, lr}^
     46c:	694c696e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     470:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     474:	78006d65 	stmdavc	r0, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
     478:	6f526f43 	svcvs	0x00526f43
     47c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     480:	65724365 	ldrbvs	r4, [r2, #-869]!	; 0xfffffc9b
     484:	00657461 	rsbeq	r7, r5, r1, ror #8
     488:	43726f63 	cmnmi	r2, #396	; 0x18c
     48c:	00424352 	subeq	r4, r2, r2, asr r3
     490:	754e7875 	strbvc	r7, [lr, #-2165]	; 0xfffff78b
     494:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     498:	7449664f 	strbvc	r6, [r9], #-1615	; 0xfffff9b1
     49c:	00736d65 	rsbseq	r6, r3, r5, ror #26
     4a0:	75437870 	strbvc	r7, [r3, #-2160]	; 0xfffff790
     4a4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     4a8:	526f4374 	rsbpl	r4, pc, #116, 6	; 0xd0000001
     4ac:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4b0:	7500656e 	strvc	r6, [r0, #-1390]	; 0xfffffa92
     4b4:	69725078 	ldmdbvs	r2!, {r3, r4, r5, r6, ip, lr}^
     4b8:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     4bc:	43780079 	cmnmi	r8, #121	; 0x79
     4c0:	756f526f 	strbvc	r5, [pc, #-623]!	; 259 <_start-0xfda7>
     4c4:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     4c8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     4cc:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     4d0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     4d4:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     4d8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     4dc:	6f526f43 	svcvs	0x00526f43
     4e0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     4e4:	73694c65 	cmnvc	r9, #25856	; 0x6500
     4e8:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     4ec:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
     4f0:	45787000 	ldrbmi	r7, [r8, #-0]!
     4f4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     4f8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     4fc:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     500:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     504:	76006d65 	strvc	r6, [r0], -r5, ror #26
     508:	6f526f43 	svcvs	0x00526f43
     50c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     510:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
     514:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     518:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
     51c:	54656d69 	strbtpl	r6, [r5], #-3433	; 0xfffff297
     520:	6b61576f 	blvs	18562e4 <__bss_end+0x1728c84>
     524:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     528:	6f526f43 	svcvs	0x00526f43
     52c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     530:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     534:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     538:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     53c:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
     540:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
     544:	616c6544 	cmnvs	ip, r4, asr #10
     548:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     54c:	756f526f 	strbvc	r5, [pc, #-623]!	; 2e5 <_start-0xfd1b>
     550:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     554:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     558:	494d7800 	stmdbmi	sp, {fp, ip, sp, lr}^
     55c:	4c5f494e 	mrrcmi	9, 4, r4, pc, cr14	; <UNPREDICTABLE>
     560:	5f545349 	svcpl	0x00545349
     564:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	; 0xfffffedc
     568:	6f682f00 	svcvs	0x00682f00
     56c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 3c0 <_start-0xfc40>
     570:	63616e75 	cmnvs	r1, #1872	; 0x750
     574:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
     578:	63726178 	cmnvs	r2, #120, 2
     57c:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
     580:	61522f63 	cmpvs	r2, r3, ror #30
     584:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     588:	50797272 	rsbspl	r7, r9, r2, ror r2
     58c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     590:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     594:	462d534f 	strtmi	r5, [sp], -pc, asr #6
     598:	53467461 	movtpl	r7, #25697	; 0x6461
     59c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     5a0:	4f545265 	svcmi	0x00545265
     5a4:	6f532f53 	svcvs	0x00532f53
     5a8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     5ac:	6f72632f 	svcvs	0x0072632f
     5b0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     5b4:	00632e65 	rsbeq	r2, r3, r5, ror #28
     5b8:	53494c78 	movtpl	r4, #40056	; 0x9c78
     5bc:	78700054 	ldmdavc	r0!, {r2, r4, r6}^
     5c0:	616c6544 	cmnvs	ip, r4, asr #10
     5c4:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     5c8:	756f526f 	strbvc	r5, [pc, #-623]!	; 361 <_start-0xfc9f>
     5cc:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     5d0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     5d4:	76727000 	ldrbtvc	r7, [r2], -r0
     5d8:	63656843 	cmnvs	r5, #4390912	; 0x430000
     5dc:	6e65506b 	cdpvs	0, 6, cr5, cr5, cr11, {3}
     5e0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     5e4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     5e8:	73694c79 	cmnvc	r9, #30976	; 0x7900
     5ec:	47780074 			; <UNDEFINED> instruction: 0x47780074
     5f0:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     5f4:	694c6369 	stmdbvs	ip, {r0, r3, r5, r6, r8, r9, sp, lr}^
     5f8:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     5fc:	70006d65 	andvc	r6, r0, r5, ror #26
     600:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
     604:	61697469 	cmnvs	r9, r9, ror #8
     608:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
     60c:	6f526f43 	svcvs	0x00526f43
     610:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     614:	73694c65 	cmnvc	r9, #25856	; 0x6500
     618:	78007374 	stmdavc	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     61c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     620:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     624:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
     628:	7270006d 	rsbsvc	r0, r0, #109	; 0x6d
     62c:	65684376 	strbvs	r4, [r8, #-886]!	; 0xfffffc8a
     630:	65446b63 	strbvs	r6, [r4, #-2915]	; 0xfffff49d
     634:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     638:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
     63c:	72630074 	rsbvc	r0, r3, #116	; 0x74
     640:	4f524f43 	svcmi	0x00524f43
     644:	4e495455 	mcrmi	4, 2, r5, cr9, cr5, {2}
     648:	4f435f45 	svcmi	0x00435f45
     64c:	6c004544 	cfstr32vs	mvfx4, [r0], {68}	; 0x44
     650:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     654:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     658:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     65c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     660:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     664:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
     668:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     66c:	63206465 			; <UNDEFINED> instruction: 0x63206465
     670:	00726168 	rsbseq	r6, r2, r8, ror #2
     674:	74497870 	strbvc	r7, [r9], #-2160	; 0xfffff790
     678:	6f546d65 	svcvs	0x00546d65
     67c:	6f6d6552 	svcvs	0x006d6552
     680:	76006576 			; <UNDEFINED> instruction: 0x76006576
     684:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     688:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     68c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     690:	74496573 	strbvc	r6, [r9], #-1395	; 0xfffffa8d
     694:	76006d65 	strvc	r6, [r0], -r5, ror #26
     698:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     69c:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
     6a0:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
     6a4:	4c760064 	ldclmi	0, cr0, [r6], #-400	; 0xfffffe70
     6a8:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     6ac:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     6b0:	73696c61 	cmnvc	r9, #24832	; 0x6100
     6b4:	56780065 	ldrbtpl	r0, [r8], -r5, rrx
     6b8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     6bc:	6e49664f 	cdpvs	6, 4, cr6, cr9, cr15, {2}
     6c0:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
     6c4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     6c8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 614 <_start-0xf9ec>
     6cc:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     6d0:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     6d4:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     6d8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     6dc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     6e0:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     6e4:	72656270 	rsbvc	r6, r5, #112, 4
     6e8:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     6ec:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     6f0:	4f545265 	svcmi	0x00545265
     6f4:	61462d53 	cmpvs	r6, r3, asr sp
     6f8:	2f534674 	svccs	0x00534674
     6fc:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     700:	534f5452 	movtpl	r5, #62546	; 0xf452
     704:	756f532f 	strbvc	r5, [pc, #-815]!	; 3dd <_start-0xfc23>
     708:	2f656372 	svccs	0x00656372
     70c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     710:	7000632e 	andvc	r6, r0, lr, lsr #6
     714:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     718:	4c76006d 	ldclmi	0, cr0, [r6], #-436	; 0xfffffe4c
     71c:	52747369 	rsbspl	r7, r4, #-1543503871	; 0xa4000001
     720:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     724:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     728:	72657449 	rsbvc	r7, r5, #1224736768	; 0x49000000
     72c:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
     730:	6f687300 	svcvs	0x00687300
     734:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     738:	7000746e 	andvc	r7, r0, lr, ror #8
     73c:	73694c78 	cmnvc	r9, #120, 24	; 0x7800
     740:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     744:	4c77654e 	cfldr64mi	mvdx6, [r7], #-312	; 0xfffffec8
     748:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     74c:	006d6574 	rsbeq	r6, sp, r4, ror r5
     750:	73694c76 	cmnvc	r9, #30208	; 0x7600
     754:	736e4974 	cmnvc	lr, #116, 18	; 0x1d0000
     758:	00747265 	rsbseq	r7, r4, r5, ror #4
     75c:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     760:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     764:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     768:	6e655363 	cdpvs	3, 6, cr5, cr5, cr3, {3}
     76c:	6f724664 	svcvs	0x00724664
     770:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     774:	51637500 	cmnpl	r3, r0, lsl #10
     778:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     77c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     780:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     784:	49657565 	stmdbmi	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
     788:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     78c:	75466575 	strbvc	r6, [r6, #-1397]	; 0xfffffa8b
     790:	72466c6c 	subvc	r6, r6, #108, 24	; 0x6c00
     794:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     798:	78750052 	ldmdavc	r5!, {r1, r4, r6}^
     79c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     7a0:	73654d65 	cmnvc	r5, #6464	; 0x1940
     7a4:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     7a8:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     7ac:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     7b0:	7a697300 	bvc	1a5d3b8 <__bss_end+0x192fd58>
     7b4:	00745f65 	rsbseq	r5, r4, r5, ror #30
     7b8:	69487870 	stmdbvs	r8, {r4, r5, r6, fp, ip, sp, lr}^
     7bc:	72656867 	rsbvc	r6, r5, #6750208	; 0x670000
     7c0:	6f697250 	svcvs	0x00697250
     7c4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7c8:	6b736154 	blvs	1cd8d20 <__bss_end+0x1bab6c0>
     7cc:	656b6f57 	strbvs	r6, [fp, #-3927]!	; 0xfffff0a9
     7d0:	5178006e 	cmnpl	r8, lr, rrx
     7d4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     7d8:	75517349 	ldrbvc	r7, [r1, #-841]	; 0xfffffcb7
     7dc:	45657565 	strbmi	r7, [r5, #-1381]!	; 0xfffffa9b
     7e0:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     7e4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 6d4 <_start-0xf92c>
     7e8:	00525349 	subseq	r5, r2, r9, asr #6
     7ec:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     7f0:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     7f4:	6d456575 	cfstr64vs	mvdx6, [r5, #-468]	; 0xfffffe2c
     7f8:	00797470 	rsbseq	r7, r9, r0, ror r4
     7fc:	43767270 	cmnmi	r6, #112, 4
     800:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0xffffff91
     804:	46617461 	strbtmi	r7, [r1], -r1, ror #8
     808:	516d6f72 	smcpl	55026	; 0xd6f2
     80c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     810:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     814:	75517765 	ldrbvc	r7, [r1, #-1893]	; 0xfffff89b
     818:	00657565 	rsbeq	r7, r5, r5, ror #10
     81c:	43767270 	cmnmi	r6, #112, 4
     820:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0xffffff91
     824:	54617461 	strbtpl	r7, [r1], #-1121	; 0xfffffb9f
     828:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0xfffffe91
     82c:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     830:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     834:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     838:	52637000 	rsbpl	r7, r3, #0
     83c:	46646165 	strbtmi	r6, [r4], -r5, ror #2
     840:	006d6f72 	rsbeq	r6, sp, r2, ror pc
     844:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     848:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     84c:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     850:	63655263 	cmnvs	r5, #805306374	; 0x30000006
     854:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
     858:	4f637000 	svcmi	0x00637000
     85c:	69676972 	stmdbvs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     860:	526c616e 	rsbpl	r6, ip, #-2147483621	; 0x8000001b
     864:	50646165 	rsbpl	r6, r4, r5, ror #2
     868:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
     86c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     870:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 7bc <_start-0xf844>
     874:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     878:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     87c:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     880:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     884:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     888:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     88c:	72656270 	rsbvc	r6, r5, #112, 4
     890:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     894:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     898:	4f545265 	svcmi	0x00545265
     89c:	61462d53 	cmpvs	r6, r3, asr sp
     8a0:	2f534674 	svccs	0x00534674
     8a4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     8a8:	534f5452 	movtpl	r5, #62546	; 0xf452
     8ac:	756f532f 	strbvc	r5, [pc, #-815]!	; 585 <_start-0xfa7b>
     8b0:	2f656372 	svccs	0x00656372
     8b4:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
     8b8:	00632e65 	rsbeq	r2, r3, r5, ror #28
     8bc:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xfffff088
     8c0:	6f6c6672 	svcvs	0x006c6672
     8c4:	756f4377 	strbvc	r4, [pc, #-887]!	; 555 <_start-0xfaab>
     8c8:	7600746e 	strvc	r7, [r0], -lr, ror #8
     8cc:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     8d0:	6c654465 	cfstrdvs	mvd4, [r5], #-404	; 0xfffffe6c
     8d4:	00657465 	rsbeq	r7, r5, r5, ror #8
     8d8:	65486370 	strbvs	r6, [r8, #-880]	; 0xfffffc90
     8dc:	78006461 	stmdavc	r0, {r0, r5, r6, sl, sp, lr}
     8e0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     8e4:	6e456e4f 	cdpvs	14, 4, cr6, cr5, cr15, {2}
     8e8:	69726574 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     8ec:	7800676e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     8f0:	7473754a 	ldrbtvc	r7, [r3], #-1354	; 0xfffffab6
     8f4:	6b656550 	blvs	1959e3c <__bss_end+0x182c7dc>
     8f8:	00676e69 	rsbeq	r6, r7, r9, ror #28
     8fc:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     900:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     904:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     908:	6e655363 	cdpvs	3, 6, cr5, cr5, cr3, {3}
     90c:	54780064 	ldrbtpl	r0, [r8], #-100	; 0xffffff9c
     910:	4f656d69 	svcmi	0x00656d69
     914:	79547475 	ldmdbvc	r4, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
     918:	75006570 	strvc	r6, [r0, #-1392]	; 0xfffffa90
     91c:	74655278 	strbtvc	r5, [r5], #-632	; 0xfffffd88
     920:	006e7275 	rsbeq	r7, lr, r5, ror r2
     924:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     928:	61486575 	hvcvs	34389	; 0x8655
     92c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     930:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     934:	52657565 	rsbpl	r7, r5, #423624704	; 0x19400000
     938:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     93c:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
     940:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     944:	72700052 	rsbsvc	r0, r0, #82	; 0x52
     948:	51734976 	cmnpl	r3, r6, ror r9
     94c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     950:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
     954:	4c787500 	cfldr64mi	mvdx7, [r8], #-0
     958:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     95c:	78750068 	ldmdavc	r5!, {r3, r5, r6}^
     960:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     964:	6e654c65 	cdpvs	12, 6, cr4, cr5, cr5, {3}
     968:	00687467 	rsbeq	r7, r8, r7, ror #8
     96c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     970:	6157736b 	cmpvs	r7, fp, ror #6
     974:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     978:	526f5467 	rsbpl	r5, pc, #1728053248	; 0x67000000
     97c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     980:	75006576 	strvc	r6, [r0, #-1398]	; 0xfffffa8a
     984:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     988:	654d6575 	strbvs	r6, [sp, #-1397]	; 0xfffffa8b
     98c:	67617373 			; <UNDEFINED> instruction: 0x67617373
     990:	61577365 	cmpvs	r7, r5, ror #6
     994:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     998:	6f724667 	svcvs	0x00724667
     99c:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     9a0:	49767000 	ldmdbmi	r6!, {ip, sp, lr}^
     9a4:	546d6574 	strbtpl	r6, [sp], #-1396	; 0xfffffa8c
     9a8:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0xfffffe91
     9ac:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     9b0:	55455551 	strbpl	r5, [r5, #-1361]	; 0xfffffaaf
     9b4:	45780045 	ldrbmi	r0, [r8, #-69]!	; 0xffffffbb
     9b8:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     9bc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     9c0:	00746553 	rsbseq	r6, r4, r3, asr r5
     9c4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     9c8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     9cc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     9d0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     9d4:	4c785478 	cfldrdmi	mvd5, [r8], #-480	; 0xfffffe20
     9d8:	006b636f 	rsbeq	r6, fp, pc, ror #6
     9dc:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     9e0:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     9e4:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     9e8:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0xfffffc9d
     9ec:	00657461 	rsbeq	r7, r5, r1, ror #8
     9f0:	61537875 	cmpvs	r3, r5, ror r8
     9f4:	49646576 	stmdbmi	r4!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     9f8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9fc:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     a00:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     a04:	75007375 	strvc	r7, [r0, #-885]	; 0xfffffc8b
     a08:	73654d78 	cmnvc	r5, #120, 26	; 0x1e00
     a0c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     a10:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     a14:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     a18:	42767000 	rsbsmi	r7, r6, #0
     a1c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     a20:	51780072 	cmnpl	r8, r2, ror r0
     a24:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     a28:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     a2c:	52636972 	rsbpl	r6, r3, #1867776	; 0x1c8000
     a30:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     a34:	6f437800 	svcvs	0x00437800
     a38:	6f507970 	svcvs	0x00507970
     a3c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     a40:	70006e6f 	andvc	r6, r0, pc, ror #28
     a44:	6e557672 	mrcvs	6, 2, r7, cr5, cr2, {3}
     a48:	6b636f6c 	blvs	18dc800 <__bss_end+0x17af1a0>
     a4c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     a50:	52780065 	rsbspl	r0, r8, #101	; 0x65
     a54:	636f4c78 	cmnvs	pc, #120, 24	; 0x7800
     a58:	6370006b 	cmnvs	r0, #107	; 0x6b
     a5c:	6c696154 	stfvse	f6, [r9], #-336	; 0xfffffeb0
     a60:	6f507800 	svcvs	0x00507800
     a64:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     a68:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     a6c:	6b736154 	blvs	1cd8fc4 <__bss_end+0x1bab964>
     a70:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     a74:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     a78:	65536f54 	ldrbvs	r6, [r3, #-3924]	; 0xfffff0ac
     a7c:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     a80:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     a84:	7a695365 	bvc	1a55820 <__bss_end+0x19281c0>
     a88:	426e4965 	rsbmi	r4, lr, #1654784	; 0x194000
     a8c:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     a90:	51787000 	cmnpl	r8, r0
     a94:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     a98:	57637000 	strbpl	r7, [r3, -r0]!
     a9c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     aa0:	75006f54 	strvc	r6, [r0, #-3924]	; 0xfffff0ac
     aa4:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     aa8:	7a69536d 	bvc	1a55864 <__bss_end+0x1928204>
     aac:	63700065 	cmnvs	r0, #101	; 0x65
     ab0:	6b736154 	blvs	1cd9008 <__bss_end+0x1bab9a8>
     ab4:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
     ab8:	6b737400 	blvs	1cddac0 <__bss_end+0x1bb0460>
     abc:	6b736154 	blvs	1cd9014 <__bss_end+0x1bab9b4>
     ac0:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     ac4:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
     ac8:	6b636f6c 	blvs	18dc880 <__bss_end+0x17af220>
     acc:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     ad0:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     ad4:	754e7465 	strbvc	r7, [lr, #-1125]	; 0xfffffb9b
     ad8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     adc:	6154664f 	cmpvs	r4, pc, asr #12
     ae0:	00736b73 	rsbseq	r6, r3, r3, ror fp
     ae4:	6f547875 	svcvs	0x00547875
     ae8:	61655270 	smcvs	21792	; 0x5520
     aec:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
     af0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     af4:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     af8:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
     afc:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     b00:	6e755272 	mrcvs	2, 3, r5, cr5, cr2, {3}
     b04:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
     b08:	52787000 	rsbspl	r7, r8, #0
     b0c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     b10:	6b736154 	blvs	1cd9068 <__bss_end+0x1baba08>
     b14:	73694c73 	cmnvc	r9, #29440	; 0x7300
     b18:	76007374 			; <UNDEFINED> instruction: 0x76007374
     b1c:	6b736154 	blvs	1cd9074 <__bss_end+0x1baba14>
     b20:	54746553 	ldrbtpl	r6, [r4], #-1363	; 0xfffffaad
     b24:	4f656d69 	svcmi	0x00656d69
     b28:	74537475 	ldrbvc	r7, [r3], #-1141	; 0xfffffb8b
     b2c:	00657461 	rsbeq	r7, r5, r1, ror #8
     b30:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     b34:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     b38:	6b736154 	blvs	1cd9090 <__bss_end+0x1baba30>
     b3c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     b40:	44780031 	ldrbtmi	r0, [r8], #-49	; 0xffffffcf
     b44:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     b48:	61546465 	cmpvs	r4, r5, ror #8
     b4c:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     b50:	00327473 	eorseq	r7, r2, r3, ror r4
     b54:	61506c75 	cmpvs	r0, r5, ror ip
     b58:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
     b5c:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
     b60:	76727000 	ldrbtvc	r7, [r2], -r0
     b64:	6f6c6c41 	svcvs	0x006c6c41
     b68:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
     b6c:	41424354 	cmpmi	r2, r4, asr r3
     b70:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0xfffffb92
     b74:	006b6361 	rsbeq	r6, fp, r1, ror #6
     b78:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
     b7c:	7465536b 	strbtvc	r5, [r5], #-875	; 0xfffffc95
     b80:	6c707041 	ldclvs	0, cr7, [r0], #-260	; 0xfffffefc
     b84:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
     b88:	546e6f69 	strbtpl	r6, [lr], #-3945	; 0xfffff097
     b8c:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
     b90:	75006761 	strvc	r6, [r0, #-1889]	; 0xfffff89f
     b94:	73694d78 	cmnvc	r9, #120, 26	; 0x1e00
     b98:	54646573 	strbtpl	r6, [r4], #-1395	; 0xfffffa8d
     b9c:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     ba0:	6b737400 	blvs	1cddba8 <__bss_end+0x1bb0548>
     ba4:	00424354 	subeq	r4, r2, r4, asr r3
     ba8:	61547870 	cmpvs	r4, r0, ror r8
     bac:	6f546b73 	svcvs	0x00546b73
     bb0:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
     bb4:	7800656d 	stmdavc	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
     bb8:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
     bbc:	71655264 	cmnvc	r5, r4, ror #4
     bc0:	65726975 	ldrbvs	r6, [r2, #-2421]!	; 0xfffff68b
     bc4:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
     bc8:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
     bcc:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     bd0:	42435464 	submi	r5, r3, #100, 8	; 0x64000000
     bd4:	53737500 	cmnpl	r3, #0, 10
     bd8:	6b636174 	blvs	18d91b0 <__bss_end+0x17abb50>
     bdc:	74706544 	ldrbtvc	r6, [r0], #-1348	; 0xfffffabc
     be0:	53780068 	cmnpl	r8, #104	; 0x68
     be4:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     be8:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     bec:	6b736154 	blvs	1cd9144 <__bss_end+0x1babae4>
     bf0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     bf4:	61547800 	cmpvs	r4, r0, lsl #16
     bf8:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
     bfc:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
     c00:	756f436b 	strbvc	r4, [pc, #-875]!	; 89d <_start-0xf763>
     c04:	7246746e 	subvc	r7, r6, #1845493760	; 0x6e000000
     c08:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     c0c:	50780052 	rsbspl	r0, r8, r2, asr r0
     c10:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     c14:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0xfffff892
     c18:	4c796461 	cfldrdmi	mvd6, [r9], #-388	; 0xfffffe7c
     c1c:	00747369 	rsbseq	r7, r4, r9, ror #6
     c20:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     c24:	5473496b 	ldrbtpl	r4, [r3], #-2411	; 0xfffff695
     c28:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     c2c:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     c30:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     c34:	61547800 	cmpvs	r4, r0, lsl #16
     c38:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
     c3c:	70704174 	rsbsvc	r4, r0, r4, ror r1
     c40:	6163696c 	cmnvs	r3, ip, ror #18
     c44:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c48:	6b736154 	blvs	1cd91a0 <__bss_end+0x1babb40>
     c4c:	00676154 	rsbeq	r6, r7, r4, asr r1
     c50:	73694d78 	cmnvc	r9, #120, 26	; 0x1e00
     c54:	59646573 	stmdbpl	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     c58:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
     c5c:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     c60:	7355706f 	cmpvc	r5, #111	; 0x6f
     c64:	72506465 	subsvc	r6, r0, #1694498816	; 0x65000000
     c68:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     c6c:	76007974 			; <UNDEFINED> instruction: 0x76007974
     c70:	6b736154 	blvs	1cd91c8 <__bss_end+0x1babb68>
     c74:	70737553 	rsbsvc	r7, r3, r3, asr r5
     c78:	41646e65 	cmnmi	r4, r5, ror #28
     c7c:	78006c6c 	stmdavc	r0, {r2, r3, r5, r6, sl, fp, sp, lr}
     c80:	6b736154 	blvs	1cd91d8 <__bss_end+0x1babb78>
     c84:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     c88:	7000656c 	andvc	r6, r0, ip, ror #10
     c8c:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
     c90:	6f54736b 	svcvs	0x0054736b
     c94:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     c98:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     c9c:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     ca0:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
     ca4:	00646574 	rsbeq	r6, r4, r4, ror r5
     ca8:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
     cac:	756f436b 	strbvc	r4, [pc, #-875]!	; 949 <_start-0xf6b7>
     cb0:	7600746e 	strvc	r7, [r0], -lr, ror #8
     cb4:	6b736154 	blvs	1cd920c <__bss_end+0x1babbac>
     cb8:	53646e45 	cmnpl	r4, #1104	; 0x450
     cbc:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     cc0:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     cc4:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     cc8:	506b7361 	rsbpl	r7, fp, r1, ror #6
     ccc:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     cd0:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
     cd4:	70007465 	andvc	r7, r0, r5, ror #8
     cd8:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xfffff088
     cdc:	6f6c6672 	svcvs	0x006c6672
     ce0:	6c654477 	cfstrdvs	mvd4, [r5], #-476	; 0xfffffe24
     ce4:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     ce8:	6b736154 	blvs	1cd9240 <__bss_end+0x1babbe0>
     cec:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     cf0:	61547600 	cmpvs	r4, r0, lsl #12
     cf4:	6c506b73 	mrrcvs	11, 7, r6, r0, cr3
     cf8:	4f656361 	svcmi	0x00656361
     cfc:	6576456e 	ldrbvs	r4, [r6, #-1390]!	; 0xfffffa92
     d00:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     d04:	76007473 			; <UNDEFINED> instruction: 0x76007473
     d08:	6b736154 	blvs	1cd9260 <__bss_end+0x1babc00>
     d0c:	616c6544 	cmnvs	ip, r4, asr #10
     d10:	78750079 	ldmdavc	r5!, {r0, r3, r4, r5, r6}^
     d14:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     d18:	50746e65 	rsbspl	r6, r4, r5, ror #28
     d1c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     d20:	00797469 	rsbseq	r7, r9, r9, ror #8
     d24:	61547870 	cmpvs	r4, r0, ror r8
     d28:	78006b73 	stmdavc	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     d2c:	6b736154 	blvs	1cd9284 <__bss_end+0x1babc24>
     d30:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     d34:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     d38:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
     d3c:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
     d40:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     d44:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     d48:	6d65526b 	sfmvs	f5, 2, [r5, #-428]!	; 0xfffffe54
     d4c:	4665766f 	strbtmi	r7, [r5], -pc, ror #12
     d50:	456d6f72 	strbmi	r6, [sp, #-3954]!	; 0xfffff08e
     d54:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     d58:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     d5c:	76727000 	ldrbtvc	r7, [r2], -r0
     d60:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
     d64:	6b736154 	blvs	1cd92bc <__bss_end+0x1babc5c>
     d68:	54647000 	strbtpl	r7, [r4], #-0
     d6c:	5f4b5341 	svcpl	0x004b5341
     d70:	4b4f4f48 	blmi	13d4a98 <__bss_end+0x12a7438>
     d74:	444f435f 	strbmi	r4, [pc], #-863	; d7c <_start-0xf284>
     d78:	4c780045 	ldclmi	0, cr0, [r8], #-276	; 0xfffffeec
     d7c:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     d80:	706d4573 	rsbvc	r4, sp, r3, ror r5
     d84:	70007974 	andvc	r7, r0, r4, ror r9
     d88:	6f6f4878 	svcvs	0x006f4878
     d8c:	6e75466b 	cdpvs	6, 7, cr4, cr5, cr11, {3}
     d90:	6f697463 	svcvs	0x00697463
     d94:	7870006e 	ldmdavc	r0!, {r1, r2, r3, r5, r6}^
     d98:	5477654e 	ldrbtpl	r6, [r7], #-1358	; 0xfffffab2
     d9c:	70004243 	andvc	r4, r0, r3, asr #4
     da0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     da4:	646f436b 	strbtvs	r4, [pc], #-875	; dac <_start-0xf254>
     da8:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
     dac:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     db0:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     db4:	6f436b63 	svcvs	0x00436b63
     db8:	00746e75 	rsbseq	r6, r4, r5, ror lr
     dbc:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     dc0:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
     dc4:	626e556b 	rsbvs	r5, lr, #448790528	; 0x1ac00000
     dc8:	6b636f6c 	blvs	18dcb80 <__bss_end+0x17af520>
     dcc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     dd0:	4c6c7500 	cfstr64mi	mvdx7, [ip], #-0
     dd4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     dd8:	426e4968 	rsbmi	r4, lr, #104, 18	; 0x1a0000
     ddc:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     de0:	4e787500 	cdpmi	5, 7, cr7, cr8, cr0, {0}
     de4:	72507765 	subsvc	r7, r0, #26476544	; 0x1940000
     de8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     dec:	70007974 	andvc	r7, r0, r4, ror r9
     df0:	6d614e63 	stclvs	14, cr4, [r1, #-396]!	; 0xfffffe74
     df4:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     df8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     dfc:	0074754f 	rsbseq	r7, r4, pc, asr #10
     e00:	61547875 	cmpvs	r4, r5, ror r8
     e04:	754e6b73 	strbvc	r6, [lr, #-2931]	; 0xfffff48d
     e08:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     e0c:	61547600 	cmpvs	r4, r0, lsl #12
     e10:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
     e14:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     e18:	65537974 	ldrbvs	r7, [r3, #-2420]	; 0xfffff68c
     e1c:	4d780074 	ldclmi	0, cr0, [r8, #-464]!	; 0xfffffe30
     e20:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
     e24:	67655279 			; <UNDEFINED> instruction: 0x67655279
     e28:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     e2c:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
     e30:	636e496b 	cmnvs	lr, #1753088	; 0x1ac000
     e34:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0xfffffa8e
     e38:	6954746e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     e3c:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     e40:	756f6853 	strbvc	r6, [pc, #-2131]!	; 5f5 <_start-0xfa0b>
     e44:	6544646c 	strbvs	r6, [r4, #-1132]	; 0xfffffb94
     e48:	0079616c 	rsbseq	r6, r9, ip, ror #2
     e4c:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     e50:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     e54:	73696c61 	cmnvc	r9, #24832	; 0x6100
     e58:	42435465 	submi	r5, r3, #1694498816	; 0x65000000
     e5c:	69726156 	ldmdbvs	r2!, {r1, r2, r4, r6, r8, sp, lr}^
     e60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     e64:	4d780073 	ldclmi	0, cr0, [r8, #-460]!	; 0xfffffe34
     e68:	524f4d45 	subpl	r4, pc, #4416	; 0x1140
     e6c:	45525f59 	ldrbmi	r5, [r2, #-3929]	; 0xfffff0a7
     e70:	4e4f4947 	vmlsmi.f16	s9, s30, s14	; <UNPREDICTABLE>
     e74:	61547600 	cmpvs	r4, r0, lsl #12
     e78:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xfffff48d
     e7c:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     e80:	61547800 	cmpvs	r4, r0, lsl #16
     e84:	61436b73 	hvcvs	14003	; 0x36b3
     e88:	70416c6c 	subvc	r6, r1, ip, ror #24
     e8c:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
     e90:	6f697461 	svcvs	0x00697461
     e94:	7361546e 	cmnvc	r1, #1845493760	; 0x6e000000
     e98:	6f6f486b 	svcvs	0x006f486b
     e9c:	5478006b 	ldrbtpl	r0, [r8], #-107	; 0xffffff95
     ea0:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     ea4:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     ea8:	72436369 	subvc	r6, r3, #-1543503871	; 0xa4000001
     eac:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     eb0:	61547600 	cmpvs	r4, r0, lsl #12
     eb4:	77536b73 			; <UNDEFINED> instruction: 0x77536b73
     eb8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ebc:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     ec0:	00747865 	rsbseq	r7, r4, r5, ror #16
     ec4:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
     ec8:	764f664f 	strbvc	r6, [pc], -pc, asr #12
     ecc:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
     ed0:	0073776f 	rsbseq	r7, r3, pc, ror #14
     ed4:	61547870 	cmpvs	r4, r0, ror r8
     ed8:	61546b73 	cmpvs	r4, r3, ror fp
     edc:	54780067 	ldrbtpl	r0, [r8], #-103	; 0xffffff99
     ee0:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
     ee4:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     ee8:	6c6c4165 	stfvse	f4, [ip], #-404	; 0xfffffe6c
     eec:	44787000 	ldrbtmi	r7, [r8], #-0
     ef0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     ef4:	61546465 	cmpvs	r4, r5, ror #8
     ef8:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     efc:	70007473 	andvc	r7, r0, r3, ror r4
     f00:	61745378 	cmnvs	r4, r8, ror r3
     f04:	2f006b63 	svccs	0x00006b63
     f08:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     f0c:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
     f10:	2f796361 	svccs	0x00796361
     f14:	61786548 	cmnvs	r8, r8, asr #10
     f18:	2f686372 	svccs	0x00686372
     f1c:	2f637273 	svccs	0x00637273
     f20:	70736152 	rsbsvc	r6, r3, r2, asr r1
     f24:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     f28:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     f2c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     f30:	534f5452 	movtpl	r5, #62546	; 0xf452
     f34:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
     f38:	462f5346 	strtmi	r5, [pc], -r6, asr #6
     f3c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     f40:	2f534f54 	svccs	0x00534f54
     f44:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     f48:	742f6563 	strtvc	r6, [pc], #-1379	; f50 <_start-0xf0b0>
     f4c:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     f50:	7800632e 	stmdavc	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
     f54:	6b736154 	blvs	1cd94ac <__bss_end+0x1babe4c>
     f58:	63656843 	cmnvs	r5, #4390912	; 0x430000
     f5c:	726f466b 	rsbvc	r4, pc, #112197632	; 0x6b00000
     f60:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     f64:	0074754f 	rsbseq	r7, r4, pc, asr #10
     f68:	61547870 	cmpvs	r4, r0, ror r8
     f6c:	6f546b73 	svcvs	0x00546b73
     f70:	70737553 	rsbsvc	r7, r3, r3, asr r5
     f74:	00646e65 	rsbeq	r6, r4, r5, ror #28
     f78:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
     f7c:	6f697665 	svcvs	0x00697665
     f80:	61577375 	cmpvs	r7, r5, ror r3
     f84:	6954656b 	ldmdbvs	r4, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
     f88:	7000656d 	andvc	r6, r0, sp, ror #10
     f8c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     f90:	446f546b 	strbtmi	r5, [pc], #-1131	; f98 <_start-0xf068>
     f94:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     f98:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
     f9c:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
     fa0:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     fa4:	6f724665 	svcvs	0x00724665
     fa8:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     fac:	61547600 	cmpvs	r4, r0, lsl #12
     fb0:	694d6b73 	stmdbvs	sp, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     fb4:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
     fb8:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
     fbc:	54780064 	ldrbtpl	r0, [r8], #-100	; 0xffffff9c
     fc0:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     fc4:	61547600 	cmpvs	r4, r0, lsl #12
     fc8:	74536b73 	ldrbvc	r6, [r3], #-2931	; 0xfffff48d
     fcc:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     fd0:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     fd4:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     fd8:	42767000 	rsbsmi	r7, r6, #0
     fdc:	41657361 	cmnmi	r5, r1, ror #6
     fe0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
     fe4:	76007373 			; <UNDEFINED> instruction: 0x76007373
     fe8:	6b736154 	blvs	1cd9540 <__bss_end+0x1babee0>
     fec:	616c6544 	cmnvs	ip, r4, asr #10
     ff0:	746e5579 	strbtvc	r5, [lr], #-1401	; 0xfffffa87
     ff4:	70006c69 	andvc	r6, r0, r9, ror #24
     ff8:	65447672 	strbvs	r7, [r4, #-1650]	; 0xfffff98e
     ffc:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    1000:	00424354 	subeq	r4, r2, r4, asr r3
    1004:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1008:	7375536b 	cmnvc	r5, #-1409286143	; 0xac000001
    100c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    1010:	6c417800 	mcrrvs	8, 0, r7, r1, cr0
    1014:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1018:	65695979 	strbvs	r5, [r9, #-2425]!	; 0xfffff687
    101c:	6465646c 	strbtvs	r6, [r5], #-1132	; 0xfffffb94
    1020:	50767000 	rsbspl	r7, r6, r0
    1024:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1028:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    102c:	65527800 	ldrbvs	r7, [r2, #-2048]	; 0xfffff800
    1030:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
    1034:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    1038:	64644176 	strbtvs	r4, [r4], #-374	; 0xfffffe8a
    103c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1040:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    1044:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    1048:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
    104c:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
    1050:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    1054:	43787500 	cmnmi	r8, #0, 10
    1058:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    105c:	754e746e 	strbvc	r7, [lr, #-1134]	; 0xfffffb92
    1060:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1064:	6154664f 	cmpvs	r4, pc, asr #12
    1068:	00736b73 	rsbseq	r6, r3, r3, ror fp
    106c:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    1070:	636e4965 	cmnvs	lr, #1654784	; 0x194000
    1074:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0xfffffa8e
    1078:	7000746e 	andvc	r7, r0, lr, ror #8
    107c:	42435478 	submi	r5, r3, #120, 8	; 0x78000000
    1080:	53787500 	cmnpl	r8, #0, 10
    1084:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    1088:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    108c:	70737553 	rsbsvc	r7, r3, r3, asr r5
    1090:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
    1094:	75700064 	ldrbvc	r0, [r0, #-100]!	; 0xffffff9c
    1098:	61745378 	cmnvs	r4, r8, ror r3
    109c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    10a0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    10a4:	61547600 	cmpvs	r4, r0, lsl #12
    10a8:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xfffff48d
    10ac:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
    10b0:	76727000 	ldrbtvc	r7, [r2], -r0
    10b4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    10b8:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    10bc:	61546573 	cmpvs	r4, r3, ror r5
    10c0:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    10c4:	00737473 	rsbseq	r7, r3, r3, ror r4
    10c8:	72437870 	subvc	r7, r3, #112, 16	; 0x700000
    10cc:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    10d0:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    10d4:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
    10d8:	65684376 	strbvs	r4, [r8, #-886]!	; 0xfffffc8a
    10dc:	61546b63 	cmpvs	r4, r3, ror #22
    10e0:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
    10e4:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
    10e8:	6554676e 	ldrbvs	r6, [r4, #-1902]	; 0xfffff892
    10ec:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
    10f0:	6f697461 	svcvs	0x00697461
    10f4:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
    10f8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    10fc:	44003167 	strmi	r3, [r0], #-359	; 0xfffffe99
    1100:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1104:	6142656c 	cmpvs	r2, ip, ror #10
    1108:	00636973 	rsbeq	r6, r3, r3, ror r9
    110c:	324d4342 	subcc	r4, sp, #134217729	; 0x8000001
    1110:	5f353338 	svcpl	0x00353338
    1114:	43544e49 	cmpmi	r4, #1168	; 0x490
    1118:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
    111c:	49460053 	stmdbmi	r6, {r0, r1, r4, r6}^
    1120:	72744351 	rsbsvc	r4, r4, #1140850689	; 0x44000001
    1124:	7269006c 	rsbvc	r0, r9, #108	; 0x6c
    1128:	67655271 			; <UNDEFINED> instruction: 0x67655271
    112c:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    1130:	72690072 	rsbvc	r0, r9, #114	; 0x72
    1134:	6f6c4271 	svcvs	0x006c4271
    1138:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
    113c:	73614d6c 	cmnvc	r1, #108, 26	; 0x1b00
    1140:	5364656b 	cmnpl	r4, #448790528	; 0x1ac00000
    1144:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1148:	61680073 	smcvs	32771	; 0x8003
    114c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1150:	676e6152 			; <UNDEFINED> instruction: 0x676e6152
    1154:	616d0065 	cmnvs	sp, r5, rrx
    1158:	69006b73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    115c:	69447172 	stmdbvs	r4, {r1, r4, r5, r6, r8, ip, sp, lr}^
    1160:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    1164:	66700065 	ldrbtvs	r0, [r0], -r5, rrx
    1168:	6e61486e 	cdpvs	8, 6, cr4, cr1, cr14, {3}
    116c:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1170:	6f682f00 	svcvs	0x00682f00
    1174:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; fc8 <_start-0xf038>
    1178:	63616e75 	cmnvs	r1, #1872	; 0x750
    117c:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    1180:	63726178 	cmnvs	r2, #120, 2
    1184:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    1188:	61522f63 	cmpvs	r2, r3, ror #30
    118c:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1190:	50797272 	rsbspl	r7, r9, r2, ror r2
    1194:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1198:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    119c:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    11a0:	53467461 	movtpl	r7, #25697	; 0x6461
    11a4:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    11a8:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    11ac:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    11b0:	72692f73 	rsbvc	r2, r9, #460	; 0x1cc
    11b4:	00632e71 	rsbeq	r2, r3, r1, ror lr
    11b8:	48717269 	ldmdami	r1!, {r0, r3, r5, r6, r9, ip, sp, lr}^
    11bc:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    11c0:	45007265 	strmi	r7, [r0, #-613]	; 0xfffffd9b
    11c4:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    11c8:	44003265 	strmi	r3, [r0], #-613	; 0xfffffd9b
    11cc:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    11d0:	0031656c 	eorseq	r6, r1, ip, ror #10
    11d4:	61736944 	cmnvs	r3, r4, asr #18
    11d8:	32656c62 	rsbcc	r6, r5, #25088	; 0x6200
    11dc:	565f6700 	ldrbpl	r6, [pc], -r0, lsl #14
    11e0:	6f746365 	svcvs	0x00746365
    11e4:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    11e8:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    11ec:	6e457172 	mcrvs	1, 2, r7, cr5, cr2, {3}
    11f0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    11f4:	5f4e4600 	svcpl	0x004e4600
    11f8:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    11fc:	50555252 	subspl	r5, r5, r2, asr r2
    1200:	41485f54 	cmpmi	r8, r4, asr pc
    1204:	454c444e 	strbmi	r4, [ip, #-1102]	; 0xfffffbb2
    1208:	4e490052 	mcrmi	0, 2, r0, cr9, cr2, {2}
    120c:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    1210:	5f545055 	svcpl	0x00545055
    1214:	54434556 	strbpl	r4, [r3], #-1366	; 0xfffffaaa
    1218:	7000524f 	andvc	r5, r0, pc, asr #4
    121c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1220:	5000676e 	andpl	r6, r0, lr, ror #14
    1224:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1228:	0032676e 	eorseq	r6, r2, lr, ror #14
    122c:	42515249 	subsmi	r5, r1, #-1879048188	; 0x90000004
    1230:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
    1234:	71726900 	cmnvc	r2, r0, lsl #18
    1238:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    123c:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1240:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1244:	6142656c 	cmpvs	r2, ip, ror #10
    1248:	00636973 	rsbeq	r6, r3, r3, ror r9
    124c:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1250:	0031656c 	eorseq	r6, r1, ip, ror #10
    1254:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
    1258:	72697600 	rsbvc	r7, r9, #0, 12
    125c:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
    1260:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    1264:	74735f6f 	ldrbtvc	r5, [r3], #-3951	; 0xfffff091
    1268:	00657461 	rsbeq	r7, r5, r1, ror #8
    126c:	4e6e6970 			; <UNDEFINED> instruction: 0x4e6e6970
    1270:	52006d75 	andpl	r6, r0, #7488	; 0x1d40
    1274:	47646165 	strbmi	r6, [r4, -r5, ror #2]!
    1278:	006f6970 	rsbeq	r6, pc, r0, ror r9	; <UNPREDICTABLE>
    127c:	47746553 			; <UNDEFINED> instruction: 0x47746553
    1280:	446f6970 	strbtmi	r6, [pc], #-2416	; 1288 <_start-0xed78>
    1284:	63657269 	cmnvs	r5, #-1879048186	; 0x90000006
    1288:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    128c:	72697600 	rsbvc	r7, r9, #0, 12
    1290:	6c617574 	cfstr64vs	mvdx7, [r1], #-464	; 0xfffffe30
    1294:	6970675f 	ldmdbvs	r0!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, sp, lr}^
    1298:	75665f6f 	strbvc	r5, [r6, #-3951]!	; 0xfffff091
    129c:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    12a0:	44006e6f 	strmi	r6, [r0], #-3695	; 0xfffff191
    12a4:	43455445 	movtmi	r5, #21573	; 0x5445
    12a8:	49525f54 	ldmdbmi	r2, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    12ac:	474e4953 	smlsldmi	r4, lr, r3, r9
    12b0:	5953415f 	ldmdbpl	r3, {r0, r1, r2, r3, r4, r6, r8, lr}^
    12b4:	4400434e 	strmi	r4, [r0], #-846	; 0xfffffcb2
    12b8:	43455445 	movtmi	r5, #21573	; 0x5445
    12bc:	41465f54 	cmpmi	r6, r4, asr pc
    12c0:	4e494c4c 	cdpmi	12, 4, cr4, cr9, cr12, {2}
    12c4:	53415f47 	movtpl	r5, #8007	; 0x1f47
    12c8:	00434e59 	subeq	r4, r3, r9, asr lr
    12cc:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    12d0:	7047656c 	subvc	r6, r7, ip, ror #10
    12d4:	65446f69 	strbvs	r6, [r4, #-3945]	; 0xfffff097
    12d8:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    12dc:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    12e0:	5f544345 	svcpl	0x00544345
    12e4:	45505954 	ldrbmi	r5, [r0, #-2388]	; 0xfffff6ac
    12e8:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    12ec:	006c6156 	rsbeq	r6, ip, r6, asr r1
    12f0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 123c <_start-0xedc4>
    12f4:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
    12f8:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    12fc:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    1300:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1304:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1308:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    130c:	72656270 	rsbvc	r6, r5, #112, 4
    1310:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1314:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    1318:	4f545265 	svcmi	0x00545265
    131c:	61462d53 	cmpvs	r6, r3, asr sp
    1320:	2f534674 	svccs	0x00534674
    1324:	6f6d6544 	svcvs	0x006d6544
    1328:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    132c:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1330:	6970672f 	ldmdbvs	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, sp, lr}^
    1334:	00632e6f 	rsbeq	r2, r3, pc, ror #28
    1338:	4f495047 	svcmi	0x00495047
    133c:	5249445f 	subpl	r4, r9, #1593835520	; 0x5f000000
    1340:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1344:	4e495f4f 	cdpmi	15, 4, cr5, cr9, cr15, {2}
    1348:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    134c:	5f544345 	svcpl	0x00544345
    1350:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
    1354:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    1358:	5f544345 	svcpl	0x00544345
    135c:	454e4f4e 	strbmi	r4, [lr, #-3918]	; 0xfffff0b2
    1360:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    1364:	6f697047 	svcvs	0x00697047
    1368:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
    136c:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
    1370:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    1374:	5f544345 	svcpl	0x00544345
    1378:	49534952 	ldmdbmi	r3, {r1, r4, r6, r8, fp, lr}^
    137c:	4400474e 	strmi	r4, [r0], #-1870	; 0xfffff8b2
    1380:	43455445 	movtmi	r5, #21573	; 0x5445
    1384:	4f4c5f54 	svcmi	0x004c5f54
    1388:	6c430057 	mcrrvs	0, 5, r0, r3, cr7
    138c:	47726165 	ldrbmi	r6, [r2, -r5, ror #2]!
    1390:	496f6970 	stmdbmi	pc!, {r4, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
    1394:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
    1398:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
    139c:	6e756600 	cdpvs	6, 7, cr6, cr5, cr0, {0}
    13a0:	6d754e63 	ldclvs	14, cr4, [r5, #-396]!	; 0xfffffe74
    13a4:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
    13a8:	00746573 	rsbseq	r6, r4, r3, ror r5
    13ac:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    13b0:	465f5443 	ldrbmi	r5, [pc], -r3, asr #8
    13b4:	494c4c41 	stmdbmi	ip, {r0, r6, sl, fp, lr}^
    13b8:	5300474e 	movwpl	r4, #1870	; 0x74e
    13bc:	70477465 	subvc	r7, r7, r5, ror #8
    13c0:	44006f69 	strmi	r6, [r0], #-3945	; 0xfffff097
    13c4:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    13c8:	7047656c 	subvc	r6, r7, ip, ror #10
    13cc:	65446f69 	strbvs	r6, [r4, #-3945]	; 0xfffff097
    13d0:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    13d4:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    13d8:	554f5f4f 	strbpl	r5, [pc, #-3919]	; 491 <_start-0xfb6f>
    13dc:	72700054 	rsbsvc	r0, r0, #84	; 0x54
    13e0:	736e4976 	cmnvc	lr, #1933312	; 0x1d8000
    13e4:	42747265 	rsbsmi	r7, r4, #1342177286	; 0x50000006
    13e8:	6b636f6c 	blvs	18dd1a0 <__bss_end+0x17afb40>
    13ec:	6f746e49 	svcvs	0x00746e49
    13f0:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    13f4:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    13f8:	6f507800 	svcvs	0x00507800
    13fc:	65477472 	strbvs	r7, [r7, #-1138]	; 0xfffffb8e
    1400:	65724674 	ldrbvs	r4, [r2, #-1652]!	; 0xfffff98c
    1404:	61654865 	cmnvs	r5, r5, ror #16
    1408:	7a695370 	bvc	1a561d0 <__bss_end+0x1928b70>
    140c:	5f410065 	svcpl	0x00410065
    1410:	434f4c42 	movtmi	r4, #64578	; 0xfc42
    1414:	494c5f4b 	stmdbmi	ip, {r0, r1, r3, r6, r8, r9, sl, fp, ip, lr}^
    1418:	70004b4e 	andvc	r4, r0, lr, asr #22
    141c:	65487672 	strbvs	r7, [r8, #-1650]	; 0xfffff98e
    1420:	6e497061 	cdpvs	0, 4, cr7, cr9, cr1, {3}
    1424:	70007469 	andvc	r7, r0, r9, ror #8
    1428:	6f6c4278 	svcvs	0x006c4278
    142c:	70006b63 	andvc	r6, r0, r3, ror #22
    1430:	6e694c78 	mcrvs	12, 3, r4, cr9, cr8, {3}
    1434:	7670006b 	ldrbtvc	r0, [r0], -fp, rrx
    1438:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    143c:	6c6c614d 	stfvse	f6, [ip], #-308	; 0xfffffecc
    1440:	7000636f 	andvc	r6, r0, pc, ror #6
    1444:	72694678 	rsbvc	r4, r9, #120, 12	; 0x7800000
    1448:	72467473 	subvc	r7, r6, #1929379840	; 0x73000000
    144c:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	; 0x65
    1450:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1454:	4f545278 	svcmi	0x00545278
    1458:	45485f53 	strbmi	r5, [r8, #-3923]	; 0xfffff0ad
    145c:	75005041 	strvc	r5, [r0, #-65]	; 0xffffffbf
    1460:	61654863 	cmnvs	r5, r3, ror #16
    1464:	44640070 	strbtmi	r0, [r4], #-112	; 0xffffff90
    1468:	796d6d75 	stmdbvc	sp!, {r0, r2, r4, r5, r6, r8, sl, fp, sp, lr}^
    146c:	6f682f00 	svcvs	0x00682f00
    1470:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 12c4 <_start-0xed3c>
    1474:	63616e75 	cmnvs	r1, #1872	; 0x750
    1478:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    147c:	63726178 	cmnvs	r2, #120, 2
    1480:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    1484:	61522f63 	cmpvs	r2, r3, ror #30
    1488:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    148c:	50797272 	rsbspl	r7, r9, r2, ror r2
    1490:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1494:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1498:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    149c:	53467461 	movtpl	r7, #25697	; 0x6461
    14a0:	72462f2f 	subvc	r2, r6, #47, 30	; 0xbc
    14a4:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    14a8:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
    14ac:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    14b0:	6f702f65 	svcvs	0x00702f65
    14b4:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
    14b8:	4d2f656c 	cfstr32mi	mvfx6, [pc, #-432]!	; 1310 <_start-0xecf0>
    14bc:	614d6d65 	cmpvs	sp, r5, ror #26
    14c0:	682f676e 	stmdavs	pc!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}	; <UNPREDICTABLE>
    14c4:	5f706165 	svcpl	0x00706165
    14c8:	00632e34 	rsbeq	r2, r3, r4, lsr lr
    14cc:	6f6c4278 	svcvs	0x006c4278
    14d0:	69536b63 	ldmdbvs	r3, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    14d4:	7800657a 	stmdavc	r0, {r1, r3, r4, r5, r6, r8, sl, sp, lr}
    14d8:	70616548 	rsbvc	r6, r1, r8, asr #10
    14dc:	45787000 	ldrbmi	r7, [r8, #-0]!
    14e0:	7000646e 	andvc	r6, r0, lr, ror #8
    14e4:	65725078 	ldrbvs	r5, [r2, #-120]!	; 0xffffff88
    14e8:	756f6976 	strbvc	r6, [pc, #-2422]!	; b7a <_start-0xf486>
    14ec:	6f6c4273 	svcvs	0x006c4273
    14f0:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
    14f4:	61746f54 	cmnvs	r4, r4, asr pc
    14f8:	6165486c 	cmnvs	r5, ip, ror #16
    14fc:	7a695370 	bvc	1a562c4 <__bss_end+0x1928c64>
    1500:	76700065 	ldrbtvc	r0, [r0], -r5, rrx
    1504:	75746552 	ldrbvc	r6, [r4, #-1362]!	; 0xfffffaae
    1508:	76006e72 			; <UNDEFINED> instruction: 0x76006e72
    150c:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    1510:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    1514:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    1518:	6c426573 	cfstr64vs	mvdx6, [r2], {115}	; 0x73
    151c:	736b636f 	cmnvc	fp, #-1140850687	; 0xbc000001
    1520:	61656800 	cmnvs	r5, r0, lsl #16
    1524:	52545370 	subspl	r5, r4, #112, 6	; 0xc0000001
    1528:	5f544355 	svcpl	0x00544355
    152c:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    1530:	74537800 	ldrbvc	r7, [r3], #-2048	; 0xfffff800
    1534:	00747261 	rsbseq	r7, r4, r1, ror #4
    1538:	6f6c4278 	svcvs	0x006c4278
    153c:	694c6b63 	stmdbvs	ip, {r0, r1, r5, r6, r8, r9, fp, sp, lr}^
    1540:	61006b6e 	tstvs	r0, lr, ror #22
    1544:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    1548:	64657461 	strbtvs	r7, [r5], #-1121	; 0xfffffb9f
    154c:	61577800 	cmpvs	r7, r0, lsl #16
    1550:	6465746e 	strbtvs	r7, [r5], #-1134	; 0xfffffb92
    1554:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    1558:	6f507600 	svcvs	0x00507600
    155c:	72467472 	subvc	r7, r6, #1912602624	; 0x72000000
    1560:	78006565 	stmdavc	r0, {r0, r2, r5, r6, r8, sl, sp, lr}
    1564:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1568:	65747942 	ldrbvs	r7, [r4, #-2370]!	; 0xfffff6be
    156c:	6d655273 	sfmvs	f5, 2, [r5, #-460]!	; 0xfffffe34
    1570:	696e6961 	stmdbvs	lr!, {r0, r5, r6, r8, fp, sp, lr}^
    1574:	7000676e 	andvc	r6, r0, lr, ror #14
    1578:	77654e78 			; <UNDEFINED> instruction: 0x77654e78
    157c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1580:	6e694c6b 	cdpvs	12, 6, cr4, cr9, cr11, {3}
    1584:	7870006b 	ldmdavc	r0!, {r0, r1, r3, r5, r6}^
    1588:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
    158c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1590:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1594:	7570006b 	ldrbvc	r0, [r0, #-107]!	; 0xffffff95
    1598:	61654863 	cmnvs	r5, r3, ror #16
    159c:	646e4570 	strbtvs	r4, [lr], #-1392	; 0xfffffa90
    15a0:	42787000 	rsbsmi	r7, r8, #0
    15a4:	6b636f6c 	blvs	18dd35c <__bss_end+0x17afcfc>
    15a8:	6e496f54 	mcrvs	15, 2, r6, cr9, cr4, {2}
    15ac:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
    15b0:	72617500 	rsbvc	r7, r1, #0, 10
    15b4:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    15b8:	70007469 	andvc	r7, r0, r9, ror #8
    15bc:	00767264 	rsbseq	r7, r6, r4, ror #4
    15c0:	6b726f77 	blvs	1c9d3a4 <__bss_end+0x1b6fd44>
    15c4:	5f524600 	svcpl	0x00524600
    15c8:	494e4544 	stmdbmi	lr, {r2, r6, r8, sl, lr}^
    15cc:	6e004445 	cdpvs	4, 0, cr4, cr0, cr5, {2}
    15d0:	7461665f 	strbtvc	r6, [r1], #-1631	; 0xfffff9a1
    15d4:	00746e65 	rsbseq	r6, r4, r5, ror #28
    15d8:	745f7366 	ldrbvc	r7, [pc], #-870	; 15e0 <_start-0xea20>
    15dc:	00657079 	rsbeq	r7, r5, r9, ror r0
    15e0:	5f41424c 	svcpl	0x0041424c
    15e4:	52460074 	subpl	r0, r6, #116	; 0x74
    15e8:	5f4f4e5f 	svcpl	0x004f4e5f
    15ec:	48544150 	ldmdami	r4, {r4, r6, r8, lr}^
    15f0:	725f6e00 	subsvc	r6, pc, #0, 28
    15f4:	00746f6f 	rsbseq	r6, r4, pc, ror #30
    15f8:	45545942 	ldrbmi	r5, [r4, #-2370]	; 0xfffff6be
    15fc:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
    1600:	665f746e 	ldrbvs	r7, [pc], -lr, ror #8
    1604:	73667461 	cmnvc	r6, #1627389952	; 0x61000000
    1608:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
    160c:	6600726f 	strvs	r7, [r0], -pc, ror #4
    1610:	5f656572 	svcpl	0x00656572
    1614:	74736c63 	ldrbtvc	r6, [r3], #-3171	; 0xfffff39d
    1618:	48435400 	stmdami	r3, {sl, ip, lr}^
    161c:	66005241 	strvs	r5, [r0], -r1, asr #4
    1620:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
    1624:	5f524600 	svcpl	0x00524600
    1628:	41564e49 	cmpmi	r6, r9, asr #28
    162c:	5f44494c 	svcpl	0x0044494c
    1630:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
    1634:	46005443 	strmi	r5, [r0], -r3, asr #8
    1638:	4b4f5f52 	blmi	13d9388 <__bss_end+0x12abd28>
    163c:	5f524600 	svcpl	0x00524600
    1640:	5f544e49 	svcpl	0x00544e49
    1644:	00525245 	subseq	r5, r2, r5, asr #4
    1648:	4e5f5246 	cdpmi	2, 5, cr5, cr15, cr6, {2}
    164c:	49465f4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r8, r9, sl, fp, ip, lr}^
    1650:	5953454c 	ldmdbpl	r3, {r2, r3, r6, r8, sl, lr}^
    1654:	4d455453 	cfstrdmi	mvd5, [r5, #-332]	; 0xfffffeb4
    1658:	6c637300 	stclvs	3, cr7, [r3], #-0
    165c:	00747375 	rsbseq	r7, r4, r5, ror r3
    1660:	53464b4d 	movtpl	r4, #27469	; 0x6b4d
    1664:	5241505f 	subpl	r5, r1, #95	; 0x5f
    1668:	7363004d 	cmnvc	r3, #77	; 0x4d
    166c:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1670:	66746166 	ldrbtvs	r6, [r4], -r6, ror #2
    1674:	61745f73 	cmnvs	r4, r3, ror pc
    1678:	64006b73 	strvs	r6, [r0], #-2931	; 0xfffff48d
    167c:	61627269 	cmnvs	r2, r9, ror #4
    1680:	55006573 	strpl	r6, [r0, #-1395]	; 0xfffffa8d
    1684:	00544e49 	subseq	r4, r4, r9, asr #28
    1688:	626c6f76 	rsbvs	r6, ip, #472	; 0x1d8
    168c:	00657361 	rsbeq	r7, r5, r1, ror #6
    1690:	4d5f5246 	lfmmi	f5, 2, [pc, #-280]	; 1580 <_start-0xea80>
    1694:	5f53464b 	svcpl	0x0053464b
    1698:	524f4241 	subpl	r4, pc, #268435460	; 0x10000004
    169c:	00444554 	subeq	r4, r4, r4, asr r5
    16a0:	5f746d66 	svcpl	0x00746d66
    16a4:	0074706f 	rsbseq	r7, r4, pc, rrx
    16a8:	4e5f5246 	cdpmi	2, 5, cr5, cr15, cr6, {2}
    16ac:	525f544f 	subspl	r5, pc, #1325400064	; 0x4f000000
    16b0:	59444145 	stmdbpl	r4, {r0, r2, r6, r8, lr}^
    16b4:	5f524600 	svcpl	0x00524600
    16b8:	54495257 	strbpl	r5, [r9], #-599	; 0xfffffda9
    16bc:	52505f45 	subspl	r5, r0, #276	; 0x114
    16c0:	4345544f 	movtmi	r5, #21583	; 0x544f
    16c4:	00444554 	subeq	r4, r4, r4, asr r5
    16c8:	524f5744 	subpl	r5, pc, #68, 14	; 0x1100000
    16cc:	73660044 	cmnvc	r6, #68	; 0x44
    16d0:	6c665f69 	stclvs	15, cr5, [r6], #-420	; 0xfffffe5c
    16d4:	66006761 	strvs	r6, [r0], -r1, ror #14
    16d8:	5f656572 	svcpl	0x00656572
    16dc:	73756c63 	cmnvc	r5, #25344	; 0x6300
    16e0:	52460074 	subpl	r0, r6, #116	; 0x74
    16e4:	5349445f 	movtpl	r4, #37983	; 0x945f
    16e8:	52455f4b 	subpl	r5, r5, #300	; 0x12c
    16ec:	46460052 			; <UNDEFINED> instruction: 0x46460052
    16f0:	494a424f 	stmdbmi	sl, {r0, r1, r2, r3, r6, r9, lr}^
    16f4:	66770044 	ldrbtvs	r0, [r7], -r4, asr #32
    16f8:	0067616c 	rsbeq	r6, r7, ip, ror #2
    16fc:	705f7366 	subsvc	r7, pc, r6, ror #6
    1700:	75007274 	strvc	r7, [r0, #-628]	; 0xfffffd8c
    1704:	33746e69 	cmncc	r4, #1680	; 0x690
    1708:	00745f32 	rsbseq	r5, r4, r2, lsr pc
    170c:	545f5246 	ldrbpl	r5, [pc], #-582	; 1714 <_start-0xe8ec>
    1710:	4d5f4f4f 	ldclmi	15, cr4, [pc, #-316]	; 15dc <_start-0xea24>
    1714:	5f594e41 	svcpl	0x00594e41
    1718:	4e45504f 	cdpmi	0, 4, cr5, cr5, cr15, {2}
    171c:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
    1720:	64005345 	strvs	r5, [r0], #-837	; 0xfffffcbb
    1724:	62617461 	rsbvs	r7, r1, #1627389952	; 0x61000000
    1728:	00657361 	rsbeq	r7, r5, r1, ror #6
    172c:	7473616c 	ldrbtvc	r6, [r3], #-364	; 0xfffffe94
    1730:	736c635f 	cmnvc	ip, #2080374785	; 0x7c000001
    1734:	52460074 	subpl	r0, r6, #116	; 0x74
    1738:	564e495f 			; <UNDEFINED> instruction: 0x564e495f
    173c:	44494c41 	strbmi	r4, [r9], #-3137	; 0xfffff3bf
    1740:	5241505f 	subpl	r5, r1, #95	; 0x5f
    1744:	54454d41 	strbpl	r4, [r5], #-3393	; 0xfffff2bf
    1748:	66005245 	strvs	r5, [r0], -r5, asr #4
    174c:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    1750:	5f524600 	svcpl	0x00524600
    1754:	5f544f4e 	svcpl	0x00544f4e
    1758:	42414e45 	submi	r4, r1, #1104	; 0x450
    175c:	0044454c 	subeq	r4, r4, ip, asr #10
    1760:	5f726964 	svcpl	0x00726964
    1764:	00727470 	rsbseq	r7, r2, r0, ror r4
    1768:	7a697366 	bvc	1a5e508 <__bss_end+0x1930ea8>
    176c:	52460065 	subpl	r0, r6, #101	; 0x65
    1770:	4958455f 	ldmdbmi	r8, {r0, r1, r2, r3, r4, r6, r8, sl, lr}^
    1774:	66005453 			; <UNDEFINED> instruction: 0x66005453
    1778:	61627461 	cmnvs	r2, r1, ror #8
    177c:	6f006573 	svcvs	0x00006573
    1780:	69736a62 	ldmdbvs	r3!, {r1, r5, r6, r9, fp, sp, lr}^
    1784:	6600657a 			; <UNDEFINED> instruction: 0x6600657a
    1788:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    178c:	46006269 	strmi	r6, [r0], -r9, ror #4
    1790:	455a4953 	ldrbmi	r4, [sl, #-2387]	; 0xfffff6ad
    1794:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
    1798:	49545f52 	ldmdbmi	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    179c:	554f454d 	strbpl	r4, [pc, #-1357]	; 1257 <_start-0xeda9>
    17a0:	75620054 	strbvc	r0, [r2, #-84]!	; 0xffffffac
    17a4:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    17a8:	54414600 	strbpl	r4, [r1], #-1536	; 0xfffffa00
    17ac:	2f005346 	svccs	0x00005346
    17b0:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    17b4:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
    17b8:	2f796361 	svccs	0x00796361
    17bc:	61786548 	cmnvs	r8, r8, asr #10
    17c0:	2f686372 	svccs	0x00686372
    17c4:	2f637273 	svccs	0x00637273
    17c8:	70736152 	rsbsvc	r6, r3, r2, asr r1
    17cc:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    17d0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    17d4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    17d8:	534f5452 	movtpl	r5, #62546	; 0xf452
    17dc:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
    17e0:	442f5346 	strtmi	r5, [pc], #-838	; 17e8 <_start-0xe818>
    17e4:	2f6f6d65 	svccs	0x006f6d65
    17e8:	6e69616d 	powvsez	f6, f1, #5.0
    17ec:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
    17f0:	61737365 	cmnvs	r3, r5, ror #6
    17f4:	46006567 	strmi	r6, [r0], -r7, ror #10
    17f8:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0xfffffaae
    17fc:	6100544c 	tstvs	r0, ip, asr #8
    1800:	69735f75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
    1804:	6e00657a 	cfrshl64vs	mvdx0, mvdx10, r6
    1808:	7461665f 	strbtvc	r6, [r1], #-1631	; 0xfffff9a1
    180c:	5f524600 	svcpl	0x00524600
    1810:	465f4f4e 	ldrbmi	r4, [pc], -lr, asr #30
    1814:	00454c49 	subeq	r4, r5, r9, asr #24
    1818:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    181c:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
    1820:	5f363174 	svcpl	0x00363174
    1824:	5f6e0074 	svcpl	0x006e0074
    1828:	746f6f72 	strbtvc	r6, [pc], #-3954	; 1830 <_start-0xe7d0>
    182c:	00726964 	rsbseq	r6, r2, r4, ror #18
    1830:	6b736174 	blvs	1cd9e08 <__bss_end+0x1bac7a8>
    1834:	61740031 	cmnvs	r4, r1, lsr r0
    1838:	00326b73 	eorseq	r6, r2, r3, ror fp
    183c:	67696c61 	strbvs	r6, [r9, -r1, ror #24]!
    1840:	6175006e 	cmnvs	r5, lr, rrx
    1844:	705f7472 	subsvc	r7, pc, r2, ror r4	; <UNPREDICTABLE>
    1848:	00737475 	rsbseq	r7, r3, r5, ror r4
    184c:	61665f6e 	cmnvs	r6, lr, ror #30
    1850:	66007374 			; <UNDEFINED> instruction: 0x66007374
    1854:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    1858:	72617500 	rsbvc	r7, r1, #0, 10
    185c:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
    1860:	46006374 			; <UNDEFINED> instruction: 0x46006374
    1864:	4e495f52 	mcrmi	15, 2, r5, cr9, cr2, {2}
    1868:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
    186c:	52445f44 	subpl	r5, r4, #68, 30	; 0x110
    1870:	00455649 	subeq	r5, r5, r9, asr #12
    1874:	4c5f5246 	lfmmi	f5, 2, [pc], {70}	; 0x46
    1878:	454b434f 	strbmi	r4, [fp, #-847]	; 0xfffffcb1
    187c:	69770044 	ldmdbvs	r7!, {r2, r6}^
    1880:	6365736e 	cmnvs	r5, #-1207959551	; 0xb8000001
    1884:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
    1888:	65735f72 	ldrbvs	r5, [r3, #-3954]!	; 0xfffff08e
    188c:	75007463 	strvc	r7, [r0, #-1123]	; 0xfffffb9d
    1890:	5f747261 	svcpl	0x00747261
    1894:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
    1898:	756e5f74 	strbvc	r5, [lr, #-3956]!	; 0xfffff08c
    189c:	5246006d 	subpl	r0, r6, #109	; 0x6d
    18a0:	544f4e5f 	strbpl	r4, [pc], #-3679	; 18a8 <_start-0xe758>
    18a4:	4f4e455f 	svcmi	0x004e455f
    18a8:	5f484755 	svcpl	0x00484755
    18ac:	45524f43 	ldrbmi	r4, [r2, #-3907]	; 0xfffff0bd
    18b0:	4c494600 	mcrrmi	6, 0, r4, r9, cr0
    18b4:	4f464e49 	svcmi	0x00464e49
    18b8:	5f524600 	svcpl	0x00524600
    18bc:	41564e49 	cmpmi	r6, r9, asr #28
    18c0:	5f44494c 	svcpl	0x0044494c
    18c4:	454d414e 	strbmi	r4, [sp, #-334]	; 0xfffffeb2
    18c8:	74706400 	ldrbtvc	r6, [r0], #-1024	; 0xfffffc00
    18cc:	646c0072 	strbtvs	r0, [ip], #-114	; 0xffffff8e
    18d0:	64007672 	strvs	r7, [r0], #-1650	; 0xfffff98e
    18d4:	665f7269 	ldrbvs	r7, [pc], -r9, ror #4
    18d8:	00646e69 	rsbeq	r6, r4, r9, ror #28
    18dc:	5f726964 	svcpl	0x00726964
    18e0:	6f6d6572 	svcvs	0x006d6572
    18e4:	72006576 	andvc	r6, r0, #494927872	; 0x1d800000
    18e8:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
    18ec:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    18f0:	006e6961 	rsbeq	r6, lr, r1, ror #18
    18f4:	72617069 	rsbvc	r7, r1, #105	; 0x69
    18f8:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    18fc:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
    1900:	7a730064 	bvc	1cc1a98 <__bss_end+0x1b94438>
    1904:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    1908:	5f7a7300 	svcpl	0x007a7300
    190c:	00726964 	rsbseq	r6, r2, r4, ror #18
    1910:	6c635f66 	stclvs	15, cr5, [r3], #-408	; 0xfffffe68
    1914:	0065736f 	rsbeq	r7, r5, pc, ror #6
    1918:	66756277 			; <UNDEFINED> instruction: 0x66756277
    191c:	6f6d0066 	svcvs	0x006d0066
    1920:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
    1924:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    1928:	5f660061 	svcpl	0x00660061
    192c:	6e757274 	mrcvs	2, 3, r7, cr5, cr4, {3}
    1930:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    1934:	756f6d00 	strbvc	r6, [pc, #-3328]!	; c3c <_start-0xf3c4>
    1938:	765f746e 	ldrbvc	r7, [pc], -lr, ror #8
    193c:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
    1940:	61660065 	cmnvs	r6, r5, rrx
    1944:	00736674 	rsbseq	r6, r3, r4, ror r6
    1948:	33747363 	cmncc	r4, #-1946157055	; 0x8c000001
    194c:	65640032 	strbvs	r0, [r4, #-50]!	; 0xffffffce
    1950:	74706f66 	ldrbtvc	r6, [r0], #-3942	; 0xfffff09a
    1954:	75626900 	strbvc	r6, [r2, #-2304]!	; 0xfffff700
    1958:	636e0066 	cmnvs	lr, #102	; 0x66
    195c:	0074736c 	rsbseq	r7, r4, ip, ror #6
    1960:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    1964:	61700073 	cmnvs	r0, r3, ror r0
    1968:	6f5f6874 	svcvs	0x005f6874
    196c:	6300646c 	movwvs	r6, #1132	; 0x46c
    1970:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    1974:	61705f65 	cmnvs	r0, r5, ror #30
    1978:	74697472 	strbtvc	r7, [r9], #-1138	; 0xfffffb8e
    197c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1980:	5f72626d 	svcpl	0x0072626d
    1984:	64007470 	strvs	r7, [r0], #-1136	; 0xfffffb90
    1988:	635f7269 	cmpvs	pc, #-1879048186	; 0x90000006
    198c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1990:	6d5f6600 	ldclvs	6, cr6, [pc, #-0]	; 1998 <_start-0xe668>
    1994:	0073666b 	rsbseq	r6, r3, fp, ror #12
    1998:	6e755f66 	cdpvs	15, 7, cr5, cr5, cr6, {3}
    199c:	6b6e696c 	blvs	1b9bf54 <__bss_end+0x1a6e8f4>
    19a0:	5f7a7300 	svcpl	0x007a7300
    19a4:	00767372 	rsbseq	r7, r6, r2, ror r3
    19a8:	6e655f6e 	cdpvs	15, 6, cr5, cr5, cr14, {3}
    19ac:	5f660074 	svcpl	0x00660074
    19b0:	69646b6d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, fp, sp, lr}^
    19b4:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
    19b8:	756c635f 	strbvc	r6, [ip, #-863]!	; 0xfffffca1
    19bc:	73007473 	movwvc	r7, #1139	; 0x473
    19c0:	75615f7a 	strbvc	r5, [r1, #-3962]!	; 0xfffff086
    19c4:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    19c8:	7461665f 	strbtvc	r6, [r1], #-1631	; 0xfffff9a1
    19cc:	6f5f6600 	svcvs	0x005f6600
    19d0:	006e6570 	rsbeq	r6, lr, r0, ror r5
    19d4:	665f7a73 			; <UNDEFINED> instruction: 0x665f7a73
    19d8:	66007461 	strvs	r7, [r0], -r1, ror #8
    19dc:	6f6c6c6f 	svcvs	0x006c6c6f
    19e0:	61705f77 	cmnvs	r0, r7, ror pc
    19e4:	6d006874 	stcvs	8, cr6, [r0, #-464]	; 0xfffffe30
    19e8:	5f65766f 	svcpl	0x0065766f
    19ec:	646e6977 	strbtvs	r6, [lr], #-2423	; 0xfffff689
    19f0:	6900776f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}
    19f4:	72747066 	rsbsvc	r7, r4, #102	; 0x66
    19f8:	735f6e00 	cmpvc	pc, #0, 28
    19fc:	6f730063 	svcvs	0x00730063
    1a00:	67006a62 	strvs	r6, [r0, -r2, ror #20]
    1a04:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
    1a08:	69656c69 	stmdbvs	r5!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    1a0c:	006f666e 	rsbeq	r6, pc, lr, ror #12
    1a10:	5f747570 	svcpl	0x00747570
    1a14:	00746166 	rsbseq	r6, r4, r6, ror #2
    1a18:	63656863 	cmnvs	r5, #6488064	; 0x630000
    1a1c:	73665f6b 	cmnvc	r6, #428	; 0x1ac
    1a20:	6c5f6600 	mrrcvs	6, 0, r6, pc, cr0	; <UNPREDICTABLE>
    1a24:	6b656573 	blvs	195aff8 <__bss_end+0x182d998>
    1a28:	5f646c00 	svcpl	0x00646c00
    1a2c:	726f7764 	rsbvc	r7, pc, #100, 14	; 0x1900000
    1a30:	61700064 	cmnvs	r0, r4, rrx
    1a34:	6e5f6874 	mrcvs	8, 2, r6, cr15, cr4, {3}
    1a38:	6e007765 	cdpvs	7, 0, cr7, cr0, cr5, {3}
    1a3c:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    1a40:	6f5f6600 	svcvs	0x005f6600
    1a44:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    1a48:	66007269 	strvs	r7, [r0], -r9, ror #4
    1a4c:	6165725f 	cmnvs	r5, pc, asr r2
    1a50:	73740064 	cmnvc	r4, #100	; 0x64
    1a54:	00746365 	rsbseq	r6, r4, r5, ror #6
    1a58:	5f534552 	svcpl	0x00534552
    1a5c:	4f525245 	svcmi	0x00525245
    1a60:	73630052 	cmnvc	r3, #82	; 0x52
    1a64:	00746365 	rsbseq	r6, r4, r5, ror #6
    1a68:	625f7a73 	subsvs	r7, pc, #471040	; 0x73000
    1a6c:	64006b6c 	strvs	r6, [r0], #-2924	; 0xfffff494
    1a70:	725f7269 	subsvc	r7, pc, #-1879048186	; 0x90000006
    1a74:	00646165 	rsbeq	r6, r4, r5, ror #2
    1a78:	69736166 	ldmdbvs	r3!, {r1, r2, r5, r6, r8, sp, lr}^
    1a7c:	6600657a 			; <UNDEFINED> instruction: 0x6600657a
    1a80:	6e65725f 	mcrvs	2, 3, r7, cr5, cr15, {2}
    1a84:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1a88:	736c6370 	cmnvc	ip, #112, 6	; 0xc0000001
    1a8c:	5f660074 	svcpl	0x00660074
    1a90:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1a94:	786e0065 	stmdavc	lr!, {r0, r2, r5, r6}^
    1a98:	6c615f74 	stclvs	15, cr5, [r1], #-464	; 0xfffffe30
    1a9c:	33636f6c 	cmncc	r3, #108, 30	; 0x1b0
    1aa0:	7a730032 	bvc	1cc1b70 <__bss_end+0x1b94510>
    1aa4:	74616662 	strbtvc	r6, [r1], #-1634	; 0xfffff99e
    1aa8:	69734600 	ldmdbvs	r3!, {r9, sl, lr}^
    1aac:	45520064 	ldrbmi	r0, [r2, #-100]	; 0xffffff9c
    1ab0:	41505f53 	cmpmi	r0, r3, asr pc
    1ab4:	52524552 	subspl	r4, r2, #343932928	; 0x14800000
    1ab8:	43784500 	cmnmi	r8, #0, 10
    1abc:	6c007476 	cfstrsvs	mvf7, [r0], {118}	; 0x76
    1ac0:	6f775f64 	svcvs	0x00775f64
    1ac4:	66006472 			; <UNDEFINED> instruction: 0x66006472
    1ac8:	5f646e69 	svcpl	0x00646e69
    1acc:	756c6f76 	strbvc	r6, [ip, #-3958]!	; 0xfffff08a
    1ad0:	5200656d 	andpl	r6, r0, #457179136	; 0x1b400000
    1ad4:	575f5345 	ldrbpl	r5, [pc, -r5, asr #6]
    1ad8:	54525052 	ldrbpl	r5, [r2], #-82	; 0xffffffae
    1adc:	6f682f00 	svcvs	0x00682f00
    1ae0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 1934 <_start-0xe6cc>
    1ae4:	63616e75 	cmnvs	r1, #1872	; 0x750
    1ae8:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    1aec:	63726178 	cmnvs	r2, #120, 2
    1af0:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    1af4:	61522f63 	cmpvs	r2, r3, ror #30
    1af8:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1afc:	50797272 	rsbspl	r7, r9, r2, ror r2
    1b00:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1b04:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1b08:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    1b0c:	53467461 	movtpl	r7, #25697	; 0x6461
    1b10:	7461462f 	strbtvc	r4, [r1], #-1583	; 0xfffff9d1
    1b14:	532f5346 			; <UNDEFINED> instruction: 0x532f5346
    1b18:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1b1c:	66662f65 	strbtvs	r2, [r6], -r5, ror #30
    1b20:	6300632e 	movwvs	r6, #814	; 0x32e
    1b24:	3274736c 	rsbscc	r7, r4, #108, 6	; 0xb0000001
    1b28:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
    1b2c:	5f7a7300 	svcpl	0x007a7300
    1b30:	74726170 	ldrbtvc	r6, [r2], #-368	; 0xfffffe90
    1b34:	73003233 	movwvc	r3, #563	; 0x233
    1b38:	6f765f7a 	svcvs	0x00765f7a
    1b3c:	5f6e006c 	svcpl	0x006e006c
    1b40:	66006468 	strvs	r6, [r0], -r8, ror #8
    1b44:	6165725f 	cmnvs	r5, pc, asr r2
    1b48:	72696464 	rsbvc	r6, r9, #100, 8	; 0x64000000
    1b4c:	6d657200 	sfmvs	f7, 2, [r5, #-0]
    1b50:	006e6961 	rsbeq	r6, lr, r1, ror #18
    1b54:	5f726964 	svcpl	0x00726964
    1b58:	6f6c6c61 	svcvs	0x006c6c61
    1b5c:	5f6e0063 	svcpl	0x006e0063
    1b60:	74736c63 	ldrbtvc	r6, [r3], #-3171	; 0xfffff39d
    1b64:	5f7a7300 	svcpl	0x007a7300
    1b68:	00767264 	rsbseq	r7, r6, r4, ror #4
    1b6c:	6f6d5f66 	svcvs	0x006d5f66
    1b70:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1b74:	74736c70 	ldrbtvc	r6, [r3], #-3184	; 0xfffff390
    1b78:	72696400 	rsbvc	r6, r9, #0, 8
    1b7c:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    1b80:	63640074 	cmnvs	r4, #116	; 0x74
    1b84:	0074736c 	rsbseq	r7, r4, ip, ror #6
    1b88:	746e6377 	strbtvc	r6, [lr], #-887	; 0xfffffc89
    1b8c:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
    1b90:	5f66006e 	svcpl	0x0066006e
    1b94:	66746567 	ldrbtvs	r6, [r4], -r7, ror #10
    1b98:	00656572 	rsbeq	r6, r5, r2, ror r5
    1b9c:	79747366 	ldmdbvc	r4!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}^
    1ba0:	65726300 	ldrbvs	r6, [r2, #-768]!	; 0xfffffd00
    1ba4:	5f657461 	svcpl	0x00657461
    1ba8:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    1bac:	735f6600 	cmpvc	pc, #0, 12
    1bb0:	00636e79 	rsbeq	r6, r3, r9, ror lr
    1bb4:	6f765f62 	svcvs	0x00765f62
    1bb8:	6272006c 	rsbsvs	r0, r2, #108	; 0x6c
    1bbc:	00666675 	rsbeq	r6, r6, r5, ror r6
    1bc0:	63657362 	cmnvs	r5, #-2013265919	; 0x88000001
    1bc4:	72630074 	rsbvc	r0, r3, #116	; 0x74
    1bc8:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    1bcc:	6168635f 	cmnvs	r8, pc, asr r3
    1bd0:	73006e69 	movwvc	r6, #3689	; 0xe69
    1bd4:	72645f7a 	rsbvc	r5, r4, #488	; 0x1e8
    1bd8:	00323376 	eorseq	r3, r2, r6, ror r3
    1bdc:	746e6372 	strbtvc	r6, [lr], #-882	; 0xfffffc8e
    1be0:	5f747300 	svcpl	0x00747300
    1be4:	726f7764 	rsbvc	r7, pc, #100, 14	; 0x1900000
    1be8:	79730064 	ldmdbvc	r3!, {r2, r5, r6}^
    1bec:	665f636e 	ldrbvs	r6, [pc], -lr, ror #6
    1bf0:	646c0073 	strbtvs	r0, [ip], #-115	; 0xffffff8d
    1bf4:	756c635f 	strbvc	r6, [ip, #-863]!	; 0xfffffca1
    1bf8:	64007473 	strvs	r7, [r0], #-1139	; 0xfffffb8d
    1bfc:	735f7269 	cmpvc	pc, #-1879048186	; 0x90000006
    1c00:	44006964 	strmi	r6, [r0], #-2404	; 0xfffff69c
    1c04:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    1c08:	67005355 	smlsdvs	r0, r5, r3, r5
    1c0c:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    1c10:	6d756e64 	ldclvs	14, cr6, [r5, #-400]!	; 0xfffffe70
    1c14:	00726562 	rsbseq	r6, r2, r2, ror #10
    1c18:	5f534552 	svcpl	0x00534552
    1c1c:	66004b4f 	strvs	r4, [r0], -pc, asr #22
    1c20:	74706f73 	ldrbtvc	r6, [r0], #-3955	; 0xfffff08d
    1c24:	635f6600 	cmpvs	pc, #0, 12
    1c28:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
    1c2c:	00726964 	rsbseq	r6, r2, r4, ror #18
    1c30:	5f636264 	svcpl	0x00636264
    1c34:	00646e32 	rsbeq	r6, r4, r2, lsr lr
    1c38:	5f534552 	svcpl	0x00534552
    1c3c:	52544f4e 	subspl	r4, r4, #312	; 0x138
    1c40:	62005944 	andvs	r5, r0, #68, 18	; 0x110000
    1c44:	7461665f 	strbtvc	r6, [r1], #-1631	; 0xfffff9a1
    1c48:	73726e00 	cmnvc	r2, #0, 28
    1c4c:	74730076 	ldrbtvc	r0, [r3], #-118	; 0xffffff8a
    1c50:	63746572 	cmnvs	r4, #478150656	; 0x1c800000
    1c54:	79730068 	ldmdbvc	r3!, {r3, r5, r6}^
    1c58:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
    1c5c:	63626400 	cmnvs	r2, #0, 8
    1c60:	7473315f 	ldrbtvc	r3, [r3], #-351	; 0xfffffea1
    1c64:	735f6600 	cmpvc	pc, #0, 12
    1c68:	00746174 	rsbseq	r6, r4, r4, ror r1
    1c6c:	5f726964 	svcpl	0x00726964
    1c70:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1c74:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1c78:	6e797300 	cdpvs	3, 7, cr7, cr9, cr0, {0}
    1c7c:	69775f63 	ldmdbvs	r7!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1c80:	776f646e 	strbvc	r6, [pc, -lr, ror #8]!
    1c84:	6c617600 	stclvs	6, cr7, [r1], #-0
    1c88:	74616469 	strbtvc	r6, [r1], #-1129	; 0xfffffb97
    1c8c:	6f630065 	svcvs	0x00630065
    1c90:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1c94:	75626564 	strbvc	r6, [r2, #-1380]!	; 0xfffffa9c
    1c98:	756f5f67 	strbvc	r5, [pc, #-3943]!	; d39 <_start-0xf2c7>
    1c9c:	74757074 	ldrbtvc	r7, [r5], #-116	; 0xffffff8c
    1ca0:	616e655f 	cmnvs	lr, pc, asr r5
    1ca4:	64656c62 	strbtvs	r6, [r5], #-3170	; 0xfffff39e
    1ca8:	73696400 	cmnvc	r9, #0, 8
    1cac:	6e695f6b 	cdpvs	15, 6, cr5, cr9, cr11, {3}
    1cb0:	61697469 	cmnvs	r9, r9, ror #8
    1cb4:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
    1cb8:	73696400 	cmnvc	r9, #0, 8
    1cbc:	74735f6b 	ldrbtvc	r5, [r3], #-3947	; 0xfffff095
    1cc0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
    1cc4:	73696400 	cmnvc	r9, #0, 8
    1cc8:	6e695f6b 	cdpvs	15, 6, cr5, cr9, cr11, {3}
    1ccc:	61697469 	cmnvs	r9, r9, ror #8
    1cd0:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
    1cd4:	74530064 	ldrbvc	r0, [r3], #-100	; 0xffffff9c
    1cd8:	64007461 	strvs	r7, [r0], #-1121	; 0xfffffb9f
    1cdc:	5f6b7369 	svcpl	0x006b7369
    1ce0:	74636f69 	strbtvc	r6, [r3], #-3945	; 0xfffff097
    1ce4:	6172006c 	cmnvs	r2, ip, rrx
    1ce8:	7369646d 	cmnvc	r9, #1828716544	; 0x6d000000
    1cec:	6964006b 	stmdbvs	r4!, {r0, r1, r3, r5, r6}^
    1cf0:	775f6b73 			; <UNDEFINED> instruction: 0x775f6b73
    1cf4:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
    1cf8:	6f682f00 	svcvs	0x00682f00
    1cfc:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 1b50 <_start-0xe4b0>
    1d00:	63616e75 	cmnvs	r1, #1872	; 0x750
    1d04:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    1d08:	63726178 	cmnvs	r2, #120, 2
    1d0c:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    1d10:	61522f63 	cmpvs	r2, r3, ror #30
    1d14:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1d18:	50797272 	rsbspl	r7, r9, r2, ror r2
    1d1c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1d20:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1d24:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    1d28:	53467461 	movtpl	r7, #25697	; 0x6461
    1d2c:	7461462f 	strbtvc	r4, [r1], #-1583	; 0xfffff9d1
    1d30:	532f5346 			; <UNDEFINED> instruction: 0x532f5346
    1d34:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1d38:	69642f65 	stmdbvs	r4!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
    1d3c:	6f696b73 	svcvs	0x00696b73
    1d40:	7300632e 	movwvc	r6, #814	; 0x32e
    1d44:	6f746365 	svcvs	0x00746365
    1d48:	52440072 	subpl	r0, r4, #114	; 0x72
    1d4c:	4c555345 	mrrcmi	3, 4, r5, r5, cr5	; <UNPREDICTABLE>
    1d50:	69640054 	stmdbvs	r4!, {r2, r4, r6}^
    1d54:	725f6b73 	subsvc	r6, pc, #117760	; 0x1cc00
    1d58:	00646165 	rsbeq	r6, r4, r5, ror #2
    1d5c:	5f746567 	svcpl	0x00746567
    1d60:	74746166 	ldrbtvc	r6, [r4], #-358	; 0xfffffe9a
    1d64:	00656d69 	rsbeq	r6, r5, r9, ror #26
    1d68:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1cb4 <_start-0xe34c>
    1d6c:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
    1d70:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    1d74:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    1d78:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1d7c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1d80:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    1d84:	72656270 	rsbvc	r6, r5, #112, 4
    1d88:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1d8c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    1d90:	4f545265 	svcmi	0x00545265
    1d94:	61462d53 	cmpvs	r6, r3, asr sp
    1d98:	2f534674 	svccs	0x00534674
    1d9c:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    1da0:	6f532f53 	svcvs	0x00532f53
    1da4:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1da8:	7366662f 	cmnvc	r6, #49283072	; 0x2f00000
    1dac:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    1db0:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    1db4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1d00 <_start-0xe300>
    1db8:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
    1dbc:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    1dc0:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    1dc4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1dc8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1dcc:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    1dd0:	72656270 	rsbvc	r6, r5, #112, 4
    1dd4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1dd8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    1ddc:	4f545265 	svcmi	0x00545265
    1de0:	61462d53 	cmpvs	r6, r3, asr sp
    1de4:	2f534674 	svccs	0x00534674
    1de8:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    1dec:	6f532f53 	svcvs	0x00532f53
    1df0:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1df4:	7566662f 	strbvc	r6, [r6, #-1583]!	; 0xfffff9d1
    1df8:	6f63696e 	svcvs	0x0063696e
    1dfc:	632e6564 			; <UNDEFINED> instruction: 0x632e6564
    1e00:	2f2e2e00 	svccs	0x002e2e00
    1e04:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1e08:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    1e0c:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    1e10:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    1e14:	2f676966 	svccs	0x00676966
    1e18:	2f6d7261 	svccs	0x006d7261
    1e1c:	3162696c 	cmncc	r2, ip, ror #18
    1e20:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
    1e24:	00532e73 	subseq	r2, r3, r3, ror lr
    1e28:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1e2c:	672f646c 	strvs	r6, [pc, -ip, ror #8]!
    1e30:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
    1e34:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1e38:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1e3c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1e40:	6659682d 	ldrbvs	r6, [r9], -sp, lsr #16
    1e44:	2f344b67 	svccs	0x00344b67
    1e48:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
    1e4c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    1e50:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    1e54:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    1e58:	30312d69 	eorscc	r2, r1, r9, ror #26
    1e5c:	322d332e 	eorcc	r3, sp, #-1207959552	; 0xb8000000
    1e60:	2e313230 	mrccs	2, 1, r3, cr1, cr0, {1}
    1e64:	622f3730 	eorvs	r3, pc, #48, 14	; 0xc00000
    1e68:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    1e6c:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1e70:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1e74:	61652d65 	cmnvs	r5, r5, ror #26
    1e78:	6c2f6962 			; <UNDEFINED> instruction: 0x6c2f6962
    1e7c:	63676269 	cmnvs	r7, #-1879048186	; 0x90000006
    1e80:	4e470063 	cdpmi	0, 4, cr0, cr7, cr3, {3}
    1e84:	53412055 	movtpl	r2, #4181	; 0x1055
    1e88:	332e3220 			; <UNDEFINED> instruction: 0x332e3220
    1e8c:	656d0037 	strbvs	r0, [sp, #-55]!	; 0xffffffc9
    1e90:	706d636d 	rsbvc	r6, sp, sp, ror #6
    1e94:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    1e98:	2f646c69 	svccs	0x00646c69
    1e9c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1ea0:	702d6269 	eorvc	r6, sp, r9, ror #4
    1ea4:	64303342 	ldrtvs	r3, [r0], #-834	; 0xfffffcbe
    1ea8:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    1eac:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1eb0:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    1eb4:	622f302e 	eorvs	r3, pc, #46	; 0x2e
    1eb8:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    1ebc:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1ec0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1ec4:	61652d65 	cmnvs	r5, r5, ror #26
    1ec8:	6e2f6962 	vnmulvs.f16	s12, s30, s5	; <UNPREDICTABLE>
    1ecc:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1ed0:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1ed4:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    1ed8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1edc:	2e2e0067 	cdpcs	0, 2, cr0, cr14, cr7, {3}
    1ee0:	2f2e2e2f 	svccs	0x002e2e2f
    1ee4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1ee8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1eec:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1ef0:	2f62696c 	svccs	0x0062696c
    1ef4:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    1ef8:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    1efc:	2f676e69 	svccs	0x00676e69
    1f00:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    1f04:	632e706d 			; <UNDEFINED> instruction: 0x632e706d
    1f08:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
    1f0c:	37314320 	ldrcc	r4, [r1, -r0, lsr #6]!
    1f10:	2e303120 	rsfcssp	f3, f0, f0
    1f14:	20312e33 	eorscs	r2, r1, r3, lsr lr
    1f18:	31323032 	teqcc	r2, r2, lsr r0
    1f1c:	31323630 	teqcc	r2, r0, lsr r6
    1f20:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
    1f24:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
    1f28:	2d202965 			; <UNDEFINED> instruction: 0x2d202965
    1f2c:	7570636d 	ldrbvc	r6, [r0, #-877]!	; 0xfffffc93
    1f30:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
    1f34:	6d647437 	cfstrdvs	mvd7, [r4, #-220]!	; 0xffffff24
    1f38:	6d2d2069 	stcvs	0, cr2, [sp, #-420]!	; 0xfffffe5c
    1f3c:	616f6c66 	cmnvs	pc, r6, ror #24
    1f40:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
    1f44:	6f733d69 	svcvs	0x00733d69
    1f48:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
    1f4c:	6d72616d 	ldfvse	f6, [r2, #-436]!	; 0xfffffe4c
    1f50:	616d2d20 	cmnvs	sp, r0, lsr #26
    1f54:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
    1f58:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
    1f5c:	2d207434 	cfstrscs	mvf7, [r0, #-208]!	; 0xffffff30
    1f60:	4f2d2067 	svcmi	0x002d2067
    1f64:	662d2032 			; <UNDEFINED> instruction: 0x662d2032
    1f68:	622d6f6e 	eorvs	r6, sp, #440	; 0x1b8
    1f6c:	746c6975 	strbtvc	r6, [ip], #-2421	; 0xfffff68b
    1f70:	73006e69 	movwvc	r6, #3689	; 0xe69
    1f74:	00306372 	eorseq	r6, r0, r2, ror r3
    1f78:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1f7c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1f80:	2f2e2e2f 	svccs	0x002e2e2f
    1f84:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1f88:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    1f8c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1f90:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1f94:	616d2f63 	cmnvs	sp, r3, ror #30
    1f98:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
    1f9c:	72612f65 	rsbvc	r2, r1, #404	; 0x194
    1fa0:	656d2f6d 	strbvs	r2, [sp, #-3949]!	; 0xfffff093
    1fa4:	7970636d 	ldmdbvc	r0!, {r0, r2, r3, r5, r6, r8, r9, sp, lr}^
    1fa8:	7574732d 	ldrbvc	r7, [r4, #-813]!	; 0xfffffcd3
    1fac:	00632e62 	rsbeq	r2, r3, r2, ror #28
    1fb0:	30747364 	rsbscc	r7, r4, r4, ror #6
    1fb4:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    1fb8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    1fbc:	7473645f 	ldrbtvc	r6, [r3], #-1119	; 0xfffffba1
    1fc0:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    1fc4:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    1fc8:	6372735f 	cmnvs	r2, #2080374785	; 0x7c000001
    1fcc:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    1fd0:	00797063 	rsbseq	r7, r9, r3, rrx
    1fd4:	306e656c 	rsbcc	r6, lr, ip, ror #10
    1fd8:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    1fdc:	2f646c69 	svccs	0x00646c69
    1fe0:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1fe4:	702d6269 	eorvc	r6, sp, r9, ror #4
    1fe8:	64303342 	ldrtvs	r3, [r0], #-834	; 0xfffffcbe
    1fec:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    1ff0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1ff4:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    1ff8:	622f302e 	eorvs	r3, pc, #46	; 0x2e
    1ffc:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    2000:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    2004:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    2008:	61652d65 	cmnvs	r5, r5, ror #26
    200c:	6e2f6962 	vnmulvs.f16	s12, s30, s5	; <UNPREDICTABLE>
    2010:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2014:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2018:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 1e98 <_start-0xe168>
    201c:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2020:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    2024:	61006d72 	tstvs	r0, r2, ror sp
    2028:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    202c:	615f6465 	cmpvs	pc, r5, ror #8
    2030:	00726464 	rsbseq	r6, r2, r4, ror #8
    2034:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2038:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    203c:	2f2e2e2f 	svccs	0x002e2e2f
    2040:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    2044:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    2048:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    204c:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    2050:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    2054:	656d2f67 	strbvs	r2, [sp, #-3943]!	; 0xfffff099
    2058:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
    205c:	6d00632e 	stcvs	3, cr6, [r0, #-184]	; 0xffffff48
    2060:	65736d65 	ldrbvs	r6, [r3, #-3429]!	; 0xfffff29b
    2064:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    2068:	72686372 	rsbvc	r6, r8, #-939524095	; 0xc8000001
    206c:	2f2e2e00 	svccs	0x002e2e00
    2070:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2074:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2078:	2f2e2e2f 	svccs	0x002e2e2f
    207c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2080:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1ee4 <_start-0xe11c>
    2084:	2f636269 	svccs	0x00636269
    2088:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    208c:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
    2090:	68637274 	stmdavs	r3!, {r2, r4, r5, r6, r9, ip, sp, lr}^
    2094:	00632e72 	rsbeq	r2, r3, r2, ror lr
    2098:	6c727473 	cfldrdvs	mvd7, [r2], #-460	; 0xfffffe34
    209c:	2e006e65 	cdpcs	14, 0, cr6, cr0, cr5, {3}
    20a0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    20a4:	2f2e2e2f 	svccs	0x002e2e2f
    20a8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    20ac:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    20b0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    20b4:	2f62696c 	svccs	0x0062696c
    20b8:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    20bc:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    20c0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    20c4:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    20c8:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    20cc:	2d6e656c 	cfstr64cs	mvdx6, [lr, #-432]!	; 0xfffffe50
    20d0:	62757473 	rsbsvs	r7, r5, #1929379840	; 0x73000000
    20d4:	7300632e 	movwvc	r6, #814	; 0x32e
    20d8:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    20dc:	2e007970 			; <UNDEFINED> instruction: 0x2e007970
    20e0:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    20e4:	2f2e2e2f 	svccs	0x002e2e2f
    20e8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    20ec:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    20f0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    20f4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    20f8:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    20fc:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    2100:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    2104:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2108:	Address 0x0000000000002108 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end+0xfa36c4>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	2e30313a 	mrccs	1, 1, r3, cr0, cr10, {1}
   c:	30322d33 	eorscc	r2, r2, r3, lsr sp
  10:	302e3132 	eorcc	r3, lr, r2, lsr r1
  14:	29342d37 	ldmdbcs	r4!, {r0, r1, r2, r4, r5, r8, sl, fp, sp}
  18:	2e303120 	rsfcssp	f3, f0, f0
  1c:	20312e33 	eorscs	r2, r1, r3, lsr lr
  20:	31323032 	teqcc	r2, r2, lsr r0
  24:	31323630 	teqcc	r2, r0, lsr r6
  28:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  2c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	; 0xfffffef7
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			; <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	00020000 	andeq	r0, r2, r0
      1c:	00000240 	andeq	r0, r0, r0, asr #4
      20:	8b040e42 	blhi	103930 <ramdisk+0xd62d8>
      24:	0b0d4201 	bleq	350830 <__bss_end+0x2231d0>
      28:	0d0dfe02 	stceq	14, cr15, [sp, #-8]
      2c:	000ecb42 	andeq	ip, lr, r2, asr #22
      30:	00000018 	andeq	r0, r0, r8, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	00020240 	andeq	r0, r2, r0, asr #4
      3c:	0000001c 	andeq	r0, r0, ip, lsl r0
      40:	8b080e42 	blhi	203950 <__bss_end+0xd62f0>
      44:	42018e02 	andmi	r8, r1, #2, 28
      48:	00040b0c 	andeq	r0, r4, ip, lsl #22
      4c:	0000001c 	andeq	r0, r0, ip, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	0002025c 	andeq	r0, r2, ip, asr r2
      58:	00000018 	andeq	r0, r0, r8, lsl r0
      5c:	8b040e42 	blhi	10396c <ramdisk+0xd6314>
      60:	0b0d4201 	bleq	35086c <__bss_end+0x22320c>
      64:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
      68:	00000ecb 	andeq	r0, r0, fp, asr #29
      6c:	0000001c 	andeq	r0, r0, ip, lsl r0
      70:	00000000 	andeq	r0, r0, r0
      74:	00020274 	andeq	r0, r2, r4, ror r2
      78:	00000038 	andeq	r0, r0, r8, lsr r0
      7c:	8b080e42 	blhi	20398c <__bss_end+0xd632c>
      80:	42018e02 	andmi	r8, r1, #2, 28
      84:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
      88:	00080d0c 	andeq	r0, r8, ip, lsl #26
      8c:	0000001c 	andeq	r0, r0, ip, lsl r0
      90:	00000000 	andeq	r0, r0, r0
      94:	000202ac 	andeq	r0, r2, ip, lsr #5
      98:	00000098 	muleq	r0, r8, r0
      9c:	8b080e42 	blhi	2039ac <__bss_end+0xd634c>
      a0:	42018e02 	andmi	r8, r1, #2, 28
      a4:	7e040b0c 	vmlavc.f64	d0, d4, d12
      a8:	00080d0c 	andeq	r0, r8, ip, lsl #26
      ac:	0000000c 	andeq	r0, r0, ip
      b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      b4:	7c020001 	stcvc	0, cr0, [r2], {1}
      b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      bc:	0000001c 	andeq	r0, r0, ip, lsl r0
      c0:	000000ac 	andeq	r0, r0, ip, lsr #1
      c4:	00020344 	andeq	r0, r2, r4, asr #6
      c8:	00000098 	muleq	r0, r8, r0
      cc:	8b040e42 	blhi	1039dc <ramdisk+0xd6384>
      d0:	0b0d4201 	bleq	3508dc <__bss_end+0x22327c>
      d4:	420d0d7e 	andmi	r0, sp, #8064	; 0x1f80
      d8:	00000ecb 	andeq	r0, r0, fp, asr #29
      dc:	0000000c 	andeq	r0, r0, ip
      e0:	000000ac 	andeq	r0, r0, ip, lsr #1
      e4:	000203dc 	ldrdeq	r0, [r2], -ip
      e8:	000000b4 	strheq	r0, [r0], -r4
      ec:	0000000c 	andeq	r0, r0, ip
      f0:	000000ac 	andeq	r0, r0, ip, lsr #1
      f4:	00020490 	muleq	r2, r0, r4
      f8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     100:	000000ac 	andeq	r0, r0, ip, lsr #1
     104:	00020540 	andeq	r0, r2, r0, asr #10
     108:	00000044 	andeq	r0, r0, r4, asr #32
     10c:	8b040e42 	blhi	103a1c <ramdisk+0xd63c4>
     110:	0b0d4201 	bleq	35091c <__bss_end+0x2232bc>
     114:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
     118:	00000ecb 	andeq	r0, r0, fp, asr #29
     11c:	0000001c 	andeq	r0, r0, ip, lsl r0
     120:	000000ac 	andeq	r0, r0, ip, lsr #1
     124:	00020584 	andeq	r0, r2, r4, lsl #11
     128:	00000064 	andeq	r0, r0, r4, rrx
     12c:	8b040e42 	blhi	103a3c <ramdisk+0xd63e4>
     130:	0b0d4201 	bleq	35093c <__bss_end+0x2232dc>
     134:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     138:	00000ecb 	andeq	r0, r0, fp, asr #29
     13c:	0000000c 	andeq	r0, r0, ip
     140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     144:	7c020001 	stcvc	0, cr0, [r2], {1}
     148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     14c:	0000001c 	andeq	r0, r0, ip, lsl r0
     150:	0000013c 	andeq	r0, r0, ip, lsr r1
     154:	000205f0 	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
     158:	00000168 	andeq	r0, r0, r8, ror #2
     15c:	8b080e42 	blhi	203a6c <__bss_end+0xd640c>
     160:	42018e02 	andmi	r8, r1, #2, 28
     164:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     168:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
     16c:	0000001c 	andeq	r0, r0, ip, lsl r0
     170:	0000013c 	andeq	r0, r0, ip, lsr r1
     174:	00020758 	andeq	r0, r2, r8, asr r7
     178:	000000e4 	andeq	r0, r0, r4, ror #1
     17c:	8b080e42 	blhi	203a8c <__bss_end+0xd642c>
     180:	42018e02 	andmi	r8, r1, #2, 28
     184:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     188:	080d0c64 	stmdaeq	sp, {r2, r5, r6, sl, fp}
     18c:	0000001c 	andeq	r0, r0, ip, lsl r0
     190:	0000013c 	andeq	r0, r0, ip, lsr r1
     194:	0002083c 	andeq	r0, r2, ip, lsr r8
     198:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     19c:	8b080e42 	blhi	203aac <__bss_end+0xd644c>
     1a0:	42018e02 	andmi	r8, r1, #2, 28
     1a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     1a8:	080d0c6c 	stmdaeq	sp, {r2, r3, r5, r6, sl, fp}
     1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b0:	0000013c 	andeq	r0, r0, ip, lsr r1
     1b4:	0002092c 	andeq	r0, r2, ip, lsr #18
     1b8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1bc:	8b080e42 	blhi	203acc <__bss_end+0xd646c>
     1c0:	42018e02 	andmi	r8, r1, #2, 28
     1c4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     1c8:	080d0cd4 	stmdaeq	sp, {r2, r4, r6, r7, sl, fp}
     1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d0:	0000013c 	andeq	r0, r0, ip, lsr r1
     1d4:	00020afc 	strdeq	r0, [r2], -ip
     1d8:	00000124 	andeq	r0, r0, r4, lsr #2
     1dc:	8b080e42 	blhi	203aec <__bss_end+0xd648c>
     1e0:	42018e02 	andmi	r8, r1, #2, 28
     1e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     1e8:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
     1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f0:	0000013c 	andeq	r0, r0, ip, lsr r1
     1f4:	00020c20 	andeq	r0, r2, r0, lsr #24
     1f8:	000000a8 	andeq	r0, r0, r8, lsr #1
     1fc:	8b080e42 	blhi	203b0c <__bss_end+0xd64ac>
     200:	42018e02 	andmi	r8, r1, #2, 28
     204:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     208:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     20c:	0000001c 	andeq	r0, r0, ip, lsl r0
     210:	0000013c 	andeq	r0, r0, ip, lsr r1
     214:	00020cc8 	andeq	r0, r2, r8, asr #25
     218:	0000008c 	andeq	r0, r0, ip, lsl #1
     21c:	8b080e42 	blhi	203b2c <__bss_end+0xd64cc>
     220:	42018e02 	andmi	r8, r1, #2, 28
     224:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
     228:	00080d0c 	andeq	r0, r8, ip, lsl #26
     22c:	0000000c 	andeq	r0, r0, ip
     230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     234:	7c020001 	stcvc	0, cr0, [r2], {1}
     238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     23c:	0000001c 	andeq	r0, r0, ip, lsl r0
     240:	0000022c 	andeq	r0, r0, ip, lsr #4
     244:	00020d54 	andeq	r0, r2, r4, asr sp
     248:	00000068 	andeq	r0, r0, r8, rrx
     24c:	8b040e42 	blhi	103b5c <ramdisk+0xd6504>
     250:	0b0d4201 	bleq	350a5c <__bss_end+0x2233fc>
     254:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
     258:	00000ecb 	andeq	r0, r0, fp, asr #29
     25c:	0000001c 	andeq	r0, r0, ip, lsl r0
     260:	0000022c 	andeq	r0, r0, ip, lsr #4
     264:	00020dbc 			; <UNDEFINED> instruction: 0x00020dbc
     268:	0000002c 	andeq	r0, r0, ip, lsr #32
     26c:	8b040e42 	blhi	103b7c <ramdisk+0xd6524>
     270:	0b0d4201 	bleq	350a7c <__bss_end+0x22341c>
     274:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
     278:	00000ecb 	andeq	r0, r0, fp, asr #29
     27c:	0000001c 	andeq	r0, r0, ip, lsl r0
     280:	0000022c 	andeq	r0, r0, ip, lsr #4
     284:	00020de8 	andeq	r0, r2, r8, ror #27
     288:	00000098 	muleq	r0, r8, r0
     28c:	8b040e42 	blhi	103b9c <ramdisk+0xd6544>
     290:	0b0d4201 	bleq	350a9c <__bss_end+0x22343c>
     294:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
     298:	000ecb42 	andeq	ip, lr, r2, asr #22
     29c:	0000001c 	andeq	r0, r0, ip, lsl r0
     2a0:	0000022c 	andeq	r0, r0, ip, lsr #4
     2a4:	00020e80 	andeq	r0, r2, r0, lsl #29
     2a8:	000000d8 	ldrdeq	r0, [r0], -r8
     2ac:	8b040e42 	blhi	103bbc <ramdisk+0xd6564>
     2b0:	0b0d4201 	bleq	350abc <__bss_end+0x22345c>
     2b4:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
     2b8:	000ecb42 	andeq	ip, lr, r2, asr #22
     2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c0:	0000022c 	andeq	r0, r0, ip, lsr #4
     2c4:	00020f58 	andeq	r0, r2, r8, asr pc
     2c8:	00000098 	muleq	r0, r8, r0
     2cc:	8b040e42 	blhi	103bdc <ramdisk+0xd6584>
     2d0:	0b0d4201 	bleq	350adc <__bss_end+0x22347c>
     2d4:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
     2d8:	000ecb42 	andeq	ip, lr, r2, asr #22
     2dc:	0000000c 	andeq	r0, r0, ip
     2e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
     2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f0:	000002dc 	ldrdeq	r0, [r0], -ip
     2f4:	00020ff0 	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
     2f8:	00000114 	andeq	r0, r0, r4, lsl r1
     2fc:	8b080e42 	blhi	203c0c <__bss_end+0xd65ac>
     300:	42018e02 	andmi	r8, r1, #2, 28
     304:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     308:	080d0c84 	stmdaeq	sp, {r2, r7, sl, fp}
     30c:	0000001c 	andeq	r0, r0, ip, lsl r0
     310:	000002dc 	ldrdeq	r0, [r0], -ip
     314:	00021104 	andeq	r1, r2, r4, lsl #2
     318:	000000c8 	andeq	r0, r0, r8, asr #1
     31c:	8b080e42 	blhi	203c2c <__bss_end+0xd65cc>
     320:	42018e02 	andmi	r8, r1, #2, 28
     324:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     328:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
     32c:	0000001c 	andeq	r0, r0, ip, lsl r0
     330:	000002dc 	ldrdeq	r0, [r0], -ip
     334:	000211cc 	andeq	r1, r2, ip, asr #3
     338:	000001a4 	andeq	r0, r0, r4, lsr #3
     33c:	8b080e42 	blhi	203c4c <__bss_end+0xd65ec>
     340:	42018e02 	andmi	r8, r1, #2, 28
     344:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     348:	080d0ccc 	stmdaeq	sp, {r2, r3, r6, r7, sl, fp}
     34c:	0000001c 	andeq	r0, r0, ip, lsl r0
     350:	000002dc 	ldrdeq	r0, [r0], -ip
     354:	00021370 	andeq	r1, r2, r0, ror r3
     358:	000000dc 	ldrdeq	r0, [r0], -ip
     35c:	8b080e42 	blhi	203c6c <__bss_end+0xd660c>
     360:	42018e02 	andmi	r8, r1, #2, 28
     364:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     368:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
     36c:	0000001c 	andeq	r0, r0, ip, lsl r0
     370:	000002dc 	ldrdeq	r0, [r0], -ip
     374:	0002144c 	andeq	r1, r2, ip, asr #8
     378:	00000204 	andeq	r0, r0, r4, lsl #4
     37c:	8b080e42 	blhi	203c8c <__bss_end+0xd662c>
     380:	42018e02 	andmi	r8, r1, #2, 28
     384:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     388:	080d0cfc 	stmdaeq	sp, {r2, r3, r4, r5, r6, r7, sl, fp}
     38c:	0000001c 	andeq	r0, r0, ip, lsl r0
     390:	000002dc 	ldrdeq	r0, [r0], -ip
     394:	00021650 	andeq	r1, r2, r0, asr r6
     398:	000000e0 	andeq	r0, r0, r0, ror #1
     39c:	8b080e42 	blhi	203cac <__bss_end+0xd664c>
     3a0:	42018e02 	andmi	r8, r1, #2, 28
     3a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     3a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
     3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     3b0:	000002dc 	ldrdeq	r0, [r0], -ip
     3b4:	00021730 	andeq	r1, r2, r0, lsr r7
     3b8:	00000034 	andeq	r0, r0, r4, lsr r0
     3bc:	8b080e42 	blhi	203ccc <__bss_end+0xd666c>
     3c0:	42018e02 	andmi	r8, r1, #2, 28
     3c4:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     3c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d0:	000002dc 	ldrdeq	r0, [r0], -ip
     3d4:	00021764 	andeq	r1, r2, r4, ror #14
     3d8:	00000030 	andeq	r0, r0, r0, lsr r0
     3dc:	8b040e42 	blhi	103cec <ramdisk+0xd6694>
     3e0:	0b0d4201 	bleq	350bec <__bss_end+0x22358c>
     3e4:	420d0d50 	andmi	r0, sp, #80, 26	; 0x1400
     3e8:	00000ecb 	andeq	r0, r0, fp, asr #29
     3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f0:	000002dc 	ldrdeq	r0, [r0], -ip
     3f4:	00021794 	muleq	r2, r4, r7
     3f8:	00000034 	andeq	r0, r0, r4, lsr r0
     3fc:	8b080e42 	blhi	203d0c <__bss_end+0xd66ac>
     400:	42018e02 	andmi	r8, r1, #2, 28
     404:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     408:	00080d0c 	andeq	r0, r8, ip, lsl #26
     40c:	0000001c 	andeq	r0, r0, ip, lsl r0
     410:	000002dc 	ldrdeq	r0, [r0], -ip
     414:	000217c8 	andeq	r1, r2, r8, asr #15
     418:	0000012c 	andeq	r0, r0, ip, lsr #2
     41c:	8b080e42 	blhi	203d2c <__bss_end+0xd66cc>
     420:	42018e02 	andmi	r8, r1, #2, 28
     424:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     428:	080d0c90 	stmdaeq	sp, {r4, r7, sl, fp}
     42c:	0000001c 	andeq	r0, r0, ip, lsl r0
     430:	000002dc 	ldrdeq	r0, [r0], -ip
     434:	000218f4 	strdeq	r1, [r2], -r4
     438:	00000090 	muleq	r0, r0, r0
     43c:	8b080e42 	blhi	203d4c <__bss_end+0xd66ec>
     440:	42018e02 	andmi	r8, r1, #2, 28
     444:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     448:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     44c:	0000001c 	andeq	r0, r0, ip, lsl r0
     450:	000002dc 	ldrdeq	r0, [r0], -ip
     454:	00021984 	andeq	r1, r2, r4, lsl #19
     458:	00000104 	andeq	r0, r0, r4, lsl #2
     45c:	8b080e42 	blhi	203d6c <__bss_end+0xd670c>
     460:	42018e02 	andmi	r8, r1, #2, 28
     464:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     468:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
     46c:	0000001c 	andeq	r0, r0, ip, lsl r0
     470:	000002dc 	ldrdeq	r0, [r0], -ip
     474:	00021a88 	andeq	r1, r2, r8, lsl #21
     478:	00000044 	andeq	r0, r0, r4, asr #32
     47c:	8b080e42 	blhi	203d8c <__bss_end+0xd672c>
     480:	42018e02 	andmi	r8, r1, #2, 28
     484:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
     488:	00080d0c 	andeq	r0, r8, ip, lsl #26
     48c:	0000001c 	andeq	r0, r0, ip, lsl r0
     490:	000002dc 	ldrdeq	r0, [r0], -ip
     494:	00021acc 	andeq	r1, r2, ip, asr #21
     498:	00000040 	andeq	r0, r0, r0, asr #32
     49c:	8b040e42 	blhi	103dac <ramdisk+0xd6754>
     4a0:	0b0d4201 	bleq	350cac <__bss_end+0x22364c>
     4a4:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
     4a8:	00000ecb 	andeq	r0, r0, fp, asr #29
     4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     4b0:	000002dc 	ldrdeq	r0, [r0], -ip
     4b4:	00021b0c 	andeq	r1, r2, ip, lsl #22
     4b8:	0000004c 	andeq	r0, r0, ip, asr #32
     4bc:	8b080e42 	blhi	203dcc <__bss_end+0xd676c>
     4c0:	42018e02 	andmi	r8, r1, #2, 28
     4c4:	60040b0c 	andvs	r0, r4, ip, lsl #22
     4c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     4d0:	000002dc 	ldrdeq	r0, [r0], -ip
     4d4:	00021b58 	andeq	r1, r2, r8, asr fp
     4d8:	00000048 	andeq	r0, r0, r8, asr #32
     4dc:	8b040e42 	blhi	103dec <ramdisk+0xd6794>
     4e0:	0b0d4201 	bleq	350cec <__bss_end+0x22368c>
     4e4:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     4e8:	00000ecb 	andeq	r0, r0, fp, asr #29
     4ec:	0000000c 	andeq	r0, r0, ip
     4f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
     4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4fc:	00000020 	andeq	r0, r0, r0, lsr #32
     500:	000004ec 	andeq	r0, r0, ip, ror #9
     504:	00021ba0 	andeq	r1, r2, r0, lsr #23
     508:	0000024c 	andeq	r0, r0, ip, asr #4
     50c:	8b080e42 	blhi	203e1c <__bss_end+0xd67bc>
     510:	42018e02 	andmi	r8, r1, #2, 28
     514:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     518:	0d0c0112 	stfeqs	f0, [ip, #-72]	; 0xffffffb8
     51c:	00000008 	andeq	r0, r0, r8
     520:	0000001c 	andeq	r0, r0, ip, lsl r0
     524:	000004ec 	andeq	r0, r0, ip, ror #9
     528:	00021dec 	andeq	r1, r2, ip, ror #27
     52c:	00000100 	andeq	r0, r0, r0, lsl #2
     530:	8b080e42 	blhi	203e40 <__bss_end+0xd67e0>
     534:	42018e02 	andmi	r8, r1, #2, 28
     538:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     53c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
     540:	0000001c 	andeq	r0, r0, ip, lsl r0
     544:	000004ec 	andeq	r0, r0, ip, ror #9
     548:	00021eec 	andeq	r1, r2, ip, ror #29
     54c:	00000110 	andeq	r0, r0, r0, lsl r1
     550:	8b080e42 	blhi	203e60 <__bss_end+0xd6800>
     554:	42018e02 	andmi	r8, r1, #2, 28
     558:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     55c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
     560:	0000001c 	andeq	r0, r0, ip, lsl r0
     564:	000004ec 	andeq	r0, r0, ip, ror #9
     568:	00021ffc 	strdeq	r1, [r2], -ip
     56c:	00000084 	andeq	r0, r0, r4, lsl #1
     570:	8b080e42 	blhi	203e80 <__bss_end+0xd6820>
     574:	42018e02 	andmi	r8, r1, #2, 28
     578:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
     57c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     580:	0000001c 	andeq	r0, r0, ip, lsl r0
     584:	000004ec 	andeq	r0, r0, ip, ror #9
     588:	00022080 	andeq	r2, r2, r0, lsl #1
     58c:	00000058 	andeq	r0, r0, r8, asr r0
     590:	8b080e42 	blhi	203ea0 <__bss_end+0xd6840>
     594:	42018e02 	andmi	r8, r1, #2, 28
     598:	64040b0c 	strvs	r0, [r4], #-2828	; 0xfffff4f4
     59c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5a4:	000004ec 	andeq	r0, r0, ip, ror #9
     5a8:	000220d8 	ldrdeq	r2, [r2], -r8
     5ac:	000001a8 	andeq	r0, r0, r8, lsr #3
     5b0:	8b080e42 	blhi	203ec0 <__bss_end+0xd6860>
     5b4:	42018e02 	andmi	r8, r1, #2, 28
     5b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5bc:	080d0cc8 	stmdaeq	sp, {r3, r6, r7, sl, fp}
     5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5c4:	000004ec 	andeq	r0, r0, ip, ror #9
     5c8:	00022280 	andeq	r2, r2, r0, lsl #5
     5cc:	00000104 	andeq	r0, r0, r4, lsl #2
     5d0:	8b080e42 	blhi	203ee0 <__bss_end+0xd6880>
     5d4:	42018e02 	andmi	r8, r1, #2, 28
     5d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5dc:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
     5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5e4:	000004ec 	andeq	r0, r0, ip, ror #9
     5e8:	00022384 	andeq	r2, r2, r4, lsl #7
     5ec:	0000007c 	andeq	r0, r0, ip, ror r0
     5f0:	8b040e42 	blhi	103f00 <ramdisk+0xd68a8>
     5f4:	0b0d4201 	bleq	350e00 <__bss_end+0x2237a0>
     5f8:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
     5fc:	00000ecb 	andeq	r0, r0, fp, asr #29
     600:	0000001c 	andeq	r0, r0, ip, lsl r0
     604:	000004ec 	andeq	r0, r0, ip, ror #9
     608:	00022400 	andeq	r2, r2, r0, lsl #8
     60c:	000000f8 	strdeq	r0, [r0], -r8
     610:	8b080e42 	blhi	203f20 <__bss_end+0xd68c0>
     614:	42018e02 	andmi	r8, r1, #2, 28
     618:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     61c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
     620:	0000001c 	andeq	r0, r0, ip, lsl r0
     624:	000004ec 	andeq	r0, r0, ip, ror #9
     628:	000224f8 	strdeq	r2, [r2], -r8
     62c:	0000011c 	andeq	r0, r0, ip, lsl r1
     630:	8b080e42 	blhi	203f40 <__bss_end+0xd68e0>
     634:	42018e02 	andmi	r8, r1, #2, 28
     638:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     63c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
     640:	0000001c 	andeq	r0, r0, ip, lsl r0
     644:	000004ec 	andeq	r0, r0, ip, ror #9
     648:	00022614 	andeq	r2, r2, r4, lsl r6
     64c:	0000009c 	muleq	r0, ip, r0
     650:	8b080e42 	blhi	203f60 <__bss_end+0xd6900>
     654:	42018e02 	andmi	r8, r1, #2, 28
     658:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     65c:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
     660:	00000018 	andeq	r0, r0, r8, lsl r0
     664:	000004ec 	andeq	r0, r0, ip, ror #9
     668:	000226b0 			; <UNDEFINED> instruction: 0x000226b0
     66c:	00000038 	andeq	r0, r0, r8, lsr r0
     670:	8b080e42 	blhi	203f80 <__bss_end+0xd6920>
     674:	42018e02 	andmi	r8, r1, #2, 28
     678:	00040b0c 	andeq	r0, r4, ip, lsl #22
     67c:	0000001c 	andeq	r0, r0, ip, lsl r0
     680:	000004ec 	andeq	r0, r0, ip, ror #9
     684:	000226e8 	andeq	r2, r2, r8, ror #13
     688:	00000030 	andeq	r0, r0, r0, lsr r0
     68c:	8b040e42 	blhi	103f9c <ramdisk+0xd6944>
     690:	0b0d4201 	bleq	350e9c <__bss_end+0x22383c>
     694:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
     698:	00000ecb 	andeq	r0, r0, fp, asr #29
     69c:	00000020 	andeq	r0, r0, r0, lsr #32
     6a0:	000004ec 	andeq	r0, r0, ip, ror #9
     6a4:	00022718 	andeq	r2, r2, r8, lsl r7
     6a8:	000001a4 	andeq	r0, r0, r4, lsr #3
     6ac:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     6b0:	8e028b03 	vmlahi.f64	d8, d2, d3
     6b4:	0b0c4201 	bleq	310ec0 <__bss_end+0x1e3860>
     6b8:	0cbc0204 	lfmeq	f0, 4, [ip], #16
     6bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
     6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6c4:	000004ec 	andeq	r0, r0, ip, ror #9
     6c8:	000228bc 			; <UNDEFINED> instruction: 0x000228bc
     6cc:	00000034 	andeq	r0, r0, r4, lsr r0
     6d0:	8b080e42 	blhi	203fe0 <__bss_end+0xd6980>
     6d4:	42018e02 	andmi	r8, r1, #2, 28
     6d8:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
     6dc:	00080d0c 	andeq	r0, r8, ip, lsl #26
     6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6e4:	000004ec 	andeq	r0, r0, ip, ror #9
     6e8:	000228f0 	strdeq	r2, [r2], -r0
     6ec:	00000038 	andeq	r0, r0, r8, lsr r0
     6f0:	8b040e42 	blhi	104000 <ramdisk+0xd69a8>
     6f4:	0b0d4201 	bleq	350f00 <__bss_end+0x2238a0>
     6f8:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     6fc:	00000ecb 	andeq	r0, r0, fp, asr #29
     700:	0000001c 	andeq	r0, r0, ip, lsl r0
     704:	000004ec 	andeq	r0, r0, ip, ror #9
     708:	00022928 	andeq	r2, r2, r8, lsr #18
     70c:	00000024 	andeq	r0, r0, r4, lsr #32
     710:	8b040e42 	blhi	104020 <ramdisk+0xd69c8>
     714:	0b0d4201 	bleq	350f20 <__bss_end+0x2238c0>
     718:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
     71c:	00000ecb 	andeq	r0, r0, fp, asr #29
     720:	0000001c 	andeq	r0, r0, ip, lsl r0
     724:	000004ec 	andeq	r0, r0, ip, ror #9
     728:	0002294c 	andeq	r2, r2, ip, asr #18
     72c:	0000021c 	andeq	r0, r0, ip, lsl r2
     730:	8b080e42 	blhi	204040 <__bss_end+0xd69e0>
     734:	42018e02 	andmi	r8, r1, #2, 28
     738:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     73c:	080d0cf6 	stmdaeq	sp, {r1, r2, r4, r5, r6, r7, sl, fp}
     740:	0000001c 	andeq	r0, r0, ip, lsl r0
     744:	000004ec 	andeq	r0, r0, ip, ror #9
     748:	00022b68 	andeq	r2, r2, r8, ror #22
     74c:	0000005c 	andeq	r0, r0, ip, asr r0
     750:	8b080e42 	blhi	204060 <__bss_end+0xd6a00>
     754:	42018e02 	andmi	r8, r1, #2, 28
     758:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
     75c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     760:	0000001c 	andeq	r0, r0, ip, lsl r0
     764:	000004ec 	andeq	r0, r0, ip, ror #9
     768:	00022bc4 	andeq	r2, r2, r4, asr #23
     76c:	0000005c 	andeq	r0, r0, ip, asr r0
     770:	8b080e42 	blhi	204080 <__bss_end+0xd6a20>
     774:	42018e02 	andmi	r8, r1, #2, 28
     778:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
     77c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     780:	0000001c 	andeq	r0, r0, ip, lsl r0
     784:	000004ec 	andeq	r0, r0, ip, ror #9
     788:	00022c20 	andeq	r2, r2, r0, lsr #24
     78c:	0000007c 	andeq	r0, r0, ip, ror r0
     790:	8b080e42 	blhi	2040a0 <__bss_end+0xd6a40>
     794:	42018e02 	andmi	r8, r1, #2, 28
     798:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
     79c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7a4:	000004ec 	andeq	r0, r0, ip, ror #9
     7a8:	00022c9c 	muleq	r2, ip, ip
     7ac:	00000108 	andeq	r0, r0, r8, lsl #2
     7b0:	8b040e42 	blhi	1040c0 <ramdisk+0xd6a68>
     7b4:	0b0d4201 	bleq	350fc0 <__bss_end+0x223960>
     7b8:	0d0d7202 	sfmeq	f7, 4, [sp, #-8]
     7bc:	000ecb42 	andeq	ip, lr, r2, asr #22
     7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7c4:	000004ec 	andeq	r0, r0, ip, ror #9
     7c8:	00022da4 	andeq	r2, r2, r4, lsr #27
     7cc:	0000009c 	muleq	r0, ip, r0
     7d0:	8b080e42 	blhi	2040e0 <__bss_end+0xd6a80>
     7d4:	42018e02 	andmi	r8, r1, #2, 28
     7d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     7dc:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7e4:	000004ec 	andeq	r0, r0, ip, ror #9
     7e8:	00022e40 	andeq	r2, r2, r0, asr #28
     7ec:	00000118 	andeq	r0, r0, r8, lsl r1
     7f0:	8b080e42 	blhi	204100 <__bss_end+0xd6aa0>
     7f4:	42018e02 	andmi	r8, r1, #2, 28
     7f8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     7fc:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
     800:	0000001c 	andeq	r0, r0, ip, lsl r0
     804:	000004ec 	andeq	r0, r0, ip, ror #9
     808:	00022f58 	andeq	r2, r2, r8, asr pc
     80c:	00000048 	andeq	r0, r0, r8, asr #32
     810:	8b040e42 	blhi	104120 <ramdisk+0xd6ac8>
     814:	0b0d4201 	bleq	351020 <__bss_end+0x2239c0>
     818:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
     81c:	00000ecb 	andeq	r0, r0, fp, asr #29
     820:	0000001c 	andeq	r0, r0, ip, lsl r0
     824:	000004ec 	andeq	r0, r0, ip, ror #9
     828:	00022fa0 	andeq	r2, r2, r0, lsr #31
     82c:	000000f4 	strdeq	r0, [r0], -r4
     830:	8b080e42 	blhi	204140 <__bss_end+0xd6ae0>
     834:	42018e02 	andmi	r8, r1, #2, 28
     838:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     83c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
     840:	0000001c 	andeq	r0, r0, ip, lsl r0
     844:	000004ec 	andeq	r0, r0, ip, ror #9
     848:	00023094 	muleq	r2, r4, r0
     84c:	00000028 	andeq	r0, r0, r8, lsr #32
     850:	8b040e42 	blhi	104160 <ramdisk+0xd6b08>
     854:	0b0d4201 	bleq	351060 <__bss_end+0x223a00>
     858:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
     85c:	00000ecb 	andeq	r0, r0, fp, asr #29
     860:	00000018 	andeq	r0, r0, r8, lsl r0
     864:	000004ec 	andeq	r0, r0, ip, ror #9
     868:	000230bc 	strheq	r3, [r2], -ip
     86c:	00000030 	andeq	r0, r0, r0, lsr r0
     870:	8b080e42 	blhi	204180 <__bss_end+0xd6b20>
     874:	42018e02 	andmi	r8, r1, #2, 28
     878:	00040b0c 	andeq	r0, r4, ip, lsl #22
     87c:	0000001c 	andeq	r0, r0, ip, lsl r0
     880:	000004ec 	andeq	r0, r0, ip, ror #9
     884:	000230ec 	andeq	r3, r2, ip, ror #1
     888:	000000c0 	andeq	r0, r0, r0, asr #1
     88c:	8b080e42 	blhi	20419c <__bss_end+0xd6b3c>
     890:	42018e02 	andmi	r8, r1, #2, 28
     894:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     898:	080d0c5a 	stmdaeq	sp, {r1, r3, r4, r6, sl, fp}
     89c:	0000001c 	andeq	r0, r0, ip, lsl r0
     8a0:	000004ec 	andeq	r0, r0, ip, ror #9
     8a4:	000231ac 	andeq	r3, r2, ip, lsr #3
     8a8:	000000c0 	andeq	r0, r0, r0, asr #1
     8ac:	8b080e42 	blhi	2041bc <__bss_end+0xd6b5c>
     8b0:	42018e02 	andmi	r8, r1, #2, 28
     8b4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     8b8:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
     8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8c0:	000004ec 	andeq	r0, r0, ip, ror #9
     8c4:	0002326c 	andeq	r3, r2, ip, ror #4
     8c8:	000000bc 	strheq	r0, [r0], -ip
     8cc:	8b080e42 	blhi	2041dc <__bss_end+0xd6b7c>
     8d0:	42018e02 	andmi	r8, r1, #2, 28
     8d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     8d8:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
     8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8e0:	000004ec 	andeq	r0, r0, ip, ror #9
     8e4:	00023328 	andeq	r3, r2, r8, lsr #6
     8e8:	000000b8 	strheq	r0, [r0], -r8
     8ec:	8b080e42 	blhi	2041fc <__bss_end+0xd6b9c>
     8f0:	42018e02 	andmi	r8, r1, #2, 28
     8f4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     8f8:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
     8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     900:	000004ec 	andeq	r0, r0, ip, ror #9
     904:	000233e0 	andeq	r3, r2, r0, ror #7
     908:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     90c:	8b080e42 	blhi	20421c <__bss_end+0xd6bbc>
     910:	42018e02 	andmi	r8, r1, #2, 28
     914:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     918:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
     91c:	0000001c 	andeq	r0, r0, ip, lsl r0
     920:	000004ec 	andeq	r0, r0, ip, ror #9
     924:	00023490 	muleq	r2, r0, r4
     928:	00000034 	andeq	r0, r0, r4, lsr r0
     92c:	8b080e42 	blhi	20423c <__bss_end+0xd6bdc>
     930:	42018e02 	andmi	r8, r1, #2, 28
     934:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     938:	00080d0c 	andeq	r0, r8, ip, lsl #26
     93c:	0000000c 	andeq	r0, r0, ip
     940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     944:	7c020001 	stcvc	0, cr0, [r2], {1}
     948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     94c:	0000001c 	andeq	r0, r0, ip, lsl r0
     950:	0000093c 	andeq	r0, r0, ip, lsr r9
     954:	000234c4 	andeq	r3, r2, r4, asr #9
     958:	000000b4 	strheq	r0, [r0], -r4
     95c:	8b080e42 	blhi	20426c <__bss_end+0xd6c0c>
     960:	42018e02 	andmi	r8, r1, #2, 28
     964:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     968:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
     96c:	0000001c 	andeq	r0, r0, ip, lsl r0
     970:	0000093c 	andeq	r0, r0, ip, lsr r9
     974:	00023578 	andeq	r3, r2, r8, ror r5
     978:	000000a0 	andeq	r0, r0, r0, lsr #1
     97c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     980:	8b038504 	blhi	e1d98 <ramdisk+0xb4740>
     984:	42018e02 	andmi	r8, r1, #2, 28
     988:	00040b0c 	andeq	r0, r4, ip, lsl #22
     98c:	0000001c 	andeq	r0, r0, ip, lsl r0
     990:	0000093c 	andeq	r0, r0, ip, lsr r9
     994:	00023618 	andeq	r3, r2, r8, lsl r6
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
     99c:	8b040e42 	blhi	1042ac <ramdisk+0xd6c54>
     9a0:	0b0d4201 	bleq	3511ac <__bss_end+0x223b4c>
     9a4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     9a8:	00000ecb 	andeq	r0, r0, fp, asr #29
     9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b0:	0000093c 	andeq	r0, r0, ip, lsr r9
     9b4:	00023634 	andeq	r3, r2, r4, lsr r6
     9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9bc:	8b040e42 	blhi	1042cc <ramdisk+0xd6c74>
     9c0:	0b0d4201 	bleq	3511cc <__bss_end+0x223b6c>
     9c4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     9c8:	00000ecb 	andeq	r0, r0, fp, asr #29
     9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9d0:	0000093c 	andeq	r0, r0, ip, lsr r9
     9d4:	00023650 	andeq	r3, r2, r0, asr r6
     9d8:	00000064 	andeq	r0, r0, r4, rrx
     9dc:	8b080e42 	blhi	2042ec <__bss_end+0xd6c8c>
     9e0:	42018e02 	andmi	r8, r1, #2, 28
     9e4:	6a040b0c 	bvs	10361c <ramdisk+0xd5fc4>
     9e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f0:	0000093c 	andeq	r0, r0, ip, lsr r9
     9f4:	000236b4 			; <UNDEFINED> instruction: 0x000236b4
     9f8:	000000d4 	ldrdeq	r0, [r0], -r4
     9fc:	8b040e42 	blhi	10430c <ramdisk+0xd6cb4>
     a00:	0b0d4201 	bleq	35120c <__bss_end+0x223bac>
     a04:	0d0d5e02 	stceq	14, cr5, [sp, #-8]
     a08:	000ecb42 	andeq	ip, lr, r2, asr #22
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a10:	0000093c 	andeq	r0, r0, ip, lsr r9
     a14:	00023788 	andeq	r3, r2, r8, lsl #15
     a18:	000000e0 	andeq	r0, r0, r0, ror #1
     a1c:	8b040e42 	blhi	10432c <ramdisk+0xd6cd4>
     a20:	0b0d4201 	bleq	35122c <__bss_end+0x223bcc>
     a24:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
     a28:	000ecb42 	andeq	ip, lr, r2, asr #22
     a2c:	0000000c 	andeq	r0, r0, ip
     a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a34:	7c020001 	stcvc	0, cr0, [r2], {1}
     a38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a40:	00000a2c 	andeq	r0, r0, ip, lsr #20
     a44:	00023868 	andeq	r3, r2, r8, ror #16
     a48:	000000d8 	ldrdeq	r0, [r0], -r8
     a4c:	8b040e42 	blhi	10435c <ramdisk+0xd6d04>
     a50:	0b0d4201 	bleq	35125c <__bss_end+0x223bfc>
     a54:	0d0d6002 	stceq	0, cr6, [sp, #-8]
     a58:	000ecb42 	andeq	ip, lr, r2, asr #22
     a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a60:	00000a2c 	andeq	r0, r0, ip, lsr #20
     a64:	00023940 	andeq	r3, r2, r0, asr #18
     a68:	00000034 	andeq	r0, r0, r4, lsr r0
     a6c:	8b080e42 	blhi	20437c <__bss_end+0xd6d1c>
     a70:	42018e02 	andmi	r8, r1, #2, 28
     a74:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     a78:	00080d0c 	andeq	r0, r8, ip, lsl #26
     a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a80:	00000a2c 	andeq	r0, r0, ip, lsr #20
     a84:	00023974 	andeq	r3, r2, r4, ror r9
     a88:	0000009c 	muleq	r0, ip, r0
     a8c:	8b040e42 	blhi	10439c <ramdisk+0xd6d44>
     a90:	0b0d4201 	bleq	35129c <__bss_end+0x223c3c>
     a94:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
     a98:	000ecb42 	andeq	ip, lr, r2, asr #22
     a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     aa0:	00000a2c 	andeq	r0, r0, ip, lsr #20
     aa4:	00023a10 	andeq	r3, r2, r0, lsl sl
     aa8:	00000068 	andeq	r0, r0, r8, rrx
     aac:	8b040e42 	blhi	1043bc <ramdisk+0xd6d64>
     ab0:	0b0d4201 	bleq	3512bc <__bss_end+0x223c5c>
     ab4:	420d0d6a 	andmi	r0, sp, #6784	; 0x1a80
     ab8:	00000ecb 	andeq	r0, r0, fp, asr #29
     abc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ac0:	00000a2c 	andeq	r0, r0, ip, lsr #20
     ac4:	00023a78 	andeq	r3, r2, r8, ror sl
     ac8:	00000150 	andeq	r0, r0, r0, asr r1
     acc:	8b040e42 	blhi	1043dc <ramdisk+0xd6d84>
     ad0:	0b0d4201 	bleq	3512dc <__bss_end+0x223c7c>
     ad4:	0d0d9e02 	stceq	14, cr9, [sp, #-8]
     ad8:	000ecb42 	andeq	ip, lr, r2, asr #22
     adc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ae0:	00000a2c 	andeq	r0, r0, ip, lsr #20
     ae4:	00023bc8 	andeq	r3, r2, r8, asr #23
     ae8:	00000158 	andeq	r0, r0, r8, asr r1
     aec:	8b040e42 	blhi	1043fc <ramdisk+0xd6da4>
     af0:	0b0d4201 	bleq	3512fc <__bss_end+0x223c9c>
     af4:	0d0da202 	sfmeq	f2, 1, [sp, #-8]
     af8:	000ecb42 	andeq	ip, lr, r2, asr #22
     afc:	0000001c 	andeq	r0, r0, ip, lsl r0
     b00:	00000a2c 	andeq	r0, r0, ip, lsr #20
     b04:	00023d20 	andeq	r3, r2, r0, lsr #26
     b08:	00000068 	andeq	r0, r0, r8, rrx
     b0c:	8b040e42 	blhi	10441c <ramdisk+0xd6dc4>
     b10:	0b0d4201 	bleq	35131c <__bss_end+0x223cbc>
     b14:	420d0d6a 	andmi	r0, sp, #6784	; 0x1a80
     b18:	00000ecb 	andeq	r0, r0, fp, asr #29
     b1c:	0000000c 	andeq	r0, r0, ip
     b20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b24:	7c020001 	stcvc	0, cr0, [r2], {1}
     b28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b30:	00000b1c 	andeq	r0, r0, ip, lsl fp
     b34:	00023d88 	andeq	r3, r2, r8, lsl #27
     b38:	000001c8 	andeq	r0, r0, r8, asr #3
     b3c:	8b080e42 	blhi	20444c <__bss_end+0xd6dec>
     b40:	42018e02 	andmi	r8, r1, #2, 28
     b44:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     b48:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
     b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b50:	00000b1c 	andeq	r0, r0, ip, lsl fp
     b54:	00023f50 	andeq	r3, r2, r0, asr pc
     b58:	0000007c 	andeq	r0, r0, ip, ror r0
     b5c:	8b080e42 	blhi	20446c <__bss_end+0xd6e0c>
     b60:	42018e02 	andmi	r8, r1, #2, 28
     b64:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
     b68:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b70:	00000b1c 	andeq	r0, r0, ip, lsl fp
     b74:	00023fcc 	andeq	r3, r2, ip, asr #31
     b78:	00000024 	andeq	r0, r0, r4, lsr #32
     b7c:	8b040e42 	blhi	10448c <ramdisk+0xd6e34>
     b80:	0b0d4201 	bleq	35138c <__bss_end+0x223d2c>
     b84:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
     b88:	00000ecb 	andeq	r0, r0, fp, asr #29
     b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b90:	00000b1c 	andeq	r0, r0, ip, lsl fp
     b94:	00023ff0 	strdeq	r3, [r2], -r0
     b98:	00000018 	andeq	r0, r0, r8, lsl r0
     b9c:	8b040e42 	blhi	1044ac <ramdisk+0xd6e54>
     ba0:	0b0d4201 	bleq	3513ac <__bss_end+0x223d4c>
     ba4:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
     ba8:	00000ecb 	andeq	r0, r0, fp, asr #29
     bac:	0000001c 	andeq	r0, r0, ip, lsl r0
     bb0:	00000b1c 	andeq	r0, r0, ip, lsl fp
     bb4:	00024008 	andeq	r4, r2, r8
     bb8:	000000d8 	ldrdeq	r0, [r0], -r8
     bbc:	8b040e42 	blhi	1044cc <ramdisk+0xd6e74>
     bc0:	0b0d4201 	bleq	3513cc <__bss_end+0x223d6c>
     bc4:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
     bc8:	000ecb42 	andeq	ip, lr, r2, asr #22
     bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd0:	00000b1c 	andeq	r0, r0, ip, lsl fp
     bd4:	000240e0 	andeq	r4, r2, r0, ror #1
     bd8:	00000154 	andeq	r0, r0, r4, asr r1
     bdc:	8b040e42 	blhi	1044ec <ramdisk+0xd6e94>
     be0:	0b0d4201 	bleq	3513ec <__bss_end+0x223d8c>
     be4:	0d0d9e02 	stceq	14, cr9, [sp, #-8]
     be8:	000ecb42 	andeq	ip, lr, r2, asr #22
     bec:	0000000c 	andeq	r0, r0, ip
     bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
     bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     c00:	00000bec 	andeq	r0, r0, ip, ror #23
     c04:	0002424c 	andeq	r4, r2, ip, asr #4
     c08:	00000050 	andeq	r0, r0, r0, asr r0
     c0c:	8b040e42 	blhi	10451c <ramdisk+0xd6ec4>
     c10:	0b0d4201 	bleq	35141c <__bss_end+0x223dbc>
     c14:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     c18:	00000ecb 	andeq	r0, r0, fp, asr #29
     c1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c20:	00000bec 	andeq	r0, r0, ip, ror #23
     c24:	0002429c 	muleq	r2, ip, r2
     c28:	0000004c 	andeq	r0, r0, ip, asr #32
     c2c:	8b080e42 	blhi	20453c <__bss_end+0xd6edc>
     c30:	42018e02 	andmi	r8, r1, #2, 28
     c34:	60040b0c 	andvs	r0, r4, ip, lsl #22
     c38:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c40:	00000bec 	andeq	r0, r0, ip, ror #23
     c44:	000242e8 	andeq	r4, r2, r8, ror #5
     c48:	000000dc 	ldrdeq	r0, [r0], -ip
     c4c:	8b080e42 	blhi	20455c <__bss_end+0xd6efc>
     c50:	42018e02 	andmi	r8, r1, #2, 28
     c54:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     c58:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
     c5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c60:	00000bec 	andeq	r0, r0, ip, ror #23
     c64:	000243c4 	andeq	r4, r2, r4, asr #7
     c68:	000001e8 	andeq	r0, r0, r8, ror #3
     c6c:	8b080e42 	blhi	20457c <__bss_end+0xd6f1c>
     c70:	42018e02 	andmi	r8, r1, #2, 28
     c74:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     c78:	080d0cc0 	stmdaeq	sp, {r6, r7, sl, fp}
     c7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c80:	00000bec 	andeq	r0, r0, ip, ror #23
     c84:	000245ac 	andeq	r4, r2, ip, lsr #11
     c88:	00000018 	andeq	r0, r0, r8, lsl r0
     c8c:	8b040e42 	blhi	10459c <ramdisk+0xd6f44>
     c90:	0b0d4201 	bleq	35149c <__bss_end+0x223e3c>
     c94:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
     c98:	00000ecb 	andeq	r0, r0, fp, asr #29
     c9c:	00000018 	andeq	r0, r0, r8, lsl r0
     ca0:	00000bec 	andeq	r0, r0, ip, ror #23
     ca4:	000245c4 	andeq	r4, r2, r4, asr #11
     ca8:	0000003c 	andeq	r0, r0, ip, lsr r0
     cac:	8b080e42 	blhi	2045bc <__bss_end+0xd6f5c>
     cb0:	42018e02 	andmi	r8, r1, #2, 28
     cb4:	00040b0c 	andeq	r0, r4, ip, lsl #22
     cb8:	00000018 	andeq	r0, r0, r8, lsl r0
     cbc:	00000bec 	andeq	r0, r0, ip, ror #23
     cc0:	00024600 	andeq	r4, r2, r0, lsl #12
     cc4:	00000044 	andeq	r0, r0, r4, asr #32
     cc8:	8b080e42 	blhi	2045d8 <__bss_end+0xd6f78>
     ccc:	42018e02 	andmi	r8, r1, #2, 28
     cd0:	00040b0c 	andeq	r0, r4, ip, lsl #22
     cd4:	00000020 	andeq	r0, r0, r0, lsr #32
     cd8:	00000bec 	andeq	r0, r0, ip, ror #23
     cdc:	00024644 	andeq	r4, r2, r4, asr #12
     ce0:	00000408 	andeq	r0, r0, r8, lsl #8
     ce4:	8b080e42 	blhi	2045f4 <__bss_end+0xd6f94>
     ce8:	42018e02 	andmi	r8, r1, #2, 28
     cec:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     cf0:	0d0c01c8 	stfeqs	f0, [ip, #-800]	; 0xfffffce0
     cf4:	00000008 	andeq	r0, r0, r8
     cf8:	00000018 	andeq	r0, r0, r8, lsl r0
     cfc:	00000bec 	andeq	r0, r0, ip, ror #23
     d00:	00024a4c 	andeq	r4, r2, ip, asr #20
     d04:	000000e4 	andeq	r0, r0, r4, ror #1
     d08:	8b080e42 	blhi	204618 <__bss_end+0xd6fb8>
     d0c:	42018e02 	andmi	r8, r1, #2, 28
     d10:	00040b0c 	andeq	r0, r4, ip, lsl #22
     d14:	0000000c 	andeq	r0, r0, ip
     d18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d1c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d24:	0000001c 	andeq	r0, r0, ip, lsl r0
     d28:	00000d14 	andeq	r0, r0, r4, lsl sp
     d2c:	00024b30 	andeq	r4, r2, r0, lsr fp
     d30:	00000058 	andeq	r0, r0, r8, asr r0
     d34:	8b040e42 	blhi	104644 <ramdisk+0xd6fec>
     d38:	0b0d4201 	bleq	351544 <__bss_end+0x223ee4>
     d3c:	420d0d64 	andmi	r0, sp, #100, 26	; 0x1900
     d40:	00000ecb 	andeq	r0, r0, fp, asr #29
     d44:	0000001c 	andeq	r0, r0, ip, lsl r0
     d48:	00000d14 	andeq	r0, r0, r4, lsl sp
     d4c:	00024b88 	andeq	r4, r2, r8, lsl #23
     d50:	00000084 	andeq	r0, r0, r4, lsl #1
     d54:	8b040e42 	blhi	104664 <ramdisk+0xd700c>
     d58:	0b0d4201 	bleq	351564 <__bss_end+0x223f04>
     d5c:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
     d60:	00000ecb 	andeq	r0, r0, fp, asr #29
     d64:	0000001c 	andeq	r0, r0, ip, lsl r0
     d68:	00000d14 	andeq	r0, r0, r4, lsl sp
     d6c:	00024c0c 	andeq	r4, r2, ip, lsl #24
     d70:	00000064 	andeq	r0, r0, r4, rrx
     d74:	8b040e42 	blhi	104684 <ramdisk+0xd702c>
     d78:	0b0d4201 	bleq	351584 <__bss_end+0x223f24>
     d7c:	420d0d6a 	andmi	r0, sp, #6784	; 0x1a80
     d80:	00000ecb 	andeq	r0, r0, fp, asr #29
     d84:	0000001c 	andeq	r0, r0, ip, lsl r0
     d88:	00000d14 	andeq	r0, r0, r4, lsl sp
     d8c:	00024c70 	andeq	r4, r2, r0, ror ip
     d90:	000000a8 	andeq	r0, r0, r8, lsr #1
     d94:	8b040e42 	blhi	1046a4 <ramdisk+0xd704c>
     d98:	0b0d4201 	bleq	3515a4 <__bss_end+0x223f44>
     d9c:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     da0:	000ecb42 	andeq	ip, lr, r2, asr #22
     da4:	0000001c 	andeq	r0, r0, ip, lsl r0
     da8:	00000d14 	andeq	r0, r0, r4, lsl sp
     dac:	00024d18 	andeq	r4, r2, r8, lsl sp
     db0:	0000003c 	andeq	r0, r0, ip, lsr r0
     db4:	8b040e42 	blhi	1046c4 <ramdisk+0xd706c>
     db8:	0b0d4201 	bleq	3515c4 <__bss_end+0x223f64>
     dbc:	420d0d56 	andmi	r0, sp, #5504	; 0x1580
     dc0:	00000ecb 	andeq	r0, r0, fp, asr #29
     dc4:	0000001c 	andeq	r0, r0, ip, lsl r0
     dc8:	00000d14 	andeq	r0, r0, r4, lsl sp
     dcc:	00024d54 	andeq	r4, r2, r4, asr sp
     dd0:	0000003c 	andeq	r0, r0, ip, lsr r0
     dd4:	8b040e42 	blhi	1046e4 <ramdisk+0xd708c>
     dd8:	0b0d4201 	bleq	3515e4 <__bss_end+0x223f84>
     ddc:	420d0d56 	andmi	r0, sp, #5504	; 0x1580
     de0:	00000ecb 	andeq	r0, r0, fp, asr #29
     de4:	0000001c 	andeq	r0, r0, ip, lsl r0
     de8:	00000d14 	andeq	r0, r0, r4, lsl sp
     dec:	00024d90 	muleq	r2, r0, sp
     df0:	000000dc 	ldrdeq	r0, [r0], -ip
     df4:	8b080e42 	blhi	204704 <__bss_end+0xd70a4>
     df8:	42018e02 	andmi	r8, r1, #2, 28
     dfc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     e00:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
     e04:	0000001c 	andeq	r0, r0, ip, lsl r0
     e08:	00000d14 	andeq	r0, r0, r4, lsl sp
     e0c:	00024e6c 	andeq	r4, r2, ip, ror #28
     e10:	000000a0 	andeq	r0, r0, r0, lsr #1
     e14:	8b080e42 	blhi	204724 <__bss_end+0xd70c4>
     e18:	42018e02 	andmi	r8, r1, #2, 28
     e1c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     e20:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
     e24:	0000001c 	andeq	r0, r0, ip, lsl r0
     e28:	00000d14 	andeq	r0, r0, r4, lsl sp
     e2c:	00024f0c 	andeq	r4, r2, ip, lsl #30
     e30:	00000174 	andeq	r0, r0, r4, ror r1
     e34:	8b080e42 	blhi	204744 <__bss_end+0xd70e4>
     e38:	42018e02 	andmi	r8, r1, #2, 28
     e3c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     e40:	080d0cae 	stmdaeq	sp, {r1, r2, r3, r5, r7, sl, fp}
     e44:	0000001c 	andeq	r0, r0, ip, lsl r0
     e48:	00000d14 	andeq	r0, r0, r4, lsl sp
     e4c:	00025080 	andeq	r5, r2, r0, lsl #1
     e50:	00000070 	andeq	r0, r0, r0, ror r0
     e54:	8b040e42 	blhi	104764 <ramdisk+0xd710c>
     e58:	0b0d4201 	bleq	351664 <__bss_end+0x224004>
     e5c:	420d0d70 	andmi	r0, sp, #112, 26	; 0x1c00
     e60:	00000ecb 	andeq	r0, r0, fp, asr #29
     e64:	00000020 	andeq	r0, r0, r0, lsr #32
     e68:	00000d14 	andeq	r0, r0, r4, lsl sp
     e6c:	000250f0 	strdeq	r5, [r2], -r0
     e70:	00000268 	andeq	r0, r0, r8, ror #4
     e74:	8b080e42 	blhi	204784 <__bss_end+0xd7124>
     e78:	42018e02 	andmi	r8, r1, #2, 28
     e7c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     e80:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     e84:	00000008 	andeq	r0, r0, r8
     e88:	00000020 	andeq	r0, r0, r0, lsr #32
     e8c:	00000d14 	andeq	r0, r0, r4, lsl sp
     e90:	00025358 	andeq	r5, r2, r8, asr r3
     e94:	00000348 	andeq	r0, r0, r8, asr #6
     e98:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     e9c:	8e028b03 	vmlahi.f64	d8, d2, d3
     ea0:	0b0c4201 	bleq	3116ac <__bss_end+0x1e404c>
     ea4:	019c0304 	orrseq	r0, ip, r4, lsl #6
     ea8:	000c0d0c 	andeq	r0, ip, ip, lsl #26
     eac:	0000001c 	andeq	r0, r0, ip, lsl r0
     eb0:	00000d14 	andeq	r0, r0, r4, lsl sp
     eb4:	000256a0 	andeq	r5, r2, r0, lsr #13
     eb8:	00000178 	andeq	r0, r0, r8, ror r1
     ebc:	8b080e42 	blhi	2047cc <__bss_end+0xd716c>
     ec0:	42018e02 	andmi	r8, r1, #2, 28
     ec4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     ec8:	080d0cb6 	stmdaeq	sp, {r1, r2, r4, r5, r7, sl, fp}
     ecc:	00000020 	andeq	r0, r0, r0, lsr #32
     ed0:	00000d14 	andeq	r0, r0, r4, lsl sp
     ed4:	00025818 	andeq	r5, r2, r8, lsl r8
     ed8:	00000324 	andeq	r0, r0, r4, lsr #6
     edc:	8b080e42 	blhi	2047ec <__bss_end+0xd718c>
     ee0:	42018e02 	andmi	r8, r1, #2, 28
     ee4:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     ee8:	0d0c018c 	stfeqs	f0, [ip, #-560]	; 0xfffffdd0
     eec:	00000008 	andeq	r0, r0, r8
     ef0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ef4:	00000d14 	andeq	r0, r0, r4, lsl sp
     ef8:	00025b3c 	andeq	r5, r2, ip, lsr fp
     efc:	00000104 	andeq	r0, r0, r4, lsl #2
     f00:	8b080e42 	blhi	204810 <__bss_end+0xd71b0>
     f04:	42018e02 	andmi	r8, r1, #2, 28
     f08:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     f0c:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
     f10:	0000001c 	andeq	r0, r0, ip, lsl r0
     f14:	00000d14 	andeq	r0, r0, r4, lsl sp
     f18:	00025c40 	andeq	r5, r2, r0, asr #24
     f1c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f20:	8b080e42 	blhi	204830 <__bss_end+0xd71d0>
     f24:	42018e02 	andmi	r8, r1, #2, 28
     f28:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     f2c:	080d0ce2 	stmdaeq	sp, {r1, r5, r6, r7, sl, fp}
     f30:	00000020 	andeq	r0, r0, r0, lsr #32
     f34:	00000d14 	andeq	r0, r0, r4, lsl sp
     f38:	00025e10 	andeq	r5, r2, r0, lsl lr
     f3c:	00000234 	andeq	r0, r0, r4, lsr r2
     f40:	8b080e42 	blhi	204850 <__bss_end+0xd71f0>
     f44:	42018e02 	andmi	r8, r1, #2, 28
     f48:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     f4c:	0d0c0114 	stfeqs	f0, [ip, #-80]	; 0xffffffb0
     f50:	00000008 	andeq	r0, r0, r8
     f54:	0000001c 	andeq	r0, r0, ip, lsl r0
     f58:	00000d14 	andeq	r0, r0, r4, lsl sp
     f5c:	00026044 	andeq	r6, r2, r4, asr #32
     f60:	0000010c 	andeq	r0, r0, ip, lsl #2
     f64:	8b080e42 	blhi	204874 <__bss_end+0xd7214>
     f68:	42018e02 	andmi	r8, r1, #2, 28
     f6c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     f70:	080d0c80 	stmdaeq	sp, {r7, sl, fp}
     f74:	0000001c 	andeq	r0, r0, ip, lsl r0
     f78:	00000d14 	andeq	r0, r0, r4, lsl sp
     f7c:	00026150 	andeq	r6, r2, r0, asr r1
     f80:	00000070 	andeq	r0, r0, r0, ror r0
     f84:	8b080e42 	blhi	204894 <__bss_end+0xd7234>
     f88:	42018e02 	andmi	r8, r1, #2, 28
     f8c:	72040b0c 	andvc	r0, r4, #12, 22	; 0x3000
     f90:	00080d0c 	andeq	r0, r8, ip, lsl #26
     f94:	0000001c 	andeq	r0, r0, ip, lsl r0
     f98:	00000d14 	andeq	r0, r0, r4, lsl sp
     f9c:	000261c0 	andeq	r6, r2, r0, asr #3
     fa0:	00000070 	andeq	r0, r0, r0, ror r0
     fa4:	8b080e42 	blhi	2048b4 <__bss_end+0xd7254>
     fa8:	42018e02 	andmi	r8, r1, #2, 28
     fac:	72040b0c 	andvc	r0, r4, #12, 22	; 0x3000
     fb0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     fb4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fb8:	00000d14 	andeq	r0, r0, r4, lsl sp
     fbc:	00026230 	andeq	r6, r2, r0, lsr r2
     fc0:	0000015c 	andeq	r0, r0, ip, asr r1
     fc4:	8b080e42 	blhi	2048d4 <__bss_end+0xd7274>
     fc8:	42018e02 	andmi	r8, r1, #2, 28
     fcc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     fd0:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
     fd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fd8:	00000d14 	andeq	r0, r0, r4, lsl sp
     fdc:	0002638c 	andeq	r6, r2, ip, lsl #7
     fe0:	00000138 	andeq	r0, r0, r8, lsr r1
     fe4:	8b080e42 	blhi	2048f4 <__bss_end+0xd7294>
     fe8:	42018e02 	andmi	r8, r1, #2, 28
     fec:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     ff0:	080d0c96 	stmdaeq	sp, {r1, r2, r4, r7, sl, fp}
     ff4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ff8:	00000d14 	andeq	r0, r0, r4, lsl sp
     ffc:	000264c4 	andeq	r6, r2, r4, asr #9
    1000:	000000b4 	strheq	r0, [r0], -r4
    1004:	8b080e42 	blhi	204914 <__bss_end+0xd72b4>
    1008:	42018e02 	andmi	r8, r1, #2, 28
    100c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1010:	080d0c54 	stmdaeq	sp, {r2, r4, r6, sl, fp}
    1014:	0000001c 	andeq	r0, r0, ip, lsl r0
    1018:	00000d14 	andeq	r0, r0, r4, lsl sp
    101c:	00026578 	andeq	r6, r2, r8, ror r5
    1020:	00000070 	andeq	r0, r0, r0, ror r0
    1024:	8b080e42 	blhi	204934 <__bss_end+0xd72d4>
    1028:	42018e02 	andmi	r8, r1, #2, 28
    102c:	72040b0c 	andvc	r0, r4, #12, 22	; 0x3000
    1030:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1034:	0000001c 	andeq	r0, r0, ip, lsl r0
    1038:	00000d14 	andeq	r0, r0, r4, lsl sp
    103c:	000265e8 	andeq	r6, r2, r8, ror #11
    1040:	00000188 	andeq	r0, r0, r8, lsl #3
    1044:	8b080e42 	blhi	204954 <__bss_end+0xd72f4>
    1048:	42018e02 	andmi	r8, r1, #2, 28
    104c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1050:	080d0cbe 	stmdaeq	sp, {r1, r2, r3, r4, r5, r7, sl, fp}
    1054:	00000020 	andeq	r0, r0, r0, lsr #32
    1058:	00000d14 	andeq	r0, r0, r4, lsl sp
    105c:	00026770 	andeq	r6, r2, r0, ror r7
    1060:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1064:	8b080e42 	blhi	204974 <__bss_end+0xd7314>
    1068:	42018e02 	andmi	r8, r1, #2, 28
    106c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1070:	0d0c016e 	stfeqs	f0, [ip, #-440]	; 0xfffffe48
    1074:	00000008 	andeq	r0, r0, r8
    1078:	0000001c 	andeq	r0, r0, ip, lsl r0
    107c:	00000d14 	andeq	r0, r0, r4, lsl sp
    1080:	00026a60 	andeq	r6, r2, r0, ror #20
    1084:	00000190 	muleq	r0, r0, r1
    1088:	8b080e42 	blhi	204998 <__bss_end+0xd7338>
    108c:	42018e02 	andmi	r8, r1, #2, 28
    1090:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1094:	080d0cc2 	stmdaeq	sp, {r1, r6, r7, sl, fp}
    1098:	0000001c 	andeq	r0, r0, ip, lsl r0
    109c:	00000d14 	andeq	r0, r0, r4, lsl sp
    10a0:	00026bf0 	strdeq	r6, [r2], -r0
    10a4:	000000f8 	strdeq	r0, [r0], -r8
    10a8:	8b040e42 	blhi	1049b8 <ramdisk+0xd7360>
    10ac:	0b0d4201 	bleq	3518b8 <__bss_end+0x224258>
    10b0:	0d0d7402 	cfstrseq	mvf7, [sp, #-8]
    10b4:	000ecb42 	andeq	ip, lr, r2, asr #22
    10b8:	00000020 	andeq	r0, r0, r0, lsr #32
    10bc:	00000d14 	andeq	r0, r0, r4, lsl sp
    10c0:	00026ce8 	andeq	r6, r2, r8, ror #25
    10c4:	00000244 	andeq	r0, r0, r4, asr #4
    10c8:	8b080e42 	blhi	2049d8 <__bss_end+0xd7378>
    10cc:	42018e02 	andmi	r8, r1, #2, 28
    10d0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    10d4:	0d0c0118 	stfeqs	f0, [ip, #-96]	; 0xffffffa0
    10d8:	00000008 	andeq	r0, r0, r8
    10dc:	0000001c 	andeq	r0, r0, ip, lsl r0
    10e0:	00000d14 	andeq	r0, r0, r4, lsl sp
    10e4:	00026f2c 	andeq	r6, r2, ip, lsr #30
    10e8:	0000015c 	andeq	r0, r0, ip, asr r1
    10ec:	8b080e42 	blhi	2049fc <__bss_end+0xd739c>
    10f0:	42018e02 	andmi	r8, r1, #2, 28
    10f4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    10f8:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
    10fc:	00000020 	andeq	r0, r0, r0, lsr #32
    1100:	00000d14 	andeq	r0, r0, r4, lsl sp
    1104:	00027088 	andeq	r7, r2, r8, lsl #1
    1108:	00000720 	andeq	r0, r0, r0, lsr #14
    110c:	8b080e42 	blhi	204a1c <__bss_end+0xd73bc>
    1110:	42018e02 	andmi	r8, r1, #2, 28
    1114:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1118:	0d0c037c 	stceq	3, cr0, [ip, #-496]	; 0xfffffe10
    111c:	00000008 	andeq	r0, r0, r8
    1120:	0000001c 	andeq	r0, r0, ip, lsl r0
    1124:	00000d14 	andeq	r0, r0, r4, lsl sp
    1128:	000277a8 	andeq	r7, r2, r8, lsr #15
    112c:	000000c8 	andeq	r0, r0, r8, asr #1
    1130:	8b080e42 	blhi	204a40 <__bss_end+0xd73e0>
    1134:	42018e02 	andmi	r8, r1, #2, 28
    1138:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    113c:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
    1140:	0000001c 	andeq	r0, r0, ip, lsl r0
    1144:	00000d14 	andeq	r0, r0, r4, lsl sp
    1148:	00027870 	andeq	r7, r2, r0, ror r8
    114c:	000000fc 	strdeq	r0, [r0], -ip
    1150:	8b080e42 	blhi	204a60 <__bss_end+0xd7400>
    1154:	42018e02 	andmi	r8, r1, #2, 28
    1158:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    115c:	080d0c76 	stmdaeq	sp, {r1, r2, r4, r5, r6, sl, fp}
    1160:	00000020 	andeq	r0, r0, r0, lsr #32
    1164:	00000d14 	andeq	r0, r0, r4, lsl sp
    1168:	0002796c 	andeq	r7, r2, ip, ror #18
    116c:	00000514 	andeq	r0, r0, r4, lsl r5
    1170:	8b080e42 	blhi	204a80 <__bss_end+0xd7420>
    1174:	42018e02 	andmi	r8, r1, #2, 28
    1178:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    117c:	0d0c0282 	sfmeq	f0, 4, [ip, #-520]	; 0xfffffdf8
    1180:	00000008 	andeq	r0, r0, r8
    1184:	00000020 	andeq	r0, r0, r0, lsr #32
    1188:	00000d14 	andeq	r0, r0, r4, lsl sp
    118c:	00027e80 	andeq	r7, r2, r0, lsl #29
    1190:	00000464 	andeq	r0, r0, r4, ror #8
    1194:	8b080e42 	blhi	204aa4 <__bss_end+0xd7444>
    1198:	42018e02 	andmi	r8, r1, #2, 28
    119c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    11a0:	0d0c022c 	sfmeq	f0, 4, [ip, #-176]	; 0xffffff50
    11a4:	00000008 	andeq	r0, r0, r8
    11a8:	00000020 	andeq	r0, r0, r0, lsr #32
    11ac:	00000d14 	andeq	r0, r0, r4, lsl sp
    11b0:	000282e4 	andeq	r8, r2, r4, ror #5
    11b4:	00000528 	andeq	r0, r0, r8, lsr #10
    11b8:	8b080e42 	blhi	204ac8 <__bss_end+0xd7468>
    11bc:	42018e02 	andmi	r8, r1, #2, 28
    11c0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    11c4:	0d0c028e 	sfmeq	f0, 4, [ip, #-568]	; 0xfffffdc8
    11c8:	00000008 	andeq	r0, r0, r8
    11cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    11d0:	00000d14 	andeq	r0, r0, r4, lsl sp
    11d4:	0002880c 	andeq	r8, r2, ip, lsl #16
    11d8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
    11dc:	8b080e42 	blhi	204aec <__bss_end+0xd748c>
    11e0:	42018e02 	andmi	r8, r1, #2, 28
    11e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    11e8:	080d0cd4 	stmdaeq	sp, {r2, r4, r6, r7, sl, fp}
    11ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    11f0:	00000d14 	andeq	r0, r0, r4, lsl sp
    11f4:	000289c4 	andeq	r8, r2, r4, asr #19
    11f8:	00000070 	andeq	r0, r0, r0, ror r0
    11fc:	8b080e42 	blhi	204b0c <__bss_end+0xd74ac>
    1200:	42018e02 	andmi	r8, r1, #2, 28
    1204:	72040b0c 	andvc	r0, r4, #12, 22	; 0x3000
    1208:	00080d0c 	andeq	r0, r8, ip, lsl #26
    120c:	00000020 	andeq	r0, r0, r0, lsr #32
    1210:	00000d14 	andeq	r0, r0, r4, lsl sp
    1214:	00028a34 	andeq	r8, r2, r4, lsr sl
    1218:	00000478 	andeq	r0, r0, r8, ror r4
    121c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1220:	8e028b03 	vmlahi.f64	d8, d2, d3
    1224:	0b0c4201 	bleq	311a30 <__bss_end+0x1e43d0>
    1228:	02360304 	eorseq	r0, r6, #4, 6	; 0x10000000
    122c:	000c0d0c 	andeq	r0, ip, ip, lsl #26
    1230:	0000001c 	andeq	r0, r0, ip, lsl r0
    1234:	00000d14 	andeq	r0, r0, r4, lsl sp
    1238:	00028eac 	andeq	r8, r2, ip, lsr #29
    123c:	00000144 	andeq	r0, r0, r4, asr #2
    1240:	8b080e42 	blhi	204b50 <__bss_end+0xd74f0>
    1244:	42018e02 	andmi	r8, r1, #2, 28
    1248:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    124c:	080d0c9c 	stmdaeq	sp, {r2, r3, r4, r7, sl, fp}
    1250:	0000001c 	andeq	r0, r0, ip, lsl r0
    1254:	00000d14 	andeq	r0, r0, r4, lsl sp
    1258:	00028ff0 	strdeq	r8, [r2], -r0
    125c:	00000054 	andeq	r0, r0, r4, asr r0
    1260:	8b080e42 	blhi	204b70 <__bss_end+0xd7510>
    1264:	42018e02 	andmi	r8, r1, #2, 28
    1268:	64040b0c 	strvs	r0, [r4], #-2828	; 0xfffff4f4
    126c:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1270:	0000001c 	andeq	r0, r0, ip, lsl r0
    1274:	00000d14 	andeq	r0, r0, r4, lsl sp
    1278:	00029044 	andeq	r9, r2, r4, asr #32
    127c:	000000d8 	ldrdeq	r0, [r0], -r8
    1280:	8b080e42 	blhi	204b90 <__bss_end+0xd7530>
    1284:	42018e02 	andmi	r8, r1, #2, 28
    1288:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    128c:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
    1290:	0000001c 	andeq	r0, r0, ip, lsl r0
    1294:	00000d14 	andeq	r0, r0, r4, lsl sp
    1298:	0002911c 	andeq	r9, r2, ip, lsl r1
    129c:	000000ac 	andeq	r0, r0, ip, lsr #1
    12a0:	8b080e42 	blhi	204bb0 <__bss_end+0xd7550>
    12a4:	42018e02 	andmi	r8, r1, #2, 28
    12a8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    12ac:	080d0c50 	stmdaeq	sp, {r4, r6, sl, fp}
    12b0:	00000020 	andeq	r0, r0, r0, lsr #32
    12b4:	00000d14 	andeq	r0, r0, r4, lsl sp
    12b8:	000291c8 	andeq	r9, r2, r8, asr #3
    12bc:	00000288 	andeq	r0, r0, r8, lsl #5
    12c0:	8b080e42 	blhi	204bd0 <__bss_end+0xd7570>
    12c4:	42018e02 	andmi	r8, r1, #2, 28
    12c8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    12cc:	0d0c013e 	stfeqs	f0, [ip, #-248]	; 0xffffff08
    12d0:	00000008 	andeq	r0, r0, r8
    12d4:	00000020 	andeq	r0, r0, r0, lsr #32
    12d8:	00000d14 	andeq	r0, r0, r4, lsl sp
    12dc:	00029450 	andeq	r9, r2, r0, asr r4
    12e0:	00000220 	andeq	r0, r0, r0, lsr #4
    12e4:	8b080e42 	blhi	204bf4 <__bss_end+0xd7594>
    12e8:	42018e02 	andmi	r8, r1, #2, 28
    12ec:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    12f0:	0d0c010a 	stfeqs	f0, [ip, #-40]	; 0xffffffd8
    12f4:	00000008 	andeq	r0, r0, r8
    12f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    12fc:	00000d14 	andeq	r0, r0, r4, lsl sp
    1300:	00029670 	andeq	r9, r2, r0, ror r6
    1304:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1308:	8b080e42 	blhi	204c18 <__bss_end+0xd75b8>
    130c:	42018e02 	andmi	r8, r1, #2, 28
    1310:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1314:	080d0ce2 	stmdaeq	sp, {r1, r5, r6, r7, sl, fp}
    1318:	00000020 	andeq	r0, r0, r0, lsr #32
    131c:	00000d14 	andeq	r0, r0, r4, lsl sp
    1320:	00029840 	andeq	r9, r2, r0, asr #16
    1324:	00000280 	andeq	r0, r0, r0, lsl #5
    1328:	8b080e42 	blhi	204c38 <__bss_end+0xd75d8>
    132c:	42018e02 	andmi	r8, r1, #2, 28
    1330:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1334:	0d0c0138 	stfeqs	f0, [ip, #-224]	; 0xffffff20
    1338:	00000008 	andeq	r0, r0, r8
    133c:	00000020 	andeq	r0, r0, r0, lsr #32
    1340:	00000d14 	andeq	r0, r0, r4, lsl sp
    1344:	00029ac0 	andeq	r9, r2, r0, asr #21
    1348:	0000030c 	andeq	r0, r0, ip, lsl #6
    134c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1350:	8e028b03 	vmlahi.f64	d8, d2, d3
    1354:	0b0c4201 	bleq	311b60 <__bss_end+0x1e4500>
    1358:	01800304 	orreq	r0, r0, r4, lsl #6
    135c:	000c0d0c 	andeq	r0, ip, ip, lsl #26
    1360:	00000020 	andeq	r0, r0, r0, lsr #32
    1364:	00000d14 	andeq	r0, r0, r4, lsl sp
    1368:	00029dcc 	andeq	r9, r2, ip, asr #27
    136c:	00000458 	andeq	r0, r0, r8, asr r4
    1370:	8b080e42 	blhi	204c80 <__bss_end+0xd7620>
    1374:	42018e02 	andmi	r8, r1, #2, 28
    1378:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    137c:	0d0c0222 	sfmeq	f0, 4, [ip, #-136]	; 0xffffff78
    1380:	00000008 	andeq	r0, r0, r8
    1384:	00000020 	andeq	r0, r0, r0, lsr #32
    1388:	00000d14 	andeq	r0, r0, r4, lsl sp
    138c:	0002a224 	andeq	sl, r2, r4, lsr #4
    1390:	00000e94 	muleq	r0, r4, lr
    1394:	8b080e42 	blhi	204ca4 <__bss_end+0xd7644>
    1398:	42018e02 	andmi	r8, r1, #2, 28
    139c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    13a0:	0d0c072a 	stceq	7, cr0, [ip, #-168]	; 0xffffff58
    13a4:	00000008 	andeq	r0, r0, r8
    13a8:	0000000c 	andeq	r0, r0, ip
    13ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    13b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    13bc:	000013a8 	andeq	r1, r0, r8, lsr #7
    13c0:	0002b0b8 	strheq	fp, [r2], -r8
    13c4:	00000044 	andeq	r0, r0, r4, asr #32
    13c8:	8b040e42 	blhi	104cd8 <ramdisk+0xd7680>
    13cc:	0b0d4201 	bleq	351bd8 <__bss_end+0x224578>
    13d0:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
    13d4:	00000ecb 	andeq	r0, r0, fp, asr #29
    13d8:	0000001c 	andeq	r0, r0, ip, lsl r0
    13dc:	000013a8 	andeq	r1, r0, r8, lsr #7
    13e0:	0002b0fc 	strdeq	fp, [r2], -ip
    13e4:	000000d8 	ldrdeq	r0, [r0], -r8
    13e8:	8b080e42 	blhi	204cf8 <__bss_end+0xd7698>
    13ec:	42018e02 	andmi	r8, r1, #2, 28
    13f0:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    13f4:	080d0c58 	stmdaeq	sp, {r3, r4, r6, sl, fp}
    13f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    13fc:	000013a8 	andeq	r1, r0, r8, lsr #7
    1400:	0002b1d4 	ldrdeq	fp, [r2], -r4
    1404:	000000b4 	strheq	r0, [r0], -r4
    1408:	8b080e42 	blhi	204d18 <__bss_end+0xd76b8>
    140c:	42018e02 	andmi	r8, r1, #2, 28
    1410:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1414:	080d0c50 	stmdaeq	sp, {r4, r6, sl, fp}
    1418:	0000001c 	andeq	r0, r0, ip, lsl r0
    141c:	000013a8 	andeq	r1, r0, r8, lsr #7
    1420:	0002b288 	andeq	fp, r2, r8, lsl #5
    1424:	000000b4 	strheq	r0, [r0], -r4
    1428:	8b080e42 	blhi	204d38 <__bss_end+0xd76d8>
    142c:	42018e02 	andmi	r8, r1, #2, 28
    1430:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1434:	080d0c50 	stmdaeq	sp, {r4, r6, sl, fp}
    1438:	0000001c 	andeq	r0, r0, ip, lsl r0
    143c:	000013a8 	andeq	r1, r0, r8, lsr #7
    1440:	0002b33c 	andeq	fp, r2, ip, lsr r3
    1444:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1448:	8b040e42 	blhi	104d58 <ramdisk+0xd7700>
    144c:	0b0d4201 	bleq	351c58 <__bss_end+0x2245f8>
    1450:	0d0d6e02 	stceq	14, cr6, [sp, #-8]
    1454:	000ecb42 	andeq	ip, lr, r2, asr #22
    1458:	0000000c 	andeq	r0, r0, ip
    145c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1460:	7c020001 	stcvc	0, cr0, [r2], {1}
    1464:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1468:	0000001c 	andeq	r0, r0, ip, lsl r0
    146c:	00001458 	andeq	r1, r0, r8, asr r4
    1470:	0002b42c 	andeq	fp, r2, ip, lsr #8
    1474:	00000020 	andeq	r0, r0, r0, lsr #32
    1478:	8b040e42 	blhi	104d88 <ramdisk+0xd7730>
    147c:	0b0d4201 	bleq	351c88 <__bss_end+0x224628>
    1480:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
    1484:	00000ecb 	andeq	r0, r0, fp, asr #29
    1488:	0000000c 	andeq	r0, r0, ip
    148c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1490:	7c010001 	stcvc	0, cr0, [r1], {1}
    1494:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1498:	0000000c 	andeq	r0, r0, ip
    149c:	00001488 	andeq	r1, r0, r8, lsl #9
    14a0:	0002b44c 	andeq	fp, r2, ip, asr #8
    14a4:	000000f4 	strdeq	r0, [r0], -r4
    14a8:	0000000c 	andeq	r0, r0, ip
    14ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    14b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14b8:	00000024 	andeq	r0, r0, r4, lsr #32
    14bc:	000014a8 	andeq	r1, r0, r8, lsr #9
    14c0:	0002b564 	andeq	fp, r2, r4, ror #10
    14c4:	000000ac 	andeq	r0, r0, ip, lsr #1
    14c8:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    14cc:	02018e02 	andeq	r8, r1, #2, 28
    14d0:	c4ce0a46 	strbgt	r0, [lr], #2630	; 0xa46
    14d4:	0b42000e 	bleq	1081514 <__bss_end+0xf53eb4>
    14d8:	0ec4ce48 	cdpeq	14, 12, cr12, cr4, cr8, {2}
    14dc:	00000000 	andeq	r0, r0, r0
    14e0:	0000000c 	andeq	r0, r0, ip
    14e4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14e8:	7c020001 	stcvc	0, cr0, [r2], {1}
    14ec:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14f0:	00000024 	andeq	r0, r0, r4, lsr #32
    14f4:	000014e0 	andeq	r1, r0, r0, ror #9
    14f8:	0002b610 	andeq	fp, r2, r0, lsl r6
    14fc:	00000120 	andeq	r0, r0, r0, lsr #2
    1500:	84140e4e 	ldrhi	r0, [r4], #-3662	; 0xfffff1b2
    1504:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1508:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    150c:	ce620201 	cdpgt	2, 6, cr0, cr2, cr1, {0}
    1510:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
    1514:	0000000e 	andeq	r0, r0, lr
    1518:	0000000c 	andeq	r0, r0, ip
    151c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1520:	7c020001 	stcvc	0, cr0, [r2], {1}
    1524:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1528:	00000034 	andeq	r0, r0, r4, lsr r0
    152c:	00001518 	andeq	r1, r0, r8, lsl r5
    1530:	0002b730 	andeq	fp, r2, r0, lsr r7
    1534:	0000011c 	andeq	r0, r0, ip, lsl r1
    1538:	840c0e62 	strhi	r0, [ip], #-3682	; 0xfffff19e
    153c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1540:	ce4e0201 	cdpgt	2, 4, cr0, cr14, cr1, {0}
    1544:	000ec4c5 	andeq	ip, lr, r5, asr #9
    1548:	840c0e52 	strhi	r0, [ip], #-3666	; 0xfffff1ae
    154c:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    1550:	000e4401 	andeq	r4, lr, r1, lsl #8
    1554:	44cec5c4 	strbmi	ip, [lr], #1476	; 0x5c4
    1558:	03840c0e 	orreq	r0, r4, #3584	; 0xe00
    155c:	018e0285 	orreq	r0, lr, r5, lsl #5
    1560:	0000000c 	andeq	r0, r0, ip
    1564:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1568:	7c020001 	stcvc	0, cr0, [r2], {1}
    156c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1570:	00000034 	andeq	r0, r0, r4, lsr r0
    1574:	00001560 	andeq	r1, r0, r0, ror #10
    1578:	0002b84c 	andeq	fp, r2, ip, asr #16
    157c:	00000150 	andeq	r0, r0, r0, asr r1
    1580:	84100e4c 	ldrhi	r0, [r0], #-3660	; 0xfffff1b4
    1584:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1588:	02018e02 	andeq	r8, r1, #2, 28
    158c:	c4000e40 	strgt	r0, [r0], #-3648	; 0xfffff1c0
    1590:	02cec6c5 	sbceq	ip, lr, #206569472	; 0xc500000
    1594:	84100e52 	ldrhi	r0, [r0], #-3666	; 0xfffff1ae
    1598:	86038504 	strhi	r8, [r3], -r4, lsl #10
    159c:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    15a0:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    15a4:	0000000e 	andeq	r0, r0, lr
    15a8:	0000000c 	andeq	r0, r0, ip
    15ac:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15b0:	7c020001 	stcvc	0, cr0, [r2], {1}
    15b4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15b8:	0000000c 	andeq	r0, r0, ip
    15bc:	000015a8 	andeq	r1, r0, r8, lsr #11
    15c0:	0002b99c 	muleq	r2, ip, r9
    15c4:	00000060 	andeq	r0, r0, r0, rrx
    15c8:	0000000c 	andeq	r0, r0, ip
    15cc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15d0:	7c020001 	stcvc	0, cr0, [r2], {1}
    15d4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15d8:	0000002c 	andeq	r0, r0, ip, lsr #32
    15dc:	000015c8 	andeq	r1, r0, r8, asr #11
    15e0:	0002b9fc 	strdeq	fp, [r2], -ip
    15e4:	000000cc 	andeq	r0, r0, ip, asr #1
    15e8:	84100e54 	ldrhi	r0, [r0], #-3668	; 0xfffff1ac
    15ec:	86038504 	strhi	r8, [r3], -r4, lsl #10
    15f0:	5c018e02 	stcpl	14, cr8, [r1], {2}
    15f4:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    15f8:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    15fc:	ce0a4e0b 	cdpgt	14, 0, cr4, cr10, cr11, {0}
    1600:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1604:	000b4200 	andeq	r4, fp, r0, lsl #4

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	...
   8:	00000020 	andeq	r0, r0, r0, lsr #32
   c:	20500001 	subscs	r0, r0, r1
  10:	ac000000 	stcge	0, cr0, [r0], {-0}
  14:	04000000 	streq	r0, [r0], #-0
  18:	5001f300 	andpl	pc, r1, r0, lsl #6
  1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
  2c:	00002000 	andeq	r2, r0, r0
  30:	51000100 	mrspl	r0, (UNDEF: 16)
  34:	00000020 	andeq	r0, r0, r0, lsr #32
  38:	000000ac 	andeq	r0, r0, ip, lsr #1
  3c:	01f30004 	mvnseq	r0, r4
  40:	00009f51 	andeq	r9, r0, r1, asr pc
	...
  4c:	00010100 	andeq	r0, r1, r0, lsl #2
  50:	00000000 	andeq	r0, r0, r0
  54:	00000002 	andeq	r0, r0, r2
	...
  60:	00000044 	andeq	r0, r0, r4, asr #32
  64:	44520001 	ldrbmi	r0, [r2], #-1
  68:	50000000 	andpl	r0, r0, r0
  6c:	03000000 	movweq	r0, #0
  70:	9f047200 	svcls	0x00047200
  74:	00000050 	andeq	r0, r0, r0, asr r0
  78:	00000060 	andeq	r0, r0, r0, rrx
  7c:	60520001 	subsvs	r0, r2, r1
  80:	70000000 	andvc	r0, r0, r0
  84:	01000000 	mrseq	r0, (UNDEF: 0)
  88:	00705400 	rsbseq	r5, r0, r0, lsl #8
  8c:	00780000 	rsbseq	r0, r8, r0
  90:	000a0000 	andeq	r0, sl, r0
  94:	7020007c 	eorvc	r0, r0, ip, ror r0
  98:	00742200 	rsbseq	r2, r4, r0, lsl #4
  9c:	007c9f22 	rsbseq	r9, ip, r2, lsr #30
  a0:	00900000 	addseq	r0, r0, r0
  a4:	000a0000 	andeq	r0, sl, r0
  a8:	7020007c 	eorvc	r0, r0, ip, ror r0
  ac:	00742200 	rsbseq	r2, r4, r0, lsl #4
  b0:	00989f22 	addseq	r9, r8, r2, lsr #30
  b4:	009c0000 	addseq	r0, ip, r0
  b8:	00010000 	andeq	r0, r1, r0
  bc:	00009c52 	andeq	r9, r0, r2, asr ip
  c0:	0000a000 	andeq	sl, r0, r0
  c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
  c8:	000000a0 	andeq	r0, r0, r0, lsr #1
  cc:	000000a4 	andeq	r0, r0, r4, lsr #1
  d0:	007c000a 	rsbseq	r0, ip, sl
  d4:	22007020 	andcs	r7, r0, #32
  d8:	9f220074 	svcls	0x00220074
	...
  e4:	00000002 	andeq	r0, r0, r2
	...
  f4:	00000020 	andeq	r0, r0, r0, lsr #32
  f8:	20500001 	subscs	r0, r0, r1
  fc:	54000000 	strpl	r0, [r0], #-0
 100:	04000000 	streq	r0, [r0], #-0
 104:	5001f300 	andpl	pc, r1, r0, lsl #6
 108:	0000549f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 10c:	00005c00 	andeq	r5, r0, r0, lsl #24
 110:	50000100 	andpl	r0, r0, r0, lsl #2
 114:	00000070 	andeq	r0, r0, r0, ror r0
 118:	00000090 	muleq	r0, r0, r0
 11c:	017c0003 	cmneq	ip, r3
 120:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 124:	0000a000 	andeq	sl, r0, r0
 128:	50000100 	andpl	r0, r0, r0, lsl #2
 12c:	000000a0 	andeq	r0, r0, r0, lsr #1
 130:	000000ac 	andeq	r0, r0, ip, lsr #1
 134:	017c0003 	cmneq	ip, r3
 138:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 13c:	00000000 	andeq	r0, r0, r0
 140:	00000300 	andeq	r0, r0, r0, lsl #6
 144:	01010000 	mrseq	r0, (UNDEF: 1)
 148:	00000000 	andeq	r0, r0, r0
 14c:	00002000 	andeq	r2, r0, r0
 150:	51000100 	mrspl	r0, (UNDEF: 16)
 154:	00000020 	andeq	r0, r0, r0, lsr #32
 158:	00000038 	andeq	r0, r0, r8, lsr r0
 15c:	38530001 	ldmdacc	r3, {r0}^
 160:	4c000000 	stcmi	0, cr0, [r0], {-0}
 164:	01000000 	mrseq	r0, (UNDEF: 0)
 168:	004c5100 	subeq	r5, ip, r0, lsl #2
 16c:	00540000 	subseq	r0, r4, r0
 170:	00010000 	andeq	r0, r1, r0
 174:	00000053 	andeq	r0, r0, r3, asr r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
 180:	54000000 	strpl	r0, [r0], #-0
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	00005000 	andeq	r5, r0, r0
	...
 194:	00010100 	andeq	r0, r1, r0, lsl #2
 198:	00000028 	andeq	r0, r0, r8, lsr #32
 19c:	00000038 	andeq	r0, r0, r8, lsr r0
 1a0:	38530001 	ldmdacc	r3, {r0}^
 1a4:	4c000000 	stcmi	0, cr0, [r0], {-0}
 1a8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ac:	004c5100 	subeq	r5, ip, r0, lsl #2
 1b0:	00540000 	subseq	r0, r4, r0
 1b4:	00010000 	andeq	r0, r1, r0
 1b8:	00000053 	andeq	r0, r0, r3, asr r0
	...
 1cc:	70000000 	andvc	r0, r0, r0
 1d0:	01000000 	mrseq	r0, (UNDEF: 0)
 1d4:	00705100 	rsbseq	r5, r0, r0, lsl #2
 1d8:	00e40000 	rsceq	r0, r4, r0
 1dc:	00040000 	andeq	r0, r4, r0
 1e0:	9f5101f3 	svcls	0x005101f3
 1e4:	000000e4 	andeq	r0, r0, r4, ror #1
 1e8:	00000100 	andeq	r0, r0, r0, lsl #2
 1ec:	00510001 	subseq	r0, r1, r1
 1f0:	14000001 	strne	r0, [r0], #-1
 1f4:	04000001 	streq	r0, [r0], #-1
 1f8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 1fc:	0001149f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 200:	00012000 	andeq	r2, r1, r0
 204:	51000100 	mrspl	r0, (UNDEF: 16)
	...
 224:	00340000 	eorseq	r0, r4, r0
 228:	00010000 	andeq	r0, r1, r0
 22c:	0000b452 	andeq	fp, r0, r2, asr r4
 230:	0000bc00 	andeq	fp, r0, r0, lsl #24
 234:	52000100 	andpl	r0, r0, #0, 2
 238:	000000bc 	strheq	r0, [r0], -ip
 23c:	000000c0 	andeq	r0, r0, r0, asr #1
 240:	c0530001 	subsgt	r0, r3, r1
 244:	c4000000 	strgt	r0, [r0], #-0
 248:	03000000 	movweq	r0, #0
 24c:	9f7f7200 	svcls	0x007f7200
 250:	000000e4 	andeq	r0, r0, r4, ror #1
 254:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 258:	f0520001 			; <UNDEFINED> instruction: 0xf0520001
 25c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 260:	01000000 	mrseq	r0, (UNDEF: 0)
 264:	00f85300 	rscseq	r5, r8, r0, lsl #6
 268:	01000000 	mrseq	r0, (UNDEF: 0)
 26c:	00030000 	andeq	r0, r3, r0
 270:	149f7f73 	ldrne	r7, [pc], #3955	; 278 <_start-0xfd88>
 274:	1c000001 	stcne	0, cr0, [r0], {1}
 278:	01000001 	tsteq	r0, r1
 27c:	011c5200 	tsteq	ip, r0, lsl #4
 280:	01200000 			; <UNDEFINED> instruction: 0x01200000
 284:	00010000 	andeq	r0, r1, r0
 288:	00000053 	andeq	r0, r0, r3, asr r0
 28c:	00000000 	andeq	r0, r0, r0
 290:	00000200 	andeq	r0, r0, r0, lsl #4
	...
 29c:	b4000000 	strlt	r0, [r0], #-0
 2a0:	01000000 	mrseq	r0, (UNDEF: 0)
 2a4:	00b45000 	adcseq	r5, r4, r0
 2a8:	00cc0000 	sbceq	r0, ip, r0
 2ac:	00010000 	andeq	r0, r1, r0
 2b0:	0000e45c 	andeq	lr, r0, ip, asr r4
 2b4:	0000ec00 	andeq	lr, r0, r0, lsl #24
 2b8:	50000100 	andpl	r0, r0, r0, lsl #2
 2bc:	000000ec 	andeq	r0, r0, ip, ror #1
 2c0:	000000f4 	strdeq	r0, [r0], -r4
 2c4:	005c0001 	subseq	r0, ip, r1
 2c8:	20000001 	andcs	r0, r0, r1
 2cc:	01000001 	tsteq	r0, r1
 2d0:	00005000 	andeq	r5, r0, r0
 2d4:	00000000 	andeq	r0, r0, r0
 2d8:	00030000 	andeq	r0, r3, r0
 2dc:	01000000 	mrseq	r0, (UNDEF: 0)
 2e0:	01000001 	tsteq	r0, r1
 2e4:	00000001 	andeq	r0, r0, r1
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	00000070 	andeq	r0, r0, r0, ror r0
 2f0:	70510001 	subsvc	r0, r1, r1
 2f4:	b4000000 	strlt	r0, [r0], #-0
 2f8:	04000000 	streq	r0, [r0], #-0
 2fc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 300:	0000b49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 304:	0000cc00 	andeq	ip, r0, r0, lsl #24
 308:	51000100 	mrspl	r0, (UNDEF: 16)
 30c:	000000cc 	andeq	r0, r0, ip, asr #1
 310:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 314:	01710003 	cmneq	r1, r3
 318:	0000d09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 31c:	00010000 	andeq	r0, r1, r0
 320:	51000100 	mrspl	r0, (UNDEF: 16)
 324:	00000100 	andeq	r0, r0, r0, lsl #2
 328:	00000104 	andeq	r0, r0, r4, lsl #2
 32c:	01710003 	cmneq	r1, r3
 330:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 334:	00012000 	andeq	r2, r1, r0
 338:	51000100 	mrspl	r0, (UNDEF: 16)
	...
 344:	00780000 	rsbseq	r0, r8, r0
 348:	00940000 	addseq	r0, r4, r0
 34c:	00010000 	andeq	r0, r1, r0
 350:	0000005c 	andeq	r0, r0, ip, asr r0
 354:	00000000 	andeq	r0, r0, r0
 358:	01010000 	mrseq	r0, (UNDEF: 1)
 35c:	01010000 	mrseq	r0, (UNDEF: 1)
 360:	00030202 	andeq	r0, r3, r2, lsl #4
 364:	01010000 	mrseq	r0, (UNDEF: 1)
 368:	34000000 	strcc	r0, [r0], #-0
 36c:	34000000 	strcc	r0, [r0], #-0
 370:	03000000 	movweq	r0, #0
 374:	9f707300 	svcls	0x00707300
 378:	00000034 	andeq	r0, r0, r4, lsr r0
 37c:	00000048 	andeq	r0, r0, r8, asr #32
 380:	74730003 	ldrbtvc	r0, [r3], #-3
 384:	0000489f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 388:	00005800 	andeq	r5, r0, r0, lsl #16
 38c:	73000300 	movwvc	r0, #768	; 0x300
 390:	00589f64 	subseq	r9, r8, r4, ror #30
 394:	00580000 	subseq	r0, r8, r0
 398:	00030000 	andeq	r0, r3, r0
 39c:	589f6873 	ldmpl	pc, {r0, r1, r4, r5, r6, fp, sp, lr}	; <UNPREDICTABLE>
 3a0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
 3a4:	03000000 	movweq	r0, #0
 3a8:	9f6c7300 	svcls	0x006c7300
 3ac:	00000078 	andeq	r0, r0, r8, ror r0
 3b0:	00000094 	muleq	r0, r4, r0
 3b4:	94510001 	ldrbls	r0, [r1], #-1
 3b8:	94000000 	strls	r0, [r0], #-0
 3bc:	01000000 	mrseq	r0, (UNDEF: 0)
 3c0:	00945400 	addseq	r5, r4, r0, lsl #8
 3c4:	00980000 	addseq	r0, r8, r0
 3c8:	00030000 	andeq	r0, r3, r0
 3cc:	989f0474 	ldmls	pc, {r2, r4, r5, r6, sl}	; <UNPREDICTABLE>
 3d0:	b4000000 	strlt	r0, [r0], #-0
 3d4:	01000000 	mrseq	r0, (UNDEF: 0)
 3d8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
 3f0:	000000cc 	andeq	r0, r0, ip, asr #1
 3f4:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
 3f8:	e4000000 	str	r0, [r0], #-0
 3fc:	04000000 	streq	r0, [r0], #-0
 400:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 404:	0000e49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 408:	0000f000 	andeq	pc, r0, r0
 40c:	51000100 	mrspl	r0, (UNDEF: 16)
 410:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 414:	00000104 	andeq	r0, r0, r4, lsl #2
 418:	01f30004 	mvnseq	r0, r4
 41c:	01049f51 	tsteq	r4, r1, asr pc
 420:	011c0000 	tsteq	ip, r0
 424:	00010000 	andeq	r0, r1, r0
 428:	00000051 	andeq	r0, r0, r1, asr r0
	...
 438:	00000100 	andeq	r0, r0, r0, lsl #2
 43c:	01010000 	mrseq	r0, (UNDEF: 1)
 440:	00000000 	andeq	r0, r0, r0
 444:	10000000 	andne	r0, r0, r0
 448:	01000000 	mrseq	r0, (UNDEF: 0)
 44c:	00105200 	andseq	r5, r0, r0, lsl #4
 450:	00200000 	eoreq	r0, r0, r0
 454:	00010000 	andeq	r0, r1, r0
 458:	00002052 	andeq	r2, r0, r2, asr r0
 45c:	00002400 	andeq	r2, r0, r0, lsl #8
 460:	72000300 	andvc	r0, r0, #0, 6
 464:	00249f7f 	eoreq	r9, r4, pc, ror pc
 468:	002c0000 	eoreq	r0, ip, r0
 46c:	00010000 	andeq	r0, r1, r0
 470:	00002c52 	andeq	r2, r0, r2, asr ip
 474:	00003800 	andeq	r3, r0, r0, lsl #16
 478:	72000300 	andvc	r0, r0, #0, 6
 47c:	009c9f7f 	addseq	r9, ip, pc, ror pc
 480:	00a00000 	adceq	r0, r0, r0
 484:	00010000 	andeq	r0, r1, r0
 488:	0000c052 	andeq	ip, r0, r2, asr r0
 48c:	0000c000 	andeq	ip, r0, r0
 490:	52000100 	andpl	r0, r0, #0, 2
 494:	000000c0 	andeq	r0, r0, r0, asr #1
 498:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 49c:	7f720003 	svcvc	0x00720003
 4a0:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 4a4:	00011400 	andeq	r1, r1, r0, lsl #8
 4a8:	52000100 	andpl	r0, r0, #0, 2
	...
 4b4:	02000002 	andeq	r0, r0, #2
 4b8:	00000002 	andeq	r0, r0, r2
 4bc:	00010100 	andeq	r0, r1, r0, lsl #2
 4c0:	00010100 	andeq	r0, r1, r0, lsl #2
	...
 4cc:	00200000 	eoreq	r0, r0, r0
 4d0:	00010000 	andeq	r0, r1, r0
 4d4:	00002050 	andeq	r2, r0, r0, asr r0
 4d8:	00002c00 	andeq	r2, r0, r0, lsl #24
 4dc:	53000100 	movwpl	r0, #256	; 0x100
 4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4e4:	00000030 	andeq	r0, r0, r0, lsr r0
 4e8:	01730003 	cmneq	r3, r3
 4ec:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 4f0:	0000a400 	andeq	sl, r0, r0, lsl #8
 4f4:	53000100 	movwpl	r0, #256	; 0x100
 4f8:	000000c0 	andeq	r0, r0, r0, asr #1
 4fc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 500:	d0530001 	subsle	r0, r3, r1
 504:	d4000000 	strle	r0, [r0], #-0
 508:	03000000 	movweq	r0, #0
 50c:	9f017300 	svcls	0x00017300
 510:	000000d4 	ldrdeq	r0, [r0], -r4
 514:	000000f4 	strdeq	r0, [r0], -r4
 518:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
 51c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 520:	03000000 	movweq	r0, #0
 524:	9f017300 	svcls	0x00017300
 528:	000000f8 	strdeq	r0, [r0], -r8
 52c:	00000108 	andeq	r0, r0, r8, lsl #2
 530:	0c530001 	mrrceq	0, 0, r0, r3, cr1
 534:	14000001 	strne	r0, [r0], #-1
 538:	01000001 	tsteq	r0, r1
 53c:	01145000 	tsteq	r4, r0
 540:	011c0000 	tsteq	ip, r0
 544:	00010000 	andeq	r0, r1, r0
 548:	00000053 	andeq	r0, r0, r3, asr r0
 54c:	00000000 	andeq	r0, r0, r0
 550:	00000100 	andeq	r0, r0, r0, lsl #2
 554:	54000000 	strpl	r0, [r0], #-0
 558:	e4000000 	str	r0, [r0], #-0
 55c:	03000000 	movweq	r0, #0
 560:	9f200800 	svcls	0x00200800
 564:	00000104 	andeq	r0, r0, r4, lsl #2
 568:	0000010c 	andeq	r0, r0, ip, lsl #2
 56c:	20080003 	andcs	r0, r8, r3
 570:	0001149f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 574:	00011c00 	andeq	r1, r1, r0, lsl #24
 578:	08000300 	stmdaeq	r0, {r8, r9}
 57c:	00009f20 	andeq	r9, r0, r0, lsr #30
	...
 58c:	004c0000 	subeq	r0, ip, r0
 590:	00e00000 	rsceq	r0, r0, r0
 594:	00010000 	andeq	r0, r1, r0
 598:	0000e05e 	andeq	lr, r0, lr, asr r0
 59c:	0000e400 	andeq	lr, r0, r0, lsl #8
 5a0:	f3002200 	vhsub.u8	d2, d0, d0
 5a4:	ff085101 			; <UNDEFINED> instruction: 0xff085101
 5a8:	5101f31a 	tstpl	r1, sl, lsl r3	; <UNPREDICTABLE>
 5ac:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
 5b0:	01f32124 	mvnseq	r2, r4, lsr #2
 5b4:	1aff0851 	bne	fffc2700 <_estack+0xf7fa2700>
 5b8:	085101f3 	ldmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8}^
 5bc:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xfffff501
 5c0:	21244021 			; <UNDEFINED> instruction: 0x21244021
 5c4:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 5c8:	00010c00 	andeq	r0, r1, r0, lsl #24
 5cc:	5e000100 	adfpls	f0, f0, f0
 5d0:	00000114 	andeq	r0, r0, r4, lsl r1
 5d4:	0000011c 	andeq	r0, r0, ip, lsl r1
 5d8:	005e0001 	subseq	r0, lr, r1
 5dc:	00000000 	andeq	r0, r0, r0
 5e0:	01000000 	mrseq	r0, (UNDEF: 0)
 5e4:	01010100 	mrseq	r0, (UNDEF: 17)
 5e8:	01010101 	tsteq	r1, r1, lsl #2
 5ec:	00000000 	andeq	r0, r0, r0
 5f0:	01010000 	mrseq	r0, (UNDEF: 1)
 5f4:	00000000 	andeq	r0, r0, r0
 5f8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
 5fc:	70000000 	andvc	r0, r0, r0
 600:	01000000 	mrseq	r0, (UNDEF: 0)
 604:	00705300 	rsbseq	r5, r0, r0, lsl #6
 608:	00740000 	rsbseq	r0, r4, r0
 60c:	00030000 	andeq	r0, r3, r0
 610:	749f747c 	ldrvc	r7, [pc], #1148	; 618 <_start-0xf9e8>
 614:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 618:	03000000 	movweq	r0, #0
 61c:	9f787c00 	svcls	0x00787c00
 620:	00000078 	andeq	r0, r0, r8, ror r0
 624:	0000007c 	andeq	r0, r0, ip, ror r0
 628:	7c7c0003 	ldclvc	0, cr0, [ip], #-12
 62c:	00007c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 630:	00008400 	andeq	r8, r0, r0, lsl #8
 634:	5c000100 	stfpls	f0, [r0], {-0}
 638:	00000084 	andeq	r0, r0, r4, lsl #1
 63c:	00000090 	muleq	r0, r0, r0
 640:	707c0003 	rsbsvc	r0, ip, r3
 644:	00009c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 648:	0000a000 	andeq	sl, r0, r0
 64c:	5c000100 	stfpls	f0, [r0], {-0}
 650:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 654:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 658:	b05c0001 	subslt	r0, ip, r1
 65c:	b4000000 	strlt	r0, [r0], #-0
 660:	03000000 	movweq	r0, #0
 664:	9f047c00 	svcls	0x00047c00
 668:	000000b4 	strheq	r0, [r0], -r4
 66c:	000000e4 	andeq	r0, r0, r4, ror #1
 670:	045c0001 	ldrbeq	r0, [ip], #-1
 674:	0c000001 	stceq	0, cr0, [r0], {1}
 678:	01000001 	tsteq	r0, r1
 67c:	01145c00 	tsteq	r4, r0, lsl #24
 680:	011c0000 	tsteq	ip, r0
 684:	00010000 	andeq	r0, r1, r0
 688:	00000053 	andeq	r0, r0, r3, asr r0
 68c:	00000000 	andeq	r0, r0, r0
 690:	00000600 	andeq	r0, r0, r0, lsl #12
	...
 69c:	cc000000 	stcgt	0, cr0, [r0], {-0}
 6a0:	06000000 	streq	r0, [r0], -r0
 6a4:	08007100 	stmdaeq	r0, {r8, ip, sp, lr}
 6a8:	cc9f1aff 	vldmiagt	pc, {s2-s256}
 6ac:	e4000000 	str	r0, [r0], #-0
 6b0:	07000000 	streq	r0, [r0, -r0]
 6b4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 6b8:	9f1aff08 	svcls	0x001aff08
 6bc:	000000e4 	andeq	r0, r0, r4, ror #1
 6c0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 6c4:	00710006 	rsbseq	r0, r1, r6
 6c8:	9f1aff08 	svcls	0x001aff08
 6cc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 6d0:	00000104 	andeq	r0, r0, r4, lsl #2
 6d4:	01f30007 	mvnseq	r0, r7
 6d8:	1aff0851 	bne	fffc2824 <_estack+0xf7fa2824>
 6dc:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 6e0:	00011c00 	andeq	r1, r1, r0, lsl #24
 6e4:	71000600 	tstvc	r0, r0, lsl #12
 6e8:	1aff0800 	bne	fffc26f0 <_estack+0xf7fa26f0>
 6ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
 700:	00001400 	andeq	r1, r0, r0, lsl #8
 704:	50000100 	andpl	r0, r0, r0, lsl #2
 708:	00000014 	andeq	r0, r0, r4, lsl r0
 70c:	000000c4 	andeq	r0, r0, r4, asr #1
 710:	01f30004 	mvnseq	r0, r4
 714:	00c49f50 	sbceq	r9, r4, r0, asr pc
 718:	00d00000 	sbcseq	r0, r0, r0
 71c:	00010000 	andeq	r0, r1, r0
 720:	0000d050 	andeq	sp, r0, r0, asr r0
 724:	00015000 	andeq	r5, r1, r0
 728:	f3000400 	vshl.u8	d0, d0, d0
 72c:	009f5001 	addseq	r5, pc, r1
	...
 73c:	04000000 	streq	r0, [r0], #-0
 740:	01000000 	mrseq	r0, (UNDEF: 0)
 744:	00045100 	andeq	r5, r4, r0, lsl #2
 748:	01500000 	cmpeq	r0, r0
 74c:	00040000 	andeq	r0, r4, r0
 750:	9f5101f3 	svcls	0x005101f3
	...
 760:	02010000 	andeq	r0, r1, #0
 764:	00000002 	andeq	r0, r0, r2
 768:	01000000 	mrseq	r0, (UNDEF: 0)
 76c:	00000001 	andeq	r0, r0, r1
 770:	00000004 	andeq	r0, r0, r4
 774:	0000004c 	andeq	r0, r0, ip, asr #32
 778:	70500001 	subsvc	r0, r0, r1
 77c:	84000000 	strhi	r0, [r0], #-0
 780:	01000000 	mrseq	r0, (UNDEF: 0)
 784:	00845000 	addeq	r5, r4, r0
 788:	008c0000 	addeq	r0, ip, r0
 78c:	00030000 	andeq	r0, r3, r0
 790:	8c9f7f70 	ldchi	15, cr7, [pc], {112}	; 0x70
 794:	8c000000 	stchi	0, cr0, [r0], {-0}
 798:	03000000 	movweq	r0, #0
 79c:	9f017000 	svcls	0x00017000
 7a0:	0000008c 	andeq	r0, r0, ip, lsl #1
 7a4:	000000c0 	andeq	r0, r0, r0, asr #1
 7a8:	c0500001 	subsgt	r0, r0, r1
 7ac:	c4000000 	strgt	r0, [r0], #-0
 7b0:	03000000 	movweq	r0, #0
 7b4:	9f7f7300 	svcls	0x007f7300
 7b8:	000000c4 	andeq	r0, r0, r4, asr #1
 7bc:	0000010c 	andeq	r0, r0, ip, lsl #2
 7c0:	20500001 	subscs	r0, r0, r1
 7c4:	2c000001 	stccs	0, cr0, [r0], {1}
 7c8:	01000001 	tsteq	r0, r1
 7cc:	012c5000 			; <UNDEFINED> instruction: 0x012c5000
 7d0:	01300000 	teqeq	r0, r0
 7d4:	00030000 	andeq	r0, r3, r0
 7d8:	309f0170 	addscc	r0, pc, r0, ror r1	; <UNPREDICTABLE>
 7dc:	3c000001 	stccc	0, cr0, [r0], {1}
 7e0:	01000001 	tsteq	r0, r1
 7e4:	00005000 	andeq	r5, r0, r0
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	00010000 	andeq	r0, r1, r0
 7f0:	00000004 	andeq	r0, r0, r4
 7f4:	00000150 	andeq	r0, r0, r0, asr r1
 7f8:	01f30004 	mvnseq	r0, r4
 7fc:	00009f51 	andeq	r9, r0, r1, asr pc
 800:	00000000 	andeq	r0, r0, r0
 804:	00010000 	andeq	r0, r1, r0
 808:	00000000 	andeq	r0, r0, r0
 80c:	00140000 	andseq	r0, r4, r0
 810:	00200000 	eoreq	r0, r0, r0
 814:	00010000 	andeq	r0, r1, r0
 818:	00002051 	andeq	r2, r0, r1, asr r0
 81c:	00009800 	andeq	r9, r0, r0, lsl #16
 820:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
 824:	0000013c 	andeq	r0, r0, ip, lsr r1
 828:	00000144 	andeq	r0, r0, r4, asr #2
 82c:	44550001 	ldrbmi	r0, [r5], #-1
 830:	50000001 	andpl	r0, r0, r1
 834:	12000001 	andne	r0, r0, #1
 838:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
 83c:	38007124 	stmdacc	r0, {r2, r5, r8, ip, sp, lr}
 840:	21007124 	tstcs	r0, r4, lsr #2
 844:	71212440 			; <UNDEFINED> instruction: 0x71212440
 848:	009f2100 	addseq	r2, pc, r0, lsl #2
 84c:	00000000 	andeq	r0, r0, r0
 850:	02000000 	andeq	r0, r0, #0
 854:	01010101 	tsteq	r1, r1, lsl #2
 858:	14000000 	strne	r0, [r0], #-0
 85c:	20000000 	andcs	r0, r0, r0
 860:	02000000 	andeq	r0, r0, #0
 864:	209f3800 	addscs	r3, pc, r0, lsl #16
 868:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
 86c:	02000000 	andeq	r0, r0, #0
 870:	289f4000 	ldmcs	pc, {lr}	; <UNPREDICTABLE>
 874:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
 878:	03000000 	movweq	r0, #0
 87c:	9f200800 	svcls	0x00200800
 880:	0000013c 	andeq	r0, r0, ip, lsr r1
 884:	00000150 	andeq	r0, r0, r0, asr r1
 888:	20080003 	andcs	r0, r8, r3
 88c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 890:	00000000 	andeq	r0, r0, r0
 894:	01010200 	mrseq	r0, R9_usr
 898:	00000000 	andeq	r0, r0, r0
 89c:	00000101 	andeq	r0, r0, r1, lsl #2
 8a0:	00002800 	andeq	r2, r0, r0, lsl #16
 8a4:	00004c00 	andeq	r4, r0, r0, lsl #24
 8a8:	50000100 	andpl	r0, r0, r0, lsl #2
 8ac:	0000004c 	andeq	r0, r0, ip, asr #32
 8b0:	00000050 	andeq	r0, r0, r0, asr r0
 8b4:	04700003 	ldrbteq	r0, [r0], #-3
 8b8:	0000509f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 8bc:	00008000 	andeq	r8, r0, r0
 8c0:	50000100 	andpl	r0, r0, r0, lsl #2
 8c4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 8c8:	0000010c 	andeq	r0, r0, ip, lsl #2
 8cc:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 8d0:	10000001 	andne	r0, r0, r1
 8d4:	03000001 	movweq	r0, #1
 8d8:	9f047000 	svcls	0x00047000
 8dc:	00000110 	andeq	r0, r0, r0, lsl r1
 8e0:	0000012c 	andeq	r0, r0, ip, lsr #2
 8e4:	00500001 	subseq	r0, r0, r1
	...
 8f0:	9c000000 	stcls	0, cr0, [r0], {-0}
 8f4:	fc0002b9 	stc2	2, cr0, [r0], {185}	; 0xb9
 8f8:	010002b9 			; <UNDEFINED> instruction: 0x010002b9
 8fc:	b9fc5000 	ldmiblt	ip!, {ip, lr}^
 900:	b9fc0002 	ldmiblt	ip!, {r1}^
 904:	00040002 	andeq	r0, r4, r2
 908:	9f5001f3 	svcls	0x005001f3
	...
 920:	0000002c 	andeq	r0, r0, ip, lsr #32
 924:	2c510001 	mrrccs	0, 0, r0, r1, cr1
 928:	84000000 	strhi	r0, [r0], #-0
 92c:	04000000 	streq	r0, [r0], #-0
 930:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 934:	0000849f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 938:	00009400 	andeq	r9, r0, r0, lsl #8
 93c:	51000100 	mrspl	r0, (UNDEF: 16)
 940:	00000094 	muleq	r0, r4, r0
 944:	000000cc 	andeq	r0, r0, ip, asr #1
 948:	01f30004 	mvnseq	r0, r4
 94c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
 958:	01000000 	mrseq	r0, (UNDEF: 0)
	...
 964:	002c0000 	eoreq	r0, ip, r0
 968:	00010000 	andeq	r0, r1, r0
 96c:	00004852 	andeq	r4, r0, r2, asr r8
 970:	00005400 	andeq	r5, r0, r0, lsl #8
 974:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
 978:	00000064 	andeq	r0, r0, r4, rrx
 97c:	00000064 	andeq	r0, r0, r4, rrx
 980:	84540001 	ldrbhi	r0, [r4], #-1
 984:	94000000 	strls	r0, [r0], #-0
 988:	01000000 	mrseq	r0, (UNDEF: 0)
 98c:	00985200 	addseq	r5, r8, r0, lsl #4
 990:	00b00000 	adcseq	r0, r0, r0
 994:	00030000 	andeq	r0, r3, r0
 998:	b09f7c72 	addslt	r7, pc, r2, ror ip	; <UNPREDICTABLE>
 99c:	cc000000 	stcgt	0, cr0, [r0], {-0}
 9a0:	01000000 	mrseq	r0, (UNDEF: 0)
 9a4:	00005200 	andeq	r5, r0, r0, lsl #4
 9a8:	00000000 	andeq	r0, r0, r0
 9ac:	00020000 	andeq	r0, r2, r0
 9b0:	00010100 	andeq	r0, r1, r0, lsl #2
 9b4:	01000001 	tsteq	r0, r1
 9b8:	00000001 	andeq	r0, r0, r1
 9bc:	00000000 	andeq	r0, r0, r0
 9c0:	00340000 	eorseq	r0, r4, r0
 9c4:	00010000 	andeq	r0, r1, r0
 9c8:	00003450 	andeq	r3, r0, r0, asr r4
 9cc:	00004800 	andeq	r4, r0, r0, lsl #16
 9d0:	5c000100 	stfpls	f0, [r0], {-0}
 9d4:	00000048 	andeq	r0, r0, r8, asr #32
 9d8:	00000054 	andeq	r0, r0, r4, asr r0
 9dc:	54530001 	ldrbpl	r0, [r3], #-1
 9e0:	5c000000 	stcpl	0, cr0, [r0], {-0}
 9e4:	01000000 	mrseq	r0, (UNDEF: 0)
 9e8:	00645c00 	rsbeq	r5, r4, r0, lsl #24
 9ec:	00700000 	rsbseq	r0, r0, r0
 9f0:	00010000 	andeq	r0, r1, r0
 9f4:	00007053 	andeq	r7, r0, r3, asr r0
 9f8:	00007400 	andeq	r7, r0, r0, lsl #8
 9fc:	73000300 	movwvc	r0, #768	; 0x300
 a00:	00749f01 	rsbseq	r9, r4, r1, lsl #30
 a04:	007c0000 	rsbseq	r0, ip, r0
 a08:	00010000 	andeq	r0, r1, r0
 a0c:	00008453 	andeq	r8, r0, r3, asr r4
 a10:	0000cc00 	andeq	ip, r0, r0, lsl #24
 a14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 a20:	00000003 	andeq	r0, r0, r3
 a24:	01000001 	tsteq	r0, r1
 a28:	00000001 	andeq	r0, r0, r1
 a2c:	002c0000 	eoreq	r0, ip, r0
 a30:	00010000 	andeq	r0, r1, r0
 a34:	00008451 	andeq	r8, r0, r1, asr r4
 a38:	00009400 	andeq	r9, r0, r0, lsl #8
 a3c:	51000100 	mrspl	r0, (UNDEF: 16)
 a40:	00000094 	muleq	r0, r4, r0
 a44:	0000009c 	muleq	r0, ip, r0
 a48:	9c530001 	mrrcls	0, 0, r0, r3, cr1
 a4c:	b0000000 	andlt	r0, r0, r0
 a50:	01000000 	mrseq	r0, (UNDEF: 0)
 a54:	00b05100 	adcseq	r5, r0, r0, lsl #2
 a58:	00cc0000 	sbceq	r0, ip, r0
 a5c:	00010000 	andeq	r0, r1, r0
 a60:	00000053 	andeq	r0, r0, r3, asr r0
	...
 a6c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
 a70:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 a74:	01000000 	mrseq	r0, (UNDEF: 0)
 a78:	00b85c00 	adcseq	r5, r8, r0, lsl #24
 a7c:	00bc0000 	adcseq	r0, ip, r0
 a80:	00030000 	andeq	r0, r3, r0
 a84:	bc9f047c 	cfldrslt	mvf0, [pc], {124}	; 0x7c
 a88:	cc000000 	stcgt	0, cr0, [r0], {-0}
 a8c:	01000000 	mrseq	r0, (UNDEF: 0)
 a90:	00005c00 	andeq	r5, r0, r0, lsl #24
	...
 a9c:	00010100 	andeq	r0, r1, r0, lsl #2
 aa0:	00000098 	muleq	r0, r8, r0
 aa4:	0000009c 	muleq	r0, ip, r0
 aa8:	9c530001 	mrrcls	0, 0, r0, r3, cr1
 aac:	b0000000 	andlt	r0, r0, r0
 ab0:	01000000 	mrseq	r0, (UNDEF: 0)
 ab4:	00b05100 	adcseq	r5, r0, r0, lsl #2
 ab8:	00cc0000 	sbceq	r0, ip, r0
 abc:	00010000 	andeq	r0, r1, r0
 ac0:	00000053 	andeq	r0, r0, r3, asr r0
 ac4:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0002b99c 	muleq	r2, ip, r9
   4:	0002b9fc 	strdeq	fp, [r2], -ip
	...
