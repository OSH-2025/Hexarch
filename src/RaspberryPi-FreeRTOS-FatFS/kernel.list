
kernel.elf:     file format elf32-littlearm


Disassembly of section .init:

00010000 <_start>:
   10000:	e59ff018 	ldr	pc, [pc, #24]	; 10020 <reset_handler>
   10004:	e59ff018 	ldr	pc, [pc, #24]	; 10024 <undefined_handler>
   10008:	e59ff018 	ldr	pc, [pc, #24]	; 10028 <swi_handler>
   1000c:	e59ff018 	ldr	pc, [pc, #24]	; 1002c <prefetch_handler>
   10010:	e59ff018 	ldr	pc, [pc, #24]	; 10030 <data_handler>
   10014:	e59ff018 	ldr	pc, [pc, #24]	; 10034 <unused_handler>
   10018:	e59ff018 	ldr	pc, [pc, #24]	; 10038 <irq_handler>
   1001c:	e59ff018 	ldr	pc, [pc, #24]	; 1003c <fiq_handler>

00010020 <reset_handler>:
   10020:	00010040 	andeq	r0, r1, r0, asr #32

00010024 <undefined_handler>:
   10024:	000242ec 	andeq	r4, r2, ip, ror #5

00010028 <swi_handler>:
   10028:	000203dc 	ldrdeq	r0, [r2], -ip

0001002c <prefetch_handler>:
   1002c:	000242f0 	strdeq	r4, [r2], -r0

00010030 <data_handler>:
   10030:	000242f4 	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>

00010034 <unused_handler>:
   10034:	000242f8 	strdeq	r4, [r2], -r8

00010038 <irq_handler>:
   10038:	00020490 	muleq	r2, r0, r4

0001003c <fiq_handler>:
   1003c:	000242fc 	strdeq	r4, [r2], -ip

00010040 <reset>:
   10040:	e3a00801 	mov	r0, #65536	; 0x10000
   10044:	e3a01000 	mov	r1, #0
   10048:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
   1004c:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10050:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10054:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
   10058:	e3a000d2 	mov	r0, #210	; 0xd2
   1005c:	e121f000 	msr	CPSR_c, r0
   10060:	e3a0d902 	mov	sp, #32768	; 0x8000
   10064:	e3a000d1 	mov	r0, #209	; 0xd1
   10068:	e121f000 	msr	CPSR_c, r0
   1006c:	e3a0d901 	mov	sp, #16384	; 0x4000
   10070:	e3a000d3 	mov	r0, #211	; 0xd3
   10074:	e121f000 	msr	CPSR_c, r0
   10078:	e3a0d302 	mov	sp, #134217728	; 0x8000000
   1007c:	e59f0018 	ldr	r0, [pc, #24]	; 1009c <zero_loop+0x14>
   10080:	e59f1018 	ldr	r1, [pc, #24]	; 100a0 <zero_loop+0x18>
   10084:	e3a02000 	mov	r2, #0

00010088 <zero_loop>:
   10088:	e1500001 	cmp	r0, r1
   1008c:	b4802004 	strlt	r2, [r0], #4
   10090:	bafffffc 	blt	10088 <zero_loop>
   10094:	eb004d66 	bl	23634 <irqBlock>
   10098:	ea005272 	b	24a68 <main>
   1009c:	0002bef0 	strdeq	fp, [r2], -r0
   100a0:	000ad2d8 	ldrdeq	sp, [sl], -r8

Disassembly of section .text:

00020000 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
   20000:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20004:	e28db000 	add	fp, sp, #0
   20008:	e24dd01c 	sub	sp, sp, #28
   2000c:	e50b0010 	str	r0, [fp, #-16]
   20010:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   20014:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
portSTACK_TYPE *pxOriginalTOS;

	pxOriginalTOS = pxTopOfStack;
   20018:	e51b3010 	ldr	r3, [fp, #-16]
   2001c:	e50b3008 	str	r3, [fp, #-8]

	/* To ensure asserts in tasks.c don't fail, although in this case the assert
	is not really required. */
	pxTopOfStack--;
   20020:	e51b3010 	ldr	r3, [fp, #-16]
   20024:	e2433004 	sub	r3, r3, #4
   20028:	e50b3010 	str	r3, [fp, #-16]
	expected by the portRESTORE_CONTEXT() macro. */

	/* First on the stack is the return address - which in this case is the
	start of the task.  The offset is added to make the return address appear
	as it would within an IRQ ISR. */
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE;		
   2002c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20030:	e2832004 	add	r2, r3, #4
   20034:	e51b3010 	ldr	r3, [fp, #-16]
   20038:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   2003c:	e51b3010 	ldr	r3, [fp, #-16]
   20040:	e2433004 	sub	r3, r3, #4
   20044:	e50b3010 	str	r3, [fp, #-16]

	*pxTopOfStack = ( portSTACK_TYPE ) 0xaaaaaaaa;	/* R14 */
   20048:	e51b3010 	ldr	r3, [fp, #-16]
   2004c:	e59f21b8 	ldr	r2, [pc, #440]	; 2020c <pxPortInitialiseStack+0x20c>
   20050:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20054:	e51b3010 	ldr	r3, [fp, #-16]
   20058:	e2433004 	sub	r3, r3, #4
   2005c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) pxOriginalTOS; /* Stack used when task starts goes in R13. */
   20060:	e51b2008 	ldr	r2, [fp, #-8]
   20064:	e51b3010 	ldr	r3, [fp, #-16]
   20068:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   2006c:	e51b3010 	ldr	r3, [fp, #-16]
   20070:	e2433004 	sub	r3, r3, #4
   20074:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12121212;	/* R12 */
   20078:	e51b3010 	ldr	r3, [fp, #-16]
   2007c:	e59f218c 	ldr	r2, [pc, #396]	; 20210 <pxPortInitialiseStack+0x210>
   20080:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20084:	e51b3010 	ldr	r3, [fp, #-16]
   20088:	e2433004 	sub	r3, r3, #4
   2008c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11111111;	/* R11 */
   20090:	e51b3010 	ldr	r3, [fp, #-16]
   20094:	e59f2178 	ldr	r2, [pc, #376]	; 20214 <pxPortInitialiseStack+0x214>
   20098:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2009c:	e51b3010 	ldr	r3, [fp, #-16]
   200a0:	e2433004 	sub	r3, r3, #4
   200a4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10101010;	/* R10 */
   200a8:	e51b3010 	ldr	r3, [fp, #-16]
   200ac:	e59f2164 	ldr	r2, [pc, #356]	; 20218 <pxPortInitialiseStack+0x218>
   200b0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200b4:	e51b3010 	ldr	r3, [fp, #-16]
   200b8:	e2433004 	sub	r3, r3, #4
   200bc:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09090909;	/* R9 */
   200c0:	e51b3010 	ldr	r3, [fp, #-16]
   200c4:	e59f2150 	ldr	r2, [pc, #336]	; 2021c <pxPortInitialiseStack+0x21c>
   200c8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200cc:	e51b3010 	ldr	r3, [fp, #-16]
   200d0:	e2433004 	sub	r3, r3, #4
   200d4:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08080808;	/* R8 */
   200d8:	e51b3010 	ldr	r3, [fp, #-16]
   200dc:	e59f213c 	ldr	r2, [pc, #316]	; 20220 <pxPortInitialiseStack+0x220>
   200e0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200e4:	e51b3010 	ldr	r3, [fp, #-16]
   200e8:	e2433004 	sub	r3, r3, #4
   200ec:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07070707;	/* R7 */
   200f0:	e51b3010 	ldr	r3, [fp, #-16]
   200f4:	e59f2128 	ldr	r2, [pc, #296]	; 20224 <pxPortInitialiseStack+0x224>
   200f8:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   200fc:	e51b3010 	ldr	r3, [fp, #-16]
   20100:	e2433004 	sub	r3, r3, #4
   20104:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06060606;	/* R6 */
   20108:	e51b3010 	ldr	r3, [fp, #-16]
   2010c:	e59f2114 	ldr	r2, [pc, #276]	; 20228 <pxPortInitialiseStack+0x228>
   20110:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20114:	e51b3010 	ldr	r3, [fp, #-16]
   20118:	e2433004 	sub	r3, r3, #4
   2011c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05050505;	/* R5 */
   20120:	e51b3010 	ldr	r3, [fp, #-16]
   20124:	e59f2100 	ldr	r2, [pc, #256]	; 2022c <pxPortInitialiseStack+0x22c>
   20128:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2012c:	e51b3010 	ldr	r3, [fp, #-16]
   20130:	e2433004 	sub	r3, r3, #4
   20134:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04040404;	/* R4 */
   20138:	e51b3010 	ldr	r3, [fp, #-16]
   2013c:	e59f20ec 	ldr	r2, [pc, #236]	; 20230 <pxPortInitialiseStack+0x230>
   20140:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20144:	e51b3010 	ldr	r3, [fp, #-16]
   20148:	e2433004 	sub	r3, r3, #4
   2014c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03030303;	/* R3 */
   20150:	e51b3010 	ldr	r3, [fp, #-16]
   20154:	e59f20d8 	ldr	r2, [pc, #216]	; 20234 <pxPortInitialiseStack+0x234>
   20158:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2015c:	e51b3010 	ldr	r3, [fp, #-16]
   20160:	e2433004 	sub	r3, r3, #4
   20164:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02020202;	/* R2 */
   20168:	e51b3010 	ldr	r3, [fp, #-16]
   2016c:	e59f20c4 	ldr	r2, [pc, #196]	; 20238 <pxPortInitialiseStack+0x238>
   20170:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   20174:	e51b3010 	ldr	r3, [fp, #-16]
   20178:	e2433004 	sub	r3, r3, #4
   2017c:	e50b3010 	str	r3, [fp, #-16]
	*pxTopOfStack = ( portSTACK_TYPE ) 0x01010101;	/* R1 */
   20180:	e51b3010 	ldr	r3, [fp, #-16]
   20184:	e59f20b0 	ldr	r2, [pc, #176]	; 2023c <pxPortInitialiseStack+0x23c>
   20188:	e5832000 	str	r2, [r3]
	pxTopOfStack--;	
   2018c:	e51b3010 	ldr	r3, [fp, #-16]
   20190:	e2433004 	sub	r3, r3, #4
   20194:	e50b3010 	str	r3, [fp, #-16]

	/* When the task starts it will expect to find the function parameter in
	R0. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters; /* R0 */
   20198:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2019c:	e51b3010 	ldr	r3, [fp, #-16]
   201a0:	e5832000 	str	r2, [r3]
	pxTopOfStack--;
   201a4:	e51b3010 	ldr	r3, [fp, #-16]
   201a8:	e2433004 	sub	r3, r3, #4
   201ac:	e50b3010 	str	r3, [fp, #-16]

	/* The last thing onto the stack is the status register, which is set for
	system mode, with interrupts enabled. */
	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_SPSR;
   201b0:	e51b3010 	ldr	r3, [fp, #-16]
   201b4:	e3a0201f 	mov	r2, #31
   201b8:	e5832000 	str	r2, [r3]

	if( ( ( unsigned long ) pxCode & 0x01UL ) != 0x00 )
   201bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   201c0:	e2033001 	and	r3, r3, #1
   201c4:	e3530000 	cmp	r3, #0
   201c8:	0a000004 	beq	201e0 <pxPortInitialiseStack+0x1e0>
	{
		/* We want the task to start in thumb mode. */
		*pxTopOfStack |= portTHUMB_MODE_BIT;
   201cc:	e51b3010 	ldr	r3, [fp, #-16]
   201d0:	e5933000 	ldr	r3, [r3]
   201d4:	e3832020 	orr	r2, r3, #32
   201d8:	e51b3010 	ldr	r3, [fp, #-16]
   201dc:	e5832000 	str	r2, [r3]
	}

	pxTopOfStack--;
   201e0:	e51b3010 	ldr	r3, [fp, #-16]
   201e4:	e2433004 	sub	r3, r3, #4
   201e8:	e50b3010 	str	r3, [fp, #-16]

	/* Some optimisation levels use the stack differently to others.  This 
	means the interrupt flags cannot always be stored on the stack and will
	instead be stored in a variable, which is then saved as part of the
	tasks context. */
	*pxTopOfStack = portNO_CRITICAL_SECTION_NESTING;
   201ec:	e51b3010 	ldr	r3, [fp, #-16]
   201f0:	e3a02000 	mov	r2, #0
   201f4:	e5832000 	str	r2, [r3]

	return pxTopOfStack;
   201f8:	e51b3010 	ldr	r3, [fp, #-16]
}
   201fc:	e1a00003 	mov	r0, r3
   20200:	e28bd000 	add	sp, fp, #0
   20204:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20208:	e12fff1e 	bx	lr
   2020c:	aaaaaaaa 	bge	feacacbc <_estack+0xf6aaacbc>
   20210:	12121212 	andsne	r1, r2, #536870913	; 0x20000001
   20214:	11111111 	tstne	r1, r1, lsl r1
   20218:	10101010 	andsne	r1, r0, r0, lsl r0
   2021c:	09090909 	stmdbeq	r9, {r0, r3, r8, fp}
   20220:	08080808 	stmdaeq	r8, {r3, fp}
   20224:	07070707 	streq	r0, [r7, -r7, lsl #14]
   20228:	06060606 	streq	r0, [r6], -r6, lsl #12
   2022c:	05050505 	streq	r0, [r5, #-1285]	; 0xfffffafb
   20230:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
   20234:	03030303 	movweq	r0, #13059	; 0x3303
   20238:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
   2023c:	01010101 	tsteq	r1, r1, lsl #2

00020240 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
   20240:	e92d4800 	push	{fp, lr}
   20244:	e28db004 	add	fp, sp, #4
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   20248:	eb000017 	bl	202ac <prvSetupTimerInterrupt>

	/* Start the first task. */
	vPortISRStartFirstTask();	
   2024c:	eb00003c 	bl	20344 <vPortISRStartFirstTask>

	/* Should not get here! */
	return 0;
   20250:	e3a03000 	mov	r3, #0
}
   20254:	e1a00003 	mov	r0, r3
   20258:	e8bd8800 	pop	{fp, pc}

0002025c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
   2025c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20260:	e28db000 	add	fp, sp, #0
	/* It is unlikely that the ARM port will require this function as there
	is nothing to return to.  */
}
   20264:	e320f000 	nop	{0}
   20268:	e28bd000 	add	sp, fp, #0
   2026c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20270:	e12fff1e 	bx	lr

00020274 <vTickISR>:
 *	as thats done in the bottom-half of the ISR.
 *
 *	See bt_interrupts.c in the RaspberryPi Drivers folder.
 */
void vTickISR (unsigned int nIRQ, void *pParam)
{
   20274:	e92d4800 	push	{fp, lr}
   20278:	e28db004 	add	fp, sp, #4
   2027c:	e24dd008 	sub	sp, sp, #8
   20280:	e50b0008 	str	r0, [fp, #-8]
   20284:	e50b100c 	str	r1, [fp, #-12]
	vTaskIncrementTick();
   20288:	eb0009af 	bl	2294c <vTaskIncrementTick>

	#if configUSE_PREEMPTION == 1
	vTaskSwitchContext();
   2028c:	eb000a82 	bl	22c9c <vTaskSwitchContext>
	#endif

	pRegs->CLI = 0;			// Acknowledge the timer interrupt.
   20290:	e59f3010 	ldr	r3, [pc, #16]	; 202a8 <vTickISR+0x34>
   20294:	e3a02000 	mov	r2, #0
   20298:	e583200c 	str	r2, [r3, #12]
}
   2029c:	e320f000 	nop	{0}
   202a0:	e24bd004 	sub	sp, fp, #4
   202a4:	e8bd8800 	pop	{fp, pc}
   202a8:	2000b400 	andcs	fp, r0, r0, lsl #8

000202ac <prvSetupTimerInterrupt>:

/*
 * Setup the timer 0 to generate the tick interrupts at the required frequency.
 */
static void prvSetupTimerInterrupt( void )
{
   202ac:	e92d4800 	push	{fp, lr}
   202b0:	e28db004 	add	fp, sp, #4
   202b4:	e24dd008 	sub	sp, sp, #8
	unsigned long ulCompareMatch;
	

	/* Calculate the match value required for our wanted tick rate. */
	ulCompareMatch = 1000000 / configTICK_RATE_HZ;
   202b8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
   202bc:	e50b3008 	str	r3, [fp, #-8]
	{
		ulCompareMatch /= ( portPRESCALE_VALUE + 1 );
	}
	#endif

	irqBlock();
   202c0:	eb000cdb 	bl	23634 <irqBlock>

	pRegs->CTL = 0x003E0000;
   202c4:	e59f3068 	ldr	r3, [pc, #104]	; 20334 <prvSetupTimerInterrupt+0x88>
   202c8:	e3a0283e 	mov	r2, #4063232	; 0x3e0000
   202cc:	e5832008 	str	r2, [r3, #8]
	pRegs->LOD = 1000 - 1;
   202d0:	e59f305c 	ldr	r3, [pc, #92]	; 20334 <prvSetupTimerInterrupt+0x88>
   202d4:	e59f205c 	ldr	r2, [pc, #92]	; 20338 <prvSetupTimerInterrupt+0x8c>
   202d8:	e5832000 	str	r2, [r3]
	pRegs->RLD = 1000 - 1;
   202dc:	e59f3050 	ldr	r3, [pc, #80]	; 20334 <prvSetupTimerInterrupt+0x88>
   202e0:	e59f2050 	ldr	r2, [pc, #80]	; 20338 <prvSetupTimerInterrupt+0x8c>
   202e4:	e5832018 	str	r2, [r3, #24]
	pRegs->DIV = portTIMER_PRESCALE;
   202e8:	e59f3044 	ldr	r3, [pc, #68]	; 20334 <prvSetupTimerInterrupt+0x88>
   202ec:	e3a020f9 	mov	r2, #249	; 0xf9
   202f0:	e583201c 	str	r2, [r3, #28]
	pRegs->CLI = 0;
   202f4:	e59f3038 	ldr	r3, [pc, #56]	; 20334 <prvSetupTimerInterrupt+0x88>
   202f8:	e3a02000 	mov	r2, #0
   202fc:	e583200c 	str	r2, [r3, #12]
	pRegs->CTL = 0x003E00A2;
   20300:	e59f302c 	ldr	r3, [pc, #44]	; 20334 <prvSetupTimerInterrupt+0x88>
   20304:	e59f2030 	ldr	r2, [pc, #48]	; 2033c <prvSetupTimerInterrupt+0x90>
   20308:	e5832008 	str	r2, [r3, #8]

	irqRegister(64, vTickISR, NULL);
   2030c:	e3a02000 	mov	r2, #0
   20310:	e59f1028 	ldr	r1, [pc, #40]	; 20340 <prvSetupTimerInterrupt+0x94>
   20314:	e3a00040 	mov	r0, #64	; 0x40
   20318:	eb000ccc 	bl	23650 <irqRegister>

	irqEnable(64);
   2031c:	e3a00040 	mov	r0, #64	; 0x40
   20320:	eb000ce3 	bl	236b4 <irqEnable>

	irqUnblock();
   20324:	eb000cbb 	bl	23618 <irqUnblock>
}
   20328:	e320f000 	nop	{0}
   2032c:	e24bd004 	sub	sp, fp, #4
   20330:	e8bd8800 	pop	{fp, pc}
   20334:	2000b400 	andcs	fp, r0, r0, lsl #8
   20338:	000003e7 	andeq	r0, r0, r7, ror #7
   2033c:	003e00a2 	eorseq	r0, lr, r2, lsr #1
   20340:	00020274 	andeq	r0, r2, r4, ror r2

00020344 <vPortISRStartFirstTask>:
/*-----------------------------------------------------------*/

int g_bStarted = 0;

void vPortISRStartFirstTask( void )
{
   20344:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20348:	e28db000 	add	fp, sp, #0
	 *	Change from System to IRQ mode.
	 *
	 *
	 */

	g_bStarted++;
   2034c:	e59f307c 	ldr	r3, [pc, #124]	; 203d0 <vPortISRStartFirstTask+0x8c>
   20350:	e5933000 	ldr	r3, [r3]
   20354:	e2833001 	add	r3, r3, #1
   20358:	e59f2070 	ldr	r2, [pc, #112]	; 203d0 <vPortISRStartFirstTask+0x8c>
   2035c:	e5823000 	str	r3, [r2]

	__asm volatile("mrs 	r0,cpsr");		// Read in the cpsr register.
   20360:	e10f0000 	mrs	r0, CPSR
	__asm volatile("bic		r0,r0,#0x80");	// Clear bit 8, (0x80) -- Causes IRQs to be enabled
   20364:	e3c00080 	bic	r0, r0, #128	; 0x80
	__asm volatile("msr		cpsr_c, r0");	// Write it back to the CPSR register
   20368:	e121f000 	msr	CPSR_c, r0
//	__asm volatile("swi		0");			// Force a task switch with SWI!
//	__asm volatile("nop");

	/* Simply start the scheduler.  This is included here as it can only be
	called from ARM mode. */
	portRESTORE_CONTEXT();
   2036c:	e59f0274 	ldr	r0, [pc, #628]	; 205e8 <vPortExitCritical+0x64>
   20370:	e5900000 	ldr	r0, [r0]
   20374:	e590e000 	ldr	lr, [r0]
   20378:	e59f026c 	ldr	r0, [pc, #620]	; 205ec <vPortExitCritical+0x68>
   2037c:	e8be0002 	ldm	lr!, {r1}
   20380:	e5801000 	str	r1, [r0]
   20384:	e8be0001 	ldm	lr!, {r0}
   20388:	e16ff000 	msr	SPSR_fsxc, r0
   2038c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20390:	e320f000 	nop	{0}
   20394:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   20398:	e25ef004 	subs	pc, lr, #4
   2039c:	e320f000 	nop	{0}
   203a0:	e320f000 	nop	{0}
   203a4:	e59f3028 	ldr	r3, [pc, #40]	; 203d4 <vPortISRStartFirstTask+0x90>
   203a8:	e5933000 	ldr	r3, [r3]
   203ac:	e59f3024 	ldr	r3, [pc, #36]	; 203d8 <vPortISRStartFirstTask+0x94>
   203b0:	e5933000 	ldr	r3, [r3]
	__asm volatile (
   203b4:	e8bd4000 	ldmfd	sp!, {lr}
   203b8:	e24ee004 	sub	lr, lr, #4
   203bc:	e12fff1e 	bx	lr
		"LDMFD	SP!, {LR}	\n"
		"SUB	LR,	LR, #4	\n"
		
		"BX		LR			\n"
	);
}
   203c0:	e320f000 	nop	{0}
   203c4:	e28bd000 	add	sp, fp, #0
   203c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   203cc:	e12fff1e 	bx	lr
   203d0:	0002bef0 	strdeq	fp, [r2], -r0
   203d4:	0002bee0 	andeq	fp, r2, r0, ror #29
   203d8:	0002bf74 	andeq	fp, r2, r4, ror pc

000203dc <vPortYieldProcessor>:
void vPortYieldProcessor( void )
{
	/* Within an IRQ ISR the link register has an offset from the true return 
	address, but an SWI ISR does not.  Add the offset manually so the same 
	ISR return code can be used in both cases. */
	__asm volatile ( "ADD		LR, LR, #4" );
   203dc:	e28ee004 	add	lr, lr, #4

	/* Perform the context switch.  First save the context of the current task. */
	portSAVE_CONTEXT();
   203e0:	e92d0001 	stmfd	sp!, {r0}
   203e4:	e94d2000 	stmdb	sp, {sp}^
   203e8:	e24dd004 	sub	sp, sp, #4
   203ec:	e8bd0001 	ldmfd	sp!, {r0}
   203f0:	e9204000 	stmdb	r0!, {lr}
   203f4:	e1a0e000 	mov	lr, r0
   203f8:	e8bd0001 	ldmfd	sp!, {r0}
   203fc:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20400:	e320f000 	nop	{0}
   20404:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   20408:	e14f0000 	mrs	r0, SPSR
   2040c:	e92e0001 	stmdb	lr!, {r0}
   20410:	e59f01d4 	ldr	r0, [pc, #468]	; 205ec <vPortExitCritical+0x68>
   20414:	e5900000 	ldr	r0, [r0]
   20418:	e92e0001 	stmdb	lr!, {r0}
   2041c:	e59f01c4 	ldr	r0, [pc, #452]	; 205e8 <vPortExitCritical+0x64>
   20420:	e5900000 	ldr	r0, [r0]
   20424:	e580e000 	str	lr, [r0]
   20428:	e59f3058 	ldr	r3, [pc, #88]	; 20488 <vPortYieldProcessor+0xac>
   2042c:	e5933000 	ldr	r3, [r3]
   20430:	e59f3054 	ldr	r3, [pc, #84]	; 2048c <vPortYieldProcessor+0xb0>
   20434:	e5933000 	ldr	r3, [r3]

	/* Find the highest priority task that is ready to run. */
	__asm volatile ( "bl vTaskSwitchContext" );
   20438:	eb000a17 	bl	22c9c <vTaskSwitchContext>

	/* Restore the context of the new task. */
	portRESTORE_CONTEXT();	
   2043c:	e59f01a4 	ldr	r0, [pc, #420]	; 205e8 <vPortExitCritical+0x64>
   20440:	e5900000 	ldr	r0, [r0]
   20444:	e590e000 	ldr	lr, [r0]
   20448:	e59f019c 	ldr	r0, [pc, #412]	; 205ec <vPortExitCritical+0x68>
   2044c:	e8be0002 	ldm	lr!, {r1}
   20450:	e5801000 	str	r1, [r0]
   20454:	e8be0001 	ldm	lr!, {r0}
   20458:	e16ff000 	msr	SPSR_fsxc, r0
   2045c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20460:	e320f000 	nop	{0}
   20464:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   20468:	e25ef004 	subs	pc, lr, #4
   2046c:	e320f000 	nop	{0}
   20470:	e320f000 	nop	{0}
   20474:	e59f300c 	ldr	r3, [pc, #12]	; 20488 <vPortYieldProcessor+0xac>
   20478:	e5933000 	ldr	r3, [r3]
   2047c:	e59f3008 	ldr	r3, [pc, #8]	; 2048c <vPortYieldProcessor+0xb0>
   20480:	e5933000 	ldr	r3, [r3]
}
   20484:	e320f000 	nop	{0}
   20488:	0002bee0 	andeq	fp, r2, r0, ror #29
   2048c:	0002bf74 	andeq	fp, r2, r4, ror pc

00020490 <vFreeRTOS_ISR>:

extern void irqHandler(void);

void vFreeRTOS_ISR( void ) __attribute__((naked));
void vFreeRTOS_ISR( void ) {
	portSAVE_CONTEXT();
   20490:	e92d0001 	stmfd	sp!, {r0}
   20494:	e94d2000 	stmdb	sp, {sp}^
   20498:	e24dd004 	sub	sp, sp, #4
   2049c:	e8bd0001 	ldmfd	sp!, {r0}
   204a0:	e9204000 	stmdb	r0!, {lr}
   204a4:	e1a0e000 	mov	lr, r0
   204a8:	e8bd0001 	ldmfd	sp!, {r0}
   204ac:	e94e7fff 	stmdb	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   204b0:	e320f000 	nop	{0}
   204b4:	e24ee03c 	sub	lr, lr, #60	; 0x3c
   204b8:	e14f0000 	mrs	r0, SPSR
   204bc:	e92e0001 	stmdb	lr!, {r0}
   204c0:	e59f0124 	ldr	r0, [pc, #292]	; 205ec <vPortExitCritical+0x68>
   204c4:	e5900000 	ldr	r0, [r0]
   204c8:	e92e0001 	stmdb	lr!, {r0}
   204cc:	e59f0114 	ldr	r0, [pc, #276]	; 205e8 <vPortExitCritical+0x64>
   204d0:	e5900000 	ldr	r0, [r0]
   204d4:	e580e000 	str	lr, [r0]
   204d8:	e59f3058 	ldr	r3, [pc, #88]	; 20538 <vFreeRTOS_ISR+0xa8>
   204dc:	e5933000 	ldr	r3, [r3]
   204e0:	e59f3054 	ldr	r3, [pc, #84]	; 2053c <vFreeRTOS_ISR+0xac>
   204e4:	e5933000 	ldr	r3, [r3]
	irqHandler();
   204e8:	eb000c22 	bl	23578 <irqHandler>
	portRESTORE_CONTEXT();	
   204ec:	e59f00f4 	ldr	r0, [pc, #244]	; 205e8 <vPortExitCritical+0x64>
   204f0:	e5900000 	ldr	r0, [r0]
   204f4:	e590e000 	ldr	lr, [r0]
   204f8:	e59f00ec 	ldr	r0, [pc, #236]	; 205ec <vPortExitCritical+0x68>
   204fc:	e8be0002 	ldm	lr!, {r1}
   20500:	e5801000 	str	r1, [r0]
   20504:	e8be0001 	ldm	lr!, {r0}
   20508:	e16ff000 	msr	SPSR_fsxc, r0
   2050c:	e8de7fff 	ldm	lr, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   20510:	e320f000 	nop	{0}
   20514:	e59ee03c 	ldr	lr, [lr, #60]	; 0x3c
   20518:	e25ef004 	subs	pc, lr, #4
   2051c:	e320f000 	nop	{0}
   20520:	e320f000 	nop	{0}
   20524:	e59f300c 	ldr	r3, [pc, #12]	; 20538 <vFreeRTOS_ISR+0xa8>
   20528:	e5933000 	ldr	r3, [r3]
   2052c:	e59f3008 	ldr	r3, [pc, #8]	; 2053c <vFreeRTOS_ISR+0xac>
   20530:	e5933000 	ldr	r3, [r3]
}
   20534:	e320f000 	nop	{0}
   20538:	0002bee0 	andeq	fp, r2, r0, ror #29
   2053c:	0002bf74 	andeq	fp, r2, r4, ror pc

00020540 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
void vPortEnterCritical( void )
{
   20540:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20544:	e28db000 	add	fp, sp, #0
	/* Disable interrupts as per portDISABLE_INTERRUPTS(); 							*/
	__asm volatile ( 
   20548:	e92d0001 	stmfd	sp!, {r0}
   2054c:	e10f0000 	mrs	r0, CPSR
   20550:	e38000c0 	orr	r0, r0, #192	; 0xc0
   20554:	e129f000 	msr	CPSR_fc, r0
   20558:	e8bd0001 	ldmfd	sp!, {r0}
		"LDMIA	SP!, {R0}" );				/* Pop R0.								*/

	/* Now interrupts are disabled ulCriticalNesting can be accessed 
	directly.  Increment ulCriticalNesting to keep a count of how many times
	portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
   2055c:	e59f301c 	ldr	r3, [pc, #28]	; 20580 <vPortEnterCritical+0x40>
   20560:	e5933000 	ldr	r3, [r3]
   20564:	e2833001 	add	r3, r3, #1
   20568:	e59f2010 	ldr	r2, [pc, #16]	; 20580 <vPortEnterCritical+0x40>
   2056c:	e5823000 	str	r3, [r2]
}
   20570:	e320f000 	nop	{0}
   20574:	e28bd000 	add	sp, fp, #0
   20578:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2057c:	e12fff1e 	bx	lr
   20580:	0002bee0 	andeq	fp, r2, r0, ror #29

00020584 <vPortExitCritical>:

void vPortExitCritical( void )
{
   20584:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20588:	e28db000 	add	fp, sp, #0
	if( ulCriticalNesting > portNO_CRITICAL_NESTING )
   2058c:	e59f3050 	ldr	r3, [pc, #80]	; 205e4 <vPortExitCritical+0x60>
   20590:	e5933000 	ldr	r3, [r3]
   20594:	e3530000 	cmp	r3, #0
   20598:	0a00000d 	beq	205d4 <vPortExitCritical+0x50>
	{
		/* Decrement the nesting count as we are leaving a critical section. */
		ulCriticalNesting--;
   2059c:	e59f3040 	ldr	r3, [pc, #64]	; 205e4 <vPortExitCritical+0x60>
   205a0:	e5933000 	ldr	r3, [r3]
   205a4:	e2433001 	sub	r3, r3, #1
   205a8:	e59f2034 	ldr	r2, [pc, #52]	; 205e4 <vPortExitCritical+0x60>
   205ac:	e5823000 	str	r3, [r2]

		/* If the nesting level has reached zero then interrupts should be
		re-enabled. */
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
   205b0:	e59f302c 	ldr	r3, [pc, #44]	; 205e4 <vPortExitCritical+0x60>
   205b4:	e5933000 	ldr	r3, [r3]
   205b8:	e3530000 	cmp	r3, #0
   205bc:	1a000004 	bne	205d4 <vPortExitCritical+0x50>
		{
			/* Enable interrupts as per portEXIT_CRITICAL().					*/
			__asm volatile ( 
   205c0:	e92d0001 	stmfd	sp!, {r0}
   205c4:	e10f0000 	mrs	r0, CPSR
   205c8:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   205cc:	e129f000 	msr	CPSR_fc, r0
   205d0:	e8bd0001 	ldmfd	sp!, {r0}
				"BIC	R0, R0, #0xC0	\n\t"	/* Enable IRQ, FIQ.				*/	
				"MSR	CPSR, R0		\n\t"	/* Write back modified value.	*/	
				"LDMIA	SP!, {R0}" );			/* Pop R0.						*/
		}
	}
}
   205d4:	e320f000 	nop	{0}
   205d8:	e28bd000 	add	sp, fp, #0
   205dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   205e0:	e12fff1e 	bx	lr
   205e4:	0002bee0 	andeq	fp, r2, r0, ror #29
   205e8:	0002bf74 	andeq	fp, r2, r4, ror pc
   205ec:	0002bee0 	andeq	fp, r2, r0, ror #29

000205f0 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
   205f0:	e92d4800 	push	{fp, lr}
   205f4:	e28db004 	add	fp, sp, #4
   205f8:	e24dd018 	sub	sp, sp, #24
   205fc:	e50b0010 	str	r0, [fp, #-16]
   20600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   20604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
   20608:	e3a00038 	mov	r0, #56	; 0x38
   2060c:	eb000e0b 	bl	23e40 <pvPortMalloc>
   20610:	e50b000c 	str	r0, [fp, #-12]
	if( pxCoRoutine )
   20614:	e51b300c 	ldr	r3, [fp, #-12]
   20618:	e3530000 	cmp	r3, #0
   2061c:	0a000044 	beq	20734 <xCoRoutineCreate+0x144>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
   20620:	e59f3124 	ldr	r3, [pc, #292]	; 2074c <xCoRoutineCreate+0x15c>
   20624:	e5933000 	ldr	r3, [r3]
   20628:	e3530000 	cmp	r3, #0
   2062c:	1a000003 	bne	20640 <xCoRoutineCreate+0x50>
		{
			pxCurrentCoRoutine = pxCoRoutine;
   20630:	e59f2114 	ldr	r2, [pc, #276]	; 2074c <xCoRoutineCreate+0x15c>
   20634:	e51b300c 	ldr	r3, [fp, #-12]
   20638:	e5823000 	str	r3, [r2]
			prvInitialiseCoRoutineLists();
   2063c:	eb000177 	bl	20c20 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
   20640:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20644:	e3530001 	cmp	r3, #1
   20648:	9a000001 	bls	20654 <xCoRoutineCreate+0x64>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
   2064c:	e3a03001 	mov	r3, #1
   20650:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
   20654:	e51b300c 	ldr	r3, [fp, #-12]
   20658:	e3a02000 	mov	r2, #0
   2065c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
   20660:	e51b300c 	ldr	r3, [fp, #-12]
   20664:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20668:	e583202c 	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
   2066c:	e51b300c 	ldr	r3, [fp, #-12]
   20670:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   20674:	e5832030 	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
   20678:	e51b300c 	ldr	r3, [fp, #-12]
   2067c:	e51b2010 	ldr	r2, [fp, #-16]
   20680:	e5832000 	str	r2, [r3]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
   20684:	e51b300c 	ldr	r3, [fp, #-12]
   20688:	e2833004 	add	r3, r3, #4
   2068c:	e1a00003 	mov	r0, r3
   20690:	eb0001c9 	bl	20dbc <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
   20694:	e51b300c 	ldr	r3, [fp, #-12]
   20698:	e2833018 	add	r3, r3, #24
   2069c:	e1a00003 	mov	r0, r3
   206a0:	eb0001c5 	bl	20dbc <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
   206a4:	e51b300c 	ldr	r3, [fp, #-12]
   206a8:	e51b200c 	ldr	r2, [fp, #-12]
   206ac:	e5832010 	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
   206b0:	e51b300c 	ldr	r3, [fp, #-12]
   206b4:	e51b200c 	ldr	r2, [fp, #-12]
   206b8:	e5832024 	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   206bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   206c0:	e2632005 	rsb	r2, r3, #5
   206c4:	e51b300c 	ldr	r3, [fp, #-12]
   206c8:	e5832018 	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
   206cc:	e51b300c 	ldr	r3, [fp, #-12]
   206d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   206d4:	e59f3074 	ldr	r3, [pc, #116]	; 20750 <xCoRoutineCreate+0x160>
   206d8:	e5933000 	ldr	r3, [r3]
   206dc:	e1520003 	cmp	r2, r3
   206e0:	9a000003 	bls	206f4 <xCoRoutineCreate+0x104>
   206e4:	e51b300c 	ldr	r3, [fp, #-12]
   206e8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   206ec:	e59f205c 	ldr	r2, [pc, #92]	; 20750 <xCoRoutineCreate+0x160>
   206f0:	e5823000 	str	r3, [r2]
   206f4:	e51b300c 	ldr	r3, [fp, #-12]
   206f8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   206fc:	e1a03002 	mov	r3, r2
   20700:	e1a03103 	lsl	r3, r3, #2
   20704:	e0833002 	add	r3, r3, r2
   20708:	e1a03103 	lsl	r3, r3, #2
   2070c:	e59f2040 	ldr	r2, [pc, #64]	; 20754 <xCoRoutineCreate+0x164>
   20710:	e0832002 	add	r2, r3, r2
   20714:	e51b300c 	ldr	r3, [fp, #-12]
   20718:	e2833004 	add	r3, r3, #4
   2071c:	e1a01003 	mov	r1, r3
   20720:	e1a00002 	mov	r0, r2
   20724:	eb0001af 	bl	20de8 <vListInsertEnd>

		xReturn = pdPASS;
   20728:	e3a03001 	mov	r3, #1
   2072c:	e50b3008 	str	r3, [fp, #-8]
   20730:	ea000001 	b	2073c <xCoRoutineCreate+0x14c>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   20734:	e3e03000 	mvn	r3, #0
   20738:	e50b3008 	str	r3, [fp, #-8]
	}
	
	return xReturn;	
   2073c:	e51b3008 	ldr	r3, [fp, #-8]
}
   20740:	e1a00003 	mov	r0, r3
   20744:	e24bd004 	sub	sp, fp, #4
   20748:	e8bd8800 	pop	{fp, pc}
   2074c:	0002bf60 	andeq	fp, r2, r0, ror #30
   20750:	0002bf64 	andeq	fp, r2, r4, ror #30
   20754:	0002bef4 	strdeq	fp, [r2], -r4

00020758 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
   20758:	e92d4800 	push	{fp, lr}
   2075c:	e28db004 	add	fp, sp, #4
   20760:	e24dd010 	sub	sp, sp, #16
   20764:	e50b0010 	str	r0, [fp, #-16]
   20768:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
   2076c:	e59f30b8 	ldr	r3, [pc, #184]	; 2082c <vCoRoutineAddToDelayedList+0xd4>
   20770:	e5933000 	ldr	r3, [r3]
   20774:	e51b2010 	ldr	r2, [fp, #-16]
   20778:	e0823003 	add	r3, r2, r3
   2077c:	e50b3008 	str	r3, [fp, #-8]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   20780:	e59f30a8 	ldr	r3, [pc, #168]	; 20830 <vCoRoutineAddToDelayedList+0xd8>
   20784:	e5933000 	ldr	r3, [r3]
   20788:	e2833004 	add	r3, r3, #4
   2078c:	e1a00003 	mov	r0, r3
   20790:	eb0001f0 	bl	20f58 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
   20794:	e59f3094 	ldr	r3, [pc, #148]	; 20830 <vCoRoutineAddToDelayedList+0xd8>
   20798:	e5933000 	ldr	r3, [r3]
   2079c:	e51b2008 	ldr	r2, [fp, #-8]
   207a0:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
   207a4:	e59f3080 	ldr	r3, [pc, #128]	; 2082c <vCoRoutineAddToDelayedList+0xd4>
   207a8:	e5933000 	ldr	r3, [r3]
   207ac:	e51b2008 	ldr	r2, [fp, #-8]
   207b0:	e1520003 	cmp	r2, r3
   207b4:	2a000008 	bcs	207dc <vCoRoutineAddToDelayedList+0x84>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   207b8:	e59f3074 	ldr	r3, [pc, #116]	; 20834 <vCoRoutineAddToDelayedList+0xdc>
   207bc:	e5932000 	ldr	r2, [r3]
   207c0:	e59f3068 	ldr	r3, [pc, #104]	; 20830 <vCoRoutineAddToDelayedList+0xd8>
   207c4:	e5933000 	ldr	r3, [r3]
   207c8:	e2833004 	add	r3, r3, #4
   207cc:	e1a01003 	mov	r1, r3
   207d0:	e1a00002 	mov	r0, r2
   207d4:	eb0001a9 	bl	20e80 <vListInsert>
   207d8:	ea000007 	b	207fc <vCoRoutineAddToDelayedList+0xa4>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
   207dc:	e59f3054 	ldr	r3, [pc, #84]	; 20838 <vCoRoutineAddToDelayedList+0xe0>
   207e0:	e5932000 	ldr	r2, [r3]
   207e4:	e59f3044 	ldr	r3, [pc, #68]	; 20830 <vCoRoutineAddToDelayedList+0xd8>
   207e8:	e5933000 	ldr	r3, [r3]
   207ec:	e2833004 	add	r3, r3, #4
   207f0:	e1a01003 	mov	r1, r3
   207f4:	e1a00002 	mov	r0, r2
   207f8:	eb0001a0 	bl	20e80 <vListInsert>
	}

	if( pxEventList )
   207fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20800:	e3530000 	cmp	r3, #0
   20804:	0a000005 	beq	20820 <vCoRoutineAddToDelayedList+0xc8>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
   20808:	e59f3020 	ldr	r3, [pc, #32]	; 20830 <vCoRoutineAddToDelayedList+0xd8>
   2080c:	e5933000 	ldr	r3, [r3]
   20810:	e2833018 	add	r3, r3, #24
   20814:	e1a01003 	mov	r1, r3
   20818:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   2081c:	eb000197 	bl	20e80 <vListInsert>
	}
}
   20820:	e320f000 	nop	{0}
   20824:	e24bd004 	sub	sp, fp, #4
   20828:	e8bd8800 	pop	{fp, pc}
   2082c:	0002bf68 	andeq	fp, r2, r8, ror #30
   20830:	0002bf60 	andeq	fp, r2, r0, ror #30
   20834:	0002bf48 	andeq	fp, r2, r8, asr #30
   20838:	0002bf44 	andeq	fp, r2, r4, asr #30

0002083c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
   2083c:	e92d4800 	push	{fp, lr}
   20840:	e28db004 	add	fp, sp, #4
   20844:	e24dd008 	sub	sp, sp, #8
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   20848:	ea00002c 	b	20900 <prvCheckPendingReadyList+0xc4>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
   2084c:	e92d0001 	stmfd	sp!, {r0}
   20850:	e10f0000 	mrs	r0, CPSR
   20854:	e38000c0 	orr	r0, r0, #192	; 0xc0
   20858:	e129f000 	msr	CPSR_fc, r0
   2085c:	e8bd0001 	ldmfd	sp!, {r0}
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
   20860:	e59f30b8 	ldr	r3, [pc, #184]	; 20920 <prvCheckPendingReadyList+0xe4>
   20864:	e593300c 	ldr	r3, [r3, #12]
   20868:	e593300c 	ldr	r3, [r3, #12]
   2086c:	e50b3008 	str	r3, [fp, #-8]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   20870:	e51b3008 	ldr	r3, [fp, #-8]
   20874:	e2833018 	add	r3, r3, #24
   20878:	e1a00003 	mov	r0, r3
   2087c:	eb0001b5 	bl	20f58 <vListRemove>
		}
		portENABLE_INTERRUPTS();
   20880:	e92d0001 	stmfd	sp!, {r0}
   20884:	e10f0000 	mrs	r0, CPSR
   20888:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   2088c:	e129f000 	msr	CPSR_fc, r0
   20890:	e8bd0001 	ldmfd	sp!, {r0}

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
   20894:	e51b3008 	ldr	r3, [fp, #-8]
   20898:	e2833004 	add	r3, r3, #4
   2089c:	e1a00003 	mov	r0, r3
   208a0:	eb0001ac 	bl	20f58 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
   208a4:	e51b3008 	ldr	r3, [fp, #-8]
   208a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   208ac:	e59f3070 	ldr	r3, [pc, #112]	; 20924 <prvCheckPendingReadyList+0xe8>
   208b0:	e5933000 	ldr	r3, [r3]
   208b4:	e1520003 	cmp	r2, r3
   208b8:	9a000003 	bls	208cc <prvCheckPendingReadyList+0x90>
   208bc:	e51b3008 	ldr	r3, [fp, #-8]
   208c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   208c4:	e59f2058 	ldr	r2, [pc, #88]	; 20924 <prvCheckPendingReadyList+0xe8>
   208c8:	e5823000 	str	r3, [r2]
   208cc:	e51b3008 	ldr	r3, [fp, #-8]
   208d0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   208d4:	e1a03002 	mov	r3, r2
   208d8:	e1a03103 	lsl	r3, r3, #2
   208dc:	e0833002 	add	r3, r3, r2
   208e0:	e1a03103 	lsl	r3, r3, #2
   208e4:	e59f203c 	ldr	r2, [pc, #60]	; 20928 <prvCheckPendingReadyList+0xec>
   208e8:	e0832002 	add	r2, r3, r2
   208ec:	e51b3008 	ldr	r3, [fp, #-8]
   208f0:	e2833004 	add	r3, r3, #4
   208f4:	e1a01003 	mov	r1, r3
   208f8:	e1a00002 	mov	r0, r2
   208fc:	eb000139 	bl	20de8 <vListInsertEnd>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
   20900:	e59f3018 	ldr	r3, [pc, #24]	; 20920 <prvCheckPendingReadyList+0xe4>
   20904:	e5933000 	ldr	r3, [r3]
   20908:	e3530000 	cmp	r3, #0
   2090c:	1affffce 	bne	2084c <prvCheckPendingReadyList+0x10>
	}
}
   20910:	e320f000 	nop	{0}
   20914:	e320f000 	nop	{0}
   20918:	e24bd004 	sub	sp, fp, #4
   2091c:	e8bd8800 	pop	{fp, pc}
   20920:	0002bf4c 	andeq	fp, r2, ip, asr #30
   20924:	0002bf64 	andeq	fp, r2, r4, ror #30
   20928:	0002bef4 	strdeq	fp, [r2], -r4

0002092c <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
   2092c:	e92d4800 	push	{fp, lr}
   20930:	e28db004 	add	fp, sp, #4
   20934:	e24dd008 	sub	sp, sp, #8
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
   20938:	eb0007df 	bl	228bc <xTaskGetTickCount>
   2093c:	e1a02000 	mov	r2, r0
   20940:	e59f3198 	ldr	r3, [pc, #408]	; 20ae0 <prvCheckDelayedList+0x1b4>
   20944:	e5933000 	ldr	r3, [r3]
   20948:	e0423003 	sub	r3, r2, r3
   2094c:	e59f2190 	ldr	r2, [pc, #400]	; 20ae4 <prvCheckDelayedList+0x1b8>
   20950:	e5823000 	str	r3, [r2]
	while( xPassedTicks )
   20954:	ea000056 	b	20ab4 <prvCheckDelayedList+0x188>
	{
		xCoRoutineTickCount++;
   20958:	e59f3188 	ldr	r3, [pc, #392]	; 20ae8 <prvCheckDelayedList+0x1bc>
   2095c:	e5933000 	ldr	r3, [r3]
   20960:	e2833001 	add	r3, r3, #1
   20964:	e59f217c 	ldr	r2, [pc, #380]	; 20ae8 <prvCheckDelayedList+0x1bc>
   20968:	e5823000 	str	r3, [r2]
		xPassedTicks--;
   2096c:	e59f3170 	ldr	r3, [pc, #368]	; 20ae4 <prvCheckDelayedList+0x1b8>
   20970:	e5933000 	ldr	r3, [r3]
   20974:	e2433001 	sub	r3, r3, #1
   20978:	e59f2164 	ldr	r2, [pc, #356]	; 20ae4 <prvCheckDelayedList+0x1b8>
   2097c:	e5823000 	str	r3, [r2]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
   20980:	e59f3160 	ldr	r3, [pc, #352]	; 20ae8 <prvCheckDelayedList+0x1bc>
   20984:	e5933000 	ldr	r3, [r3]
   20988:	e3530000 	cmp	r3, #0
   2098c:	1a000043 	bne	20aa0 <prvCheckDelayedList+0x174>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
   20990:	e59f3154 	ldr	r3, [pc, #340]	; 20aec <prvCheckDelayedList+0x1c0>
   20994:	e5933000 	ldr	r3, [r3]
   20998:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
   2099c:	e59f314c 	ldr	r3, [pc, #332]	; 20af0 <prvCheckDelayedList+0x1c4>
   209a0:	e5933000 	ldr	r3, [r3]
   209a4:	e59f2140 	ldr	r2, [pc, #320]	; 20aec <prvCheckDelayedList+0x1c0>
   209a8:	e5823000 	str	r3, [r2]
			pxOverflowDelayedCoRoutineList = pxTemp;
   209ac:	e59f213c 	ldr	r2, [pc, #316]	; 20af0 <prvCheckDelayedList+0x1c4>
   209b0:	e51b3008 	ldr	r3, [fp, #-8]
   209b4:	e5823000 	str	r3, [r2]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   209b8:	ea000038 	b	20aa0 <prvCheckDelayedList+0x174>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
   209bc:	e59f3128 	ldr	r3, [pc, #296]	; 20aec <prvCheckDelayedList+0x1c0>
   209c0:	e5933000 	ldr	r3, [r3]
   209c4:	e593300c 	ldr	r3, [r3, #12]
   209c8:	e593300c 	ldr	r3, [r3, #12]
   209cc:	e50b300c 	str	r3, [fp, #-12]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
   209d0:	e51b300c 	ldr	r3, [fp, #-12]
   209d4:	e5932004 	ldr	r2, [r3, #4]
   209d8:	e59f3108 	ldr	r3, [pc, #264]	; 20ae8 <prvCheckDelayedList+0x1bc>
   209dc:	e5933000 	ldr	r3, [r3]
   209e0:	e1520003 	cmp	r2, r3
   209e4:	9a000000 	bls	209ec <prvCheckDelayedList+0xc0>
			{			
				/* Timeout not yet expired. */																			
				break;																				
   209e8:	ea000031 	b	20ab4 <prvCheckDelayedList+0x188>
			}																						

			portDISABLE_INTERRUPTS();
   209ec:	e92d0001 	stmfd	sp!, {r0}
   209f0:	e10f0000 	mrs	r0, CPSR
   209f4:	e38000c0 	orr	r0, r0, #192	; 0xc0
   209f8:	e129f000 	msr	CPSR_fc, r0
   209fc:	e8bd0001 	ldmfd	sp!, {r0}
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
   20a00:	e51b300c 	ldr	r3, [fp, #-12]
   20a04:	e2833004 	add	r3, r3, #4
   20a08:	e1a00003 	mov	r0, r3
   20a0c:	eb000151 	bl	20f58 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
   20a10:	e51b300c 	ldr	r3, [fp, #-12]
   20a14:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   20a18:	e3530000 	cmp	r3, #0
   20a1c:	0a000003 	beq	20a30 <prvCheckDelayedList+0x104>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
   20a20:	e51b300c 	ldr	r3, [fp, #-12]
   20a24:	e2833018 	add	r3, r3, #24
   20a28:	e1a00003 	mov	r0, r3
   20a2c:	eb000149 	bl	20f58 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
   20a30:	e92d0001 	stmfd	sp!, {r0}
   20a34:	e10f0000 	mrs	r0, CPSR
   20a38:	e3c000c0 	bic	r0, r0, #192	; 0xc0
   20a3c:	e129f000 	msr	CPSR_fc, r0
   20a40:	e8bd0001 	ldmfd	sp!, {r0}

			prvAddCoRoutineToReadyQueue( pxCRCB );													
   20a44:	e51b300c 	ldr	r3, [fp, #-12]
   20a48:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   20a4c:	e59f30a0 	ldr	r3, [pc, #160]	; 20af4 <prvCheckDelayedList+0x1c8>
   20a50:	e5933000 	ldr	r3, [r3]
   20a54:	e1520003 	cmp	r2, r3
   20a58:	9a000003 	bls	20a6c <prvCheckDelayedList+0x140>
   20a5c:	e51b300c 	ldr	r3, [fp, #-12]
   20a60:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   20a64:	e59f2088 	ldr	r2, [pc, #136]	; 20af4 <prvCheckDelayedList+0x1c8>
   20a68:	e5823000 	str	r3, [r2]
   20a6c:	e51b300c 	ldr	r3, [fp, #-12]
   20a70:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   20a74:	e1a03002 	mov	r3, r2
   20a78:	e1a03103 	lsl	r3, r3, #2
   20a7c:	e0833002 	add	r3, r3, r2
   20a80:	e1a03103 	lsl	r3, r3, #2
   20a84:	e59f206c 	ldr	r2, [pc, #108]	; 20af8 <prvCheckDelayedList+0x1cc>
   20a88:	e0832002 	add	r2, r3, r2
   20a8c:	e51b300c 	ldr	r3, [fp, #-12]
   20a90:	e2833004 	add	r3, r3, #4
   20a94:	e1a01003 	mov	r1, r3
   20a98:	e1a00002 	mov	r0, r2
   20a9c:	eb0000d1 	bl	20de8 <vListInsertEnd>
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
   20aa0:	e59f3044 	ldr	r3, [pc, #68]	; 20aec <prvCheckDelayedList+0x1c0>
   20aa4:	e5933000 	ldr	r3, [r3]
   20aa8:	e5933000 	ldr	r3, [r3]
   20aac:	e3530000 	cmp	r3, #0
   20ab0:	1affffc1 	bne	209bc <prvCheckDelayedList+0x90>
	while( xPassedTicks )
   20ab4:	e59f3028 	ldr	r3, [pc, #40]	; 20ae4 <prvCheckDelayedList+0x1b8>
   20ab8:	e5933000 	ldr	r3, [r3]
   20abc:	e3530000 	cmp	r3, #0
   20ac0:	1affffa4 	bne	20958 <prvCheckDelayedList+0x2c>
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
   20ac4:	e59f301c 	ldr	r3, [pc, #28]	; 20ae8 <prvCheckDelayedList+0x1bc>
   20ac8:	e5933000 	ldr	r3, [r3]
   20acc:	e59f200c 	ldr	r2, [pc, #12]	; 20ae0 <prvCheckDelayedList+0x1b4>
   20ad0:	e5823000 	str	r3, [r2]
}
   20ad4:	e320f000 	nop	{0}
   20ad8:	e24bd004 	sub	sp, fp, #4
   20adc:	e8bd8800 	pop	{fp, pc}
   20ae0:	0002bf6c 	andeq	fp, r2, ip, ror #30
   20ae4:	0002bf70 	andeq	fp, r2, r0, ror pc
   20ae8:	0002bf68 	andeq	fp, r2, r8, ror #30
   20aec:	0002bf44 	andeq	fp, r2, r4, asr #30
   20af0:	0002bf48 	andeq	fp, r2, r8, asr #30
   20af4:	0002bf64 	andeq	fp, r2, r4, ror #30
   20af8:	0002bef4 	strdeq	fp, [r2], -r4

00020afc <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
   20afc:	e92d4800 	push	{fp, lr}
   20b00:	e28db004 	add	fp, sp, #4
   20b04:	e24dd008 	sub	sp, sp, #8
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
   20b08:	ebffff4b 	bl	2083c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
   20b0c:	ebffff86 	bl	2092c <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   20b10:	ea000008 	b	20b38 <vCoRoutineSchedule+0x3c>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
   20b14:	e59f30f8 	ldr	r3, [pc, #248]	; 20c14 <vCoRoutineSchedule+0x118>
   20b18:	e5933000 	ldr	r3, [r3]
   20b1c:	e3530000 	cmp	r3, #0
   20b20:	0a000038 	beq	20c08 <vCoRoutineSchedule+0x10c>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
   20b24:	e59f30e8 	ldr	r3, [pc, #232]	; 20c14 <vCoRoutineSchedule+0x118>
   20b28:	e5933000 	ldr	r3, [r3]
   20b2c:	e2433001 	sub	r3, r3, #1
   20b30:	e59f20dc 	ldr	r2, [pc, #220]	; 20c14 <vCoRoutineSchedule+0x118>
   20b34:	e5823000 	str	r3, [r2]
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
   20b38:	e59f30d4 	ldr	r3, [pc, #212]	; 20c14 <vCoRoutineSchedule+0x118>
   20b3c:	e5932000 	ldr	r2, [r3]
   20b40:	e59f10d0 	ldr	r1, [pc, #208]	; 20c18 <vCoRoutineSchedule+0x11c>
   20b44:	e1a03002 	mov	r3, r2
   20b48:	e1a03103 	lsl	r3, r3, #2
   20b4c:	e0833002 	add	r3, r3, r2
   20b50:	e1a03103 	lsl	r3, r3, #2
   20b54:	e0813003 	add	r3, r1, r3
   20b58:	e5933000 	ldr	r3, [r3]
   20b5c:	e3530000 	cmp	r3, #0
   20b60:	0affffeb 	beq	20b14 <vCoRoutineSchedule+0x18>
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
   20b64:	e59f30a8 	ldr	r3, [pc, #168]	; 20c14 <vCoRoutineSchedule+0x118>
   20b68:	e5932000 	ldr	r2, [r3]
   20b6c:	e1a03002 	mov	r3, r2
   20b70:	e1a03103 	lsl	r3, r3, #2
   20b74:	e0833002 	add	r3, r3, r2
   20b78:	e1a03103 	lsl	r3, r3, #2
   20b7c:	e59f2094 	ldr	r2, [pc, #148]	; 20c18 <vCoRoutineSchedule+0x11c>
   20b80:	e0833002 	add	r3, r3, r2
   20b84:	e50b3008 	str	r3, [fp, #-8]
   20b88:	e51b3008 	ldr	r3, [fp, #-8]
   20b8c:	e5933004 	ldr	r3, [r3, #4]
   20b90:	e5932004 	ldr	r2, [r3, #4]
   20b94:	e51b3008 	ldr	r3, [fp, #-8]
   20b98:	e5832004 	str	r2, [r3, #4]
   20b9c:	e51b3008 	ldr	r3, [fp, #-8]
   20ba0:	e5932004 	ldr	r2, [r3, #4]
   20ba4:	e51b3008 	ldr	r3, [fp, #-8]
   20ba8:	e2833008 	add	r3, r3, #8
   20bac:	e1520003 	cmp	r2, r3
   20bb0:	1a000004 	bne	20bc8 <vCoRoutineSchedule+0xcc>
   20bb4:	e51b3008 	ldr	r3, [fp, #-8]
   20bb8:	e5933004 	ldr	r3, [r3, #4]
   20bbc:	e5932004 	ldr	r2, [r3, #4]
   20bc0:	e51b3008 	ldr	r3, [fp, #-8]
   20bc4:	e5832004 	str	r2, [r3, #4]
   20bc8:	e51b3008 	ldr	r3, [fp, #-8]
   20bcc:	e5933004 	ldr	r3, [r3, #4]
   20bd0:	e593300c 	ldr	r3, [r3, #12]
   20bd4:	e59f2040 	ldr	r2, [pc, #64]	; 20c1c <vCoRoutineSchedule+0x120>
   20bd8:	e5823000 	str	r3, [r2]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
   20bdc:	e59f3038 	ldr	r3, [pc, #56]	; 20c1c <vCoRoutineSchedule+0x120>
   20be0:	e5933000 	ldr	r3, [r3]
   20be4:	e5933000 	ldr	r3, [r3]
   20be8:	e59f202c 	ldr	r2, [pc, #44]	; 20c1c <vCoRoutineSchedule+0x120>
   20bec:	e5920000 	ldr	r0, [r2]
   20bf0:	e59f2024 	ldr	r2, [pc, #36]	; 20c1c <vCoRoutineSchedule+0x120>
   20bf4:	e5922000 	ldr	r2, [r2]
   20bf8:	e5922030 	ldr	r2, [r2, #48]	; 0x30
   20bfc:	e1a01002 	mov	r1, r2
   20c00:	e12fff33 	blx	r3

	return;
   20c04:	ea000000 	b	20c0c <vCoRoutineSchedule+0x110>
			return;
   20c08:	e320f000 	nop	{0}
}
   20c0c:	e24bd004 	sub	sp, fp, #4
   20c10:	e8bd8800 	pop	{fp, pc}
   20c14:	0002bf64 	andeq	fp, r2, r4, ror #30
   20c18:	0002bef4 	strdeq	fp, [r2], -r4
   20c1c:	0002bf60 	andeq	fp, r2, r0, ror #30

00020c20 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
   20c20:	e92d4800 	push	{fp, lr}
   20c24:	e28db004 	add	fp, sp, #4
   20c28:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   20c2c:	e3a03000 	mov	r3, #0
   20c30:	e50b3008 	str	r3, [fp, #-8]
   20c34:	ea00000b 	b	20c68 <prvInitialiseCoRoutineLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
   20c38:	e51b2008 	ldr	r2, [fp, #-8]
   20c3c:	e1a03002 	mov	r3, r2
   20c40:	e1a03103 	lsl	r3, r3, #2
   20c44:	e0833002 	add	r3, r3, r2
   20c48:	e1a03103 	lsl	r3, r3, #2
   20c4c:	e59f205c 	ldr	r2, [pc, #92]	; 20cb0 <prvInitialiseCoRoutineLists+0x90>
   20c50:	e0833002 	add	r3, r3, r2
   20c54:	e1a00003 	mov	r0, r3
   20c58:	eb00003d 	bl	20d54 <vListInitialise>
	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
   20c5c:	e51b3008 	ldr	r3, [fp, #-8]
   20c60:	e2833001 	add	r3, r3, #1
   20c64:	e50b3008 	str	r3, [fp, #-8]
   20c68:	e51b3008 	ldr	r3, [fp, #-8]
   20c6c:	e3530001 	cmp	r3, #1
   20c70:	9afffff0 	bls	20c38 <prvInitialiseCoRoutineLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
   20c74:	e59f0038 	ldr	r0, [pc, #56]	; 20cb4 <prvInitialiseCoRoutineLists+0x94>
   20c78:	eb000035 	bl	20d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
   20c7c:	e59f0034 	ldr	r0, [pc, #52]	; 20cb8 <prvInitialiseCoRoutineLists+0x98>
   20c80:	eb000033 	bl	20d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
   20c84:	e59f0030 	ldr	r0, [pc, #48]	; 20cbc <prvInitialiseCoRoutineLists+0x9c>
   20c88:	eb000031 	bl	20d54 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
   20c8c:	e59f302c 	ldr	r3, [pc, #44]	; 20cc0 <prvInitialiseCoRoutineLists+0xa0>
   20c90:	e59f201c 	ldr	r2, [pc, #28]	; 20cb4 <prvInitialiseCoRoutineLists+0x94>
   20c94:	e5832000 	str	r2, [r3]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
   20c98:	e59f3024 	ldr	r3, [pc, #36]	; 20cc4 <prvInitialiseCoRoutineLists+0xa4>
   20c9c:	e59f2014 	ldr	r2, [pc, #20]	; 20cb8 <prvInitialiseCoRoutineLists+0x98>
   20ca0:	e5832000 	str	r2, [r3]
}
   20ca4:	e320f000 	nop	{0}
   20ca8:	e24bd004 	sub	sp, fp, #4
   20cac:	e8bd8800 	pop	{fp, pc}
   20cb0:	0002bef4 	strdeq	fp, [r2], -r4
   20cb4:	0002bf1c 	andeq	fp, r2, ip, lsl pc
   20cb8:	0002bf30 	andeq	fp, r2, r0, lsr pc
   20cbc:	0002bf4c 	andeq	fp, r2, ip, asr #30
   20cc0:	0002bf44 	andeq	fp, r2, r4, asr #30
   20cc4:	0002bf48 	andeq	fp, r2, r8, asr #30

00020cc8 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
   20cc8:	e92d4800 	push	{fp, lr}
   20ccc:	e28db004 	add	fp, sp, #4
   20cd0:	e24dd010 	sub	sp, sp, #16
   20cd4:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   20cd8:	e51b3010 	ldr	r3, [fp, #-16]
   20cdc:	e593300c 	ldr	r3, [r3, #12]
   20ce0:	e593300c 	ldr	r3, [r3, #12]
   20ce4:	e50b300c 	str	r3, [fp, #-12]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
   20ce8:	e51b300c 	ldr	r3, [fp, #-12]
   20cec:	e2833018 	add	r3, r3, #24
   20cf0:	e1a00003 	mov	r0, r3
   20cf4:	eb000097 	bl	20f58 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
   20cf8:	e51b300c 	ldr	r3, [fp, #-12]
   20cfc:	e2833018 	add	r3, r3, #24
   20d00:	e1a01003 	mov	r1, r3
   20d04:	e59f0040 	ldr	r0, [pc, #64]	; 20d4c <xCoRoutineRemoveFromEventList+0x84>
   20d08:	eb000036 	bl	20de8 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
   20d0c:	e51b300c 	ldr	r3, [fp, #-12]
   20d10:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   20d14:	e59f3034 	ldr	r3, [pc, #52]	; 20d50 <xCoRoutineRemoveFromEventList+0x88>
   20d18:	e5933000 	ldr	r3, [r3]
   20d1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   20d20:	e1520003 	cmp	r2, r3
   20d24:	3a000002 	bcc	20d34 <xCoRoutineRemoveFromEventList+0x6c>
	{
		xReturn = pdTRUE;
   20d28:	e3a03001 	mov	r3, #1
   20d2c:	e50b3008 	str	r3, [fp, #-8]
   20d30:	ea000001 	b	20d3c <xCoRoutineRemoveFromEventList+0x74>
	}
	else
	{
		xReturn = pdFALSE;
   20d34:	e3a03000 	mov	r3, #0
   20d38:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   20d3c:	e51b3008 	ldr	r3, [fp, #-8]
}
   20d40:	e1a00003 	mov	r0, r3
   20d44:	e24bd004 	sub	sp, fp, #4
   20d48:	e8bd8800 	pop	{fp, pc}
   20d4c:	0002bf4c 	andeq	fp, r2, ip, asr #30
   20d50:	0002bf60 	andeq	fp, r2, r0, ror #30

00020d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
   20d54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20d58:	e28db000 	add	fp, sp, #0
   20d5c:	e24dd00c 	sub	sp, sp, #12
   20d60:	e50b0008 	str	r0, [fp, #-8]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   20d64:	e51b3008 	ldr	r3, [fp, #-8]
   20d68:	e2832008 	add	r2, r3, #8
   20d6c:	e51b3008 	ldr	r3, [fp, #-8]
   20d70:	e5832004 	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   20d74:	e51b3008 	ldr	r3, [fp, #-8]
   20d78:	e3e02000 	mvn	r2, #0
   20d7c:	e5832008 	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   20d80:	e51b3008 	ldr	r3, [fp, #-8]
   20d84:	e2832008 	add	r2, r3, #8
   20d88:	e51b3008 	ldr	r3, [fp, #-8]
   20d8c:	e583200c 	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   20d90:	e51b3008 	ldr	r3, [fp, #-8]
   20d94:	e2832008 	add	r2, r3, #8
   20d98:	e51b3008 	ldr	r3, [fp, #-8]
   20d9c:	e5832010 	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   20da0:	e51b3008 	ldr	r3, [fp, #-8]
   20da4:	e3a02000 	mov	r2, #0
   20da8:	e5832000 	str	r2, [r3]
}
   20dac:	e320f000 	nop	{0}
   20db0:	e28bd000 	add	sp, fp, #0
   20db4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20db8:	e12fff1e 	bx	lr

00020dbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
   20dbc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20dc0:	e28db000 	add	fp, sp, #0
   20dc4:	e24dd00c 	sub	sp, sp, #12
   20dc8:	e50b0008 	str	r0, [fp, #-8]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   20dcc:	e51b3008 	ldr	r3, [fp, #-8]
   20dd0:	e3a02000 	mov	r2, #0
   20dd4:	e5832010 	str	r2, [r3, #16]
}
   20dd8:	e320f000 	nop	{0}
   20ddc:	e28bd000 	add	sp, fp, #0
   20de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20de4:	e12fff1e 	bx	lr

00020de8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
   20de8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20dec:	e28db000 	add	fp, sp, #0
   20df0:	e24dd014 	sub	sp, sp, #20
   20df4:	e50b0010 	str	r0, [fp, #-16]
   20df8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   20dfc:	e51b3010 	ldr	r3, [fp, #-16]
   20e00:	e5933004 	ldr	r3, [r3, #4]
   20e04:	e50b3008 	str	r3, [fp, #-8]

	pxNewListItem->pxNext = pxIndex->pxNext;
   20e08:	e51b3008 	ldr	r3, [fp, #-8]
   20e0c:	e5932004 	ldr	r2, [r3, #4]
   20e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20e14:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   20e18:	e51b3010 	ldr	r3, [fp, #-16]
   20e1c:	e5932004 	ldr	r2, [r3, #4]
   20e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20e24:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   20e28:	e51b3008 	ldr	r3, [fp, #-8]
   20e2c:	e5933004 	ldr	r3, [r3, #4]
   20e30:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20e34:	e5832008 	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   20e38:	e51b3008 	ldr	r3, [fp, #-8]
   20e3c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20e40:	e5832004 	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   20e44:	e51b3010 	ldr	r3, [fp, #-16]
   20e48:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20e4c:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   20e50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20e54:	e51b2010 	ldr	r2, [fp, #-16]
   20e58:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   20e5c:	e51b3010 	ldr	r3, [fp, #-16]
   20e60:	e5933000 	ldr	r3, [r3]
   20e64:	e2832001 	add	r2, r3, #1
   20e68:	e51b3010 	ldr	r3, [fp, #-16]
   20e6c:	e5832000 	str	r2, [r3]
}
   20e70:	e320f000 	nop	{0}
   20e74:	e28bd000 	add	sp, fp, #0
   20e78:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20e7c:	e12fff1e 	bx	lr

00020e80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   20e80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20e84:	e28db000 	add	fp, sp, #0
   20e88:	e24dd014 	sub	sp, sp, #20
   20e8c:	e50b0010 	str	r0, [fp, #-16]
   20e90:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   20e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20e98:	e5933000 	ldr	r3, [r3]
   20e9c:	e50b300c 	str	r3, [fp, #-12]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   20ea0:	e51b300c 	ldr	r3, [fp, #-12]
   20ea4:	e3730001 	cmn	r3, #1
   20ea8:	1a000003 	bne	20ebc <vListInsert+0x3c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   20eac:	e51b3010 	ldr	r3, [fp, #-16]
   20eb0:	e5933010 	ldr	r3, [r3, #16]
   20eb4:	e50b3008 	str	r3, [fp, #-8]
   20eb8:	ea00000c 	b	20ef0 <vListInsert+0x70>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   20ebc:	e51b3010 	ldr	r3, [fp, #-16]
   20ec0:	e2833008 	add	r3, r3, #8
   20ec4:	e50b3008 	str	r3, [fp, #-8]
   20ec8:	ea000002 	b	20ed8 <vListInsert+0x58>
   20ecc:	e51b3008 	ldr	r3, [fp, #-8]
   20ed0:	e5933004 	ldr	r3, [r3, #4]
   20ed4:	e50b3008 	str	r3, [fp, #-8]
   20ed8:	e51b3008 	ldr	r3, [fp, #-8]
   20edc:	e5933004 	ldr	r3, [r3, #4]
   20ee0:	e5933000 	ldr	r3, [r3]
   20ee4:	e51b200c 	ldr	r2, [fp, #-12]
   20ee8:	e1520003 	cmp	r2, r3
   20eec:	2afffff6 	bcs	20ecc <vListInsert+0x4c>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   20ef0:	e51b3008 	ldr	r3, [fp, #-8]
   20ef4:	e5932004 	ldr	r2, [r3, #4]
   20ef8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20efc:	e5832004 	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   20f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20f04:	e5933004 	ldr	r3, [r3, #4]
   20f08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20f0c:	e5832008 	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   20f10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20f14:	e51b2008 	ldr	r2, [fp, #-8]
   20f18:	e5832008 	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   20f1c:	e51b3008 	ldr	r3, [fp, #-8]
   20f20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   20f24:	e5832004 	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   20f28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   20f2c:	e51b2010 	ldr	r2, [fp, #-16]
   20f30:	e5832010 	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   20f34:	e51b3010 	ldr	r3, [fp, #-16]
   20f38:	e5933000 	ldr	r3, [r3]
   20f3c:	e2832001 	add	r2, r3, #1
   20f40:	e51b3010 	ldr	r3, [fp, #-16]
   20f44:	e5832000 	str	r2, [r3]
}
   20f48:	e320f000 	nop	{0}
   20f4c:	e28bd000 	add	sp, fp, #0
   20f50:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20f54:	e12fff1e 	bx	lr

00020f58 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
   20f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   20f5c:	e28db000 	add	fp, sp, #0
   20f60:	e24dd014 	sub	sp, sp, #20
   20f64:	e50b0010 	str	r0, [fp, #-16]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   20f68:	e51b3010 	ldr	r3, [fp, #-16]
   20f6c:	e5933004 	ldr	r3, [r3, #4]
   20f70:	e51b2010 	ldr	r2, [fp, #-16]
   20f74:	e5922008 	ldr	r2, [r2, #8]
   20f78:	e5832008 	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   20f7c:	e51b3010 	ldr	r3, [fp, #-16]
   20f80:	e5933008 	ldr	r3, [r3, #8]
   20f84:	e51b2010 	ldr	r2, [fp, #-16]
   20f88:	e5922004 	ldr	r2, [r2, #4]
   20f8c:	e5832004 	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   20f90:	e51b3010 	ldr	r3, [fp, #-16]
   20f94:	e5933010 	ldr	r3, [r3, #16]
   20f98:	e50b3008 	str	r3, [fp, #-8]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   20f9c:	e51b3008 	ldr	r3, [fp, #-8]
   20fa0:	e5933004 	ldr	r3, [r3, #4]
   20fa4:	e51b2010 	ldr	r2, [fp, #-16]
   20fa8:	e1520003 	cmp	r2, r3
   20fac:	1a000003 	bne	20fc0 <vListRemove+0x68>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   20fb0:	e51b3010 	ldr	r3, [fp, #-16]
   20fb4:	e5932008 	ldr	r2, [r3, #8]
   20fb8:	e51b3008 	ldr	r3, [fp, #-8]
   20fbc:	e5832004 	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   20fc0:	e51b3010 	ldr	r3, [fp, #-16]
   20fc4:	e3a02000 	mov	r2, #0
   20fc8:	e5832010 	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   20fcc:	e51b3008 	ldr	r3, [fp, #-8]
   20fd0:	e5933000 	ldr	r3, [r3]
   20fd4:	e2432001 	sub	r2, r3, #1
   20fd8:	e51b3008 	ldr	r3, [fp, #-8]
   20fdc:	e5832000 	str	r2, [r3]
}
   20fe0:	e320f000 	nop	{0}
   20fe4:	e28bd000 	add	sp, fp, #0
   20fe8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   20fec:	e12fff1e 	bx	lr

00020ff0 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   20ff0:	e92d4800 	push	{fp, lr}
   20ff4:	e28db004 	add	fp, sp, #4
   20ff8:	e24dd008 	sub	sp, sp, #8
   20ffc:	e50b0008 	str	r0, [fp, #-8]
   21000:	e50b100c 	str	r1, [fp, #-12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   21004:	ebfffd4d 	bl	20540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   21008:	e51b3008 	ldr	r3, [fp, #-8]
   2100c:	e5932000 	ldr	r2, [r3]
   21010:	e51b3008 	ldr	r3, [fp, #-8]
   21014:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   21018:	e51b1008 	ldr	r1, [fp, #-8]
   2101c:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   21020:	e0030391 	mul	r3, r1, r3
   21024:	e0822003 	add	r2, r2, r3
   21028:	e51b3008 	ldr	r3, [fp, #-8]
   2102c:	e5832004 	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   21030:	e51b3008 	ldr	r3, [fp, #-8]
   21034:	e3a02000 	mov	r2, #0
   21038:	e5832038 	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   2103c:	e51b3008 	ldr	r3, [fp, #-8]
   21040:	e5932000 	ldr	r2, [r3]
   21044:	e51b3008 	ldr	r3, [fp, #-8]
   21048:	e5832008 	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   2104c:	e51b3008 	ldr	r3, [fp, #-8]
   21050:	e5932000 	ldr	r2, [r3]
   21054:	e51b3008 	ldr	r3, [fp, #-8]
   21058:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   2105c:	e2433001 	sub	r3, r3, #1
   21060:	e51b1008 	ldr	r1, [fp, #-8]
   21064:	e5911040 	ldr	r1, [r1, #64]	; 0x40
   21068:	e0030391 	mul	r3, r1, r3
   2106c:	e0822003 	add	r2, r2, r3
   21070:	e51b3008 	ldr	r3, [fp, #-8]
   21074:	e583200c 	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   21078:	e51b3008 	ldr	r3, [fp, #-8]
   2107c:	e3e02000 	mvn	r2, #0
   21080:	e5832044 	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   21084:	e51b3008 	ldr	r3, [fp, #-8]
   21088:	e3e02000 	mvn	r2, #0
   2108c:	e5832048 	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   21090:	e51b300c 	ldr	r3, [fp, #-12]
   21094:	e3530000 	cmp	r3, #0
   21098:	1a00000c 	bne	210d0 <xQueueGenericReset+0xe0>
			/* If there are tasks blocked waiting to read from the queue, then 
			the tasks will remain blocked as after this function exits the queue 
			will still be empty.  If there are tasks blocked waiting to	write to 
			the queue, then one should be unblocked as after this function exits 
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   2109c:	e51b3008 	ldr	r3, [fp, #-8]
   210a0:	e5933010 	ldr	r3, [r3, #16]
   210a4:	e3530000 	cmp	r3, #0
   210a8:	0a000010 	beq	210f0 <xQueueGenericReset+0x100>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   210ac:	e51b3008 	ldr	r3, [fp, #-8]
   210b0:	e2833010 	add	r3, r3, #16
   210b4:	e1a00003 	mov	r0, r3
   210b8:	eb000760 	bl	22e40 <xTaskRemoveFromEventList>
   210bc:	e1a03000 	mov	r3, r0
   210c0:	e3530001 	cmp	r3, #1
   210c4:	1a000009 	bne	210f0 <xQueueGenericReset+0x100>
				{
					portYIELD_WITHIN_API();
   210c8:	ef000000 	svc	0x00000000
   210cc:	ea000007 	b	210f0 <xQueueGenericReset+0x100>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   210d0:	e51b3008 	ldr	r3, [fp, #-8]
   210d4:	e2833010 	add	r3, r3, #16
   210d8:	e1a00003 	mov	r0, r3
   210dc:	ebffff1c 	bl	20d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );		
   210e0:	e51b3008 	ldr	r3, [fp, #-8]
   210e4:	e2833024 	add	r3, r3, #36	; 0x24
   210e8:	e1a00003 	mov	r0, r3
   210ec:	ebffff18 	bl	20d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
   210f0:	ebfffd23 	bl	20584 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   210f4:	e3a03001 	mov	r3, #1
}
   210f8:	e1a00003 	mov	r0, r3
   210fc:	e24bd004 	sub	sp, fp, #4
   21100:	e8bd8800 	pop	{fp, pc}

00021104 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   21104:	e92d4800 	push	{fp, lr}
   21108:	e28db004 	add	fp, sp, #4
   2110c:	e24dd020 	sub	sp, sp, #32
   21110:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21114:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   21118:	e1a03002 	mov	r3, r2
   2111c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
   21120:	e3a03000 	mov	r3, #0
   21124:	e50b3008 	str	r3, [fp, #-8]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   21128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2112c:	e3530000 	cmp	r3, #0
   21130:	0a000021 	beq	211bc <xQueueGenericCreate+0xb8>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   21134:	e3a0004c 	mov	r0, #76	; 0x4c
   21138:	eb000b40 	bl	23e40 <pvPortMalloc>
   2113c:	e50b000c 	str	r0, [fp, #-12]
		if( pxNewQueue != NULL )
   21140:	e51b300c 	ldr	r3, [fp, #-12]
   21144:	e3530000 	cmp	r3, #0
   21148:	0a00001b 	beq	211bc <xQueueGenericCreate+0xb8>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   2114c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21150:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   21154:	e0030392 	mul	r3, r2, r3
   21158:	e2833001 	add	r3, r3, #1
   2115c:	e50b3010 	str	r3, [fp, #-16]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   21160:	e51b0010 	ldr	r0, [fp, #-16]
   21164:	eb000b35 	bl	23e40 <pvPortMalloc>
   21168:	e1a02000 	mov	r2, r0
   2116c:	e51b300c 	ldr	r3, [fp, #-12]
   21170:	e5832000 	str	r2, [r3]
			if( pxNewQueue->pcHead != NULL )
   21174:	e51b300c 	ldr	r3, [fp, #-12]
   21178:	e5933000 	ldr	r3, [r3]
   2117c:	e3530000 	cmp	r3, #0
   21180:	0a00000b 	beq	211b4 <xQueueGenericCreate+0xb0>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   21184:	e51b300c 	ldr	r3, [fp, #-12]
   21188:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2118c:	e583203c 	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   21190:	e51b300c 	ldr	r3, [fp, #-12]
   21194:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   21198:	e5832040 	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   2119c:	e3a01001 	mov	r1, #1
   211a0:	e51b000c 	ldr	r0, [fp, #-12]
   211a4:	ebffff91 	bl	20ff0 <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   211a8:	e51b300c 	ldr	r3, [fp, #-12]
   211ac:	e50b3008 	str	r3, [fp, #-8]
   211b0:	ea000001 	b	211bc <xQueueGenericCreate+0xb8>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   211b4:	e51b000c 	ldr	r0, [fp, #-12]
   211b8:	eb000b92 	bl	24008 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
   211bc:	e51b3008 	ldr	r3, [fp, #-8]
}
   211c0:	e1a00003 	mov	r0, r3
   211c4:	e24bd004 	sub	sp, fp, #4
   211c8:	e8bd8800 	pop	{fp, pc}

000211cc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   211cc:	e92d4800 	push	{fp, lr}
   211d0:	e28db004 	add	fp, sp, #4
   211d4:	e24dd020 	sub	sp, sp, #32
   211d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   211dc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   211e0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   211e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   211e8:	e3a03000 	mov	r3, #0
   211ec:	e50b3008 	str	r3, [fp, #-8]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   211f0:	ebfffcd2 	bl	20540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   211f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   211f8:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   211fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21200:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   21204:	e1520003 	cmp	r2, r3
   21208:	2a000012 	bcs	21258 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   2120c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   21210:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   21214:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21218:	eb00016a 	bl	217c8 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   2121c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21220:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   21224:	e3530000 	cmp	r3, #0
   21228:	0a000007 	beq	2124c <xQueueGenericSend+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   2122c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21230:	e2833024 	add	r3, r3, #36	; 0x24
   21234:	e1a00003 	mov	r0, r3
   21238:	eb000700 	bl	22e40 <xTaskRemoveFromEventList>
   2123c:	e1a03000 	mov	r3, r0
   21240:	e3530001 	cmp	r3, #1
   21244:	1a000000 	bne	2124c <xQueueGenericSend+0x80>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   21248:	ef000000 	svc	0x00000000
					}
				}

				taskEXIT_CRITICAL();
   2124c:	ebfffccc 	bl	20584 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   21250:	e3a03001 	mov	r3, #1
   21254:	ea000042 	b	21364 <xQueueGenericSend+0x198>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   21258:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2125c:	e3530000 	cmp	r3, #0
   21260:	1a000002 	bne	21270 <xQueueGenericSend+0xa4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   21264:	ebfffcc6 	bl	20584 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   21268:	e3a03000 	mov	r3, #0
   2126c:	ea00003c 	b	21364 <xQueueGenericSend+0x198>
				}
				else if( xEntryTimeSet == pdFALSE )
   21270:	e51b3008 	ldr	r3, [fp, #-8]
   21274:	e3530000 	cmp	r3, #0
   21278:	1a000004 	bne	21290 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   2127c:	e24b3010 	sub	r3, fp, #16
   21280:	e1a00003 	mov	r0, r3
   21284:	eb000733 	bl	22f58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   21288:	e3a03001 	mov	r3, #1
   2128c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   21290:	ebfffcbb 	bl	20584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   21294:	eb000513 	bl	226e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   21298:	ebfffca8 	bl	20540 <vPortEnterCritical>
   2129c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212a0:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   212a4:	e3730001 	cmn	r3, #1
   212a8:	1a000002 	bne	212b8 <xQueueGenericSend+0xec>
   212ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212b0:	e3a02000 	mov	r2, #0
   212b4:	e5832044 	str	r2, [r3, #68]	; 0x44
   212b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212bc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   212c0:	e3730001 	cmn	r3, #1
   212c4:	1a000002 	bne	212d4 <xQueueGenericSend+0x108>
   212c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   212cc:	e3a02000 	mov	r2, #0
   212d0:	e5832048 	str	r2, [r3, #72]	; 0x48
   212d4:	ebfffcaa 	bl	20584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   212d8:	e24b2020 	sub	r2, fp, #32
   212dc:	e24b3010 	sub	r3, fp, #16
   212e0:	e1a01002 	mov	r1, r2
   212e4:	e1a00003 	mov	r0, r3
   212e8:	eb00072c 	bl	22fa0 <xTaskCheckForTimeOut>
   212ec:	e1a03000 	mov	r3, r0
   212f0:	e3530000 	cmp	r3, #0
   212f4:	1a000016 	bne	21354 <xQueueGenericSend+0x188>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   212f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   212fc:	eb000202 	bl	21b0c <prvIsQueueFull>
   21300:	e1a03000 	mov	r3, r0
   21304:	e3530000 	cmp	r3, #0
   21308:	0a00000d 	beq	21344 <xQueueGenericSend+0x178>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   2130c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21310:	e2833010 	add	r3, r3, #16
   21314:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   21318:	e1a01002 	mov	r1, r2
   2131c:	e1a00003 	mov	r0, r3
   21320:	eb00069f 	bl	22da4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   21324:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21328:	eb000195 	bl	21984 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   2132c:	eb0004f9 	bl	22718 <xTaskResumeAll>
   21330:	e1a03000 	mov	r3, r0
   21334:	e3530000 	cmp	r3, #0
   21338:	1affffac 	bne	211f0 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
   2133c:	ef000000 	svc	0x00000000
   21340:	eaffffaa 	b	211f0 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   21344:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21348:	eb00018d 	bl	21984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   2134c:	eb0004f1 	bl	22718 <xTaskResumeAll>
   21350:	eaffffa6 	b	211f0 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   21354:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21358:	eb000189 	bl	21984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   2135c:	eb0004ed 	bl	22718 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   21360:	e3a03000 	mov	r3, #0
		}
	}
}
   21364:	e1a00003 	mov	r0, r3
   21368:	e24bd004 	sub	sp, fp, #4
   2136c:	e8bd8800 	pop	{fp, pc}

00021370 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   21370:	e92d4800 	push	{fp, lr}
   21374:	e28db004 	add	fp, sp, #4
   21378:	e24dd018 	sub	sp, sp, #24
   2137c:	e50b0010 	str	r0, [fp, #-16]
   21380:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   21384:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
   21388:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   2138c:	e3a03000 	mov	r3, #0
   21390:	e50b300c 	str	r3, [fp, #-12]
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   21394:	e51b3010 	ldr	r3, [fp, #-16]
   21398:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   2139c:	e51b3010 	ldr	r3, [fp, #-16]
   213a0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   213a4:	e1520003 	cmp	r2, r3
   213a8:	2a000021 	bcs	21434 <xQueueGenericSendFromISR+0xc4>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   213ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   213b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   213b4:	e51b0010 	ldr	r0, [fp, #-16]
   213b8:	eb000102 	bl	217c8 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   213bc:	e51b3010 	ldr	r3, [fp, #-16]
   213c0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   213c4:	e3730001 	cmn	r3, #1
   213c8:	1a000011 	bne	21414 <xQueueGenericSendFromISR+0xa4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   213cc:	e51b3010 	ldr	r3, [fp, #-16]
   213d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   213d4:	e3530000 	cmp	r3, #0
   213d8:	0a000012 	beq	21428 <xQueueGenericSendFromISR+0xb8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   213dc:	e51b3010 	ldr	r3, [fp, #-16]
   213e0:	e2833024 	add	r3, r3, #36	; 0x24
   213e4:	e1a00003 	mov	r0, r3
   213e8:	eb000694 	bl	22e40 <xTaskRemoveFromEventList>
   213ec:	e1a03000 	mov	r3, r0
   213f0:	e3530000 	cmp	r3, #0
   213f4:	0a00000b 	beq	21428 <xQueueGenericSendFromISR+0xb8>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   213f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   213fc:	e3530000 	cmp	r3, #0
   21400:	0a000008 	beq	21428 <xQueueGenericSendFromISR+0xb8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   21404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21408:	e3a02001 	mov	r2, #1
   2140c:	e5832000 	str	r2, [r3]
   21410:	ea000004 	b	21428 <xQueueGenericSendFromISR+0xb8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   21414:	e51b3010 	ldr	r3, [fp, #-16]
   21418:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   2141c:	e2832001 	add	r2, r3, #1
   21420:	e51b3010 	ldr	r3, [fp, #-16]
   21424:	e5832048 	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   21428:	e3a03001 	mov	r3, #1
   2142c:	e50b3008 	str	r3, [fp, #-8]
   21430:	ea000001 	b	2143c <xQueueGenericSendFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   21434:	e3a03000 	mov	r3, #0
   21438:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   2143c:	e51b3008 	ldr	r3, [fp, #-8]
}
   21440:	e1a00003 	mov	r0, r3
   21444:	e24bd004 	sub	sp, fp, #4
   21448:	e8bd8800 	pop	{fp, pc}

0002144c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   2144c:	e92d4800 	push	{fp, lr}
   21450:	e28db004 	add	fp, sp, #4
   21454:	e24dd020 	sub	sp, sp, #32
   21458:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2145c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   21460:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
   21464:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
   21468:	e3a03000 	mov	r3, #0
   2146c:	e50b3008 	str	r3, [fp, #-8]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   21470:	ebfffc32 	bl	20540 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   21474:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21478:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2147c:	e3530000 	cmp	r3, #0
   21480:	0a00002c 	beq	21538 <xQueueGenericReceive+0xec>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   21484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21488:	e593300c 	ldr	r3, [r3, #12]
   2148c:	e50b300c 	str	r3, [fp, #-12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   21490:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   21494:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21498:	eb000115 	bl	218f4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
   2149c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   214a0:	e3530000 	cmp	r3, #0
   214a4:	1a000011 	bne	214f0 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   214a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214ac:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   214b0:	e2432001 	sub	r2, r3, #1
   214b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214b8:	e5832038 	str	r2, [r3, #56]	; 0x38
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   214bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214c0:	e5933010 	ldr	r3, [r3, #16]
   214c4:	e3530000 	cmp	r3, #0
   214c8:	0a000017 	beq	2152c <xQueueGenericReceive+0xe0>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   214cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214d0:	e2833010 	add	r3, r3, #16
   214d4:	e1a00003 	mov	r0, r3
   214d8:	eb000658 	bl	22e40 <xTaskRemoveFromEventList>
   214dc:	e1a03000 	mov	r3, r0
   214e0:	e3530001 	cmp	r3, #1
   214e4:	1a000010 	bne	2152c <xQueueGenericReceive+0xe0>
						{
							portYIELD_WITHIN_API();
   214e8:	ef000000 	svc	0x00000000
   214ec:	ea00000e 	b	2152c <xQueueGenericReceive+0xe0>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   214f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   214f4:	e51b200c 	ldr	r2, [fp, #-12]
   214f8:	e583200c 	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   214fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21500:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   21504:	e3530000 	cmp	r3, #0
   21508:	0a000007 	beq	2152c <xQueueGenericReceive+0xe0>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   2150c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21510:	e2833024 	add	r3, r3, #36	; 0x24
   21514:	e1a00003 	mov	r0, r3
   21518:	eb000648 	bl	22e40 <xTaskRemoveFromEventList>
   2151c:	e1a03000 	mov	r3, r0
   21520:	e3530000 	cmp	r3, #0
   21524:	0a000000 	beq	2152c <xQueueGenericReceive+0xe0>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   21528:	ef000000 	svc	0x00000000
						}
					}
				}

				taskEXIT_CRITICAL();
   2152c:	ebfffc14 	bl	20584 <vPortExitCritical>
				return pdPASS;
   21530:	e3a03001 	mov	r3, #1
   21534:	ea000042 	b	21644 <xQueueGenericReceive+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   21538:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2153c:	e3530000 	cmp	r3, #0
   21540:	1a000002 	bne	21550 <xQueueGenericReceive+0x104>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   21544:	ebfffc0e 	bl	20584 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   21548:	e3a03000 	mov	r3, #0
   2154c:	ea00003c 	b	21644 <xQueueGenericReceive+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
   21550:	e51b3008 	ldr	r3, [fp, #-8]
   21554:	e3530000 	cmp	r3, #0
   21558:	1a000004 	bne	21570 <xQueueGenericReceive+0x124>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   2155c:	e24b3014 	sub	r3, fp, #20
   21560:	e1a00003 	mov	r0, r3
   21564:	eb00067b 	bl	22f58 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
   21568:	e3a03001 	mov	r3, #1
   2156c:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}
		taskEXIT_CRITICAL();
   21570:	ebfffc03 	bl	20584 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   21574:	eb00045b 	bl	226e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
   21578:	ebfffbf0 	bl	20540 <vPortEnterCritical>
   2157c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21580:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   21584:	e3730001 	cmn	r3, #1
   21588:	1a000002 	bne	21598 <xQueueGenericReceive+0x14c>
   2158c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21590:	e3a02000 	mov	r2, #0
   21594:	e5832044 	str	r2, [r3, #68]	; 0x44
   21598:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2159c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   215a0:	e3730001 	cmn	r3, #1
   215a4:	1a000002 	bne	215b4 <xQueueGenericReceive+0x168>
   215a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   215ac:	e3a02000 	mov	r2, #0
   215b0:	e5832048 	str	r2, [r3, #72]	; 0x48
   215b4:	ebfffbf2 	bl	20584 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   215b8:	e24b2020 	sub	r2, fp, #32
   215bc:	e24b3014 	sub	r3, fp, #20
   215c0:	e1a01002 	mov	r1, r2
   215c4:	e1a00003 	mov	r0, r3
   215c8:	eb000674 	bl	22fa0 <xTaskCheckForTimeOut>
   215cc:	e1a03000 	mov	r3, r0
   215d0:	e3530000 	cmp	r3, #0
   215d4:	1a000016 	bne	21634 <xQueueGenericReceive+0x1e8>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   215d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   215dc:	eb000129 	bl	21a88 <prvIsQueueEmpty>
   215e0:	e1a03000 	mov	r3, r0
   215e4:	e3530000 	cmp	r3, #0
   215e8:	0a00000d 	beq	21624 <xQueueGenericReceive+0x1d8>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   215ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   215f0:	e2833024 	add	r3, r3, #36	; 0x24
   215f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   215f8:	e1a01002 	mov	r1, r2
   215fc:	e1a00003 	mov	r0, r3
   21600:	eb0005e7 	bl	22da4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
   21604:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21608:	eb0000dd 	bl	21984 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
   2160c:	eb000441 	bl	22718 <xTaskResumeAll>
   21610:	e1a03000 	mov	r3, r0
   21614:	e3530000 	cmp	r3, #0
   21618:	1affff94 	bne	21470 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
   2161c:	ef000000 	svc	0x00000000
   21620:	eaffff92 	b	21470 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   21624:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21628:	eb0000d5 	bl	21984 <prvUnlockQueue>
				( void ) xTaskResumeAll();
   2162c:	eb000439 	bl	22718 <xTaskResumeAll>
   21630:	eaffff8e 	b	21470 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   21634:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   21638:	eb0000d1 	bl	21984 <prvUnlockQueue>
			( void ) xTaskResumeAll();
   2163c:	eb000435 	bl	22718 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   21640:	e3a03000 	mov	r3, #0
		}
	}
}
   21644:	e1a00003 	mov	r0, r3
   21648:	e24bd004 	sub	sp, fp, #4
   2164c:	e8bd8800 	pop	{fp, pc}

00021650 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxHigherPriorityTaskWoken )
{
   21650:	e92d4800 	push	{fp, lr}
   21654:	e28db004 	add	fp, sp, #4
   21658:	e24dd018 	sub	sp, sp, #24
   2165c:	e50b0010 	str	r0, [fp, #-16]
   21660:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   21664:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   21668:	e3a03000 	mov	r3, #0
   2166c:	e50b300c 	str	r3, [fp, #-12]
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   21670:	e51b3010 	ldr	r3, [fp, #-16]
   21674:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   21678:	e3530000 	cmp	r3, #0
   2167c:	0a000025 	beq	21718 <xQueueReceiveFromISR+0xc8>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   21680:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   21684:	e51b0010 	ldr	r0, [fp, #-16]
   21688:	eb000099 	bl	218f4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
   2168c:	e51b3010 	ldr	r3, [fp, #-16]
   21690:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   21694:	e2432001 	sub	r2, r3, #1
   21698:	e51b3010 	ldr	r3, [fp, #-16]
   2169c:	e5832038 	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   216a0:	e51b3010 	ldr	r3, [fp, #-16]
   216a4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   216a8:	e3730001 	cmn	r3, #1
   216ac:	1a000011 	bne	216f8 <xQueueReceiveFromISR+0xa8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   216b0:	e51b3010 	ldr	r3, [fp, #-16]
   216b4:	e5933010 	ldr	r3, [r3, #16]
   216b8:	e3530000 	cmp	r3, #0
   216bc:	0a000012 	beq	2170c <xQueueReceiveFromISR+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   216c0:	e51b3010 	ldr	r3, [fp, #-16]
   216c4:	e2833010 	add	r3, r3, #16
   216c8:	e1a00003 	mov	r0, r3
   216cc:	eb0005db 	bl	22e40 <xTaskRemoveFromEventList>
   216d0:	e1a03000 	mov	r3, r0
   216d4:	e3530000 	cmp	r3, #0
   216d8:	0a00000b 	beq	2170c <xQueueReceiveFromISR+0xbc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   216dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   216e0:	e3530000 	cmp	r3, #0
   216e4:	0a000008 	beq	2170c <xQueueReceiveFromISR+0xbc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   216e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   216ec:	e3a02001 	mov	r2, #1
   216f0:	e5832000 	str	r2, [r3]
   216f4:	ea000004 	b	2170c <xQueueReceiveFromISR+0xbc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   216f8:	e51b3010 	ldr	r3, [fp, #-16]
   216fc:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   21700:	e2832001 	add	r2, r3, #1
   21704:	e51b3010 	ldr	r3, [fp, #-16]
   21708:	e5832044 	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   2170c:	e3a03001 	mov	r3, #1
   21710:	e50b3008 	str	r3, [fp, #-8]
   21714:	ea000001 	b	21720 <xQueueReceiveFromISR+0xd0>
		}
		else
		{
			xReturn = pdFAIL;
   21718:	e3a03000 	mov	r3, #0
   2171c:	e50b3008 	str	r3, [fp, #-8]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   21720:	e51b3008 	ldr	r3, [fp, #-8]
}
   21724:	e1a00003 	mov	r0, r3
   21728:	e24bd004 	sub	sp, fp, #4
   2172c:	e8bd8800 	pop	{fp, pc}

00021730 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
   21730:	e92d4800 	push	{fp, lr}
   21734:	e28db004 	add	fp, sp, #4
   21738:	e24dd010 	sub	sp, sp, #16
   2173c:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
   21740:	ebfffb7e 	bl	20540 <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
   21744:	e51b3010 	ldr	r3, [fp, #-16]
   21748:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2174c:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21750:	ebfffb8b 	bl	20584 <vPortExitCritical>

	return uxReturn;
   21754:	e51b3008 	ldr	r3, [fp, #-8]
}
   21758:	e1a00003 	mov	r0, r3
   2175c:	e24bd004 	sub	sp, fp, #4
   21760:	e8bd8800 	pop	{fp, pc}

00021764 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
   21764:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   21768:	e28db000 	add	fp, sp, #0
   2176c:	e24dd014 	sub	sp, sp, #20
   21770:	e50b0010 	str	r0, [fp, #-16]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
   21774:	e51b3010 	ldr	r3, [fp, #-16]
   21778:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   2177c:	e50b3008 	str	r3, [fp, #-8]

	return uxReturn;
   21780:	e51b3008 	ldr	r3, [fp, #-8]
}
   21784:	e1a00003 	mov	r0, r3
   21788:	e28bd000 	add	sp, fp, #0
   2178c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   21790:	e12fff1e 	bx	lr

00021794 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
   21794:	e92d4800 	push	{fp, lr}
   21798:	e28db004 	add	fp, sp, #4
   2179c:	e24dd008 	sub	sp, sp, #8
   217a0:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
   217a4:	e51b3008 	ldr	r3, [fp, #-8]
   217a8:	e5933000 	ldr	r3, [r3]
   217ac:	e1a00003 	mov	r0, r3
   217b0:	eb000a14 	bl	24008 <vPortFree>
	vPortFree( pxQueue );
   217b4:	e51b0008 	ldr	r0, [fp, #-8]
   217b8:	eb000a12 	bl	24008 <vPortFree>
}
   217bc:	e320f000 	nop	{0}
   217c0:	e24bd004 	sub	sp, fp, #4
   217c4:	e8bd8800 	pop	{fp, pc}

000217c8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   217c8:	e92d4800 	push	{fp, lr}
   217cc:	e28db004 	add	fp, sp, #4
   217d0:	e24dd010 	sub	sp, sp, #16
   217d4:	e50b0008 	str	r0, [fp, #-8]
   217d8:	e50b100c 	str	r1, [fp, #-12]
   217dc:	e50b2010 	str	r2, [fp, #-16]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   217e0:	e51b3008 	ldr	r3, [fp, #-8]
   217e4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   217e8:	e3530000 	cmp	r3, #0
   217ec:	0a000038 	beq	218d4 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   217f0:	e51b3010 	ldr	r3, [fp, #-16]
   217f4:	e3530000 	cmp	r3, #0
   217f8:	1a000018 	bne	21860 <prvCopyDataToQueue+0x98>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   217fc:	e51b3008 	ldr	r3, [fp, #-8]
   21800:	e5930008 	ldr	r0, [r3, #8]
   21804:	e51b3008 	ldr	r3, [fp, #-8]
   21808:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2180c:	e1a02003 	mov	r2, r3
   21810:	e51b100c 	ldr	r1, [fp, #-12]
   21814:	eb0026ca 	bl	2b344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   21818:	e51b3008 	ldr	r3, [fp, #-8]
   2181c:	e5932008 	ldr	r2, [r3, #8]
   21820:	e51b3008 	ldr	r3, [fp, #-8]
   21824:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   21828:	e0822003 	add	r2, r2, r3
   2182c:	e51b3008 	ldr	r3, [fp, #-8]
   21830:	e5832008 	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   21834:	e51b3008 	ldr	r3, [fp, #-8]
   21838:	e5932008 	ldr	r2, [r3, #8]
   2183c:	e51b3008 	ldr	r3, [fp, #-8]
   21840:	e5933004 	ldr	r3, [r3, #4]
   21844:	e1520003 	cmp	r2, r3
   21848:	3a000021 	bcc	218d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   2184c:	e51b3008 	ldr	r3, [fp, #-8]
   21850:	e5932000 	ldr	r2, [r3]
   21854:	e51b3008 	ldr	r3, [fp, #-8]
   21858:	e5832008 	str	r2, [r3, #8]
   2185c:	ea00001c 	b	218d4 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   21860:	e51b3008 	ldr	r3, [fp, #-8]
   21864:	e593000c 	ldr	r0, [r3, #12]
   21868:	e51b3008 	ldr	r3, [fp, #-8]
   2186c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   21870:	e1a02003 	mov	r2, r3
   21874:	e51b100c 	ldr	r1, [fp, #-12]
   21878:	eb0026b1 	bl	2b344 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   2187c:	e51b3008 	ldr	r3, [fp, #-8]
   21880:	e593200c 	ldr	r2, [r3, #12]
   21884:	e51b3008 	ldr	r3, [fp, #-8]
   21888:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2188c:	e2633000 	rsb	r3, r3, #0
   21890:	e0822003 	add	r2, r2, r3
   21894:	e51b3008 	ldr	r3, [fp, #-8]
   21898:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   2189c:	e51b3008 	ldr	r3, [fp, #-8]
   218a0:	e593200c 	ldr	r2, [r3, #12]
   218a4:	e51b3008 	ldr	r3, [fp, #-8]
   218a8:	e5933000 	ldr	r3, [r3]
   218ac:	e1520003 	cmp	r2, r3
   218b0:	2a000007 	bcs	218d4 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   218b4:	e51b3008 	ldr	r3, [fp, #-8]
   218b8:	e5932004 	ldr	r2, [r3, #4]
   218bc:	e51b3008 	ldr	r3, [fp, #-8]
   218c0:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   218c4:	e2633000 	rsb	r3, r3, #0
   218c8:	e0822003 	add	r2, r2, r3
   218cc:	e51b3008 	ldr	r3, [fp, #-8]
   218d0:	e583200c 	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   218d4:	e51b3008 	ldr	r3, [fp, #-8]
   218d8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   218dc:	e2832001 	add	r2, r3, #1
   218e0:	e51b3008 	ldr	r3, [fp, #-8]
   218e4:	e5832038 	str	r2, [r3, #56]	; 0x38
}
   218e8:	e320f000 	nop	{0}
   218ec:	e24bd004 	sub	sp, fp, #4
   218f0:	e8bd8800 	pop	{fp, pc}

000218f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   218f4:	e92d4800 	push	{fp, lr}
   218f8:	e28db004 	add	fp, sp, #4
   218fc:	e24dd008 	sub	sp, sp, #8
   21900:	e50b0008 	str	r0, [fp, #-8]
   21904:	e50b100c 	str	r1, [fp, #-12]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   21908:	e51b3008 	ldr	r3, [fp, #-8]
   2190c:	e5933000 	ldr	r3, [r3]
   21910:	e3530000 	cmp	r3, #0
   21914:	0a000017 	beq	21978 <prvCopyDataFromQueue+0x84>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   21918:	e51b3008 	ldr	r3, [fp, #-8]
   2191c:	e593200c 	ldr	r2, [r3, #12]
   21920:	e51b3008 	ldr	r3, [fp, #-8]
   21924:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   21928:	e0822003 	add	r2, r2, r3
   2192c:	e51b3008 	ldr	r3, [fp, #-8]
   21930:	e583200c 	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   21934:	e51b3008 	ldr	r3, [fp, #-8]
   21938:	e593200c 	ldr	r2, [r3, #12]
   2193c:	e51b3008 	ldr	r3, [fp, #-8]
   21940:	e5933004 	ldr	r3, [r3, #4]
   21944:	e1520003 	cmp	r2, r3
   21948:	3a000003 	bcc	2195c <prvCopyDataFromQueue+0x68>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   2194c:	e51b3008 	ldr	r3, [fp, #-8]
   21950:	e5932000 	ldr	r2, [r3]
   21954:	e51b3008 	ldr	r3, [fp, #-8]
   21958:	e583200c 	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   2195c:	e51b3008 	ldr	r3, [fp, #-8]
   21960:	e593100c 	ldr	r1, [r3, #12]
   21964:	e51b3008 	ldr	r3, [fp, #-8]
   21968:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   2196c:	e1a02003 	mov	r2, r3
   21970:	e51b000c 	ldr	r0, [fp, #-12]
   21974:	eb002672 	bl	2b344 <memcpy>
	}
}
   21978:	e320f000 	nop	{0}
   2197c:	e24bd004 	sub	sp, fp, #4
   21980:	e8bd8800 	pop	{fp, pc}

00021984 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   21984:	e92d4800 	push	{fp, lr}
   21988:	e28db004 	add	fp, sp, #4
   2198c:	e24dd008 	sub	sp, sp, #8
   21990:	e50b0008 	str	r0, [fp, #-8]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   21994:	ebfffae9 	bl	20540 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   21998:	ea000010 	b	219e0 <prvUnlockQueue+0x5c>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   2199c:	e51b3008 	ldr	r3, [fp, #-8]
   219a0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   219a4:	e3530000 	cmp	r3, #0
   219a8:	0a000011 	beq	219f4 <prvUnlockQueue+0x70>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   219ac:	e51b3008 	ldr	r3, [fp, #-8]
   219b0:	e2833024 	add	r3, r3, #36	; 0x24
   219b4:	e1a00003 	mov	r0, r3
   219b8:	eb000520 	bl	22e40 <xTaskRemoveFromEventList>
   219bc:	e1a03000 	mov	r3, r0
   219c0:	e3530000 	cmp	r3, #0
   219c4:	0a000000 	beq	219cc <prvUnlockQueue+0x48>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   219c8:	eb0005b1 	bl	23094 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
   219cc:	e51b3008 	ldr	r3, [fp, #-8]
   219d0:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   219d4:	e2432001 	sub	r2, r3, #1
   219d8:	e51b3008 	ldr	r3, [fp, #-8]
   219dc:	e5832048 	str	r2, [r3, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   219e0:	e51b3008 	ldr	r3, [fp, #-8]
   219e4:	e5933048 	ldr	r3, [r3, #72]	; 0x48
   219e8:	e3530000 	cmp	r3, #0
   219ec:	caffffea 	bgt	2199c <prvUnlockQueue+0x18>
   219f0:	ea000000 	b	219f8 <prvUnlockQueue+0x74>
			}
			else
			{
				break;
   219f4:	e320f000 	nop	{0}
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   219f8:	e51b3008 	ldr	r3, [fp, #-8]
   219fc:	e3e02000 	mvn	r2, #0
   21a00:	e5832048 	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   21a04:	ebfffade 	bl	20584 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   21a08:	ebfffacc 	bl	20540 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   21a0c:	ea000010 	b	21a54 <prvUnlockQueue+0xd0>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   21a10:	e51b3008 	ldr	r3, [fp, #-8]
   21a14:	e5933010 	ldr	r3, [r3, #16]
   21a18:	e3530000 	cmp	r3, #0
   21a1c:	0a000011 	beq	21a68 <prvUnlockQueue+0xe4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   21a20:	e51b3008 	ldr	r3, [fp, #-8]
   21a24:	e2833010 	add	r3, r3, #16
   21a28:	e1a00003 	mov	r0, r3
   21a2c:	eb000503 	bl	22e40 <xTaskRemoveFromEventList>
   21a30:	e1a03000 	mov	r3, r0
   21a34:	e3530000 	cmp	r3, #0
   21a38:	0a000000 	beq	21a40 <prvUnlockQueue+0xbc>
				{
					vTaskMissedYield();
   21a3c:	eb000594 	bl	23094 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
   21a40:	e51b3008 	ldr	r3, [fp, #-8]
   21a44:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   21a48:	e2432001 	sub	r2, r3, #1
   21a4c:	e51b3008 	ldr	r3, [fp, #-8]
   21a50:	e5832044 	str	r2, [r3, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   21a54:	e51b3008 	ldr	r3, [fp, #-8]
   21a58:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   21a5c:	e3530000 	cmp	r3, #0
   21a60:	caffffea 	bgt	21a10 <prvUnlockQueue+0x8c>
   21a64:	ea000000 	b	21a6c <prvUnlockQueue+0xe8>
			}
			else
			{
				break;
   21a68:	e320f000 	nop	{0}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   21a6c:	e51b3008 	ldr	r3, [fp, #-8]
   21a70:	e3e02000 	mvn	r2, #0
   21a74:	e5832044 	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   21a78:	ebfffac1 	bl	20584 <vPortExitCritical>
}
   21a7c:	e320f000 	nop	{0}
   21a80:	e24bd004 	sub	sp, fp, #4
   21a84:	e8bd8800 	pop	{fp, pc}

00021a88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
   21a88:	e92d4800 	push	{fp, lr}
   21a8c:	e28db004 	add	fp, sp, #4
   21a90:	e24dd010 	sub	sp, sp, #16
   21a94:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   21a98:	ebfffaa8 	bl	20540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   21a9c:	e51b3010 	ldr	r3, [fp, #-16]
   21aa0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   21aa4:	e3530000 	cmp	r3, #0
   21aa8:	03a03001 	moveq	r3, #1
   21aac:	13a03000 	movne	r3, #0
   21ab0:	e6ef3073 	uxtb	r3, r3
   21ab4:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21ab8:	ebfffab1 	bl	20584 <vPortExitCritical>

	return xReturn;
   21abc:	e51b3008 	ldr	r3, [fp, #-8]
}
   21ac0:	e1a00003 	mov	r0, r3
   21ac4:	e24bd004 	sub	sp, fp, #4
   21ac8:	e8bd8800 	pop	{fp, pc}

00021acc <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
   21acc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   21ad0:	e28db000 	add	fp, sp, #0
   21ad4:	e24dd014 	sub	sp, sp, #20
   21ad8:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   21adc:	e51b3010 	ldr	r3, [fp, #-16]
   21ae0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
   21ae4:	e3530000 	cmp	r3, #0
   21ae8:	03a03001 	moveq	r3, #1
   21aec:	13a03000 	movne	r3, #0
   21af0:	e6ef3073 	uxtb	r3, r3
   21af4:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   21af8:	e51b3008 	ldr	r3, [fp, #-8]
}
   21afc:	e1a00003 	mov	r0, r3
   21b00:	e28bd000 	add	sp, fp, #0
   21b04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   21b08:	e12fff1e 	bx	lr

00021b0c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
   21b0c:	e92d4800 	push	{fp, lr}
   21b10:	e28db004 	add	fp, sp, #4
   21b14:	e24dd010 	sub	sp, sp, #16
   21b18:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   21b1c:	ebfffa87 	bl	20540 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   21b20:	e51b3010 	ldr	r3, [fp, #-16]
   21b24:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   21b28:	e51b3010 	ldr	r3, [fp, #-16]
   21b2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   21b30:	e1520003 	cmp	r2, r3
   21b34:	03a03001 	moveq	r3, #1
   21b38:	13a03000 	movne	r3, #0
   21b3c:	e6ef3073 	uxtb	r3, r3
   21b40:	e50b3008 	str	r3, [fp, #-8]
	taskEXIT_CRITICAL();
   21b44:	ebfffa8e 	bl	20584 <vPortExitCritical>

	return xReturn;
   21b48:	e51b3008 	ldr	r3, [fp, #-8]
}
   21b4c:	e1a00003 	mov	r0, r3
   21b50:	e24bd004 	sub	sp, fp, #4
   21b54:	e8bd8800 	pop	{fp, pc}

00021b58 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
   21b58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   21b5c:	e28db000 	add	fp, sp, #0
   21b60:	e24dd014 	sub	sp, sp, #20
   21b64:	e50b0010 	str	r0, [fp, #-16]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   21b68:	e51b3010 	ldr	r3, [fp, #-16]
   21b6c:	e5932038 	ldr	r2, [r3, #56]	; 0x38
   21b70:	e51b3010 	ldr	r3, [fp, #-16]
   21b74:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
   21b78:	e1520003 	cmp	r2, r3
   21b7c:	03a03001 	moveq	r3, #1
   21b80:	13a03000 	movne	r3, #0
   21b84:	e6ef3073 	uxtb	r3, r3
   21b88:	e50b3008 	str	r3, [fp, #-8]

	return xReturn;
   21b8c:	e51b3008 	ldr	r3, [fp, #-8]
}
   21b90:	e1a00003 	mov	r0, r3
   21b94:	e28bd000 	add	sp, fp, #0
   21b98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   21b9c:	e12fff1e 	bx	lr

00021ba0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   21ba0:	e92d4800 	push	{fp, lr}
   21ba4:	e28db004 	add	fp, sp, #4
   21ba8:	e24dd028 	sub	sp, sp, #40	; 0x28
   21bac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21bb0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   21bb4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
   21bb8:	e1a03002 	mov	r3, r2
   21bbc:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   21bc0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   21bc4:	e59b100c 	ldr	r1, [fp, #12]
   21bc8:	e1a00003 	mov	r0, r3
   21bcc:	eb000603 	bl	233e0 <prvAllocateTCBAndStack>
   21bd0:	e50b000c 	str	r0, [fp, #-12]

	if( pxNewTCB != NULL )
   21bd4:	e51b300c 	ldr	r3, [fp, #-12]
   21bd8:	e3530000 	cmp	r3, #0
   21bdc:	0a000067 	beq	21d80 <xTaskGenericCreate+0x1e0>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   21be0:	e51b300c 	ldr	r3, [fp, #-12]
   21be4:	e5932030 	ldr	r2, [r3, #48]	; 0x30
   21be8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   21bec:	e2433107 	sub	r3, r3, #-1073741823	; 0xc0000001
   21bf0:	e1a03103 	lsl	r3, r3, #2
   21bf4:	e0823003 	add	r3, r2, r3
   21bf8:	e50b3010 	str	r3, [fp, #-16]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   21bfc:	e51b3010 	ldr	r3, [fp, #-16]
   21c00:	e3c33007 	bic	r3, r3, #7
   21c04:	e50b3010 	str	r3, [fp, #-16]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   21c08:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
   21c0c:	e58d3000 	str	r3, [sp]
   21c10:	e59b3010 	ldr	r3, [fp, #16]
   21c14:	e59b2004 	ldr	r2, [fp, #4]
   21c18:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   21c1c:	e51b000c 	ldr	r0, [fp, #-12]
   21c20:	eb000531 	bl	230ec <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   21c24:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   21c28:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   21c2c:	e51b0010 	ldr	r0, [fp, #-16]
   21c30:	ebfff8f2 	bl	20000 <pxPortInitialiseStack>
   21c34:	e1a02000 	mov	r2, r0
   21c38:	e51b300c 	ldr	r3, [fp, #-12]
   21c3c:	e5832000 	str	r2, [r3]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
   21c40:	e59b3008 	ldr	r3, [fp, #8]
   21c44:	e3530000 	cmp	r3, #0
   21c48:	0a000002 	beq	21c58 <xTaskGenericCreate+0xb8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   21c4c:	e59b3008 	ldr	r3, [fp, #8]
   21c50:	e51b200c 	ldr	r2, [fp, #-12]
   21c54:	e5832000 	str	r2, [r3]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   21c58:	ebfffa38 	bl	20540 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
   21c5c:	e59f316c 	ldr	r3, [pc, #364]	; 21dd0 <xTaskGenericCreate+0x230>
   21c60:	e5933000 	ldr	r3, [r3]
   21c64:	e2833001 	add	r3, r3, #1
   21c68:	e59f2160 	ldr	r2, [pc, #352]	; 21dd0 <xTaskGenericCreate+0x230>
   21c6c:	e5823000 	str	r3, [r2]
			if( pxCurrentTCB == NULL )
   21c70:	e59f315c 	ldr	r3, [pc, #348]	; 21dd4 <xTaskGenericCreate+0x234>
   21c74:	e5933000 	ldr	r3, [r3]
   21c78:	e3530000 	cmp	r3, #0
   21c7c:	1a000008 	bne	21ca4 <xTaskGenericCreate+0x104>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   21c80:	e59f214c 	ldr	r2, [pc, #332]	; 21dd4 <xTaskGenericCreate+0x234>
   21c84:	e51b300c 	ldr	r3, [fp, #-12]
   21c88:	e5823000 	str	r3, [r2]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   21c8c:	e59f313c 	ldr	r3, [pc, #316]	; 21dd0 <xTaskGenericCreate+0x230>
   21c90:	e5933000 	ldr	r3, [r3]
   21c94:	e3530001 	cmp	r3, #1
   21c98:	1a00000e 	bne	21cd8 <xTaskGenericCreate+0x138>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   21c9c:	eb000542 	bl	231ac <prvInitialiseTaskLists>
   21ca0:	ea00000c 	b	21cd8 <xTaskGenericCreate+0x138>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   21ca4:	e59f312c 	ldr	r3, [pc, #300]	; 21dd8 <xTaskGenericCreate+0x238>
   21ca8:	e5933000 	ldr	r3, [r3]
   21cac:	e3530000 	cmp	r3, #0
   21cb0:	1a000008 	bne	21cd8 <xTaskGenericCreate+0x138>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   21cb4:	e59f3118 	ldr	r3, [pc, #280]	; 21dd4 <xTaskGenericCreate+0x234>
   21cb8:	e5933000 	ldr	r3, [r3]
   21cbc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   21cc0:	e59b2004 	ldr	r2, [fp, #4]
   21cc4:	e1520003 	cmp	r2, r3
   21cc8:	3a000002 	bcc	21cd8 <xTaskGenericCreate+0x138>
					{
						pxCurrentTCB = pxNewTCB;
   21ccc:	e59f2100 	ldr	r2, [pc, #256]	; 21dd4 <xTaskGenericCreate+0x234>
   21cd0:	e51b300c 	ldr	r3, [fp, #-12]
   21cd4:	e5823000 	str	r3, [r2]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   21cd8:	e51b300c 	ldr	r3, [fp, #-12]
   21cdc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   21ce0:	e59f30f4 	ldr	r3, [pc, #244]	; 21ddc <xTaskGenericCreate+0x23c>
   21ce4:	e5933000 	ldr	r3, [r3]
   21ce8:	e1520003 	cmp	r2, r3
   21cec:	9a000003 	bls	21d00 <xTaskGenericCreate+0x160>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   21cf0:	e51b300c 	ldr	r3, [fp, #-12]
   21cf4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   21cf8:	e59f20dc 	ldr	r2, [pc, #220]	; 21ddc <xTaskGenericCreate+0x23c>
   21cfc:	e5823000 	str	r3, [r2]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
   21d00:	e59f30d8 	ldr	r3, [pc, #216]	; 21de0 <xTaskGenericCreate+0x240>
   21d04:	e5933000 	ldr	r3, [r3]
   21d08:	e2833001 	add	r3, r3, #1
   21d0c:	e59f20cc 	ldr	r2, [pc, #204]	; 21de0 <xTaskGenericCreate+0x240>
   21d10:	e5823000 	str	r3, [r2]

			prvAddTaskToReadyQueue( pxNewTCB );
   21d14:	e51b300c 	ldr	r3, [fp, #-12]
   21d18:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   21d1c:	e59f30c0 	ldr	r3, [pc, #192]	; 21de4 <xTaskGenericCreate+0x244>
   21d20:	e5933000 	ldr	r3, [r3]
   21d24:	e1520003 	cmp	r2, r3
   21d28:	9a000003 	bls	21d3c <xTaskGenericCreate+0x19c>
   21d2c:	e51b300c 	ldr	r3, [fp, #-12]
   21d30:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   21d34:	e59f20a8 	ldr	r2, [pc, #168]	; 21de4 <xTaskGenericCreate+0x244>
   21d38:	e5823000 	str	r3, [r2]
   21d3c:	e51b300c 	ldr	r3, [fp, #-12]
   21d40:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   21d44:	e1a03002 	mov	r3, r2
   21d48:	e1a03103 	lsl	r3, r3, #2
   21d4c:	e0833002 	add	r3, r3, r2
   21d50:	e1a03103 	lsl	r3, r3, #2
   21d54:	e59f208c 	ldr	r2, [pc, #140]	; 21de8 <xTaskGenericCreate+0x248>
   21d58:	e0832002 	add	r2, r3, r2
   21d5c:	e51b300c 	ldr	r3, [fp, #-12]
   21d60:	e2833004 	add	r3, r3, #4
   21d64:	e1a01003 	mov	r1, r3
   21d68:	e1a00002 	mov	r0, r2
   21d6c:	ebfffc1d 	bl	20de8 <vListInsertEnd>

			xReturn = pdPASS;
   21d70:	e3a03001 	mov	r3, #1
   21d74:	e50b3008 	str	r3, [fp, #-8]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   21d78:	ebfffa01 	bl	20584 <vPortExitCritical>
   21d7c:	ea000001 	b	21d88 <xTaskGenericCreate+0x1e8>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   21d80:	e3e03000 	mvn	r3, #0
   21d84:	e50b3008 	str	r3, [fp, #-8]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   21d88:	e51b3008 	ldr	r3, [fp, #-8]
   21d8c:	e3530001 	cmp	r3, #1
   21d90:	1a00000a 	bne	21dc0 <xTaskGenericCreate+0x220>
	{
		if( xSchedulerRunning != pdFALSE )
   21d94:	e59f303c 	ldr	r3, [pc, #60]	; 21dd8 <xTaskGenericCreate+0x238>
   21d98:	e5933000 	ldr	r3, [r3]
   21d9c:	e3530000 	cmp	r3, #0
   21da0:	0a000006 	beq	21dc0 <xTaskGenericCreate+0x220>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   21da4:	e59f3028 	ldr	r3, [pc, #40]	; 21dd4 <xTaskGenericCreate+0x234>
   21da8:	e5933000 	ldr	r3, [r3]
   21dac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   21db0:	e59b2004 	ldr	r2, [fp, #4]
   21db4:	e1520003 	cmp	r2, r3
   21db8:	9a000000 	bls	21dc0 <xTaskGenericCreate+0x220>
			{
				portYIELD_WITHIN_API();
   21dbc:	ef000000 	svc	0x00000000
			}
		}
	}

	return xReturn;
   21dc0:	e51b3008 	ldr	r3, [fp, #-8]
}
   21dc4:	e1a00003 	mov	r0, r3
   21dc8:	e24bd004 	sub	sp, fp, #4
   21dcc:	e8bd8800 	pop	{fp, pc}
   21dd0:	0002c04c 	andeq	ip, r2, ip, asr #32
   21dd4:	0002bf74 	andeq	fp, r2, r4, ror pc
   21dd8:	0002c05c 	andeq	ip, r2, ip, asr r0
   21ddc:	0002c054 	andeq	ip, r2, r4, asr r0
   21de0:	0002c070 	andeq	ip, r2, r0, ror r0
   21de4:	0002c058 	andeq	ip, r2, r8, asr r0
   21de8:	0002bf78 	andeq	fp, r2, r8, ror pc

00021dec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
   21dec:	e92d4800 	push	{fp, lr}
   21df0:	e28db004 	add	fp, sp, #4
   21df4:	e24dd010 	sub	sp, sp, #16
   21df8:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   21dfc:	ebfff9cf 	bl	20540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
   21e00:	e59f30d0 	ldr	r3, [pc, #208]	; 21ed8 <vTaskDelete+0xec>
   21e04:	e5933000 	ldr	r3, [r3]
   21e08:	e51b2010 	ldr	r2, [fp, #-16]
   21e0c:	e1520003 	cmp	r2, r3
   21e10:	1a000001 	bne	21e1c <vTaskDelete+0x30>
			{
				pxTaskToDelete = NULL;
   21e14:	e3a03000 	mov	r3, #0
   21e18:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
   21e1c:	e51b3010 	ldr	r3, [fp, #-16]
   21e20:	e3530000 	cmp	r3, #0
   21e24:	1a000002 	bne	21e34 <vTaskDelete+0x48>
   21e28:	e59f30a8 	ldr	r3, [pc, #168]	; 21ed8 <vTaskDelete+0xec>
   21e2c:	e5933000 	ldr	r3, [r3]
   21e30:	ea000000 	b	21e38 <vTaskDelete+0x4c>
   21e34:	e51b3010 	ldr	r3, [fp, #-16]
   21e38:	e50b3008 	str	r3, [fp, #-8]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   21e3c:	e51b3008 	ldr	r3, [fp, #-8]
   21e40:	e2833004 	add	r3, r3, #4
   21e44:	e1a00003 	mov	r0, r3
   21e48:	ebfffc42 	bl	20f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   21e4c:	e51b3008 	ldr	r3, [fp, #-8]
   21e50:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   21e54:	e3530000 	cmp	r3, #0
   21e58:	0a000003 	beq	21e6c <vTaskDelete+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   21e5c:	e51b3008 	ldr	r3, [fp, #-8]
   21e60:	e2833018 	add	r3, r3, #24
   21e64:	e1a00003 	mov	r0, r3
   21e68:	ebfffc3a 	bl	20f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   21e6c:	e51b3008 	ldr	r3, [fp, #-8]
   21e70:	e2833004 	add	r3, r3, #4
   21e74:	e1a01003 	mov	r1, r3
   21e78:	e59f005c 	ldr	r0, [pc, #92]	; 21edc <vTaskDelete+0xf0>
   21e7c:	ebfffbd9 	bl	20de8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   21e80:	e59f3058 	ldr	r3, [pc, #88]	; 21ee0 <vTaskDelete+0xf4>
   21e84:	e5933000 	ldr	r3, [r3]
   21e88:	e2833001 	add	r3, r3, #1
   21e8c:	e59f204c 	ldr	r2, [pc, #76]	; 21ee0 <vTaskDelete+0xf4>
   21e90:	e5823000 	str	r3, [r2]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   21e94:	e59f3048 	ldr	r3, [pc, #72]	; 21ee4 <vTaskDelete+0xf8>
   21e98:	e5933000 	ldr	r3, [r3]
   21e9c:	e2833001 	add	r3, r3, #1
   21ea0:	e59f203c 	ldr	r2, [pc, #60]	; 21ee4 <vTaskDelete+0xf8>
   21ea4:	e5823000 	str	r3, [r2]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   21ea8:	ebfff9b5 	bl	20584 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
   21eac:	e59f3034 	ldr	r3, [pc, #52]	; 21ee8 <vTaskDelete+0xfc>
   21eb0:	e5933000 	ldr	r3, [r3]
   21eb4:	e3530000 	cmp	r3, #0
   21eb8:	0a000003 	beq	21ecc <vTaskDelete+0xe0>
		{
			if( ( void * ) pxTaskToDelete == NULL )
   21ebc:	e51b3010 	ldr	r3, [fp, #-16]
   21ec0:	e3530000 	cmp	r3, #0
   21ec4:	1a000000 	bne	21ecc <vTaskDelete+0xe0>
			{
				portYIELD_WITHIN_API();
   21ec8:	ef000000 	svc	0x00000000
			}
		}
	}
   21ecc:	e320f000 	nop	{0}
   21ed0:	e24bd004 	sub	sp, fp, #4
   21ed4:	e8bd8800 	pop	{fp, pc}
   21ed8:	0002bf74 	andeq	fp, r2, r4, ror pc
   21edc:	0002c020 	andeq	ip, r2, r0, lsr #32
   21ee0:	0002c034 	andeq	ip, r2, r4, lsr r0
   21ee4:	0002c070 	andeq	ip, r2, r0, ror r0
   21ee8:	0002c05c 	andeq	ip, r2, ip, asr r0

00021eec <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   21eec:	e92d4800 	push	{fp, lr}
   21ef0:	e28db004 	add	fp, sp, #4
   21ef4:	e24dd018 	sub	sp, sp, #24
   21ef8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   21efc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
   21f00:	e3a03000 	mov	r3, #0
   21f04:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
   21f08:	eb0001f6 	bl	226e8 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   21f0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f10:	e5933000 	ldr	r3, [r3]
   21f14:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   21f18:	e0823003 	add	r3, r2, r3
   21f1c:	e50b300c 	str	r3, [fp, #-12]

			if( xTickCount < *pxPreviousWakeTime )
   21f20:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f24:	e5932000 	ldr	r2, [r3]
   21f28:	e59f30c4 	ldr	r3, [pc, #196]	; 21ff4 <vTaskDelayUntil+0x108>
   21f2c:	e5933000 	ldr	r3, [r3]
   21f30:	e1520003 	cmp	r2, r3
   21f34:	9a00000c 	bls	21f6c <vTaskDelayUntil+0x80>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   21f38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f3c:	e5933000 	ldr	r3, [r3]
   21f40:	e51b200c 	ldr	r2, [fp, #-12]
   21f44:	e1520003 	cmp	r2, r3
   21f48:	2a000013 	bcs	21f9c <vTaskDelayUntil+0xb0>
   21f4c:	e59f30a0 	ldr	r3, [pc, #160]	; 21ff4 <vTaskDelayUntil+0x108>
   21f50:	e5933000 	ldr	r3, [r3]
   21f54:	e51b200c 	ldr	r2, [fp, #-12]
   21f58:	e1520003 	cmp	r2, r3
   21f5c:	9a00000e 	bls	21f9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   21f60:	e3a03001 	mov	r3, #1
   21f64:	e50b3008 	str	r3, [fp, #-8]
   21f68:	ea00000b 	b	21f9c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   21f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f70:	e5933000 	ldr	r3, [r3]
   21f74:	e51b200c 	ldr	r2, [fp, #-12]
   21f78:	e1520003 	cmp	r2, r3
   21f7c:	3a000004 	bcc	21f94 <vTaskDelayUntil+0xa8>
   21f80:	e59f306c 	ldr	r3, [pc, #108]	; 21ff4 <vTaskDelayUntil+0x108>
   21f84:	e5933000 	ldr	r3, [r3]
   21f88:	e51b200c 	ldr	r2, [fp, #-12]
   21f8c:	e1520003 	cmp	r2, r3
   21f90:	9a000001 	bls	21f9c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
   21f94:	e3a03001 	mov	r3, #1
   21f98:	e50b3008 	str	r3, [fp, #-8]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   21f9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   21fa0:	e51b200c 	ldr	r2, [fp, #-12]
   21fa4:	e5832000 	str	r2, [r3]

			if( xShouldDelay != pdFALSE )
   21fa8:	e51b3008 	ldr	r3, [fp, #-8]
   21fac:	e3530000 	cmp	r3, #0
   21fb0:	0a000006 	beq	21fd0 <vTaskDelayUntil+0xe4>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   21fb4:	e59f303c 	ldr	r3, [pc, #60]	; 21ff8 <vTaskDelayUntil+0x10c>
   21fb8:	e5933000 	ldr	r3, [r3]
   21fbc:	e2833004 	add	r3, r3, #4
   21fc0:	e1a00003 	mov	r0, r3
   21fc4:	ebfffbe3 	bl	20f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   21fc8:	e51b000c 	ldr	r0, [fp, #-12]
   21fcc:	eb0004d5 	bl	23328 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   21fd0:	eb0001d0 	bl	22718 <xTaskResumeAll>
   21fd4:	e50b0010 	str	r0, [fp, #-16]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   21fd8:	e51b3010 	ldr	r3, [fp, #-16]
   21fdc:	e3530000 	cmp	r3, #0
   21fe0:	1a000000 	bne	21fe8 <vTaskDelayUntil+0xfc>
		{
			portYIELD_WITHIN_API();
   21fe4:	ef000000 	svc	0x00000000
		}
	}
   21fe8:	e320f000 	nop	{0}
   21fec:	e24bd004 	sub	sp, fp, #4
   21ff0:	e8bd8800 	pop	{fp, pc}
   21ff4:	0002c050 	andeq	ip, r2, r0, asr r0
   21ff8:	0002bf74 	andeq	fp, r2, r4, ror pc

00021ffc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   21ffc:	e92d4800 	push	{fp, lr}
   22000:	e28db004 	add	fp, sp, #4
   22004:	e24dd010 	sub	sp, sp, #16
   22008:	e50b0010 	str	r0, [fp, #-16]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   2200c:	e3a03000 	mov	r3, #0
   22010:	e50b3008 	str	r3, [fp, #-8]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   22014:	e51b3010 	ldr	r3, [fp, #-16]
   22018:	e3530000 	cmp	r3, #0
   2201c:	0a00000e 	beq	2205c <vTaskDelay+0x60>
		{
			vTaskSuspendAll();
   22020:	eb0001b0 	bl	226e8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   22024:	e59f304c 	ldr	r3, [pc, #76]	; 22078 <vTaskDelay+0x7c>
   22028:	e5933000 	ldr	r3, [r3]
   2202c:	e51b2010 	ldr	r2, [fp, #-16]
   22030:	e0823003 	add	r3, r2, r3
   22034:	e50b300c 	str	r3, [fp, #-12]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22038:	e59f303c 	ldr	r3, [pc, #60]	; 2207c <vTaskDelay+0x80>
   2203c:	e5933000 	ldr	r3, [r3]
   22040:	e2833004 	add	r3, r3, #4
   22044:	e1a00003 	mov	r0, r3
   22048:	ebfffbc2 	bl	20f58 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   2204c:	e51b000c 	ldr	r0, [fp, #-12]
   22050:	eb0004b4 	bl	23328 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
   22054:	eb0001af 	bl	22718 <xTaskResumeAll>
   22058:	e50b0008 	str	r0, [fp, #-8]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   2205c:	e51b3008 	ldr	r3, [fp, #-8]
   22060:	e3530000 	cmp	r3, #0
   22064:	1a000000 	bne	2206c <vTaskDelay+0x70>
		{
			portYIELD_WITHIN_API();
   22068:	ef000000 	svc	0x00000000
		}
	}
   2206c:	e320f000 	nop	{0}
   22070:	e24bd004 	sub	sp, fp, #4
   22074:	e8bd8800 	pop	{fp, pc}
   22078:	0002c050 	andeq	ip, r2, r0, asr r0
   2207c:	0002bf74 	andeq	fp, r2, r4, ror pc

00022080 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
   22080:	e92d4800 	push	{fp, lr}
   22084:	e28db004 	add	fp, sp, #4
   22088:	e24dd010 	sub	sp, sp, #16
   2208c:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
   22090:	ebfff92a 	bl	20540 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   22094:	e51b3010 	ldr	r3, [fp, #-16]
   22098:	e3530000 	cmp	r3, #0
   2209c:	1a000002 	bne	220ac <uxTaskPriorityGet+0x2c>
   220a0:	e59f302c 	ldr	r3, [pc, #44]	; 220d4 <uxTaskPriorityGet+0x54>
   220a4:	e5933000 	ldr	r3, [r3]
   220a8:	ea000000 	b	220b0 <uxTaskPriorityGet+0x30>
   220ac:	e51b3010 	ldr	r3, [fp, #-16]
   220b0:	e50b3008 	str	r3, [fp, #-8]
			uxReturn = pxTCB->uxPriority;
   220b4:	e51b3008 	ldr	r3, [fp, #-8]
   220b8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   220bc:	e50b300c 	str	r3, [fp, #-12]
		}
		taskEXIT_CRITICAL();
   220c0:	ebfff92f 	bl	20584 <vPortExitCritical>

		return uxReturn;
   220c4:	e51b300c 	ldr	r3, [fp, #-12]
	}
   220c8:	e1a00003 	mov	r0, r3
   220cc:	e24bd004 	sub	sp, fp, #4
   220d0:	e8bd8800 	pop	{fp, pc}
   220d4:	0002bf74 	andeq	fp, r2, r4, ror pc

000220d8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
   220d8:	e92d4800 	push	{fp, lr}
   220dc:	e28db004 	add	fp, sp, #4
   220e0:	e24dd018 	sub	sp, sp, #24
   220e4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   220e8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
   220ec:	e3a03000 	mov	r3, #0
   220f0:	e50b3008 	str	r3, [fp, #-8]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
   220f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   220f8:	e3530004 	cmp	r3, #4
   220fc:	9a000001 	bls	22108 <vTaskPrioritySet+0x30>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   22100:	e3a03004 	mov	r3, #4
   22104:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		}

		taskENTER_CRITICAL();
   22108:	ebfff90c 	bl	20540 <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
   2210c:	e59f3160 	ldr	r3, [pc, #352]	; 22274 <vTaskPrioritySet+0x19c>
   22110:	e5933000 	ldr	r3, [r3]
   22114:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   22118:	e1520003 	cmp	r2, r3
   2211c:	1a000001 	bne	22128 <vTaskPrioritySet+0x50>
			{
				pxTask = NULL;
   22120:	e3a03000 	mov	r3, #0
   22124:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
   22128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2212c:	e3530000 	cmp	r3, #0
   22130:	1a000002 	bne	22140 <vTaskPrioritySet+0x68>
   22134:	e59f3138 	ldr	r3, [pc, #312]	; 22274 <vTaskPrioritySet+0x19c>
   22138:	e5933000 	ldr	r3, [r3]
   2213c:	ea000000 	b	22144 <vTaskPrioritySet+0x6c>
   22140:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22144:	e50b300c 	str	r3, [fp, #-12]
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
			}
			#else
			{
				uxCurrentPriority = pxTCB->uxPriority;
   22148:	e51b300c 	ldr	r3, [fp, #-12]
   2214c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22150:	e50b3010 	str	r3, [fp, #-16]
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
   22154:	e51b2010 	ldr	r2, [fp, #-16]
   22158:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2215c:	e1520003 	cmp	r2, r3
   22160:	0a00003f 	beq	22264 <vTaskPrioritySet+0x18c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
   22164:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   22168:	e51b3010 	ldr	r3, [fp, #-16]
   2216c:	e1520003 	cmp	r2, r3
   22170:	9a000005 	bls	2218c <vTaskPrioritySet+0xb4>
				{
					if( pxTask != NULL )
   22174:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22178:	e3530000 	cmp	r3, #0
   2217c:	0a000007 	beq	221a0 <vTaskPrioritySet+0xc8>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
   22180:	e3a03001 	mov	r3, #1
   22184:	e50b3008 	str	r3, [fp, #-8]
   22188:	ea000004 	b	221a0 <vTaskPrioritySet+0xc8>
					}
				}
				else if( pxTask == NULL )
   2218c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22190:	e3530000 	cmp	r3, #0
   22194:	1a000001 	bne	221a0 <vTaskPrioritySet+0xc8>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
   22198:	e3a03001 	mov	r3, #1
   2219c:	e50b3008 	str	r3, [fp, #-8]
					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
				}
				#else
				{
					pxTCB->uxPriority = uxNewPriority;
   221a0:	e51b300c 	ldr	r3, [fp, #-12]
   221a4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   221a8:	e583202c 	str	r2, [r3, #44]	; 0x2c
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
   221ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   221b0:	e2632005 	rsb	r2, r3, #5
   221b4:	e51b300c 	ldr	r3, [fp, #-12]
   221b8:	e5832018 	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
   221bc:	e51b300c 	ldr	r3, [fp, #-12]
   221c0:	e5931014 	ldr	r1, [r3, #20]
   221c4:	e51b2010 	ldr	r2, [fp, #-16]
   221c8:	e1a03002 	mov	r3, r2
   221cc:	e1a03103 	lsl	r3, r3, #2
   221d0:	e0833002 	add	r3, r3, r2
   221d4:	e1a03103 	lsl	r3, r3, #2
   221d8:	e59f2098 	ldr	r2, [pc, #152]	; 22278 <vTaskPrioritySet+0x1a0>
   221dc:	e0833002 	add	r3, r3, r2
   221e0:	e1510003 	cmp	r1, r3
   221e4:	1a00001a 	bne	22254 <vTaskPrioritySet+0x17c>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
   221e8:	e51b300c 	ldr	r3, [fp, #-12]
   221ec:	e2833004 	add	r3, r3, #4
   221f0:	e1a00003 	mov	r0, r3
   221f4:	ebfffb57 	bl	20f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   221f8:	e51b300c 	ldr	r3, [fp, #-12]
   221fc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22200:	e59f3074 	ldr	r3, [pc, #116]	; 2227c <vTaskPrioritySet+0x1a4>
   22204:	e5933000 	ldr	r3, [r3]
   22208:	e1520003 	cmp	r2, r3
   2220c:	9a000003 	bls	22220 <vTaskPrioritySet+0x148>
   22210:	e51b300c 	ldr	r3, [fp, #-12]
   22214:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22218:	e59f205c 	ldr	r2, [pc, #92]	; 2227c <vTaskPrioritySet+0x1a4>
   2221c:	e5823000 	str	r3, [r2]
   22220:	e51b300c 	ldr	r3, [fp, #-12]
   22224:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22228:	e1a03002 	mov	r3, r2
   2222c:	e1a03103 	lsl	r3, r3, #2
   22230:	e0833002 	add	r3, r3, r2
   22234:	e1a03103 	lsl	r3, r3, #2
   22238:	e59f2038 	ldr	r2, [pc, #56]	; 22278 <vTaskPrioritySet+0x1a0>
   2223c:	e0832002 	add	r2, r3, r2
   22240:	e51b300c 	ldr	r3, [fp, #-12]
   22244:	e2833004 	add	r3, r3, #4
   22248:	e1a01003 	mov	r1, r3
   2224c:	e1a00002 	mov	r0, r2
   22250:	ebfffae4 	bl	20de8 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
   22254:	e51b3008 	ldr	r3, [fp, #-8]
   22258:	e3530001 	cmp	r3, #1
   2225c:	1a000000 	bne	22264 <vTaskPrioritySet+0x18c>
				{
					portYIELD_WITHIN_API();
   22260:	ef000000 	svc	0x00000000
				}
			}
		}
		taskEXIT_CRITICAL();
   22264:	ebfff8c6 	bl	20584 <vPortExitCritical>
	}
   22268:	e320f000 	nop	{0}
   2226c:	e24bd004 	sub	sp, fp, #4
   22270:	e8bd8800 	pop	{fp, pc}
   22274:	0002bf74 	andeq	fp, r2, r4, ror pc
   22278:	0002bf78 	andeq	fp, r2, r8, ror pc
   2227c:	0002c058 	andeq	ip, r2, r8, asr r0

00022280 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
   22280:	e92d4800 	push	{fp, lr}
   22284:	e28db004 	add	fp, sp, #4
   22288:	e24dd010 	sub	sp, sp, #16
   2228c:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
   22290:	ebfff8aa 	bl	20540 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
   22294:	e59f30d8 	ldr	r3, [pc, #216]	; 22374 <vTaskSuspend+0xf4>
   22298:	e5933000 	ldr	r3, [r3]
   2229c:	e51b2010 	ldr	r2, [fp, #-16]
   222a0:	e1520003 	cmp	r2, r3
   222a4:	1a000001 	bne	222b0 <vTaskSuspend+0x30>
			{
				pxTaskToSuspend = NULL;
   222a8:	e3a03000 	mov	r3, #0
   222ac:	e50b3010 	str	r3, [fp, #-16]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
   222b0:	e51b3010 	ldr	r3, [fp, #-16]
   222b4:	e3530000 	cmp	r3, #0
   222b8:	1a000002 	bne	222c8 <vTaskSuspend+0x48>
   222bc:	e59f30b0 	ldr	r3, [pc, #176]	; 22374 <vTaskSuspend+0xf4>
   222c0:	e5933000 	ldr	r3, [r3]
   222c4:	ea000000 	b	222cc <vTaskSuspend+0x4c>
   222c8:	e51b3010 	ldr	r3, [fp, #-16]
   222cc:	e50b3008 	str	r3, [fp, #-8]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
   222d0:	e51b3008 	ldr	r3, [fp, #-8]
   222d4:	e2833004 	add	r3, r3, #4
   222d8:	e1a00003 	mov	r0, r3
   222dc:	ebfffb1d 	bl	20f58 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
   222e0:	e51b3008 	ldr	r3, [fp, #-8]
   222e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   222e8:	e3530000 	cmp	r3, #0
   222ec:	0a000003 	beq	22300 <vTaskSuspend+0x80>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
   222f0:	e51b3008 	ldr	r3, [fp, #-8]
   222f4:	e2833018 	add	r3, r3, #24
   222f8:	e1a00003 	mov	r0, r3
   222fc:	ebfffb15 	bl	20f58 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   22300:	e51b3008 	ldr	r3, [fp, #-8]
   22304:	e2833004 	add	r3, r3, #4
   22308:	e1a01003 	mov	r1, r3
   2230c:	e59f0064 	ldr	r0, [pc, #100]	; 22378 <vTaskSuspend+0xf8>
   22310:	ebfffab4 	bl	20de8 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
   22314:	ebfff89a 	bl	20584 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
   22318:	e51b3010 	ldr	r3, [fp, #-16]
   2231c:	e3530000 	cmp	r3, #0
   22320:	1a000010 	bne	22368 <vTaskSuspend+0xe8>
		{
			if( xSchedulerRunning != pdFALSE )
   22324:	e59f3050 	ldr	r3, [pc, #80]	; 2237c <vTaskSuspend+0xfc>
   22328:	e5933000 	ldr	r3, [r3]
   2232c:	e3530000 	cmp	r3, #0
   22330:	0a000001 	beq	2233c <vTaskSuspend+0xbc>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
   22334:	ef000000 	svc	0x00000000
				{
					vTaskSwitchContext();
				}
			}
		}
	}
   22338:	ea00000a 	b	22368 <vTaskSuspend+0xe8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   2233c:	e59f3034 	ldr	r3, [pc, #52]	; 22378 <vTaskSuspend+0xf8>
   22340:	e5932000 	ldr	r2, [r3]
   22344:	e59f3034 	ldr	r3, [pc, #52]	; 22380 <vTaskSuspend+0x100>
   22348:	e5933000 	ldr	r3, [r3]
   2234c:	e1520003 	cmp	r2, r3
   22350:	1a000003 	bne	22364 <vTaskSuspend+0xe4>
					pxCurrentTCB = NULL;
   22354:	e59f3018 	ldr	r3, [pc, #24]	; 22374 <vTaskSuspend+0xf4>
   22358:	e3a02000 	mov	r2, #0
   2235c:	e5832000 	str	r2, [r3]
	}
   22360:	ea000000 	b	22368 <vTaskSuspend+0xe8>
					vTaskSwitchContext();
   22364:	eb00024c 	bl	22c9c <vTaskSwitchContext>
	}
   22368:	e320f000 	nop	{0}
   2236c:	e24bd004 	sub	sp, fp, #4
   22370:	e8bd8800 	pop	{fp, pc}
   22374:	0002bf74 	andeq	fp, r2, r4, ror pc
   22378:	0002c038 	andeq	ip, r2, r8, lsr r0
   2237c:	0002c05c 	andeq	ip, r2, ip, asr r0
   22380:	0002c04c 	andeq	ip, r2, ip, asr #32

00022384 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
   22384:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22388:	e28db000 	add	fp, sp, #0
   2238c:	e24dd014 	sub	sp, sp, #20
   22390:	e50b0010 	str	r0, [fp, #-16]
	portBASE_TYPE xReturn = pdFALSE;
   22394:	e3a03000 	mov	r3, #0
   22398:	e50b3008 	str	r3, [fp, #-8]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
   2239c:	e51b3010 	ldr	r3, [fp, #-16]
   223a0:	e50b300c 	str	r3, [fp, #-12]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   223a4:	e51b300c 	ldr	r3, [fp, #-12]
   223a8:	e5933014 	ldr	r3, [r3, #20]
   223ac:	e59f2044 	ldr	r2, [pc, #68]	; 223f8 <xTaskIsTaskSuspended+0x74>
   223b0:	e1530002 	cmp	r3, r2
   223b4:	1a00000a 	bne	223e4 <xTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
   223b8:	e51b300c 	ldr	r3, [fp, #-12]
   223bc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   223c0:	e59f2034 	ldr	r2, [pc, #52]	; 223fc <xTaskIsTaskSuspended+0x78>
   223c4:	e1530002 	cmp	r3, r2
   223c8:	0a000005 	beq	223e4 <xTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
   223cc:	e51b300c 	ldr	r3, [fp, #-12]
   223d0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   223d4:	e3530000 	cmp	r3, #0
   223d8:	1a000001 	bne	223e4 <xTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
   223dc:	e3a03001 	mov	r3, #1
   223e0:	e50b3008 	str	r3, [fp, #-8]
				}
			}
		}

		return xReturn;
   223e4:	e51b3008 	ldr	r3, [fp, #-8]
	}
   223e8:	e1a00003 	mov	r0, r3
   223ec:	e28bd000 	add	sp, fp, #0
   223f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   223f4:	e12fff1e 	bx	lr
   223f8:	0002c038 	andeq	ip, r2, r8, lsr r0
   223fc:	0002c00c 	andeq	ip, r2, ip

00022400 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
   22400:	e92d4800 	push	{fp, lr}
   22404:	e28db004 	add	fp, sp, #4
   22408:	e24dd010 	sub	sp, sp, #16
   2240c:	e50b0010 	str	r0, [fp, #-16]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
   22410:	e51b3010 	ldr	r3, [fp, #-16]
   22414:	e50b3008 	str	r3, [fp, #-8]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   22418:	e51b3008 	ldr	r3, [fp, #-8]
   2241c:	e3530000 	cmp	r3, #0
   22420:	0a00002e 	beq	224e0 <vTaskResume+0xe0>
   22424:	e59f30c0 	ldr	r3, [pc, #192]	; 224ec <vTaskResume+0xec>
   22428:	e5933000 	ldr	r3, [r3]
   2242c:	e51b2008 	ldr	r2, [fp, #-8]
   22430:	e1520003 	cmp	r2, r3
   22434:	0a000029 	beq	224e0 <vTaskResume+0xe0>
		{
			taskENTER_CRITICAL();
   22438:	ebfff840 	bl	20540 <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   2243c:	e51b0008 	ldr	r0, [fp, #-8]
   22440:	ebffffcf 	bl	22384 <xTaskIsTaskSuspended>
   22444:	e1a03000 	mov	r3, r0
   22448:	e3530001 	cmp	r3, #1
   2244c:	1a000022 	bne	224dc <vTaskResume+0xdc>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
   22450:	e51b3008 	ldr	r3, [fp, #-8]
   22454:	e2833004 	add	r3, r3, #4
   22458:	e1a00003 	mov	r0, r3
   2245c:	ebfffabd 	bl	20f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   22460:	e51b3008 	ldr	r3, [fp, #-8]
   22464:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22468:	e59f3080 	ldr	r3, [pc, #128]	; 224f0 <vTaskResume+0xf0>
   2246c:	e5933000 	ldr	r3, [r3]
   22470:	e1520003 	cmp	r2, r3
   22474:	9a000003 	bls	22488 <vTaskResume+0x88>
   22478:	e51b3008 	ldr	r3, [fp, #-8]
   2247c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22480:	e59f2068 	ldr	r2, [pc, #104]	; 224f0 <vTaskResume+0xf0>
   22484:	e5823000 	str	r3, [r2]
   22488:	e51b3008 	ldr	r3, [fp, #-8]
   2248c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22490:	e1a03002 	mov	r3, r2
   22494:	e1a03103 	lsl	r3, r3, #2
   22498:	e0833002 	add	r3, r3, r2
   2249c:	e1a03103 	lsl	r3, r3, #2
   224a0:	e59f204c 	ldr	r2, [pc, #76]	; 224f4 <vTaskResume+0xf4>
   224a4:	e0832002 	add	r2, r3, r2
   224a8:	e51b3008 	ldr	r3, [fp, #-8]
   224ac:	e2833004 	add	r3, r3, #4
   224b0:	e1a01003 	mov	r1, r3
   224b4:	e1a00002 	mov	r0, r2
   224b8:	ebfffa4a 	bl	20de8 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   224bc:	e51b3008 	ldr	r3, [fp, #-8]
   224c0:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   224c4:	e59f3020 	ldr	r3, [pc, #32]	; 224ec <vTaskResume+0xec>
   224c8:	e5933000 	ldr	r3, [r3]
   224cc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   224d0:	e1520003 	cmp	r2, r3
   224d4:	3a000000 	bcc	224dc <vTaskResume+0xdc>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
   224d8:	ef000000 	svc	0x00000000
					}
				}
			}
			taskEXIT_CRITICAL();
   224dc:	ebfff828 	bl	20584 <vPortExitCritical>
		}
	}
   224e0:	e320f000 	nop	{0}
   224e4:	e24bd004 	sub	sp, fp, #4
   224e8:	e8bd8800 	pop	{fp, pc}
   224ec:	0002bf74 	andeq	fp, r2, r4, ror pc
   224f0:	0002c058 	andeq	ip, r2, r8, asr r0
   224f4:	0002bf78 	andeq	fp, r2, r8, ror pc

000224f8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
   224f8:	e92d4800 	push	{fp, lr}
   224fc:	e28db004 	add	fp, sp, #4
   22500:	e24dd018 	sub	sp, sp, #24
   22504:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	portBASE_TYPE xYieldRequired = pdFALSE;
   22508:	e3a03000 	mov	r3, #0
   2250c:	e50b3008 	str	r3, [fp, #-8]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
   22510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   22514:	e50b300c 	str	r3, [fp, #-12]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   22518:	e3a03000 	mov	r3, #0
   2251c:	e50b3010 	str	r3, [fp, #-16]
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   22520:	e51b000c 	ldr	r0, [fp, #-12]
   22524:	ebffff96 	bl	22384 <xTaskIsTaskSuspended>
   22528:	e1a03000 	mov	r3, r0
   2252c:	e3530001 	cmp	r3, #1
   22530:	1a00002e 	bne	225f0 <xTaskResumeFromISR+0xf8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22534:	e59f30c4 	ldr	r3, [pc, #196]	; 22600 <xTaskResumeFromISR+0x108>
   22538:	e5933000 	ldr	r3, [r3]
   2253c:	e3530000 	cmp	r3, #0
   22540:	1a000025 	bne	225dc <xTaskResumeFromISR+0xe4>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
   22544:	e51b300c 	ldr	r3, [fp, #-12]
   22548:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   2254c:	e59f30b0 	ldr	r3, [pc, #176]	; 22604 <xTaskResumeFromISR+0x10c>
   22550:	e5933000 	ldr	r3, [r3]
   22554:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22558:	e1520003 	cmp	r2, r3
   2255c:	23a03001 	movcs	r3, #1
   22560:	33a03000 	movcc	r3, #0
   22564:	e6ef3073 	uxtb	r3, r3
   22568:	e50b3008 	str	r3, [fp, #-8]
					vListRemove(  &( pxTCB->xGenericListItem ) );
   2256c:	e51b300c 	ldr	r3, [fp, #-12]
   22570:	e2833004 	add	r3, r3, #4
   22574:	e1a00003 	mov	r0, r3
   22578:	ebfffa76 	bl	20f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   2257c:	e51b300c 	ldr	r3, [fp, #-12]
   22580:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22584:	e59f307c 	ldr	r3, [pc, #124]	; 22608 <xTaskResumeFromISR+0x110>
   22588:	e5933000 	ldr	r3, [r3]
   2258c:	e1520003 	cmp	r2, r3
   22590:	9a000003 	bls	225a4 <xTaskResumeFromISR+0xac>
   22594:	e51b300c 	ldr	r3, [fp, #-12]
   22598:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   2259c:	e59f2064 	ldr	r2, [pc, #100]	; 22608 <xTaskResumeFromISR+0x110>
   225a0:	e5823000 	str	r3, [r2]
   225a4:	e51b300c 	ldr	r3, [fp, #-12]
   225a8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   225ac:	e1a03002 	mov	r3, r2
   225b0:	e1a03103 	lsl	r3, r3, #2
   225b4:	e0833002 	add	r3, r3, r2
   225b8:	e1a03103 	lsl	r3, r3, #2
   225bc:	e59f2048 	ldr	r2, [pc, #72]	; 2260c <xTaskResumeFromISR+0x114>
   225c0:	e0832002 	add	r2, r3, r2
   225c4:	e51b300c 	ldr	r3, [fp, #-12]
   225c8:	e2833004 	add	r3, r3, #4
   225cc:	e1a01003 	mov	r1, r3
   225d0:	e1a00002 	mov	r0, r2
   225d4:	ebfffa03 	bl	20de8 <vListInsertEnd>
   225d8:	ea000004 	b	225f0 <xTaskResumeFromISR+0xf8>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
   225dc:	e51b300c 	ldr	r3, [fp, #-12]
   225e0:	e2833018 	add	r3, r3, #24
   225e4:	e1a01003 	mov	r1, r3
   225e8:	e59f0020 	ldr	r0, [pc, #32]	; 22610 <xTaskResumeFromISR+0x118>
   225ec:	ebfff9fd 	bl	20de8 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
   225f0:	e51b3008 	ldr	r3, [fp, #-8]
	}
   225f4:	e1a00003 	mov	r0, r3
   225f8:	e24bd004 	sub	sp, fp, #4
   225fc:	e8bd8800 	pop	{fp, pc}
   22600:	0002c060 	andeq	ip, r2, r0, rrx
   22604:	0002bf74 	andeq	fp, r2, r4, ror pc
   22608:	0002c058 	andeq	ip, r2, r8, asr r0
   2260c:	0002bf78 	andeq	fp, r2, r8, ror pc
   22610:	0002c00c 	andeq	ip, r2, ip

00022614 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   22614:	e92d4800 	push	{fp, lr}
   22618:	e28db004 	add	fp, sp, #4
   2261c:	e24dd018 	sub	sp, sp, #24
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   22620:	e3a03000 	mov	r3, #0
   22624:	e58d300c 	str	r3, [sp, #12]
   22628:	e3a03000 	mov	r3, #0
   2262c:	e58d3008 	str	r3, [sp, #8]
   22630:	e3a03000 	mov	r3, #0
   22634:	e58d3004 	str	r3, [sp, #4]
   22638:	e3a03000 	mov	r3, #0
   2263c:	e58d3000 	str	r3, [sp]
   22640:	e3a03000 	mov	r3, #0
   22644:	e3a02080 	mov	r2, #128	; 0x80
   22648:	e59f1050 	ldr	r1, [pc, #80]	; 226a0 <vTaskStartScheduler+0x8c>
   2264c:	e59f0050 	ldr	r0, [pc, #80]	; 226a4 <vTaskStartScheduler+0x90>
   22650:	ebfffd52 	bl	21ba0 <xTaskGenericCreate>
   22654:	e50b0008 	str	r0, [fp, #-8]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
   22658:	e51b3008 	ldr	r3, [fp, #-8]
   2265c:	e3530001 	cmp	r3, #1
   22660:	1a00000b 	bne	22694 <vTaskStartScheduler+0x80>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   22664:	e92d0001 	stmfd	sp!, {r0}
   22668:	e10f0000 	mrs	r0, CPSR
   2266c:	e38000c0 	orr	r0, r0, #192	; 0xc0
   22670:	e129f000 	msr	CPSR_fc, r0
   22674:	e8bd0001 	ldmfd	sp!, {r0}

		xSchedulerRunning = pdTRUE;
   22678:	e59f3028 	ldr	r3, [pc, #40]	; 226a8 <vTaskStartScheduler+0x94>
   2267c:	e3a02001 	mov	r2, #1
   22680:	e5832000 	str	r2, [r3]
		xTickCount = ( portTickType ) 0U;
   22684:	e59f3020 	ldr	r3, [pc, #32]	; 226ac <vTaskStartScheduler+0x98>
   22688:	e3a02000 	mov	r2, #0
   2268c:	e5832000 	str	r2, [r3]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();		

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   22690:	ebfff6ea 	bl	20240 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
   22694:	e320f000 	nop	{0}
   22698:	e24bd004 	sub	sp, fp, #4
   2269c:	e8bd8800 	pop	{fp, pc}
   226a0:	0002b800 	andeq	fp, r2, r0, lsl #16
   226a4:	000230bc 	strheq	r3, [r2], -ip
   226a8:	0002c05c 	andeq	ip, r2, ip, asr r0
   226ac:	0002c050 	andeq	ip, r2, r0, asr r0

000226b0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
   226b0:	e92d4800 	push	{fp, lr}
   226b4:	e28db004 	add	fp, sp, #4
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
   226b8:	e92d0001 	stmfd	sp!, {r0}
   226bc:	e10f0000 	mrs	r0, CPSR
   226c0:	e38000c0 	orr	r0, r0, #192	; 0xc0
   226c4:	e129f000 	msr	CPSR_fc, r0
   226c8:	e8bd0001 	ldmfd	sp!, {r0}
	xSchedulerRunning = pdFALSE;
   226cc:	e59f3010 	ldr	r3, [pc, #16]	; 226e4 <vTaskEndScheduler+0x34>
   226d0:	e3a02000 	mov	r2, #0
   226d4:	e5832000 	str	r2, [r3]
	vPortEndScheduler();
   226d8:	ebfff6df 	bl	2025c <vPortEndScheduler>
}
   226dc:	e320f000 	nop	{0}
   226e0:	e8bd8800 	pop	{fp, pc}
   226e4:	0002c05c 	andeq	ip, r2, ip, asr r0

000226e8 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   226e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   226ec:	e28db000 	add	fp, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   226f0:	e59f301c 	ldr	r3, [pc, #28]	; 22714 <vTaskSuspendAll+0x2c>
   226f4:	e5933000 	ldr	r3, [r3]
   226f8:	e2833001 	add	r3, r3, #1
   226fc:	e59f2010 	ldr	r2, [pc, #16]	; 22714 <vTaskSuspendAll+0x2c>
   22700:	e5823000 	str	r3, [r2]
}
   22704:	e320f000 	nop	{0}
   22708:	e28bd000 	add	sp, fp, #0
   2270c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22710:	e12fff1e 	bx	lr
   22714:	0002c060 	andeq	ip, r2, r0, rrx

00022718 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   22718:	e92d4810 	push	{r4, fp, lr}
   2271c:	e28db008 	add	fp, sp, #8
   22720:	e24dd00c 	sub	sp, sp, #12
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   22724:	e3a03000 	mov	r3, #0
   22728:	e50b3010 	str	r3, [fp, #-16]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   2272c:	ebfff783 	bl	20540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
   22730:	e59f3164 	ldr	r3, [pc, #356]	; 2289c <xTaskResumeAll+0x184>
   22734:	e5933000 	ldr	r3, [r3]
   22738:	e2433001 	sub	r3, r3, #1
   2273c:	e59f2158 	ldr	r2, [pc, #344]	; 2289c <xTaskResumeAll+0x184>
   22740:	e5823000 	str	r3, [r2]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22744:	e59f3150 	ldr	r3, [pc, #336]	; 2289c <xTaskResumeAll+0x184>
   22748:	e5933000 	ldr	r3, [r3]
   2274c:	e3530000 	cmp	r3, #0
   22750:	1a00004c 	bne	22888 <xTaskResumeAll+0x170>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   22754:	e59f3144 	ldr	r3, [pc, #324]	; 228a0 <xTaskResumeAll+0x188>
   22758:	e5933000 	ldr	r3, [r3]
   2275c:	e3530000 	cmp	r3, #0
   22760:	0a000048 	beq	22888 <xTaskResumeAll+0x170>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
   22764:	e3a03000 	mov	r3, #0
   22768:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   2276c:	ea000023 	b	22800 <xTaskResumeAll+0xe8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   22770:	e59f312c 	ldr	r3, [pc, #300]	; 228a4 <xTaskResumeAll+0x18c>
   22774:	e593300c 	ldr	r3, [r3, #12]
   22778:	e593400c 	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
   2277c:	e2843018 	add	r3, r4, #24
   22780:	e1a00003 	mov	r0, r3
   22784:	ebfff9f3 	bl	20f58 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
   22788:	e2843004 	add	r3, r4, #4
   2278c:	e1a00003 	mov	r0, r3
   22790:	ebfff9f0 	bl	20f58 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
   22794:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   22798:	e59f3108 	ldr	r3, [pc, #264]	; 228a8 <xTaskResumeAll+0x190>
   2279c:	e5933000 	ldr	r3, [r3]
   227a0:	e1520003 	cmp	r2, r3
   227a4:	9a000002 	bls	227b4 <xTaskResumeAll+0x9c>
   227a8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
   227ac:	e59f20f4 	ldr	r2, [pc, #244]	; 228a8 <xTaskResumeAll+0x190>
   227b0:	e5823000 	str	r3, [r2]
   227b4:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   227b8:	e1a03002 	mov	r3, r2
   227bc:	e1a03103 	lsl	r3, r3, #2
   227c0:	e0833002 	add	r3, r3, r2
   227c4:	e1a03103 	lsl	r3, r3, #2
   227c8:	e59f20dc 	ldr	r2, [pc, #220]	; 228ac <xTaskResumeAll+0x194>
   227cc:	e0833002 	add	r3, r3, r2
   227d0:	e2842004 	add	r2, r4, #4
   227d4:	e1a01002 	mov	r1, r2
   227d8:	e1a00003 	mov	r0, r3
   227dc:	ebfff981 	bl	20de8 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   227e0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
   227e4:	e59f30c4 	ldr	r3, [pc, #196]	; 228b0 <xTaskResumeAll+0x198>
   227e8:	e5933000 	ldr	r3, [r3]
   227ec:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   227f0:	e1520003 	cmp	r2, r3
   227f4:	3a000001 	bcc	22800 <xTaskResumeAll+0xe8>
					{
						xYieldRequired = pdTRUE;
   227f8:	e3a03001 	mov	r3, #1
   227fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   22800:	e59f309c 	ldr	r3, [pc, #156]	; 228a4 <xTaskResumeAll+0x18c>
   22804:	e5933000 	ldr	r3, [r3]
   22808:	e3530000 	cmp	r3, #0
   2280c:	1affffd7 	bne	22770 <xTaskResumeAll+0x58>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   22810:	e59f309c 	ldr	r3, [pc, #156]	; 228b4 <xTaskResumeAll+0x19c>
   22814:	e5933000 	ldr	r3, [r3]
   22818:	e3530000 	cmp	r3, #0
   2281c:	0a00000c 	beq	22854 <xTaskResumeAll+0x13c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   22820:	ea000005 	b	2283c <xTaskResumeAll+0x124>
					{
						vTaskIncrementTick();
   22824:	eb000048 	bl	2294c <vTaskIncrementTick>
						--uxMissedTicks;
   22828:	e59f3084 	ldr	r3, [pc, #132]	; 228b4 <xTaskResumeAll+0x19c>
   2282c:	e5933000 	ldr	r3, [r3]
   22830:	e2433001 	sub	r3, r3, #1
   22834:	e59f2078 	ldr	r2, [pc, #120]	; 228b4 <xTaskResumeAll+0x19c>
   22838:	e5823000 	str	r3, [r2]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   2283c:	e59f3070 	ldr	r3, [pc, #112]	; 228b4 <xTaskResumeAll+0x19c>
   22840:	e5933000 	ldr	r3, [r3]
   22844:	e3530000 	cmp	r3, #0
   22848:	1afffff5 	bne	22824 <xTaskResumeAll+0x10c>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
   2284c:	e3a03001 	mov	r3, #1
   22850:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   22854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22858:	e3530001 	cmp	r3, #1
   2285c:	0a000003 	beq	22870 <xTaskResumeAll+0x158>
   22860:	e59f3050 	ldr	r3, [pc, #80]	; 228b8 <xTaskResumeAll+0x1a0>
   22864:	e5933000 	ldr	r3, [r3]
   22868:	e3530001 	cmp	r3, #1
   2286c:	1a000005 	bne	22888 <xTaskResumeAll+0x170>
				{
					xAlreadyYielded = pdTRUE;
   22870:	e3a03001 	mov	r3, #1
   22874:	e50b3010 	str	r3, [fp, #-16]
					xMissedYield = pdFALSE;
   22878:	e59f3038 	ldr	r3, [pc, #56]	; 228b8 <xTaskResumeAll+0x1a0>
   2287c:	e3a02000 	mov	r2, #0
   22880:	e5832000 	str	r2, [r3]
					portYIELD_WITHIN_API();
   22884:	ef000000 	svc	0x00000000
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   22888:	ebfff73d 	bl	20584 <vPortExitCritical>

	return xAlreadyYielded;
   2288c:	e51b3010 	ldr	r3, [fp, #-16]
}
   22890:	e1a00003 	mov	r0, r3
   22894:	e24bd008 	sub	sp, fp, #8
   22898:	e8bd8810 	pop	{r4, fp, pc}
   2289c:	0002c060 	andeq	ip, r2, r0, rrx
   228a0:	0002c04c 	andeq	ip, r2, ip, asr #32
   228a4:	0002c00c 	andeq	ip, r2, ip
   228a8:	0002c058 	andeq	ip, r2, r8, asr r0
   228ac:	0002bf78 	andeq	fp, r2, r8, ror pc
   228b0:	0002bf74 	andeq	fp, r2, r4, ror pc
   228b4:	0002c064 	andeq	ip, r2, r4, rrx
   228b8:	0002c068 	andeq	ip, r2, r8, rrx

000228bc <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   228bc:	e92d4800 	push	{fp, lr}
   228c0:	e28db004 	add	fp, sp, #4
   228c4:	e24dd008 	sub	sp, sp, #8
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   228c8:	ebfff71c 	bl	20540 <vPortEnterCritical>
	{
		xTicks = xTickCount;
   228cc:	e59f3018 	ldr	r3, [pc, #24]	; 228ec <xTaskGetTickCount+0x30>
   228d0:	e5933000 	ldr	r3, [r3]
   228d4:	e50b3008 	str	r3, [fp, #-8]
	}
	taskEXIT_CRITICAL();
   228d8:	ebfff729 	bl	20584 <vPortExitCritical>

	return xTicks;
   228dc:	e51b3008 	ldr	r3, [fp, #-8]
}
   228e0:	e1a00003 	mov	r0, r3
   228e4:	e24bd004 	sub	sp, fp, #4
   228e8:	e8bd8800 	pop	{fp, pc}
   228ec:	0002c050 	andeq	ip, r2, r0, asr r0

000228f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   228f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   228f4:	e28db000 	add	fp, sp, #0
   228f8:	e24dd00c 	sub	sp, sp, #12
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   228fc:	e3a03000 	mov	r3, #0
   22900:	e50b3008 	str	r3, [fp, #-8]
	xReturn = xTickCount;
   22904:	e59f3018 	ldr	r3, [pc, #24]	; 22924 <xTaskGetTickCountFromISR+0x34>
   22908:	e5933000 	ldr	r3, [r3]
   2290c:	e50b300c 	str	r3, [fp, #-12]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
   22910:	e51b300c 	ldr	r3, [fp, #-12]
}
   22914:	e1a00003 	mov	r0, r3
   22918:	e28bd000 	add	sp, fp, #0
   2291c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22920:	e12fff1e 	bx	lr
   22924:	0002c050 	andeq	ip, r2, r0, asr r0

00022928 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
   22928:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2292c:	e28db000 	add	fp, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
   22930:	e59f3010 	ldr	r3, [pc, #16]	; 22948 <uxTaskGetNumberOfTasks+0x20>
   22934:	e5933000 	ldr	r3, [r3]
}
   22938:	e1a00003 	mov	r0, r3
   2293c:	e28bd000 	add	sp, fp, #0
   22940:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22944:	e12fff1e 	bx	lr
   22948:	0002c04c 	andeq	ip, r2, ip, asr #32

0002294c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   2294c:	e92d4800 	push	{fp, lr}
   22950:	e28db004 	add	fp, sp, #4
   22954:	e24dd010 	sub	sp, sp, #16
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22958:	e59f31e4 	ldr	r3, [pc, #484]	; 22b44 <vTaskIncrementTick+0x1f8>
   2295c:	e5933000 	ldr	r3, [r3]
   22960:	e3530000 	cmp	r3, #0
   22964:	1a00006d 	bne	22b20 <vTaskIncrementTick+0x1d4>
	{
		++xTickCount;
   22968:	e59f31d8 	ldr	r3, [pc, #472]	; 22b48 <vTaskIncrementTick+0x1fc>
   2296c:	e5933000 	ldr	r3, [r3]
   22970:	e2833001 	add	r3, r3, #1
   22974:	e59f21cc 	ldr	r2, [pc, #460]	; 22b48 <vTaskIncrementTick+0x1fc>
   22978:	e5823000 	str	r3, [r2]
		if( xTickCount == ( portTickType ) 0U )
   2297c:	e59f31c4 	ldr	r3, [pc, #452]	; 22b48 <vTaskIncrementTick+0x1fc>
   22980:	e5933000 	ldr	r3, [r3]
   22984:	e3530000 	cmp	r3, #0
   22988:	1a000020 	bne	22a10 <vTaskIncrementTick+0xc4>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
   2298c:	e59f31b8 	ldr	r3, [pc, #440]	; 22b4c <vTaskIncrementTick+0x200>
   22990:	e5933000 	ldr	r3, [r3]
   22994:	e50b3008 	str	r3, [fp, #-8]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   22998:	e59f31b0 	ldr	r3, [pc, #432]	; 22b50 <vTaskIncrementTick+0x204>
   2299c:	e5933000 	ldr	r3, [r3]
   229a0:	e59f21a4 	ldr	r2, [pc, #420]	; 22b4c <vTaskIncrementTick+0x200>
   229a4:	e5823000 	str	r3, [r2]
			pxOverflowDelayedTaskList = pxTemp;
   229a8:	e59f21a0 	ldr	r2, [pc, #416]	; 22b50 <vTaskIncrementTick+0x204>
   229ac:	e51b3008 	ldr	r3, [fp, #-8]
   229b0:	e5823000 	str	r3, [r2]
			xNumOfOverflows++;
   229b4:	e59f3198 	ldr	r3, [pc, #408]	; 22b54 <vTaskIncrementTick+0x208>
   229b8:	e5933000 	ldr	r3, [r3]
   229bc:	e2833001 	add	r3, r3, #1
   229c0:	e59f218c 	ldr	r2, [pc, #396]	; 22b54 <vTaskIncrementTick+0x208>
   229c4:	e5823000 	str	r3, [r2]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   229c8:	e59f317c 	ldr	r3, [pc, #380]	; 22b4c <vTaskIncrementTick+0x200>
   229cc:	e5933000 	ldr	r3, [r3]
   229d0:	e5933000 	ldr	r3, [r3]
   229d4:	e3530000 	cmp	r3, #0
   229d8:	1a000003 	bne	229ec <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   229dc:	e59f3174 	ldr	r3, [pc, #372]	; 22b58 <vTaskIncrementTick+0x20c>
   229e0:	e3e02000 	mvn	r2, #0
   229e4:	e5832000 	str	r2, [r3]
   229e8:	ea000008 	b	22a10 <vTaskIncrementTick+0xc4>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   229ec:	e59f3158 	ldr	r3, [pc, #344]	; 22b4c <vTaskIncrementTick+0x200>
   229f0:	e5933000 	ldr	r3, [r3]
   229f4:	e593300c 	ldr	r3, [r3, #12]
   229f8:	e593300c 	ldr	r3, [r3, #12]
   229fc:	e50b300c 	str	r3, [fp, #-12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   22a00:	e51b300c 	ldr	r3, [fp, #-12]
   22a04:	e5933004 	ldr	r3, [r3, #4]
   22a08:	e59f2148 	ldr	r2, [pc, #328]	; 22b58 <vTaskIncrementTick+0x20c>
   22a0c:	e5823000 	str	r3, [r2]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   22a10:	e59f3130 	ldr	r3, [pc, #304]	; 22b48 <vTaskIncrementTick+0x1fc>
   22a14:	e5932000 	ldr	r2, [r3]
   22a18:	e59f3138 	ldr	r3, [pc, #312]	; 22b58 <vTaskIncrementTick+0x20c>
   22a1c:	e5933000 	ldr	r3, [r3]
   22a20:	e1520003 	cmp	r2, r3
   22a24:	3a000043 	bcc	22b38 <vTaskIncrementTick+0x1ec>
   22a28:	e59f311c 	ldr	r3, [pc, #284]	; 22b4c <vTaskIncrementTick+0x200>
   22a2c:	e5933000 	ldr	r3, [r3]
   22a30:	e5933000 	ldr	r3, [r3]
   22a34:	e3530000 	cmp	r3, #0
   22a38:	1a000003 	bne	22a4c <vTaskIncrementTick+0x100>
   22a3c:	e59f3114 	ldr	r3, [pc, #276]	; 22b58 <vTaskIncrementTick+0x20c>
   22a40:	e3e02000 	mvn	r2, #0
   22a44:	e5832000 	str	r2, [r3]
   22a48:	ea00003a 	b	22b38 <vTaskIncrementTick+0x1ec>
   22a4c:	e59f30f8 	ldr	r3, [pc, #248]	; 22b4c <vTaskIncrementTick+0x200>
   22a50:	e5933000 	ldr	r3, [r3]
   22a54:	e593300c 	ldr	r3, [r3, #12]
   22a58:	e593300c 	ldr	r3, [r3, #12]
   22a5c:	e50b300c 	str	r3, [fp, #-12]
   22a60:	e51b300c 	ldr	r3, [fp, #-12]
   22a64:	e5933004 	ldr	r3, [r3, #4]
   22a68:	e50b3010 	str	r3, [fp, #-16]
   22a6c:	e59f30d4 	ldr	r3, [pc, #212]	; 22b48 <vTaskIncrementTick+0x1fc>
   22a70:	e5933000 	ldr	r3, [r3]
   22a74:	e51b2010 	ldr	r2, [fp, #-16]
   22a78:	e1520003 	cmp	r2, r3
   22a7c:	9a000003 	bls	22a90 <vTaskIncrementTick+0x144>
   22a80:	e59f20d0 	ldr	r2, [pc, #208]	; 22b58 <vTaskIncrementTick+0x20c>
   22a84:	e51b3010 	ldr	r3, [fp, #-16]
   22a88:	e5823000 	str	r3, [r2]
   22a8c:	ea000029 	b	22b38 <vTaskIncrementTick+0x1ec>
   22a90:	e51b300c 	ldr	r3, [fp, #-12]
   22a94:	e2833004 	add	r3, r3, #4
   22a98:	e1a00003 	mov	r0, r3
   22a9c:	ebfff92d 	bl	20f58 <vListRemove>
   22aa0:	e51b300c 	ldr	r3, [fp, #-12]
   22aa4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
   22aa8:	e3530000 	cmp	r3, #0
   22aac:	0a000003 	beq	22ac0 <vTaskIncrementTick+0x174>
   22ab0:	e51b300c 	ldr	r3, [fp, #-12]
   22ab4:	e2833018 	add	r3, r3, #24
   22ab8:	e1a00003 	mov	r0, r3
   22abc:	ebfff925 	bl	20f58 <vListRemove>
   22ac0:	e51b300c 	ldr	r3, [fp, #-12]
   22ac4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22ac8:	e59f308c 	ldr	r3, [pc, #140]	; 22b5c <vTaskIncrementTick+0x210>
   22acc:	e5933000 	ldr	r3, [r3]
   22ad0:	e1520003 	cmp	r2, r3
   22ad4:	9a000003 	bls	22ae8 <vTaskIncrementTick+0x19c>
   22ad8:	e51b300c 	ldr	r3, [fp, #-12]
   22adc:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22ae0:	e59f2074 	ldr	r2, [pc, #116]	; 22b5c <vTaskIncrementTick+0x210>
   22ae4:	e5823000 	str	r3, [r2]
   22ae8:	e51b300c 	ldr	r3, [fp, #-12]
   22aec:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22af0:	e1a03002 	mov	r3, r2
   22af4:	e1a03103 	lsl	r3, r3, #2
   22af8:	e0833002 	add	r3, r3, r2
   22afc:	e1a03103 	lsl	r3, r3, #2
   22b00:	e59f2058 	ldr	r2, [pc, #88]	; 22b60 <vTaskIncrementTick+0x214>
   22b04:	e0832002 	add	r2, r3, r2
   22b08:	e51b300c 	ldr	r3, [fp, #-12]
   22b0c:	e2833004 	add	r3, r3, #4
   22b10:	e1a01003 	mov	r1, r3
   22b14:	e1a00002 	mov	r0, r2
   22b18:	ebfff8b2 	bl	20de8 <vListInsertEnd>
   22b1c:	eaffffc1 	b	22a28 <vTaskIncrementTick+0xdc>
	}
	else
	{
		++uxMissedTicks;
   22b20:	e59f303c 	ldr	r3, [pc, #60]	; 22b64 <vTaskIncrementTick+0x218>
   22b24:	e5933000 	ldr	r3, [r3]
   22b28:	e2833001 	add	r3, r3, #1
   22b2c:	e59f2030 	ldr	r2, [pc, #48]	; 22b64 <vTaskIncrementTick+0x218>
   22b30:	e5823000 	str	r3, [r2]
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
   22b34:	eaffffff 	b	22b38 <vTaskIncrementTick+0x1ec>
   22b38:	e320f000 	nop	{0}
   22b3c:	e24bd004 	sub	sp, fp, #4
   22b40:	e8bd8800 	pop	{fp, pc}
   22b44:	0002c060 	andeq	ip, r2, r0, rrx
   22b48:	0002c050 	andeq	ip, r2, r0, asr r0
   22b4c:	0002c004 	andeq	ip, r2, r4
   22b50:	0002c008 	andeq	ip, r2, r8
   22b54:	0002c06c 	andeq	ip, r2, ip, rrx
   22b58:	0002bee4 	andeq	fp, r2, r4, ror #29
   22b5c:	0002c058 	andeq	ip, r2, r8, asr r0
   22b60:	0002bf78 	andeq	fp, r2, r8, ror pc
   22b64:	0002c064 	andeq	ip, r2, r4, rrx

00022b68 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
	{
   22b68:	e92d4800 	push	{fp, lr}
   22b6c:	e28db004 	add	fp, sp, #4
   22b70:	e24dd010 	sub	sp, sp, #16
   22b74:	e50b0010 	str	r0, [fp, #-16]
   22b78:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   22b7c:	e51b3010 	ldr	r3, [fp, #-16]
   22b80:	e3530000 	cmp	r3, #0
   22b84:	1a000003 	bne	22b98 <vTaskSetApplicationTaskTag+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22b88:	e59f3030 	ldr	r3, [pc, #48]	; 22bc0 <vTaskSetApplicationTaskTag+0x58>
   22b8c:	e5933000 	ldr	r3, [r3]
   22b90:	e50b3008 	str	r3, [fp, #-8]
   22b94:	ea000001 	b	22ba0 <vTaskSetApplicationTaskTag+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22b98:	e51b3010 	ldr	r3, [fp, #-16]
   22b9c:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   22ba0:	ebfff666 	bl	20540 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
   22ba4:	e51b3008 	ldr	r3, [fp, #-8]
   22ba8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22bac:	e5832044 	str	r2, [r3, #68]	; 0x44
		taskEXIT_CRITICAL();
   22bb0:	ebfff673 	bl	20584 <vPortExitCritical>
	}
   22bb4:	e320f000 	nop	{0}
   22bb8:	e24bd004 	sub	sp, fp, #4
   22bbc:	e8bd8800 	pop	{fp, pc}
   22bc0:	0002bf74 	andeq	fp, r2, r4, ror pc

00022bc4 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
	{
   22bc4:	e92d4800 	push	{fp, lr}
   22bc8:	e28db004 	add	fp, sp, #4
   22bcc:	e24dd010 	sub	sp, sp, #16
   22bd0:	e50b0010 	str	r0, [fp, #-16]
	tskTCB *xTCB;
	pdTASK_HOOK_CODE xReturn;

		/* If xTask is NULL then we are setting our own task hook. */
		if( xTask == NULL )
   22bd4:	e51b3010 	ldr	r3, [fp, #-16]
   22bd8:	e3530000 	cmp	r3, #0
   22bdc:	1a000003 	bne	22bf0 <xTaskGetApplicationTaskTag+0x2c>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22be0:	e59f3034 	ldr	r3, [pc, #52]	; 22c1c <xTaskGetApplicationTaskTag+0x58>
   22be4:	e5933000 	ldr	r3, [r3]
   22be8:	e50b3008 	str	r3, [fp, #-8]
   22bec:	ea000001 	b	22bf8 <xTaskGetApplicationTaskTag+0x34>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22bf0:	e51b3010 	ldr	r3, [fp, #-16]
   22bf4:	e50b3008 	str	r3, [fp, #-8]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
   22bf8:	ebfff650 	bl	20540 <vPortEnterCritical>
			xReturn = xTCB->pxTaskTag;
   22bfc:	e51b3008 	ldr	r3, [fp, #-8]
   22c00:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   22c04:	e50b300c 	str	r3, [fp, #-12]
		taskEXIT_CRITICAL();
   22c08:	ebfff65d 	bl	20584 <vPortExitCritical>

		return xReturn;
   22c0c:	e51b300c 	ldr	r3, [fp, #-12]
	}
   22c10:	e1a00003 	mov	r0, r3
   22c14:	e24bd004 	sub	sp, fp, #4
   22c18:	e8bd8800 	pop	{fp, pc}
   22c1c:	0002bf74 	andeq	fp, r2, r4, ror pc

00022c20 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
	{
   22c20:	e92d4800 	push	{fp, lr}
   22c24:	e28db004 	add	fp, sp, #4
   22c28:	e24dd010 	sub	sp, sp, #16
   22c2c:	e50b0010 	str	r0, [fp, #-16]
   22c30:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	tskTCB *xTCB;
	portBASE_TYPE xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
   22c34:	e51b3010 	ldr	r3, [fp, #-16]
   22c38:	e3530000 	cmp	r3, #0
   22c3c:	1a000003 	bne	22c50 <xTaskCallApplicationTaskHook+0x30>
		{
			xTCB = ( tskTCB * ) pxCurrentTCB;
   22c40:	e59f3050 	ldr	r3, [pc, #80]	; 22c98 <xTaskCallApplicationTaskHook+0x78>
   22c44:	e5933000 	ldr	r3, [r3]
   22c48:	e50b3008 	str	r3, [fp, #-8]
   22c4c:	ea000001 	b	22c58 <xTaskCallApplicationTaskHook+0x38>
		}
		else
		{
			xTCB = ( tskTCB * ) xTask;
   22c50:	e51b3010 	ldr	r3, [fp, #-16]
   22c54:	e50b3008 	str	r3, [fp, #-8]
		}

		if( xTCB->pxTaskTag != NULL )
   22c58:	e51b3008 	ldr	r3, [fp, #-8]
   22c5c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   22c60:	e3530000 	cmp	r3, #0
   22c64:	0a000005 	beq	22c80 <xTaskCallApplicationTaskHook+0x60>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
   22c68:	e51b3008 	ldr	r3, [fp, #-8]
   22c6c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
   22c70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   22c74:	e12fff33 	blx	r3
   22c78:	e50b000c 	str	r0, [fp, #-12]
   22c7c:	ea000001 	b	22c88 <xTaskCallApplicationTaskHook+0x68>
		}
		else
		{
			xReturn = pdFAIL;
   22c80:	e3a03000 	mov	r3, #0
   22c84:	e50b300c 	str	r3, [fp, #-12]
		}

		return xReturn;
   22c88:	e51b300c 	ldr	r3, [fp, #-12]
	}
   22c8c:	e1a00003 	mov	r0, r3
   22c90:	e24bd004 	sub	sp, fp, #4
   22c94:	e8bd8800 	pop	{fp, pc}
   22c98:	0002bf74 	andeq	fp, r2, r4, ror pc

00022c9c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   22c9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22ca0:	e28db000 	add	fp, sp, #0
   22ca4:	e24dd00c 	sub	sp, sp, #12
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   22ca8:	e59f30e0 	ldr	r3, [pc, #224]	; 22d90 <vTaskSwitchContext+0xf4>
   22cac:	e5933000 	ldr	r3, [r3]
   22cb0:	e3530000 	cmp	r3, #0
   22cb4:	0a000008 	beq	22cdc <vTaskSwitchContext+0x40>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   22cb8:	e59f30d4 	ldr	r3, [pc, #212]	; 22d94 <vTaskSwitchContext+0xf8>
   22cbc:	e3a02001 	mov	r2, #1
   22cc0:	e5832000 	str	r2, [r3]
		pTraceEvent = pxCurrentTCB->pTraceEvent;	// Restore Trace event pointer state to TCB.
#endif

		traceTASK_SWITCHED_IN();
	}
}
   22cc4:	ea00002d 	b	22d80 <vTaskSwitchContext+0xe4>
			--uxTopReadyPriority;
   22cc8:	e59f30c8 	ldr	r3, [pc, #200]	; 22d98 <vTaskSwitchContext+0xfc>
   22ccc:	e5933000 	ldr	r3, [r3]
   22cd0:	e2433001 	sub	r3, r3, #1
   22cd4:	e59f20bc 	ldr	r2, [pc, #188]	; 22d98 <vTaskSwitchContext+0xfc>
   22cd8:	e5823000 	str	r3, [r2]
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
   22cdc:	e59f30b4 	ldr	r3, [pc, #180]	; 22d98 <vTaskSwitchContext+0xfc>
   22ce0:	e5932000 	ldr	r2, [r3]
   22ce4:	e59f10b0 	ldr	r1, [pc, #176]	; 22d9c <vTaskSwitchContext+0x100>
   22ce8:	e1a03002 	mov	r3, r2
   22cec:	e1a03103 	lsl	r3, r3, #2
   22cf0:	e0833002 	add	r3, r3, r2
   22cf4:	e1a03103 	lsl	r3, r3, #2
   22cf8:	e0813003 	add	r3, r1, r3
   22cfc:	e5933000 	ldr	r3, [r3]
   22d00:	e3530000 	cmp	r3, #0
   22d04:	0affffef 	beq	22cc8 <vTaskSwitchContext+0x2c>
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
   22d08:	e59f3088 	ldr	r3, [pc, #136]	; 22d98 <vTaskSwitchContext+0xfc>
   22d0c:	e5932000 	ldr	r2, [r3]
   22d10:	e1a03002 	mov	r3, r2
   22d14:	e1a03103 	lsl	r3, r3, #2
   22d18:	e0833002 	add	r3, r3, r2
   22d1c:	e1a03103 	lsl	r3, r3, #2
   22d20:	e59f2074 	ldr	r2, [pc, #116]	; 22d9c <vTaskSwitchContext+0x100>
   22d24:	e0833002 	add	r3, r3, r2
   22d28:	e50b3008 	str	r3, [fp, #-8]
   22d2c:	e51b3008 	ldr	r3, [fp, #-8]
   22d30:	e5933004 	ldr	r3, [r3, #4]
   22d34:	e5932004 	ldr	r2, [r3, #4]
   22d38:	e51b3008 	ldr	r3, [fp, #-8]
   22d3c:	e5832004 	str	r2, [r3, #4]
   22d40:	e51b3008 	ldr	r3, [fp, #-8]
   22d44:	e5932004 	ldr	r2, [r3, #4]
   22d48:	e51b3008 	ldr	r3, [fp, #-8]
   22d4c:	e2833008 	add	r3, r3, #8
   22d50:	e1520003 	cmp	r2, r3
   22d54:	1a000004 	bne	22d6c <vTaskSwitchContext+0xd0>
   22d58:	e51b3008 	ldr	r3, [fp, #-8]
   22d5c:	e5933004 	ldr	r3, [r3, #4]
   22d60:	e5932004 	ldr	r2, [r3, #4]
   22d64:	e51b3008 	ldr	r3, [fp, #-8]
   22d68:	e5832004 	str	r2, [r3, #4]
   22d6c:	e51b3008 	ldr	r3, [fp, #-8]
   22d70:	e5933004 	ldr	r3, [r3, #4]
   22d74:	e593300c 	ldr	r3, [r3, #12]
   22d78:	e59f2020 	ldr	r2, [pc, #32]	; 22da0 <vTaskSwitchContext+0x104>
   22d7c:	e5823000 	str	r3, [r2]
}
   22d80:	e320f000 	nop	{0}
   22d84:	e28bd000 	add	sp, fp, #0
   22d88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22d8c:	e12fff1e 	bx	lr
   22d90:	0002c060 	andeq	ip, r2, r0, rrx
   22d94:	0002c068 	andeq	ip, r2, r8, rrx
   22d98:	0002c058 	andeq	ip, r2, r8, asr r0
   22d9c:	0002bf78 	andeq	fp, r2, r8, ror pc
   22da0:	0002bf74 	andeq	fp, r2, r4, ror pc

00022da4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   22da4:	e92d4800 	push	{fp, lr}
   22da8:	e28db004 	add	fp, sp, #4
   22dac:	e24dd010 	sub	sp, sp, #16
   22db0:	e50b0010 	str	r0, [fp, #-16]
   22db4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   22db8:	e59f3074 	ldr	r3, [pc, #116]	; 22e34 <vTaskPlaceOnEventList+0x90>
   22dbc:	e5933000 	ldr	r3, [r3]
   22dc0:	e2833018 	add	r3, r3, #24
   22dc4:	e1a01003 	mov	r1, r3
   22dc8:	e51b0010 	ldr	r0, [fp, #-16]
   22dcc:	ebfff82b 	bl	20e80 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22dd0:	e59f305c 	ldr	r3, [pc, #92]	; 22e34 <vTaskPlaceOnEventList+0x90>
   22dd4:	e5933000 	ldr	r3, [r3]
   22dd8:	e2833004 	add	r3, r3, #4
   22ddc:	e1a00003 	mov	r0, r3
   22de0:	ebfff85c 	bl	20f58 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   22de4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22de8:	e3730001 	cmn	r3, #1
   22dec:	1a000006 	bne	22e0c <vTaskPlaceOnEventList+0x68>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   22df0:	e59f303c 	ldr	r3, [pc, #60]	; 22e34 <vTaskPlaceOnEventList+0x90>
   22df4:	e5933000 	ldr	r3, [r3]
   22df8:	e2833004 	add	r3, r3, #4
   22dfc:	e1a01003 	mov	r1, r3
   22e00:	e59f0030 	ldr	r0, [pc, #48]	; 22e38 <vTaskPlaceOnEventList+0x94>
   22e04:	ebfff7f7 	bl	20de8 <vListInsertEnd>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
   22e08:	ea000006 	b	22e28 <vTaskPlaceOnEventList+0x84>
			xTimeToWake = xTickCount + xTicksToWait;
   22e0c:	e59f3028 	ldr	r3, [pc, #40]	; 22e3c <vTaskPlaceOnEventList+0x98>
   22e10:	e5933000 	ldr	r3, [r3]
   22e14:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   22e18:	e0823003 	add	r3, r2, r3
   22e1c:	e50b3008 	str	r3, [fp, #-8]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   22e20:	e51b0008 	ldr	r0, [fp, #-8]
   22e24:	eb00013f 	bl	23328 <prvAddCurrentTaskToDelayedList>
}
   22e28:	e320f000 	nop	{0}
   22e2c:	e24bd004 	sub	sp, fp, #4
   22e30:	e8bd8800 	pop	{fp, pc}
   22e34:	0002bf74 	andeq	fp, r2, r4, ror pc
   22e38:	0002c038 	andeq	ip, r2, r8, lsr r0
   22e3c:	0002c050 	andeq	ip, r2, r0, asr r0

00022e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   22e40:	e92d4800 	push	{fp, lr}
   22e44:	e28db004 	add	fp, sp, #4
   22e48:	e24dd010 	sub	sp, sp, #16
   22e4c:	e50b0010 	str	r0, [fp, #-16]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   22e50:	e51b3010 	ldr	r3, [fp, #-16]
   22e54:	e593300c 	ldr	r3, [r3, #12]
   22e58:	e593300c 	ldr	r3, [r3, #12]
   22e5c:	e50b300c 	str	r3, [fp, #-12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
   22e60:	e51b300c 	ldr	r3, [fp, #-12]
   22e64:	e2833018 	add	r3, r3, #24
   22e68:	e1a00003 	mov	r0, r3
   22e6c:	ebfff839 	bl	20f58 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   22e70:	e59f30cc 	ldr	r3, [pc, #204]	; 22f44 <xTaskRemoveFromEventList+0x104>
   22e74:	e5933000 	ldr	r3, [r3]
   22e78:	e3530000 	cmp	r3, #0
   22e7c:	1a00001b 	bne	22ef0 <xTaskRemoveFromEventList+0xb0>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   22e80:	e51b300c 	ldr	r3, [fp, #-12]
   22e84:	e2833004 	add	r3, r3, #4
   22e88:	e1a00003 	mov	r0, r3
   22e8c:	ebfff831 	bl	20f58 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   22e90:	e51b300c 	ldr	r3, [fp, #-12]
   22e94:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22e98:	e59f30a8 	ldr	r3, [pc, #168]	; 22f48 <xTaskRemoveFromEventList+0x108>
   22e9c:	e5933000 	ldr	r3, [r3]
   22ea0:	e1520003 	cmp	r2, r3
   22ea4:	9a000003 	bls	22eb8 <xTaskRemoveFromEventList+0x78>
   22ea8:	e51b300c 	ldr	r3, [fp, #-12]
   22eac:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22eb0:	e59f2090 	ldr	r2, [pc, #144]	; 22f48 <xTaskRemoveFromEventList+0x108>
   22eb4:	e5823000 	str	r3, [r2]
   22eb8:	e51b300c 	ldr	r3, [fp, #-12]
   22ebc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22ec0:	e1a03002 	mov	r3, r2
   22ec4:	e1a03103 	lsl	r3, r3, #2
   22ec8:	e0833002 	add	r3, r3, r2
   22ecc:	e1a03103 	lsl	r3, r3, #2
   22ed0:	e59f2074 	ldr	r2, [pc, #116]	; 22f4c <xTaskRemoveFromEventList+0x10c>
   22ed4:	e0832002 	add	r2, r3, r2
   22ed8:	e51b300c 	ldr	r3, [fp, #-12]
   22edc:	e2833004 	add	r3, r3, #4
   22ee0:	e1a01003 	mov	r1, r3
   22ee4:	e1a00002 	mov	r0, r2
   22ee8:	ebfff7be 	bl	20de8 <vListInsertEnd>
   22eec:	ea000004 	b	22f04 <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   22ef0:	e51b300c 	ldr	r3, [fp, #-12]
   22ef4:	e2833018 	add	r3, r3, #24
   22ef8:	e1a01003 	mov	r1, r3
   22efc:	e59f004c 	ldr	r0, [pc, #76]	; 22f50 <xTaskRemoveFromEventList+0x110>
   22f00:	ebfff7b8 	bl	20de8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   22f04:	e51b300c 	ldr	r3, [fp, #-12]
   22f08:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   22f0c:	e59f3040 	ldr	r3, [pc, #64]	; 22f54 <xTaskRemoveFromEventList+0x114>
   22f10:	e5933000 	ldr	r3, [r3]
   22f14:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   22f18:	e1520003 	cmp	r2, r3
   22f1c:	3a000002 	bcc	22f2c <xTaskRemoveFromEventList+0xec>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
   22f20:	e3a03001 	mov	r3, #1
   22f24:	e50b3008 	str	r3, [fp, #-8]
   22f28:	ea000001 	b	22f34 <xTaskRemoveFromEventList+0xf4>
	}
	else
	{
		xReturn = pdFALSE;
   22f2c:	e3a03000 	mov	r3, #0
   22f30:	e50b3008 	str	r3, [fp, #-8]
	}

	return xReturn;
   22f34:	e51b3008 	ldr	r3, [fp, #-8]
}
   22f38:	e1a00003 	mov	r0, r3
   22f3c:	e24bd004 	sub	sp, fp, #4
   22f40:	e8bd8800 	pop	{fp, pc}
   22f44:	0002c060 	andeq	ip, r2, r0, rrx
   22f48:	0002c058 	andeq	ip, r2, r8, asr r0
   22f4c:	0002bf78 	andeq	fp, r2, r8, ror pc
   22f50:	0002c00c 	andeq	ip, r2, ip
   22f54:	0002bf74 	andeq	fp, r2, r4, ror pc

00022f58 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   22f58:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   22f5c:	e28db000 	add	fp, sp, #0
   22f60:	e24dd00c 	sub	sp, sp, #12
   22f64:	e50b0008 	str	r0, [fp, #-8]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   22f68:	e59f3028 	ldr	r3, [pc, #40]	; 22f98 <vTaskSetTimeOutState+0x40>
   22f6c:	e5932000 	ldr	r2, [r3]
   22f70:	e51b3008 	ldr	r3, [fp, #-8]
   22f74:	e5832000 	str	r2, [r3]
	pxTimeOut->xTimeOnEntering = xTickCount;
   22f78:	e59f301c 	ldr	r3, [pc, #28]	; 22f9c <vTaskSetTimeOutState+0x44>
   22f7c:	e5932000 	ldr	r2, [r3]
   22f80:	e51b3008 	ldr	r3, [fp, #-8]
   22f84:	e5832004 	str	r2, [r3, #4]
}
   22f88:	e320f000 	nop	{0}
   22f8c:	e28bd000 	add	sp, fp, #0
   22f90:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   22f94:	e12fff1e 	bx	lr
   22f98:	0002c06c 	andeq	ip, r2, ip, rrx
   22f9c:	0002c050 	andeq	ip, r2, r0, asr r0

00022fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   22fa0:	e92d4800 	push	{fp, lr}
   22fa4:	e28db004 	add	fp, sp, #4
   22fa8:	e24dd010 	sub	sp, sp, #16
   22fac:	e50b0010 	str	r0, [fp, #-16]
   22fb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
   22fb4:	ebfff561 	bl	20540 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   22fb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   22fbc:	e5933000 	ldr	r3, [r3]
   22fc0:	e3730001 	cmn	r3, #1
   22fc4:	1a000002 	bne	22fd4 <xTaskCheckForTimeOut+0x34>
			{
				xReturn = pdFALSE;
   22fc8:	e3a03000 	mov	r3, #0
   22fcc:	e50b3008 	str	r3, [fp, #-8]
   22fd0:	ea000028 	b	23078 <xTaskCheckForTimeOut+0xd8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   22fd4:	e51b3010 	ldr	r3, [fp, #-16]
   22fd8:	e5932000 	ldr	r2, [r3]
   22fdc:	e59f30a8 	ldr	r3, [pc, #168]	; 2308c <xTaskCheckForTimeOut+0xec>
   22fe0:	e5933000 	ldr	r3, [r3]
   22fe4:	e1520003 	cmp	r2, r3
   22fe8:	0a000008 	beq	23010 <xTaskCheckForTimeOut+0x70>
   22fec:	e51b3010 	ldr	r3, [fp, #-16]
   22ff0:	e5932004 	ldr	r2, [r3, #4]
   22ff4:	e59f3094 	ldr	r3, [pc, #148]	; 23090 <xTaskCheckForTimeOut+0xf0>
   22ff8:	e5933000 	ldr	r3, [r3]
   22ffc:	e1520003 	cmp	r2, r3
   23000:	8a000002 	bhi	23010 <xTaskCheckForTimeOut+0x70>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   23004:	e3a03001 	mov	r3, #1
   23008:	e50b3008 	str	r3, [fp, #-8]
   2300c:	ea000019 	b	23078 <xTaskCheckForTimeOut+0xd8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   23010:	e59f3078 	ldr	r3, [pc, #120]	; 23090 <xTaskCheckForTimeOut+0xf0>
   23014:	e5932000 	ldr	r2, [r3]
   23018:	e51b3010 	ldr	r3, [fp, #-16]
   2301c:	e5933004 	ldr	r3, [r3, #4]
   23020:	e0422003 	sub	r2, r2, r3
   23024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23028:	e5933000 	ldr	r3, [r3]
   2302c:	e1520003 	cmp	r2, r3
   23030:	2a00000e 	bcs	23070 <xTaskCheckForTimeOut+0xd0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   23034:	e59f3054 	ldr	r3, [pc, #84]	; 23090 <xTaskCheckForTimeOut+0xf0>
   23038:	e5932000 	ldr	r2, [r3]
   2303c:	e51b3010 	ldr	r3, [fp, #-16]
   23040:	e5933004 	ldr	r3, [r3, #4]
   23044:	e0423003 	sub	r3, r2, r3
   23048:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2304c:	e5922000 	ldr	r2, [r2]
   23050:	e0422003 	sub	r2, r2, r3
   23054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23058:	e5832000 	str	r2, [r3]
			vTaskSetTimeOutState( pxTimeOut );
   2305c:	e51b0010 	ldr	r0, [fp, #-16]
   23060:	ebffffbc 	bl	22f58 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
   23064:	e3a03000 	mov	r3, #0
   23068:	e50b3008 	str	r3, [fp, #-8]
   2306c:	ea000001 	b	23078 <xTaskCheckForTimeOut+0xd8>
		}
		else
		{
			xReturn = pdTRUE;
   23070:	e3a03001 	mov	r3, #1
   23074:	e50b3008 	str	r3, [fp, #-8]
		}
	}
	taskEXIT_CRITICAL();
   23078:	ebfff541 	bl	20584 <vPortExitCritical>

	return xReturn;
   2307c:	e51b3008 	ldr	r3, [fp, #-8]
}
   23080:	e1a00003 	mov	r0, r3
   23084:	e24bd004 	sub	sp, fp, #4
   23088:	e8bd8800 	pop	{fp, pc}
   2308c:	0002c06c 	andeq	ip, r2, ip, rrx
   23090:	0002c050 	andeq	ip, r2, r0, asr r0

00023094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   23094:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23098:	e28db000 	add	fp, sp, #0
	xMissedYield = pdTRUE;
   2309c:	e59f3014 	ldr	r3, [pc, #20]	; 230b8 <vTaskMissedYield+0x24>
   230a0:	e3a02001 	mov	r2, #1
   230a4:	e5832000 	str	r2, [r3]
}
   230a8:	e320f000 	nop	{0}
   230ac:	e28bd000 	add	sp, fp, #0
   230b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   230b4:	e12fff1e 	bx	lr
   230b8:	0002c068 	andeq	ip, r2, r8, rrx

000230bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   230bc:	e92d4800 	push	{fp, lr}
   230c0:	e28db004 	add	fp, sp, #4
   230c4:	e24dd008 	sub	sp, sp, #8
   230c8:	e50b0008 	str	r0, [fp, #-8]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   230cc:	eb000066 	bl	2326c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   230d0:	e59f3010 	ldr	r3, [pc, #16]	; 230e8 <prvIdleTask+0x2c>
   230d4:	e5933000 	ldr	r3, [r3]
   230d8:	e3530001 	cmp	r3, #1
   230dc:	9afffffa 	bls	230cc <prvIdleTask+0x10>
			{
				taskYIELD();
   230e0:	ef000000 	svc	0x00000000
		prvCheckTasksWaitingTermination();
   230e4:	eafffff8 	b	230cc <prvIdleTask+0x10>
   230e8:	0002bf78 	andeq	fp, r2, r8, ror pc

000230ec <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
   230ec:	e92d4800 	push	{fp, lr}
   230f0:	e28db004 	add	fp, sp, #4
   230f4:	e24dd010 	sub	sp, sp, #16
   230f8:	e50b0008 	str	r0, [fp, #-8]
   230fc:	e50b100c 	str	r1, [fp, #-12]
   23100:	e50b2010 	str	r2, [fp, #-16]
   23104:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   23108:	e51b3008 	ldr	r3, [fp, #-8]
   2310c:	e2833034 	add	r3, r3, #52	; 0x34
   23110:	e3a02010 	mov	r2, #16
   23114:	e51b100c 	ldr	r1, [fp, #-12]
   23118:	e1a00003 	mov	r0, r3
   2311c:	eb002183 	bl	2b730 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   23120:	e51b3008 	ldr	r3, [fp, #-8]
   23124:	e3a02000 	mov	r2, #0
   23128:	e5c32043 	strb	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
   2312c:	e51b3010 	ldr	r3, [fp, #-16]
   23130:	e3530004 	cmp	r3, #4
   23134:	9a000001 	bls	23140 <prvInitialiseTCBVariables+0x54>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
   23138:	e3a03004 	mov	r3, #4
   2313c:	e50b3010 	str	r3, [fp, #-16]
	}

	pxTCB->uxPriority = uxPriority;
   23140:	e51b3008 	ldr	r3, [fp, #-8]
   23144:	e51b2010 	ldr	r2, [fp, #-16]
   23148:	e583202c 	str	r2, [r3, #44]	; 0x2c
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   2314c:	e51b3008 	ldr	r3, [fp, #-8]
   23150:	e2833004 	add	r3, r3, #4
   23154:	e1a00003 	mov	r0, r3
   23158:	ebfff717 	bl	20dbc <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   2315c:	e51b3008 	ldr	r3, [fp, #-8]
   23160:	e2833018 	add	r3, r3, #24
   23164:	e1a00003 	mov	r0, r3
   23168:	ebfff713 	bl	20dbc <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   2316c:	e51b3008 	ldr	r3, [fp, #-8]
   23170:	e51b2008 	ldr	r2, [fp, #-8]
   23174:	e5832010 	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   23178:	e51b3010 	ldr	r3, [fp, #-16]
   2317c:	e2632005 	rsb	r2, r3, #5
   23180:	e51b3008 	ldr	r3, [fp, #-8]
   23184:	e5832018 	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   23188:	e51b3008 	ldr	r3, [fp, #-8]
   2318c:	e51b2008 	ldr	r2, [fp, #-8]
   23190:	e5832024 	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
   23194:	e51b3008 	ldr	r3, [fp, #-8]
   23198:	e3a02000 	mov	r2, #0
   2319c:	e5832044 	str	r2, [r3, #68]	; 0x44
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
   231a0:	e320f000 	nop	{0}
   231a4:	e24bd004 	sub	sp, fp, #4
   231a8:	e8bd8800 	pop	{fp, pc}

000231ac <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
   231ac:	e92d4800 	push	{fp, lr}
   231b0:	e28db004 	add	fp, sp, #4
   231b4:	e24dd008 	sub	sp, sp, #8
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   231b8:	e3a03000 	mov	r3, #0
   231bc:	e50b3008 	str	r3, [fp, #-8]
   231c0:	ea00000b 	b	231f4 <prvInitialiseTaskLists+0x48>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   231c4:	e51b2008 	ldr	r2, [fp, #-8]
   231c8:	e1a03002 	mov	r3, r2
   231cc:	e1a03103 	lsl	r3, r3, #2
   231d0:	e0833002 	add	r3, r3, r2
   231d4:	e1a03103 	lsl	r3, r3, #2
   231d8:	e59f206c 	ldr	r2, [pc, #108]	; 2324c <prvInitialiseTaskLists+0xa0>
   231dc:	e0833002 	add	r3, r3, r2
   231e0:	e1a00003 	mov	r0, r3
   231e4:	ebfff6da 	bl	20d54 <vListInitialise>
	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   231e8:	e51b3008 	ldr	r3, [fp, #-8]
   231ec:	e2833001 	add	r3, r3, #1
   231f0:	e50b3008 	str	r3, [fp, #-8]
   231f4:	e51b3008 	ldr	r3, [fp, #-8]
   231f8:	e3530004 	cmp	r3, #4
   231fc:	9afffff0 	bls	231c4 <prvInitialiseTaskLists+0x18>
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   23200:	e59f0048 	ldr	r0, [pc, #72]	; 23250 <prvInitialiseTaskLists+0xa4>
   23204:	ebfff6d2 	bl	20d54 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   23208:	e59f0044 	ldr	r0, [pc, #68]	; 23254 <prvInitialiseTaskLists+0xa8>
   2320c:	ebfff6d0 	bl	20d54 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
   23210:	e59f0040 	ldr	r0, [pc, #64]	; 23258 <prvInitialiseTaskLists+0xac>
   23214:	ebfff6ce 	bl	20d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   23218:	e59f003c 	ldr	r0, [pc, #60]	; 2325c <prvInitialiseTaskLists+0xb0>
   2321c:	ebfff6cc 	bl	20d54 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   23220:	e59f0038 	ldr	r0, [pc, #56]	; 23260 <prvInitialiseTaskLists+0xb4>
   23224:	ebfff6ca 	bl	20d54 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   23228:	e59f3034 	ldr	r3, [pc, #52]	; 23264 <prvInitialiseTaskLists+0xb8>
   2322c:	e59f201c 	ldr	r2, [pc, #28]	; 23250 <prvInitialiseTaskLists+0xa4>
   23230:	e5832000 	str	r2, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   23234:	e59f302c 	ldr	r3, [pc, #44]	; 23268 <prvInitialiseTaskLists+0xbc>
   23238:	e59f2014 	ldr	r2, [pc, #20]	; 23254 <prvInitialiseTaskLists+0xa8>
   2323c:	e5832000 	str	r2, [r3]
}
   23240:	e320f000 	nop	{0}
   23244:	e24bd004 	sub	sp, fp, #4
   23248:	e8bd8800 	pop	{fp, pc}
   2324c:	0002bf78 	andeq	fp, r2, r8, ror pc
   23250:	0002bfdc 	ldrdeq	fp, [r2], -ip
   23254:	0002bff0 	strdeq	fp, [r2], -r0
   23258:	0002c00c 	andeq	ip, r2, ip
   2325c:	0002c020 	andeq	ip, r2, r0, lsr #32
   23260:	0002c038 	andeq	ip, r2, r8, lsr r0
   23264:	0002c004 	andeq	ip, r2, r4
   23268:	0002c008 	andeq	ip, r2, r8

0002326c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   2326c:	e92d4800 	push	{fp, lr}
   23270:	e28db004 	add	fp, sp, #4
   23274:	e24dd008 	sub	sp, sp, #8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   23278:	e59f309c 	ldr	r3, [pc, #156]	; 2331c <prvCheckTasksWaitingTermination+0xb0>
   2327c:	e5933000 	ldr	r3, [r3]
   23280:	e3530000 	cmp	r3, #0
   23284:	0a000021 	beq	23310 <prvCheckTasksWaitingTermination+0xa4>
		{
			vTaskSuspendAll();
   23288:	ebfffd16 	bl	226e8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   2328c:	e59f308c 	ldr	r3, [pc, #140]	; 23320 <prvCheckTasksWaitingTermination+0xb4>
   23290:	e5933000 	ldr	r3, [r3]
   23294:	e3530000 	cmp	r3, #0
   23298:	03a03001 	moveq	r3, #1
   2329c:	13a03000 	movne	r3, #0
   232a0:	e6ef3073 	uxtb	r3, r3
   232a4:	e50b3008 	str	r3, [fp, #-8]
			xTaskResumeAll();
   232a8:	ebfffd1a 	bl	22718 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
   232ac:	e51b3008 	ldr	r3, [fp, #-8]
   232b0:	e3530000 	cmp	r3, #0
   232b4:	1a000015 	bne	23310 <prvCheckTasksWaitingTermination+0xa4>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   232b8:	ebfff4a0 	bl	20540 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   232bc:	e59f305c 	ldr	r3, [pc, #92]	; 23320 <prvCheckTasksWaitingTermination+0xb4>
   232c0:	e593300c 	ldr	r3, [r3, #12]
   232c4:	e593300c 	ldr	r3, [r3, #12]
   232c8:	e50b300c 	str	r3, [fp, #-12]
					vListRemove( &( pxTCB->xGenericListItem ) );
   232cc:	e51b300c 	ldr	r3, [fp, #-12]
   232d0:	e2833004 	add	r3, r3, #4
   232d4:	e1a00003 	mov	r0, r3
   232d8:	ebfff71e 	bl	20f58 <vListRemove>
					--uxCurrentNumberOfTasks;
   232dc:	e59f3040 	ldr	r3, [pc, #64]	; 23324 <prvCheckTasksWaitingTermination+0xb8>
   232e0:	e5933000 	ldr	r3, [r3]
   232e4:	e2433001 	sub	r3, r3, #1
   232e8:	e59f2034 	ldr	r2, [pc, #52]	; 23324 <prvCheckTasksWaitingTermination+0xb8>
   232ec:	e5823000 	str	r3, [r2]
					--uxTasksDeleted;
   232f0:	e59f3024 	ldr	r3, [pc, #36]	; 2331c <prvCheckTasksWaitingTermination+0xb0>
   232f4:	e5933000 	ldr	r3, [r3]
   232f8:	e2433001 	sub	r3, r3, #1
   232fc:	e59f2018 	ldr	r2, [pc, #24]	; 2331c <prvCheckTasksWaitingTermination+0xb0>
   23300:	e5823000 	str	r3, [r2]
				}
				taskEXIT_CRITICAL();
   23304:	ebfff49e 	bl	20584 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
   23308:	e51b000c 	ldr	r0, [fp, #-12]
   2330c:	eb00005f 	bl	23490 <prvDeleteTCB>
			}
		}
	}
	#endif
}
   23310:	e320f000 	nop	{0}
   23314:	e24bd004 	sub	sp, fp, #4
   23318:	e8bd8800 	pop	{fp, pc}
   2331c:	0002c034 	andeq	ip, r2, r4, lsr r0
   23320:	0002c020 	andeq	ip, r2, r0, lsr #32
   23324:	0002c04c 	andeq	ip, r2, ip, asr #32

00023328 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   23328:	e92d4800 	push	{fp, lr}
   2332c:	e28db004 	add	fp, sp, #4
   23330:	e24dd008 	sub	sp, sp, #8
   23334:	e50b0008 	str	r0, [fp, #-8]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   23338:	e59f308c 	ldr	r3, [pc, #140]	; 233cc <prvAddCurrentTaskToDelayedList+0xa4>
   2333c:	e5933000 	ldr	r3, [r3]
   23340:	e51b2008 	ldr	r2, [fp, #-8]
   23344:	e5832004 	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   23348:	e59f3080 	ldr	r3, [pc, #128]	; 233d0 <prvAddCurrentTaskToDelayedList+0xa8>
   2334c:	e5933000 	ldr	r3, [r3]
   23350:	e51b2008 	ldr	r2, [fp, #-8]
   23354:	e1520003 	cmp	r2, r3
   23358:	2a000008 	bcs	23380 <prvAddCurrentTaskToDelayedList+0x58>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   2335c:	e59f3070 	ldr	r3, [pc, #112]	; 233d4 <prvAddCurrentTaskToDelayedList+0xac>
   23360:	e5932000 	ldr	r2, [r3]
   23364:	e59f3060 	ldr	r3, [pc, #96]	; 233cc <prvAddCurrentTaskToDelayedList+0xa4>
   23368:	e5933000 	ldr	r3, [r3]
   2336c:	e2833004 	add	r3, r3, #4
   23370:	e1a01003 	mov	r1, r3
   23374:	e1a00002 	mov	r0, r2
   23378:	ebfff6c0 	bl	20e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
		{
			xNextTaskUnblockTime = xTimeToWake;
		}
	}
}
   2337c:	ea00000f 	b	233c0 <prvAddCurrentTaskToDelayedList+0x98>
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   23380:	e59f3050 	ldr	r3, [pc, #80]	; 233d8 <prvAddCurrentTaskToDelayedList+0xb0>
   23384:	e5932000 	ldr	r2, [r3]
   23388:	e59f303c 	ldr	r3, [pc, #60]	; 233cc <prvAddCurrentTaskToDelayedList+0xa4>
   2338c:	e5933000 	ldr	r3, [r3]
   23390:	e2833004 	add	r3, r3, #4
   23394:	e1a01003 	mov	r1, r3
   23398:	e1a00002 	mov	r0, r2
   2339c:	ebfff6b7 	bl	20e80 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
   233a0:	e59f3034 	ldr	r3, [pc, #52]	; 233dc <prvAddCurrentTaskToDelayedList+0xb4>
   233a4:	e5933000 	ldr	r3, [r3]
   233a8:	e51b2008 	ldr	r2, [fp, #-8]
   233ac:	e1520003 	cmp	r2, r3
   233b0:	2a000002 	bcs	233c0 <prvAddCurrentTaskToDelayedList+0x98>
			xNextTaskUnblockTime = xTimeToWake;
   233b4:	e59f2020 	ldr	r2, [pc, #32]	; 233dc <prvAddCurrentTaskToDelayedList+0xb4>
   233b8:	e51b3008 	ldr	r3, [fp, #-8]
   233bc:	e5823000 	str	r3, [r2]
}
   233c0:	e320f000 	nop	{0}
   233c4:	e24bd004 	sub	sp, fp, #4
   233c8:	e8bd8800 	pop	{fp, pc}
   233cc:	0002bf74 	andeq	fp, r2, r4, ror pc
   233d0:	0002c050 	andeq	ip, r2, r0, asr r0
   233d4:	0002c008 	andeq	ip, r2, r8
   233d8:	0002c004 	andeq	ip, r2, r4
   233dc:	0002bee4 	andeq	fp, r2, r4, ror #29

000233e0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
   233e0:	e92d4800 	push	{fp, lr}
   233e4:	e28db004 	add	fp, sp, #4
   233e8:	e24dd010 	sub	sp, sp, #16
   233ec:	e1a03000 	mov	r3, r0
   233f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   233f4:	e14b30be 	strh	r3, [fp, #-14]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   233f8:	e3a00048 	mov	r0, #72	; 0x48
   233fc:	eb00028f 	bl	23e40 <pvPortMalloc>
   23400:	e50b0008 	str	r0, [fp, #-8]

	if( pxNewTCB != NULL )
   23404:	e51b3008 	ldr	r3, [fp, #-8]
   23408:	e3530000 	cmp	r3, #0
   2340c:	0a00001b 	beq	23480 <prvAllocateTCBAndStack+0xa0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   23410:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23414:	e3530000 	cmp	r3, #0
   23418:	1a000005 	bne	23434 <prvAllocateTCBAndStack+0x54>
   2341c:	e15b30be 	ldrh	r3, [fp, #-14]
   23420:	e1a03103 	lsl	r3, r3, #2
   23424:	e1a00003 	mov	r0, r3
   23428:	eb000284 	bl	23e40 <pvPortMalloc>
   2342c:	e1a03000 	mov	r3, r0
   23430:	ea000000 	b	23438 <prvAllocateTCBAndStack+0x58>
   23434:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23438:	e51b2008 	ldr	r2, [fp, #-8]
   2343c:	e5823030 	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   23440:	e51b3008 	ldr	r3, [fp, #-8]
   23444:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   23448:	e3530000 	cmp	r3, #0
   2344c:	1a000004 	bne	23464 <prvAllocateTCBAndStack+0x84>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   23450:	e51b0008 	ldr	r0, [fp, #-8]
   23454:	eb0002eb 	bl	24008 <vPortFree>
			pxNewTCB = NULL;
   23458:	e3a03000 	mov	r3, #0
   2345c:	e50b3008 	str	r3, [fp, #-8]
   23460:	ea000006 	b	23480 <prvAllocateTCBAndStack+0xa0>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   23464:	e51b3008 	ldr	r3, [fp, #-8]
   23468:	e5930030 	ldr	r0, [r3, #48]	; 0x30
   2346c:	e15b30be 	ldrh	r3, [fp, #-14]
   23470:	e1a03103 	lsl	r3, r3, #2
   23474:	e1a02003 	mov	r2, r3
   23478:	e3a010a5 	mov	r1, #165	; 0xa5
   2347c:	eb001ff8 	bl	2b464 <memset>
	pxNewTCB->pTraceEvent 		= NULL;
	pxNewTCB->pTraceEventMin 	= NULL;
	pxNewTCB->pTraceEventMax 	= NULL;
#endif

	return pxNewTCB;
   23480:	e51b3008 	ldr	r3, [fp, #-8]
}
   23484:	e1a00003 	mov	r0, r3
   23488:	e24bd004 	sub	sp, fp, #4
   2348c:	e8bd8800 	pop	{fp, pc}

00023490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
   23490:	e92d4800 	push	{fp, lr}
   23494:	e28db004 	add	fp, sp, #4
   23498:	e24dd008 	sub	sp, sp, #8
   2349c:	e50b0008 	str	r0, [fp, #-8]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   234a0:	e51b3008 	ldr	r3, [fp, #-8]
   234a4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
   234a8:	e1a00003 	mov	r0, r3
   234ac:	eb0002d5 	bl	24008 <vPortFree>
		vPortFree( pxTCB );
   234b0:	e51b0008 	ldr	r0, [fp, #-8]
   234b4:	eb0002d3 	bl	24008 <vPortFree>
	}
   234b8:	e320f000 	nop	{0}
   234bc:	e24bd004 	sub	sp, fp, #4
   234c0:	e8bd8800 	pop	{fp, pc}

000234c4 <handleRange>:

// Remember which interrupts have been enabled:
static unsigned long enabled[3];

static void handleRange (unsigned long pending, const unsigned int base)
{
   234c4:	e92d4800 	push	{fp, lr}
   234c8:	e28db004 	add	fp, sp, #4
   234cc:	e24dd010 	sub	sp, sp, #16
   234d0:	e50b0010 	str	r0, [fp, #-16]
   234d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	while (pending)
   234d8:	ea00001e 	b	23558 <handleRange+0x94>
	{
		// Get index of first set bit:
		unsigned int bit = 31 - __builtin_clz(pending);
   234dc:	e51b3010 	ldr	r3, [fp, #-16]
   234e0:	e16f3f13 	clz	r3, r3
   234e4:	e263301f 	rsb	r3, r3, #31
   234e8:	e50b3008 	str	r3, [fp, #-8]

		// Map to IRQ number:
		unsigned int irq = base + bit;
   234ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   234f0:	e51b3008 	ldr	r3, [fp, #-8]
   234f4:	e0823003 	add	r3, r2, r3
   234f8:	e50b300c 	str	r3, [fp, #-12]

		// Call interrupt handler, if enabled:
		if (g_VectorTable[irq].pfnHandler)
   234fc:	e59f2070 	ldr	r2, [pc, #112]	; 23574 <handleRange+0xb0>
   23500:	e51b300c 	ldr	r3, [fp, #-12]
   23504:	e7923183 	ldr	r3, [r2, r3, lsl #3]
   23508:	e3530000 	cmp	r3, #0
   2350c:	0a00000a 	beq	2353c <handleRange+0x78>
			g_VectorTable[irq].pfnHandler(irq, g_VectorTable[irq].pParam);
   23510:	e59f205c 	ldr	r2, [pc, #92]	; 23574 <handleRange+0xb0>
   23514:	e51b300c 	ldr	r3, [fp, #-12]
   23518:	e7922183 	ldr	r2, [r2, r3, lsl #3]
   2351c:	e59f1050 	ldr	r1, [pc, #80]	; 23574 <handleRange+0xb0>
   23520:	e51b300c 	ldr	r3, [fp, #-12]
   23524:	e1a03183 	lsl	r3, r3, #3
   23528:	e0813003 	add	r3, r1, r3
   2352c:	e5933004 	ldr	r3, [r3, #4]
   23530:	e1a01003 	mov	r1, r3
   23534:	e51b000c 	ldr	r0, [fp, #-12]
   23538:	e12fff32 	blx	r2

		// Clear bit in bitfield:
		pending &= ~(1UL << bit);
   2353c:	e3a02001 	mov	r2, #1
   23540:	e51b3008 	ldr	r3, [fp, #-8]
   23544:	e1a03312 	lsl	r3, r2, r3
   23548:	e1e03003 	mvn	r3, r3
   2354c:	e51b2010 	ldr	r2, [fp, #-16]
   23550:	e0033002 	and	r3, r3, r2
   23554:	e50b3010 	str	r3, [fp, #-16]
	while (pending)
   23558:	e51b3010 	ldr	r3, [fp, #-16]
   2355c:	e3530000 	cmp	r3, #0
   23560:	1affffdd 	bne	234dc <handleRange+0x18>
	}
}
   23564:	e320f000 	nop	{0}
   23568:	e320f000 	nop	{0}
   2356c:	e24bd004 	sub	sp, fp, #4
   23570:	e8bd8800 	pop	{fp, pc}
   23574:	0002c074 	andeq	ip, r2, r4, ror r0

00023578 <irqHandler>:
 *	This is the global IRQ handler on this platform!
 *	It is based on the assembler code found in the Broadcom datasheet.
 *
 **/
void irqHandler (void)
{
   23578:	e92d4830 	push	{r4, r5, fp, lr}
   2357c:	e28db00c 	add	fp, sp, #12
	register unsigned long ulMaskedStatus = pRegs->IRQBasic;
   23580:	e59f3088 	ldr	r3, [pc, #136]	; 23610 <irqHandler+0x98>
   23584:	e5934000 	ldr	r4, [r3]

	// Bit 8 in IRQBasic indicates interrupts in Pending1 (interrupts 31-0):
	if (ulMaskedStatus & (1UL << 8))
   23588:	e2043c01 	and	r3, r4, #256	; 0x100
   2358c:	e3530000 	cmp	r3, #0
   23590:	0a000007 	beq	235b4 <irqHandler+0x3c>
		handleRange(pRegs->Pending1 & enabled[0], 0);
   23594:	e59f3074 	ldr	r3, [pc, #116]	; 23610 <irqHandler+0x98>
   23598:	e5932004 	ldr	r2, [r3, #4]
   2359c:	e59f3070 	ldr	r3, [pc, #112]	; 23614 <irqHandler+0x9c>
   235a0:	e5933000 	ldr	r3, [r3]
   235a4:	e0033002 	and	r3, r3, r2
   235a8:	e3a01000 	mov	r1, #0
   235ac:	e1a00003 	mov	r0, r3
   235b0:	ebffffc3 	bl	234c4 <handleRange>

	// Bit 9 in IRQBasic indicates interrupts in Pending2 (interrupts 63-32):
	if (ulMaskedStatus & (1UL << 9))
   235b4:	e2043c02 	and	r3, r4, #512	; 0x200
   235b8:	e3530000 	cmp	r3, #0
   235bc:	0a000007 	beq	235e0 <irqHandler+0x68>
		handleRange(pRegs->Pending2 & enabled[1], 32);
   235c0:	e59f3048 	ldr	r3, [pc, #72]	; 23610 <irqHandler+0x98>
   235c4:	e5932008 	ldr	r2, [r3, #8]
   235c8:	e59f3044 	ldr	r3, [pc, #68]	; 23614 <irqHandler+0x9c>
   235cc:	e5933004 	ldr	r3, [r3, #4]
   235d0:	e0033002 	and	r3, r3, r2
   235d4:	e3a01020 	mov	r1, #32
   235d8:	e1a00003 	mov	r0, r3
   235dc:	ebffffb8 	bl	234c4 <handleRange>

	// Bits 7 through 0 in IRQBasic represent interrupts 64-71:
	if (ulMaskedStatus & 0xFF)
   235e0:	e6ef3074 	uxtb	r3, r4
   235e4:	e3530000 	cmp	r3, #0
   235e8:	0a000006 	beq	23608 <irqHandler+0x90>
		handleRange(ulMaskedStatus & 0xFF & enabled[2], 64);
   235ec:	e59f3020 	ldr	r3, [pc, #32]	; 23614 <irqHandler+0x9c>
   235f0:	e5933008 	ldr	r3, [r3, #8]
   235f4:	e0033004 	and	r3, r3, r4
   235f8:	e6ef3073 	uxtb	r3, r3
   235fc:	e3a01040 	mov	r1, #64	; 0x40
   23600:	e1a00003 	mov	r0, r3
   23604:	ebffffae 	bl	234c4 <handleRange>
}
   23608:	e320f000 	nop	{0}
   2360c:	e8bd8830 	pop	{r4, r5, fp, pc}
   23610:	2000b200 	andcs	fp, r0, r0, lsl #4
   23614:	0002c2b4 			; <UNDEFINED> instruction: 0x0002c2b4

00023618 <irqUnblock>:

void irqUnblock (void)
{
   23618:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2361c:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsie i" ::: "memory");
   23620:	f1080080 	cpsie	i
}
   23624:	e320f000 	nop	{0}
   23628:	e28bd000 	add	sp, fp, #0
   2362c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23630:	e12fff1e 	bx	lr

00023634 <irqBlock>:

void irqBlock (void)
{
   23634:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23638:	e28db000 	add	fp, sp, #0
	asm volatile ("cpsid i" ::: "memory");
   2363c:	f10c0080 	cpsid	i
}
   23640:	e320f000 	nop	{0}
   23644:	e28bd000 	add	sp, fp, #0
   23648:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2364c:	e12fff1e 	bx	lr

00023650 <irqRegister>:

void irqRegister (const unsigned int irq, FN_INTERRUPT_HANDLER pfnHandler, void *pParam)
{
   23650:	e92d4800 	push	{fp, lr}
   23654:	e28db004 	add	fp, sp, #4
   23658:	e24dd010 	sub	sp, sp, #16
   2365c:	e50b0008 	str	r0, [fp, #-8]
   23660:	e50b100c 	str	r1, [fp, #-12]
   23664:	e50b2010 	str	r2, [fp, #-16]
	if (irq < BCM2835_INTC_TOTAL_IRQ) {
   23668:	e51b3008 	ldr	r3, [fp, #-8]
   2366c:	e3530047 	cmp	r3, #71	; 0x47
   23670:	8a00000b 	bhi	236a4 <irqRegister+0x54>
		irqBlock();
   23674:	ebffffee 	bl	23634 <irqBlock>
		g_VectorTable[irq].pfnHandler = pfnHandler;
   23678:	e59f1030 	ldr	r1, [pc, #48]	; 236b0 <irqRegister+0x60>
   2367c:	e51b3008 	ldr	r3, [fp, #-8]
   23680:	e51b200c 	ldr	r2, [fp, #-12]
   23684:	e7812183 	str	r2, [r1, r3, lsl #3]
		g_VectorTable[irq].pParam     = pParam;
   23688:	e59f2020 	ldr	r2, [pc, #32]	; 236b0 <irqRegister+0x60>
   2368c:	e51b3008 	ldr	r3, [fp, #-8]
   23690:	e1a03183 	lsl	r3, r3, #3
   23694:	e0823003 	add	r3, r2, r3
   23698:	e51b2010 	ldr	r2, [fp, #-16]
   2369c:	e5832004 	str	r2, [r3, #4]
		irqUnblock();
   236a0:	ebffffdc 	bl	23618 <irqUnblock>
	}
}
   236a4:	e320f000 	nop	{0}
   236a8:	e24bd004 	sub	sp, fp, #4
   236ac:	e8bd8800 	pop	{fp, pc}
   236b0:	0002c074 	andeq	ip, r2, r4, ror r0

000236b4 <irqEnable>:

void irqEnable (const unsigned int irq)
{
   236b4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   236b8:	e28db000 	add	fp, sp, #0
   236bc:	e24dd014 	sub	sp, sp, #20
   236c0:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   236c4:	e51b3010 	ldr	r3, [fp, #-16]
   236c8:	e203301f 	and	r3, r3, #31
   236cc:	e3a02001 	mov	r2, #1
   236d0:	e1a03312 	lsl	r3, r2, r3
   236d4:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   236d8:	e51b3010 	ldr	r3, [fp, #-16]
   236dc:	e353001f 	cmp	r3, #31
   236e0:	8a000009 	bhi	2370c <irqEnable+0x58>
		pRegs->Enable1 = mask;
   236e4:	e59f2094 	ldr	r2, [pc, #148]	; 23780 <irqEnable+0xcc>
   236e8:	e51b3008 	ldr	r3, [fp, #-8]
   236ec:	e5823010 	str	r3, [r2, #16]
		enabled[0] |= mask;
   236f0:	e59f308c 	ldr	r3, [pc, #140]	; 23784 <irqEnable+0xd0>
   236f4:	e5932000 	ldr	r2, [r3]
   236f8:	e51b3008 	ldr	r3, [fp, #-8]
   236fc:	e1823003 	orr	r3, r2, r3
   23700:	e59f207c 	ldr	r2, [pc, #124]	; 23784 <irqEnable+0xd0>
   23704:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->EnableBasic = mask;
		enabled[2] |= mask;
	}
}
   23708:	ea000018 	b	23770 <irqEnable+0xbc>
	else if (irq <= 63) {
   2370c:	e51b3010 	ldr	r3, [fp, #-16]
   23710:	e353003f 	cmp	r3, #63	; 0x3f
   23714:	8a000009 	bhi	23740 <irqEnable+0x8c>
		pRegs->Enable2 = mask;
   23718:	e59f2060 	ldr	r2, [pc, #96]	; 23780 <irqEnable+0xcc>
   2371c:	e51b3008 	ldr	r3, [fp, #-8]
   23720:	e5823014 	str	r3, [r2, #20]
		enabled[1] |= mask;
   23724:	e59f3058 	ldr	r3, [pc, #88]	; 23784 <irqEnable+0xd0>
   23728:	e5932004 	ldr	r2, [r3, #4]
   2372c:	e51b3008 	ldr	r3, [fp, #-8]
   23730:	e1823003 	orr	r3, r2, r3
   23734:	e59f2048 	ldr	r2, [pc, #72]	; 23784 <irqEnable+0xd0>
   23738:	e5823004 	str	r3, [r2, #4]
}
   2373c:	ea00000b 	b	23770 <irqEnable+0xbc>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   23740:	e51b3010 	ldr	r3, [fp, #-16]
   23744:	e3530047 	cmp	r3, #71	; 0x47
   23748:	8a000008 	bhi	23770 <irqEnable+0xbc>
		pRegs->EnableBasic = mask;
   2374c:	e59f202c 	ldr	r2, [pc, #44]	; 23780 <irqEnable+0xcc>
   23750:	e51b3008 	ldr	r3, [fp, #-8]
   23754:	e5823018 	str	r3, [r2, #24]
		enabled[2] |= mask;
   23758:	e59f3024 	ldr	r3, [pc, #36]	; 23784 <irqEnable+0xd0>
   2375c:	e5932008 	ldr	r2, [r3, #8]
   23760:	e51b3008 	ldr	r3, [fp, #-8]
   23764:	e1823003 	orr	r3, r2, r3
   23768:	e59f2014 	ldr	r2, [pc, #20]	; 23784 <irqEnable+0xd0>
   2376c:	e5823008 	str	r3, [r2, #8]
}
   23770:	e320f000 	nop	{0}
   23774:	e28bd000 	add	sp, fp, #0
   23778:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2377c:	e12fff1e 	bx	lr
   23780:	2000b200 	andcs	fp, r0, r0, lsl #4
   23784:	0002c2b4 			; <UNDEFINED> instruction: 0x0002c2b4

00023788 <irqDisable>:

void irqDisable (const unsigned int irq)
{
   23788:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2378c:	e28db000 	add	fp, sp, #0
   23790:	e24dd014 	sub	sp, sp, #20
   23794:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask = 1UL << (irq % 32);
   23798:	e51b3010 	ldr	r3, [fp, #-16]
   2379c:	e203301f 	and	r3, r3, #31
   237a0:	e3a02001 	mov	r2, #1
   237a4:	e1a03312 	lsl	r3, r2, r3
   237a8:	e50b3008 	str	r3, [fp, #-8]

	if (irq <= 31) {
   237ac:	e51b3010 	ldr	r3, [fp, #-16]
   237b0:	e353001f 	cmp	r3, #31
   237b4:	8a00000a 	bhi	237e4 <irqDisable+0x5c>
		pRegs->Disable1 = mask;
   237b8:	e59f20a0 	ldr	r2, [pc, #160]	; 23860 <irqDisable+0xd8>
   237bc:	e51b3008 	ldr	r3, [fp, #-8]
   237c0:	e582301c 	str	r3, [r2, #28]
		enabled[0] &= ~mask;
   237c4:	e59f3098 	ldr	r3, [pc, #152]	; 23864 <irqDisable+0xdc>
   237c8:	e5932000 	ldr	r2, [r3]
   237cc:	e51b3008 	ldr	r3, [fp, #-8]
   237d0:	e1e03003 	mvn	r3, r3
   237d4:	e0033002 	and	r3, r3, r2
   237d8:	e59f2084 	ldr	r2, [pc, #132]	; 23864 <irqDisable+0xdc>
   237dc:	e5823000 	str	r3, [r2]
	}
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
		pRegs->DisableBasic = mask;
		enabled[2] &= ~mask;
	}
}
   237e0:	ea00001a 	b	23850 <irqDisable+0xc8>
	else if (irq <= 63) {
   237e4:	e51b3010 	ldr	r3, [fp, #-16]
   237e8:	e353003f 	cmp	r3, #63	; 0x3f
   237ec:	8a00000a 	bhi	2381c <irqDisable+0x94>
		pRegs->Disable2 = mask;
   237f0:	e59f2068 	ldr	r2, [pc, #104]	; 23860 <irqDisable+0xd8>
   237f4:	e51b3008 	ldr	r3, [fp, #-8]
   237f8:	e5823020 	str	r3, [r2, #32]
		enabled[1] &= ~mask;
   237fc:	e59f3060 	ldr	r3, [pc, #96]	; 23864 <irqDisable+0xdc>
   23800:	e5932004 	ldr	r2, [r3, #4]
   23804:	e51b3008 	ldr	r3, [fp, #-8]
   23808:	e1e03003 	mvn	r3, r3
   2380c:	e0033002 	and	r3, r3, r2
   23810:	e59f204c 	ldr	r2, [pc, #76]	; 23864 <irqDisable+0xdc>
   23814:	e5823004 	str	r3, [r2, #4]
}
   23818:	ea00000c 	b	23850 <irqDisable+0xc8>
	else if (irq < BCM2835_INTC_TOTAL_IRQ) {
   2381c:	e51b3010 	ldr	r3, [fp, #-16]
   23820:	e3530047 	cmp	r3, #71	; 0x47
   23824:	8a000009 	bhi	23850 <irqDisable+0xc8>
		pRegs->DisableBasic = mask;
   23828:	e59f2030 	ldr	r2, [pc, #48]	; 23860 <irqDisable+0xd8>
   2382c:	e51b3008 	ldr	r3, [fp, #-8]
   23830:	e5823024 	str	r3, [r2, #36]	; 0x24
		enabled[2] &= ~mask;
   23834:	e59f3028 	ldr	r3, [pc, #40]	; 23864 <irqDisable+0xdc>
   23838:	e5932008 	ldr	r2, [r3, #8]
   2383c:	e51b3008 	ldr	r3, [fp, #-8]
   23840:	e1e03003 	mvn	r3, r3
   23844:	e0033002 	and	r3, r3, r2
   23848:	e59f2014 	ldr	r2, [pc, #20]	; 23864 <irqDisable+0xdc>
   2384c:	e5823008 	str	r3, [r2, #8]
}
   23850:	e320f000 	nop	{0}
   23854:	e28bd000 	add	sp, fp, #0
   23858:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2385c:	e12fff1e 	bx	lr
   23860:	2000b200 	andcs	fp, r0, r0, lsl #4
   23864:	0002c2b4 			; <UNDEFINED> instruction: 0x0002c2b4

00023868 <SetGpioFunction>:
} BCM2835_GPIO_REGS;

volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);


void SetGpioFunction(unsigned int pinNum, unsigned int funcNum) {
   23868:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2386c:	e28db000 	add	fp, sp, #0
   23870:	e24dd01c 	sub	sp, sp, #28
   23874:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   23878:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4

	int offset = pinNum / 10;
   2387c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23880:	e59f20b4 	ldr	r2, [pc, #180]	; 2393c <SetGpioFunction+0xd4>
   23884:	e0832392 	umull	r2, r3, r2, r3
   23888:	e1a031a3 	lsr	r3, r3, #3
   2388c:	e50b3008 	str	r3, [fp, #-8]

	unsigned long val = pRegs->GPFSEL[offset];	// Read in the original register value.
   23890:	e59f20a8 	ldr	r2, [pc, #168]	; 23940 <SetGpioFunction+0xd8>
   23894:	e51b3008 	ldr	r3, [fp, #-8]
   23898:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   2389c:	e50b300c 	str	r3, [fp, #-12]

	int item = pinNum % 10;
   238a0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   238a4:	e59f3090 	ldr	r3, [pc, #144]	; 2393c <SetGpioFunction+0xd4>
   238a8:	e0832193 	umull	r2, r3, r3, r1
   238ac:	e1a021a3 	lsr	r2, r3, #3
   238b0:	e1a03002 	mov	r3, r2
   238b4:	e1a03103 	lsl	r3, r3, #2
   238b8:	e0833002 	add	r3, r3, r2
   238bc:	e1a03083 	lsl	r3, r3, #1
   238c0:	e0412003 	sub	r2, r1, r3
   238c4:	e50b2010 	str	r2, [fp, #-16]
	val &= ~(0x7 << (item * 3));
   238c8:	e51b2010 	ldr	r2, [fp, #-16]
   238cc:	e1a03002 	mov	r3, r2
   238d0:	e1a03083 	lsl	r3, r3, #1
   238d4:	e0833002 	add	r3, r3, r2
   238d8:	e3a02007 	mov	r2, #7
   238dc:	e1a03312 	lsl	r3, r2, r3
   238e0:	e1e03003 	mvn	r3, r3
   238e4:	e1a02003 	mov	r2, r3
   238e8:	e51b300c 	ldr	r3, [fp, #-12]
   238ec:	e0033002 	and	r3, r3, r2
   238f0:	e50b300c 	str	r3, [fp, #-12]
	val |= ((funcNum & 0x7) << (item * 3));
   238f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   238f8:	e2031007 	and	r1, r3, #7
   238fc:	e51b2010 	ldr	r2, [fp, #-16]
   23900:	e1a03002 	mov	r3, r2
   23904:	e1a03083 	lsl	r3, r3, #1
   23908:	e0833002 	add	r3, r3, r2
   2390c:	e1a03311 	lsl	r3, r1, r3
   23910:	e51b200c 	ldr	r2, [fp, #-12]
   23914:	e1823003 	orr	r3, r2, r3
   23918:	e50b300c 	str	r3, [fp, #-12]
	pRegs->GPFSEL[offset] = val;
   2391c:	e59f101c 	ldr	r1, [pc, #28]	; 23940 <SetGpioFunction+0xd8>
   23920:	e51b3008 	ldr	r3, [fp, #-8]
   23924:	e51b200c 	ldr	r2, [fp, #-12]
   23928:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   2392c:	e320f000 	nop	{0}
   23930:	e28bd000 	add	sp, fp, #0
   23934:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23938:	e12fff1e 	bx	lr
   2393c:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd
   23940:	20200000 	eorcs	r0, r0, r0

00023944 <SetGpioDirection>:

void SetGpioDirection(unsigned int pinNum, enum GPIO_DIR dir) {
   23944:	e92d4800 	push	{fp, lr}
   23948:	e28db004 	add	fp, sp, #4
   2394c:	e24dd008 	sub	sp, sp, #8
   23950:	e50b0008 	str	r0, [fp, #-8]
   23954:	e1a03001 	mov	r3, r1
   23958:	e54b3009 	strb	r3, [fp, #-9]
	SetGpioFunction(pinNum,dir);
   2395c:	e55b3009 	ldrb	r3, [fp, #-9]
   23960:	e1a01003 	mov	r1, r3
   23964:	e51b0008 	ldr	r0, [fp, #-8]
   23968:	ebffffbe 	bl	23868 <SetGpioFunction>
}
   2396c:	e320f000 	nop	{0}
   23970:	e24bd004 	sub	sp, fp, #4
   23974:	e8bd8800 	pop	{fp, pc}

00023978 <SetGpio>:

void SetGpio(unsigned int pinNum, unsigned int pinVal) {
   23978:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2397c:	e28db000 	add	fp, sp, #0
   23980:	e24dd014 	sub	sp, sp, #20
   23984:	e50b0010 	str	r0, [fp, #-16]
   23988:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	unsigned long offset=pinNum/32;
   2398c:	e51b3010 	ldr	r3, [fp, #-16]
   23990:	e1a032a3 	lsr	r3, r3, #5
   23994:	e50b3008 	str	r3, [fp, #-8]
	unsigned long mask=(1<<(pinNum%32));
   23998:	e51b3010 	ldr	r3, [fp, #-16]
   2399c:	e203301f 	and	r3, r3, #31
   239a0:	e3a02001 	mov	r2, #1
   239a4:	e1a03312 	lsl	r3, r2, r3
   239a8:	e50b300c 	str	r3, [fp, #-12]

	if(pinVal) {
   239ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   239b0:	e3530000 	cmp	r3, #0
   239b4:	0a00000e 	beq	239f4 <SetGpio+0x7c>
		pRegs->GPSET[offset]|=mask;
   239b8:	e59f206c 	ldr	r2, [pc, #108]	; 23a2c <SetGpio+0xb4>
   239bc:	e51b3008 	ldr	r3, [fp, #-8]
   239c0:	e2833006 	add	r3, r3, #6
   239c4:	e1a03103 	lsl	r3, r3, #2
   239c8:	e0823003 	add	r3, r2, r3
   239cc:	e5932004 	ldr	r2, [r3, #4]
   239d0:	e59f1054 	ldr	r1, [pc, #84]	; 23a2c <SetGpio+0xb4>
   239d4:	e51b300c 	ldr	r3, [fp, #-12]
   239d8:	e1822003 	orr	r2, r2, r3
   239dc:	e51b3008 	ldr	r3, [fp, #-8]
   239e0:	e2833006 	add	r3, r3, #6
   239e4:	e1a03103 	lsl	r3, r3, #2
   239e8:	e0813003 	add	r3, r1, r3
   239ec:	e5832004 	str	r2, [r3, #4]
	} else {
		pRegs->GPCLR[offset]|=mask;
	}
}
   239f0:	ea000009 	b	23a1c <SetGpio+0xa4>
		pRegs->GPCLR[offset]|=mask;
   239f4:	e59f2030 	ldr	r2, [pc, #48]	; 23a2c <SetGpio+0xb4>
   239f8:	e51b3008 	ldr	r3, [fp, #-8]
   239fc:	e283300a 	add	r3, r3, #10
   23a00:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23a04:	e59f1020 	ldr	r1, [pc, #32]	; 23a2c <SetGpio+0xb4>
   23a08:	e51b300c 	ldr	r3, [fp, #-12]
   23a0c:	e1822003 	orr	r2, r2, r3
   23a10:	e51b3008 	ldr	r3, [fp, #-8]
   23a14:	e283300a 	add	r3, r3, #10
   23a18:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   23a1c:	e320f000 	nop	{0}
   23a20:	e28bd000 	add	sp, fp, #0
   23a24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23a28:	e12fff1e 	bx	lr
   23a2c:	20200000 	eorcs	r0, r0, r0

00023a30 <ReadGpio>:

int ReadGpio(unsigned int pinNum) {
   23a30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23a34:	e28db000 	add	fp, sp, #0
   23a38:	e24dd00c 	sub	sp, sp, #12
   23a3c:	e50b0008 	str	r0, [fp, #-8]
	return ((pRegs->GPLEV[pinNum/32])>>(pinNum%32))&1;
   23a40:	e59f2034 	ldr	r2, [pc, #52]	; 23a7c <ReadGpio+0x4c>
   23a44:	e51b3008 	ldr	r3, [fp, #-8]
   23a48:	e1a032a3 	lsr	r3, r3, #5
   23a4c:	e283300c 	add	r3, r3, #12
   23a50:	e1a03103 	lsl	r3, r3, #2
   23a54:	e0823003 	add	r3, r2, r3
   23a58:	e5932004 	ldr	r2, [r3, #4]
   23a5c:	e51b3008 	ldr	r3, [fp, #-8]
   23a60:	e203301f 	and	r3, r3, #31
   23a64:	e1a03332 	lsr	r3, r2, r3
   23a68:	e2033001 	and	r3, r3, #1
}
   23a6c:	e1a00003 	mov	r0, r3
   23a70:	e28bd000 	add	sp, fp, #0
   23a74:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23a78:	e12fff1e 	bx	lr
   23a7c:	20200000 	eorcs	r0, r0, r0

00023a80 <EnableGpioDetect>:

void EnableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   23a80:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23a84:	e28db000 	add	fp, sp, #0
   23a88:	e24dd014 	sub	sp, sp, #20
   23a8c:	e50b0010 	str	r0, [fp, #-16]
   23a90:	e1a03001 	mov	r3, r1
   23a94:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=(1<<pinNum);
   23a98:	e3a02001 	mov	r2, #1
   23a9c:	e51b3010 	ldr	r3, [fp, #-16]
   23aa0:	e1a03312 	lsl	r3, r2, r3
   23aa4:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23aa8:	e51b3010 	ldr	r3, [fp, #-16]
   23aac:	e1a032a3 	lsr	r3, r3, #5
   23ab0:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   23ab4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   23ab8:	e3530006 	cmp	r3, #6
   23abc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   23ac0:	ea000055 	b	23c1c <EnableGpioDetect+0x19c>
   23ac4:	00023c18 	andeq	r3, r2, r8, lsl ip
   23ac8:	00023ae0 	andeq	r3, r2, r0, ror #21
   23acc:	00023b1c 	andeq	r3, r2, ip, lsl fp
   23ad0:	00023b48 	andeq	r3, r2, r8, asr #22
   23ad4:	00023b84 	andeq	r3, r2, r4, lsl #23
   23ad8:	00023bb0 			; <UNDEFINED> instruction: 0x00023bb0
   23adc:	00023bec 	andeq	r3, r2, ip, ror #23
	case DETECT_RISING:
		pRegs->GPREN[offset]|=mask;
   23ae0:	e59f2144 	ldr	r2, [pc, #324]	; 23c2c <EnableGpioDetect+0x1ac>
   23ae4:	e51b300c 	ldr	r3, [fp, #-12]
   23ae8:	e2833012 	add	r3, r3, #18
   23aec:	e1a03103 	lsl	r3, r3, #2
   23af0:	e0823003 	add	r3, r2, r3
   23af4:	e5932004 	ldr	r2, [r3, #4]
   23af8:	e59f112c 	ldr	r1, [pc, #300]	; 23c2c <EnableGpioDetect+0x1ac>
   23afc:	e51b3008 	ldr	r3, [fp, #-8]
   23b00:	e1822003 	orr	r2, r2, r3
   23b04:	e51b300c 	ldr	r3, [fp, #-12]
   23b08:	e2833012 	add	r3, r3, #18
   23b0c:	e1a03103 	lsl	r3, r3, #2
   23b10:	e0813003 	add	r3, r1, r3
   23b14:	e5832004 	str	r2, [r3, #4]
		break;
   23b18:	ea00003f 	b	23c1c <EnableGpioDetect+0x19c>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]|=mask;
   23b1c:	e59f2108 	ldr	r2, [pc, #264]	; 23c2c <EnableGpioDetect+0x1ac>
   23b20:	e51b300c 	ldr	r3, [fp, #-12]
   23b24:	e2833016 	add	r3, r3, #22
   23b28:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b2c:	e59f10f8 	ldr	r1, [pc, #248]	; 23c2c <EnableGpioDetect+0x1ac>
   23b30:	e51b3008 	ldr	r3, [fp, #-8]
   23b34:	e1822003 	orr	r2, r2, r3
   23b38:	e51b300c 	ldr	r3, [fp, #-12]
   23b3c:	e2833016 	add	r3, r3, #22
   23b40:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23b44:	ea000034 	b	23c1c <EnableGpioDetect+0x19c>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]|=mask;
   23b48:	e59f20dc 	ldr	r2, [pc, #220]	; 23c2c <EnableGpioDetect+0x1ac>
   23b4c:	e51b300c 	ldr	r3, [fp, #-12]
   23b50:	e2833018 	add	r3, r3, #24
   23b54:	e1a03103 	lsl	r3, r3, #2
   23b58:	e0823003 	add	r3, r2, r3
   23b5c:	e5932004 	ldr	r2, [r3, #4]
   23b60:	e59f10c4 	ldr	r1, [pc, #196]	; 23c2c <EnableGpioDetect+0x1ac>
   23b64:	e51b3008 	ldr	r3, [fp, #-8]
   23b68:	e1822003 	orr	r2, r2, r3
   23b6c:	e51b300c 	ldr	r3, [fp, #-12]
   23b70:	e2833018 	add	r3, r3, #24
   23b74:	e1a03103 	lsl	r3, r3, #2
   23b78:	e0813003 	add	r3, r1, r3
   23b7c:	e5832004 	str	r2, [r3, #4]
		break;
   23b80:	ea000025 	b	23c1c <EnableGpioDetect+0x19c>
	case DETECT_LOW:
		pRegs->GPLEN[offset]|=mask;
   23b84:	e59f20a0 	ldr	r2, [pc, #160]	; 23c2c <EnableGpioDetect+0x1ac>
   23b88:	e51b300c 	ldr	r3, [fp, #-12]
   23b8c:	e283301c 	add	r3, r3, #28
   23b90:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23b94:	e59f1090 	ldr	r1, [pc, #144]	; 23c2c <EnableGpioDetect+0x1ac>
   23b98:	e51b3008 	ldr	r3, [fp, #-8]
   23b9c:	e1822003 	orr	r2, r2, r3
   23ba0:	e51b300c 	ldr	r3, [fp, #-12]
   23ba4:	e283301c 	add	r3, r3, #28
   23ba8:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23bac:	ea00001a 	b	23c1c <EnableGpioDetect+0x19c>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]|=mask;
   23bb0:	e59f2074 	ldr	r2, [pc, #116]	; 23c2c <EnableGpioDetect+0x1ac>
   23bb4:	e51b300c 	ldr	r3, [fp, #-12]
   23bb8:	e283301e 	add	r3, r3, #30
   23bbc:	e1a03103 	lsl	r3, r3, #2
   23bc0:	e0823003 	add	r3, r2, r3
   23bc4:	e5932004 	ldr	r2, [r3, #4]
   23bc8:	e59f105c 	ldr	r1, [pc, #92]	; 23c2c <EnableGpioDetect+0x1ac>
   23bcc:	e51b3008 	ldr	r3, [fp, #-8]
   23bd0:	e1822003 	orr	r2, r2, r3
   23bd4:	e51b300c 	ldr	r3, [fp, #-12]
   23bd8:	e283301e 	add	r3, r3, #30
   23bdc:	e1a03103 	lsl	r3, r3, #2
   23be0:	e0813003 	add	r3, r1, r3
   23be4:	e5832004 	str	r2, [r3, #4]
		break;
   23be8:	ea00000b 	b	23c1c <EnableGpioDetect+0x19c>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]|=mask;
   23bec:	e59f2038 	ldr	r2, [pc, #56]	; 23c2c <EnableGpioDetect+0x1ac>
   23bf0:	e51b300c 	ldr	r3, [fp, #-12]
   23bf4:	e2833022 	add	r3, r3, #34	; 0x22
   23bf8:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23bfc:	e59f1028 	ldr	r1, [pc, #40]	; 23c2c <EnableGpioDetect+0x1ac>
   23c00:	e51b3008 	ldr	r3, [fp, #-8]
   23c04:	e1822003 	orr	r2, r2, r3
   23c08:	e51b300c 	ldr	r3, [fp, #-12]
   23c0c:	e2833022 	add	r3, r3, #34	; 0x22
   23c10:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23c14:	ea000000 	b	23c1c <EnableGpioDetect+0x19c>
	case DETECT_NONE:
		break;
   23c18:	e320f000 	nop	{0}
	}
}
   23c1c:	e320f000 	nop	{0}
   23c20:	e28bd000 	add	sp, fp, #0
   23c24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23c28:	e12fff1e 	bx	lr
   23c2c:	20200000 	eorcs	r0, r0, r0

00023c30 <DisableGpioDetect>:

void DisableGpioDetect(unsigned int pinNum, enum DETECT_TYPE type)
{
   23c30:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23c34:	e28db000 	add	fp, sp, #0
   23c38:	e24dd014 	sub	sp, sp, #20
   23c3c:	e50b0010 	str	r0, [fp, #-16]
   23c40:	e1a03001 	mov	r3, r1
   23c44:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	unsigned long mask=~(1<<(pinNum%32));
   23c48:	e51b3010 	ldr	r3, [fp, #-16]
   23c4c:	e203301f 	and	r3, r3, #31
   23c50:	e3a02001 	mov	r2, #1
   23c54:	e1a03312 	lsl	r3, r2, r3
   23c58:	e1e03003 	mvn	r3, r3
   23c5c:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23c60:	e51b3010 	ldr	r3, [fp, #-16]
   23c64:	e1a032a3 	lsr	r3, r3, #5
   23c68:	e50b300c 	str	r3, [fp, #-12]
	
	switch(type) {
   23c6c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   23c70:	e3530006 	cmp	r3, #6
   23c74:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   23c78:	ea000055 	b	23dd4 <DisableGpioDetect+0x1a4>
   23c7c:	00023dd0 	ldrdeq	r3, [r2], -r0
   23c80:	00023c98 	muleq	r2, r8, ip
   23c84:	00023cd4 	ldrdeq	r3, [r2], -r4
   23c88:	00023d00 	andeq	r3, r2, r0, lsl #26
   23c8c:	00023d3c 	andeq	r3, r2, ip, lsr sp
   23c90:	00023d68 	andeq	r3, r2, r8, ror #26
   23c94:	00023da4 	andeq	r3, r2, r4, lsr #27
	case DETECT_RISING:
		pRegs->GPREN[offset]&=mask;
   23c98:	e59f2144 	ldr	r2, [pc, #324]	; 23de4 <DisableGpioDetect+0x1b4>
   23c9c:	e51b300c 	ldr	r3, [fp, #-12]
   23ca0:	e2833012 	add	r3, r3, #18
   23ca4:	e1a03103 	lsl	r3, r3, #2
   23ca8:	e0823003 	add	r3, r2, r3
   23cac:	e5932004 	ldr	r2, [r3, #4]
   23cb0:	e59f112c 	ldr	r1, [pc, #300]	; 23de4 <DisableGpioDetect+0x1b4>
   23cb4:	e51b3008 	ldr	r3, [fp, #-8]
   23cb8:	e0022003 	and	r2, r2, r3
   23cbc:	e51b300c 	ldr	r3, [fp, #-12]
   23cc0:	e2833012 	add	r3, r3, #18
   23cc4:	e1a03103 	lsl	r3, r3, #2
   23cc8:	e0813003 	add	r3, r1, r3
   23ccc:	e5832004 	str	r2, [r3, #4]
		break;
   23cd0:	ea00003f 	b	23dd4 <DisableGpioDetect+0x1a4>
	case DETECT_FALLING:
		pRegs->GPFEN[offset]&=mask;
   23cd4:	e59f2108 	ldr	r2, [pc, #264]	; 23de4 <DisableGpioDetect+0x1b4>
   23cd8:	e51b300c 	ldr	r3, [fp, #-12]
   23cdc:	e2833016 	add	r3, r3, #22
   23ce0:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23ce4:	e59f10f8 	ldr	r1, [pc, #248]	; 23de4 <DisableGpioDetect+0x1b4>
   23ce8:	e51b3008 	ldr	r3, [fp, #-8]
   23cec:	e0022003 	and	r2, r2, r3
   23cf0:	e51b300c 	ldr	r3, [fp, #-12]
   23cf4:	e2833016 	add	r3, r3, #22
   23cf8:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23cfc:	ea000034 	b	23dd4 <DisableGpioDetect+0x1a4>
	case DETECT_HIGH:
		pRegs->GPHEN[offset]&=mask;
   23d00:	e59f20dc 	ldr	r2, [pc, #220]	; 23de4 <DisableGpioDetect+0x1b4>
   23d04:	e51b300c 	ldr	r3, [fp, #-12]
   23d08:	e2833018 	add	r3, r3, #24
   23d0c:	e1a03103 	lsl	r3, r3, #2
   23d10:	e0823003 	add	r3, r2, r3
   23d14:	e5932004 	ldr	r2, [r3, #4]
   23d18:	e59f10c4 	ldr	r1, [pc, #196]	; 23de4 <DisableGpioDetect+0x1b4>
   23d1c:	e51b3008 	ldr	r3, [fp, #-8]
   23d20:	e0022003 	and	r2, r2, r3
   23d24:	e51b300c 	ldr	r3, [fp, #-12]
   23d28:	e2833018 	add	r3, r3, #24
   23d2c:	e1a03103 	lsl	r3, r3, #2
   23d30:	e0813003 	add	r3, r1, r3
   23d34:	e5832004 	str	r2, [r3, #4]
		break;
   23d38:	ea000025 	b	23dd4 <DisableGpioDetect+0x1a4>
	case DETECT_LOW:
		pRegs->GPLEN[offset]&=mask;
   23d3c:	e59f20a0 	ldr	r2, [pc, #160]	; 23de4 <DisableGpioDetect+0x1b4>
   23d40:	e51b300c 	ldr	r3, [fp, #-12]
   23d44:	e283301c 	add	r3, r3, #28
   23d48:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23d4c:	e59f1090 	ldr	r1, [pc, #144]	; 23de4 <DisableGpioDetect+0x1b4>
   23d50:	e51b3008 	ldr	r3, [fp, #-8]
   23d54:	e0022003 	and	r2, r2, r3
   23d58:	e51b300c 	ldr	r3, [fp, #-12]
   23d5c:	e283301c 	add	r3, r3, #28
   23d60:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23d64:	ea00001a 	b	23dd4 <DisableGpioDetect+0x1a4>
	case DETECT_RISING_ASYNC:
		pRegs->GPAREN[offset]&=mask;
   23d68:	e59f2074 	ldr	r2, [pc, #116]	; 23de4 <DisableGpioDetect+0x1b4>
   23d6c:	e51b300c 	ldr	r3, [fp, #-12]
   23d70:	e283301e 	add	r3, r3, #30
   23d74:	e1a03103 	lsl	r3, r3, #2
   23d78:	e0823003 	add	r3, r2, r3
   23d7c:	e5932004 	ldr	r2, [r3, #4]
   23d80:	e59f105c 	ldr	r1, [pc, #92]	; 23de4 <DisableGpioDetect+0x1b4>
   23d84:	e51b3008 	ldr	r3, [fp, #-8]
   23d88:	e0022003 	and	r2, r2, r3
   23d8c:	e51b300c 	ldr	r3, [fp, #-12]
   23d90:	e283301e 	add	r3, r3, #30
   23d94:	e1a03103 	lsl	r3, r3, #2
   23d98:	e0813003 	add	r3, r1, r3
   23d9c:	e5832004 	str	r2, [r3, #4]
		break;
   23da0:	ea00000b 	b	23dd4 <DisableGpioDetect+0x1a4>
	case DETECT_FALLING_ASYNC:
		pRegs->GPAFEN[offset]&=mask;
   23da4:	e59f2038 	ldr	r2, [pc, #56]	; 23de4 <DisableGpioDetect+0x1b4>
   23da8:	e51b300c 	ldr	r3, [fp, #-12]
   23dac:	e2833022 	add	r3, r3, #34	; 0x22
   23db0:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   23db4:	e59f1028 	ldr	r1, [pc, #40]	; 23de4 <DisableGpioDetect+0x1b4>
   23db8:	e51b3008 	ldr	r3, [fp, #-8]
   23dbc:	e0022003 	and	r2, r2, r3
   23dc0:	e51b300c 	ldr	r3, [fp, #-12]
   23dc4:	e2833022 	add	r3, r3, #34	; 0x22
   23dc8:	e7812103 	str	r2, [r1, r3, lsl #2]
		break;
   23dcc:	ea000000 	b	23dd4 <DisableGpioDetect+0x1a4>
	case DETECT_NONE:
		break;
   23dd0:	e320f000 	nop	{0}
	}
}
   23dd4:	e320f000 	nop	{0}
   23dd8:	e28bd000 	add	sp, fp, #0
   23ddc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23de0:	e12fff1e 	bx	lr
   23de4:	20200000 	eorcs	r0, r0, r0

00023de8 <ClearGpioInterrupt>:

void ClearGpioInterrupt(unsigned int pinNum)
{
   23de8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   23dec:	e28db000 	add	fp, sp, #0
   23df0:	e24dd014 	sub	sp, sp, #20
   23df4:	e50b0010 	str	r0, [fp, #-16]
	unsigned long mask=(1<<(pinNum%32));
   23df8:	e51b3010 	ldr	r3, [fp, #-16]
   23dfc:	e203301f 	and	r3, r3, #31
   23e00:	e3a02001 	mov	r2, #1
   23e04:	e1a03312 	lsl	r3, r2, r3
   23e08:	e50b3008 	str	r3, [fp, #-8]
	unsigned long offset=pinNum/32;
   23e0c:	e51b3010 	ldr	r3, [fp, #-16]
   23e10:	e1a032a3 	lsr	r3, r3, #5
   23e14:	e50b300c 	str	r3, [fp, #-12]

	pRegs->GPEDS[offset]=mask;
   23e18:	e59f101c 	ldr	r1, [pc, #28]	; 23e3c <ClearGpioInterrupt+0x54>
   23e1c:	e51b300c 	ldr	r3, [fp, #-12]
   23e20:	e2833010 	add	r3, r3, #16
   23e24:	e51b2008 	ldr	r2, [fp, #-8]
   23e28:	e7812103 	str	r2, [r1, r3, lsl #2]
}
   23e2c:	e320f000 	nop	{0}
   23e30:	e28bd000 	add	sp, fp, #0
   23e34:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   23e38:	e12fff1e 	bx	lr
   23e3c:	20200000 	eorcs	r0, r0, r0

00023e40 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
size_t allocated = 0;
void *pvPortMalloc( size_t xWantedSize )
{
   23e40:	e92d4800 	push	{fp, lr}
   23e44:	e28db004 	add	fp, sp, #4
   23e48:	e24dd018 	sub	sp, sp, #24
   23e4c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   23e50:	e3a03000 	mov	r3, #0
   23e54:	e50b3010 	str	r3, [fp, #-16]

	vTaskSuspendAll();
   23e58:	ebfffa22 	bl	226e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   23e5c:	e59f3194 	ldr	r3, [pc, #404]	; 23ff8 <pvPortMalloc+0x1b8>
   23e60:	e5933000 	ldr	r3, [r3]
   23e64:	e3530000 	cmp	r3, #0
   23e68:	1a000000 	bne	23e70 <pvPortMalloc+0x30>
		{
			prvHeapInit();
   23e6c:	eb000093 	bl	240c0 <prvHeapInit>
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   23e70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23e74:	e3530000 	cmp	r3, #0
   23e78:	0a00000c 	beq	23eb0 <pvPortMalloc+0x70>
		{
			xWantedSize += heapSTRUCT_SIZE;
   23e7c:	e3a03010 	mov	r3, #16
   23e80:	e1a02003 	mov	r2, r3
   23e84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23e88:	e0833002 	add	r3, r3, r2
   23e8c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   23e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23e94:	e2033007 	and	r3, r3, #7
   23e98:	e3530000 	cmp	r3, #0
   23e9c:	0a000003 	beq	23eb0 <pvPortMalloc+0x70>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   23ea0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23ea4:	e3c33007 	bic	r3, r3, #7
   23ea8:	e2833008 	add	r3, r3, #8
   23eac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   23eb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23eb4:	e3530000 	cmp	r3, #0
   23eb8:	0a000043 	beq	23fcc <pvPortMalloc+0x18c>
   23ebc:	e3a02a01 	mov	r2, #4096	; 0x1000
   23ec0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23ec4:	e1530002 	cmp	r3, r2
   23ec8:	2a00003f 	bcs	23fcc <pvPortMalloc+0x18c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
   23ecc:	e59f3128 	ldr	r3, [pc, #296]	; 23ffc <pvPortMalloc+0x1bc>
   23ed0:	e50b300c 	str	r3, [fp, #-12]
			pxBlock = xStart.pxNextFreeBlock;
   23ed4:	e59f3120 	ldr	r3, [pc, #288]	; 23ffc <pvPortMalloc+0x1bc>
   23ed8:	e5933000 	ldr	r3, [r3]
   23edc:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   23ee0:	ea000004 	b	23ef8 <pvPortMalloc+0xb8>
			{
				pxPreviousBlock = pxBlock;
   23ee4:	e51b3008 	ldr	r3, [fp, #-8]
   23ee8:	e50b300c 	str	r3, [fp, #-12]
				pxBlock = pxBlock->pxNextFreeBlock;
   23eec:	e51b3008 	ldr	r3, [fp, #-8]
   23ef0:	e5933000 	ldr	r3, [r3]
   23ef4:	e50b3008 	str	r3, [fp, #-8]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   23ef8:	e51b3008 	ldr	r3, [fp, #-8]
   23efc:	e5933004 	ldr	r3, [r3, #4]
   23f00:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   23f04:	e1520003 	cmp	r2, r3
   23f08:	9a000003 	bls	23f1c <pvPortMalloc+0xdc>
   23f0c:	e51b3008 	ldr	r3, [fp, #-8]
   23f10:	e5933000 	ldr	r3, [r3]
   23f14:	e3530000 	cmp	r3, #0
   23f18:	1afffff1 	bne	23ee4 <pvPortMalloc+0xa4>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   23f1c:	e59f30d4 	ldr	r3, [pc, #212]	; 23ff8 <pvPortMalloc+0x1b8>
   23f20:	e5933000 	ldr	r3, [r3]
   23f24:	e51b2008 	ldr	r2, [fp, #-8]
   23f28:	e1520003 	cmp	r2, r3
   23f2c:	0a000026 	beq	23fcc <pvPortMalloc+0x18c>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   23f30:	e51b300c 	ldr	r3, [fp, #-12]
   23f34:	e5933000 	ldr	r3, [r3]
   23f38:	e3a02010 	mov	r2, #16
   23f3c:	e0833002 	add	r3, r3, r2
   23f40:	e50b3010 	str	r3, [fp, #-16]

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   23f44:	e51b3008 	ldr	r3, [fp, #-8]
   23f48:	e5932000 	ldr	r2, [r3]
   23f4c:	e51b300c 	ldr	r3, [fp, #-12]
   23f50:	e5832000 	str	r2, [r3]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   23f54:	e51b3008 	ldr	r3, [fp, #-8]
   23f58:	e5932004 	ldr	r2, [r3, #4]
   23f5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23f60:	e0423003 	sub	r3, r2, r3
   23f64:	e3a02010 	mov	r2, #16
   23f68:	e1a02082 	lsl	r2, r2, #1
   23f6c:	e1530002 	cmp	r3, r2
   23f70:	9a00000e 	bls	23fb0 <pvPortMalloc+0x170>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   23f74:	e51b2008 	ldr	r2, [fp, #-8]
   23f78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23f7c:	e0823003 	add	r3, r2, r3
   23f80:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   23f84:	e51b3008 	ldr	r3, [fp, #-8]
   23f88:	e5932004 	ldr	r2, [r3, #4]
   23f8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23f90:	e0422003 	sub	r2, r2, r3
   23f94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   23f98:	e5832004 	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
   23f9c:	e51b3008 	ldr	r3, [fp, #-8]
   23fa0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   23fa4:	e5832004 	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   23fa8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   23fac:	eb000079 	bl	24198 <prvInsertBlockIntoFreeList>
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   23fb0:	e59f3048 	ldr	r3, [pc, #72]	; 24000 <pvPortMalloc+0x1c0>
   23fb4:	e5932000 	ldr	r2, [r3]
   23fb8:	e51b3008 	ldr	r3, [fp, #-8]
   23fbc:	e5933004 	ldr	r3, [r3, #4]
   23fc0:	e0423003 	sub	r3, r2, r3
   23fc4:	e59f2034 	ldr	r2, [pc, #52]	; 24000 <pvPortMalloc+0x1c0>
   23fc8:	e5823000 	str	r3, [r2]
			}
		}
	}
	xTaskResumeAll();
   23fcc:	ebfff9d1 	bl	22718 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif
	
	allocated += xWantedSize;
   23fd0:	e59f302c 	ldr	r3, [pc, #44]	; 24004 <pvPortMalloc+0x1c4>
   23fd4:	e5932000 	ldr	r2, [r3]
   23fd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   23fdc:	e0823003 	add	r3, r2, r3
   23fe0:	e59f201c 	ldr	r2, [pc, #28]	; 24004 <pvPortMalloc+0x1c4>
   23fe4:	e5823000 	str	r3, [r2]

	return pvReturn;
   23fe8:	e51b3010 	ldr	r3, [fp, #-16]
}
   23fec:	e1a00003 	mov	r0, r3
   23ff0:	e24bd004 	sub	sp, fp, #4
   23ff4:	e8bd8800 	pop	{fp, pc}
   23ff8:	0002d2c8 	andeq	sp, r2, r8, asr #5
   23ffc:	0002d2c0 	andeq	sp, r2, r0, asr #5
   24000:	0002bee8 	andeq	fp, r2, r8, ror #29
   24004:	0002d2cc 	andeq	sp, r2, ip, asr #5

00024008 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   24008:	e92d4800 	push	{fp, lr}
   2400c:	e28db004 	add	fp, sp, #4
   24010:	e24dd010 	sub	sp, sp, #16
   24014:	e50b0010 	str	r0, [fp, #-16]
unsigned char *puc = ( unsigned char * ) pv;
   24018:	e51b3010 	ldr	r3, [fp, #-16]
   2401c:	e50b3008 	str	r3, [fp, #-8]
xBlockLink *pxLink;

	if( pv != NULL )
   24020:	e51b3010 	ldr	r3, [fp, #-16]
   24024:	e3530000 	cmp	r3, #0
   24028:	0a000011 	beq	24074 <vPortFree+0x6c>
	{
		/* The memory being freed will have an xBlockLink structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
   2402c:	e3a03010 	mov	r3, #16
   24030:	e2633000 	rsb	r3, r3, #0
   24034:	e51b2008 	ldr	r2, [fp, #-8]
   24038:	e0823003 	add	r3, r2, r3
   2403c:	e50b3008 	str	r3, [fp, #-8]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   24040:	e51b3008 	ldr	r3, [fp, #-8]
   24044:	e50b300c 	str	r3, [fp, #-12]

		vTaskSuspendAll();
   24048:	ebfff9a6 	bl	226e8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   2404c:	e51b300c 	ldr	r3, [fp, #-12]
   24050:	e5932004 	ldr	r2, [r3, #4]
   24054:	e59f3024 	ldr	r3, [pc, #36]	; 24080 <vPortFree+0x78>
   24058:	e5933000 	ldr	r3, [r3]
   2405c:	e0823003 	add	r3, r2, r3
   24060:	e59f2018 	ldr	r2, [pc, #24]	; 24080 <vPortFree+0x78>
   24064:	e5823000 	str	r3, [r2]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   24068:	e51b000c 	ldr	r0, [fp, #-12]
   2406c:	eb000049 	bl	24198 <prvInsertBlockIntoFreeList>
		}
		xTaskResumeAll();
   24070:	ebfff9a8 	bl	22718 <xTaskResumeAll>
	}
}
   24074:	e320f000 	nop	{0}
   24078:	e24bd004 	sub	sp, fp, #4
   2407c:	e8bd8800 	pop	{fp, pc}
   24080:	0002bee8 	andeq	fp, r2, r8, ror #29

00024084 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   24084:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24088:	e28db000 	add	fp, sp, #0
	return xFreeBytesRemaining;
   2408c:	e59f3010 	ldr	r3, [pc, #16]	; 240a4 <xPortGetFreeHeapSize+0x20>
   24090:	e5933000 	ldr	r3, [r3]
}
   24094:	e1a00003 	mov	r0, r3
   24098:	e28bd000 	add	sp, fp, #0
   2409c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   240a0:	e12fff1e 	bx	lr
   240a4:	0002bee8 	andeq	fp, r2, r8, ror #29

000240a8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
   240a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   240ac:	e28db000 	add	fp, sp, #0
	/* This just exists to keep the linker quiet. */
}
   240b0:	e320f000 	nop	{0}
   240b4:	e28bd000 	add	sp, fp, #0
   240b8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   240bc:	e12fff1e 	bx	lr

000240c0 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   240c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   240c4:	e28db000 	add	fp, sp, #0
   240c8:	e24dd00c 	sub	sp, sp, #12
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   240cc:	e59f30b4 	ldr	r3, [pc, #180]	; 24188 <prvHeapInit+0xc8>
   240d0:	e59f20b4 	ldr	r2, [pc, #180]	; 2418c <prvHeapInit+0xcc>
   240d4:	e5832000 	str	r2, [r3]
	xStart.xBlockSize = ( size_t ) 0;
   240d8:	e59f30a8 	ldr	r3, [pc, #168]	; 24188 <prvHeapInit+0xc8>
   240dc:	e3a02000 	mov	r2, #0
   240e0:	e5832004 	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
   240e4:	e3a02a01 	mov	r2, #4096	; 0x1000
   240e8:	e59f309c 	ldr	r3, [pc, #156]	; 2418c <prvHeapInit+0xcc>
   240ec:	e0823003 	add	r3, r2, r3
   240f0:	e50b3008 	str	r3, [fp, #-8]
	pucHeapEnd -= heapSTRUCT_SIZE;
   240f4:	e3a03010 	mov	r3, #16
   240f8:	e2633000 	rsb	r3, r3, #0
   240fc:	e51b2008 	ldr	r2, [fp, #-8]
   24100:	e0823003 	add	r3, r2, r3
   24104:	e50b3008 	str	r3, [fp, #-8]
	pxEnd = ( void * ) pucHeapEnd;
   24108:	e59f2080 	ldr	r2, [pc, #128]	; 24190 <prvHeapInit+0xd0>
   2410c:	e51b3008 	ldr	r3, [fp, #-8]
   24110:	e5823000 	str	r3, [r2]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   24114:	e59f3074 	ldr	r3, [pc, #116]	; 24190 <prvHeapInit+0xd0>
   24118:	e5933000 	ldr	r3, [r3]
   2411c:	e3a02000 	mov	r2, #0
   24120:	e5832004 	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   24124:	e59f3064 	ldr	r3, [pc, #100]	; 24190 <prvHeapInit+0xd0>
   24128:	e5933000 	ldr	r3, [r3]
   2412c:	e3a02000 	mov	r2, #0
   24130:	e5832000 	str	r2, [r3]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
   24134:	e59f3050 	ldr	r3, [pc, #80]	; 2418c <prvHeapInit+0xcc>
   24138:	e50b300c 	str	r3, [fp, #-12]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   2413c:	e3a03a01 	mov	r3, #4096	; 0x1000
   24140:	e3a02010 	mov	r2, #16
   24144:	e0432002 	sub	r2, r3, r2
   24148:	e51b300c 	ldr	r3, [fp, #-12]
   2414c:	e5832004 	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   24150:	e59f3038 	ldr	r3, [pc, #56]	; 24190 <prvHeapInit+0xd0>
   24154:	e5932000 	ldr	r2, [r3]
   24158:	e51b300c 	ldr	r3, [fp, #-12]
   2415c:	e5832000 	str	r2, [r3]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   24160:	e59f302c 	ldr	r3, [pc, #44]	; 24194 <prvHeapInit+0xd4>
   24164:	e5933000 	ldr	r3, [r3]
   24168:	e3a02010 	mov	r2, #16
   2416c:	e0433002 	sub	r3, r3, r2
   24170:	e59f201c 	ldr	r2, [pc, #28]	; 24194 <prvHeapInit+0xd4>
   24174:	e5823000 	str	r3, [r2]
}
   24178:	e320f000 	nop	{0}
   2417c:	e28bd000 	add	sp, fp, #0
   24180:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24184:	e12fff1e 	bx	lr
   24188:	0002d2c0 	andeq	sp, r2, r0, asr #5
   2418c:	0002c2c0 	andeq	ip, r2, r0, asr #5
   24190:	0002d2c8 	andeq	sp, r2, r8, asr #5
   24194:	0002bee8 	andeq	fp, r2, r8, ror #29

00024198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   24198:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2419c:	e28db000 	add	fp, sp, #0
   241a0:	e24dd014 	sub	sp, sp, #20
   241a4:	e50b0010 	str	r0, [fp, #-16]
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   241a8:	e59f3134 	ldr	r3, [pc, #308]	; 242e4 <prvInsertBlockIntoFreeList+0x14c>
   241ac:	e50b3008 	str	r3, [fp, #-8]
   241b0:	ea000002 	b	241c0 <prvInsertBlockIntoFreeList+0x28>
   241b4:	e51b3008 	ldr	r3, [fp, #-8]
   241b8:	e5933000 	ldr	r3, [r3]
   241bc:	e50b3008 	str	r3, [fp, #-8]
   241c0:	e51b3008 	ldr	r3, [fp, #-8]
   241c4:	e5933000 	ldr	r3, [r3]
   241c8:	e51b2010 	ldr	r2, [fp, #-16]
   241cc:	e1520003 	cmp	r2, r3
   241d0:	8afffff7 	bhi	241b4 <prvInsertBlockIntoFreeList+0x1c>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
   241d4:	e51b3008 	ldr	r3, [fp, #-8]
   241d8:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   241dc:	e51b3008 	ldr	r3, [fp, #-8]
   241e0:	e5933004 	ldr	r3, [r3, #4]
   241e4:	e51b200c 	ldr	r2, [fp, #-12]
   241e8:	e0823003 	add	r3, r2, r3
   241ec:	e51b2010 	ldr	r2, [fp, #-16]
   241f0:	e1520003 	cmp	r2, r3
   241f4:	1a000008 	bne	2421c <prvInsertBlockIntoFreeList+0x84>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   241f8:	e51b3008 	ldr	r3, [fp, #-8]
   241fc:	e5932004 	ldr	r2, [r3, #4]
   24200:	e51b3010 	ldr	r3, [fp, #-16]
   24204:	e5933004 	ldr	r3, [r3, #4]
   24208:	e0822003 	add	r2, r2, r3
   2420c:	e51b3008 	ldr	r3, [fp, #-8]
   24210:	e5832004 	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   24214:	e51b3008 	ldr	r3, [fp, #-8]
   24218:	e50b3010 	str	r3, [fp, #-16]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
   2421c:	e51b3010 	ldr	r3, [fp, #-16]
   24220:	e50b300c 	str	r3, [fp, #-12]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   24224:	e51b3010 	ldr	r3, [fp, #-16]
   24228:	e5933004 	ldr	r3, [r3, #4]
   2422c:	e51b200c 	ldr	r2, [fp, #-12]
   24230:	e0822003 	add	r2, r2, r3
   24234:	e51b3008 	ldr	r3, [fp, #-8]
   24238:	e5933000 	ldr	r3, [r3]
   2423c:	e1520003 	cmp	r2, r3
   24240:	1a000018 	bne	242a8 <prvInsertBlockIntoFreeList+0x110>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   24244:	e51b3008 	ldr	r3, [fp, #-8]
   24248:	e5932000 	ldr	r2, [r3]
   2424c:	e59f3094 	ldr	r3, [pc, #148]	; 242e8 <prvInsertBlockIntoFreeList+0x150>
   24250:	e5933000 	ldr	r3, [r3]
   24254:	e1520003 	cmp	r2, r3
   24258:	0a00000d 	beq	24294 <prvInsertBlockIntoFreeList+0xfc>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   2425c:	e51b3010 	ldr	r3, [fp, #-16]
   24260:	e5932004 	ldr	r2, [r3, #4]
   24264:	e51b3008 	ldr	r3, [fp, #-8]
   24268:	e5933000 	ldr	r3, [r3]
   2426c:	e5933004 	ldr	r3, [r3, #4]
   24270:	e0822003 	add	r2, r2, r3
   24274:	e51b3010 	ldr	r3, [fp, #-16]
   24278:	e5832004 	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   2427c:	e51b3008 	ldr	r3, [fp, #-8]
   24280:	e5933000 	ldr	r3, [r3]
   24284:	e5932000 	ldr	r2, [r3]
   24288:	e51b3010 	ldr	r3, [fp, #-16]
   2428c:	e5832000 	str	r2, [r3]
   24290:	ea000008 	b	242b8 <prvInsertBlockIntoFreeList+0x120>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   24294:	e59f304c 	ldr	r3, [pc, #76]	; 242e8 <prvInsertBlockIntoFreeList+0x150>
   24298:	e5932000 	ldr	r2, [r3]
   2429c:	e51b3010 	ldr	r3, [fp, #-16]
   242a0:	e5832000 	str	r2, [r3]
   242a4:	ea000003 	b	242b8 <prvInsertBlockIntoFreeList+0x120>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   242a8:	e51b3008 	ldr	r3, [fp, #-8]
   242ac:	e5932000 	ldr	r2, [r3]
   242b0:	e51b3010 	ldr	r3, [fp, #-16]
   242b4:	e5832000 	str	r2, [r3]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   242b8:	e51b2008 	ldr	r2, [fp, #-8]
   242bc:	e51b3010 	ldr	r3, [fp, #-16]
   242c0:	e1520003 	cmp	r2, r3
   242c4:	0a000002 	beq	242d4 <prvInsertBlockIntoFreeList+0x13c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   242c8:	e51b3008 	ldr	r3, [fp, #-8]
   242cc:	e51b2010 	ldr	r2, [fp, #-16]
   242d0:	e5832000 	str	r2, [r3]
	}
}
   242d4:	e320f000 	nop	{0}
   242d8:	e28bd000 	add	sp, fp, #0
   242dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   242e0:	e12fff1e 	bx	lr
   242e4:	0002d2c0 	andeq	sp, r2, r0, asr #5
   242e8:	0002d2c8 	andeq	sp, r2, r8, asr #5

000242ec <undefined_instruction>:
   242ec:	eafffffe 	b	242ec <undefined_instruction>

000242f0 <prefetch_abort>:
   242f0:	eafffffe 	b	242f0 <prefetch_abort>

000242f4 <data_abort>:
   242f4:	eafffffe 	b	242f4 <data_abort>

000242f8 <unused>:
   242f8:	eafffffe 	b	242f8 <unused>

000242fc <fiq>:
   242fc:	eafffffe 	b	242fc <fiq>

00024300 <hang>:
   24300:	eafffffe 	b	24300 <hang>

00024304 <uart_putc>:

#define UART0_BASE  0x101f1000
#define UART0_DR    (*(volatile unsigned int*)(UART0_BASE + 0x00))
#define UART0_FR    (*(volatile unsigned int*)(UART0_BASE + 0x18))

void uart_putc(char c) {
   24304:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24308:	e28db000 	add	fp, sp, #0
   2430c:	e24dd00c 	sub	sp, sp, #12
   24310:	e1a03000 	mov	r3, r0
   24314:	e54b3005 	strb	r3, [fp, #-5]
    while (UART0_FR & (1 << 5)) ; // 等待发送 FIFO 非满
   24318:	e320f000 	nop	{0}
   2431c:	e59f3028 	ldr	r3, [pc, #40]	; 2434c <uart_putc+0x48>
   24320:	e5933000 	ldr	r3, [r3]
   24324:	e2033020 	and	r3, r3, #32
   24328:	e3530000 	cmp	r3, #0
   2432c:	1afffffa 	bne	2431c <uart_putc+0x18>
    UART0_DR = c;
   24330:	e59f2018 	ldr	r2, [pc, #24]	; 24350 <uart_putc+0x4c>
   24334:	e55b3005 	ldrb	r3, [fp, #-5]
   24338:	e5823000 	str	r3, [r2]
}
   2433c:	e320f000 	nop	{0}
   24340:	e28bd000 	add	sp, fp, #0
   24344:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24348:	e12fff1e 	bx	lr
   2434c:	101f1018 	andsne	r1, pc, r8, lsl r0	; <UNPREDICTABLE>
   24350:	101f1000 	andsne	r1, pc, r0

00024354 <uart_puts>:

void uart_puts(const char* s) {
   24354:	e92d4800 	push	{fp, lr}
   24358:	e28db004 	add	fp, sp, #4
   2435c:	e24dd008 	sub	sp, sp, #8
   24360:	e50b0008 	str	r0, [fp, #-8]
    while (*s) {
   24364:	ea000005 	b	24380 <uart_puts+0x2c>
        uart_putc(*s++);
   24368:	e51b3008 	ldr	r3, [fp, #-8]
   2436c:	e2832001 	add	r2, r3, #1
   24370:	e50b2008 	str	r2, [fp, #-8]
   24374:	e5d33000 	ldrb	r3, [r3]
   24378:	e1a00003 	mov	r0, r3
   2437c:	ebffffe0 	bl	24304 <uart_putc>
    while (*s) {
   24380:	e51b3008 	ldr	r3, [fp, #-8]
   24384:	e5d33000 	ldrb	r3, [r3]
   24388:	e3530000 	cmp	r3, #0
   2438c:	1afffff5 	bne	24368 <uart_puts+0x14>
    }
}
   24390:	e320f000 	nop	{0}
   24394:	e320f000 	nop	{0}
   24398:	e24bd004 	sub	sp, fp, #4
   2439c:	e8bd8800 	pop	{fp, pc}

000243a0 <uart_print_num>:

/* 简单的整数转字符串函数，避免使用 sprintf */
void uart_print_num(FRESULT num) {
   243a0:	e92d4800 	push	{fp, lr}
   243a4:	e28db004 	add	fp, sp, #4
   243a8:	e24dd010 	sub	sp, sp, #16
   243ac:	e1a03000 	mov	r3, r0
   243b0:	e54b300d 	strb	r3, [fp, #-13]
    char buf[4];
    int i = 0;
   243b4:	e3a03000 	mov	r3, #0
   243b8:	e50b3008 	str	r3, [fp, #-8]
    
    /* 处理0的特殊情况 */
    if (num == 0) {
   243bc:	e55b300d 	ldrb	r3, [fp, #-13]
   243c0:	e3530000 	cmp	r3, #0
   243c4:	1a000019 	bne	24430 <uart_print_num+0x90>
        uart_putc('0');
   243c8:	e3a00030 	mov	r0, #48	; 0x30
   243cc:	ebffffcc 	bl	24304 <uart_putc>
   243d0:	ea000026 	b	24470 <uart_print_num+0xd0>
        return;
    }
    
    /* 将数字转换为字符串（倒序） */
    while (num > 0) {
        buf[i++] = '0' + (num % 10);
   243d4:	e55b200d 	ldrb	r2, [fp, #-13]
   243d8:	e59f3098 	ldr	r3, [pc, #152]	; 24478 <uart_print_num+0xd8>
   243dc:	e0831293 	umull	r1, r3, r3, r2
   243e0:	e1a011a3 	lsr	r1, r3, #3
   243e4:	e1a03001 	mov	r3, r1
   243e8:	e1a03103 	lsl	r3, r3, #2
   243ec:	e0833001 	add	r3, r3, r1
   243f0:	e1a03083 	lsl	r3, r3, #1
   243f4:	e0423003 	sub	r3, r2, r3
   243f8:	e6ef2073 	uxtb	r2, r3
   243fc:	e51b3008 	ldr	r3, [fp, #-8]
   24400:	e2831001 	add	r1, r3, #1
   24404:	e50b1008 	str	r1, [fp, #-8]
   24408:	e2822030 	add	r2, r2, #48	; 0x30
   2440c:	e6ef2072 	uxtb	r2, r2
   24410:	e2433004 	sub	r3, r3, #4
   24414:	e083300b 	add	r3, r3, fp
   24418:	e5432008 	strb	r2, [r3, #-8]
        num /= 10;
   2441c:	e55b300d 	ldrb	r3, [fp, #-13]
   24420:	e59f2050 	ldr	r2, [pc, #80]	; 24478 <uart_print_num+0xd8>
   24424:	e0832392 	umull	r2, r3, r2, r3
   24428:	e1a031a3 	lsr	r3, r3, #3
   2442c:	e54b300d 	strb	r3, [fp, #-13]
    while (num > 0) {
   24430:	e55b300d 	ldrb	r3, [fp, #-13]
   24434:	e3530000 	cmp	r3, #0
   24438:	1affffe5 	bne	243d4 <uart_print_num+0x34>
    }
    
    /* 输出（反向输出以得到正确顺序） */
    while (i > 0) {
   2443c:	ea000008 	b	24464 <uart_print_num+0xc4>
        uart_putc(buf[--i]);
   24440:	e51b3008 	ldr	r3, [fp, #-8]
   24444:	e2433001 	sub	r3, r3, #1
   24448:	e50b3008 	str	r3, [fp, #-8]
   2444c:	e24b200c 	sub	r2, fp, #12
   24450:	e51b3008 	ldr	r3, [fp, #-8]
   24454:	e0823003 	add	r3, r2, r3
   24458:	e5d33000 	ldrb	r3, [r3]
   2445c:	e1a00003 	mov	r0, r3
   24460:	ebffffa7 	bl	24304 <uart_putc>
    while (i > 0) {
   24464:	e51b3008 	ldr	r3, [fp, #-8]
   24468:	e3530000 	cmp	r3, #0
   2446c:	cafffff3 	bgt	24440 <uart_print_num+0xa0>
    }
}
   24470:	e24bd004 	sub	sp, fp, #4
   24474:	e8bd8800 	pop	{fp, pc}
   24478:	cccccccd 	stclgt	12, cr12, [ip], {205}	; 0xcd

0002447c <print_fatfs_error>:

void print_fatfs_error(FRESULT res) {
   2447c:	e92d4800 	push	{fp, lr}
   24480:	e28db004 	add	fp, sp, #4
   24484:	e24dd008 	sub	sp, sp, #8
   24488:	e1a03000 	mov	r3, r0
   2448c:	e54b3005 	strb	r3, [fp, #-5]
    uart_puts("FatFS Error: ");
   24490:	e59f0170 	ldr	r0, [pc, #368]	; 24608 <print_fatfs_error+0x18c>
   24494:	ebffffae 	bl	24354 <uart_puts>
    switch (res) {
   24498:	e55b3005 	ldrb	r3, [fp, #-5]
   2449c:	e3530013 	cmp	r3, #19
   244a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   244a4:	ea00004f 	b	245e8 <print_fatfs_error+0x16c>
   244a8:	000244f8 	strdeq	r4, [r2], -r8
   244ac:	00024504 	andeq	r4, r2, r4, lsl #10
   244b0:	00024510 	andeq	r4, r2, r0, lsl r5
   244b4:	0002451c 	andeq	r4, r2, ip, lsl r5
   244b8:	00024528 	andeq	r4, r2, r8, lsr #10
   244bc:	00024534 	andeq	r4, r2, r4, lsr r5
   244c0:	00024540 	andeq	r4, r2, r0, asr #10
   244c4:	0002454c 	andeq	r4, r2, ip, asr #10
   244c8:	00024558 	andeq	r4, r2, r8, asr r5
   244cc:	00024564 	andeq	r4, r2, r4, ror #10
   244d0:	00024570 	andeq	r4, r2, r0, ror r5
   244d4:	0002457c 	andeq	r4, r2, ip, ror r5
   244d8:	00024588 	andeq	r4, r2, r8, lsl #11
   244dc:	00024594 	muleq	r2, r4, r5
   244e0:	000245a0 	andeq	r4, r2, r0, lsr #11
   244e4:	000245ac 	andeq	r4, r2, ip, lsr #11
   244e8:	000245b8 			; <UNDEFINED> instruction: 0x000245b8
   244ec:	000245c4 	andeq	r4, r2, r4, asr #11
   244f0:	000245d0 	ldrdeq	r4, [r2], -r0
   244f4:	000245dc 	ldrdeq	r4, [r2], -ip
        case FR_OK: uart_puts("(0) Succeeded"); break;
   244f8:	e59f010c 	ldr	r0, [pc, #268]	; 2460c <print_fatfs_error+0x190>
   244fc:	ebffff94 	bl	24354 <uart_puts>
   24500:	ea00003b 	b	245f4 <print_fatfs_error+0x178>
        case FR_DISK_ERR: uart_puts("(1) A hard error occurred in the low level disk I/O layer"); break;
   24504:	e59f0104 	ldr	r0, [pc, #260]	; 24610 <print_fatfs_error+0x194>
   24508:	ebffff91 	bl	24354 <uart_puts>
   2450c:	ea000038 	b	245f4 <print_fatfs_error+0x178>
        case FR_INT_ERR: uart_puts("(2) Assertion failed"); break;
   24510:	e59f00fc 	ldr	r0, [pc, #252]	; 24614 <print_fatfs_error+0x198>
   24514:	ebffff8e 	bl	24354 <uart_puts>
   24518:	ea000035 	b	245f4 <print_fatfs_error+0x178>
        case FR_NOT_READY: uart_puts("(3) The physical drive cannot work"); break;
   2451c:	e59f00f4 	ldr	r0, [pc, #244]	; 24618 <print_fatfs_error+0x19c>
   24520:	ebffff8b 	bl	24354 <uart_puts>
   24524:	ea000032 	b	245f4 <print_fatfs_error+0x178>
        case FR_NO_FILE: uart_puts("(4) Could not find the file"); break;
   24528:	e59f00ec 	ldr	r0, [pc, #236]	; 2461c <print_fatfs_error+0x1a0>
   2452c:	ebffff88 	bl	24354 <uart_puts>
   24530:	ea00002f 	b	245f4 <print_fatfs_error+0x178>
        case FR_NO_PATH: uart_puts("(5) Could not find the path"); break;
   24534:	e59f00e4 	ldr	r0, [pc, #228]	; 24620 <print_fatfs_error+0x1a4>
   24538:	ebffff85 	bl	24354 <uart_puts>
   2453c:	ea00002c 	b	245f4 <print_fatfs_error+0x178>
        case FR_INVALID_NAME: uart_puts("(6) The path name format is invalid"); break;
   24540:	e59f00dc 	ldr	r0, [pc, #220]	; 24624 <print_fatfs_error+0x1a8>
   24544:	ebffff82 	bl	24354 <uart_puts>
   24548:	ea000029 	b	245f4 <print_fatfs_error+0x178>
        case FR_DENIED: uart_puts("(7) Access denied due to prohibited access or directory full"); break;
   2454c:	e59f00d4 	ldr	r0, [pc, #212]	; 24628 <print_fatfs_error+0x1ac>
   24550:	ebffff7f 	bl	24354 <uart_puts>
   24554:	ea000026 	b	245f4 <print_fatfs_error+0x178>
        case FR_EXIST: uart_puts("(8) Access denied due to prohibited access"); break;
   24558:	e59f00cc 	ldr	r0, [pc, #204]	; 2462c <print_fatfs_error+0x1b0>
   2455c:	ebffff7c 	bl	24354 <uart_puts>
   24560:	ea000023 	b	245f4 <print_fatfs_error+0x178>
        case FR_INVALID_OBJECT: uart_puts("(9) The file/directory object is invalid"); break;
   24564:	e59f00c4 	ldr	r0, [pc, #196]	; 24630 <print_fatfs_error+0x1b4>
   24568:	ebffff79 	bl	24354 <uart_puts>
   2456c:	ea000020 	b	245f4 <print_fatfs_error+0x178>
        case FR_WRITE_PROTECTED: uart_puts("(10) The physical drive is write protected"); break;
   24570:	e59f00bc 	ldr	r0, [pc, #188]	; 24634 <print_fatfs_error+0x1b8>
   24574:	ebffff76 	bl	24354 <uart_puts>
   24578:	ea00001d 	b	245f4 <print_fatfs_error+0x178>
        case FR_INVALID_DRIVE: uart_puts("(11) The logical drive number is invalid"); break;
   2457c:	e59f00b4 	ldr	r0, [pc, #180]	; 24638 <print_fatfs_error+0x1bc>
   24580:	ebffff73 	bl	24354 <uart_puts>
   24584:	ea00001a 	b	245f4 <print_fatfs_error+0x178>
        case FR_NOT_ENABLED: uart_puts("(12) The volume has no work area"); break;
   24588:	e59f00ac 	ldr	r0, [pc, #172]	; 2463c <print_fatfs_error+0x1c0>
   2458c:	ebffff70 	bl	24354 <uart_puts>
   24590:	ea000017 	b	245f4 <print_fatfs_error+0x178>
        case FR_NO_FILESYSTEM: uart_puts("(13) There is no valid FAT volume"); break;
   24594:	e59f00a4 	ldr	r0, [pc, #164]	; 24640 <print_fatfs_error+0x1c4>
   24598:	ebffff6d 	bl	24354 <uart_puts>
   2459c:	ea000014 	b	245f4 <print_fatfs_error+0x178>
        case FR_MKFS_ABORTED: uart_puts("(14) The f_mkfs() aborted due to any problem"); break;
   245a0:	e59f009c 	ldr	r0, [pc, #156]	; 24644 <print_fatfs_error+0x1c8>
   245a4:	ebffff6a 	bl	24354 <uart_puts>
   245a8:	ea000011 	b	245f4 <print_fatfs_error+0x178>
        case FR_TIMEOUT: uart_puts("(15) Could not get a grant to access the volume within defined period"); break;
   245ac:	e59f0094 	ldr	r0, [pc, #148]	; 24648 <print_fatfs_error+0x1cc>
   245b0:	ebffff67 	bl	24354 <uart_puts>
   245b4:	ea00000e 	b	245f4 <print_fatfs_error+0x178>
        case FR_LOCKED: uart_puts("(16) The operation is rejected according to the file sharing policy"); break;
   245b8:	e59f008c 	ldr	r0, [pc, #140]	; 2464c <print_fatfs_error+0x1d0>
   245bc:	ebffff64 	bl	24354 <uart_puts>
   245c0:	ea00000b 	b	245f4 <print_fatfs_error+0x178>
        case FR_NOT_ENOUGH_CORE: uart_puts("(17) LFN working buffer could not be allocated"); break;
   245c4:	e59f0084 	ldr	r0, [pc, #132]	; 24650 <print_fatfs_error+0x1d4>
   245c8:	ebffff61 	bl	24354 <uart_puts>
   245cc:	ea000008 	b	245f4 <print_fatfs_error+0x178>
        case FR_TOO_MANY_OPEN_FILES: uart_puts("(18) Number of open files > FF_FS_LOCK"); break;
   245d0:	e59f007c 	ldr	r0, [pc, #124]	; 24654 <print_fatfs_error+0x1d8>
   245d4:	ebffff5e 	bl	24354 <uart_puts>
   245d8:	ea000005 	b	245f4 <print_fatfs_error+0x178>
        case FR_INVALID_PARAMETER: uart_puts("(19) Given parameter is invalid"); break;
   245dc:	e59f0074 	ldr	r0, [pc, #116]	; 24658 <print_fatfs_error+0x1dc>
   245e0:	ebffff5b 	bl	24354 <uart_puts>
   245e4:	ea000002 	b	245f4 <print_fatfs_error+0x178>
        default: uart_puts("Unknown error code"); break;
   245e8:	e59f006c 	ldr	r0, [pc, #108]	; 2465c <print_fatfs_error+0x1e0>
   245ec:	ebffff58 	bl	24354 <uart_puts>
   245f0:	e320f000 	nop	{0}
    }
    uart_puts("\n");
   245f4:	e59f0064 	ldr	r0, [pc, #100]	; 24660 <print_fatfs_error+0x1e4>
   245f8:	ebffff55 	bl	24354 <uart_puts>
}
   245fc:	e320f000 	nop	{0}
   24600:	e24bd004 	sub	sp, fp, #4
   24604:	e8bd8800 	pop	{fp, pc}
   24608:	0002b818 	andeq	fp, r2, r8, lsl r8
   2460c:	0002b828 	andeq	fp, r2, r8, lsr #16
   24610:	0002b838 	andeq	fp, r2, r8, lsr r8
   24614:	0002b874 	andeq	fp, r2, r4, ror r8
   24618:	0002b88c 	andeq	fp, r2, ip, lsl #17
   2461c:	0002b8b0 			; <UNDEFINED> instruction: 0x0002b8b0
   24620:	0002b8cc 	andeq	fp, r2, ip, asr #17
   24624:	0002b8e8 	andeq	fp, r2, r8, ror #17
   24628:	0002b90c 	andeq	fp, r2, ip, lsl #18
   2462c:	0002b94c 	andeq	fp, r2, ip, asr #18
   24630:	0002b978 	andeq	fp, r2, r8, ror r9
   24634:	0002b9a4 	andeq	fp, r2, r4, lsr #19
   24638:	0002b9d0 	ldrdeq	fp, [r2], -r0
   2463c:	0002b9fc 	strdeq	fp, [r2], -ip
   24640:	0002ba20 	andeq	fp, r2, r0, lsr #20
   24644:	0002ba44 	andeq	fp, r2, r4, asr #20
   24648:	0002ba74 	andeq	fp, r2, r4, ror sl
   2464c:	0002babc 			; <UNDEFINED> instruction: 0x0002babc
   24650:	0002bb00 	andeq	fp, r2, r0, lsl #22
   24654:	0002bb30 	andeq	fp, r2, r0, lsr fp
   24658:	0002bb58 	andeq	fp, r2, r8, asr fp
   2465c:	0002bb78 	andeq	fp, r2, r8, ror fp
   24660:	0002bb8c 	andeq	fp, r2, ip, lsl #23

00024664 <uart_init>:

void uart_init() {
   24664:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24668:	e28db000 	add	fp, sp, #0
    // 对于 QEMU versatilepb 平台，一般 UART 默认已初始化
    // 你可以留空，或者设定波特率等（如 PL011 初始化）
}
   2466c:	e320f000 	nop	{0}
   24670:	e28bd000 	add	sp, fp, #0
   24674:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24678:	e12fff1e 	bx	lr

0002467c <task1>:

void task1(void *pParam) {
   2467c:	e92d4800 	push	{fp, lr}
   24680:	e28db004 	add	fp, sp, #4
   24684:	e24dd010 	sub	sp, sp, #16
   24688:	e50b0010 	str	r0, [fp, #-16]
    (void)pParam;  /* 防止未使用参数警告 */

    int i = 0;
   2468c:	e3a03000 	mov	r3, #0
   24690:	e50b3008 	str	r3, [fp, #-8]
    while(1) {
        i++;
   24694:	e51b3008 	ldr	r3, [fp, #-8]
   24698:	e2833001 	add	r3, r3, #1
   2469c:	e50b3008 	str	r3, [fp, #-8]
        SetGpio(16, 1);
   246a0:	e3a01001 	mov	r1, #1
   246a4:	e3a00010 	mov	r0, #16
   246a8:	ebfffcb2 	bl	23978 <SetGpio>
        vTaskDelay(200);
   246ac:	e3a000c8 	mov	r0, #200	; 0xc8
   246b0:	ebfff651 	bl	21ffc <vTaskDelay>
        i++;
   246b4:	eafffff6 	b	24694 <task1+0x18>

000246b8 <task2>:
    }
}

void task2(void *pParam) {
   246b8:	e92d4800 	push	{fp, lr}
   246bc:	e28db004 	add	fp, sp, #4
   246c0:	e24dd010 	sub	sp, sp, #16
   246c4:	e50b0010 	str	r0, [fp, #-16]
    (void)pParam;  /* 防止未使用参数警告 */

    int i = 0;
   246c8:	e3a03000 	mov	r3, #0
   246cc:	e50b3008 	str	r3, [fp, #-8]
    while(1) {
        i++;
   246d0:	e51b3008 	ldr	r3, [fp, #-8]
   246d4:	e2833001 	add	r3, r3, #1
   246d8:	e50b3008 	str	r3, [fp, #-8]
        vTaskDelay(100);
   246dc:	e3a00064 	mov	r0, #100	; 0x64
   246e0:	ebfff645 	bl	21ffc <vTaskDelay>
        SetGpio(16, 0);
   246e4:	e3a01000 	mov	r1, #0
   246e8:	e3a00010 	mov	r0, #16
   246ec:	ebfffca1 	bl	23978 <SetGpio>
        vTaskDelay(100);
   246f0:	e3a00064 	mov	r0, #100	; 0x64
   246f4:	ebfff640 	bl	21ffc <vTaskDelay>
        i++;
   246f8:	eafffff4 	b	246d0 <task2+0x18>

000246fc <fatfs_task>:
    }
}

void fatfs_task(void *pParam) {
   246fc:	e92d4800 	push	{fp, lr}
   24700:	e28db004 	add	fp, sp, #4
   24704:	e24dde52 	sub	sp, sp, #1312	; 0x520
   24708:	e24dd008 	sub	sp, sp, #8
   2470c:	e50b0528 	str	r0, [fp, #-1320]	; 0xfffffad8
    BYTE work[FF_MAX_SS]; /* 工作区 */
    FILINFO fno;        /* 文件信息对象 */
    
    (void)pParam;       /* 防止未使用参数警告 */
    
    uart_puts("FatFS Task Started\n");
   24710:	e59f02f4 	ldr	r0, [pc, #756]	; 24a0c <fatfs_task+0x310>
   24714:	ebffff0e 	bl	24354 <uart_puts>
    
    /* 初始化磁盘 */
    disk_initialize(0);
   24718:	e3a00000 	mov	r0, #0
   2471c:	eb0019e1 	bl	2aea8 <disk_initialize>
    
    /* 确保首先清除挂载 */
    f_mount(NULL, "", 0);
   24720:	e3a02000 	mov	r2, #0
   24724:	e59f12e4 	ldr	r1, [pc, #740]	; 24a10 <fatfs_task+0x314>
   24728:	e3a00000 	mov	r0, #0
   2472c:	eb000c56 	bl	2788c <f_mount>
    
    /* 格式化磁盘 */
    uart_puts("Formatting disk...\n");
   24730:	e59f02dc 	ldr	r0, [pc, #732]	; 24a14 <fatfs_task+0x318>
   24734:	ebffff06 	bl	24354 <uart_puts>
    MKFS_PARM fmt_opt;
    memset(&fmt_opt, 0, sizeof(fmt_opt));
   24738:	e24b3e51 	sub	r3, fp, #1296	; 0x510
   2473c:	e2433004 	sub	r3, r3, #4
   24740:	e243300c 	sub	r3, r3, #12
   24744:	e3a02010 	mov	r2, #16
   24748:	e3a01000 	mov	r1, #0
   2474c:	e1a00003 	mov	r0, r3
   24750:	eb001b43 	bl	2b464 <memset>
    fmt_opt.fmt = FM_FAT | FM_SFD;  /* FAT格式 + 单FAT表 */
   24754:	e3a03009 	mov	r3, #9
   24758:	e54b3520 	strb	r3, [fp, #-1312]	; 0xfffffae0
    
    res = f_mkfs("", &fmt_opt, work, sizeof(work));
   2475c:	e24b2e4f 	sub	r2, fp, #1264	; 0x4f0
   24760:	e2422004 	sub	r2, r2, #4
   24764:	e2422004 	sub	r2, r2, #4
   24768:	e24b1e51 	sub	r1, fp, #1296	; 0x510
   2476c:	e2411004 	sub	r1, r1, #4
   24770:	e241100c 	sub	r1, r1, #12
   24774:	e3a03c02 	mov	r3, #512	; 0x200
   24778:	e59f0290 	ldr	r0, [pc, #656]	; 24a10 <fatfs_task+0x314>
   2477c:	eb001613 	bl	29fd0 <f_mkfs>
   24780:	e1a03000 	mov	r3, r0
   24784:	e54b3005 	strb	r3, [fp, #-5]
    uart_puts("Format result: ");
   24788:	e59f0288 	ldr	r0, [pc, #648]	; 24a18 <fatfs_task+0x31c>
   2478c:	ebfffef0 	bl	24354 <uart_puts>
    if (res != FR_OK) {
   24790:	e55b3005 	ldrb	r3, [fp, #-5]
   24794:	e3530000 	cmp	r3, #0
   24798:	0a000005 	beq	247b4 <fatfs_task+0xb8>
        print_fatfs_error(res);
   2479c:	e55b3005 	ldrb	r3, [fp, #-5]
   247a0:	e1a00003 	mov	r0, r3
   247a4:	ebffff34 	bl	2447c <print_fatfs_error>
        vTaskDelete(NULL);
   247a8:	e3a00000 	mov	r0, #0
   247ac:	ebfff58e 	bl	21dec <vTaskDelete>
        return;
   247b0:	ea000093 	b	24a04 <fatfs_task+0x308>
    } else {
        uart_puts("Success\n");
   247b4:	e59f0260 	ldr	r0, [pc, #608]	; 24a1c <fatfs_task+0x320>
   247b8:	ebfffee5 	bl	24354 <uart_puts>
    }
    
    /* 挂载文件系统 */
    uart_puts("Mounting filesystem...\n");
   247bc:	e59f025c 	ldr	r0, [pc, #604]	; 24a20 <fatfs_task+0x324>
   247c0:	ebfffee3 	bl	24354 <uart_puts>
    res = f_mount(&fs, "", 1);  /* 1: 立即挂载 */
   247c4:	e24b3f8f 	sub	r3, fp, #572	; 0x23c
   247c8:	e3a02001 	mov	r2, #1
   247cc:	e59f123c 	ldr	r1, [pc, #572]	; 24a10 <fatfs_task+0x314>
   247d0:	e1a00003 	mov	r0, r3
   247d4:	eb000c2c 	bl	2788c <f_mount>
   247d8:	e1a03000 	mov	r3, r0
   247dc:	e54b3005 	strb	r3, [fp, #-5]
    
    if (res != FR_OK) {
   247e0:	e55b3005 	ldrb	r3, [fp, #-5]
   247e4:	e3530000 	cmp	r3, #0
   247e8:	0a000007 	beq	2480c <fatfs_task+0x110>
        uart_puts("Mount failed: ");
   247ec:	e59f0230 	ldr	r0, [pc, #560]	; 24a24 <fatfs_task+0x328>
   247f0:	ebfffed7 	bl	24354 <uart_puts>
        print_fatfs_error(res);
   247f4:	e55b3005 	ldrb	r3, [fp, #-5]
   247f8:	e1a00003 	mov	r0, r3
   247fc:	ebffff1e 	bl	2447c <print_fatfs_error>
        vTaskDelete(NULL);
   24800:	e3a00000 	mov	r0, #0
   24804:	ebfff578 	bl	21dec <vTaskDelete>
        return;
   24808:	ea00007d 	b	24a04 <fatfs_task+0x308>
    }
    
    uart_puts("Filesystem mounted successfully\n");
   2480c:	e59f0214 	ldr	r0, [pc, #532]	; 24a28 <fatfs_task+0x32c>
   24810:	ebfffecf 	bl	24354 <uart_puts>
    
    /* 尝试写一个简单的测试文件 */
    uart_puts("Creating test file...\n");
   24814:	e59f0210 	ldr	r0, [pc, #528]	; 24a2c <fatfs_task+0x330>
   24818:	ebfffecd 	bl	24354 <uart_puts>
    res = f_open(&fil, "TEST.TXT", FA_CREATE_ALWAYS | FA_WRITE);
   2481c:	e24b3f99 	sub	r3, fp, #612	; 0x264
   24820:	e3a0200a 	mov	r2, #10
   24824:	e59f1204 	ldr	r1, [pc, #516]	; 24a30 <fatfs_task+0x334>
   24828:	e1a00003 	mov	r0, r3
   2482c:	eb000c55 	bl	27988 <f_open>
   24830:	e1a03000 	mov	r3, r0
   24834:	e54b3005 	strb	r3, [fp, #-5]
    
    if (res != FR_OK) {
   24838:	e55b3005 	ldrb	r3, [fp, #-5]
   2483c:	e3530000 	cmp	r3, #0
   24840:	0a00001b 	beq	248b4 <fatfs_task+0x1b8>
        uart_puts("Failed to create file: ");
   24844:	e59f01e8 	ldr	r0, [pc, #488]	; 24a34 <fatfs_task+0x338>
   24848:	ebfffec1 	bl	24354 <uart_puts>
        print_fatfs_error(res);
   2484c:	e55b3005 	ldrb	r3, [fp, #-5]
   24850:	e1a00003 	mov	r0, r3
   24854:	ebffff08 	bl	2447c <print_fatfs_error>
        
        /* 检查根目录访问 */
        uart_puts("Checking root directory...\n");
   24858:	e59f01d8 	ldr	r0, [pc, #472]	; 24a38 <fatfs_task+0x33c>
   2485c:	ebfffebc 	bl	24354 <uart_puts>
        res = f_opendir(&dir, "/");
   24860:	e24b3e29 	sub	r3, fp, #656	; 0x290
   24864:	e59f11d0 	ldr	r1, [pc, #464]	; 24a3c <fatfs_task+0x340>
   24868:	e1a00003 	mov	r0, r3
   2486c:	eb001115 	bl	28cc8 <f_opendir>
   24870:	e1a03000 	mov	r3, r0
   24874:	e54b3005 	strb	r3, [fp, #-5]
        if (res != FR_OK) {
   24878:	e55b3005 	ldrb	r3, [fp, #-5]
   2487c:	e3530000 	cmp	r3, #0
   24880:	0a000005 	beq	2489c <fatfs_task+0x1a0>
            uart_puts("Failed to open root directory: ");
   24884:	e59f01b4 	ldr	r0, [pc, #436]	; 24a40 <fatfs_task+0x344>
   24888:	ebfffeb1 	bl	24354 <uart_puts>
            print_fatfs_error(res);
   2488c:	e55b3005 	ldrb	r3, [fp, #-5]
   24890:	e1a00003 	mov	r0, r3
   24894:	ebfffef8 	bl	2447c <print_fatfs_error>
   24898:	ea000056 	b	249f8 <fatfs_task+0x2fc>
        } else {
            uart_puts("Root directory opened successfully\n");
   2489c:	e59f01a0 	ldr	r0, [pc, #416]	; 24a44 <fatfs_task+0x348>
   248a0:	ebfffeab 	bl	24354 <uart_puts>
            f_closedir(&dir);
   248a4:	e24b3e29 	sub	r3, fp, #656	; 0x290
   248a8:	e1a00003 	mov	r0, r3
   248ac:	eb001156 	bl	28e0c <f_closedir>
   248b0:	ea000050 	b	249f8 <fatfs_task+0x2fc>
        }
    } else {
        const char *message = "Hello from FreeRTOS and FatFS integration!\n";
   248b4:	e59f318c 	ldr	r3, [pc, #396]	; 24a48 <fatfs_task+0x34c>
   248b8:	e50b300c 	str	r3, [fp, #-12]
        res = f_write(&fil, message, strlen(message), &bw);
   248bc:	e51b000c 	ldr	r0, [fp, #-12]
   248c0:	eb001b82 	bl	2b6d0 <strlen>
   248c4:	e1a02000 	mov	r2, r0
   248c8:	e24b3fa5 	sub	r3, fp, #660	; 0x294
   248cc:	e24b0f99 	sub	r0, fp, #612	; 0x264
   248d0:	e51b100c 	ldr	r1, [fp, #-12]
   248d4:	eb000e54 	bl	2822c <f_write>
   248d8:	e1a03000 	mov	r3, r0
   248dc:	e54b3005 	strb	r3, [fp, #-5]
        
        if (res != FR_OK) {
   248e0:	e55b3005 	ldrb	r3, [fp, #-5]
   248e4:	e3530000 	cmp	r3, #0
   248e8:	0a000005 	beq	24904 <fatfs_task+0x208>
            uart_puts("Failed to write to file: ");
   248ec:	e59f0158 	ldr	r0, [pc, #344]	; 24a4c <fatfs_task+0x350>
   248f0:	ebfffe97 	bl	24354 <uart_puts>
            print_fatfs_error(res);
   248f4:	e55b3005 	ldrb	r3, [fp, #-5]
   248f8:	e1a00003 	mov	r0, r3
   248fc:	ebfffede 	bl	2447c <print_fatfs_error>
   24900:	ea000007 	b	24924 <fatfs_task+0x228>
        } else {
            uart_puts("File written successfully, ");
   24904:	e59f0144 	ldr	r0, [pc, #324]	; 24a50 <fatfs_task+0x354>
   24908:	ebfffe91 	bl	24354 <uart_puts>
            uart_print_num(bw);
   2490c:	e51b3294 	ldr	r3, [fp, #-660]	; 0xfffffd6c
   24910:	e6ef3073 	uxtb	r3, r3
   24914:	e1a00003 	mov	r0, r3
   24918:	ebfffea0 	bl	243a0 <uart_print_num>
            uart_puts(" bytes written\n");
   2491c:	e59f0130 	ldr	r0, [pc, #304]	; 24a54 <fatfs_task+0x358>
   24920:	ebfffe8b 	bl	24354 <uart_puts>
        }
        
        f_sync(&fil);  /* 确保数据写入磁盘 */
   24924:	e24b3f99 	sub	r3, fp, #612	; 0x264
   24928:	e1a00003 	mov	r0, r3
   2492c:	eb000f7f 	bl	28730 <f_sync>
        f_close(&fil);
   24930:	e24b3f99 	sub	r3, fp, #612	; 0x264
   24934:	e1a00003 	mov	r0, r3
   24938:	eb000fd2 	bl	28888 <f_close>
        
        /* 尝试读取文件 */
        uart_puts("Opening file for reading...\n");
   2493c:	e59f0114 	ldr	r0, [pc, #276]	; 24a58 <fatfs_task+0x35c>
   24940:	ebfffe83 	bl	24354 <uart_puts>
        res = f_open(&fil, "TEST.TXT", FA_READ);
   24944:	e24b3f99 	sub	r3, fp, #612	; 0x264
   24948:	e3a02001 	mov	r2, #1
   2494c:	e59f10dc 	ldr	r1, [pc, #220]	; 24a30 <fatfs_task+0x334>
   24950:	e1a00003 	mov	r0, r3
   24954:	eb000c0b 	bl	27988 <f_open>
   24958:	e1a03000 	mov	r3, r0
   2495c:	e54b3005 	strb	r3, [fp, #-5]
        
        if (res != FR_OK) {
   24960:	e55b3005 	ldrb	r3, [fp, #-5]
   24964:	e3530000 	cmp	r3, #0
   24968:	0a000005 	beq	24984 <fatfs_task+0x288>
            uart_puts("Failed to open file for reading: ");
   2496c:	e59f00e8 	ldr	r0, [pc, #232]	; 24a5c <fatfs_task+0x360>
   24970:	ebfffe77 	bl	24354 <uart_puts>
            print_fatfs_error(res);
   24974:	e55b3005 	ldrb	r3, [fp, #-5]
   24978:	e1a00003 	mov	r0, r3
   2497c:	ebfffebe 	bl	2447c <print_fatfs_error>
   24980:	ea00001c 	b	249f8 <fatfs_task+0x2fc>
        } else {
            memset(buffer, 0, sizeof(buffer));
   24984:	e24b3fbe 	sub	r3, fp, #760	; 0x2f8
   24988:	e3a02064 	mov	r2, #100	; 0x64
   2498c:	e3a01000 	mov	r1, #0
   24990:	e1a00003 	mov	r0, r3
   24994:	eb001ab2 	bl	2b464 <memset>
            
            res = f_read(&fil, buffer, sizeof(buffer), &bw);
   24998:	e24b3fa5 	sub	r3, fp, #660	; 0x294
   2499c:	e24b1fbe 	sub	r1, fp, #760	; 0x2f8
   249a0:	e24b0f99 	sub	r0, fp, #612	; 0x264
   249a4:	e3a02064 	mov	r2, #100	; 0x64
   249a8:	eb000d28 	bl	27e50 <f_read>
   249ac:	e1a03000 	mov	r3, r0
   249b0:	e54b3005 	strb	r3, [fp, #-5]
            
            if (res != FR_OK) {
   249b4:	e55b3005 	ldrb	r3, [fp, #-5]
   249b8:	e3530000 	cmp	r3, #0
   249bc:	0a000005 	beq	249d8 <fatfs_task+0x2dc>
                uart_puts("Failed to read file: ");
   249c0:	e59f0098 	ldr	r0, [pc, #152]	; 24a60 <fatfs_task+0x364>
   249c4:	ebfffe62 	bl	24354 <uart_puts>
                print_fatfs_error(res);
   249c8:	e55b3005 	ldrb	r3, [fp, #-5]
   249cc:	e1a00003 	mov	r0, r3
   249d0:	ebfffea9 	bl	2447c <print_fatfs_error>
   249d4:	ea000004 	b	249ec <fatfs_task+0x2f0>
            } else {
                uart_puts("File content: ");
   249d8:	e59f0084 	ldr	r0, [pc, #132]	; 24a64 <fatfs_task+0x368>
   249dc:	ebfffe5c 	bl	24354 <uart_puts>
                uart_puts(buffer);
   249e0:	e24b3fbe 	sub	r3, fp, #760	; 0x2f8
   249e4:	e1a00003 	mov	r0, r3
   249e8:	ebfffe59 	bl	24354 <uart_puts>
            }
            
            f_close(&fil);
   249ec:	e24b3f99 	sub	r3, fp, #612	; 0x264
   249f0:	e1a00003 	mov	r0, r3
   249f4:	eb000fa3 	bl	28888 <f_close>
        }
    }
    
    /* 任务完成后循环等待 */
    while(1) {
        vTaskDelay(1000);
   249f8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   249fc:	ebfff57e 	bl	21ffc <vTaskDelay>
   24a00:	eafffffc 	b	249f8 <fatfs_task+0x2fc>
    }
}
   24a04:	e24bd004 	sub	sp, fp, #4
   24a08:	e8bd8800 	pop	{fp, pc}
   24a0c:	0002bb90 	muleq	r2, r0, fp
   24a10:	0002bba4 	andeq	fp, r2, r4, lsr #23
   24a14:	0002bba8 	andeq	fp, r2, r8, lsr #23
   24a18:	0002bbbc 			; <UNDEFINED> instruction: 0x0002bbbc
   24a1c:	0002bbcc 	andeq	fp, r2, ip, asr #23
   24a20:	0002bbd8 	ldrdeq	fp, [r2], -r8
   24a24:	0002bbf0 	strdeq	fp, [r2], -r0
   24a28:	0002bc00 	andeq	fp, r2, r0, lsl #24
   24a2c:	0002bc24 	andeq	fp, r2, r4, lsr #24
   24a30:	0002bc3c 	andeq	fp, r2, ip, lsr ip
   24a34:	0002bc48 	andeq	fp, r2, r8, asr #24
   24a38:	0002bc60 	andeq	fp, r2, r0, ror #24
   24a3c:	0002bc7c 	andeq	fp, r2, ip, ror ip
   24a40:	0002bc80 	andeq	fp, r2, r0, lsl #25
   24a44:	0002bca0 	andeq	fp, r2, r0, lsr #25
   24a48:	0002bcc4 	andeq	fp, r2, r4, asr #25
   24a4c:	0002bcf0 	strdeq	fp, [r2], -r0
   24a50:	0002bd0c 	andeq	fp, r2, ip, lsl #26
   24a54:	0002bd28 	andeq	fp, r2, r8, lsr #26
   24a58:	0002bd38 	andeq	fp, r2, r8, lsr sp
   24a5c:	0002bd58 	andeq	fp, r2, r8, asr sp
   24a60:	0002bd7c 	andeq	fp, r2, ip, ror sp
   24a64:	0002bd94 	muleq	r2, r4, sp

00024a68 <main>:
 *
 *	-- Absolutely nothing wrong with this being called main(), just it doesn't have
 *	-- the same prototype as you'd see in a linux program.
 **/
void main (void)
{
   24a68:	e92d4800 	push	{fp, lr}
   24a6c:	e28db004 	add	fp, sp, #4
   24a70:	e24dd010 	sub	sp, sp, #16
    uart_init();
   24a74:	ebfffefa 	bl	24664 <uart_init>
    uart_puts("Hello from FreeRTOS with FatFS!\n");
   24a78:	e59f00b0 	ldr	r0, [pc, #176]	; 24b30 <main+0xc8>
   24a7c:	ebfffe34 	bl	24354 <uart_puts>

    SetGpioFunction(16, 1);			// RDY led
   24a80:	e3a01001 	mov	r1, #1
   24a84:	e3a00010 	mov	r0, #16
   24a88:	ebfffb76 	bl	23868 <SetGpioFunction>

    xTaskCreate(task1, (const signed char *)"LED_0", 128, NULL, 0, NULL);
   24a8c:	e3a03000 	mov	r3, #0
   24a90:	e58d300c 	str	r3, [sp, #12]
   24a94:	e3a03000 	mov	r3, #0
   24a98:	e58d3008 	str	r3, [sp, #8]
   24a9c:	e3a03000 	mov	r3, #0
   24aa0:	e58d3004 	str	r3, [sp, #4]
   24aa4:	e3a03000 	mov	r3, #0
   24aa8:	e58d3000 	str	r3, [sp]
   24aac:	e3a03000 	mov	r3, #0
   24ab0:	e3a02080 	mov	r2, #128	; 0x80
   24ab4:	e59f1078 	ldr	r1, [pc, #120]	; 24b34 <main+0xcc>
   24ab8:	e59f0078 	ldr	r0, [pc, #120]	; 24b38 <main+0xd0>
   24abc:	ebfff437 	bl	21ba0 <xTaskGenericCreate>
    xTaskCreate(task2, (const signed char *)"LED_1", 128, NULL, 0, NULL);
   24ac0:	e3a03000 	mov	r3, #0
   24ac4:	e58d300c 	str	r3, [sp, #12]
   24ac8:	e3a03000 	mov	r3, #0
   24acc:	e58d3008 	str	r3, [sp, #8]
   24ad0:	e3a03000 	mov	r3, #0
   24ad4:	e58d3004 	str	r3, [sp, #4]
   24ad8:	e3a03000 	mov	r3, #0
   24adc:	e58d3000 	str	r3, [sp]
   24ae0:	e3a03000 	mov	r3, #0
   24ae4:	e3a02080 	mov	r2, #128	; 0x80
   24ae8:	e59f104c 	ldr	r1, [pc, #76]	; 24b3c <main+0xd4>
   24aec:	e59f004c 	ldr	r0, [pc, #76]	; 24b40 <main+0xd8>
   24af0:	ebfff42a 	bl	21ba0 <xTaskGenericCreate>
    xTaskCreate(fatfs_task, (const signed char *)"FatFS", 512, NULL, 1, NULL);
   24af4:	e3a03000 	mov	r3, #0
   24af8:	e58d300c 	str	r3, [sp, #12]
   24afc:	e3a03000 	mov	r3, #0
   24b00:	e58d3008 	str	r3, [sp, #8]
   24b04:	e3a03000 	mov	r3, #0
   24b08:	e58d3004 	str	r3, [sp, #4]
   24b0c:	e3a03001 	mov	r3, #1
   24b10:	e58d3000 	str	r3, [sp]
   24b14:	e3a03000 	mov	r3, #0
   24b18:	e3a02c02 	mov	r2, #512	; 0x200
   24b1c:	e59f1020 	ldr	r1, [pc, #32]	; 24b44 <main+0xdc>
   24b20:	e59f0020 	ldr	r0, [pc, #32]	; 24b48 <main+0xe0>
   24b24:	ebfff41d 	bl	21ba0 <xTaskGenericCreate>
    	
    vTaskStartScheduler();
   24b28:	ebfff6b9 	bl	22614 <vTaskStartScheduler>

    /*
     *	We should never get here, but just in case something goes wrong,
     *	we'll place the CPU into a safe loop.
     */
    while(1) {
   24b2c:	eafffffe 	b	24b2c <main+0xc4>
   24b30:	0002bda4 	andeq	fp, r2, r4, lsr #27
   24b34:	0002bdc8 	andeq	fp, r2, r8, asr #27
   24b38:	0002467c 	andeq	r4, r2, ip, ror r6
   24b3c:	0002bdd0 	ldrdeq	fp, [r2], -r0
   24b40:	000246b8 			; <UNDEFINED> instruction: 0x000246b8
   24b44:	0002bdd8 	ldrdeq	fp, [r2], -r8
   24b48:	000246fc 	strdeq	r4, [r2], -ip

00024b4c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
   24b4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24b50:	e28db000 	add	fp, sp, #0
   24b54:	e24dd014 	sub	sp, sp, #20
   24b58:	e50b0010 	str	r0, [fp, #-16]
	WORD rv;

	rv = ptr[1];
   24b5c:	e51b3010 	ldr	r3, [fp, #-16]
   24b60:	e2833001 	add	r3, r3, #1
   24b64:	e5d33000 	ldrb	r3, [r3]
   24b68:	e14b30b6 	strh	r3, [fp, #-6]
	rv = rv << 8 | ptr[0];
   24b6c:	e15b30b6 	ldrh	r3, [fp, #-6]
   24b70:	e1a03403 	lsl	r3, r3, #8
   24b74:	e6bf2073 	sxth	r2, r3
   24b78:	e51b3010 	ldr	r3, [fp, #-16]
   24b7c:	e5d33000 	ldrb	r3, [r3]
   24b80:	e6bf3073 	sxth	r3, r3
   24b84:	e1823003 	orr	r3, r2, r3
   24b88:	e6bf3073 	sxth	r3, r3
   24b8c:	e14b30b6 	strh	r3, [fp, #-6]
	return rv;
   24b90:	e15b30b6 	ldrh	r3, [fp, #-6]
}
   24b94:	e1a00003 	mov	r0, r3
   24b98:	e28bd000 	add	sp, fp, #0
   24b9c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24ba0:	e12fff1e 	bx	lr

00024ba4 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
   24ba4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24ba8:	e28db000 	add	fp, sp, #0
   24bac:	e24dd014 	sub	sp, sp, #20
   24bb0:	e50b0010 	str	r0, [fp, #-16]
	DWORD rv;

	rv = ptr[3];
   24bb4:	e51b3010 	ldr	r3, [fp, #-16]
   24bb8:	e2833003 	add	r3, r3, #3
   24bbc:	e5d33000 	ldrb	r3, [r3]
   24bc0:	e50b3008 	str	r3, [fp, #-8]
	rv = rv << 8 | ptr[2];
   24bc4:	e51b3008 	ldr	r3, [fp, #-8]
   24bc8:	e1a03403 	lsl	r3, r3, #8
   24bcc:	e51b2010 	ldr	r2, [fp, #-16]
   24bd0:	e2822002 	add	r2, r2, #2
   24bd4:	e5d22000 	ldrb	r2, [r2]
   24bd8:	e1833002 	orr	r3, r3, r2
   24bdc:	e50b3008 	str	r3, [fp, #-8]
	rv = rv << 8 | ptr[1];
   24be0:	e51b3008 	ldr	r3, [fp, #-8]
   24be4:	e1a03403 	lsl	r3, r3, #8
   24be8:	e51b2010 	ldr	r2, [fp, #-16]
   24bec:	e2822001 	add	r2, r2, #1
   24bf0:	e5d22000 	ldrb	r2, [r2]
   24bf4:	e1833002 	orr	r3, r3, r2
   24bf8:	e50b3008 	str	r3, [fp, #-8]
	rv = rv << 8 | ptr[0];
   24bfc:	e51b3008 	ldr	r3, [fp, #-8]
   24c00:	e1a03403 	lsl	r3, r3, #8
   24c04:	e51b2010 	ldr	r2, [fp, #-16]
   24c08:	e5d22000 	ldrb	r2, [r2]
   24c0c:	e1833002 	orr	r3, r3, r2
   24c10:	e50b3008 	str	r3, [fp, #-8]
	return rv;
   24c14:	e51b3008 	ldr	r3, [fp, #-8]
}
   24c18:	e1a00003 	mov	r0, r3
   24c1c:	e28bd000 	add	sp, fp, #0
   24c20:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24c24:	e12fff1e 	bx	lr

00024c28 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
   24c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24c2c:	e28db000 	add	fp, sp, #0
   24c30:	e24dd00c 	sub	sp, sp, #12
   24c34:	e50b0008 	str	r0, [fp, #-8]
   24c38:	e1a03001 	mov	r3, r1
   24c3c:	e14b30ba 	strh	r3, [fp, #-10]
	*ptr++ = (BYTE)val; val >>= 8;
   24c40:	e51b3008 	ldr	r3, [fp, #-8]
   24c44:	e2832001 	add	r2, r3, #1
   24c48:	e50b2008 	str	r2, [fp, #-8]
   24c4c:	e15b20ba 	ldrh	r2, [fp, #-10]
   24c50:	e6ef2072 	uxtb	r2, r2
   24c54:	e5c32000 	strb	r2, [r3]
   24c58:	e15b30ba 	ldrh	r3, [fp, #-10]
   24c5c:	e1a03423 	lsr	r3, r3, #8
   24c60:	e14b30ba 	strh	r3, [fp, #-10]
	*ptr++ = (BYTE)val;
   24c64:	e51b3008 	ldr	r3, [fp, #-8]
   24c68:	e2832001 	add	r2, r3, #1
   24c6c:	e50b2008 	str	r2, [fp, #-8]
   24c70:	e15b20ba 	ldrh	r2, [fp, #-10]
   24c74:	e6ef2072 	uxtb	r2, r2
   24c78:	e5c32000 	strb	r2, [r3]
}
   24c7c:	e320f000 	nop	{0}
   24c80:	e28bd000 	add	sp, fp, #0
   24c84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24c88:	e12fff1e 	bx	lr

00024c8c <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
   24c8c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24c90:	e28db000 	add	fp, sp, #0
   24c94:	e24dd00c 	sub	sp, sp, #12
   24c98:	e50b0008 	str	r0, [fp, #-8]
   24c9c:	e50b100c 	str	r1, [fp, #-12]
	*ptr++ = (BYTE)val; val >>= 8;
   24ca0:	e51b3008 	ldr	r3, [fp, #-8]
   24ca4:	e2832001 	add	r2, r3, #1
   24ca8:	e50b2008 	str	r2, [fp, #-8]
   24cac:	e51b200c 	ldr	r2, [fp, #-12]
   24cb0:	e6ef2072 	uxtb	r2, r2
   24cb4:	e5c32000 	strb	r2, [r3]
   24cb8:	e51b300c 	ldr	r3, [fp, #-12]
   24cbc:	e1a03423 	lsr	r3, r3, #8
   24cc0:	e50b300c 	str	r3, [fp, #-12]
	*ptr++ = (BYTE)val; val >>= 8;
   24cc4:	e51b3008 	ldr	r3, [fp, #-8]
   24cc8:	e2832001 	add	r2, r3, #1
   24ccc:	e50b2008 	str	r2, [fp, #-8]
   24cd0:	e51b200c 	ldr	r2, [fp, #-12]
   24cd4:	e6ef2072 	uxtb	r2, r2
   24cd8:	e5c32000 	strb	r2, [r3]
   24cdc:	e51b300c 	ldr	r3, [fp, #-12]
   24ce0:	e1a03423 	lsr	r3, r3, #8
   24ce4:	e50b300c 	str	r3, [fp, #-12]
	*ptr++ = (BYTE)val; val >>= 8;
   24ce8:	e51b3008 	ldr	r3, [fp, #-8]
   24cec:	e2832001 	add	r2, r3, #1
   24cf0:	e50b2008 	str	r2, [fp, #-8]
   24cf4:	e51b200c 	ldr	r2, [fp, #-12]
   24cf8:	e6ef2072 	uxtb	r2, r2
   24cfc:	e5c32000 	strb	r2, [r3]
   24d00:	e51b300c 	ldr	r3, [fp, #-12]
   24d04:	e1a03423 	lsr	r3, r3, #8
   24d08:	e50b300c 	str	r3, [fp, #-12]
	*ptr++ = (BYTE)val;
   24d0c:	e51b3008 	ldr	r3, [fp, #-8]
   24d10:	e2832001 	add	r2, r3, #1
   24d14:	e50b2008 	str	r2, [fp, #-8]
   24d18:	e51b200c 	ldr	r2, [fp, #-12]
   24d1c:	e6ef2072 	uxtb	r2, r2
   24d20:	e5c32000 	strb	r2, [r3]
}
   24d24:	e320f000 	nop	{0}
   24d28:	e28bd000 	add	sp, fp, #0
   24d2c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24d30:	e12fff1e 	bx	lr

00024d34 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
   24d34:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24d38:	e28db000 	add	fp, sp, #0
   24d3c:	e24dd00c 	sub	sp, sp, #12
   24d40:	e1a03000 	mov	r3, r0
   24d44:	e54b3005 	strb	r3, [fp, #-5]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
   24d48:	e55b3005 	ldrb	r3, [fp, #-5]
   24d4c:	e3530000 	cmp	r3, #0
   24d50:	0a000001 	beq	24d5c <dbc_1st+0x28>
   24d54:	e3a03000 	mov	r3, #0
   24d58:	ea000000 	b	24d60 <dbc_1st+0x2c>
#endif
	return 0;
   24d5c:	e3a03000 	mov	r3, #0
}
   24d60:	e1a00003 	mov	r0, r3
   24d64:	e28bd000 	add	sp, fp, #0
   24d68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24d6c:	e12fff1e 	bx	lr

00024d70 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
   24d70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   24d74:	e28db000 	add	fp, sp, #0
   24d78:	e24dd00c 	sub	sp, sp, #12
   24d7c:	e1a03000 	mov	r3, r0
   24d80:	e54b3005 	strb	r3, [fp, #-5]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
   24d84:	e55b3005 	ldrb	r3, [fp, #-5]
   24d88:	e3530000 	cmp	r3, #0
   24d8c:	0a000001 	beq	24d98 <dbc_2nd+0x28>
   24d90:	e3a03000 	mov	r3, #0
   24d94:	ea000000 	b	24d9c <dbc_2nd+0x2c>
#endif
	return 0;
   24d98:	e3a03000 	mov	r3, #0
}
   24d9c:	e1a00003 	mov	r0, r3
   24da0:	e28bd000 	add	sp, fp, #0
   24da4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   24da8:	e12fff1e 	bx	lr

00024dac <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
   24dac:	e92d4800 	push	{fp, lr}
   24db0:	e28db004 	add	fp, sp, #4
   24db4:	e24dd010 	sub	sp, sp, #16
   24db8:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res = FR_OK;
   24dbc:	e3a03000 	mov	r3, #0
   24dc0:	e54b3005 	strb	r3, [fp, #-5]


	if (fs->wflag) {	/* Is the disk access window dirty? */
   24dc4:	e51b3010 	ldr	r3, [fp, #-16]
   24dc8:	e5d33004 	ldrb	r3, [r3, #4]
   24dcc:	e3530000 	cmp	r3, #0
   24dd0:	0a000028 	beq	24e78 <sync_window+0xcc>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
   24dd4:	e51b3010 	ldr	r3, [fp, #-16]
   24dd8:	e5d30001 	ldrb	r0, [r3, #1]
   24ddc:	e51b3010 	ldr	r3, [fp, #-16]
   24de0:	e2831030 	add	r1, r3, #48	; 0x30
   24de4:	e51b3010 	ldr	r3, [fp, #-16]
   24de8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   24dec:	e3a03001 	mov	r3, #1
   24df0:	eb001871 	bl	2afbc <disk_write>
   24df4:	e1a03000 	mov	r3, r0
   24df8:	e3530000 	cmp	r3, #0
   24dfc:	1a00001b 	bne	24e70 <sync_window+0xc4>
			fs->wflag = 0;	/* Clear window dirty flag */
   24e00:	e51b3010 	ldr	r3, [fp, #-16]
   24e04:	e3a02000 	mov	r2, #0
   24e08:	e5c32004 	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   24e0c:	e51b3010 	ldr	r3, [fp, #-16]
   24e10:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   24e14:	e51b3010 	ldr	r3, [fp, #-16]
   24e18:	e5933020 	ldr	r3, [r3, #32]
   24e1c:	e0422003 	sub	r2, r2, r3
   24e20:	e51b3010 	ldr	r3, [fp, #-16]
   24e24:	e5933018 	ldr	r3, [r3, #24]
   24e28:	e1520003 	cmp	r2, r3
   24e2c:	2a000011 	bcs	24e78 <sync_window+0xcc>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
   24e30:	e51b3010 	ldr	r3, [fp, #-16]
   24e34:	e5d33003 	ldrb	r3, [r3, #3]
   24e38:	e3530002 	cmp	r3, #2
   24e3c:	1a00000d 	bne	24e78 <sync_window+0xcc>
   24e40:	e51b3010 	ldr	r3, [fp, #-16]
   24e44:	e5d30001 	ldrb	r0, [r3, #1]
   24e48:	e51b3010 	ldr	r3, [fp, #-16]
   24e4c:	e2831030 	add	r1, r3, #48	; 0x30
   24e50:	e51b3010 	ldr	r3, [fp, #-16]
   24e54:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   24e58:	e51b3010 	ldr	r3, [fp, #-16]
   24e5c:	e5933018 	ldr	r3, [r3, #24]
   24e60:	e0822003 	add	r2, r2, r3
   24e64:	e3a03001 	mov	r3, #1
   24e68:	eb001853 	bl	2afbc <disk_write>
   24e6c:	ea000001 	b	24e78 <sync_window+0xcc>
			}
		} else {
			res = FR_DISK_ERR;
   24e70:	e3a03001 	mov	r3, #1
   24e74:	e54b3005 	strb	r3, [fp, #-5]
		}
	}
	return res;
   24e78:	e55b3005 	ldrb	r3, [fp, #-5]
}
   24e7c:	e1a00003 	mov	r0, r3
   24e80:	e24bd004 	sub	sp, fp, #4
   24e84:	e8bd8800 	pop	{fp, pc}

00024e88 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
   24e88:	e92d4800 	push	{fp, lr}
   24e8c:	e28db004 	add	fp, sp, #4
   24e90:	e24dd010 	sub	sp, sp, #16
   24e94:	e50b0010 	str	r0, [fp, #-16]
   24e98:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	FRESULT res = FR_OK;
   24e9c:	e3a03000 	mov	r3, #0
   24ea0:	e54b3005 	strb	r3, [fp, #-5]


	if (sect != fs->winsect) {	/* Window offset changed? */
   24ea4:	e51b3010 	ldr	r3, [fp, #-16]
   24ea8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   24eac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24eb0:	e1520003 	cmp	r2, r3
   24eb4:	0a000017 	beq	24f18 <move_window+0x90>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
   24eb8:	e51b0010 	ldr	r0, [fp, #-16]
   24ebc:	ebffffba 	bl	24dac <sync_window>
   24ec0:	e1a03000 	mov	r3, r0
   24ec4:	e54b3005 	strb	r3, [fp, #-5]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
   24ec8:	e55b3005 	ldrb	r3, [fp, #-5]
   24ecc:	e3530000 	cmp	r3, #0
   24ed0:	1a000010 	bne	24f18 <move_window+0x90>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
   24ed4:	e51b3010 	ldr	r3, [fp, #-16]
   24ed8:	e5d30001 	ldrb	r0, [r3, #1]
   24edc:	e51b3010 	ldr	r3, [fp, #-16]
   24ee0:	e2831030 	add	r1, r3, #48	; 0x30
   24ee4:	e3a03001 	mov	r3, #1
   24ee8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24eec:	eb001805 	bl	2af08 <disk_read>
   24ef0:	e1a03000 	mov	r3, r0
   24ef4:	e3530000 	cmp	r3, #0
   24ef8:	0a000003 	beq	24f0c <move_window+0x84>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
   24efc:	e3e03000 	mvn	r3, #0
   24f00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				res = FR_DISK_ERR;
   24f04:	e3a03001 	mov	r3, #1
   24f08:	e54b3005 	strb	r3, [fp, #-5]
			}
			fs->winsect = sect;
   24f0c:	e51b3010 	ldr	r3, [fp, #-16]
   24f10:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   24f14:	e583202c 	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
   24f18:	e55b3005 	ldrb	r3, [fp, #-5]
}
   24f1c:	e1a00003 	mov	r0, r3
   24f20:	e24bd004 	sub	sp, fp, #4
   24f24:	e8bd8800 	pop	{fp, pc}

00024f28 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
   24f28:	e92d4800 	push	{fp, lr}
   24f2c:	e28db004 	add	fp, sp, #4
   24f30:	e24dd010 	sub	sp, sp, #16
   24f34:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res;


	res = sync_window(fs);
   24f38:	e51b0010 	ldr	r0, [fp, #-16]
   24f3c:	ebffff9a 	bl	24dac <sync_window>
   24f40:	e1a03000 	mov	r3, r0
   24f44:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   24f48:	e55b3005 	ldrb	r3, [fp, #-5]
   24f4c:	e3530000 	cmp	r3, #0
   24f50:	1a00004a 	bne	25080 <sync_fs+0x158>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
   24f54:	e51b3010 	ldr	r3, [fp, #-16]
   24f58:	e5d33005 	ldrb	r3, [r3, #5]
   24f5c:	e3530001 	cmp	r3, #1
   24f60:	1a00003b 	bne	25054 <sync_fs+0x12c>
			fs->fsi_flag = 0;
   24f64:	e51b3010 	ldr	r3, [fp, #-16]
   24f68:	e3a02000 	mov	r2, #0
   24f6c:	e5c32005 	strb	r2, [r3, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
   24f70:	e51b3010 	ldr	r3, [fp, #-16]
   24f74:	e5d33000 	ldrb	r3, [r3]
   24f78:	e3530003 	cmp	r3, #3
   24f7c:	1a000034 	bne	25054 <sync_fs+0x12c>
				/* Create FSInfo structure */
				memset(fs->win, 0, sizeof fs->win);
   24f80:	e51b3010 	ldr	r3, [fp, #-16]
   24f84:	e2833030 	add	r3, r3, #48	; 0x30
   24f88:	e3a02c02 	mov	r2, #512	; 0x200
   24f8c:	e3a01000 	mov	r1, #0
   24f90:	e1a00003 	mov	r0, r3
   24f94:	eb001932 	bl	2b464 <memset>
				st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
   24f98:	e51b3010 	ldr	r3, [fp, #-16]
   24f9c:	e2833030 	add	r3, r3, #48	; 0x30
   24fa0:	e59f10e8 	ldr	r1, [pc, #232]	; 25090 <sync_fs+0x168>
   24fa4:	e1a00003 	mov	r0, r3
   24fa8:	ebffff37 	bl	24c8c <st_dword>
				st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
   24fac:	e51b3010 	ldr	r3, [fp, #-16]
   24fb0:	e2833030 	add	r3, r3, #48	; 0x30
   24fb4:	e2833f79 	add	r3, r3, #484	; 0x1e4
   24fb8:	e59f10d4 	ldr	r1, [pc, #212]	; 25094 <sync_fs+0x16c>
   24fbc:	e1a00003 	mov	r0, r3
   24fc0:	ebffff31 	bl	24c8c <st_dword>
				st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
   24fc4:	e51b3010 	ldr	r3, [fp, #-16]
   24fc8:	e2833030 	add	r3, r3, #48	; 0x30
   24fcc:	e2832f7a 	add	r2, r3, #488	; 0x1e8
   24fd0:	e51b3010 	ldr	r3, [fp, #-16]
   24fd4:	e5933010 	ldr	r3, [r3, #16]
   24fd8:	e1a01003 	mov	r1, r3
   24fdc:	e1a00002 	mov	r0, r2
   24fe0:	ebffff29 	bl	24c8c <st_dword>
				st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
   24fe4:	e51b3010 	ldr	r3, [fp, #-16]
   24fe8:	e2833030 	add	r3, r3, #48	; 0x30
   24fec:	e2832f7b 	add	r2, r3, #492	; 0x1ec
   24ff0:	e51b3010 	ldr	r3, [fp, #-16]
   24ff4:	e593300c 	ldr	r3, [r3, #12]
   24ff8:	e1a01003 	mov	r1, r3
   24ffc:	e1a00002 	mov	r0, r2
   25000:	ebffff21 	bl	24c8c <st_dword>
				st_dword(fs->win + FSI_TrailSig, 0xAA550000);		/* Trailing signature */
   25004:	e51b3010 	ldr	r3, [fp, #-16]
   25008:	e2833030 	add	r3, r3, #48	; 0x30
   2500c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
   25010:	e2833002 	add	r3, r3, #2
   25014:	e59f107c 	ldr	r1, [pc, #124]	; 25098 <sync_fs+0x170>
   25018:	e1a00003 	mov	r0, r3
   2501c:	ebffff1a 	bl	24c8c <st_dword>
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
   25020:	e51b3010 	ldr	r3, [fp, #-16]
   25024:	e5d30001 	ldrb	r0, [r3, #1]
   25028:	e51b3010 	ldr	r3, [fp, #-16]
   2502c:	e2831030 	add	r1, r3, #48	; 0x30
   25030:	e51b3010 	ldr	r3, [fp, #-16]
   25034:	e593301c 	ldr	r3, [r3, #28]
   25038:	e2832001 	add	r2, r3, #1
   2503c:	e51b3010 	ldr	r3, [fp, #-16]
   25040:	e583202c 	str	r2, [r3, #44]	; 0x2c
   25044:	e51b3010 	ldr	r3, [fp, #-16]
   25048:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   2504c:	e3a03001 	mov	r3, #1
   25050:	eb0017d9 	bl	2afbc <disk_write>
				}
			}
#endif
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
   25054:	e51b3010 	ldr	r3, [fp, #-16]
   25058:	e5d33001 	ldrb	r3, [r3, #1]
   2505c:	e3a02000 	mov	r2, #0
   25060:	e3a01000 	mov	r1, #0
   25064:	e1a00003 	mov	r0, r3
   25068:	eb001800 	bl	2b070 <disk_ioctl>
   2506c:	e1a03000 	mov	r3, r0
   25070:	e3530000 	cmp	r3, #0
   25074:	0a000001 	beq	25080 <sync_fs+0x158>
   25078:	e3a03001 	mov	r3, #1
   2507c:	e54b3005 	strb	r3, [fp, #-5]
	}

	return res;
   25080:	e55b3005 	ldrb	r3, [fp, #-5]
}
   25084:	e1a00003 	mov	r0, r3
   25088:	e24bd004 	sub	sp, fp, #4
   2508c:	e8bd8800 	pop	{fp, pc}
   25090:	41615252 	cmnmi	r1, r2, asr r2
   25094:	61417272 	hvcvs	5922	; 0x1722
   25098:	aa550000 	bge	15650a0 <__bss_end+0x14b7dc8>

0002509c <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2509c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   250a0:	e28db000 	add	fp, sp, #0
   250a4:	e24dd00c 	sub	sp, sp, #12
   250a8:	e50b0008 	str	r0, [fp, #-8]
   250ac:	e50b100c 	str	r1, [fp, #-12]
	clst -= 2;		/* Cluster number is origin from 2 */
   250b0:	e51b300c 	ldr	r3, [fp, #-12]
   250b4:	e2433002 	sub	r3, r3, #2
   250b8:	e50b300c 	str	r3, [fp, #-12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   250bc:	e51b3008 	ldr	r3, [fp, #-8]
   250c0:	e5933014 	ldr	r3, [r3, #20]
   250c4:	e2433002 	sub	r3, r3, #2
   250c8:	e51b200c 	ldr	r2, [fp, #-12]
   250cc:	e1520003 	cmp	r2, r3
   250d0:	3a000001 	bcc	250dc <clst2sect+0x40>
   250d4:	e3a03000 	mov	r3, #0
   250d8:	ea000007 	b	250fc <clst2sect+0x60>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
   250dc:	e51b3008 	ldr	r3, [fp, #-8]
   250e0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   250e4:	e51b3008 	ldr	r3, [fp, #-8]
   250e8:	e1d330ba 	ldrh	r3, [r3, #10]
   250ec:	e1a01003 	mov	r1, r3
   250f0:	e51b300c 	ldr	r3, [fp, #-12]
   250f4:	e0030193 	mul	r3, r3, r1
   250f8:	e0823003 	add	r3, r2, r3
}
   250fc:	e1a00003 	mov	r0, r3
   25100:	e28bd000 	add	sp, fp, #0
   25104:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   25108:	e12fff1e 	bx	lr

0002510c <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
   2510c:	e92d4800 	push	{fp, lr}
   25110:	e28db004 	add	fp, sp, #4
   25114:	e24dd018 	sub	sp, sp, #24
   25118:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2511c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
   25120:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25124:	e5933000 	ldr	r3, [r3]
   25128:	e50b300c 	str	r3, [fp, #-12]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   2512c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25130:	e3530001 	cmp	r3, #1
   25134:	9a000004 	bls	2514c <get_fat+0x40>
   25138:	e51b300c 	ldr	r3, [fp, #-12]
   2513c:	e5933014 	ldr	r3, [r3, #20]
   25140:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   25144:	e1520003 	cmp	r2, r3
   25148:	3a000002 	bcc	25158 <get_fat+0x4c>
		val = 1;	/* Internal error */
   2514c:	e3a03001 	mov	r3, #1
   25150:	e50b3008 	str	r3, [fp, #-8]
   25154:	ea000081 	b	25360 <get_fat+0x254>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   25158:	e3e03000 	mvn	r3, #0
   2515c:	e50b3008 	str	r3, [fp, #-8]

		switch (fs->fs_type) {
   25160:	e51b300c 	ldr	r3, [fp, #-12]
   25164:	e5d33000 	ldrb	r3, [r3]
   25168:	e3530003 	cmp	r3, #3
   2516c:	0a00005a 	beq	252dc <get_fat+0x1d0>
   25170:	e3530003 	cmp	r3, #3
   25174:	ca00006f 	bgt	25338 <get_fat+0x22c>
   25178:	e3530001 	cmp	r3, #1
   2517c:	0a000002 	beq	2518c <get_fat+0x80>
   25180:	e3530002 	cmp	r3, #2
   25184:	0a00003d 	beq	25280 <get_fat+0x174>
   25188:	ea00006a 	b	25338 <get_fat+0x22c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
   2518c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25190:	e50b3010 	str	r3, [fp, #-16]
   25194:	e51b3010 	ldr	r3, [fp, #-16]
   25198:	e1a030a3 	lsr	r3, r3, #1
   2519c:	e51b2010 	ldr	r2, [fp, #-16]
   251a0:	e0823003 	add	r3, r2, r3
   251a4:	e50b3010 	str	r3, [fp, #-16]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   251a8:	e51b300c 	ldr	r3, [fp, #-12]
   251ac:	e5932020 	ldr	r2, [r3, #32]
   251b0:	e51b3010 	ldr	r3, [fp, #-16]
   251b4:	e1a034a3 	lsr	r3, r3, #9
   251b8:	e0823003 	add	r3, r2, r3
   251bc:	e1a01003 	mov	r1, r3
   251c0:	e51b000c 	ldr	r0, [fp, #-12]
   251c4:	ebffff2f 	bl	24e88 <move_window>
   251c8:	e1a03000 	mov	r3, r0
   251cc:	e3530000 	cmp	r3, #0
   251d0:	1a00005b 	bne	25344 <get_fat+0x238>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   251d4:	e51b3010 	ldr	r3, [fp, #-16]
   251d8:	e2832001 	add	r2, r3, #1
   251dc:	e50b2010 	str	r2, [fp, #-16]
   251e0:	e1a03b83 	lsl	r3, r3, #23
   251e4:	e1a03ba3 	lsr	r3, r3, #23
   251e8:	e51b200c 	ldr	r2, [fp, #-12]
   251ec:	e0823003 	add	r3, r2, r3
   251f0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
   251f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   251f8:	e51b300c 	ldr	r3, [fp, #-12]
   251fc:	e5932020 	ldr	r2, [r3, #32]
   25200:	e51b3010 	ldr	r3, [fp, #-16]
   25204:	e1a034a3 	lsr	r3, r3, #9
   25208:	e0823003 	add	r3, r2, r3
   2520c:	e1a01003 	mov	r1, r3
   25210:	e51b000c 	ldr	r0, [fp, #-12]
   25214:	ebffff1b 	bl	24e88 <move_window>
   25218:	e1a03000 	mov	r3, r0
   2521c:	e3530000 	cmp	r3, #0
   25220:	1a000049 	bne	2534c <get_fat+0x240>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
   25224:	e51b3010 	ldr	r3, [fp, #-16]
   25228:	e1a03b83 	lsl	r3, r3, #23
   2522c:	e1a03ba3 	lsr	r3, r3, #23
   25230:	e51b200c 	ldr	r2, [fp, #-12]
   25234:	e0823003 	add	r3, r2, r3
   25238:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
   2523c:	e1a03403 	lsl	r3, r3, #8
   25240:	e1a02003 	mov	r2, r3
   25244:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25248:	e1833002 	orr	r3, r3, r2
   2524c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
   25250:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25254:	e2033001 	and	r3, r3, #1
   25258:	e3530000 	cmp	r3, #0
   2525c:	0a000002 	beq	2526c <get_fat+0x160>
   25260:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25264:	e1a03223 	lsr	r3, r3, #4
   25268:	ea000002 	b	25278 <get_fat+0x16c>
   2526c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25270:	e1a03a03 	lsl	r3, r3, #20
   25274:	e1a03a23 	lsr	r3, r3, #20
   25278:	e50b3008 	str	r3, [fp, #-8]
			break;
   2527c:	ea000037 	b	25360 <get_fat+0x254>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   25280:	e51b300c 	ldr	r3, [fp, #-12]
   25284:	e5932020 	ldr	r2, [r3, #32]
   25288:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2528c:	e1a03423 	lsr	r3, r3, #8
   25290:	e0823003 	add	r3, r2, r3
   25294:	e1a01003 	mov	r1, r3
   25298:	e51b000c 	ldr	r0, [fp, #-12]
   2529c:	ebfffef9 	bl	24e88 <move_window>
   252a0:	e1a03000 	mov	r3, r0
   252a4:	e3530000 	cmp	r3, #0
   252a8:	1a000029 	bne	25354 <get_fat+0x248>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
   252ac:	e51b300c 	ldr	r3, [fp, #-12]
   252b0:	e2832030 	add	r2, r3, #48	; 0x30
   252b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   252b8:	e1a01083 	lsl	r1, r3, #1
   252bc:	e59f30ac 	ldr	r3, [pc, #172]	; 25370 <get_fat+0x264>
   252c0:	e0033001 	and	r3, r3, r1
   252c4:	e0823003 	add	r3, r2, r3
   252c8:	e1a00003 	mov	r0, r3
   252cc:	ebfffe1e 	bl	24b4c <ld_word>
   252d0:	e1a03000 	mov	r3, r0
   252d4:	e50b3008 	str	r3, [fp, #-8]
			break;
   252d8:	ea000020 	b	25360 <get_fat+0x254>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   252dc:	e51b300c 	ldr	r3, [fp, #-12]
   252e0:	e5932020 	ldr	r2, [r3, #32]
   252e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   252e8:	e1a033a3 	lsr	r3, r3, #7
   252ec:	e0823003 	add	r3, r2, r3
   252f0:	e1a01003 	mov	r1, r3
   252f4:	e51b000c 	ldr	r0, [fp, #-12]
   252f8:	ebfffee2 	bl	24e88 <move_window>
   252fc:	e1a03000 	mov	r3, r0
   25300:	e3530000 	cmp	r3, #0
   25304:	1a000014 	bne	2535c <get_fat+0x250>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
   25308:	e51b300c 	ldr	r3, [fp, #-12]
   2530c:	e2832030 	add	r2, r3, #48	; 0x30
   25310:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25314:	e1a03103 	lsl	r3, r3, #2
   25318:	e2033f7f 	and	r3, r3, #508	; 0x1fc
   2531c:	e0823003 	add	r3, r2, r3
   25320:	e1a00003 	mov	r0, r3
   25324:	ebfffe1e 	bl	24ba4 <ld_dword>
   25328:	e1a03000 	mov	r3, r0
   2532c:	e3c3320f 	bic	r3, r3, #-268435456	; 0xf0000000
   25330:	e50b3008 	str	r3, [fp, #-8]
			break;
   25334:	ea000009 	b	25360 <get_fat+0x254>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
   25338:	e3a03001 	mov	r3, #1
   2533c:	e50b3008 	str	r3, [fp, #-8]
   25340:	ea000006 	b	25360 <get_fat+0x254>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   25344:	e320f000 	nop	{0}
   25348:	ea000004 	b	25360 <get_fat+0x254>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   2534c:	e320f000 	nop	{0}
   25350:	ea000002 	b	25360 <get_fat+0x254>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   25354:	e320f000 	nop	{0}
   25358:	ea000000 	b	25360 <get_fat+0x254>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   2535c:	e320f000 	nop	{0}
		}
	}

	return val;
   25360:	e51b3008 	ldr	r3, [fp, #-8]
}
   25364:	e1a00003 	mov	r0, r3
   25368:	e24bd004 	sub	sp, fp, #4
   2536c:	e8bd8800 	pop	{fp, pc}
   25370:	000001fe 	strdeq	r0, [r0], -lr

00025374 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
   25374:	e92d4810 	push	{r4, fp, lr}
   25378:	e28db008 	add	fp, sp, #8
   2537c:	e24dd024 	sub	sp, sp, #36	; 0x24
   25380:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   25384:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
   25388:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
   2538c:	e3a03002 	mov	r3, #2
   25390:	e54b300d 	strb	r3, [fp, #-13]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   25394:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25398:	e3530001 	cmp	r3, #1
   2539c:	9a0000b8 	bls	25684 <put_fat+0x310>
   253a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   253a4:	e5933014 	ldr	r3, [r3, #20]
   253a8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   253ac:	e1520003 	cmp	r2, r3
   253b0:	2a0000b3 	bcs	25684 <put_fat+0x310>
		switch (fs->fs_type) {
   253b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   253b8:	e5d33000 	ldrb	r3, [r3]
   253bc:	e3530003 	cmp	r3, #3
   253c0:	0a000087 	beq	255e4 <put_fat+0x270>
   253c4:	e3530003 	cmp	r3, #3
   253c8:	ca0000b6 	bgt	256a8 <put_fat+0x334>
   253cc:	e3530001 	cmp	r3, #1
   253d0:	0a000002 	beq	253e0 <put_fat+0x6c>
   253d4:	e3530002 	cmp	r3, #2
   253d8:	0a000064 	beq	25570 <put_fat+0x1fc>
   253dc:	ea0000b1 	b	256a8 <put_fat+0x334>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
   253e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   253e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   253e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   253ec:	e1a030a3 	lsr	r3, r3, #1
   253f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   253f4:	e0823003 	add	r3, r2, r3
   253f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   253fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25400:	e5932020 	ldr	r2, [r3, #32]
   25404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25408:	e1a034a3 	lsr	r3, r3, #9
   2540c:	e0823003 	add	r3, r2, r3
   25410:	e1a01003 	mov	r1, r3
   25414:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   25418:	ebfffe9a 	bl	24e88 <move_window>
   2541c:	e1a03000 	mov	r3, r0
   25420:	e54b300d 	strb	r3, [fp, #-13]
			if (res != FR_OK) break;
   25424:	e55b300d 	ldrb	r3, [fp, #-13]
   25428:	e3530000 	cmp	r3, #0
   2542c:	1a000096 	bne	2568c <put_fat+0x318>
			p = fs->win + bc++ % SS(fs);
   25430:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25434:	e2832030 	add	r2, r3, #48	; 0x30
   25438:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2543c:	e2831001 	add	r1, r3, #1
   25440:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   25444:	e1a03b83 	lsl	r3, r3, #23
   25448:	e1a03ba3 	lsr	r3, r3, #23
   2544c:	e0823003 	add	r3, r2, r3
   25450:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
   25454:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25458:	e2033001 	and	r3, r3, #1
   2545c:	e3530000 	cmp	r3, #0
   25460:	0a00000c 	beq	25498 <put_fat+0x124>
   25464:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25468:	e5d33000 	ldrb	r3, [r3]
   2546c:	e6af3073 	sxtb	r3, r3
   25470:	e203300f 	and	r3, r3, #15
   25474:	e6af2073 	sxtb	r2, r3
   25478:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2547c:	e6ef3073 	uxtb	r3, r3
   25480:	e1a03203 	lsl	r3, r3, #4
   25484:	e6af3073 	sxtb	r3, r3
   25488:	e1823003 	orr	r3, r2, r3
   2548c:	e6af3073 	sxtb	r3, r3
   25490:	e6ef3073 	uxtb	r3, r3
   25494:	ea000001 	b	254a0 <put_fat+0x12c>
   25498:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2549c:	e6ef3073 	uxtb	r3, r3
   254a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   254a4:	e5c23000 	strb	r3, [r2]
			fs->wflag = 1;
   254a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   254ac:	e3a02001 	mov	r2, #1
   254b0:	e5c32004 	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   254b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   254b8:	e5932020 	ldr	r2, [r3, #32]
   254bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   254c0:	e1a034a3 	lsr	r3, r3, #9
   254c4:	e0823003 	add	r3, r2, r3
   254c8:	e1a01003 	mov	r1, r3
   254cc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   254d0:	ebfffe6c 	bl	24e88 <move_window>
   254d4:	e1a03000 	mov	r3, r0
   254d8:	e54b300d 	strb	r3, [fp, #-13]
			if (res != FR_OK) break;
   254dc:	e55b300d 	ldrb	r3, [fp, #-13]
   254e0:	e3530000 	cmp	r3, #0
   254e4:	1a00006a 	bne	25694 <put_fat+0x320>
			p = fs->win + bc % SS(fs);
   254e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   254ec:	e2832030 	add	r2, r3, #48	; 0x30
   254f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   254f4:	e1a03b83 	lsl	r3, r3, #23
   254f8:	e1a03ba3 	lsr	r3, r3, #23
   254fc:	e0823003 	add	r3, r2, r3
   25500:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   25504:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25508:	e2033001 	and	r3, r3, #1
   2550c:	e3530000 	cmp	r3, #0
   25510:	0a000003 	beq	25524 <put_fat+0x1b0>
   25514:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   25518:	e1a03223 	lsr	r3, r3, #4
   2551c:	e6ef3073 	uxtb	r3, r3
   25520:	ea00000c 	b	25558 <put_fat+0x1e4>
   25524:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25528:	e5d33000 	ldrb	r3, [r3]
   2552c:	e6af3073 	sxtb	r3, r3
   25530:	e3c3300f 	bic	r3, r3, #15
   25534:	e6af2073 	sxtb	r2, r3
   25538:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2553c:	e1a03423 	lsr	r3, r3, #8
   25540:	e6af3073 	sxtb	r3, r3
   25544:	e203300f 	and	r3, r3, #15
   25548:	e6af3073 	sxtb	r3, r3
   2554c:	e1823003 	orr	r3, r2, r3
   25550:	e6af3073 	sxtb	r3, r3
   25554:	e6ef3073 	uxtb	r3, r3
   25558:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2555c:	e5c23000 	strb	r3, [r2]
			fs->wflag = 1;
   25560:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25564:	e3a02001 	mov	r2, #1
   25568:	e5c32004 	strb	r2, [r3, #4]
			break;
   2556c:	ea00004d 	b	256a8 <put_fat+0x334>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   25570:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25574:	e5932020 	ldr	r2, [r3, #32]
   25578:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2557c:	e1a03423 	lsr	r3, r3, #8
   25580:	e0823003 	add	r3, r2, r3
   25584:	e1a01003 	mov	r1, r3
   25588:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   2558c:	ebfffe3d 	bl	24e88 <move_window>
   25590:	e1a03000 	mov	r3, r0
   25594:	e54b300d 	strb	r3, [fp, #-13]
			if (res != FR_OK) break;
   25598:	e55b300d 	ldrb	r3, [fp, #-13]
   2559c:	e3530000 	cmp	r3, #0
   255a0:	1a00003d 	bne	2569c <put_fat+0x328>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   255a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   255a8:	e2832030 	add	r2, r3, #48	; 0x30
   255ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   255b0:	e1a01083 	lsl	r1, r3, #1
   255b4:	e59f30fc 	ldr	r3, [pc, #252]	; 256b8 <put_fat+0x344>
   255b8:	e0033001 	and	r3, r3, r1
   255bc:	e0823003 	add	r3, r2, r3
   255c0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   255c4:	e6ff2072 	uxth	r2, r2
   255c8:	e1a01002 	mov	r1, r2
   255cc:	e1a00003 	mov	r0, r3
   255d0:	ebfffd94 	bl	24c28 <st_word>
			fs->wflag = 1;
   255d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   255d8:	e3a02001 	mov	r2, #1
   255dc:	e5c32004 	strb	r2, [r3, #4]
			break;
   255e0:	ea000030 	b	256a8 <put_fat+0x334>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   255e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   255e8:	e5932020 	ldr	r2, [r3, #32]
   255ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   255f0:	e1a033a3 	lsr	r3, r3, #7
   255f4:	e0823003 	add	r3, r2, r3
   255f8:	e1a01003 	mov	r1, r3
   255fc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   25600:	ebfffe20 	bl	24e88 <move_window>
   25604:	e1a03000 	mov	r3, r0
   25608:	e54b300d 	strb	r3, [fp, #-13]
			if (res != FR_OK) break;
   2560c:	e55b300d 	ldrb	r3, [fp, #-13]
   25610:	e3530000 	cmp	r3, #0
   25614:	1a000022 	bne	256a4 <put_fat+0x330>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   25618:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2561c:	e3c3420f 	bic	r4, r3, #-268435456	; 0xf0000000
   25620:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25624:	e2832030 	add	r2, r3, #48	; 0x30
   25628:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2562c:	e1a03103 	lsl	r3, r3, #2
   25630:	e2033f7f 	and	r3, r3, #508	; 0x1fc
   25634:	e0823003 	add	r3, r2, r3
   25638:	e1a00003 	mov	r0, r3
   2563c:	ebfffd58 	bl	24ba4 <ld_dword>
   25640:	e1a03000 	mov	r3, r0
   25644:	e203320f 	and	r3, r3, #-268435456	; 0xf0000000
   25648:	e1843003 	orr	r3, r4, r3
   2564c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
   25650:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25654:	e2832030 	add	r2, r3, #48	; 0x30
   25658:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2565c:	e1a03103 	lsl	r3, r3, #2
   25660:	e2033f7f 	and	r3, r3, #508	; 0x1fc
   25664:	e0823003 	add	r3, r2, r3
   25668:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   2566c:	e1a00003 	mov	r0, r3
   25670:	ebfffd85 	bl	24c8c <st_dword>
			fs->wflag = 1;
   25674:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25678:	e3a02001 	mov	r2, #1
   2567c:	e5c32004 	strb	r2, [r3, #4]
			break;
   25680:	ea000008 	b	256a8 <put_fat+0x334>
		}
	}
   25684:	e320f000 	nop	{0}
   25688:	ea000006 	b	256a8 <put_fat+0x334>
			if (res != FR_OK) break;
   2568c:	e320f000 	nop	{0}
   25690:	ea000004 	b	256a8 <put_fat+0x334>
			if (res != FR_OK) break;
   25694:	e320f000 	nop	{0}
   25698:	ea000002 	b	256a8 <put_fat+0x334>
			if (res != FR_OK) break;
   2569c:	e320f000 	nop	{0}
   256a0:	ea000000 	b	256a8 <put_fat+0x334>
			if (res != FR_OK) break;
   256a4:	e320f000 	nop	{0}
	return res;
   256a8:	e55b300d 	ldrb	r3, [fp, #-13]
}
   256ac:	e1a00003 	mov	r0, r3
   256b0:	e24bd008 	sub	sp, fp, #8
   256b4:	e8bd8810 	pop	{r4, fp, pc}
   256b8:	000001fe 	strdeq	r0, [r0], -lr

000256bc <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
   256bc:	e92d4800 	push	{fp, lr}
   256c0:	e28db004 	add	fp, sp, #4
   256c4:	e24dd020 	sub	sp, sp, #32
   256c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   256cc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   256d0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
	FRESULT res = FR_OK;
   256d4:	e3a03000 	mov	r3, #0
   256d8:	e54b3005 	strb	r3, [fp, #-5]
	DWORD nxt;
	FATFS *fs = obj->fs;
   256dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   256e0:	e5933000 	ldr	r3, [r3]
   256e4:	e50b300c 	str	r3, [fp, #-12]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   256e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   256ec:	e3530001 	cmp	r3, #1
   256f0:	9a000004 	bls	25708 <remove_chain+0x4c>
   256f4:	e51b300c 	ldr	r3, [fp, #-12]
   256f8:	e5933014 	ldr	r3, [r3, #20]
   256fc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   25700:	e1520003 	cmp	r2, r3
   25704:	3a000001 	bcc	25710 <remove_chain+0x54>
   25708:	e3a03002 	mov	r3, #2
   2570c:	ea000045 	b	25828 <remove_chain+0x16c>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   25710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   25714:	e3530000 	cmp	r3, #0
   25718:	0a00000a 	beq	25748 <remove_chain+0x8c>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
   2571c:	e3e02000 	mvn	r2, #0
   25720:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   25724:	e51b000c 	ldr	r0, [fp, #-12]
   25728:	ebffff11 	bl	25374 <put_fat>
   2572c:	e1a03000 	mov	r3, r0
   25730:	e54b3005 	strb	r3, [fp, #-5]
		if (res != FR_OK) return res;
   25734:	e55b3005 	ldrb	r3, [fp, #-5]
   25738:	e3530000 	cmp	r3, #0
   2573c:	0a000001 	beq	25748 <remove_chain+0x8c>
   25740:	e55b3005 	ldrb	r3, [fp, #-5]
   25744:	ea000037 	b	25828 <remove_chain+0x16c>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
   25748:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2574c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   25750:	ebfffe6d 	bl	2510c <get_fat>
   25754:	e50b0010 	str	r0, [fp, #-16]
		if (nxt == 0) break;				/* Empty cluster? */
   25758:	e51b3010 	ldr	r3, [fp, #-16]
   2575c:	e3530000 	cmp	r3, #0
   25760:	0a00002e 	beq	25820 <remove_chain+0x164>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   25764:	e51b3010 	ldr	r3, [fp, #-16]
   25768:	e3530001 	cmp	r3, #1
   2576c:	1a000001 	bne	25778 <remove_chain+0xbc>
   25770:	e3a03002 	mov	r3, #2
   25774:	ea00002b 	b	25828 <remove_chain+0x16c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   25778:	e51b3010 	ldr	r3, [fp, #-16]
   2577c:	e3730001 	cmn	r3, #1
   25780:	1a000001 	bne	2578c <remove_chain+0xd0>
   25784:	e3a03001 	mov	r3, #1
   25788:	ea000026 	b	25828 <remove_chain+0x16c>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
   2578c:	e3a02000 	mov	r2, #0
   25790:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   25794:	e51b000c 	ldr	r0, [fp, #-12]
   25798:	ebfffef5 	bl	25374 <put_fat>
   2579c:	e1a03000 	mov	r3, r0
   257a0:	e54b3005 	strb	r3, [fp, #-5]
			if (res != FR_OK) return res;
   257a4:	e55b3005 	ldrb	r3, [fp, #-5]
   257a8:	e3530000 	cmp	r3, #0
   257ac:	0a000001 	beq	257b8 <remove_chain+0xfc>
   257b0:	e55b3005 	ldrb	r3, [fp, #-5]
   257b4:	ea00001b 	b	25828 <remove_chain+0x16c>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
   257b8:	e51b300c 	ldr	r3, [fp, #-12]
   257bc:	e5932010 	ldr	r2, [r3, #16]
   257c0:	e51b300c 	ldr	r3, [fp, #-12]
   257c4:	e5933014 	ldr	r3, [r3, #20]
   257c8:	e2433002 	sub	r3, r3, #2
   257cc:	e1520003 	cmp	r2, r3
   257d0:	2a00000a 	bcs	25800 <remove_chain+0x144>
			fs->free_clst++;
   257d4:	e51b300c 	ldr	r3, [fp, #-12]
   257d8:	e5933010 	ldr	r3, [r3, #16]
   257dc:	e2832001 	add	r2, r3, #1
   257e0:	e51b300c 	ldr	r3, [fp, #-12]
   257e4:	e5832010 	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
   257e8:	e51b300c 	ldr	r3, [fp, #-12]
   257ec:	e5d33005 	ldrb	r3, [r3, #5]
   257f0:	e3833001 	orr	r3, r3, #1
   257f4:	e6ef2073 	uxtb	r2, r3
   257f8:	e51b300c 	ldr	r3, [fp, #-12]
   257fc:	e5c32005 	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
   25800:	e51b3010 	ldr	r3, [fp, #-16]
   25804:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
   25808:	e51b300c 	ldr	r3, [fp, #-12]
   2580c:	e5933014 	ldr	r3, [r3, #20]
   25810:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   25814:	e1520003 	cmp	r2, r3
   25818:	3affffca 	bcc	25748 <remove_chain+0x8c>
   2581c:	ea000000 	b	25824 <remove_chain+0x168>
		if (nxt == 0) break;				/* Empty cluster? */
   25820:	e320f000 	nop	{0}
				}
			}
		}
	}
#endif
	return FR_OK;
   25824:	e3a03000 	mov	r3, #0
}
   25828:	e1a00003 	mov	r0, r3
   2582c:	e24bd004 	sub	sp, fp, #4
   25830:	e8bd8800 	pop	{fp, pc}

00025834 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
   25834:	e92d4800 	push	{fp, lr}
   25838:	e28db004 	add	fp, sp, #4
   2583c:	e24dd020 	sub	sp, sp, #32
   25840:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   25844:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
   25848:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2584c:	e5933000 	ldr	r3, [r3]
   25850:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec


	if (clst == 0) {	/* Create a new chain */
   25854:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25858:	e3530000 	cmp	r3, #0
   2585c:	1a00000d 	bne	25898 <create_chain+0x64>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
   25860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25864:	e593300c 	ldr	r3, [r3, #12]
   25868:	e50b300c 	str	r3, [fp, #-12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   2586c:	e51b300c 	ldr	r3, [fp, #-12]
   25870:	e3530000 	cmp	r3, #0
   25874:	0a000004 	beq	2588c <create_chain+0x58>
   25878:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2587c:	e5933014 	ldr	r3, [r3, #20]
   25880:	e51b200c 	ldr	r2, [fp, #-12]
   25884:	e1520003 	cmp	r2, r3
   25888:	3a000019 	bcc	258f4 <create_chain+0xc0>
   2588c:	e3a03001 	mov	r3, #1
   25890:	e50b300c 	str	r3, [fp, #-12]
   25894:	ea000016 	b	258f4 <create_chain+0xc0>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
   25898:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   2589c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   258a0:	ebfffe19 	bl	2510c <get_fat>
   258a4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
		if (cs < 2) return 1;				/* Test for insanity */
   258a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   258ac:	e3530001 	cmp	r3, #1
   258b0:	8a000001 	bhi	258bc <create_chain+0x88>
   258b4:	e3a03001 	mov	r3, #1
   258b8:	ea0000a3 	b	25b4c <create_chain+0x318>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   258bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   258c0:	e3730001 	cmn	r3, #1
   258c4:	1a000001 	bne	258d0 <create_chain+0x9c>
   258c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   258cc:	ea00009e 	b	25b4c <create_chain+0x318>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   258d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   258d4:	e5933014 	ldr	r3, [r3, #20]
   258d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   258dc:	e1520003 	cmp	r2, r3
   258e0:	2a000001 	bcs	258ec <create_chain+0xb8>
   258e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   258e8:	ea000097 	b	25b4c <create_chain+0x318>
		scl = clst;							/* Cluster to start to find */
   258ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   258f0:	e50b300c 	str	r3, [fp, #-12]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   258f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   258f8:	e5933010 	ldr	r3, [r3, #16]
   258fc:	e3530000 	cmp	r3, #0
   25900:	1a000001 	bne	2590c <create_chain+0xd8>
   25904:	e3a03000 	mov	r3, #0
   25908:	ea00008f 	b	25b4c <create_chain+0x318>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
   2590c:	e3a03000 	mov	r3, #0
   25910:	e50b3008 	str	r3, [fp, #-8]
		if (scl == clst) {						/* Stretching an existing chain? */
   25914:	e51b200c 	ldr	r2, [fp, #-12]
   25918:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2591c:	e1520003 	cmp	r2, r3
   25920:	1a000027 	bne	259c4 <create_chain+0x190>
			ncl = scl + 1;						/* Test if next cluster is free */
   25924:	e51b300c 	ldr	r3, [fp, #-12]
   25928:	e2833001 	add	r3, r3, #1
   2592c:	e50b3008 	str	r3, [fp, #-8]
			if (ncl >= fs->n_fatent) ncl = 2;
   25930:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25934:	e5933014 	ldr	r3, [r3, #20]
   25938:	e51b2008 	ldr	r2, [fp, #-8]
   2593c:	e1520003 	cmp	r2, r3
   25940:	3a000001 	bcc	2594c <create_chain+0x118>
   25944:	e3a03002 	mov	r3, #2
   25948:	e50b3008 	str	r3, [fp, #-8]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
   2594c:	e51b1008 	ldr	r1, [fp, #-8]
   25950:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   25954:	ebfffdec 	bl	2510c <get_fat>
   25958:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   2595c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25960:	e3530001 	cmp	r3, #1
   25964:	0a000002 	beq	25974 <create_chain+0x140>
   25968:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2596c:	e3730001 	cmn	r3, #1
   25970:	1a000001 	bne	2597c <create_chain+0x148>
   25974:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25978:	ea000073 	b	25b4c <create_chain+0x318>
			if (cs != 0) {						/* Not free? */
   2597c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25980:	e3530000 	cmp	r3, #0
   25984:	0a00000e 	beq	259c4 <create_chain+0x190>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
   25988:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2598c:	e593300c 	ldr	r3, [r3, #12]
   25990:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   25994:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25998:	e3530001 	cmp	r3, #1
   2599c:	9a000006 	bls	259bc <create_chain+0x188>
   259a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   259a4:	e5933014 	ldr	r3, [r3, #20]
   259a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   259ac:	e1520003 	cmp	r2, r3
   259b0:	2a000001 	bcs	259bc <create_chain+0x188>
   259b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   259b8:	e50b300c 	str	r3, [fp, #-12]
				ncl = 0;
   259bc:	e3a03000 	mov	r3, #0
   259c0:	e50b3008 	str	r3, [fp, #-8]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
   259c4:	e51b3008 	ldr	r3, [fp, #-8]
   259c8:	e3530000 	cmp	r3, #0
   259cc:	1a000027 	bne	25a70 <create_chain+0x23c>
			ncl = scl;	/* Start cluster */
   259d0:	e51b300c 	ldr	r3, [fp, #-12]
   259d4:	e50b3008 	str	r3, [fp, #-8]
			for (;;) {
				ncl++;							/* Next cluster */
   259d8:	e51b3008 	ldr	r3, [fp, #-8]
   259dc:	e2833001 	add	r3, r3, #1
   259e0:	e50b3008 	str	r3, [fp, #-8]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   259e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   259e8:	e5933014 	ldr	r3, [r3, #20]
   259ec:	e51b2008 	ldr	r2, [fp, #-8]
   259f0:	e1520003 	cmp	r2, r3
   259f4:	3a000007 	bcc	25a18 <create_chain+0x1e4>
					ncl = 2;
   259f8:	e3a03002 	mov	r3, #2
   259fc:	e50b3008 	str	r3, [fp, #-8]
					if (ncl > scl) return 0;	/* No free cluster found? */
   25a00:	e51b2008 	ldr	r2, [fp, #-8]
   25a04:	e51b300c 	ldr	r3, [fp, #-12]
   25a08:	e1520003 	cmp	r2, r3
   25a0c:	9a000001 	bls	25a18 <create_chain+0x1e4>
   25a10:	e3a03000 	mov	r3, #0
   25a14:	ea00004c 	b	25b4c <create_chain+0x318>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
   25a18:	e51b1008 	ldr	r1, [fp, #-8]
   25a1c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   25a20:	ebfffdb9 	bl	2510c <get_fat>
   25a24:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
				if (cs == 0) break;				/* Found a free cluster? */
   25a28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25a2c:	e3530000 	cmp	r3, #0
   25a30:	0a00000d 	beq	25a6c <create_chain+0x238>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   25a34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25a38:	e3530001 	cmp	r3, #1
   25a3c:	0a000002 	beq	25a4c <create_chain+0x218>
   25a40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25a44:	e3730001 	cmn	r3, #1
   25a48:	1a000001 	bne	25a54 <create_chain+0x220>
   25a4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25a50:	ea00003d 	b	25b4c <create_chain+0x318>
				if (ncl == scl) return 0;		/* No free cluster found? */
   25a54:	e51b2008 	ldr	r2, [fp, #-8]
   25a58:	e51b300c 	ldr	r3, [fp, #-12]
   25a5c:	e1520003 	cmp	r2, r3
   25a60:	1affffdc 	bne	259d8 <create_chain+0x1a4>
   25a64:	e3a03000 	mov	r3, #0
   25a68:	ea000037 	b	25b4c <create_chain+0x318>
				if (cs == 0) break;				/* Found a free cluster? */
   25a6c:	e320f000 	nop	{0}
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
   25a70:	e3e02000 	mvn	r2, #0
   25a74:	e51b1008 	ldr	r1, [fp, #-8]
   25a78:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   25a7c:	ebfffe3c 	bl	25374 <put_fat>
   25a80:	e1a03000 	mov	r3, r0
   25a84:	e54b300d 	strb	r3, [fp, #-13]
		if (res == FR_OK && clst != 0) {
   25a88:	e55b300d 	ldrb	r3, [fp, #-13]
   25a8c:	e3530000 	cmp	r3, #0
   25a90:	1a000008 	bne	25ab8 <create_chain+0x284>
   25a94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   25a98:	e3530000 	cmp	r3, #0
   25a9c:	0a000005 	beq	25ab8 <create_chain+0x284>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
   25aa0:	e51b2008 	ldr	r2, [fp, #-8]
   25aa4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
   25aa8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
   25aac:	ebfffe30 	bl	25374 <put_fat>
   25ab0:	e1a03000 	mov	r3, r0
   25ab4:	e54b300d 	strb	r3, [fp, #-13]
		}
	}

	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
   25ab8:	e55b300d 	ldrb	r3, [fp, #-13]
   25abc:	e3530000 	cmp	r3, #0
   25ac0:	1a000019 	bne	25b2c <create_chain+0x2f8>
		fs->last_clst = ncl;
   25ac4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25ac8:	e51b2008 	ldr	r2, [fp, #-8]
   25acc:	e583200c 	str	r2, [r3, #12]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
   25ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25ad4:	e5933010 	ldr	r3, [r3, #16]
   25ad8:	e3530000 	cmp	r3, #0
   25adc:	0a000019 	beq	25b48 <create_chain+0x314>
   25ae0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25ae4:	e5932010 	ldr	r2, [r3, #16]
   25ae8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25aec:	e5933014 	ldr	r3, [r3, #20]
   25af0:	e2433002 	sub	r3, r3, #2
   25af4:	e1520003 	cmp	r2, r3
   25af8:	8a000012 	bhi	25b48 <create_chain+0x314>
			fs->free_clst--;
   25afc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25b00:	e5933010 	ldr	r3, [r3, #16]
   25b04:	e2432001 	sub	r2, r3, #1
   25b08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25b0c:	e5832010 	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
   25b10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25b14:	e5d33005 	ldrb	r3, [r3, #5]
   25b18:	e3833001 	orr	r3, r3, #1
   25b1c:	e6ef2073 	uxtb	r2, r3
   25b20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25b24:	e5c32005 	strb	r2, [r3, #5]
   25b28:	ea000006 	b	25b48 <create_chain+0x314>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
   25b2c:	e55b300d 	ldrb	r3, [fp, #-13]
   25b30:	e3530001 	cmp	r3, #1
   25b34:	1a000001 	bne	25b40 <create_chain+0x30c>
   25b38:	e3e03000 	mvn	r3, #0
   25b3c:	ea000000 	b	25b44 <create_chain+0x310>
   25b40:	e3a03001 	mov	r3, #1
   25b44:	e50b3008 	str	r3, [fp, #-8]
	}

	return ncl;		/* Return new cluster number or error status */
   25b48:	e51b3008 	ldr	r3, [fp, #-8]
}
   25b4c:	e1a00003 	mov	r0, r3
   25b50:	e24bd004 	sub	sp, fp, #4
   25b54:	e8bd8800 	pop	{fp, pc}

00025b58 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
   25b58:	e92d4800 	push	{fp, lr}
   25b5c:	e28db004 	add	fp, sp, #4
   25b60:	e24dd018 	sub	sp, sp, #24
   25b64:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25b68:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   25b6c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   25b70:	ebfffc8d 	bl	24dac <sync_window>
   25b74:	e1a03000 	mov	r3, r0
   25b78:	e3530000 	cmp	r3, #0
   25b7c:	0a000001 	beq	25b88 <dir_clear+0x30>
   25b80:	e3a03001 	mov	r3, #1
   25b84:	ea000031 	b	25c50 <dir_clear+0xf8>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   25b88:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   25b8c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   25b90:	ebfffd41 	bl	2509c <clst2sect>
   25b94:	e50b000c 	str	r0, [fp, #-12]
	fs->winsect = sect;				/* Set window to top of the cluster */
   25b98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25b9c:	e51b200c 	ldr	r2, [fp, #-12]
   25ba0:	e583202c 	str	r2, [r3, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
   25ba4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25ba8:	e2833030 	add	r3, r3, #48	; 0x30
   25bac:	e3a02c02 	mov	r2, #512	; 0x200
   25bb0:	e3a01000 	mov	r1, #0
   25bb4:	e1a00003 	mov	r0, r3
   25bb8:	eb001629 	bl	2b464 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
   25bbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25bc0:	e2833030 	add	r3, r3, #48	; 0x30
   25bc4:	e50b3010 	str	r3, [fp, #-16]
   25bc8:	e3a03001 	mov	r3, #1
   25bcc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   25bd0:	e3a03000 	mov	r3, #0
   25bd4:	e50b3008 	str	r3, [fp, #-8]
   25bd8:	ea000003 	b	25bec <dir_clear+0x94>
   25bdc:	e51b2008 	ldr	r2, [fp, #-8]
   25be0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25be4:	e0823003 	add	r3, r2, r3
   25be8:	e50b3008 	str	r3, [fp, #-8]
   25bec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25bf0:	e1d330ba 	ldrh	r3, [r3, #10]
   25bf4:	e1a02003 	mov	r2, r3
   25bf8:	e51b3008 	ldr	r3, [fp, #-8]
   25bfc:	e1530002 	cmp	r3, r2
   25c00:	2a00000a 	bcs	25c30 <dir_clear+0xd8>
   25c04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25c08:	e5d30001 	ldrb	r0, [r3, #1]
   25c0c:	e51b200c 	ldr	r2, [fp, #-12]
   25c10:	e51b3008 	ldr	r3, [fp, #-8]
   25c14:	e0822003 	add	r2, r2, r3
   25c18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   25c1c:	e51b1010 	ldr	r1, [fp, #-16]
   25c20:	eb0014e5 	bl	2afbc <disk_write>
   25c24:	e1a03000 	mov	r3, r0
   25c28:	e3530000 	cmp	r3, #0
   25c2c:	0affffea 	beq	25bdc <dir_clear+0x84>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
   25c30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25c34:	e1d330ba 	ldrh	r3, [r3, #10]
   25c38:	e1a02003 	mov	r2, r3
   25c3c:	e51b3008 	ldr	r3, [fp, #-8]
   25c40:	e1530002 	cmp	r3, r2
   25c44:	13a03001 	movne	r3, #1
   25c48:	03a03000 	moveq	r3, #0
   25c4c:	e6ef3073 	uxtb	r3, r3
}
   25c50:	e1a00003 	mov	r0, r3
   25c54:	e24bd004 	sub	sp, fp, #4
   25c58:	e8bd8800 	pop	{fp, pc}

00025c5c <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
   25c5c:	e92d4800 	push	{fp, lr}
   25c60:	e28db004 	add	fp, sp, #4
   25c64:	e24dd018 	sub	sp, sp, #24
   25c68:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25c6c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
   25c70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25c74:	e5933000 	ldr	r3, [r3]
   25c78:	e50b300c 	str	r3, [fp, #-12]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   25c7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25c80:	e3530602 	cmp	r3, #2097152	; 0x200000
   25c84:	2a000003 	bcs	25c98 <dir_sdi+0x3c>
   25c88:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25c8c:	e203301f 	and	r3, r3, #31
   25c90:	e3530000 	cmp	r3, #0
   25c94:	0a000001 	beq	25ca0 <dir_sdi+0x44>
		return FR_INT_ERR;
   25c98:	e3a03002 	mov	r3, #2
   25c9c:	ea00005f 	b	25e20 <dir_sdi+0x1c4>
	}
	dp->dptr = ofs;				/* Set current offset */
   25ca0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25ca4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   25ca8:	e5832010 	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
   25cac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25cb0:	e5933008 	ldr	r3, [r3, #8]
   25cb4:	e50b3008 	str	r3, [fp, #-8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
   25cb8:	e51b3008 	ldr	r3, [fp, #-8]
   25cbc:	e3530000 	cmp	r3, #0
   25cc0:	1a000006 	bne	25ce0 <dir_sdi+0x84>
   25cc4:	e51b300c 	ldr	r3, [fp, #-12]
   25cc8:	e5d33000 	ldrb	r3, [r3]
   25ccc:	e3530002 	cmp	r3, #2
   25cd0:	9a000002 	bls	25ce0 <dir_sdi+0x84>
		clst = (DWORD)fs->dirbase;
   25cd4:	e51b300c 	ldr	r3, [fp, #-12]
   25cd8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   25cdc:	e50b3008 	str	r3, [fp, #-8]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
   25ce0:	e51b3008 	ldr	r3, [fp, #-8]
   25ce4:	e3530000 	cmp	r3, #0
   25ce8:	1a00000c 	bne	25d20 <dir_sdi+0xc4>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   25cec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25cf0:	e1a032a3 	lsr	r3, r3, #5
   25cf4:	e51b200c 	ldr	r2, [fp, #-12]
   25cf8:	e1d220b8 	ldrh	r2, [r2, #8]
   25cfc:	e1530002 	cmp	r3, r2
   25d00:	3a000001 	bcc	25d0c <dir_sdi+0xb0>
   25d04:	e3a03002 	mov	r3, #2
   25d08:	ea000044 	b	25e20 <dir_sdi+0x1c4>
		dp->sect = fs->dirbase;
   25d0c:	e51b300c 	ldr	r3, [fp, #-12]
   25d10:	e5932024 	ldr	r2, [r3, #36]	; 0x24
   25d14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25d18:	e5832018 	str	r2, [r3, #24]
   25d1c:	ea000026 	b	25dbc <dir_sdi+0x160>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
   25d20:	e51b300c 	ldr	r3, [fp, #-12]
   25d24:	e1d330ba 	ldrh	r3, [r3, #10]
   25d28:	e1a03483 	lsl	r3, r3, #9
   25d2c:	e50b3010 	str	r3, [fp, #-16]
		while (ofs >= csz) {				/* Follow cluster chain */
   25d30:	ea000017 	b	25d94 <dir_sdi+0x138>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   25d34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25d38:	e51b1008 	ldr	r1, [fp, #-8]
   25d3c:	e1a00003 	mov	r0, r3
   25d40:	ebfffcf1 	bl	2510c <get_fat>
   25d44:	e50b0008 	str	r0, [fp, #-8]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   25d48:	e51b3008 	ldr	r3, [fp, #-8]
   25d4c:	e3730001 	cmn	r3, #1
   25d50:	1a000001 	bne	25d5c <dir_sdi+0x100>
   25d54:	e3a03001 	mov	r3, #1
   25d58:	ea000030 	b	25e20 <dir_sdi+0x1c4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   25d5c:	e51b3008 	ldr	r3, [fp, #-8]
   25d60:	e3530001 	cmp	r3, #1
   25d64:	9a000004 	bls	25d7c <dir_sdi+0x120>
   25d68:	e51b300c 	ldr	r3, [fp, #-12]
   25d6c:	e5933014 	ldr	r3, [r3, #20]
   25d70:	e51b2008 	ldr	r2, [fp, #-8]
   25d74:	e1520003 	cmp	r2, r3
   25d78:	3a000001 	bcc	25d84 <dir_sdi+0x128>
   25d7c:	e3a03002 	mov	r3, #2
   25d80:	ea000026 	b	25e20 <dir_sdi+0x1c4>
			ofs -= csz;
   25d84:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   25d88:	e51b3010 	ldr	r3, [fp, #-16]
   25d8c:	e0423003 	sub	r3, r2, r3
   25d90:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		while (ofs >= csz) {				/* Follow cluster chain */
   25d94:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   25d98:	e51b3010 	ldr	r3, [fp, #-16]
   25d9c:	e1520003 	cmp	r2, r3
   25da0:	2affffe3 	bcs	25d34 <dir_sdi+0xd8>
		}
		dp->sect = clst2sect(fs, clst);
   25da4:	e51b1008 	ldr	r1, [fp, #-8]
   25da8:	e51b000c 	ldr	r0, [fp, #-12]
   25dac:	ebfffcba 	bl	2509c <clst2sect>
   25db0:	e1a02000 	mov	r2, r0
   25db4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25db8:	e5832018 	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
   25dbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25dc0:	e51b2008 	ldr	r2, [fp, #-8]
   25dc4:	e5832014 	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
   25dc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25dcc:	e5933018 	ldr	r3, [r3, #24]
   25dd0:	e3530000 	cmp	r3, #0
   25dd4:	1a000001 	bne	25de0 <dir_sdi+0x184>
   25dd8:	e3a03002 	mov	r3, #2
   25ddc:	ea00000f 	b	25e20 <dir_sdi+0x1c4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   25de0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25de4:	e5932018 	ldr	r2, [r3, #24]
   25de8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25dec:	e1a034a3 	lsr	r3, r3, #9
   25df0:	e0822003 	add	r2, r2, r3
   25df4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25df8:	e5832018 	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   25dfc:	e51b300c 	ldr	r3, [fp, #-12]
   25e00:	e2832030 	add	r2, r3, #48	; 0x30
   25e04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25e08:	e1a03b83 	lsl	r3, r3, #23
   25e0c:	e1a03ba3 	lsr	r3, r3, #23
   25e10:	e0822003 	add	r2, r2, r3
   25e14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e18:	e583201c 	str	r2, [r3, #28]

	return FR_OK;
   25e1c:	e3a03000 	mov	r3, #0
}
   25e20:	e1a00003 	mov	r0, r3
   25e24:	e24bd004 	sub	sp, fp, #4
   25e28:	e8bd8800 	pop	{fp, pc}

00025e2c <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   25e2c:	e92d4800 	push	{fp, lr}
   25e30:	e28db004 	add	fp, sp, #4
   25e34:	e24dd018 	sub	sp, sp, #24
   25e38:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   25e3c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
   25e40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e44:	e5933000 	ldr	r3, [r3]
   25e48:	e50b300c 	str	r3, [fp, #-12]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
   25e4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e50:	e5933010 	ldr	r3, [r3, #16]
   25e54:	e2833020 	add	r3, r3, #32
   25e58:	e50b3010 	str	r3, [fp, #-16]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   25e5c:	e51b3010 	ldr	r3, [fp, #-16]
   25e60:	e3530602 	cmp	r3, #2097152	; 0x200000
   25e64:	3a000002 	bcc	25e74 <dir_next+0x48>
   25e68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e6c:	e3a02000 	mov	r2, #0
   25e70:	e5832018 	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   25e74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25e78:	e5933018 	ldr	r3, [r3, #24]
   25e7c:	e3530000 	cmp	r3, #0
   25e80:	1a000001 	bne	25e8c <dir_next+0x60>
   25e84:	e3a03004 	mov	r3, #4
   25e88:	ea000071 	b	26054 <dir_next+0x228>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   25e8c:	e51b3010 	ldr	r3, [fp, #-16]
   25e90:	e1a03b83 	lsl	r3, r3, #23
   25e94:	e1a03ba3 	lsr	r3, r3, #23
   25e98:	e3530000 	cmp	r3, #0
   25e9c:	1a000060 	bne	26024 <dir_next+0x1f8>
		dp->sect++;				/* Next sector */
   25ea0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25ea4:	e5933018 	ldr	r3, [r3, #24]
   25ea8:	e2832001 	add	r2, r3, #1
   25eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25eb0:	e5832018 	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
   25eb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25eb8:	e5933014 	ldr	r3, [r3, #20]
   25ebc:	e3530000 	cmp	r3, #0
   25ec0:	1a00000a 	bne	25ef0 <dir_next+0xc4>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
   25ec4:	e51b3010 	ldr	r3, [fp, #-16]
   25ec8:	e1a032a3 	lsr	r3, r3, #5
   25ecc:	e51b200c 	ldr	r2, [fp, #-12]
   25ed0:	e1d220b8 	ldrh	r2, [r2, #8]
   25ed4:	e1530002 	cmp	r3, r2
   25ed8:	3a000051 	bcc	26024 <dir_next+0x1f8>
				dp->sect = 0; return FR_NO_FILE;
   25edc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25ee0:	e3a02000 	mov	r2, #0
   25ee4:	e5832018 	str	r2, [r3, #24]
   25ee8:	e3a03004 	mov	r3, #4
   25eec:	ea000058 	b	26054 <dir_next+0x228>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   25ef0:	e51b3010 	ldr	r3, [fp, #-16]
   25ef4:	e1a034a3 	lsr	r3, r3, #9
   25ef8:	e51b200c 	ldr	r2, [fp, #-12]
   25efc:	e1d220ba 	ldrh	r2, [r2, #10]
   25f00:	e2422001 	sub	r2, r2, #1
   25f04:	e0033002 	and	r3, r3, r2
   25f08:	e3530000 	cmp	r3, #0
   25f0c:	1a000044 	bne	26024 <dir_next+0x1f8>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   25f10:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25f14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25f18:	e5933014 	ldr	r3, [r3, #20]
   25f1c:	e1a01003 	mov	r1, r3
   25f20:	e1a00002 	mov	r0, r2
   25f24:	ebfffc78 	bl	2510c <get_fat>
   25f28:	e50b0008 	str	r0, [fp, #-8]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   25f2c:	e51b3008 	ldr	r3, [fp, #-8]
   25f30:	e3530001 	cmp	r3, #1
   25f34:	8a000001 	bhi	25f40 <dir_next+0x114>
   25f38:	e3a03002 	mov	r3, #2
   25f3c:	ea000044 	b	26054 <dir_next+0x228>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   25f40:	e51b3008 	ldr	r3, [fp, #-8]
   25f44:	e3730001 	cmn	r3, #1
   25f48:	1a000001 	bne	25f54 <dir_next+0x128>
   25f4c:	e3a03001 	mov	r3, #1
   25f50:	ea00003f 	b	26054 <dir_next+0x228>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
   25f54:	e51b300c 	ldr	r3, [fp, #-12]
   25f58:	e5933014 	ldr	r3, [r3, #20]
   25f5c:	e51b2008 	ldr	r2, [fp, #-8]
   25f60:	e1520003 	cmp	r2, r3
   25f64:	3a000025 	bcc	26000 <dir_next+0x1d4>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
   25f68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   25f6c:	e3530000 	cmp	r3, #0
   25f70:	1a000004 	bne	25f88 <dir_next+0x15c>
						dp->sect = 0; return FR_NO_FILE;
   25f74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25f78:	e3a02000 	mov	r2, #0
   25f7c:	e5832018 	str	r2, [r3, #24]
   25f80:	e3a03004 	mov	r3, #4
   25f84:	ea000032 	b	26054 <dir_next+0x228>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
   25f88:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   25f8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   25f90:	e5933014 	ldr	r3, [r3, #20]
   25f94:	e1a01003 	mov	r1, r3
   25f98:	e1a00002 	mov	r0, r2
   25f9c:	ebfffe24 	bl	25834 <create_chain>
   25fa0:	e50b0008 	str	r0, [fp, #-8]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   25fa4:	e51b3008 	ldr	r3, [fp, #-8]
   25fa8:	e3530000 	cmp	r3, #0
   25fac:	1a000001 	bne	25fb8 <dir_next+0x18c>
   25fb0:	e3a03007 	mov	r3, #7
   25fb4:	ea000026 	b	26054 <dir_next+0x228>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   25fb8:	e51b3008 	ldr	r3, [fp, #-8]
   25fbc:	e3530001 	cmp	r3, #1
   25fc0:	1a000001 	bne	25fcc <dir_next+0x1a0>
   25fc4:	e3a03002 	mov	r3, #2
   25fc8:	ea000021 	b	26054 <dir_next+0x228>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   25fcc:	e51b3008 	ldr	r3, [fp, #-8]
   25fd0:	e3730001 	cmn	r3, #1
   25fd4:	1a000001 	bne	25fe0 <dir_next+0x1b4>
   25fd8:	e3a03001 	mov	r3, #1
   25fdc:	ea00001c 	b	26054 <dir_next+0x228>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   25fe0:	e51b1008 	ldr	r1, [fp, #-8]
   25fe4:	e51b000c 	ldr	r0, [fp, #-12]
   25fe8:	ebfffeda 	bl	25b58 <dir_clear>
   25fec:	e1a03000 	mov	r3, r0
   25ff0:	e3530000 	cmp	r3, #0
   25ff4:	0a000001 	beq	26000 <dir_next+0x1d4>
   25ff8:	e3a03001 	mov	r3, #1
   25ffc:	ea000014 	b	26054 <dir_next+0x228>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
   26000:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26004:	e51b2008 	ldr	r2, [fp, #-8]
   26008:	e5832014 	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
   2600c:	e51b1008 	ldr	r1, [fp, #-8]
   26010:	e51b000c 	ldr	r0, [fp, #-12]
   26014:	ebfffc20 	bl	2509c <clst2sect>
   26018:	e1a02000 	mov	r2, r0
   2601c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26020:	e5832018 	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
   26024:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26028:	e51b2010 	ldr	r2, [fp, #-16]
   2602c:	e5832010 	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   26030:	e51b300c 	ldr	r3, [fp, #-12]
   26034:	e2832030 	add	r2, r3, #48	; 0x30
   26038:	e51b3010 	ldr	r3, [fp, #-16]
   2603c:	e1a03b83 	lsl	r3, r3, #23
   26040:	e1a03ba3 	lsr	r3, r3, #23
   26044:	e0822003 	add	r2, r2, r3
   26048:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2604c:	e583201c 	str	r2, [r3, #28]

	return FR_OK;
   26050:	e3a03000 	mov	r3, #0
}
   26054:	e1a00003 	mov	r0, r3
   26058:	e24bd004 	sub	sp, fp, #4
   2605c:	e8bd8800 	pop	{fp, pc}

00026060 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
   26060:	e92d4800 	push	{fp, lr}
   26064:	e28db004 	add	fp, sp, #4
   26068:	e24dd018 	sub	sp, sp, #24
   2606c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26070:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
   26074:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26078:	e5933000 	ldr	r3, [r3]
   2607c:	e50b3010 	str	r3, [fp, #-16]


	res = dir_sdi(dp, 0);
   26080:	e3a01000 	mov	r1, #0
   26084:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26088:	ebfffef3 	bl	25c5c <dir_sdi>
   2608c:	e1a03000 	mov	r3, r0
   26090:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   26094:	e55b3005 	ldrb	r3, [fp, #-5]
   26098:	e3530000 	cmp	r3, #0
   2609c:	1a000029 	bne	26148 <dir_alloc+0xe8>
		n = 0;
   260a0:	e3a03000 	mov	r3, #0
   260a4:	e50b300c 	str	r3, [fp, #-12]
		do {
			res = move_window(fs, dp->sect);
   260a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   260ac:	e5933018 	ldr	r3, [r3, #24]
   260b0:	e1a01003 	mov	r1, r3
   260b4:	e51b0010 	ldr	r0, [fp, #-16]
   260b8:	ebfffb72 	bl	24e88 <move_window>
   260bc:	e1a03000 	mov	r3, r0
   260c0:	e54b3005 	strb	r3, [fp, #-5]
			if (res != FR_OK) break;
   260c4:	e55b3005 	ldrb	r3, [fp, #-5]
   260c8:	e3530000 	cmp	r3, #0
   260cc:	1a00001c 	bne	26144 <dir_alloc+0xe4>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
   260d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   260d4:	e593301c 	ldr	r3, [r3, #28]
   260d8:	e5d33000 	ldrb	r3, [r3]
   260dc:	e35300e5 	cmp	r3, #229	; 0xe5
   260e0:	0a000004 	beq	260f8 <dir_alloc+0x98>
   260e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   260e8:	e593301c 	ldr	r3, [r3, #28]
   260ec:	e5d33000 	ldrb	r3, [r3]
   260f0:	e3530000 	cmp	r3, #0
   260f4:	1a000007 	bne	26118 <dir_alloc+0xb8>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
   260f8:	e51b300c 	ldr	r3, [fp, #-12]
   260fc:	e2833001 	add	r3, r3, #1
   26100:	e50b300c 	str	r3, [fp, #-12]
   26104:	e51b200c 	ldr	r2, [fp, #-12]
   26108:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2610c:	e1520003 	cmp	r2, r3
   26110:	1a000002 	bne	26120 <dir_alloc+0xc0>
   26114:	ea00000b 	b	26148 <dir_alloc+0xe8>
			} else {
				n = 0;				/* Not a free entry, restart to search */
   26118:	e3a03000 	mov	r3, #0
   2611c:	e50b300c 	str	r3, [fp, #-12]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
   26120:	e3a01001 	mov	r1, #1
   26124:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26128:	ebffff3f 	bl	25e2c <dir_next>
   2612c:	e1a03000 	mov	r3, r0
   26130:	e54b3005 	strb	r3, [fp, #-5]
		} while (res == FR_OK);
   26134:	e55b3005 	ldrb	r3, [fp, #-5]
   26138:	e3530000 	cmp	r3, #0
   2613c:	0affffd9 	beq	260a8 <dir_alloc+0x48>
   26140:	ea000000 	b	26148 <dir_alloc+0xe8>
			if (res != FR_OK) break;
   26144:	e320f000 	nop	{0}
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   26148:	e55b3005 	ldrb	r3, [fp, #-5]
   2614c:	e3530004 	cmp	r3, #4
   26150:	1a000001 	bne	2615c <dir_alloc+0xfc>
   26154:	e3a03007 	mov	r3, #7
   26158:	e54b3005 	strb	r3, [fp, #-5]
	return res;
   2615c:	e55b3005 	ldrb	r3, [fp, #-5]
}
   26160:	e1a00003 	mov	r0, r3
   26164:	e24bd004 	sub	sp, fp, #4
   26168:	e8bd8800 	pop	{fp, pc}

0002616c <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
   2616c:	e92d4800 	push	{fp, lr}
   26170:	e28db004 	add	fp, sp, #4
   26174:	e24dd010 	sub	sp, sp, #16
   26178:	e50b0010 	str	r0, [fp, #-16]
   2617c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
   26180:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26184:	e283301a 	add	r3, r3, #26
   26188:	e1a00003 	mov	r0, r3
   2618c:	ebfffa6e 	bl	24b4c <ld_word>
   26190:	e1a03000 	mov	r3, r0
   26194:	e50b3008 	str	r3, [fp, #-8]
	if (fs->fs_type == FS_FAT32) {
   26198:	e51b3010 	ldr	r3, [fp, #-16]
   2619c:	e5d33000 	ldrb	r3, [r3]
   261a0:	e3530003 	cmp	r3, #3
   261a4:	1a000008 	bne	261cc <ld_clust+0x60>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   261a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   261ac:	e2833014 	add	r3, r3, #20
   261b0:	e1a00003 	mov	r0, r3
   261b4:	ebfffa64 	bl	24b4c <ld_word>
   261b8:	e1a03000 	mov	r3, r0
   261bc:	e1a03803 	lsl	r3, r3, #16
   261c0:	e51b2008 	ldr	r2, [fp, #-8]
   261c4:	e1823003 	orr	r3, r2, r3
   261c8:	e50b3008 	str	r3, [fp, #-8]
	}

	return cl;
   261cc:	e51b3008 	ldr	r3, [fp, #-8]
}
   261d0:	e1a00003 	mov	r0, r3
   261d4:	e24bd004 	sub	sp, fp, #4
   261d8:	e8bd8800 	pop	{fp, pc}

000261dc <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
   261dc:	e92d4800 	push	{fp, lr}
   261e0:	e28db004 	add	fp, sp, #4
   261e4:	e24dd010 	sub	sp, sp, #16
   261e8:	e50b0008 	str	r0, [fp, #-8]
   261ec:	e50b100c 	str	r1, [fp, #-12]
   261f0:	e50b2010 	str	r2, [fp, #-16]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
   261f4:	e51b300c 	ldr	r3, [fp, #-12]
   261f8:	e283301a 	add	r3, r3, #26
   261fc:	e51b2010 	ldr	r2, [fp, #-16]
   26200:	e6ff2072 	uxth	r2, r2
   26204:	e1a01002 	mov	r1, r2
   26208:	e1a00003 	mov	r0, r3
   2620c:	ebfffa85 	bl	24c28 <st_word>
	if (fs->fs_type == FS_FAT32) {
   26210:	e51b3008 	ldr	r3, [fp, #-8]
   26214:	e5d33000 	ldrb	r3, [r3]
   26218:	e3530003 	cmp	r3, #3
   2621c:	1a000007 	bne	26240 <st_clust+0x64>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   26220:	e51b300c 	ldr	r3, [fp, #-12]
   26224:	e2832014 	add	r2, r3, #20
   26228:	e51b3010 	ldr	r3, [fp, #-16]
   2622c:	e1a03823 	lsr	r3, r3, #16
   26230:	e6ff3073 	uxth	r3, r3
   26234:	e1a01003 	mov	r1, r3
   26238:	e1a00002 	mov	r0, r2
   2623c:	ebfffa79 	bl	24c28 <st_word>
	}
}
   26240:	e320f000 	nop	{0}
   26244:	e24bd004 	sub	sp, fp, #4
   26248:	e8bd8800 	pop	{fp, pc}

0002624c <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
   2624c:	e92d4800 	push	{fp, lr}
   26250:	e28db004 	add	fp, sp, #4
   26254:	e24dd018 	sub	sp, sp, #24
   26258:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2625c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	FRESULT res = FR_NO_FILE;
   26260:	e3a03004 	mov	r3, #4
   26264:	e54b3005 	strb	r3, [fp, #-5]
	FATFS *fs = dp->obj.fs;
   26268:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2626c:	e5933000 	ldr	r3, [r3]
   26270:	e50b300c 	str	r3, [fp, #-12]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
   26274:	ea000037 	b	26358 <dir_read+0x10c>
		res = move_window(fs, dp->sect);
   26278:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2627c:	e5933018 	ldr	r3, [r3, #24]
   26280:	e1a01003 	mov	r1, r3
   26284:	e51b000c 	ldr	r0, [fp, #-12]
   26288:	ebfffafe 	bl	24e88 <move_window>
   2628c:	e1a03000 	mov	r3, r0
   26290:	e54b3005 	strb	r3, [fp, #-5]
		if (res != FR_OK) break;
   26294:	e55b3005 	ldrb	r3, [fp, #-5]
   26298:	e3530000 	cmp	r3, #0
   2629c:	1a000032 	bne	2636c <dir_read+0x120>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
   262a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   262a4:	e593301c 	ldr	r3, [r3, #28]
   262a8:	e5d33000 	ldrb	r3, [r3]
   262ac:	e54b300d 	strb	r3, [fp, #-13]
		if (b == 0) {
   262b0:	e55b300d 	ldrb	r3, [fp, #-13]
   262b4:	e3530000 	cmp	r3, #0
   262b8:	1a000002 	bne	262c8 <dir_read+0x7c>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
   262bc:	e3a03004 	mov	r3, #4
   262c0:	e54b3005 	strb	r3, [fp, #-5]
   262c4:	ea00002d 	b	26380 <dir_read+0x134>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   262c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   262cc:	e593301c 	ldr	r3, [r3, #28]
   262d0:	e283300b 	add	r3, r3, #11
   262d4:	e5d33000 	ldrb	r3, [r3]
   262d8:	e203303f 	and	r3, r3, #63	; 0x3f
   262dc:	e54b300e 	strb	r3, [fp, #-14]
   262e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   262e4:	e55b200e 	ldrb	r2, [fp, #-14]
   262e8:	e5c32006 	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
   262ec:	e55b300d 	ldrb	r3, [fp, #-13]
   262f0:	e35300e5 	cmp	r3, #229	; 0xe5
   262f4:	0a00000f 	beq	26338 <dir_read+0xec>
   262f8:	e55b300d 	ldrb	r3, [fp, #-13]
   262fc:	e353002e 	cmp	r3, #46	; 0x2e
   26300:	0a00000c 	beq	26338 <dir_read+0xec>
   26304:	e55b300e 	ldrb	r3, [fp, #-14]
   26308:	e353000f 	cmp	r3, #15
   2630c:	0a000009 	beq	26338 <dir_read+0xec>
   26310:	e55b300e 	ldrb	r3, [fp, #-14]
   26314:	e3c33020 	bic	r3, r3, #32
   26318:	e3530008 	cmp	r3, #8
   2631c:	03a03001 	moveq	r3, #1
   26320:	13a03000 	movne	r3, #0
   26324:	e6ef3073 	uxtb	r3, r3
   26328:	e1a02003 	mov	r2, r3
   2632c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26330:	e1530002 	cmp	r3, r2
   26334:	0a00000e 	beq	26374 <dir_read+0x128>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
   26338:	e3a01000 	mov	r1, #0
   2633c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26340:	ebfffeb9 	bl	25e2c <dir_next>
   26344:	e1a03000 	mov	r3, r0
   26348:	e54b3005 	strb	r3, [fp, #-5]
		if (res != FR_OK) break;
   2634c:	e55b3005 	ldrb	r3, [fp, #-5]
   26350:	e3530000 	cmp	r3, #0
   26354:	1a000008 	bne	2637c <dir_read+0x130>
	while (dp->sect) {
   26358:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2635c:	e5933018 	ldr	r3, [r3, #24]
   26360:	e3530000 	cmp	r3, #0
   26364:	1affffc3 	bne	26278 <dir_read+0x2c>
   26368:	ea000004 	b	26380 <dir_read+0x134>
		if (res != FR_OK) break;
   2636c:	e320f000 	nop	{0}
   26370:	ea000002 	b	26380 <dir_read+0x134>
				break;
   26374:	e320f000 	nop	{0}
   26378:	ea000000 	b	26380 <dir_read+0x134>
		if (res != FR_OK) break;
   2637c:	e320f000 	nop	{0}
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   26380:	e55b3005 	ldrb	r3, [fp, #-5]
   26384:	e3530000 	cmp	r3, #0
   26388:	0a000002 	beq	26398 <dir_read+0x14c>
   2638c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26390:	e3a02000 	mov	r2, #0
   26394:	e5832018 	str	r2, [r3, #24]
	return res;
   26398:	e55b3005 	ldrb	r3, [fp, #-5]
}
   2639c:	e1a00003 	mov	r0, r3
   263a0:	e24bd004 	sub	sp, fp, #4
   263a4:	e8bd8800 	pop	{fp, pc}

000263a8 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
   263a8:	e92d4800 	push	{fp, lr}
   263ac:	e28db004 	add	fp, sp, #4
   263b0:	e24dd018 	sub	sp, sp, #24
   263b4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   263b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   263bc:	e5933000 	ldr	r3, [r3]
   263c0:	e50b300c 	str	r3, [fp, #-12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
   263c4:	e3a01000 	mov	r1, #0
   263c8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   263cc:	ebfffe22 	bl	25c5c <dir_sdi>
   263d0:	e1a03000 	mov	r3, r0
   263d4:	e54b3005 	strb	r3, [fp, #-5]
	if (res != FR_OK) return res;
   263d8:	e55b3005 	ldrb	r3, [fp, #-5]
   263dc:	e3530000 	cmp	r3, #0
   263e0:	0a000001 	beq	263ec <dir_find+0x44>
   263e4:	e55b3005 	ldrb	r3, [fp, #-5]
   263e8:	ea000039 	b	264d4 <dir_find+0x12c>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
   263ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   263f0:	e5933018 	ldr	r3, [r3, #24]
   263f4:	e1a01003 	mov	r1, r3
   263f8:	e51b000c 	ldr	r0, [fp, #-12]
   263fc:	ebfffaa1 	bl	24e88 <move_window>
   26400:	e1a03000 	mov	r3, r0
   26404:	e54b3005 	strb	r3, [fp, #-5]
		if (res != FR_OK) break;
   26408:	e55b3005 	ldrb	r3, [fp, #-5]
   2640c:	e3530000 	cmp	r3, #0
   26410:	1a00002b 	bne	264c4 <dir_find+0x11c>
		c = dp->dir[DIR_Name];
   26414:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26418:	e593301c 	ldr	r3, [r3, #28]
   2641c:	e5d33000 	ldrb	r3, [r3]
   26420:	e54b300d 	strb	r3, [fp, #-13]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
   26424:	e55b300d 	ldrb	r3, [fp, #-13]
   26428:	e3530000 	cmp	r3, #0
   2642c:	1a000002 	bne	2643c <dir_find+0x94>
   26430:	e3a03004 	mov	r3, #4
   26434:	e54b3005 	strb	r3, [fp, #-5]
   26438:	ea000024 	b	264d0 <dir_find+0x128>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Not matched, reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
   2643c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26440:	e593301c 	ldr	r3, [r3, #28]
   26444:	e283300b 	add	r3, r3, #11
   26448:	e5d33000 	ldrb	r3, [r3]
   2644c:	e203303f 	and	r3, r3, #63	; 0x3f
   26450:	e6ef2073 	uxtb	r2, r3
   26454:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26458:	e5c32006 	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
   2645c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26460:	e593301c 	ldr	r3, [r3, #28]
   26464:	e283300b 	add	r3, r3, #11
   26468:	e5d33000 	ldrb	r3, [r3]
   2646c:	e2033008 	and	r3, r3, #8
   26470:	e3530000 	cmp	r3, #0
   26474:	1a000009 	bne	264a0 <dir_find+0xf8>
   26478:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2647c:	e593001c 	ldr	r0, [r3, #28]
   26480:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26484:	e2833020 	add	r3, r3, #32
   26488:	e3a0200b 	mov	r2, #11
   2648c:	e1a01003 	mov	r1, r3
   26490:	eb001380 	bl	2b298 <memcmp>
   26494:	e1a03000 	mov	r3, r0
   26498:	e3530000 	cmp	r3, #0
   2649c:	0a00000a 	beq	264cc <dir_find+0x124>
#endif
		res = dir_next(dp, 0);	/* Next entry */
   264a0:	e3a01000 	mov	r1, #0
   264a4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   264a8:	ebfffe5f 	bl	25e2c <dir_next>
   264ac:	e1a03000 	mov	r3, r0
   264b0:	e54b3005 	strb	r3, [fp, #-5]
	} while (res == FR_OK);
   264b4:	e55b3005 	ldrb	r3, [fp, #-5]
   264b8:	e3530000 	cmp	r3, #0
   264bc:	0affffca 	beq	263ec <dir_find+0x44>
   264c0:	ea000002 	b	264d0 <dir_find+0x128>
		if (res != FR_OK) break;
   264c4:	e320f000 	nop	{0}
   264c8:	ea000000 	b	264d0 <dir_find+0x128>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
   264cc:	e320f000 	nop	{0}

	return res;
   264d0:	e55b3005 	ldrb	r3, [fp, #-5]
}
   264d4:	e1a00003 	mov	r0, r3
   264d8:	e24bd004 	sub	sp, fp, #4
   264dc:	e8bd8800 	pop	{fp, pc}

000264e0 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
   264e0:	e92d4800 	push	{fp, lr}
   264e4:	e28db004 	add	fp, sp, #4
   264e8:	e24dd010 	sub	sp, sp, #16
   264ec:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   264f0:	e51b3010 	ldr	r3, [fp, #-16]
   264f4:	e5933000 	ldr	r3, [r3]
   264f8:	e50b300c 	str	r3, [fp, #-12]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
   264fc:	e3a01001 	mov	r1, #1
   26500:	e51b0010 	ldr	r0, [fp, #-16]
   26504:	ebfffed5 	bl	26060 <dir_alloc>
   26508:	e1a03000 	mov	r3, r0
   2650c:	e54b3005 	strb	r3, [fp, #-5]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
   26510:	e55b3005 	ldrb	r3, [fp, #-5]
   26514:	e3530000 	cmp	r3, #0
   26518:	1a000019 	bne	26584 <dir_register+0xa4>
		res = move_window(fs, dp->sect);
   2651c:	e51b3010 	ldr	r3, [fp, #-16]
   26520:	e5933018 	ldr	r3, [r3, #24]
   26524:	e1a01003 	mov	r1, r3
   26528:	e51b000c 	ldr	r0, [fp, #-12]
   2652c:	ebfffa55 	bl	24e88 <move_window>
   26530:	e1a03000 	mov	r3, r0
   26534:	e54b3005 	strb	r3, [fp, #-5]
		if (res == FR_OK) {
   26538:	e55b3005 	ldrb	r3, [fp, #-5]
   2653c:	e3530000 	cmp	r3, #0
   26540:	1a00000f 	bne	26584 <dir_register+0xa4>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
   26544:	e51b3010 	ldr	r3, [fp, #-16]
   26548:	e593301c 	ldr	r3, [r3, #28]
   2654c:	e3a02020 	mov	r2, #32
   26550:	e3a01000 	mov	r1, #0
   26554:	e1a00003 	mov	r0, r3
   26558:	eb0013c1 	bl	2b464 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
   2655c:	e51b3010 	ldr	r3, [fp, #-16]
   26560:	e593001c 	ldr	r0, [r3, #28]
   26564:	e51b3010 	ldr	r3, [fp, #-16]
   26568:	e2833020 	add	r3, r3, #32
   2656c:	e3a0200b 	mov	r2, #11
   26570:	e1a01003 	mov	r1, r3
   26574:	eb001372 	bl	2b344 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
   26578:	e51b300c 	ldr	r3, [fp, #-12]
   2657c:	e3a02001 	mov	r2, #1
   26580:	e5c32004 	strb	r2, [r3, #4]
		}
	}

	return res;
   26584:	e55b3005 	ldrb	r3, [fp, #-5]
}
   26588:	e1a00003 	mov	r0, r3
   2658c:	e24bd004 	sub	sp, fp, #4
   26590:	e8bd8800 	pop	{fp, pc}

00026594 <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
   26594:	e92d4800 	push	{fp, lr}
   26598:	e28db004 	add	fp, sp, #4
   2659c:	e24dd010 	sub	sp, sp, #16
   265a0:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   265a4:	e51b3010 	ldr	r3, [fp, #-16]
   265a8:	e5933000 	ldr	r3, [r3]
   265ac:	e50b3008 	str	r3, [fp, #-8]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
   265b0:	e51b3010 	ldr	r3, [fp, #-16]
   265b4:	e5933018 	ldr	r3, [r3, #24]
   265b8:	e1a01003 	mov	r1, r3
   265bc:	e51b0008 	ldr	r0, [fp, #-8]
   265c0:	ebfffa30 	bl	24e88 <move_window>
   265c4:	e1a03000 	mov	r3, r0
   265c8:	e54b3009 	strb	r3, [fp, #-9]
	if (res == FR_OK) {
   265cc:	e55b3009 	ldrb	r3, [fp, #-9]
   265d0:	e3530000 	cmp	r3, #0
   265d4:	1a000006 	bne	265f4 <dir_remove+0x60>
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
   265d8:	e51b3010 	ldr	r3, [fp, #-16]
   265dc:	e593301c 	ldr	r3, [r3, #28]
   265e0:	e3e0201a 	mvn	r2, #26
   265e4:	e5c32000 	strb	r2, [r3]
		fs->wflag = 1;
   265e8:	e51b3008 	ldr	r3, [fp, #-8]
   265ec:	e3a02001 	mov	r2, #1
   265f0:	e5c32004 	strb	r2, [r3, #4]
	}
#endif

	return res;
   265f4:	e55b3009 	ldrb	r3, [fp, #-9]
}
   265f8:	e1a00003 	mov	r0, r3
   265fc:	e24bd004 	sub	sp, fp, #4
   26600:	e8bd8800 	pop	{fp, pc}

00026604 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
   26604:	e92d4800 	push	{fp, lr}
   26608:	e28db004 	add	fp, sp, #4
   2660c:	e24dd018 	sub	sp, sp, #24
   26610:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26614:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
   26618:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2661c:	e3a02000 	mov	r2, #0
   26620:	e5c32009 	strb	r2, [r3, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   26624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26628:	e5933018 	ldr	r3, [r3, #24]
   2662c:	e3530000 	cmp	r3, #0
   26630:	0a000052 	beq	26780 <get_fileinfo+0x17c>
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
   26634:	e3a03000 	mov	r3, #0
   26638:	e50b300c 	str	r3, [fp, #-12]
   2663c:	e51b300c 	ldr	r3, [fp, #-12]
   26640:	e50b3008 	str	r3, [fp, #-8]
	while (si < 11) {		/* Copy name body and extension */
   26644:	ea000021 	b	266d0 <get_fileinfo+0xcc>
		c = (TCHAR)dp->dir[si++];
   26648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2664c:	e593201c 	ldr	r2, [r3, #28]
   26650:	e51b3008 	ldr	r3, [fp, #-8]
   26654:	e2831001 	add	r1, r3, #1
   26658:	e50b1008 	str	r1, [fp, #-8]
   2665c:	e0823003 	add	r3, r2, r3
   26660:	e5d33000 	ldrb	r3, [r3]
   26664:	e54b300d 	strb	r3, [fp, #-13]
		if (c == ' ') continue;		/* Skip padding spaces */
   26668:	e55b300d 	ldrb	r3, [fp, #-13]
   2666c:	e3530020 	cmp	r3, #32
   26670:	1a000000 	bne	26678 <get_fileinfo+0x74>
   26674:	ea000015 	b	266d0 <get_fileinfo+0xcc>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
   26678:	e55b300d 	ldrb	r3, [fp, #-13]
   2667c:	e3530005 	cmp	r3, #5
   26680:	1a000001 	bne	2668c <get_fileinfo+0x88>
   26684:	e3e0301a 	mvn	r3, #26
   26688:	e54b300d 	strb	r3, [fp, #-13]
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
   2668c:	e51b3008 	ldr	r3, [fp, #-8]
   26690:	e3530009 	cmp	r3, #9
   26694:	1a000006 	bne	266b4 <get_fileinfo+0xb0>
   26698:	e51b300c 	ldr	r3, [fp, #-12]
   2669c:	e2832001 	add	r2, r3, #1
   266a0:	e50b200c 	str	r2, [fp, #-12]
   266a4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   266a8:	e0823003 	add	r3, r2, r3
   266ac:	e3a0202e 	mov	r2, #46	; 0x2e
   266b0:	e5c32009 	strb	r2, [r3, #9]
		fno->fname[di++] = c;
   266b4:	e51b300c 	ldr	r3, [fp, #-12]
   266b8:	e2832001 	add	r2, r3, #1
   266bc:	e50b200c 	str	r2, [fp, #-12]
   266c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   266c4:	e0823003 	add	r3, r2, r3
   266c8:	e55b200d 	ldrb	r2, [fp, #-13]
   266cc:	e5c32009 	strb	r2, [r3, #9]
	while (si < 11) {		/* Copy name body and extension */
   266d0:	e51b3008 	ldr	r3, [fp, #-8]
   266d4:	e353000a 	cmp	r3, #10
   266d8:	9affffda 	bls	26648 <get_fileinfo+0x44>
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
   266dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   266e0:	e51b300c 	ldr	r3, [fp, #-12]
   266e4:	e0823003 	add	r3, r2, r3
   266e8:	e2833009 	add	r3, r3, #9
   266ec:	e3a02000 	mov	r2, #0
   266f0:	e5c32000 	strb	r2, [r3]
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
   266f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   266f8:	e593301c 	ldr	r3, [r3, #28]
   266fc:	e283300b 	add	r3, r3, #11
   26700:	e5d33000 	ldrb	r3, [r3]
   26704:	e203303f 	and	r3, r3, #63	; 0x3f
   26708:	e6ef2073 	uxtb	r2, r3
   2670c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26710:	e5c32008 	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
   26714:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26718:	e593301c 	ldr	r3, [r3, #28]
   2671c:	e283301c 	add	r3, r3, #28
   26720:	e1a00003 	mov	r0, r3
   26724:	ebfff91e 	bl	24ba4 <ld_dword>
   26728:	e1a02000 	mov	r2, r0
   2672c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26730:	e5832000 	str	r2, [r3]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
   26734:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26738:	e593301c 	ldr	r3, [r3, #28]
   2673c:	e2833016 	add	r3, r3, #22
   26740:	e1a00003 	mov	r0, r3
   26744:	ebfff900 	bl	24b4c <ld_word>
   26748:	e1a03000 	mov	r3, r0
   2674c:	e1a02003 	mov	r2, r3
   26750:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26754:	e1c320b6 	strh	r2, [r3, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
   26758:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2675c:	e593301c 	ldr	r3, [r3, #28]
   26760:	e2833018 	add	r3, r3, #24
   26764:	e1a00003 	mov	r0, r3
   26768:	ebfff8f7 	bl	24b4c <ld_word>
   2676c:	e1a03000 	mov	r3, r0
   26770:	e1a02003 	mov	r2, r3
   26774:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26778:	e1c320b4 	strh	r2, [r3, #4]
   2677c:	ea000000 	b	26784 <get_fileinfo+0x180>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
   26780:	e320f000 	nop	{0}
}
   26784:	e24bd004 	sub	sp, fp, #4
   26788:	e8bd8800 	pop	{fp, pc}

0002678c <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
   2678c:	e92d4800 	push	{fp, lr}
   26790:	e28db004 	add	fp, sp, #4
   26794:	e24dd028 	sub	sp, sp, #40	; 0x28
   26798:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   2679c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
   267a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   267a4:	e5933000 	ldr	r3, [r3]
   267a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   267ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   267b0:	e2833020 	add	r3, r3, #32
   267b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	memset(sfn, ' ', 11);
   267b8:	e3a0200b 	mov	r2, #11
   267bc:	e3a01020 	mov	r1, #32
   267c0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   267c4:	eb001326 	bl	2b464 <memset>
	si = i = 0; ni = 8;
   267c8:	e3a03000 	mov	r3, #0
   267cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   267d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   267d4:	e50b3010 	str	r3, [fp, #-16]
   267d8:	e3a03008 	mov	r3, #8
   267dc:	e50b300c 	str	r3, [fp, #-12]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
   267e0:	e51b3010 	ldr	r3, [fp, #-16]
   267e4:	e2832001 	add	r2, r3, #1
   267e8:	e50b2010 	str	r2, [fp, #-16]
   267ec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   267f0:	e0823003 	add	r3, r2, r3
   267f4:	e5d33000 	ldrb	r3, [r3]
   267f8:	e54b3005 	strb	r3, [fp, #-5]
		if (c <= ' ') break; 			/* Break if end of the path name */
   267fc:	e55b3005 	ldrb	r3, [fp, #-5]
   26800:	e3530020 	cmp	r3, #32
   26804:	9a000075 	bls	269e0 <create_name+0x254>
		if (IsSeparator(c)) {			/* Break if a separator is found */
   26808:	e55b3005 	ldrb	r3, [fp, #-5]
   2680c:	e353002f 	cmp	r3, #47	; 0x2f
   26810:	0a000006 	beq	26830 <create_name+0xa4>
   26814:	e55b3005 	ldrb	r3, [fp, #-5]
   26818:	e353005c 	cmp	r3, #92	; 0x5c
   2681c:	1a000010 	bne	26864 <create_name+0xd8>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
   26820:	ea000002 	b	26830 <create_name+0xa4>
   26824:	e51b3010 	ldr	r3, [fp, #-16]
   26828:	e2833001 	add	r3, r3, #1
   2682c:	e50b3010 	str	r3, [fp, #-16]
   26830:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   26834:	e51b3010 	ldr	r3, [fp, #-16]
   26838:	e0823003 	add	r3, r2, r3
   2683c:	e5d33000 	ldrb	r3, [r3]
   26840:	e353002f 	cmp	r3, #47	; 0x2f
   26844:	0afffff6 	beq	26824 <create_name+0x98>
   26848:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2684c:	e51b3010 	ldr	r3, [fp, #-16]
   26850:	e0823003 	add	r3, r2, r3
   26854:	e5d33000 	ldrb	r3, [r3]
   26858:	e353005c 	cmp	r3, #92	; 0x5c
   2685c:	0afffff0 	beq	26824 <create_name+0x98>
			break;
   26860:	ea00005f 	b	269e4 <create_name+0x258>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
   26864:	e55b3005 	ldrb	r3, [fp, #-5]
   26868:	e353002e 	cmp	r3, #46	; 0x2e
   2686c:	0a000003 	beq	26880 <create_name+0xf4>
   26870:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   26874:	e51b300c 	ldr	r3, [fp, #-12]
   26878:	e1520003 	cmp	r2, r3
   2687c:	3a00000c 	bcc	268b4 <create_name+0x128>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
   26880:	e51b300c 	ldr	r3, [fp, #-12]
   26884:	e353000b 	cmp	r3, #11
   26888:	0a000002 	beq	26898 <create_name+0x10c>
   2688c:	e55b3005 	ldrb	r3, [fp, #-5]
   26890:	e353002e 	cmp	r3, #46	; 0x2e
   26894:	0a000001 	beq	268a0 <create_name+0x114>
   26898:	e3a03006 	mov	r3, #6
   2689c:	ea000071 	b	26a68 <create_name+0x2dc>
			i = 8; ni = 11;				/* Enter file extension field */
   268a0:	e3a03008 	mov	r3, #8
   268a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   268a8:	e3a0300b 	mov	r3, #11
   268ac:	e50b300c 	str	r3, [fp, #-12]
			continue;
   268b0:	ea000049 	b	269dc <create_name+0x250>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
   268b4:	e15b30d5 	ldrsb	r3, [fp, #-5]
   268b8:	e3530000 	cmp	r3, #0
   268bc:	aa000004 	bge	268d4 <create_name+0x148>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
   268c0:	e55b3005 	ldrb	r3, [fp, #-5]
   268c4:	e203307f 	and	r3, r3, #127	; 0x7f
   268c8:	e59f21a4 	ldr	r2, [pc, #420]	; 26a74 <create_name+0x2e8>
   268cc:	e7d23003 	ldrb	r3, [r2, r3]
   268d0:	e54b3005 	strb	r3, [fp, #-5]
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
   268d4:	e55b3005 	ldrb	r3, [fp, #-5]
   268d8:	e1a00003 	mov	r0, r3
   268dc:	ebfff914 	bl	24d34 <dbc_1st>
   268e0:	e1a03000 	mov	r3, r0
   268e4:	e3530000 	cmp	r3, #0
   268e8:	0a000022 	beq	26978 <create_name+0x1ec>
			d = (BYTE)p[si++];			/* Get 2nd byte */
   268ec:	e51b3010 	ldr	r3, [fp, #-16]
   268f0:	e2832001 	add	r2, r3, #1
   268f4:	e50b2010 	str	r2, [fp, #-16]
   268f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   268fc:	e0823003 	add	r3, r2, r3
   26900:	e5d33000 	ldrb	r3, [r3]
   26904:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
   26908:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   2690c:	e1a00003 	mov	r0, r3
   26910:	ebfff916 	bl	24d70 <dbc_2nd>
   26914:	e1a03000 	mov	r3, r0
   26918:	e3530000 	cmp	r3, #0
   2691c:	0a000004 	beq	26934 <create_name+0x1a8>
   26920:	e51b300c 	ldr	r3, [fp, #-12]
   26924:	e2433001 	sub	r3, r3, #1
   26928:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2692c:	e1520003 	cmp	r2, r3
   26930:	3a000001 	bcc	2693c <create_name+0x1b0>
   26934:	e3a03006 	mov	r3, #6
   26938:	ea00004a 	b	26a68 <create_name+0x2dc>
			sfn[i++] = c;
   2693c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   26940:	e2832001 	add	r2, r3, #1
   26944:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   26948:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2694c:	e0823003 	add	r3, r2, r3
   26950:	e55b2005 	ldrb	r2, [fp, #-5]
   26954:	e5c32000 	strb	r2, [r3]
			sfn[i++] = d;
   26958:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2695c:	e2832001 	add	r2, r3, #1
   26960:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   26964:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   26968:	e0823003 	add	r3, r2, r3
   2696c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
   26970:	e5c32000 	strb	r2, [r3]
   26974:	eaffff99 	b	267e0 <create_name+0x54>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
   26978:	e55b3005 	ldrb	r3, [fp, #-5]
   2697c:	e1a01003 	mov	r1, r3
   26980:	e59f00f0 	ldr	r0, [pc, #240]	; 26a78 <create_name+0x2ec>
   26984:	eb0012fd 	bl	2b580 <strchr>
   26988:	e1a03000 	mov	r3, r0
   2698c:	e3530000 	cmp	r3, #0
   26990:	0a000001 	beq	2699c <create_name+0x210>
   26994:	e3a03006 	mov	r3, #6
   26998:	ea000032 	b	26a68 <create_name+0x2dc>
			if (IsLower(c)) c -= 0x20;	/* To upper */
   2699c:	e55b3005 	ldrb	r3, [fp, #-5]
   269a0:	e3530060 	cmp	r3, #96	; 0x60
   269a4:	9a000005 	bls	269c0 <create_name+0x234>
   269a8:	e55b3005 	ldrb	r3, [fp, #-5]
   269ac:	e353007a 	cmp	r3, #122	; 0x7a
   269b0:	8a000002 	bhi	269c0 <create_name+0x234>
   269b4:	e55b3005 	ldrb	r3, [fp, #-5]
   269b8:	e2433020 	sub	r3, r3, #32
   269bc:	e54b3005 	strb	r3, [fp, #-5]
			sfn[i++] = c;
   269c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   269c4:	e2832001 	add	r2, r3, #1
   269c8:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   269cc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   269d0:	e0823003 	add	r3, r2, r3
   269d4:	e55b2005 	ldrb	r2, [fp, #-5]
   269d8:	e5c32000 	strb	r2, [r3]
		c = (BYTE)p[si++];				/* Get a byte */
   269dc:	eaffff7f 	b	267e0 <create_name+0x54>
		if (c <= ' ') break; 			/* Break if end of the path name */
   269e0:	e320f000 	nop	{0}
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
   269e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   269e8:	e51b3010 	ldr	r3, [fp, #-16]
   269ec:	e0822003 	add	r2, r2, r3
   269f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   269f4:	e5832000 	str	r2, [r3]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
   269f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   269fc:	e3530000 	cmp	r3, #0
   26a00:	1a000001 	bne	26a0c <create_name+0x280>
   26a04:	e3a03006 	mov	r3, #6
   26a08:	ea000016 	b	26a68 <create_name+0x2dc>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   26a0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a10:	e5d33000 	ldrb	r3, [r3]
   26a14:	e35300e5 	cmp	r3, #229	; 0xe5
   26a18:	1a000002 	bne	26a28 <create_name+0x29c>
   26a1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a20:	e3a02005 	mov	r2, #5
   26a24:	e5c32000 	strb	r2, [r3]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
   26a28:	e55b3005 	ldrb	r3, [fp, #-5]
   26a2c:	e3530020 	cmp	r3, #32
   26a30:	9a000005 	bls	26a4c <create_name+0x2c0>
   26a34:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   26a38:	e51b3010 	ldr	r3, [fp, #-16]
   26a3c:	e0823003 	add	r3, r2, r3
   26a40:	e5d33000 	ldrb	r3, [r3]
   26a44:	e3530020 	cmp	r3, #32
   26a48:	8a000001 	bhi	26a54 <create_name+0x2c8>
   26a4c:	e3a02004 	mov	r2, #4
   26a50:	ea000000 	b	26a58 <create_name+0x2cc>
   26a54:	e3a02000 	mov	r2, #0
   26a58:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26a5c:	e283300b 	add	r3, r3, #11
   26a60:	e5c32000 	strb	r2, [r3]

	return FR_OK;
   26a64:	e3a03000 	mov	r3, #0
#endif /* FF_USE_LFN */
}
   26a68:	e1a00003 	mov	r0, r3
   26a6c:	e24bd004 	sub	sp, fp, #4
   26a70:	e8bd8800 	pop	{fp, pc}
   26a74:	0002bde0 	andeq	fp, r2, r0, ror #27
   26a78:	0002be60 	andeq	fp, r2, r0, ror #28

00026a7c <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
   26a7c:	e92d4800 	push	{fp, lr}
   26a80:	e28db004 	add	fp, sp, #4
   26a84:	e24dd018 	sub	sp, sp, #24
   26a88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   26a8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
   26a90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26a94:	e5933000 	ldr	r3, [r3]
   26a98:	e50b300c 	str	r3, [fp, #-12]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
   26a9c:	ea000002 	b	26aac <follow_path+0x30>
   26aa0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26aa4:	e2833001 	add	r3, r3, #1
   26aa8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   26aac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26ab0:	e5d33000 	ldrb	r3, [r3]
   26ab4:	e353002f 	cmp	r3, #47	; 0x2f
   26ab8:	0afffff8 	beq	26aa0 <follow_path+0x24>
   26abc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26ac0:	e5d33000 	ldrb	r3, [r3]
   26ac4:	e353005c 	cmp	r3, #92	; 0x5c
   26ac8:	0afffff4 	beq	26aa0 <follow_path+0x24>
		dp->obj.sclust = 0;					/* Start from the root directory */
   26acc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26ad0:	e3a02000 	mov	r2, #0
   26ad4:	e5832008 	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
   26ad8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   26adc:	e5d33000 	ldrb	r3, [r3]
   26ae0:	e353001f 	cmp	r3, #31
   26ae4:	8a000008 	bhi	26b0c <follow_path+0x90>
		dp->fn[NSFLAG] = NS_NONAME;
   26ae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26aec:	e3e0207f 	mvn	r2, #127	; 0x7f
   26af0:	e5c3202b 	strb	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
   26af4:	e3a01000 	mov	r1, #0
   26af8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26afc:	ebfffc56 	bl	25c5c <dir_sdi>
   26b00:	e1a03000 	mov	r3, r0
   26b04:	e54b3005 	strb	r3, [fp, #-5]
   26b08:	ea00003b 	b	26bfc <follow_path+0x180>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
   26b0c:	e24b301c 	sub	r3, fp, #28
   26b10:	e1a01003 	mov	r1, r3
   26b14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26b18:	ebffff1b 	bl	2678c <create_name>
   26b1c:	e1a03000 	mov	r3, r0
   26b20:	e54b3005 	strb	r3, [fp, #-5]
			if (res != FR_OK) break;
   26b24:	e55b3005 	ldrb	r3, [fp, #-5]
   26b28:	e3530000 	cmp	r3, #0
   26b2c:	1a00002d 	bne	26be8 <follow_path+0x16c>
			res = dir_find(dp);				/* Find an object with the segment name */
   26b30:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   26b34:	ebfffe1b 	bl	263a8 <dir_find>
   26b38:	e1a03000 	mov	r3, r0
   26b3c:	e54b3005 	strb	r3, [fp, #-5]
			ns = dp->fn[NSFLAG];
   26b40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26b44:	e5d3302b 	ldrb	r3, [r3, #43]	; 0x2b
   26b48:	e54b300d 	strb	r3, [fp, #-13]
			if (res != FR_OK) {				/* Failed to find the object */
   26b4c:	e55b3005 	ldrb	r3, [fp, #-5]
   26b50:	e3530000 	cmp	r3, #0
   26b54:	0a000009 	beq	26b80 <follow_path+0x104>
				if (res == FR_NO_FILE) {	/* Object is not found */
   26b58:	e55b3005 	ldrb	r3, [fp, #-5]
   26b5c:	e3530004 	cmp	r3, #4
   26b60:	1a000022 	bne	26bf0 <follow_path+0x174>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   26b64:	e55b300d 	ldrb	r3, [fp, #-13]
   26b68:	e2033004 	and	r3, r3, #4
   26b6c:	e3530000 	cmp	r3, #0
   26b70:	1a00001e 	bne	26bf0 <follow_path+0x174>
   26b74:	e3a03005 	mov	r3, #5
   26b78:	e54b3005 	strb	r3, [fp, #-5]
					}
				}
				break;
   26b7c:	ea00001b 	b	26bf0 <follow_path+0x174>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
   26b80:	e55b300d 	ldrb	r3, [fp, #-13]
   26b84:	e2033004 	and	r3, r3, #4
   26b88:	e3530000 	cmp	r3, #0
   26b8c:	1a000019 	bne	26bf8 <follow_path+0x17c>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
   26b90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26b94:	e5d33006 	ldrb	r3, [r3, #6]
   26b98:	e2033010 	and	r3, r3, #16
   26b9c:	e3530000 	cmp	r3, #0
   26ba0:	1a000002 	bne	26bb0 <follow_path+0x134>
				res = FR_NO_PATH; break;
   26ba4:	e3a03005 	mov	r3, #5
   26ba8:	e54b3005 	strb	r3, [fp, #-5]
   26bac:	ea000012 	b	26bfc <follow_path+0x180>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
   26bb0:	e51b300c 	ldr	r3, [fp, #-12]
   26bb4:	e2832030 	add	r2, r3, #48	; 0x30
   26bb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26bbc:	e5933010 	ldr	r3, [r3, #16]
   26bc0:	e1a03b83 	lsl	r3, r3, #23
   26bc4:	e1a03ba3 	lsr	r3, r3, #23
   26bc8:	e0823003 	add	r3, r2, r3
   26bcc:	e1a01003 	mov	r1, r3
   26bd0:	e51b000c 	ldr	r0, [fp, #-12]
   26bd4:	ebfffd64 	bl	2616c <ld_clust>
   26bd8:	e1a02000 	mov	r2, r0
   26bdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26be0:	e5832008 	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
   26be4:	eaffffc8 	b	26b0c <follow_path+0x90>
			if (res != FR_OK) break;
   26be8:	e320f000 	nop	{0}
   26bec:	ea000002 	b	26bfc <follow_path+0x180>
				break;
   26bf0:	e320f000 	nop	{0}
   26bf4:	ea000000 	b	26bfc <follow_path+0x180>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
   26bf8:	e320f000 	nop	{0}
			}
		}
	}

	return res;
   26bfc:	e55b3005 	ldrb	r3, [fp, #-5]
}
   26c00:	e1a00003 	mov	r0, r3
   26c04:	e24bd004 	sub	sp, fp, #4
   26c08:	e8bd8800 	pop	{fp, pc}

00026c0c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
   26c0c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   26c10:	e28db000 	add	fp, sp, #0
   26c14:	e24dd01c 	sub	sp, sp, #28
   26c18:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
   26c1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26c20:	e5933000 	ldr	r3, [r3]
   26c24:	e50b3010 	str	r3, [fp, #-16]
   26c28:	e51b3010 	ldr	r3, [fp, #-16]
   26c2c:	e50b3008 	str	r3, [fp, #-8]
	if (!tp) return -1;		/* Invalid path name? */
   26c30:	e51b3010 	ldr	r3, [fp, #-16]
   26c34:	e3530000 	cmp	r3, #0
   26c38:	1a000001 	bne	26c44 <get_ldnumber+0x38>
   26c3c:	e3e03000 	mvn	r3, #0
   26c40:	ea00002b 	b	26cf4 <get_ldnumber+0xe8>
	do {					/* Find a colon in the path */
		chr = *tt++;
   26c44:	e51b3008 	ldr	r3, [fp, #-8]
   26c48:	e2832001 	add	r2, r3, #1
   26c4c:	e50b2008 	str	r2, [fp, #-8]
   26c50:	e5d33000 	ldrb	r3, [r3]
   26c54:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	} while (!IsTerminator(chr) && chr != ':');
   26c58:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   26c5c:	e3530020 	cmp	r3, #32
   26c60:	9a000002 	bls	26c70 <get_ldnumber+0x64>
   26c64:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   26c68:	e353003a 	cmp	r3, #58	; 0x3a
   26c6c:	1afffff4 	bne	26c44 <get_ldnumber+0x38>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
   26c70:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   26c74:	e353003a 	cmp	r3, #58	; 0x3a
   26c78:	1a00001c 	bne	26cf0 <get_ldnumber+0xe4>
		i = FF_VOLUMES;
   26c7c:	e3a03001 	mov	r3, #1
   26c80:	e50b300c 	str	r3, [fp, #-12]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
   26c84:	e51b3010 	ldr	r3, [fp, #-16]
   26c88:	e5d33000 	ldrb	r3, [r3]
   26c8c:	e353002f 	cmp	r3, #47	; 0x2f
   26c90:	9a00000c 	bls	26cc8 <get_ldnumber+0xbc>
   26c94:	e51b3010 	ldr	r3, [fp, #-16]
   26c98:	e5d33000 	ldrb	r3, [r3]
   26c9c:	e3530039 	cmp	r3, #57	; 0x39
   26ca0:	8a000008 	bhi	26cc8 <get_ldnumber+0xbc>
   26ca4:	e51b3010 	ldr	r3, [fp, #-16]
   26ca8:	e2833002 	add	r3, r3, #2
   26cac:	e51b2008 	ldr	r2, [fp, #-8]
   26cb0:	e1520003 	cmp	r2, r3
   26cb4:	1a000003 	bne	26cc8 <get_ldnumber+0xbc>
			i = (int)*tp - '0';	/* Get the logical drive number */
   26cb8:	e51b3010 	ldr	r3, [fp, #-16]
   26cbc:	e5d33000 	ldrb	r3, [r3]
   26cc0:	e2433030 	sub	r3, r3, #48	; 0x30
   26cc4:	e50b300c 	str	r3, [fp, #-12]
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
   26cc8:	e51b300c 	ldr	r3, [fp, #-12]
   26ccc:	e3530000 	cmp	r3, #0
   26cd0:	da000001 	ble	26cdc <get_ldnumber+0xd0>
   26cd4:	e3e03000 	mvn	r3, #0
   26cd8:	ea000005 	b	26cf4 <get_ldnumber+0xe8>
		*path = tt;		/* Snip the drive prefix off */
   26cdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   26ce0:	e51b2008 	ldr	r2, [fp, #-8]
   26ce4:	e5832000 	str	r2, [r3]
		return i;		/* Return the found drive number */
   26ce8:	e51b300c 	ldr	r3, [fp, #-12]
   26cec:	ea000000 	b	26cf4 <get_ldnumber+0xe8>
#endif
	/* No drive prefix */
#if FF_FS_RPATH != 0
	return (int)CurrVol;	/* Default drive is current drive */
#else
	return 0;				/* Default drive is 0 */
   26cf0:	e3a03000 	mov	r3, #0
#endif
}
   26cf4:	e1a00003 	mov	r0, r3
   26cf8:	e28bd000 	add	sp, fp, #0
   26cfc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   26d00:	e12fff1e 	bx	lr

00026d04 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
   26d04:	e92d4800 	push	{fp, lr}
   26d08:	e28db004 	add	fp, sp, #4
   26d0c:	e24dd010 	sub	sp, sp, #16
   26d10:	e50b0010 	str	r0, [fp, #-16]
   26d14:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
   26d18:	e51b3010 	ldr	r3, [fp, #-16]
   26d1c:	e3a02000 	mov	r2, #0
   26d20:	e5c32004 	strb	r2, [r3, #4]
   26d24:	e51b3010 	ldr	r3, [fp, #-16]
   26d28:	e3e02000 	mvn	r2, #0
   26d2c:	e583202c 	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
   26d30:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   26d34:	e51b0010 	ldr	r0, [fp, #-16]
   26d38:	ebfff852 	bl	24e88 <move_window>
   26d3c:	e1a03000 	mov	r3, r0
   26d40:	e3530000 	cmp	r3, #0
   26d44:	0a000001 	beq	26d50 <check_fs+0x4c>
   26d48:	e3a03004 	mov	r3, #4
   26d4c:	ea000078 	b	26f34 <check_fs+0x230>
	sign = ld_word(fs->win + BS_55AA);
   26d50:	e51b3010 	ldr	r3, [fp, #-16]
   26d54:	e2833030 	add	r3, r3, #48	; 0x30
   26d58:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   26d5c:	e2833002 	add	r3, r3, #2
   26d60:	e1a00003 	mov	r0, r3
   26d64:	ebfff778 	bl	24b4c <ld_word>
   26d68:	e1a03000 	mov	r3, r0
   26d6c:	e14b30b6 	strh	r3, [fp, #-6]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
   26d70:	e51b3010 	ldr	r3, [fp, #-16]
   26d74:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
   26d78:	e54b3007 	strb	r3, [fp, #-7]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
   26d7c:	e55b3007 	ldrb	r3, [fp, #-7]
   26d80:	e35300eb 	cmp	r3, #235	; 0xeb
   26d84:	0a000005 	beq	26da0 <check_fs+0x9c>
   26d88:	e55b3007 	ldrb	r3, [fp, #-7]
   26d8c:	e35300e9 	cmp	r3, #233	; 0xe9
   26d90:	0a000002 	beq	26da0 <check_fs+0x9c>
   26d94:	e55b3007 	ldrb	r3, [fp, #-7]
   26d98:	e35300e8 	cmp	r3, #232	; 0xe8
   26d9c:	1a00005d 	bne	26f18 <check_fs+0x214>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
   26da0:	e15b30b6 	ldrh	r3, [fp, #-6]
   26da4:	e59f2194 	ldr	r2, [pc, #404]	; 26f40 <check_fs+0x23c>
   26da8:	e1530002 	cmp	r3, r2
   26dac:	1a00000b 	bne	26de0 <check_fs+0xdc>
   26db0:	e51b3010 	ldr	r3, [fp, #-16]
   26db4:	e2833030 	add	r3, r3, #48	; 0x30
   26db8:	e2833052 	add	r3, r3, #82	; 0x52
   26dbc:	e3a02008 	mov	r2, #8
   26dc0:	e59f117c 	ldr	r1, [pc, #380]	; 26f44 <check_fs+0x240>
   26dc4:	e1a00003 	mov	r0, r3
   26dc8:	eb001132 	bl	2b298 <memcmp>
   26dcc:	e1a03000 	mov	r3, r0
   26dd0:	e3530000 	cmp	r3, #0
   26dd4:	1a000001 	bne	26de0 <check_fs+0xdc>
			return 0;	/* It is an FAT32 VBR */
   26dd8:	e3a03000 	mov	r3, #0
   26ddc:	ea000054 	b	26f34 <check_fs+0x230>
		}
		/* FAT volumes created in the early MS-DOS era lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
   26de0:	e51b3010 	ldr	r3, [fp, #-16]
   26de4:	e2833030 	add	r3, r3, #48	; 0x30
   26de8:	e283300b 	add	r3, r3, #11
   26dec:	e1a00003 	mov	r0, r3
   26df0:	ebfff755 	bl	24b4c <ld_word>
   26df4:	e1a03000 	mov	r3, r0
   26df8:	e14b30ba 	strh	r3, [fp, #-10]
		b = fs->win[BPB_SecPerClus];
   26dfc:	e51b3010 	ldr	r3, [fp, #-16]
   26e00:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
   26e04:	e54b3007 	strb	r3, [fp, #-7]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
   26e08:	e15b20ba 	ldrh	r2, [fp, #-10]
   26e0c:	e15b30ba 	ldrh	r3, [fp, #-10]
   26e10:	e2433001 	sub	r3, r3, #1
   26e14:	e0033002 	and	r3, r3, r2
   26e18:	e3530000 	cmp	r3, #0
   26e1c:	1a00003d 	bne	26f18 <check_fs+0x214>
   26e20:	e15b30ba 	ldrh	r3, [fp, #-10]
   26e24:	e3530c02 	cmp	r3, #512	; 0x200
   26e28:	3a00003a 	bcc	26f18 <check_fs+0x214>
   26e2c:	e15b30ba 	ldrh	r3, [fp, #-10]
   26e30:	e3530c02 	cmp	r3, #512	; 0x200
   26e34:	8a000037 	bhi	26f18 <check_fs+0x214>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
   26e38:	e55b3007 	ldrb	r3, [fp, #-7]
   26e3c:	e3530000 	cmp	r3, #0
   26e40:	0a000034 	beq	26f18 <check_fs+0x214>
   26e44:	e55b2007 	ldrb	r2, [fp, #-7]
   26e48:	e55b3007 	ldrb	r3, [fp, #-7]
   26e4c:	e2433001 	sub	r3, r3, #1
   26e50:	e0033002 	and	r3, r3, r2
   26e54:	e3530000 	cmp	r3, #0
   26e58:	1a00002e 	bne	26f18 <check_fs+0x214>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of number of reserved sectors (MNBZ) */
   26e5c:	e51b3010 	ldr	r3, [fp, #-16]
   26e60:	e2833030 	add	r3, r3, #48	; 0x30
   26e64:	e283300e 	add	r3, r3, #14
   26e68:	e1a00003 	mov	r0, r3
   26e6c:	ebfff736 	bl	24b4c <ld_word>
   26e70:	e1a03000 	mov	r3, r0
   26e74:	e3530000 	cmp	r3, #0
   26e78:	0a000026 	beq	26f18 <check_fs+0x214>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
   26e7c:	e51b3010 	ldr	r3, [fp, #-16]
   26e80:	e5d33040 	ldrb	r3, [r3, #64]	; 0x40
   26e84:	e2433001 	sub	r3, r3, #1
   26e88:	e3530001 	cmp	r3, #1
   26e8c:	8a000021 	bhi	26f18 <check_fs+0x214>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir size (MNBZ) */
   26e90:	e51b3010 	ldr	r3, [fp, #-16]
   26e94:	e2833030 	add	r3, r3, #48	; 0x30
   26e98:	e2833011 	add	r3, r3, #17
   26e9c:	e1a00003 	mov	r0, r3
   26ea0:	ebfff729 	bl	24b4c <ld_word>
   26ea4:	e1a03000 	mov	r3, r0
   26ea8:	e3530000 	cmp	r3, #0
   26eac:	0a000019 	beq	26f18 <check_fs+0x214>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
   26eb0:	e51b3010 	ldr	r3, [fp, #-16]
   26eb4:	e2833030 	add	r3, r3, #48	; 0x30
   26eb8:	e2833013 	add	r3, r3, #19
   26ebc:	e1a00003 	mov	r0, r3
   26ec0:	ebfff721 	bl	24b4c <ld_word>
   26ec4:	e1a03000 	mov	r3, r0
   26ec8:	e353007f 	cmp	r3, #127	; 0x7f
   26ecc:	8a000007 	bhi	26ef0 <check_fs+0x1ec>
   26ed0:	e51b3010 	ldr	r3, [fp, #-16]
   26ed4:	e2833030 	add	r3, r3, #48	; 0x30
   26ed8:	e2833020 	add	r3, r3, #32
   26edc:	e1a00003 	mov	r0, r3
   26ee0:	ebfff72f 	bl	24ba4 <ld_dword>
   26ee4:	e1a03000 	mov	r3, r0
   26ee8:	e3530801 	cmp	r3, #65536	; 0x10000
   26eec:	3a000009 	bcc	26f18 <check_fs+0x214>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
   26ef0:	e51b3010 	ldr	r3, [fp, #-16]
   26ef4:	e2833030 	add	r3, r3, #48	; 0x30
   26ef8:	e2833016 	add	r3, r3, #22
   26efc:	e1a00003 	mov	r0, r3
   26f00:	ebfff711 	bl	24b4c <ld_word>
   26f04:	e1a03000 	mov	r3, r0
   26f08:	e3530000 	cmp	r3, #0
   26f0c:	0a000001 	beq	26f18 <check_fs+0x214>
				return 0;	/* It can be presumed an FAT VBR */
   26f10:	e3a03000 	mov	r3, #0
   26f14:	ea000006 	b	26f34 <check_fs+0x230>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
   26f18:	e15b30b6 	ldrh	r3, [fp, #-6]
   26f1c:	e59f201c 	ldr	r2, [pc, #28]	; 26f40 <check_fs+0x23c>
   26f20:	e1530002 	cmp	r3, r2
   26f24:	1a000001 	bne	26f30 <check_fs+0x22c>
   26f28:	e3a03002 	mov	r3, #2
   26f2c:	ea000000 	b	26f34 <check_fs+0x230>
   26f30:	e3a03003 	mov	r3, #3
}
   26f34:	e1a00003 	mov	r0, r3
   26f38:	e24bd004 	sub	sp, fp, #4
   26f3c:	e8bd8800 	pop	{fp, pc}
   26f40:	0000aa55 	andeq	sl, r0, r5, asr sl
   26f44:	0002be70 	andeq	fp, r2, r0, ror lr

00026f48 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
   26f48:	e92d4800 	push	{fp, lr}
   26f4c:	e28db004 	add	fp, sp, #4
   26f50:	e24dd020 	sub	sp, sp, #32
   26f54:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
   26f58:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
   26f5c:	e3a01000 	mov	r1, #0
   26f60:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   26f64:	ebffff66 	bl	26d04 <check_fs>
   26f68:	e50b000c 	str	r0, [fp, #-12]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
   26f6c:	e51b300c 	ldr	r3, [fp, #-12]
   26f70:	e3530002 	cmp	r3, #2
   26f74:	0a000007 	beq	26f98 <find_volume+0x50>
   26f78:	e51b300c 	ldr	r3, [fp, #-12]
   26f7c:	e3530002 	cmp	r3, #2
   26f80:	8a000002 	bhi	26f90 <find_volume+0x48>
   26f84:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   26f88:	e3530000 	cmp	r3, #0
   26f8c:	1a000001 	bne	26f98 <find_volume+0x50>
   26f90:	e51b300c 	ldr	r3, [fp, #-12]
   26f94:	ea00003f 	b	27098 <find_volume+0x150>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   26f98:	e3a03000 	mov	r3, #0
   26f9c:	e50b3008 	str	r3, [fp, #-8]
   26fa0:	ea000011 	b	26fec <find_volume+0xa4>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
   26fa4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   26fa8:	e2832030 	add	r2, r3, #48	; 0x30
   26fac:	e51b3008 	ldr	r3, [fp, #-8]
   26fb0:	e1a03203 	lsl	r3, r3, #4
   26fb4:	e2833f71 	add	r3, r3, #452	; 0x1c4
   26fb8:	e2833002 	add	r3, r3, #2
   26fbc:	e0823003 	add	r3, r2, r3
   26fc0:	e1a00003 	mov	r0, r3
   26fc4:	ebfff6f6 	bl	24ba4 <ld_dword>
   26fc8:	e1a02000 	mov	r2, r0
   26fcc:	e51b3008 	ldr	r3, [fp, #-8]
   26fd0:	e1a03103 	lsl	r3, r3, #2
   26fd4:	e2433004 	sub	r3, r3, #4
   26fd8:	e083300b 	add	r3, r3, fp
   26fdc:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   26fe0:	e51b3008 	ldr	r3, [fp, #-8]
   26fe4:	e2833001 	add	r3, r3, #1
   26fe8:	e50b3008 	str	r3, [fp, #-8]
   26fec:	e51b3008 	ldr	r3, [fp, #-8]
   26ff0:	e3530003 	cmp	r3, #3
   26ff4:	9affffea 	bls	26fa4 <find_volume+0x5c>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
   26ff8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   26ffc:	e3530000 	cmp	r3, #0
   27000:	0a000002 	beq	27010 <find_volume+0xc8>
   27004:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   27008:	e2433001 	sub	r3, r3, #1
   2700c:	ea000000 	b	27014 <find_volume+0xcc>
   27010:	e3a03000 	mov	r3, #0
   27014:	e50b3008 	str	r3, [fp, #-8]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   27018:	e51b3008 	ldr	r3, [fp, #-8]
   2701c:	e1a03103 	lsl	r3, r3, #2
   27020:	e2433004 	sub	r3, r3, #4
   27024:	e083300b 	add	r3, r3, fp
   27028:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
   2702c:	e3530000 	cmp	r3, #0
   27030:	0a000009 	beq	2705c <find_volume+0x114>
   27034:	e51b3008 	ldr	r3, [fp, #-8]
   27038:	e1a03103 	lsl	r3, r3, #2
   2703c:	e2433004 	sub	r3, r3, #4
   27040:	e083300b 	add	r3, r3, fp
   27044:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
   27048:	e1a01003 	mov	r1, r3
   2704c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   27050:	ebffff2b 	bl	26d04 <check_fs>
   27054:	e1a03000 	mov	r3, r0
   27058:	ea000000 	b	27060 <find_volume+0x118>
   2705c:	e3a03003 	mov	r3, #3
   27060:	e50b300c 	str	r3, [fp, #-12]
	} while (part == 0 && fmt >= 2 && ++i < 4);
   27064:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   27068:	e3530000 	cmp	r3, #0
   2706c:	1a000008 	bne	27094 <find_volume+0x14c>
   27070:	e51b300c 	ldr	r3, [fp, #-12]
   27074:	e3530001 	cmp	r3, #1
   27078:	9a000005 	bls	27094 <find_volume+0x14c>
   2707c:	e51b3008 	ldr	r3, [fp, #-8]
   27080:	e2833001 	add	r3, r3, #1
   27084:	e50b3008 	str	r3, [fp, #-8]
   27088:	e51b3008 	ldr	r3, [fp, #-8]
   2708c:	e3530003 	cmp	r3, #3
   27090:	9affffe0 	bls	27018 <find_volume+0xd0>
	return fmt;
   27094:	e51b300c 	ldr	r3, [fp, #-12]
}
   27098:	e1a00003 	mov	r0, r3
   2709c:	e24bd004 	sub	sp, fp, #4
   270a0:	e8bd8800 	pop	{fp, pc}

000270a4 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
   270a4:	e92d4800 	push	{fp, lr}
   270a8:	e28db004 	add	fp, sp, #4
   270ac:	e24dd040 	sub	sp, sp, #64	; 0x40
   270b0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   270b4:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
   270b8:	e1a03002 	mov	r3, r2
   270bc:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
   270c0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   270c4:	e3a02000 	mov	r2, #0
   270c8:	e5832000 	str	r2, [r3]
	vol = get_ldnumber(path);
   270cc:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   270d0:	ebfffecd 	bl	26c0c <get_ldnumber>
   270d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	if (vol < 0) return FR_INVALID_DRIVE;
   270d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   270dc:	e3530000 	cmp	r3, #0
   270e0:	aa000001 	bge	270ec <mount_volume+0x48>
   270e4:	e3a0300b 	mov	r3, #11
   270e8:	ea0001ab 	b	2779c <mount_volume+0x6f8>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
   270ec:	e59f26b4 	ldr	r2, [pc, #1716]	; 277a8 <mount_volume+0x704>
   270f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   270f4:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   270f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   270fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27100:	e3530000 	cmp	r3, #0
   27104:	1a000001 	bne	27110 <mount_volume+0x6c>
   27108:	e3a0300c 	mov	r3, #12
   2710c:	ea0001a2 	b	2779c <mount_volume+0x6f8>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
   27110:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   27114:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   27118:	e5832000 	str	r2, [r3]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
   2711c:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
   27120:	e3c33001 	bic	r3, r3, #1
   27124:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
   27128:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2712c:	e5d33000 	ldrb	r3, [r3]
   27130:	e3530000 	cmp	r3, #0
   27134:	0a000014 	beq	2718c <mount_volume+0xe8>
		stat = disk_status(fs->pdrv);
   27138:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2713c:	e5d33001 	ldrb	r3, [r3, #1]
   27140:	e1a00003 	mov	r0, r3
   27144:	eb000f46 	bl	2ae64 <disk_status>
   27148:	e1a03000 	mov	r3, r0
   2714c:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
   27150:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   27154:	e2033001 	and	r3, r3, #1
   27158:	e3530000 	cmp	r3, #0
   2715c:	1a00000a 	bne	2718c <mount_volume+0xe8>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
   27160:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
   27164:	e3530000 	cmp	r3, #0
   27168:	0a000005 	beq	27184 <mount_volume+0xe0>
   2716c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   27170:	e2033004 	and	r3, r3, #4
   27174:	e3530000 	cmp	r3, #0
   27178:	0a000001 	beq	27184 <mount_volume+0xe0>
				return FR_WRITE_PROTECTED;
   2717c:	e3a0300a 	mov	r3, #10
   27180:	ea000185 	b	2779c <mount_volume+0x6f8>
			}
			return FR_OK;				/* The filesystem object is already valid */
   27184:	e3a03000 	mov	r3, #0
   27188:	ea000183 	b	2779c <mount_volume+0x6f8>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
   2718c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27190:	e3a02000 	mov	r2, #0
   27194:	e5c32000 	strb	r2, [r3]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
   27198:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2719c:	e5d33001 	ldrb	r3, [r3, #1]
   271a0:	e1a00003 	mov	r0, r3
   271a4:	eb000f3f 	bl	2aea8 <disk_initialize>
   271a8:	e1a03000 	mov	r3, r0
   271ac:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
   271b0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   271b4:	e2033001 	and	r3, r3, #1
   271b8:	e3530000 	cmp	r3, #0
   271bc:	0a000001 	beq	271c8 <mount_volume+0x124>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
   271c0:	e3a03003 	mov	r3, #3
   271c4:	ea000174 	b	2779c <mount_volume+0x6f8>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
   271c8:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
   271cc:	e3530000 	cmp	r3, #0
   271d0:	0a000005 	beq	271ec <mount_volume+0x148>
   271d4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   271d8:	e2033004 	and	r3, r3, #4
   271dc:	e3530000 	cmp	r3, #0
   271e0:	0a000001 	beq	271ec <mount_volume+0x148>
		return FR_WRITE_PROTECTED;
   271e4:	e3a0300a 	mov	r3, #10
   271e8:	ea00016b 	b	2779c <mount_volume+0x6f8>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
   271ec:	e3a01000 	mov	r1, #0
   271f0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   271f4:	ebffff53 	bl	26f48 <find_volume>
   271f8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
   271fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27200:	e3530004 	cmp	r3, #4
   27204:	1a000001 	bne	27210 <mount_volume+0x16c>
   27208:	e3a03001 	mov	r3, #1
   2720c:	ea000162 	b	2779c <mount_volume+0x6f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
   27210:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27214:	e3530001 	cmp	r3, #1
   27218:	9a000001 	bls	27224 <mount_volume+0x180>
   2721c:	e3a0300d 	mov	r3, #13
   27220:	ea00015d 	b	2779c <mount_volume+0x6f8>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
   27224:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27228:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   2722c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
   27230:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27234:	e2833030 	add	r3, r3, #48	; 0x30
   27238:	e283300b 	add	r3, r3, #11
   2723c:	e1a00003 	mov	r0, r3
   27240:	ebfff641 	bl	24b4c <ld_word>
   27244:	e1a03000 	mov	r3, r0
   27248:	e3530c02 	cmp	r3, #512	; 0x200
   2724c:	0a000001 	beq	27258 <mount_volume+0x1b4>
   27250:	e3a0300d 	mov	r3, #13
   27254:	ea000150 	b	2779c <mount_volume+0x6f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
   27258:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2725c:	e2833030 	add	r3, r3, #48	; 0x30
   27260:	e2833016 	add	r3, r3, #22
   27264:	e1a00003 	mov	r0, r3
   27268:	ebfff637 	bl	24b4c <ld_word>
   2726c:	e1a03000 	mov	r3, r0
   27270:	e50b300c 	str	r3, [fp, #-12]
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
   27274:	e51b300c 	ldr	r3, [fp, #-12]
   27278:	e3530000 	cmp	r3, #0
   2727c:	1a000005 	bne	27298 <mount_volume+0x1f4>
   27280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27284:	e2833030 	add	r3, r3, #48	; 0x30
   27288:	e2833024 	add	r3, r3, #36	; 0x24
   2728c:	e1a00003 	mov	r0, r3
   27290:	ebfff643 	bl	24ba4 <ld_dword>
   27294:	e50b000c 	str	r0, [fp, #-12]
		fs->fsize = fasize;
   27298:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2729c:	e51b200c 	ldr	r2, [fp, #-12]
   272a0:	e5832018 	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
   272a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272a8:	e5d32040 	ldrb	r2, [r3, #64]	; 0x40
   272ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272b0:	e5c32003 	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   272b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272b8:	e5d33003 	ldrb	r3, [r3, #3]
   272bc:	e3530001 	cmp	r3, #1
   272c0:	0a000005 	beq	272dc <mount_volume+0x238>
   272c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272c8:	e5d33003 	ldrb	r3, [r3, #3]
   272cc:	e3530002 	cmp	r3, #2
   272d0:	0a000001 	beq	272dc <mount_volume+0x238>
   272d4:	e3a0300d 	mov	r3, #13
   272d8:	ea00012f 	b	2779c <mount_volume+0x6f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
   272dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272e0:	e5d33003 	ldrb	r3, [r3, #3]
   272e4:	e1a02003 	mov	r2, r3
   272e8:	e51b300c 	ldr	r3, [fp, #-12]
   272ec:	e0030392 	mul	r3, r2, r3
   272f0:	e50b300c 	str	r3, [fp, #-12]

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
   272f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   272f8:	e5d3303d 	ldrb	r3, [r3, #61]	; 0x3d
   272fc:	e6ff2073 	uxth	r2, r3
   27300:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27304:	e1c320ba 	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   27308:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2730c:	e1d330ba 	ldrh	r3, [r3, #10]
   27310:	e3530000 	cmp	r3, #0
   27314:	0a000008 	beq	2733c <mount_volume+0x298>
   27318:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2731c:	e1d330ba 	ldrh	r3, [r3, #10]
   27320:	e1a02003 	mov	r2, r3
   27324:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27328:	e1d330ba 	ldrh	r3, [r3, #10]
   2732c:	e2433001 	sub	r3, r3, #1
   27330:	e0033002 	and	r3, r3, r2
   27334:	e3530000 	cmp	r3, #0
   27338:	0a000001 	beq	27344 <mount_volume+0x2a0>
   2733c:	e3a0300d 	mov	r3, #13
   27340:	ea000115 	b	2779c <mount_volume+0x6f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
   27344:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27348:	e2833030 	add	r3, r3, #48	; 0x30
   2734c:	e2833011 	add	r3, r3, #17
   27350:	e1a00003 	mov	r0, r3
   27354:	ebfff5fc 	bl	24b4c <ld_word>
   27358:	e1a03000 	mov	r3, r0
   2735c:	e1a02003 	mov	r2, r3
   27360:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27364:	e1c320b8 	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   27368:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2736c:	e1d330b8 	ldrh	r3, [r3, #8]
   27370:	e203300f 	and	r3, r3, #15
   27374:	e6ff3073 	uxth	r3, r3
   27378:	e3530000 	cmp	r3, #0
   2737c:	0a000001 	beq	27388 <mount_volume+0x2e4>
   27380:	e3a0300d 	mov	r3, #13
   27384:	ea000104 	b	2779c <mount_volume+0x6f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
   27388:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2738c:	e2833030 	add	r3, r3, #48	; 0x30
   27390:	e2833013 	add	r3, r3, #19
   27394:	e1a00003 	mov	r0, r3
   27398:	ebfff5eb 	bl	24b4c <ld_word>
   2739c:	e1a03000 	mov	r3, r0
   273a0:	e50b3008 	str	r3, [fp, #-8]
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
   273a4:	e51b3008 	ldr	r3, [fp, #-8]
   273a8:	e3530000 	cmp	r3, #0
   273ac:	1a000005 	bne	273c8 <mount_volume+0x324>
   273b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   273b4:	e2833030 	add	r3, r3, #48	; 0x30
   273b8:	e2833020 	add	r3, r3, #32
   273bc:	e1a00003 	mov	r0, r3
   273c0:	ebfff5f7 	bl	24ba4 <ld_dword>
   273c4:	e50b0008 	str	r0, [fp, #-8]

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
   273c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   273cc:	e2833030 	add	r3, r3, #48	; 0x30
   273d0:	e283300e 	add	r3, r3, #14
   273d4:	e1a00003 	mov	r0, r3
   273d8:	ebfff5db 	bl	24b4c <ld_word>
   273dc:	e1a03000 	mov	r3, r0
   273e0:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
   273e4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
   273e8:	e3530000 	cmp	r3, #0
   273ec:	1a000001 	bne	273f8 <mount_volume+0x354>
   273f0:	e3a0300d 	mov	r3, #13
   273f4:	ea0000e8 	b	2779c <mount_volume+0x6f8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
   273f8:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
   273fc:	e51b300c 	ldr	r3, [fp, #-12]
   27400:	e0823003 	add	r3, r2, r3
   27404:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   27408:	e1d220b8 	ldrh	r2, [r2, #8]
   2740c:	e1a02222 	lsr	r2, r2, #4
   27410:	e6ff2072 	uxth	r2, r2
   27414:	e0833002 	add	r3, r3, r2
   27418:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
   2741c:	e51b2008 	ldr	r2, [fp, #-8]
   27420:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   27424:	e1520003 	cmp	r2, r3
   27428:	2a000001 	bcs	27434 <mount_volume+0x390>
   2742c:	e3a0300d 	mov	r3, #13
   27430:	ea0000d9 	b	2779c <mount_volume+0x6f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
   27434:	e51b2008 	ldr	r2, [fp, #-8]
   27438:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2743c:	e0422003 	sub	r2, r2, r3
   27440:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27444:	e1d330ba 	ldrh	r3, [r3, #10]
   27448:	e1a01003 	mov	r1, r3
   2744c:	e1a00002 	mov	r0, r2
   27450:	eb000f4a 	bl	2b180 <__udivsi3>
   27454:	e1a03000 	mov	r3, r0
   27458:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2745c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27460:	e3530000 	cmp	r3, #0
   27464:	1a000001 	bne	27470 <mount_volume+0x3cc>
   27468:	e3a0300d 	mov	r3, #13
   2746c:	ea0000ca 	b	2779c <mount_volume+0x6f8>
		fmt = 0;
   27470:	e3a03000 	mov	r3, #0
   27474:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
   27478:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2747c:	e37302bf 	cmn	r3, #-268435445	; 0xf000000b
   27480:	8a000001 	bhi	2748c <mount_volume+0x3e8>
   27484:	e3a03003 	mov	r3, #3
   27488:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
   2748c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27490:	e59f2314 	ldr	r2, [pc, #788]	; 277ac <mount_volume+0x708>
   27494:	e1530002 	cmp	r3, r2
   27498:	8a000001 	bhi	274a4 <mount_volume+0x400>
   2749c:	e3a03002 	mov	r3, #2
   274a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   274a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   274a8:	e59f2300 	ldr	r2, [pc, #768]	; 277b0 <mount_volume+0x70c>
   274ac:	e1530002 	cmp	r3, r2
   274b0:	8a000001 	bhi	274bc <mount_volume+0x418>
   274b4:	e3a03001 	mov	r3, #1
   274b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		if (fmt == 0) return FR_NO_FILESYSTEM;
   274bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   274c0:	e3530000 	cmp	r3, #0
   274c4:	1a000001 	bne	274d0 <mount_volume+0x42c>
   274c8:	e3a0300d 	mov	r3, #13
   274cc:	ea0000b2 	b	2779c <mount_volume+0x6f8>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   274d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   274d4:	e2832002 	add	r2, r3, #2
   274d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   274dc:	e5832014 	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
   274e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   274e4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   274e8:	e583201c 	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   274ec:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
   274f0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   274f4:	e0822003 	add	r2, r2, r3
   274f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   274fc:	e5832020 	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
   27500:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   27504:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   27508:	e0822003 	add	r2, r2, r3
   2750c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27510:	e5832028 	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
   27514:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27518:	e3530003 	cmp	r3, #3
   2751c:	1a00001c 	bne	27594 <mount_volume+0x4f0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   27520:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27524:	e2833030 	add	r3, r3, #48	; 0x30
   27528:	e283302a 	add	r3, r3, #42	; 0x2a
   2752c:	e1a00003 	mov	r0, r3
   27530:	ebfff585 	bl	24b4c <ld_word>
   27534:	e1a03000 	mov	r3, r0
   27538:	e3530000 	cmp	r3, #0
   2753c:	0a000001 	beq	27548 <mount_volume+0x4a4>
   27540:	e3a0300d 	mov	r3, #13
   27544:	ea000094 	b	2779c <mount_volume+0x6f8>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
   27548:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2754c:	e1d330b8 	ldrh	r3, [r3, #8]
   27550:	e3530000 	cmp	r3, #0
   27554:	0a000001 	beq	27560 <mount_volume+0x4bc>
   27558:	e3a0300d 	mov	r3, #13
   2755c:	ea00008e 	b	2779c <mount_volume+0x6f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
   27560:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27564:	e2833030 	add	r3, r3, #48	; 0x30
   27568:	e283302c 	add	r3, r3, #44	; 0x2c
   2756c:	e1a00003 	mov	r0, r3
   27570:	ebfff58b 	bl	24ba4 <ld_dword>
   27574:	e1a02000 	mov	r2, r0
   27578:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2757c:	e5832024 	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
   27580:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27584:	e5933014 	ldr	r3, [r3, #20]
   27588:	e1a03103 	lsl	r3, r3, #2
   2758c:	e50b3010 	str	r3, [fp, #-16]
   27590:	ea00001d 	b	2760c <mount_volume+0x568>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   27594:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27598:	e1d330b8 	ldrh	r3, [r3, #8]
   2759c:	e3530000 	cmp	r3, #0
   275a0:	1a000001 	bne	275ac <mount_volume+0x508>
   275a4:	e3a0300d 	mov	r3, #13
   275a8:	ea00007b 	b	2779c <mount_volume+0x6f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
   275ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   275b0:	e5932020 	ldr	r2, [r3, #32]
   275b4:	e51b300c 	ldr	r3, [fp, #-12]
   275b8:	e0822003 	add	r2, r2, r3
   275bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   275c0:	e5832024 	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   275c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   275c8:	e3530002 	cmp	r3, #2
   275cc:	1a000003 	bne	275e0 <mount_volume+0x53c>
   275d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   275d4:	e5933014 	ldr	r3, [r3, #20]
   275d8:	e1a03083 	lsl	r3, r3, #1
   275dc:	ea000009 	b	27608 <mount_volume+0x564>
   275e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   275e4:	e5932014 	ldr	r2, [r3, #20]
   275e8:	e1a03002 	mov	r3, r2
   275ec:	e1a03083 	lsl	r3, r3, #1
   275f0:	e0833002 	add	r3, r3, r2
   275f4:	e1a020a3 	lsr	r2, r3, #1
   275f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   275fc:	e5933014 	ldr	r3, [r3, #20]
   27600:	e2033001 	and	r3, r3, #1
   27604:	e0823003 	add	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
   27608:	e50b3010 	str	r3, [fp, #-16]
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   2760c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27610:	e5932018 	ldr	r2, [r3, #24]
   27614:	e51b3010 	ldr	r3, [fp, #-16]
   27618:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   2761c:	e2833003 	add	r3, r3, #3
   27620:	e1a034a3 	lsr	r3, r3, #9
   27624:	e1520003 	cmp	r2, r3
   27628:	2a000001 	bcs	27634 <mount_volume+0x590>
   2762c:	e3a0300d 	mov	r3, #13
   27630:	ea000059 	b	2779c <mount_volume+0x6f8>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
   27634:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27638:	e3e02000 	mvn	r2, #0
   2763c:	e5832010 	str	r2, [r3, #16]
   27640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27644:	e5932010 	ldr	r2, [r3, #16]
   27648:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2764c:	e583200c 	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
   27650:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27654:	e3e0207f 	mvn	r2, #127	; 0x7f
   27658:	e5c32005 	strb	r2, [r3, #5]
		if (fmt == FS_FAT32
   2765c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27660:	e3530003 	cmp	r3, #3
   27664:	1a00003d 	bne	27760 <mount_volume+0x6bc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
   27668:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2766c:	e2833030 	add	r3, r3, #48	; 0x30
   27670:	e2833030 	add	r3, r3, #48	; 0x30
   27674:	e1a00003 	mov	r0, r3
   27678:	ebfff533 	bl	24b4c <ld_word>
   2767c:	e1a03000 	mov	r3, r0
   27680:	e3530001 	cmp	r3, #1
   27684:	1a000035 	bne	27760 <mount_volume+0x6bc>
			&& move_window(fs, bsect + 1) == FR_OK)
   27688:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2768c:	e2833001 	add	r3, r3, #1
   27690:	e1a01003 	mov	r1, r3
   27694:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   27698:	ebfff5fa 	bl	24e88 <move_window>
   2769c:	e1a03000 	mov	r3, r0
   276a0:	e3530000 	cmp	r3, #0
   276a4:	1a00002d 	bne	27760 <mount_volume+0x6bc>
		{
			fs->fsi_flag = 0;
   276a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   276ac:	e3a02000 	mov	r2, #0
   276b0:	e5c32005 	strb	r2, [r3, #5]
			if (   ld_dword(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
   276b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   276b8:	e2833030 	add	r3, r3, #48	; 0x30
   276bc:	e1a00003 	mov	r0, r3
   276c0:	ebfff537 	bl	24ba4 <ld_dword>
   276c4:	e1a03000 	mov	r3, r0
   276c8:	e59f20e4 	ldr	r2, [pc, #228]	; 277b4 <mount_volume+0x710>
   276cc:	e1530002 	cmp	r3, r2
   276d0:	1a000022 	bne	27760 <mount_volume+0x6bc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272
   276d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   276d8:	e2833030 	add	r3, r3, #48	; 0x30
   276dc:	e2833f79 	add	r3, r3, #484	; 0x1e4
   276e0:	e1a00003 	mov	r0, r3
   276e4:	ebfff52e 	bl	24ba4 <ld_dword>
   276e8:	e1a03000 	mov	r3, r0
   276ec:	e59f20c4 	ldr	r2, [pc, #196]	; 277b8 <mount_volume+0x714>
   276f0:	e1530002 	cmp	r3, r2
   276f4:	1a000019 	bne	27760 <mount_volume+0x6bc>
				&& ld_dword(fs->win + FSI_TrailSig) == 0xAA550000)
   276f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   276fc:	e2833030 	add	r3, r3, #48	; 0x30
   27700:	e2833e1f 	add	r3, r3, #496	; 0x1f0
   27704:	e2833002 	add	r3, r3, #2
   27708:	e1a00003 	mov	r0, r3
   2770c:	ebfff524 	bl	24ba4 <ld_dword>
   27710:	e1a03000 	mov	r3, r0
   27714:	e59f20a0 	ldr	r2, [pc, #160]	; 277bc <mount_volume+0x718>
   27718:	e1530002 	cmp	r3, r2
   2771c:	1a00000f 	bne	27760 <mount_volume+0x6bc>
			{
#if (FF_FS_NOFSINFO & 1) == 0	/* Get free cluster count if trust it */
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
   27720:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27724:	e2833030 	add	r3, r3, #48	; 0x30
   27728:	e2833f7a 	add	r3, r3, #488	; 0x1e8
   2772c:	e1a00003 	mov	r0, r3
   27730:	ebfff51b 	bl	24ba4 <ld_dword>
   27734:	e1a02000 	mov	r2, r0
   27738:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2773c:	e5832010 	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0	/* Get next free cluster if rtust it */
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
   27740:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27744:	e2833030 	add	r3, r3, #48	; 0x30
   27748:	e2833f7b 	add	r3, r3, #492	; 0x1ec
   2774c:	e1a00003 	mov	r0, r3
   27750:	ebfff513 	bl	24ba4 <ld_dword>
   27754:	e1a02000 	mov	r2, r0
   27758:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2775c:	e583200c 	str	r2, [r3, #12]
			}
		}
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
   27760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   27764:	e6ef2073 	uxtb	r2, r3
   27768:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2776c:	e5c32000 	strb	r2, [r3]
	fs->id = ++Fsid;		/* Volume mount ID */
   27770:	e59f3048 	ldr	r3, [pc, #72]	; 277c0 <mount_volume+0x71c>
   27774:	e1d330b0 	ldrh	r3, [r3]
   27778:	e2833001 	add	r3, r3, #1
   2777c:	e6ff3073 	uxth	r3, r3
   27780:	e59f2038 	ldr	r2, [pc, #56]	; 277c0 <mount_volume+0x71c>
   27784:	e1c230b0 	strh	r3, [r2]
   27788:	e59f3030 	ldr	r3, [pc, #48]	; 277c0 <mount_volume+0x71c>
   2778c:	e1d320b0 	ldrh	r2, [r3]
   27790:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27794:	e1c320b6 	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
   27798:	e3a03000 	mov	r3, #0
}
   2779c:	e1a00003 	mov	r0, r3
   277a0:	e24bd004 	sub	sp, fp, #4
   277a4:	e8bd8800 	pop	{fp, pc}
   277a8:	0002d2d0 	ldrdeq	sp, [r2], -r0
   277ac:	0000fff5 	strdeq	pc, [r0], -r5
   277b0:	00000ff5 	strdeq	r0, [r0], -r5
   277b4:	41615252 	cmnmi	r1, r2, asr r2
   277b8:	61417272 	hvcvs	5922	; 0x1722
   277bc:	aa550000 	bge	15677c4 <__bss_end+0x14ba4ec>
   277c0:	0002d2d4 	ldrdeq	sp, [r2], -r4

000277c4 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
   277c4:	e92d4800 	push	{fp, lr}
   277c8:	e28db004 	add	fp, sp, #4
   277cc:	e24dd010 	sub	sp, sp, #16
   277d0:	e50b0010 	str	r0, [fp, #-16]
   277d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	FRESULT res = FR_INVALID_OBJECT;
   277d8:	e3a03009 	mov	r3, #9
   277dc:	e54b3005 	strb	r3, [fp, #-5]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   277e0:	e51b3010 	ldr	r3, [fp, #-16]
   277e4:	e3530000 	cmp	r3, #0
   277e8:	0a00001a 	beq	27858 <validate+0x94>
   277ec:	e51b3010 	ldr	r3, [fp, #-16]
   277f0:	e5933000 	ldr	r3, [r3]
   277f4:	e3530000 	cmp	r3, #0
   277f8:	0a000016 	beq	27858 <validate+0x94>
   277fc:	e51b3010 	ldr	r3, [fp, #-16]
   27800:	e5933000 	ldr	r3, [r3]
   27804:	e5d33000 	ldrb	r3, [r3]
   27808:	e3530000 	cmp	r3, #0
   2780c:	0a000011 	beq	27858 <validate+0x94>
   27810:	e51b3010 	ldr	r3, [fp, #-16]
   27814:	e1d320b4 	ldrh	r2, [r3, #4]
   27818:	e51b3010 	ldr	r3, [fp, #-16]
   2781c:	e5933000 	ldr	r3, [r3]
   27820:	e1d330b6 	ldrh	r3, [r3, #6]
   27824:	e1520003 	cmp	r2, r3
   27828:	1a00000a 	bne	27858 <validate+0x94>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
   2782c:	e51b3010 	ldr	r3, [fp, #-16]
   27830:	e5933000 	ldr	r3, [r3]
   27834:	e5d33001 	ldrb	r3, [r3, #1]
   27838:	e1a00003 	mov	r0, r3
   2783c:	eb000d88 	bl	2ae64 <disk_status>
   27840:	e1a03000 	mov	r3, r0
   27844:	e2033001 	and	r3, r3, #1
   27848:	e3530000 	cmp	r3, #0
   2784c:	1a000001 	bne	27858 <validate+0x94>
			res = FR_OK;
   27850:	e3a03000 	mov	r3, #0
   27854:	e54b3005 	strb	r3, [fp, #-5]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
   27858:	e55b3005 	ldrb	r3, [fp, #-5]
   2785c:	e3530000 	cmp	r3, #0
   27860:	1a000002 	bne	27870 <validate+0xac>
   27864:	e51b3010 	ldr	r3, [fp, #-16]
   27868:	e5933000 	ldr	r3, [r3]
   2786c:	ea000000 	b	27874 <validate+0xb0>
   27870:	e3a03000 	mov	r3, #0
   27874:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   27878:	e5823000 	str	r3, [r2]
	return res;
   2787c:	e55b3005 	ldrb	r3, [fp, #-5]
}
   27880:	e1a00003 	mov	r0, r3
   27884:	e24bd004 	sub	sp, fp, #4
   27888:	e8bd8800 	pop	{fp, pc}

0002788c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
   2788c:	e92d4800 	push	{fp, lr}
   27890:	e28db004 	add	fp, sp, #4
   27894:	e24dd020 	sub	sp, sp, #32
   27898:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   2789c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   278a0:	e1a03002 	mov	r3, r2
   278a4:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
   278a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   278ac:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
   278b0:	e24b3014 	sub	r3, fp, #20
   278b4:	e1a00003 	mov	r0, r3
   278b8:	ebfffcd3 	bl	26c0c <get_ldnumber>
   278bc:	e50b0008 	str	r0, [fp, #-8]
	if (vol < 0) return FR_INVALID_DRIVE;
   278c0:	e51b3008 	ldr	r3, [fp, #-8]
   278c4:	e3530000 	cmp	r3, #0
   278c8:	aa000001 	bge	278d4 <f_mount+0x48>
   278cc:	e3a0300b 	mov	r3, #11
   278d0:	ea000028 	b	27978 <f_mount+0xec>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
   278d4:	e59f20a8 	ldr	r2, [pc, #168]	; 27984 <f_mount+0xf8>
   278d8:	e51b3008 	ldr	r3, [fp, #-8]
   278dc:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   278e0:	e50b300c 	str	r3, [fp, #-12]

	if (cfs) {					/* Unregister current filesystem object if registered */
   278e4:	e51b300c 	ldr	r3, [fp, #-12]
   278e8:	e3530000 	cmp	r3, #0
   278ec:	0a000006 	beq	2790c <f_mount+0x80>
		FatFs[vol] = 0;
   278f0:	e59f208c 	ldr	r2, [pc, #140]	; 27984 <f_mount+0xf8>
   278f4:	e51b3008 	ldr	r3, [fp, #-8]
   278f8:	e3a01000 	mov	r1, #0
   278fc:	e7821103 	str	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
   27900:	e51b300c 	ldr	r3, [fp, #-12]
   27904:	e3a02000 	mov	r2, #0
   27908:	e5c32000 	strb	r2, [r3]
	}

	if (fs) {					/* Register new filesystem object */
   2790c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27910:	e3530000 	cmp	r3, #0
   27914:	0a00000a 	beq	27944 <f_mount+0xb8>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
   27918:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2791c:	e51b2008 	ldr	r2, [fp, #-8]
   27920:	e6ef2072 	uxtb	r2, r2
   27924:	e5c32001 	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
   27928:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2792c:	e3a02000 	mov	r2, #0
   27930:	e5c32000 	strb	r2, [r3]
		FatFs[vol] = fs;		/* Register new fs object */
   27934:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   27938:	e59f1044 	ldr	r1, [pc, #68]	; 27984 <f_mount+0xf8>
   2793c:	e51b3008 	ldr	r3, [fp, #-8]
   27940:	e7812103 	str	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
   27944:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   27948:	e3530000 	cmp	r3, #0
   2794c:	1a000001 	bne	27958 <f_mount+0xcc>
   27950:	e3a03000 	mov	r3, #0
   27954:	ea000007 	b	27978 <f_mount+0xec>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
   27958:	e24b1018 	sub	r1, fp, #24
   2795c:	e24b301c 	sub	r3, fp, #28
   27960:	e3a02000 	mov	r2, #0
   27964:	e1a00003 	mov	r0, r3
   27968:	ebfffdcd 	bl	270a4 <mount_volume>
   2796c:	e1a03000 	mov	r3, r0
   27970:	e54b300d 	strb	r3, [fp, #-13]
	LEAVE_FF(fs, res);
   27974:	e55b300d 	ldrb	r3, [fp, #-13]
}
   27978:	e1a00003 	mov	r0, r3
   2797c:	e24bd004 	sub	sp, fp, #4
   27980:	e8bd8800 	pop	{fp, pc}
   27984:	0002d2d0 	ldrdeq	sp, [r2], -r0

00027988 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
   27988:	e92d4800 	push	{fp, lr}
   2798c:	e28db004 	add	fp, sp, #4
   27990:	e24dd060 	sub	sp, sp, #96	; 0x60
   27994:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
   27998:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
   2799c:	e1a03002 	mov	r3, r2
   279a0:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
   279a4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   279a8:	e3530000 	cmp	r3, #0
   279ac:	1a000001 	bne	279b8 <f_open+0x30>
   279b0:	e3a03009 	mov	r3, #9
   279b4:	ea000121 	b	27e40 <f_open+0x4b8>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
   279b8:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   279bc:	e203303f 	and	r3, r3, #63	; 0x3f
   279c0:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
	res = mount_volume(&path, &fs, mode);
   279c4:	e55b205d 	ldrb	r2, [fp, #-93]	; 0xffffffa3
   279c8:	e24b1050 	sub	r1, fp, #80	; 0x50
   279cc:	e24b305c 	sub	r3, fp, #92	; 0x5c
   279d0:	e1a00003 	mov	r0, r3
   279d4:	ebfffdb2 	bl	270a4 <mount_volume>
   279d8:	e1a03000 	mov	r3, r0
   279dc:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   279e0:	e55b3005 	ldrb	r3, [fp, #-5]
   279e4:	e3530000 	cmp	r3, #0
   279e8:	1a00010d 	bne	27e24 <f_open+0x49c>
		dj.obj.fs = fs;
   279ec:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   279f0:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
   279f4:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
   279f8:	e24b304c 	sub	r3, fp, #76	; 0x4c
   279fc:	e1a01002 	mov	r1, r2
   27a00:	e1a00003 	mov	r0, r3
   27a04:	ebfffc1c 	bl	26a7c <follow_path>
   27a08:	e1a03000 	mov	r3, r0
   27a0c:	e54b3005 	strb	r3, [fp, #-5]
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
   27a10:	e55b3005 	ldrb	r3, [fp, #-5]
   27a14:	e3530000 	cmp	r3, #0
   27a18:	1a000005 	bne	27a34 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
   27a1c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   27a20:	e6af3073 	sxtb	r3, r3
   27a24:	e3530000 	cmp	r3, #0
   27a28:	aa000001 	bge	27a34 <f_open+0xac>
				res = FR_INVALID_NAME;
   27a2c:	e3a03006 	mov	r3, #6
   27a30:	e54b3005 	strb	r3, [fp, #-5]
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   27a34:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27a38:	e203301c 	and	r3, r3, #28
   27a3c:	e3530000 	cmp	r3, #0
   27a40:	0a000060 	beq	27bc8 <f_open+0x240>
			if (res != FR_OK) {					/* No file, create new */
   27a44:	e55b3005 	ldrb	r3, [fp, #-5]
   27a48:	e3530000 	cmp	r3, #0
   27a4c:	0a00000b 	beq	27a80 <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
   27a50:	e55b3005 	ldrb	r3, [fp, #-5]
   27a54:	e3530004 	cmp	r3, #4
   27a58:	1a000004 	bne	27a70 <f_open+0xe8>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
   27a5c:	e24b304c 	sub	r3, fp, #76	; 0x4c
   27a60:	e1a00003 	mov	r0, r3
   27a64:	ebfffa9d 	bl	264e0 <dir_register>
   27a68:	e1a03000 	mov	r3, r0
   27a6c:	e54b3005 	strb	r3, [fp, #-5]
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
   27a70:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27a74:	e3833008 	orr	r3, r3, #8
   27a78:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
   27a7c:	ea00000c 	b	27ab4 <f_open+0x12c>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   27a80:	e55b3046 	ldrb	r3, [fp, #-70]	; 0xffffffba
   27a84:	e2033011 	and	r3, r3, #17
   27a88:	e3530000 	cmp	r3, #0
   27a8c:	0a000002 	beq	27a9c <f_open+0x114>
					res = FR_DENIED;
   27a90:	e3a03007 	mov	r3, #7
   27a94:	e54b3005 	strb	r3, [fp, #-5]
   27a98:	ea000005 	b	27ab4 <f_open+0x12c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   27a9c:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27aa0:	e2033004 	and	r3, r3, #4
   27aa4:	e3530000 	cmp	r3, #0
   27aa8:	0a000001 	beq	27ab4 <f_open+0x12c>
   27aac:	e3a03008 	mov	r3, #8
   27ab0:	e54b3005 	strb	r3, [fp, #-5]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   27ab4:	e55b3005 	ldrb	r3, [fp, #-5]
   27ab8:	e3530000 	cmp	r3, #0
   27abc:	1a000055 	bne	27c18 <f_open+0x290>
   27ac0:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27ac4:	e2033008 	and	r3, r3, #8
   27ac8:	e3530000 	cmp	r3, #0
   27acc:	0a000051 	beq	27c18 <f_open+0x290>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
   27ad0:	e59f3374 	ldr	r3, [pc, #884]	; 27e4c <f_open+0x4c4>
   27ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					st_dword(dj.dir + DIR_CrtTime, tm);
   27ad8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27adc:	e283300e 	add	r3, r3, #14
   27ae0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   27ae4:	e1a00003 	mov	r0, r3
   27ae8:	ebfff467 	bl	24c8c <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
   27aec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27af0:	e2833016 	add	r3, r3, #22
   27af4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   27af8:	e1a00003 	mov	r0, r3
   27afc:	ebfff462 	bl	24c8c <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   27b00:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27b04:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   27b08:	e1a01002 	mov	r1, r2
   27b0c:	e1a00003 	mov	r0, r3
   27b10:	ebfff995 	bl	2616c <ld_clust>
   27b14:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   27b18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27b1c:	e283300b 	add	r3, r3, #11
   27b20:	e3a02020 	mov	r2, #32
   27b24:	e5c32000 	strb	r2, [r3]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   27b28:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27b2c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
   27b30:	e3a02000 	mov	r2, #0
   27b34:	e1a00003 	mov	r0, r3
   27b38:	ebfff9a7 	bl	261dc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
   27b3c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27b40:	e283301c 	add	r3, r3, #28
   27b44:	e3a01000 	mov	r1, #0
   27b48:	e1a00003 	mov	r0, r3
   27b4c:	ebfff44e 	bl	24c8c <st_dword>
					fs->wflag = 1;
   27b50:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27b54:	e3a02001 	mov	r2, #1
   27b58:	e5c32004 	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
   27b5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   27b60:	e3530000 	cmp	r3, #0
   27b64:	0a00002b 	beq	27c18 <f_open+0x290>
						sc = fs->winsect;
   27b68:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27b6c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
   27b70:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
						res = remove_chain(&dj.obj, cl, 0);
   27b74:	e24b304c 	sub	r3, fp, #76	; 0x4c
   27b78:	e3a02000 	mov	r2, #0
   27b7c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   27b80:	e1a00003 	mov	r0, r3
   27b84:	ebfff6cc 	bl	256bc <remove_chain>
   27b88:	e1a03000 	mov	r3, r0
   27b8c:	e54b3005 	strb	r3, [fp, #-5]
						if (res == FR_OK) {
   27b90:	e55b3005 	ldrb	r3, [fp, #-5]
   27b94:	e3530000 	cmp	r3, #0
   27b98:	1a00001e 	bne	27c18 <f_open+0x290>
							res = move_window(fs, sc);
   27b9c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27ba0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   27ba4:	e1a00003 	mov	r0, r3
   27ba8:	ebfff4b6 	bl	24e88 <move_window>
   27bac:	e1a03000 	mov	r3, r0
   27bb0:	e54b3005 	strb	r3, [fp, #-5]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   27bb4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27bb8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   27bbc:	e2422001 	sub	r2, r2, #1
   27bc0:	e583200c 	str	r2, [r3, #12]
   27bc4:	ea000013 	b	27c18 <f_open+0x290>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
   27bc8:	e55b3005 	ldrb	r3, [fp, #-5]
   27bcc:	e3530000 	cmp	r3, #0
   27bd0:	1a000010 	bne	27c18 <f_open+0x290>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
   27bd4:	e55b3046 	ldrb	r3, [fp, #-70]	; 0xffffffba
   27bd8:	e2033010 	and	r3, r3, #16
   27bdc:	e3530000 	cmp	r3, #0
   27be0:	0a000002 	beq	27bf0 <f_open+0x268>
					res = FR_NO_FILE;
   27be4:	e3a03004 	mov	r3, #4
   27be8:	e54b3005 	strb	r3, [fp, #-5]
   27bec:	ea000009 	b	27c18 <f_open+0x290>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
   27bf0:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27bf4:	e2033002 	and	r3, r3, #2
   27bf8:	e3530000 	cmp	r3, #0
   27bfc:	0a000005 	beq	27c18 <f_open+0x290>
   27c00:	e55b3046 	ldrb	r3, [fp, #-70]	; 0xffffffba
   27c04:	e2033001 	and	r3, r3, #1
   27c08:	e3530000 	cmp	r3, #0
   27c0c:	0a000001 	beq	27c18 <f_open+0x290>
						res = FR_DENIED;
   27c10:	e3a03007 	mov	r3, #7
   27c14:	e54b3005 	strb	r3, [fp, #-5]
					}
				}
			}
		}
		if (res == FR_OK) {
   27c18:	e55b3005 	ldrb	r3, [fp, #-5]
   27c1c:	e3530000 	cmp	r3, #0
   27c20:	1a00000d 	bne	27c5c <f_open+0x2d4>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
   27c24:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27c28:	e2033008 	and	r3, r3, #8
   27c2c:	e3530000 	cmp	r3, #0
   27c30:	0a000002 	beq	27c40 <f_open+0x2b8>
   27c34:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27c38:	e3833040 	orr	r3, r3, #64	; 0x40
   27c3c:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   27c40:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27c44:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   27c48:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27c4c:	e5832020 	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
   27c50:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   27c54:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27c58:	e5832024 	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
   27c5c:	e55b3005 	ldrb	r3, [fp, #-5]
   27c60:	e3530000 	cmp	r3, #0
   27c64:	1a00006e 	bne	27e24 <f_open+0x49c>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
   27c68:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27c6c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   27c70:	e1a01002 	mov	r1, r2
   27c74:	e1a00003 	mov	r0, r3
   27c78:	ebfff93b 	bl	2616c <ld_clust>
   27c7c:	e1a02000 	mov	r2, r0
   27c80:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27c84:	e5832008 	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   27c88:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27c8c:	e283301c 	add	r3, r3, #28
   27c90:	e1a00003 	mov	r0, r3
   27c94:	ebfff3c2 	bl	24ba4 <ld_dword>
   27c98:	e1a02000 	mov	r2, r0
   27c9c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27ca0:	e583200c 	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
   27ca4:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
   27ca8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27cac:	e5832000 	str	r2, [r3]
			fp->obj.id = fs->id;
   27cb0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27cb4:	e1d320b6 	ldrh	r2, [r3, #6]
   27cb8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27cbc:	e1c320b4 	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
   27cc0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27cc4:	e55b205d 	ldrb	r2, [fp, #-93]	; 0xffffffa3
   27cc8:	e5c32010 	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
   27ccc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27cd0:	e3a02000 	mov	r2, #0
   27cd4:	e5c32011 	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
   27cd8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27cdc:	e3a02000 	mov	r2, #0
   27ce0:	e583201c 	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
   27ce4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27ce8:	e3a02000 	mov	r2, #0
   27cec:	e5832014 	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   27cf0:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   27cf4:	e2033020 	and	r3, r3, #32
   27cf8:	e3530000 	cmp	r3, #0
   27cfc:	0a000048 	beq	27e24 <f_open+0x49c>
   27d00:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d04:	e593300c 	ldr	r3, [r3, #12]
   27d08:	e3530000 	cmp	r3, #0
   27d0c:	0a000044 	beq	27e24 <f_open+0x49c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
   27d10:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d14:	e593200c 	ldr	r2, [r3, #12]
   27d18:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d1c:	e5832014 	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   27d20:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27d24:	e1d330ba 	ldrh	r3, [r3, #10]
   27d28:	e1a03483 	lsl	r3, r3, #9
   27d2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				clst = fp->obj.sclust;				/* Follow the cluster chain */
   27d30:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d34:	e5933008 	ldr	r3, [r3, #8]
   27d38:	e50b300c 	str	r3, [fp, #-12]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   27d3c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d40:	e593300c 	ldr	r3, [r3, #12]
   27d44:	e50b3010 	str	r3, [fp, #-16]
   27d48:	ea000012 	b	27d98 <f_open+0x410>
					clst = get_fat(&fp->obj, clst);
   27d4c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27d50:	e51b100c 	ldr	r1, [fp, #-12]
   27d54:	e1a00003 	mov	r0, r3
   27d58:	ebfff4eb 	bl	2510c <get_fat>
   27d5c:	e50b000c 	str	r0, [fp, #-12]
					if (clst <= 1) res = FR_INT_ERR;
   27d60:	e51b300c 	ldr	r3, [fp, #-12]
   27d64:	e3530001 	cmp	r3, #1
   27d68:	8a000001 	bhi	27d74 <f_open+0x3ec>
   27d6c:	e3a03002 	mov	r3, #2
   27d70:	e54b3005 	strb	r3, [fp, #-5]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   27d74:	e51b300c 	ldr	r3, [fp, #-12]
   27d78:	e3730001 	cmn	r3, #1
   27d7c:	1a000001 	bne	27d88 <f_open+0x400>
   27d80:	e3a03001 	mov	r3, #1
   27d84:	e54b3005 	strb	r3, [fp, #-5]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   27d88:	e51b2010 	ldr	r2, [fp, #-16]
   27d8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   27d90:	e0423003 	sub	r3, r2, r3
   27d94:	e50b3010 	str	r3, [fp, #-16]
   27d98:	e55b3005 	ldrb	r3, [fp, #-5]
   27d9c:	e3530000 	cmp	r3, #0
   27da0:	1a000003 	bne	27db4 <f_open+0x42c>
   27da4:	e51b2010 	ldr	r2, [fp, #-16]
   27da8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   27dac:	e1520003 	cmp	r2, r3
   27db0:	8affffe5 	bhi	27d4c <f_open+0x3c4>
				}
				fp->clust = clst;
   27db4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27db8:	e51b200c 	ldr	r2, [fp, #-12]
   27dbc:	e5832018 	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   27dc0:	e55b3005 	ldrb	r3, [fp, #-5]
   27dc4:	e3530000 	cmp	r3, #0
   27dc8:	1a000015 	bne	27e24 <f_open+0x49c>
   27dcc:	e51b3010 	ldr	r3, [fp, #-16]
   27dd0:	e1a03b83 	lsl	r3, r3, #23
   27dd4:	e1a03ba3 	lsr	r3, r3, #23
   27dd8:	e3530000 	cmp	r3, #0
   27ddc:	0a000010 	beq	27e24 <f_open+0x49c>
					sc = clst2sect(fs, clst);
   27de0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   27de4:	e51b100c 	ldr	r1, [fp, #-12]
   27de8:	e1a00003 	mov	r0, r3
   27dec:	ebfff4aa 	bl	2509c <clst2sect>
   27df0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
					if (sc == 0) {
   27df4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27df8:	e3530000 	cmp	r3, #0
   27dfc:	1a000002 	bne	27e0c <f_open+0x484>
						res = FR_INT_ERR;
   27e00:	e3a03002 	mov	r3, #2
   27e04:	e54b3005 	strb	r3, [fp, #-5]
   27e08:	ea000005 	b	27e24 <f_open+0x49c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
   27e0c:	e51b3010 	ldr	r3, [fp, #-16]
   27e10:	e1a024a3 	lsr	r2, r3, #9
   27e14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27e18:	e0822003 	add	r2, r2, r3
   27e1c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27e20:	e583201c 	str	r2, [r3, #28]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   27e24:	e55b3005 	ldrb	r3, [fp, #-5]
   27e28:	e3530000 	cmp	r3, #0
   27e2c:	0a000002 	beq	27e3c <f_open+0x4b4>
   27e30:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   27e34:	e3a02000 	mov	r2, #0
   27e38:	e5832000 	str	r2, [r3]

	LEAVE_FF(fs, res);
   27e3c:	e55b3005 	ldrb	r3, [fp, #-5]
}
   27e40:	e1a00003 	mov	r0, r3
   27e44:	e24bd004 	sub	sp, fp, #4
   27e48:	e8bd8800 	pop	{fp, pc}
   27e4c:	59610000 	stmdbpl	r1!, {}^	; <UNPREDICTABLE>

00027e50 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
   27e50:	e92d4800 	push	{fp, lr}
   27e54:	e28db004 	add	fp, sp, #4
   27e58:	e24dd038 	sub	sp, sp, #56	; 0x38
   27e5c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
   27e60:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
   27e64:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
   27e68:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
   27e6c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   27e70:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8


	*br = 0;	/* Clear read byte counter */
   27e74:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   27e78:	e3a02000 	mov	r2, #0
   27e7c:	e5832000 	str	r2, [r3]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   27e80:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27e84:	e24b2028 	sub	r2, fp, #40	; 0x28
   27e88:	e1a01002 	mov	r1, r2
   27e8c:	e1a00003 	mov	r0, r3
   27e90:	ebfffe4b 	bl	277c4 <validate>
   27e94:	e1a03000 	mov	r3, r0
   27e98:	e54b3005 	strb	r3, [fp, #-5]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   27e9c:	e55b3005 	ldrb	r3, [fp, #-5]
   27ea0:	e3530000 	cmp	r3, #0
   27ea4:	1a000005 	bne	27ec0 <f_read+0x70>
   27ea8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27eac:	e5d33011 	ldrb	r3, [r3, #17]
   27eb0:	e54b3005 	strb	r3, [fp, #-5]
   27eb4:	e55b3005 	ldrb	r3, [fp, #-5]
   27eb8:	e3530000 	cmp	r3, #0
   27ebc:	0a000001 	beq	27ec8 <f_read+0x78>
   27ec0:	e55b3005 	ldrb	r3, [fp, #-5]
   27ec4:	ea0000d5 	b	28220 <f_read+0x3d0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   27ec8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27ecc:	e5d33010 	ldrb	r3, [r3, #16]
   27ed0:	e2033001 	and	r3, r3, #1
   27ed4:	e3530000 	cmp	r3, #0
   27ed8:	1a000001 	bne	27ee4 <f_read+0x94>
   27edc:	e3a03007 	mov	r3, #7
   27ee0:	ea0000ce 	b	28220 <f_read+0x3d0>
	remain = fp->obj.objsize - fp->fptr;
   27ee4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27ee8:	e593200c 	ldr	r2, [r3, #12]
   27eec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27ef0:	e5933014 	ldr	r3, [r3, #20]
   27ef4:	e0423003 	sub	r3, r2, r3
   27ef8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   27efc:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
   27f00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27f04:	e1520003 	cmp	r2, r3
   27f08:	9a0000c0 	bls	28210 <f_read+0x3c0>
   27f0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   27f10:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   27f14:	ea0000bd 	b	28210 <f_read+0x3c0>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   27f18:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27f1c:	e5933014 	ldr	r3, [r3, #20]
   27f20:	e1a03b83 	lsl	r3, r3, #23
   27f24:	e1a03ba3 	lsr	r3, r3, #23
   27f28:	e3530000 	cmp	r3, #0
   27f2c:	1a00007e 	bne	2812c <f_read+0x2dc>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   27f30:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27f34:	e5933014 	ldr	r3, [r3, #20]
   27f38:	e1a034a3 	lsr	r3, r3, #9
   27f3c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   27f40:	e1d220ba 	ldrh	r2, [r2, #10]
   27f44:	e2422001 	sub	r2, r2, #1
   27f48:	e0033002 	and	r3, r3, r2
   27f4c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			if (csect == 0) {					/* On the cluster boundary? */
   27f50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   27f54:	e3530000 	cmp	r3, #0
   27f58:	1a000021 	bne	27fe4 <f_read+0x194>
				if (fp->fptr == 0) {			/* On the top of the file? */
   27f5c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27f60:	e5933014 	ldr	r3, [r3, #20]
   27f64:	e3530000 	cmp	r3, #0
   27f68:	1a000003 	bne	27f7c <f_read+0x12c>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
   27f6c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27f70:	e5933008 	ldr	r3, [r3, #8]
   27f74:	e50b300c 	str	r3, [fp, #-12]
   27f78:	ea000006 	b	27f98 <f_read+0x148>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
   27f7c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   27f80:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27f84:	e5933018 	ldr	r3, [r3, #24]
   27f88:	e1a01003 	mov	r1, r3
   27f8c:	e1a00002 	mov	r0, r2
   27f90:	ebfff45d 	bl	2510c <get_fat>
   27f94:	e50b000c 	str	r0, [fp, #-12]
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   27f98:	e51b300c 	ldr	r3, [fp, #-12]
   27f9c:	e3530001 	cmp	r3, #1
   27fa0:	8a000004 	bhi	27fb8 <f_read+0x168>
   27fa4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27fa8:	e3a02002 	mov	r2, #2
   27fac:	e5c32011 	strb	r2, [r3, #17]
   27fb0:	e3a03002 	mov	r3, #2
   27fb4:	ea000099 	b	28220 <f_read+0x3d0>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   27fb8:	e51b300c 	ldr	r3, [fp, #-12]
   27fbc:	e3730001 	cmn	r3, #1
   27fc0:	1a000004 	bne	27fd8 <f_read+0x188>
   27fc4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27fc8:	e3a02001 	mov	r2, #1
   27fcc:	e5c32011 	strb	r2, [r3, #17]
   27fd0:	e3a03001 	mov	r3, #1
   27fd4:	ea000091 	b	28220 <f_read+0x3d0>
				fp->clust = clst;				/* Update current cluster */
   27fd8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27fdc:	e51b200c 	ldr	r2, [fp, #-12]
   27fe0:	e5832018 	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   27fe4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   27fe8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   27fec:	e5933018 	ldr	r3, [r3, #24]
   27ff0:	e1a01003 	mov	r1, r3
   27ff4:	e1a00002 	mov	r0, r2
   27ff8:	ebfff427 	bl	2509c <clst2sect>
   27ffc:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   28000:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28004:	e3530000 	cmp	r3, #0
   28008:	1a000004 	bne	28020 <f_read+0x1d0>
   2800c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28010:	e3a02002 	mov	r2, #2
   28014:	e5c32011 	strb	r2, [r3, #17]
   28018:	e3a03002 	mov	r3, #2
   2801c:	ea00007f 	b	28220 <f_read+0x3d0>
			sect += csect;
   28020:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   28024:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28028:	e0823003 	add	r3, r2, r3
   2802c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
   28030:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   28034:	e1a034a3 	lsr	r3, r3, #9
   28038:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   2803c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28040:	e3530000 	cmp	r3, #0
   28044:	0a000035 	beq	28120 <f_read+0x2d0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   28048:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2804c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28050:	e0823003 	add	r3, r2, r3
   28054:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   28058:	e1d220ba 	ldrh	r2, [r2, #10]
   2805c:	e1530002 	cmp	r3, r2
   28060:	9a000005 	bls	2807c <f_read+0x22c>
					cc = fs->csize - csect;
   28064:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28068:	e1d330ba 	ldrh	r3, [r3, #10]
   2806c:	e1a02003 	mov	r2, r3
   28070:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28074:	e0423003 	sub	r3, r2, r3
   28078:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   2807c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28080:	e5d30001 	ldrb	r0, [r3, #1]
   28084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28088:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   2808c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   28090:	eb000b9c 	bl	2af08 <disk_read>
   28094:	e1a03000 	mov	r3, r0
   28098:	e3530000 	cmp	r3, #0
   2809c:	0a000004 	beq	280b4 <f_read+0x264>
   280a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   280a4:	e3a02001 	mov	r2, #1
   280a8:	e5c32011 	strb	r2, [r3, #17]
   280ac:	e3a03001 	mov	r3, #1
   280b0:	ea00005a 	b	28220 <f_read+0x3d0>
#if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
   280b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   280b8:	e5d33004 	ldrb	r3, [r3, #4]
   280bc:	e3530000 	cmp	r3, #0
   280c0:	0a000012 	beq	28110 <f_read+0x2c0>
   280c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   280c8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   280cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   280d0:	e0423003 	sub	r3, r2, r3
   280d4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   280d8:	e1520003 	cmp	r2, r3
   280dc:	9a00000b 	bls	28110 <f_read+0x2c0>
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
   280e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   280e4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   280e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   280ec:	e0423003 	sub	r3, r2, r3
   280f0:	e1a03483 	lsl	r3, r3, #9
   280f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   280f8:	e0820003 	add	r0, r2, r3
   280fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28100:	e2833030 	add	r3, r3, #48	; 0x30
   28104:	e3a02c02 	mov	r2, #512	; 0x200
   28108:	e1a01003 	mov	r1, r3
   2810c:	eb000c8c 	bl	2b344 <memcpy>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
   28110:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28114:	e1a03483 	lsl	r3, r3, #9
   28118:	e50b3010 	str	r3, [fp, #-16]
				continue;
   2811c:	ea000027 	b	281c0 <f_read+0x370>
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
   28120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28124:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   28128:	e583201c 	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   2812c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28130:	e5933014 	ldr	r3, [r3, #20]
   28134:	e1a03b83 	lsl	r3, r3, #23
   28138:	e1a03ba3 	lsr	r3, r3, #23
   2813c:	e2633c02 	rsb	r3, r3, #512	; 0x200
   28140:	e50b3010 	str	r3, [fp, #-16]
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
   28144:	e51b2010 	ldr	r2, [fp, #-16]
   28148:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2814c:	e1520003 	cmp	r2, r3
   28150:	9a000001 	bls	2815c <f_read+0x30c>
   28154:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   28158:	e50b3010 	str	r3, [fp, #-16]
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   2815c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   28160:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28164:	e593301c 	ldr	r3, [r3, #28]
   28168:	e1a01003 	mov	r1, r3
   2816c:	e1a00002 	mov	r0, r2
   28170:	ebfff344 	bl	24e88 <move_window>
   28174:	e1a03000 	mov	r3, r0
   28178:	e3530000 	cmp	r3, #0
   2817c:	0a000004 	beq	28194 <f_read+0x344>
   28180:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28184:	e3a02001 	mov	r2, #1
   28188:	e5c32011 	strb	r2, [r3, #17]
   2818c:	e3a03001 	mov	r3, #1
   28190:	ea000022 	b	28220 <f_read+0x3d0>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
   28194:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28198:	e2832030 	add	r2, r3, #48	; 0x30
   2819c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   281a0:	e5933014 	ldr	r3, [r3, #20]
   281a4:	e1a03b83 	lsl	r3, r3, #23
   281a8:	e1a03ba3 	lsr	r3, r3, #23
   281ac:	e0823003 	add	r3, r2, r3
   281b0:	e51b2010 	ldr	r2, [fp, #-16]
   281b4:	e1a01003 	mov	r1, r3
   281b8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   281bc:	eb000c60 	bl	2b344 <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
   281c0:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
   281c4:	e51b3010 	ldr	r3, [fp, #-16]
   281c8:	e0423003 	sub	r3, r2, r3
   281cc:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
   281d0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   281d4:	e5932000 	ldr	r2, [r3]
   281d8:	e51b3010 	ldr	r3, [fp, #-16]
   281dc:	e0822003 	add	r2, r2, r3
   281e0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   281e4:	e5832000 	str	r2, [r3]
   281e8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   281ec:	e51b3010 	ldr	r3, [fp, #-16]
   281f0:	e0823003 	add	r3, r2, r3
   281f4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   281f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   281fc:	e5932014 	ldr	r2, [r3, #20]
   28200:	e51b3010 	ldr	r3, [fp, #-16]
   28204:	e0822003 	add	r2, r2, r3
   28208:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2820c:	e5832014 	str	r2, [r3, #20]
   28210:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   28214:	e3530000 	cmp	r3, #0
   28218:	1affff3e 	bne	27f18 <f_read+0xc8>
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
   2821c:	e3a03000 	mov	r3, #0
}
   28220:	e1a00003 	mov	r0, r3
   28224:	e24bd004 	sub	sp, fp, #4
   28228:	e8bd8800 	pop	{fp, pc}

0002822c <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
   2822c:	e92d4800 	push	{fp, lr}
   28230:	e28db004 	add	fp, sp, #4
   28234:	e24dd030 	sub	sp, sp, #48	; 0x30
   28238:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   2823c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
   28240:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
   28244:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
   28248:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2824c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8


	*bw = 0;	/* Clear write byte counter */
   28250:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   28254:	e3a02000 	mov	r2, #0
   28258:	e5832000 	str	r2, [r3]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   2825c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28260:	e24b2024 	sub	r2, fp, #36	; 0x24
   28264:	e1a01002 	mov	r1, r2
   28268:	e1a00003 	mov	r0, r3
   2826c:	ebfffd54 	bl	277c4 <validate>
   28270:	e1a03000 	mov	r3, r0
   28274:	e54b3005 	strb	r3, [fp, #-5]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   28278:	e55b3005 	ldrb	r3, [fp, #-5]
   2827c:	e3530000 	cmp	r3, #0
   28280:	1a000005 	bne	2829c <f_write+0x70>
   28284:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28288:	e5d33011 	ldrb	r3, [r3, #17]
   2828c:	e54b3005 	strb	r3, [fp, #-5]
   28290:	e55b3005 	ldrb	r3, [fp, #-5]
   28294:	e3530000 	cmp	r3, #0
   28298:	0a000001 	beq	282a4 <f_write+0x78>
   2829c:	e55b3005 	ldrb	r3, [fp, #-5]
   282a0:	ea00011f 	b	28724 <f_write+0x4f8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   282a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   282a8:	e5d33010 	ldrb	r3, [r3, #16]
   282ac:	e2033002 	and	r3, r3, #2
   282b0:	e3530000 	cmp	r3, #0
   282b4:	1a000001 	bne	282c0 <f_write+0x94>
   282b8:	e3a03007 	mov	r3, #7
   282bc:	ea000118 	b	28724 <f_write+0x4f8>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   282c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   282c4:	e5932014 	ldr	r2, [r3, #20]
   282c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   282cc:	e0822003 	add	r2, r2, r3
   282d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   282d4:	e5933014 	ldr	r3, [r3, #20]
   282d8:	e1520003 	cmp	r2, r3
   282dc:	2a000104 	bcs	286f4 <f_write+0x4c8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   282e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   282e4:	e5933014 	ldr	r3, [r3, #20]
   282e8:	e1e03003 	mvn	r3, r3
   282ec:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   282f0:	ea0000ff 	b	286f4 <f_write+0x4c8>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   282f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   282f8:	e5933014 	ldr	r3, [r3, #20]
   282fc:	e1a03b83 	lsl	r3, r3, #23
   28300:	e1a03ba3 	lsr	r3, r3, #23
   28304:	e3530000 	cmp	r3, #0
   28308:	1a0000b4 	bne	285e0 <f_write+0x3b4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   2830c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28310:	e5933014 	ldr	r3, [r3, #20]
   28314:	e1a034a3 	lsr	r3, r3, #9
   28318:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   2831c:	e1d220ba 	ldrh	r2, [r2, #10]
   28320:	e2422001 	sub	r2, r2, #1
   28324:	e0033002 	and	r3, r3, r2
   28328:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			if (csect == 0) {				/* On the cluster boundary? */
   2832c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28330:	e3530000 	cmp	r3, #0
   28334:	1a000033 	bne	28408 <f_write+0x1dc>
				if (fp->fptr == 0) {		/* On the top of the file? */
   28338:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2833c:	e5933014 	ldr	r3, [r3, #20]
   28340:	e3530000 	cmp	r3, #0
   28344:	1a00000b 	bne	28378 <f_write+0x14c>
					clst = fp->obj.sclust;	/* Follow from the origin */
   28348:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2834c:	e5933008 	ldr	r3, [r3, #8]
   28350:	e50b300c 	str	r3, [fp, #-12]
					if (clst == 0) {		/* If no cluster is allocated, */
   28354:	e51b300c 	ldr	r3, [fp, #-12]
   28358:	e3530000 	cmp	r3, #0
   2835c:	1a00000c 	bne	28394 <f_write+0x168>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
   28360:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28364:	e3a01000 	mov	r1, #0
   28368:	e1a00003 	mov	r0, r3
   2836c:	ebfff530 	bl	25834 <create_chain>
   28370:	e50b000c 	str	r0, [fp, #-12]
   28374:	ea000006 	b	28394 <f_write+0x168>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   28378:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   2837c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28380:	e5933018 	ldr	r3, [r3, #24]
   28384:	e1a01003 	mov	r1, r3
   28388:	e1a00002 	mov	r0, r2
   2838c:	ebfff528 	bl	25834 <create_chain>
   28390:	e50b000c 	str	r0, [fp, #-12]
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   28394:	e51b300c 	ldr	r3, [fp, #-12]
   28398:	e3530000 	cmp	r3, #0
   2839c:	0a0000d8 	beq	28704 <f_write+0x4d8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   283a0:	e51b300c 	ldr	r3, [fp, #-12]
   283a4:	e3530001 	cmp	r3, #1
   283a8:	1a000004 	bne	283c0 <f_write+0x194>
   283ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   283b0:	e3a02002 	mov	r2, #2
   283b4:	e5c32011 	strb	r2, [r3, #17]
   283b8:	e3a03002 	mov	r3, #2
   283bc:	ea0000d8 	b	28724 <f_write+0x4f8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   283c0:	e51b300c 	ldr	r3, [fp, #-12]
   283c4:	e3730001 	cmn	r3, #1
   283c8:	1a000004 	bne	283e0 <f_write+0x1b4>
   283cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   283d0:	e3a02001 	mov	r2, #1
   283d4:	e5c32011 	strb	r2, [r3, #17]
   283d8:	e3a03001 	mov	r3, #1
   283dc:	ea0000d0 	b	28724 <f_write+0x4f8>
				fp->clust = clst;			/* Update current cluster */
   283e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   283e4:	e51b200c 	ldr	r2, [fp, #-12]
   283e8:	e5832018 	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   283ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   283f0:	e5933008 	ldr	r3, [r3, #8]
   283f4:	e3530000 	cmp	r3, #0
   283f8:	1a000002 	bne	28408 <f_write+0x1dc>
   283fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28400:	e51b200c 	ldr	r2, [fp, #-12]
   28404:	e5832008 	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
   28408:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2840c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   28410:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28414:	e593301c 	ldr	r3, [r3, #28]
   28418:	e1520003 	cmp	r2, r3
   2841c:	1a00000a 	bne	2844c <f_write+0x220>
   28420:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28424:	e1a00003 	mov	r0, r3
   28428:	ebfff25f 	bl	24dac <sync_window>
   2842c:	e1a03000 	mov	r3, r0
   28430:	e3530000 	cmp	r3, #0
   28434:	0a000004 	beq	2844c <f_write+0x220>
   28438:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2843c:	e3a02001 	mov	r2, #1
   28440:	e5c32011 	strb	r2, [r3, #17]
   28444:	e3a03001 	mov	r3, #1
   28448:	ea0000b5 	b	28724 <f_write+0x4f8>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   2844c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   28450:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28454:	e5933018 	ldr	r3, [r3, #24]
   28458:	e1a01003 	mov	r1, r3
   2845c:	e1a00002 	mov	r0, r2
   28460:	ebfff30d 	bl	2509c <clst2sect>
   28464:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   28468:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2846c:	e3530000 	cmp	r3, #0
   28470:	1a000004 	bne	28488 <f_write+0x25c>
   28474:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28478:	e3a02002 	mov	r2, #2
   2847c:	e5c32011 	strb	r2, [r3, #17]
   28480:	e3a03002 	mov	r3, #2
   28484:	ea0000a6 	b	28724 <f_write+0x4f8>
			sect += csect;
   28488:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2848c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28490:	e0823003 	add	r3, r2, r3
   28494:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   28498:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2849c:	e1a034a3 	lsr	r3, r3, #9
   284a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   284a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   284a8:	e3530000 	cmp	r3, #0
   284ac:	0a000034 	beq	28584 <f_write+0x358>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   284b0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   284b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   284b8:	e0823003 	add	r3, r2, r3
   284bc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   284c0:	e1d220ba 	ldrh	r2, [r2, #10]
   284c4:	e1530002 	cmp	r3, r2
   284c8:	9a000005 	bls	284e4 <f_write+0x2b8>
					cc = fs->csize - csect;
   284cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   284d0:	e1d330ba 	ldrh	r3, [r3, #10]
   284d4:	e1a02003 	mov	r2, r3
   284d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   284dc:	e0423003 	sub	r3, r2, r3
   284e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   284e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   284e8:	e5d30001 	ldrb	r0, [r3, #1]
   284ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   284f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   284f4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   284f8:	eb000aaf 	bl	2afbc <disk_write>
   284fc:	e1a03000 	mov	r3, r0
   28500:	e3530000 	cmp	r3, #0
   28504:	0a000004 	beq	2851c <f_write+0x2f0>
   28508:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2850c:	e3a02001 	mov	r2, #1
   28510:	e5c32011 	strb	r2, [r3, #17]
   28514:	e3a03001 	mov	r3, #1
   28518:	ea000081 	b	28724 <f_write+0x4f8>
#if FF_FS_MINIMIZE <= 2
#if FF_FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2851c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28520:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   28524:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28528:	e0423003 	sub	r3, r2, r3
   2852c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28530:	e1520003 	cmp	r2, r3
   28534:	9a00000e 	bls	28574 <f_write+0x348>
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
   28538:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2853c:	e2830030 	add	r0, r3, #48	; 0x30
   28540:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28544:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
   28548:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2854c:	e0423003 	sub	r3, r2, r3
   28550:	e1a03483 	lsl	r3, r3, #9
   28554:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28558:	e0823003 	add	r3, r2, r3
   2855c:	e3a02c02 	mov	r2, #512	; 0x200
   28560:	e1a01003 	mov	r1, r3
   28564:	eb000b76 	bl	2b344 <memcpy>
					fs->wflag = 0;
   28568:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2856c:	e3a02000 	mov	r2, #0
   28570:	e5c32004 	strb	r2, [r3, #4]
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   28574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28578:	e1a03483 	lsl	r3, r3, #9
   2857c:	e50b3010 	str	r3, [fp, #-16]
				continue;
   28580:	ea00003e 	b	28680 <f_write+0x454>
			}
#if FF_FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
   28584:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28588:	e5932014 	ldr	r2, [r3, #20]
   2858c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28590:	e593300c 	ldr	r3, [r3, #12]
   28594:	e1520003 	cmp	r2, r3
   28598:	3a00000d 	bcc	285d4 <f_write+0x3a8>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
   2859c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   285a0:	e1a00003 	mov	r0, r3
   285a4:	ebfff200 	bl	24dac <sync_window>
   285a8:	e1a03000 	mov	r3, r0
   285ac:	e3530000 	cmp	r3, #0
   285b0:	0a000004 	beq	285c8 <f_write+0x39c>
   285b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   285b8:	e3a02001 	mov	r2, #1
   285bc:	e5c32011 	strb	r2, [r3, #17]
   285c0:	e3a03001 	mov	r3, #1
   285c4:	ea000056 	b	28724 <f_write+0x4f8>
				fs->winsect = sect;
   285c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   285cc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   285d0:	e583202c 	str	r2, [r3, #44]	; 0x2c
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
   285d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   285d8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   285dc:	e583201c 	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   285e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   285e4:	e5933014 	ldr	r3, [r3, #20]
   285e8:	e1a03b83 	lsl	r3, r3, #23
   285ec:	e1a03ba3 	lsr	r3, r3, #23
   285f0:	e2633c02 	rsb	r3, r3, #512	; 0x200
   285f4:	e50b3010 	str	r3, [fp, #-16]
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
   285f8:	e51b2010 	ldr	r2, [fp, #-16]
   285fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   28600:	e1520003 	cmp	r2, r3
   28604:	9a000001 	bls	28610 <f_write+0x3e4>
   28608:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2860c:	e50b3010 	str	r3, [fp, #-16]
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
   28610:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   28614:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28618:	e593301c 	ldr	r3, [r3, #28]
   2861c:	e1a01003 	mov	r1, r3
   28620:	e1a00002 	mov	r0, r2
   28624:	ebfff217 	bl	24e88 <move_window>
   28628:	e1a03000 	mov	r3, r0
   2862c:	e3530000 	cmp	r3, #0
   28630:	0a000004 	beq	28648 <f_write+0x41c>
   28634:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28638:	e3a02001 	mov	r2, #1
   2863c:	e5c32011 	strb	r2, [r3, #17]
   28640:	e3a03001 	mov	r3, #1
   28644:	ea000036 	b	28724 <f_write+0x4f8>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   28648:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   2864c:	e2832030 	add	r2, r3, #48	; 0x30
   28650:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28654:	e5933014 	ldr	r3, [r3, #20]
   28658:	e1a03b83 	lsl	r3, r3, #23
   2865c:	e1a03ba3 	lsr	r3, r3, #23
   28660:	e0823003 	add	r3, r2, r3
   28664:	e51b2010 	ldr	r2, [fp, #-16]
   28668:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   2866c:	e1a00003 	mov	r0, r3
   28670:	eb000b33 	bl	2b344 <memcpy>
		fs->wflag = 1;
   28674:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28678:	e3a02001 	mov	r2, #1
   2867c:	e5c32004 	strb	r2, [r3, #4]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
   28680:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
   28684:	e51b3010 	ldr	r3, [fp, #-16]
   28688:	e0423003 	sub	r3, r2, r3
   2868c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   28690:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   28694:	e5932000 	ldr	r2, [r3]
   28698:	e51b3010 	ldr	r3, [fp, #-16]
   2869c:	e0822003 	add	r2, r2, r3
   286a0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   286a4:	e5832000 	str	r2, [r3]
   286a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   286ac:	e51b3010 	ldr	r3, [fp, #-16]
   286b0:	e0823003 	add	r3, r2, r3
   286b4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   286b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   286bc:	e5932014 	ldr	r2, [r3, #20]
   286c0:	e51b3010 	ldr	r3, [fp, #-16]
   286c4:	e0822003 	add	r2, r2, r3
   286c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   286cc:	e5832014 	str	r2, [r3, #20]
   286d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   286d4:	e593200c 	ldr	r2, [r3, #12]
   286d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   286dc:	e5933014 	ldr	r3, [r3, #20]
   286e0:	e1520003 	cmp	r2, r3
   286e4:	21a02002 	movcs	r2, r2
   286e8:	31a02003 	movcc	r2, r3
   286ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   286f0:	e583200c 	str	r2, [r3, #12]
   286f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   286f8:	e3530000 	cmp	r3, #0
   286fc:	1afffefc 	bne	282f4 <f_write+0xc8>
   28700:	ea000000 	b	28708 <f_write+0x4dc>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   28704:	e320f000 	nop	{0}
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   28708:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2870c:	e5d33010 	ldrb	r3, [r3, #16]
   28710:	e3833040 	orr	r3, r3, #64	; 0x40
   28714:	e6ef2073 	uxtb	r2, r3
   28718:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2871c:	e5c32010 	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
   28720:	e3a03000 	mov	r3, #0
}
   28724:	e1a00003 	mov	r0, r3
   28728:	e24bd004 	sub	sp, fp, #4
   2872c:	e8bd8800 	pop	{fp, pc}

00028730 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
   28730:	e92d4800 	push	{fp, lr}
   28734:	e28db004 	add	fp, sp, #4
   28738:	e24dd018 	sub	sp, sp, #24
   2873c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   28740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28744:	e24b2014 	sub	r2, fp, #20
   28748:	e1a01002 	mov	r1, r2
   2874c:	e1a00003 	mov	r0, r3
   28750:	ebfffc1b 	bl	277c4 <validate>
   28754:	e1a03000 	mov	r3, r0
   28758:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   2875c:	e55b3005 	ldrb	r3, [fp, #-5]
   28760:	e3530000 	cmp	r3, #0
   28764:	1a000042 	bne	28874 <f_sync+0x144>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
   28768:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2876c:	e5d33010 	ldrb	r3, [r3, #16]
   28770:	e2033040 	and	r3, r3, #64	; 0x40
   28774:	e3530000 	cmp	r3, #0
   28778:	0a00003d 	beq	28874 <f_sync+0x144>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
   2877c:	e59f3100 	ldr	r3, [pc, #256]	; 28884 <f_sync+0x154>
   28780:	e50b300c 	str	r3, [fp, #-12]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
   28784:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28788:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2878c:	e5933020 	ldr	r3, [r3, #32]
   28790:	e1a01003 	mov	r1, r3
   28794:	e1a00002 	mov	r0, r2
   28798:	ebfff1ba 	bl	24e88 <move_window>
   2879c:	e1a03000 	mov	r3, r0
   287a0:	e54b3005 	strb	r3, [fp, #-5]
				if (res == FR_OK) {
   287a4:	e55b3005 	ldrb	r3, [fp, #-5]
   287a8:	e3530000 	cmp	r3, #0
   287ac:	1a000030 	bne	28874 <f_sync+0x144>
					dir = fp->dir_ptr;
   287b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   287b4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
   287b8:	e50b3010 	str	r3, [fp, #-16]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   287bc:	e51b3010 	ldr	r3, [fp, #-16]
   287c0:	e283300b 	add	r3, r3, #11
   287c4:	e5d32000 	ldrb	r2, [r3]
   287c8:	e51b3010 	ldr	r3, [fp, #-16]
   287cc:	e283300b 	add	r3, r3, #11
   287d0:	e3822020 	orr	r2, r2, #32
   287d4:	e6ef2072 	uxtb	r2, r2
   287d8:	e5c32000 	strb	r2, [r3]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   287dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   287e0:	e5930000 	ldr	r0, [r3]
   287e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   287e8:	e5933008 	ldr	r3, [r3, #8]
   287ec:	e1a02003 	mov	r2, r3
   287f0:	e51b1010 	ldr	r1, [fp, #-16]
   287f4:	ebfff678 	bl	261dc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
   287f8:	e51b3010 	ldr	r3, [fp, #-16]
   287fc:	e283201c 	add	r2, r3, #28
   28800:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28804:	e593300c 	ldr	r3, [r3, #12]
   28808:	e1a01003 	mov	r1, r3
   2880c:	e1a00002 	mov	r0, r2
   28810:	ebfff11d 	bl	24c8c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
   28814:	e51b3010 	ldr	r3, [fp, #-16]
   28818:	e2833016 	add	r3, r3, #22
   2881c:	e51b100c 	ldr	r1, [fp, #-12]
   28820:	e1a00003 	mov	r0, r3
   28824:	ebfff118 	bl	24c8c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
   28828:	e51b3010 	ldr	r3, [fp, #-16]
   2882c:	e2833012 	add	r3, r3, #18
   28830:	e3a01000 	mov	r1, #0
   28834:	e1a00003 	mov	r0, r3
   28838:	ebfff0fa 	bl	24c28 <st_word>
					fs->wflag = 1;
   2883c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28840:	e3a02001 	mov	r2, #1
   28844:	e5c32004 	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
   28848:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2884c:	e1a00003 	mov	r0, r3
   28850:	ebfff1b4 	bl	24f28 <sync_fs>
   28854:	e1a03000 	mov	r3, r0
   28858:	e54b3005 	strb	r3, [fp, #-5]
					fp->flag &= (BYTE)~FA_MODIFIED;
   2885c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28860:	e5d33010 	ldrb	r3, [r3, #16]
   28864:	e3c33040 	bic	r3, r3, #64	; 0x40
   28868:	e6ef2073 	uxtb	r2, r3
   2886c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28870:	e5c32010 	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
   28874:	e55b3005 	ldrb	r3, [fp, #-5]
}
   28878:	e1a00003 	mov	r0, r3
   2887c:	e24bd004 	sub	sp, fp, #4
   28880:	e8bd8800 	pop	{fp, pc}
   28884:	59610000 	stmdbpl	r1!, {}^	; <UNPREDICTABLE>

00028888 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
   28888:	e92d4800 	push	{fp, lr}
   2888c:	e28db004 	add	fp, sp, #4
   28890:	e24dd010 	sub	sp, sp, #16
   28894:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
   28898:	e51b0010 	ldr	r0, [fp, #-16]
   2889c:	ebffffa3 	bl	28730 <f_sync>
   288a0:	e1a03000 	mov	r3, r0
   288a4:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK)
   288a8:	e55b3005 	ldrb	r3, [fp, #-5]
   288ac:	e3530000 	cmp	r3, #0
   288b0:	1a00000c 	bne	288e8 <f_close+0x60>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
   288b4:	e51b3010 	ldr	r3, [fp, #-16]
   288b8:	e24b200c 	sub	r2, fp, #12
   288bc:	e1a01002 	mov	r1, r2
   288c0:	e1a00003 	mov	r0, r3
   288c4:	ebfffbbe 	bl	277c4 <validate>
   288c8:	e1a03000 	mov	r3, r0
   288cc:	e54b3005 	strb	r3, [fp, #-5]
		if (res == FR_OK) {
   288d0:	e55b3005 	ldrb	r3, [fp, #-5]
   288d4:	e3530000 	cmp	r3, #0
   288d8:	1a000002 	bne	288e8 <f_close+0x60>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
   288dc:	e51b3010 	ldr	r3, [fp, #-16]
   288e0:	e3a02000 	mov	r2, #0
   288e4:	e5832000 	str	r2, [r3]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
   288e8:	e55b3005 	ldrb	r3, [fp, #-5]
}
   288ec:	e1a00003 	mov	r0, r3
   288f0:	e24bd004 	sub	sp, fp, #4
   288f4:	e8bd8800 	pop	{fp, pc}

000288f8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
   288f8:	e92d4810 	push	{r4, fp, lr}
   288fc:	e28db008 	add	fp, sp, #8
   28900:	e24dd024 	sub	sp, sp, #36	; 0x24
   28904:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
   28908:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
	DWORD cl, pcl, ncl, tcl, tlen, ulen;
	DWORD *tbl;
	LBA_t dsc;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
   2890c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28910:	e24b2024 	sub	r2, fp, #36	; 0x24
   28914:	e1a01002 	mov	r1, r2
   28918:	e1a00003 	mov	r0, r3
   2891c:	ebfffba8 	bl	277c4 <validate>
   28920:	e1a03000 	mov	r3, r0
   28924:	e54b300d 	strb	r3, [fp, #-13]
	if (res == FR_OK) res = (FRESULT)fp->err;
   28928:	e55b300d 	ldrb	r3, [fp, #-13]
   2892c:	e3530000 	cmp	r3, #0
   28930:	1a000002 	bne	28940 <f_lseek+0x48>
   28934:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28938:	e5d33011 	ldrb	r3, [r3, #17]
   2893c:	e54b300d 	strb	r3, [fp, #-13]
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
   28940:	e55b300d 	ldrb	r3, [fp, #-13]
   28944:	e3530000 	cmp	r3, #0
   28948:	0a000001 	beq	28954 <f_lseek+0x5c>
   2894c:	e55b300d 	ldrb	r3, [fp, #-13]
   28950:	ea0000d9 	b	28cbc <f_lseek+0x3c4>
	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
   28954:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28958:	e593300c 	ldr	r3, [r3, #12]
   2895c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   28960:	e1520003 	cmp	r2, r3
   28964:	9a000007 	bls	28988 <f_lseek+0x90>
   28968:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2896c:	e5d33010 	ldrb	r3, [r3, #16]
   28970:	e2033002 	and	r3, r3, #2
   28974:	e3530000 	cmp	r3, #0
   28978:	1a000002 	bne	28988 <f_lseek+0x90>
			ofs = fp->obj.objsize;
   2897c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28980:	e593300c 	ldr	r3, [r3, #12]
   28984:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
		}
		ifptr = fp->fptr;
   28988:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2898c:	e5933014 	ldr	r3, [r3, #20]
   28990:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		fp->fptr = nsect = 0;
   28994:	e3a03000 	mov	r3, #0
   28998:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2899c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   289a0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   289a4:	e5832014 	str	r2, [r3, #20]
		if (ofs > 0) {
   289a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   289ac:	e3530000 	cmp	r3, #0
   289b0:	0a0000a2 	beq	28c40 <f_lseek+0x348>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
   289b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   289b8:	e1d330ba 	ldrh	r3, [r3, #10]
   289bc:	e1a03483 	lsl	r3, r3, #9
   289c0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			if (ifptr > 0 &&
   289c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   289c8:	e3530000 	cmp	r3, #0
   289cc:	0a00001e 	beq	28a4c <f_lseek+0x154>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
   289d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   289d4:	e2433001 	sub	r3, r3, #1
   289d8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   289dc:	e1a00003 	mov	r0, r3
   289e0:	eb0009e6 	bl	2b180 <__udivsi3>
   289e4:	e1a03000 	mov	r3, r0
   289e8:	e1a04003 	mov	r4, r3
   289ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   289f0:	e2433001 	sub	r3, r3, #1
   289f4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
   289f8:	e1a00003 	mov	r0, r3
   289fc:	eb0009df 	bl	2b180 <__udivsi3>
   28a00:	e1a03000 	mov	r3, r0
			if (ifptr > 0 &&
   28a04:	e1540003 	cmp	r4, r3
   28a08:	3a00000f 	bcc	28a4c <f_lseek+0x154>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
   28a0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   28a10:	e2432001 	sub	r2, r3, #1
   28a14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28a18:	e2633000 	rsb	r3, r3, #0
   28a1c:	e0022003 	and	r2, r2, r3
   28a20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28a24:	e5832014 	str	r2, [r3, #20]
				ofs -= fp->fptr;
   28a28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28a2c:	e5933014 	ldr	r3, [r3, #20]
   28a30:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   28a34:	e0423003 	sub	r3, r2, r3
   28a38:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
				clst = fp->clust;
   28a3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28a40:	e5933018 	ldr	r3, [r3, #24]
   28a44:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   28a48:	ea000020 	b	28ad0 <f_lseek+0x1d8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
   28a4c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28a50:	e5933008 	ldr	r3, [r3, #8]
   28a54:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   28a58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28a5c:	e3530000 	cmp	r3, #0
   28a60:	1a000017 	bne	28ac4 <f_lseek+0x1cc>
					clst = create_chain(&fp->obj, 0);
   28a64:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28a68:	e3a01000 	mov	r1, #0
   28a6c:	e1a00003 	mov	r0, r3
   28a70:	ebfff36f 	bl	25834 <create_chain>
   28a74:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
					if (clst == 1) ABORT(fs, FR_INT_ERR);
   28a78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28a7c:	e3530001 	cmp	r3, #1
   28a80:	1a000004 	bne	28a98 <f_lseek+0x1a0>
   28a84:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28a88:	e3a02002 	mov	r2, #2
   28a8c:	e5c32011 	strb	r2, [r3, #17]
   28a90:	e3a03002 	mov	r3, #2
   28a94:	ea000088 	b	28cbc <f_lseek+0x3c4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   28a98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28a9c:	e3730001 	cmn	r3, #1
   28aa0:	1a000004 	bne	28ab8 <f_lseek+0x1c0>
   28aa4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28aa8:	e3a02001 	mov	r2, #1
   28aac:	e5c32011 	strb	r2, [r3, #17]
   28ab0:	e3a03001 	mov	r3, #1
   28ab4:	ea000080 	b	28cbc <f_lseek+0x3c4>
					fp->obj.sclust = clst;
   28ab8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28abc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28ac0:	e5832008 	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
   28ac4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28ac8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28acc:	e5832018 	str	r2, [r3, #24]
			}
			if (clst != 0) {
   28ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28ad4:	e3530000 	cmp	r3, #0
   28ad8:	0a000058 	beq	28c40 <f_lseek+0x348>
				while (ofs > bcs) {						/* Cluster following loop */
   28adc:	ea000036 	b	28bbc <f_lseek+0x2c4>
					ofs -= bcs; fp->fptr += bcs;
   28ae0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   28ae4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28ae8:	e0423003 	sub	r3, r2, r3
   28aec:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   28af0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28af4:	e5932014 	ldr	r2, [r3, #20]
   28af8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28afc:	e0822003 	add	r2, r2, r3
   28b00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28b04:	e5832014 	str	r2, [r3, #20]
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   28b08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28b0c:	e5d33010 	ldrb	r3, [r3, #16]
   28b10:	e2033002 	and	r3, r3, #2
   28b14:	e3530000 	cmp	r3, #0
   28b18:	0a00000a 	beq	28b48 <f_lseek+0x250>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
   28b1c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28b20:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28b24:	e1a00003 	mov	r0, r3
   28b28:	ebfff341 	bl	25834 <create_chain>
   28b2c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
						if (clst == 0) {				/* Clip file size in case of disk full */
   28b30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28b34:	e3530000 	cmp	r3, #0
   28b38:	1a000007 	bne	28b5c <f_lseek+0x264>
							ofs = 0; break;
   28b3c:	e3a03000 	mov	r3, #0
   28b40:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
   28b44:	ea000020 	b	28bcc <f_lseek+0x2d4>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
   28b48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28b4c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28b50:	e1a00003 	mov	r0, r3
   28b54:	ebfff16c 	bl	2510c <get_fat>
   28b58:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   28b5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28b60:	e3730001 	cmn	r3, #1
   28b64:	1a000004 	bne	28b7c <f_lseek+0x284>
   28b68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28b6c:	e3a02001 	mov	r2, #1
   28b70:	e5c32011 	strb	r2, [r3, #17]
   28b74:	e3a03001 	mov	r3, #1
   28b78:	ea00004f 	b	28cbc <f_lseek+0x3c4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
   28b7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28b80:	e3530001 	cmp	r3, #1
   28b84:	9a000004 	bls	28b9c <f_lseek+0x2a4>
   28b88:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28b8c:	e5933014 	ldr	r3, [r3, #20]
   28b90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28b94:	e1520003 	cmp	r2, r3
   28b98:	3a000004 	bcc	28bb0 <f_lseek+0x2b8>
   28b9c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28ba0:	e3a02002 	mov	r2, #2
   28ba4:	e5c32011 	strb	r2, [r3, #17]
   28ba8:	e3a03002 	mov	r3, #2
   28bac:	ea000042 	b	28cbc <f_lseek+0x3c4>
					fp->clust = clst;
   28bb0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28bb4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   28bb8:	e5832018 	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
   28bbc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   28bc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   28bc4:	e1520003 	cmp	r2, r3
   28bc8:	8affffc4 	bhi	28ae0 <f_lseek+0x1e8>
				}
				fp->fptr += ofs;
   28bcc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28bd0:	e5932014 	ldr	r2, [r3, #20]
   28bd4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28bd8:	e0822003 	add	r2, r2, r3
   28bdc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28be0:	e5832014 	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
   28be4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28be8:	e1a03b83 	lsl	r3, r3, #23
   28bec:	e1a03ba3 	lsr	r3, r3, #23
   28bf0:	e3530000 	cmp	r3, #0
   28bf4:	0a000011 	beq	28c40 <f_lseek+0x348>
					nsect = clst2sect(fs, clst);	/* Current sector */
   28bf8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   28bfc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28c00:	e1a00003 	mov	r0, r3
   28c04:	ebfff124 	bl	2509c <clst2sect>
   28c08:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
   28c0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   28c10:	e3530000 	cmp	r3, #0
   28c14:	1a000004 	bne	28c2c <f_lseek+0x334>
   28c18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c1c:	e3a02002 	mov	r2, #2
   28c20:	e5c32011 	strb	r2, [r3, #17]
   28c24:	e3a03002 	mov	r3, #2
   28c28:	ea000023 	b	28cbc <f_lseek+0x3c4>
					nsect += (DWORD)(ofs / SS(fs));
   28c2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   28c30:	e1a034a3 	lsr	r3, r3, #9
   28c34:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28c38:	e0823003 	add	r3, r2, r3
   28c3c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
   28c40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c44:	e5932014 	ldr	r2, [r3, #20]
   28c48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c4c:	e593300c 	ldr	r3, [r3, #12]
   28c50:	e1520003 	cmp	r2, r3
   28c54:	9a000009 	bls	28c80 <f_lseek+0x388>
			fp->obj.objsize = fp->fptr;
   28c58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c5c:	e5932014 	ldr	r2, [r3, #20]
   28c60:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c64:	e583200c 	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
   28c68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c6c:	e5d33010 	ldrb	r3, [r3, #16]
   28c70:	e3833040 	orr	r3, r3, #64	; 0x40
   28c74:	e6ef2073 	uxtb	r2, r3
   28c78:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c7c:	e5c32010 	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
   28c80:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c84:	e5933014 	ldr	r3, [r3, #20]
   28c88:	e1a03b83 	lsl	r3, r3, #23
   28c8c:	e1a03ba3 	lsr	r3, r3, #23
   28c90:	e3530000 	cmp	r3, #0
   28c94:	0a000007 	beq	28cb8 <f_lseek+0x3c0>
   28c98:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28c9c:	e593301c 	ldr	r3, [r3, #28]
   28ca0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28ca4:	e1520003 	cmp	r2, r3
   28ca8:	0a000002 	beq	28cb8 <f_lseek+0x3c0>
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
#endif
			fp->sect = nsect;
   28cac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   28cb0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   28cb4:	e583201c 	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
   28cb8:	e55b300d 	ldrb	r3, [fp, #-13]
}
   28cbc:	e1a00003 	mov	r0, r3
   28cc0:	e24bd008 	sub	sp, fp, #8
   28cc4:	e8bd8810 	pop	{r4, fp, pc}

00028cc8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
   28cc8:	e92d4800 	push	{fp, lr}
   28ccc:	e28db004 	add	fp, sp, #4
   28cd0:	e24dd010 	sub	sp, sp, #16
   28cd4:	e50b0010 	str	r0, [fp, #-16]
   28cd8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
   28cdc:	e51b3010 	ldr	r3, [fp, #-16]
   28ce0:	e3530000 	cmp	r3, #0
   28ce4:	1a000001 	bne	28cf0 <f_opendir+0x28>
   28ce8:	e3a03009 	mov	r3, #9
   28cec:	ea000043 	b	28e00 <f_opendir+0x138>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
   28cf0:	e24b100c 	sub	r1, fp, #12
   28cf4:	e24b3014 	sub	r3, fp, #20
   28cf8:	e3a02000 	mov	r2, #0
   28cfc:	e1a00003 	mov	r0, r3
   28d00:	ebfff8e7 	bl	270a4 <mount_volume>
   28d04:	e1a03000 	mov	r3, r0
   28d08:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   28d0c:	e55b3005 	ldrb	r3, [fp, #-5]
   28d10:	e3530000 	cmp	r3, #0
   28d14:	1a000032 	bne	28de4 <f_opendir+0x11c>
		dp->obj.fs = fs;
   28d18:	e51b200c 	ldr	r2, [fp, #-12]
   28d1c:	e51b3010 	ldr	r3, [fp, #-16]
   28d20:	e5832000 	str	r2, [r3]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
   28d24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28d28:	e1a01003 	mov	r1, r3
   28d2c:	e51b0010 	ldr	r0, [fp, #-16]
   28d30:	ebfff751 	bl	26a7c <follow_path>
   28d34:	e1a03000 	mov	r3, r0
   28d38:	e54b3005 	strb	r3, [fp, #-5]
		if (res == FR_OK) {						/* Follow completed */
   28d3c:	e55b3005 	ldrb	r3, [fp, #-5]
   28d40:	e3530000 	cmp	r3, #0
   28d44:	1a000021 	bne	28dd0 <f_opendir+0x108>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
   28d48:	e51b3010 	ldr	r3, [fp, #-16]
   28d4c:	e5d3302b 	ldrb	r3, [r3, #43]	; 0x2b
   28d50:	e6af3073 	sxtb	r3, r3
   28d54:	e3530000 	cmp	r3, #0
   28d58:	ba000010 	blt	28da0 <f_opendir+0xd8>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
   28d5c:	e51b3010 	ldr	r3, [fp, #-16]
   28d60:	e5d33006 	ldrb	r3, [r3, #6]
   28d64:	e2033010 	and	r3, r3, #16
   28d68:	e3530000 	cmp	r3, #0
   28d6c:	0a000009 	beq	28d98 <f_opendir+0xd0>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
   28d70:	e51b200c 	ldr	r2, [fp, #-12]
   28d74:	e51b3010 	ldr	r3, [fp, #-16]
   28d78:	e593301c 	ldr	r3, [r3, #28]
   28d7c:	e1a01003 	mov	r1, r3
   28d80:	e1a00002 	mov	r0, r2
   28d84:	ebfff4f8 	bl	2616c <ld_clust>
   28d88:	e1a02000 	mov	r2, r0
   28d8c:	e51b3010 	ldr	r3, [fp, #-16]
   28d90:	e5832008 	str	r2, [r3, #8]
   28d94:	ea000001 	b	28da0 <f_opendir+0xd8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
   28d98:	e3a03005 	mov	r3, #5
   28d9c:	e54b3005 	strb	r3, [fp, #-5]
				}
			}
			if (res == FR_OK) {
   28da0:	e55b3005 	ldrb	r3, [fp, #-5]
   28da4:	e3530000 	cmp	r3, #0
   28da8:	1a000008 	bne	28dd0 <f_opendir+0x108>
				dp->obj.id = fs->id;
   28dac:	e51b300c 	ldr	r3, [fp, #-12]
   28db0:	e1d320b6 	ldrh	r2, [r3, #6]
   28db4:	e51b3010 	ldr	r3, [fp, #-16]
   28db8:	e1c320b4 	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
   28dbc:	e3a01000 	mov	r1, #0
   28dc0:	e51b0010 	ldr	r0, [fp, #-16]
   28dc4:	ebfff3a4 	bl	25c5c <dir_sdi>
   28dc8:	e1a03000 	mov	r3, r0
   28dcc:	e54b3005 	strb	r3, [fp, #-5]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   28dd0:	e55b3005 	ldrb	r3, [fp, #-5]
   28dd4:	e3530004 	cmp	r3, #4
   28dd8:	1a000001 	bne	28de4 <f_opendir+0x11c>
   28ddc:	e3a03005 	mov	r3, #5
   28de0:	e54b3005 	strb	r3, [fp, #-5]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
   28de4:	e55b3005 	ldrb	r3, [fp, #-5]
   28de8:	e3530000 	cmp	r3, #0
   28dec:	0a000002 	beq	28dfc <f_opendir+0x134>
   28df0:	e51b3010 	ldr	r3, [fp, #-16]
   28df4:	e3a02000 	mov	r2, #0
   28df8:	e5832000 	str	r2, [r3]

	LEAVE_FF(fs, res);
   28dfc:	e55b3005 	ldrb	r3, [fp, #-5]
}
   28e00:	e1a00003 	mov	r0, r3
   28e04:	e24bd004 	sub	sp, fp, #4
   28e08:	e8bd8800 	pop	{fp, pc}

00028e0c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
   28e0c:	e92d4800 	push	{fp, lr}
   28e10:	e28db004 	add	fp, sp, #4
   28e14:	e24dd010 	sub	sp, sp, #16
   28e18:	e50b0010 	str	r0, [fp, #-16]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
   28e1c:	e51b3010 	ldr	r3, [fp, #-16]
   28e20:	e24b200c 	sub	r2, fp, #12
   28e24:	e1a01002 	mov	r1, r2
   28e28:	e1a00003 	mov	r0, r3
   28e2c:	ebfffa64 	bl	277c4 <validate>
   28e30:	e1a03000 	mov	r3, r0
   28e34:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   28e38:	e55b3005 	ldrb	r3, [fp, #-5]
   28e3c:	e3530000 	cmp	r3, #0
   28e40:	1a000002 	bne	28e50 <f_closedir+0x44>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
   28e44:	e51b3010 	ldr	r3, [fp, #-16]
   28e48:	e3a02000 	mov	r2, #0
   28e4c:	e5832000 	str	r2, [r3]
#endif
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
#endif
	}
	return res;
   28e50:	e55b3005 	ldrb	r3, [fp, #-5]
}
   28e54:	e1a00003 	mov	r0, r3
   28e58:	e24bd004 	sub	sp, fp, #4
   28e5c:	e8bd8800 	pop	{fp, pc}

00028e60 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
   28e60:	e92d4800 	push	{fp, lr}
   28e64:	e28db004 	add	fp, sp, #4
   28e68:	e24dd010 	sub	sp, sp, #16
   28e6c:	e50b0010 	str	r0, [fp, #-16]
   28e70:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
   28e74:	e51b3010 	ldr	r3, [fp, #-16]
   28e78:	e24b200c 	sub	r2, fp, #12
   28e7c:	e1a01002 	mov	r1, r2
   28e80:	e1a00003 	mov	r0, r3
   28e84:	ebfffa4e 	bl	277c4 <validate>
   28e88:	e1a03000 	mov	r3, r0
   28e8c:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   28e90:	e55b3005 	ldrb	r3, [fp, #-5]
   28e94:	e3530000 	cmp	r3, #0
   28e98:	1a000022 	bne	28f28 <f_readdir+0xc8>
		if (!fno) {
   28e9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   28ea0:	e3530000 	cmp	r3, #0
   28ea4:	1a000005 	bne	28ec0 <f_readdir+0x60>
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
   28ea8:	e3a01000 	mov	r1, #0
   28eac:	e51b0010 	ldr	r0, [fp, #-16]
   28eb0:	ebfff369 	bl	25c5c <dir_sdi>
   28eb4:	e1a03000 	mov	r3, r0
   28eb8:	e54b3005 	strb	r3, [fp, #-5]
   28ebc:	ea000019 	b	28f28 <f_readdir+0xc8>
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
   28ec0:	e3a01000 	mov	r1, #0
   28ec4:	e51b0010 	ldr	r0, [fp, #-16]
   28ec8:	ebfff4df 	bl	2624c <dir_read>
   28ecc:	e1a03000 	mov	r3, r0
   28ed0:	e54b3005 	strb	r3, [fp, #-5]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
   28ed4:	e55b3005 	ldrb	r3, [fp, #-5]
   28ed8:	e3530004 	cmp	r3, #4
   28edc:	1a000001 	bne	28ee8 <f_readdir+0x88>
   28ee0:	e3a03000 	mov	r3, #0
   28ee4:	e54b3005 	strb	r3, [fp, #-5]
			if (res == FR_OK) {				/* A valid entry is found */
   28ee8:	e55b3005 	ldrb	r3, [fp, #-5]
   28eec:	e3530000 	cmp	r3, #0
   28ef0:	1a00000c 	bne	28f28 <f_readdir+0xc8>
				get_fileinfo(dp, fno);		/* Get the object information */
   28ef4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   28ef8:	e51b0010 	ldr	r0, [fp, #-16]
   28efc:	ebfff5c0 	bl	26604 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
   28f00:	e3a01000 	mov	r1, #0
   28f04:	e51b0010 	ldr	r0, [fp, #-16]
   28f08:	ebfff3c7 	bl	25e2c <dir_next>
   28f0c:	e1a03000 	mov	r3, r0
   28f10:	e54b3005 	strb	r3, [fp, #-5]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
   28f14:	e55b3005 	ldrb	r3, [fp, #-5]
   28f18:	e3530004 	cmp	r3, #4
   28f1c:	1a000001 	bne	28f28 <f_readdir+0xc8>
   28f20:	e3a03000 	mov	r3, #0
   28f24:	e54b3005 	strb	r3, [fp, #-5]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
   28f28:	e55b3005 	ldrb	r3, [fp, #-5]
}
   28f2c:	e1a00003 	mov	r0, r3
   28f30:	e24bd004 	sub	sp, fp, #4
   28f34:	e8bd8800 	pop	{fp, pc}

00028f38 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
   28f38:	e92d4800 	push	{fp, lr}
   28f3c:	e28db004 	add	fp, sp, #4
   28f40:	e24dd038 	sub	sp, sp, #56	; 0x38
   28f44:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   28f48:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
   28f4c:	e24b1034 	sub	r1, fp, #52	; 0x34
   28f50:	e24b3038 	sub	r3, fp, #56	; 0x38
   28f54:	e3a02000 	mov	r2, #0
   28f58:	e1a00003 	mov	r0, r3
   28f5c:	ebfff850 	bl	270a4 <mount_volume>
   28f60:	e1a03000 	mov	r3, r0
   28f64:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   28f68:	e55b3005 	ldrb	r3, [fp, #-5]
   28f6c:	e3530000 	cmp	r3, #0
   28f70:	1a000017 	bne	28fd4 <f_stat+0x9c>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
   28f74:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
   28f78:	e24b3034 	sub	r3, fp, #52	; 0x34
   28f7c:	e1a01002 	mov	r1, r2
   28f80:	e1a00003 	mov	r0, r3
   28f84:	ebfff6bc 	bl	26a7c <follow_path>
   28f88:	e1a03000 	mov	r3, r0
   28f8c:	e54b3005 	strb	r3, [fp, #-5]
		if (res == FR_OK) {				/* Follow completed */
   28f90:	e55b3005 	ldrb	r3, [fp, #-5]
   28f94:	e3530000 	cmp	r3, #0
   28f98:	1a00000d 	bne	28fd4 <f_stat+0x9c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
   28f9c:	e55b3009 	ldrb	r3, [fp, #-9]
   28fa0:	e6af3073 	sxtb	r3, r3
   28fa4:	e3530000 	cmp	r3, #0
   28fa8:	aa000002 	bge	28fb8 <f_stat+0x80>
				res = FR_INVALID_NAME;
   28fac:	e3a03006 	mov	r3, #6
   28fb0:	e54b3005 	strb	r3, [fp, #-5]
   28fb4:	ea000006 	b	28fd4 <f_stat+0x9c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
   28fb8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   28fbc:	e3530000 	cmp	r3, #0
   28fc0:	0a000003 	beq	28fd4 <f_stat+0x9c>
   28fc4:	e24b3034 	sub	r3, fp, #52	; 0x34
   28fc8:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
   28fcc:	e1a00003 	mov	r0, r3
   28fd0:	ebfff58b 	bl	26604 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
   28fd4:	e55b3005 	ldrb	r3, [fp, #-5]
}
   28fd8:	e1a00003 	mov	r0, r3
   28fdc:	e24bd004 	sub	sp, fp, #4
   28fe0:	e8bd8800 	pop	{fp, pc}

00028fe4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to a pointer to return corresponding filesystem object */
)
{
   28fe4:	e92d4800 	push	{fp, lr}
   28fe8:	e28db004 	add	fp, sp, #4
   28fec:	e24dd040 	sub	sp, sp, #64	; 0x40
   28ff0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
   28ff4:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
   28ff8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
	UINT i;
	FFOBJID obj;


	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
   28ffc:	e24b1020 	sub	r1, fp, #32
   29000:	e24b3038 	sub	r3, fp, #56	; 0x38
   29004:	e3a02000 	mov	r2, #0
   29008:	e1a00003 	mov	r0, r3
   2900c:	ebfff824 	bl	270a4 <mount_volume>
   29010:	e1a03000 	mov	r3, r0
   29014:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   29018:	e55b3005 	ldrb	r3, [fp, #-5]
   2901c:	e3530000 	cmp	r3, #0
   29020:	1a00008d 	bne	2925c <f_getfree+0x278>
		*fatfs = fs;				/* Return ptr to the fs object */
   29024:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   29028:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2902c:	e5832000 	str	r2, [r3]
		/* If free_clst is valid, return it without full FAT scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
   29030:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29034:	e5932010 	ldr	r2, [r3, #16]
   29038:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2903c:	e5933014 	ldr	r3, [r3, #20]
   29040:	e2433002 	sub	r3, r3, #2
   29044:	e1520003 	cmp	r2, r3
   29048:	8a000004 	bhi	29060 <f_getfree+0x7c>
			*nclst = fs->free_clst;
   2904c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29050:	e5932010 	ldr	r2, [r3, #16]
   29054:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   29058:	e5832000 	str	r2, [r3]
   2905c:	ea00007e 	b	2925c <f_getfree+0x278>
		} else {
			/* Scan FAT to obtain the correct free cluster count */
			nfree = 0;
   29060:	e3a03000 	mov	r3, #0
   29064:	e50b300c 	str	r3, [fp, #-12]
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
   29068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2906c:	e5d33000 	ldrb	r3, [r3]
   29070:	e3530001 	cmp	r3, #1
   29074:	1a000023 	bne	29108 <f_getfree+0x124>
				clst = 2; obj.fs = fs;
   29078:	e3a03002 	mov	r3, #2
   2907c:	e50b3010 	str	r3, [fp, #-16]
   29080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29084:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
				do {
					stat = get_fat(&obj, clst);
   29088:	e24b3030 	sub	r3, fp, #48	; 0x30
   2908c:	e51b1010 	ldr	r1, [fp, #-16]
   29090:	e1a00003 	mov	r0, r3
   29094:	ebfff01c 	bl	2510c <get_fat>
   29098:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
					if (stat == 0xFFFFFFFF) {
   2909c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   290a0:	e3730001 	cmn	r3, #1
   290a4:	1a000002 	bne	290b4 <f_getfree+0xd0>
						res = FR_DISK_ERR; break;
   290a8:	e3a03001 	mov	r3, #1
   290ac:	e54b3005 	strb	r3, [fp, #-5]
   290b0:	ea00005a 	b	29220 <f_getfree+0x23c>
					}
					if (stat == 1) {
   290b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   290b8:	e3530001 	cmp	r3, #1
   290bc:	1a000002 	bne	290cc <f_getfree+0xe8>
						res = FR_INT_ERR; break;
   290c0:	e3a03002 	mov	r3, #2
   290c4:	e54b3005 	strb	r3, [fp, #-5]
   290c8:	ea000054 	b	29220 <f_getfree+0x23c>
					}
					if (stat == 0) nfree++;
   290cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   290d0:	e3530000 	cmp	r3, #0
   290d4:	1a000002 	bne	290e4 <f_getfree+0x100>
   290d8:	e51b300c 	ldr	r3, [fp, #-12]
   290dc:	e2833001 	add	r3, r3, #1
   290e0:	e50b300c 	str	r3, [fp, #-12]
				} while (++clst < fs->n_fatent);
   290e4:	e51b3010 	ldr	r3, [fp, #-16]
   290e8:	e2833001 	add	r3, r3, #1
   290ec:	e50b3010 	str	r3, [fp, #-16]
   290f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   290f4:	e5933014 	ldr	r3, [r3, #20]
   290f8:	e51b2010 	ldr	r2, [fp, #-16]
   290fc:	e1520003 	cmp	r2, r3
   29100:	3affffe0 	bcc	29088 <f_getfree+0xa4>
   29104:	ea000045 	b	29220 <f_getfree+0x23c>
						i = (i + 1) % SS(fs);	/* Next byte */
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
					clst = fs->n_fatent;	/* Number of entries */
   29108:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2910c:	e5933014 	ldr	r3, [r3, #20]
   29110:	e50b3010 	str	r3, [fp, #-16]
					sect = fs->fatbase;		/* Top of the FAT */
   29114:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29118:	e5933020 	ldr	r3, [r3, #32]
   2911c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
					i = 0;					/* Offset in the sector */
   29120:	e3a03000 	mov	r3, #0
   29124:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
					do {	/* Counts numbuer of entries with zero in the FAT */
						if (i == 0) {	/* New sector? */
   29128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2912c:	e3530000 	cmp	r3, #0
   29130:	1a00000a 	bne	29160 <f_getfree+0x17c>
							res = move_window(fs, sect++);
   29134:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
   29138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2913c:	e2832001 	add	r2, r3, #1
   29140:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   29144:	e1a01003 	mov	r1, r3
   29148:	ebffef4e 	bl	24e88 <move_window>
   2914c:	e1a03000 	mov	r3, r0
   29150:	e54b3005 	strb	r3, [fp, #-5]
							if (res != FR_OK) break;
   29154:	e55b3005 	ldrb	r3, [fp, #-5]
   29158:	e3530000 	cmp	r3, #0
   2915c:	1a00002e 	bne	2921c <f_getfree+0x238>
						}
						if (fs->fs_type == FS_FAT16) {
   29160:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29164:	e5d33000 	ldrb	r3, [r3]
   29168:	e3530002 	cmp	r3, #2
   2916c:	1a00000f 	bne	291b0 <f_getfree+0x1cc>
							if (ld_word(fs->win + i) == 0) nfree++;	/* FAT16: Is this cluster free? */
   29170:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29174:	e2832030 	add	r2, r3, #48	; 0x30
   29178:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2917c:	e0823003 	add	r3, r2, r3
   29180:	e1a00003 	mov	r0, r3
   29184:	ebffee70 	bl	24b4c <ld_word>
   29188:	e1a03000 	mov	r3, r0
   2918c:	e3530000 	cmp	r3, #0
   29190:	1a000002 	bne	291a0 <f_getfree+0x1bc>
   29194:	e51b300c 	ldr	r3, [fp, #-12]
   29198:	e2833001 	add	r3, r3, #1
   2919c:	e50b300c 	str	r3, [fp, #-12]
							i += 2;	/* Next entry */
   291a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   291a4:	e2833002 	add	r3, r3, #2
   291a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   291ac:	ea00000f 	b	291f0 <f_getfree+0x20c>
						} else {
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;	/* FAT32: Is this cluster free? */
   291b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   291b4:	e2832030 	add	r2, r3, #48	; 0x30
   291b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   291bc:	e0823003 	add	r3, r2, r3
   291c0:	e1a00003 	mov	r0, r3
   291c4:	ebffee76 	bl	24ba4 <ld_dword>
   291c8:	e1a03000 	mov	r3, r0
   291cc:	e3c3320f 	bic	r3, r3, #-268435456	; 0xf0000000
   291d0:	e3530000 	cmp	r3, #0
   291d4:	1a000002 	bne	291e4 <f_getfree+0x200>
   291d8:	e51b300c 	ldr	r3, [fp, #-12]
   291dc:	e2833001 	add	r3, r3, #1
   291e0:	e50b300c 	str	r3, [fp, #-12]
							i += 4;	/* Next entry */
   291e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   291e8:	e2833004 	add	r3, r3, #4
   291ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
						}
						i %= SS(fs);
   291f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   291f4:	e1a03b83 	lsl	r3, r3, #23
   291f8:	e1a03ba3 	lsr	r3, r3, #23
   291fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
					} while (--clst);
   29200:	e51b3010 	ldr	r3, [fp, #-16]
   29204:	e2433001 	sub	r3, r3, #1
   29208:	e50b3010 	str	r3, [fp, #-16]
   2920c:	e51b3010 	ldr	r3, [fp, #-16]
   29210:	e3530000 	cmp	r3, #0
   29214:	1affffc3 	bne	29128 <f_getfree+0x144>
   29218:	ea000000 	b	29220 <f_getfree+0x23c>
							if (res != FR_OK) break;
   2921c:	e320f000 	nop	{0}
				}
			}
			if (res == FR_OK) {		/* Update parameters if succeeded */
   29220:	e55b3005 	ldrb	r3, [fp, #-5]
   29224:	e3530000 	cmp	r3, #0
   29228:	1a00000b 	bne	2925c <f_getfree+0x278>
				*nclst = nfree;			/* Return the free clusters */
   2922c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   29230:	e51b200c 	ldr	r2, [fp, #-12]
   29234:	e5832000 	str	r2, [r3]
				fs->free_clst = nfree;	/* Now free cluster count is valid */
   29238:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2923c:	e51b200c 	ldr	r2, [fp, #-12]
   29240:	e5832010 	str	r2, [r3, #16]
				fs->fsi_flag |= 1;		/* FAT32/exfAT : Allocation information is to be updated */
   29244:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29248:	e5d32005 	ldrb	r2, [r3, #5]
   2924c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   29250:	e3822001 	orr	r2, r2, #1
   29254:	e6ef2072 	uxtb	r2, r2
   29258:	e5c32005 	strb	r2, [r3, #5]
			}
		}
	}

	LEAVE_FF(fs, res);
   2925c:	e55b3005 	ldrb	r3, [fp, #-5]
}
   29260:	e1a00003 	mov	r0, r3
   29264:	e24bd004 	sub	sp, fp, #4
   29268:	e8bd8800 	pop	{fp, pc}

0002926c <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
   2926c:	e92d4800 	push	{fp, lr}
   29270:	e28db004 	add	fp, sp, #4
   29274:	e24dd018 	sub	sp, sp, #24
   29278:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   2927c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29280:	e24b2010 	sub	r2, fp, #16
   29284:	e1a01002 	mov	r1, r2
   29288:	e1a00003 	mov	r0, r3
   2928c:	ebfff94c 	bl	277c4 <validate>
   29290:	e1a03000 	mov	r3, r0
   29294:	e54b3005 	strb	r3, [fp, #-5]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
   29298:	e55b3005 	ldrb	r3, [fp, #-5]
   2929c:	e3530000 	cmp	r3, #0
   292a0:	1a000005 	bne	292bc <f_truncate+0x50>
   292a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   292a8:	e5d33011 	ldrb	r3, [r3, #17]
   292ac:	e54b3005 	strb	r3, [fp, #-5]
   292b0:	e55b3005 	ldrb	r3, [fp, #-5]
   292b4:	e3530000 	cmp	r3, #0
   292b8:	0a000001 	beq	292c4 <f_truncate+0x58>
   292bc:	e55b3005 	ldrb	r3, [fp, #-5]
   292c0:	ea000052 	b	29410 <f_truncate+0x1a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   292c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   292c8:	e5d33010 	ldrb	r3, [r3, #16]
   292cc:	e2033002 	and	r3, r3, #2
   292d0:	e3530000 	cmp	r3, #0
   292d4:	1a000001 	bne	292e0 <f_truncate+0x74>
   292d8:	e3a03007 	mov	r3, #7
   292dc:	ea00004b 	b	29410 <f_truncate+0x1a4>

	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
   292e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   292e4:	e5932014 	ldr	r2, [r3, #20]
   292e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   292ec:	e593300c 	ldr	r3, [r3, #12]
   292f0:	e1520003 	cmp	r2, r3
   292f4:	2a000044 	bcs	2940c <f_truncate+0x1a0>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   292f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   292fc:	e5933014 	ldr	r3, [r3, #20]
   29300:	e3530000 	cmp	r3, #0
   29304:	1a00000b 	bne	29338 <f_truncate+0xcc>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   29308:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2930c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29310:	e5933008 	ldr	r3, [r3, #8]
   29314:	e3a02000 	mov	r2, #0
   29318:	e1a01003 	mov	r1, r3
   2931c:	ebfff0e6 	bl	256bc <remove_chain>
   29320:	e1a03000 	mov	r3, r0
   29324:	e54b3005 	strb	r3, [fp, #-5]
			fp->obj.sclust = 0;
   29328:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2932c:	e3a02000 	mov	r2, #0
   29330:	e5832008 	str	r2, [r3, #8]
   29334:	ea000022 	b	293c4 <f_truncate+0x158>
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
   29338:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
   2933c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29340:	e5933018 	ldr	r3, [r3, #24]
   29344:	e1a01003 	mov	r1, r3
   29348:	e1a00002 	mov	r0, r2
   2934c:	ebffef6e 	bl	2510c <get_fat>
   29350:	e50b000c 	str	r0, [fp, #-12]
			res = FR_OK;
   29354:	e3a03000 	mov	r3, #0
   29358:	e54b3005 	strb	r3, [fp, #-5]
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   2935c:	e51b300c 	ldr	r3, [fp, #-12]
   29360:	e3730001 	cmn	r3, #1
   29364:	1a000001 	bne	29370 <f_truncate+0x104>
   29368:	e3a03001 	mov	r3, #1
   2936c:	e54b3005 	strb	r3, [fp, #-5]
			if (ncl == 1) res = FR_INT_ERR;
   29370:	e51b300c 	ldr	r3, [fp, #-12]
   29374:	e3530001 	cmp	r3, #1
   29378:	1a000001 	bne	29384 <f_truncate+0x118>
   2937c:	e3a03002 	mov	r3, #2
   29380:	e54b3005 	strb	r3, [fp, #-5]
			if (res == FR_OK && ncl < fs->n_fatent) {
   29384:	e55b3005 	ldrb	r3, [fp, #-5]
   29388:	e3530000 	cmp	r3, #0
   2938c:	1a00000c 	bne	293c4 <f_truncate+0x158>
   29390:	e51b3010 	ldr	r3, [fp, #-16]
   29394:	e5933014 	ldr	r3, [r3, #20]
   29398:	e51b200c 	ldr	r2, [fp, #-12]
   2939c:	e1520003 	cmp	r2, r3
   293a0:	2a000007 	bcs	293c4 <f_truncate+0x158>
				res = remove_chain(&fp->obj, ncl, fp->clust);
   293a4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   293a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   293ac:	e5933018 	ldr	r3, [r3, #24]
   293b0:	e1a02003 	mov	r2, r3
   293b4:	e51b100c 	ldr	r1, [fp, #-12]
   293b8:	ebfff0bf 	bl	256bc <remove_chain>
   293bc:	e1a03000 	mov	r3, r0
   293c0:	e54b3005 	strb	r3, [fp, #-5]
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
   293c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   293c8:	e5932014 	ldr	r2, [r3, #20]
   293cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   293d0:	e583200c 	str	r2, [r3, #12]
		fp->flag |= FA_MODIFIED;
   293d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   293d8:	e5d33010 	ldrb	r3, [r3, #16]
   293dc:	e3833040 	orr	r3, r3, #64	; 0x40
   293e0:	e6ef2073 	uxtb	r2, r3
   293e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   293e8:	e5c32010 	strb	r2, [r3, #16]
			} else {
				fp->flag &= (BYTE)~FA_DIRTY;
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
   293ec:	e55b3005 	ldrb	r3, [fp, #-5]
   293f0:	e3530000 	cmp	r3, #0
   293f4:	0a000004 	beq	2940c <f_truncate+0x1a0>
   293f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   293fc:	e55b2005 	ldrb	r2, [fp, #-5]
   29400:	e5c32011 	strb	r2, [r3, #17]
   29404:	e55b3005 	ldrb	r3, [fp, #-5]
   29408:	ea000000 	b	29410 <f_truncate+0x1a4>
	}

	LEAVE_FF(fs, res);
   2940c:	e55b3005 	ldrb	r3, [fp, #-5]
}
   29410:	e1a00003 	mov	r0, r3
   29414:	e24bd004 	sub	sp, fp, #4
   29418:	e8bd8800 	pop	{fp, pc}

0002941c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
   2941c:	e92d4800 	push	{fp, lr}
   29420:	e28db004 	add	fp, sp, #4
   29424:	e24dd070 	sub	sp, sp, #112	; 0x70
   29428:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
	FRESULT res;
	FATFS *fs;
	DIR dj, sdj;
	DWORD dclst = 0;
   2942c:	e3a03000 	mov	r3, #0
   29430:	e50b300c 	str	r3, [fp, #-12]
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
   29434:	e24b1010 	sub	r1, fp, #16
   29438:	e24b3070 	sub	r3, fp, #112	; 0x70
   2943c:	e3a02002 	mov	r2, #2
   29440:	e1a00003 	mov	r0, r3
   29444:	ebfff716 	bl	270a4 <mount_volume>
   29448:	e1a03000 	mov	r3, r0
   2944c:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   29450:	e55b3005 	ldrb	r3, [fp, #-5]
   29454:	e3530000 	cmp	r3, #0
   29458:	1a00005f 	bne	295dc <f_unlink+0x1c0>
		dj.obj.fs = fs;
   2945c:	e51b3010 	ldr	r3, [fp, #-16]
   29460:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
   29464:	e51b2070 	ldr	r2, [fp, #-112]	; 0xffffff90
   29468:	e24b303c 	sub	r3, fp, #60	; 0x3c
   2946c:	e1a01002 	mov	r1, r2
   29470:	e1a00003 	mov	r0, r3
   29474:	ebfff580 	bl	26a7c <follow_path>
   29478:	e1a03000 	mov	r3, r0
   2947c:	e54b3005 	strb	r3, [fp, #-5]
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if FF_FS_LOCK
		if (res == FR_OK) res = chk_share(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
   29480:	e55b3005 	ldrb	r3, [fp, #-5]
   29484:	e3530000 	cmp	r3, #0
   29488:	1a000053 	bne	295dc <f_unlink+0x1c0>
			if (dj.fn[NSFLAG] & NS_NONAME) {
   2948c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
   29490:	e6af3073 	sxtb	r3, r3
   29494:	e3530000 	cmp	r3, #0
   29498:	aa000002 	bge	294a8 <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
   2949c:	e3a03006 	mov	r3, #6
   294a0:	e54b3005 	strb	r3, [fp, #-5]
   294a4:	ea000005 	b	294c0 <f_unlink+0xa4>
			} else {
				if (dj.obj.attr & AM_RDO) {
   294a8:	e55b3036 	ldrb	r3, [fp, #-54]	; 0xffffffca
   294ac:	e2033001 	and	r3, r3, #1
   294b0:	e3530000 	cmp	r3, #0
   294b4:	0a000001 	beq	294c0 <f_unlink+0xa4>
					res = FR_DENIED;		/* Cannot remove R/O object */
   294b8:	e3a03007 	mov	r3, #7
   294bc:	e54b3005 	strb	r3, [fp, #-5]
				}
			}
			if (res == FR_OK) {
   294c0:	e55b3005 	ldrb	r3, [fp, #-5]
   294c4:	e3530000 	cmp	r3, #0
   294c8:	1a000026 	bne	29568 <f_unlink+0x14c>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
   294cc:	e51b3010 	ldr	r3, [fp, #-16]
   294d0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   294d4:	e1a01002 	mov	r1, r2
   294d8:	e1a00003 	mov	r0, r3
   294dc:	ebfff322 	bl	2616c <ld_clust>
   294e0:	e50b000c 	str	r0, [fp, #-12]
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
   294e4:	e55b3036 	ldrb	r3, [fp, #-54]	; 0xffffffca
   294e8:	e2033010 	and	r3, r3, #16
   294ec:	e3530000 	cmp	r3, #0
   294f0:	0a00001c 	beq	29568 <f_unlink+0x14c>
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;			/* Open the sub-directory */
   294f4:	e51b3010 	ldr	r3, [fp, #-16]
   294f8:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
						sdj.obj.sclust = dclst;
   294fc:	e51b300c 	ldr	r3, [fp, #-12]
   29500:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
   29504:	e24b3068 	sub	r3, fp, #104	; 0x68
   29508:	e3a01000 	mov	r1, #0
   2950c:	e1a00003 	mov	r0, r3
   29510:	ebfff1d1 	bl	25c5c <dir_sdi>
   29514:	e1a03000 	mov	r3, r0
   29518:	e54b3005 	strb	r3, [fp, #-5]
						if (res == FR_OK) {
   2951c:	e55b3005 	ldrb	r3, [fp, #-5]
   29520:	e3530000 	cmp	r3, #0
   29524:	1a00000f 	bne	29568 <f_unlink+0x14c>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
   29528:	e24b3068 	sub	r3, fp, #104	; 0x68
   2952c:	e3a01000 	mov	r1, #0
   29530:	e1a00003 	mov	r0, r3
   29534:	ebfff344 	bl	2624c <dir_read>
   29538:	e1a03000 	mov	r3, r0
   2953c:	e54b3005 	strb	r3, [fp, #-5]
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
   29540:	e55b3005 	ldrb	r3, [fp, #-5]
   29544:	e3530000 	cmp	r3, #0
   29548:	1a000001 	bne	29554 <f_unlink+0x138>
   2954c:	e3a03007 	mov	r3, #7
   29550:	e54b3005 	strb	r3, [fp, #-5]
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
   29554:	e55b3005 	ldrb	r3, [fp, #-5]
   29558:	e3530004 	cmp	r3, #4
   2955c:	1a000001 	bne	29568 <f_unlink+0x14c>
   29560:	e3a03000 	mov	r3, #0
   29564:	e54b3005 	strb	r3, [fp, #-5]
						}
					}
				}
			}
			if (res == FR_OK) {
   29568:	e55b3005 	ldrb	r3, [fp, #-5]
   2956c:	e3530000 	cmp	r3, #0
   29570:	1a000019 	bne	295dc <f_unlink+0x1c0>
				res = dir_remove(&dj);			/* Remove the directory entry */
   29574:	e24b303c 	sub	r3, fp, #60	; 0x3c
   29578:	e1a00003 	mov	r0, r3
   2957c:	ebfff404 	bl	26594 <dir_remove>
   29580:	e1a03000 	mov	r3, r0
   29584:	e54b3005 	strb	r3, [fp, #-5]
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
   29588:	e55b3005 	ldrb	r3, [fp, #-5]
   2958c:	e3530000 	cmp	r3, #0
   29590:	1a000009 	bne	295bc <f_unlink+0x1a0>
   29594:	e51b300c 	ldr	r3, [fp, #-12]
   29598:	e3530000 	cmp	r3, #0
   2959c:	0a000006 	beq	295bc <f_unlink+0x1a0>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
   295a0:	e24b303c 	sub	r3, fp, #60	; 0x3c
   295a4:	e3a02000 	mov	r2, #0
   295a8:	e51b100c 	ldr	r1, [fp, #-12]
   295ac:	e1a00003 	mov	r0, r3
   295b0:	ebfff041 	bl	256bc <remove_chain>
   295b4:	e1a03000 	mov	r3, r0
   295b8:	e54b3005 	strb	r3, [fp, #-5]
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
   295bc:	e55b3005 	ldrb	r3, [fp, #-5]
   295c0:	e3530000 	cmp	r3, #0
   295c4:	1a000004 	bne	295dc <f_unlink+0x1c0>
   295c8:	e51b3010 	ldr	r3, [fp, #-16]
   295cc:	e1a00003 	mov	r0, r3
   295d0:	ebffee54 	bl	24f28 <sync_fs>
   295d4:	e1a03000 	mov	r3, r0
   295d8:	e54b3005 	strb	r3, [fp, #-5]
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
   295dc:	e55b3005 	ldrb	r3, [fp, #-5]
}
   295e0:	e1a00003 	mov	r0, r3
   295e4:	e24bd004 	sub	sp, fp, #4
   295e8:	e8bd8800 	pop	{fp, pc}

000295ec <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
   295ec:	e92d4800 	push	{fp, lr}
   295f0:	e28db004 	add	fp, sp, #4
   295f4:	e24dd058 	sub	sp, sp, #88	; 0x58
   295f8:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
	FFOBJID sobj;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
   295fc:	e24b1018 	sub	r1, fp, #24
   29600:	e24b3058 	sub	r3, fp, #88	; 0x58
   29604:	e3a02002 	mov	r2, #2
   29608:	e1a00003 	mov	r0, r3
   2960c:	ebfff6a4 	bl	270a4 <mount_volume>
   29610:	e1a03000 	mov	r3, r0
   29614:	e54b3005 	strb	r3, [fp, #-5]
	if (res == FR_OK) {
   29618:	e55b3005 	ldrb	r3, [fp, #-5]
   2961c:	e3530000 	cmp	r3, #0
   29620:	1a00008c 	bne	29858 <f_mkdir+0x26c>
		dj.obj.fs = fs;
   29624:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29628:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
   2962c:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
   29630:	e24b3044 	sub	r3, fp, #68	; 0x44
   29634:	e1a01002 	mov	r1, r2
   29638:	e1a00003 	mov	r0, r3
   2963c:	ebfff50e 	bl	26a7c <follow_path>
   29640:	e1a03000 	mov	r3, r0
   29644:	e54b3005 	strb	r3, [fp, #-5]
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
   29648:	e55b3005 	ldrb	r3, [fp, #-5]
   2964c:	e3530000 	cmp	r3, #0
   29650:	1a000001 	bne	2965c <f_mkdir+0x70>
   29654:	e3a03008 	mov	r3, #8
   29658:	e54b3005 	strb	r3, [fp, #-5]
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
   2965c:	e55b3005 	ldrb	r3, [fp, #-5]
   29660:	e3530004 	cmp	r3, #4
   29664:	1a00007b 	bne	29858 <f_mkdir+0x26c>
			sobj.fs = fs;						/* New object id to create a new chain */
   29668:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2966c:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
   29670:	e24b3054 	sub	r3, fp, #84	; 0x54
   29674:	e3a01000 	mov	r1, #0
   29678:	e1a00003 	mov	r0, r3
   2967c:	ebfff06c 	bl	25834 <create_chain>
   29680:	e50b000c 	str	r0, [fp, #-12]
			res = FR_OK;
   29684:	e3a03000 	mov	r3, #0
   29688:	e54b3005 	strb	r3, [fp, #-5]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
   2968c:	e51b300c 	ldr	r3, [fp, #-12]
   29690:	e3530000 	cmp	r3, #0
   29694:	1a000001 	bne	296a0 <f_mkdir+0xb4>
   29698:	e3a03007 	mov	r3, #7
   2969c:	e54b3005 	strb	r3, [fp, #-5]
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
   296a0:	e51b300c 	ldr	r3, [fp, #-12]
   296a4:	e3530001 	cmp	r3, #1
   296a8:	1a000001 	bne	296b4 <f_mkdir+0xc8>
   296ac:	e3a03002 	mov	r3, #2
   296b0:	e54b3005 	strb	r3, [fp, #-5]
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
   296b4:	e51b300c 	ldr	r3, [fp, #-12]
   296b8:	e3730001 	cmn	r3, #1
   296bc:	1a000001 	bne	296c8 <f_mkdir+0xdc>
   296c0:	e3a03001 	mov	r3, #1
   296c4:	e54b3005 	strb	r3, [fp, #-5]
			tm = GET_FATTIME();
   296c8:	e59f3198 	ldr	r3, [pc, #408]	; 29868 <f_mkdir+0x27c>
   296cc:	e50b3010 	str	r3, [fp, #-16]
			if (res == FR_OK) {
   296d0:	e55b3005 	ldrb	r3, [fp, #-5]
   296d4:	e3530000 	cmp	r3, #0
   296d8:	1a00003c 	bne	297d0 <f_mkdir+0x1e4>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
   296dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   296e0:	e51b100c 	ldr	r1, [fp, #-12]
   296e4:	e1a00003 	mov	r0, r3
   296e8:	ebfff11a 	bl	25b58 <dir_clear>
   296ec:	e1a03000 	mov	r3, r0
   296f0:	e54b3005 	strb	r3, [fp, #-5]
				if (res == FR_OK) {
   296f4:	e55b3005 	ldrb	r3, [fp, #-5]
   296f8:	e3530000 	cmp	r3, #0
   296fc:	1a000033 	bne	297d0 <f_mkdir+0x1e4>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						memset(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
   29700:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29704:	e2833030 	add	r3, r3, #48	; 0x30
   29708:	e3a0200b 	mov	r2, #11
   2970c:	e3a01020 	mov	r1, #32
   29710:	e1a00003 	mov	r0, r3
   29714:	eb000752 	bl	2b464 <memset>
						fs->win[DIR_Name] = '.';
   29718:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2971c:	e3a0202e 	mov	r2, #46	; 0x2e
   29720:	e5c32030 	strb	r2, [r3, #48]	; 0x30
						fs->win[DIR_Attr] = AM_DIR;
   29724:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29728:	e3a02010 	mov	r2, #16
   2972c:	e5c3203b 	strb	r2, [r3, #59]	; 0x3b
						st_dword(fs->win + DIR_ModTime, tm);
   29730:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29734:	e2833030 	add	r3, r3, #48	; 0x30
   29738:	e2833016 	add	r3, r3, #22
   2973c:	e51b1010 	ldr	r1, [fp, #-16]
   29740:	e1a00003 	mov	r0, r3
   29744:	ebffed50 	bl	24c8c <st_dword>
						st_clust(fs, fs->win, dcl);
   29748:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2974c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29750:	e2833030 	add	r3, r3, #48	; 0x30
   29754:	e51b200c 	ldr	r2, [fp, #-12]
   29758:	e1a01003 	mov	r1, r3
   2975c:	ebfff29e 	bl	261dc <st_clust>
						memcpy(fs->win + SZDIRE, fs->win, SZDIRE);	/* Create ".." entry */
   29760:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29764:	e2833030 	add	r3, r3, #48	; 0x30
   29768:	e2830020 	add	r0, r3, #32
   2976c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29770:	e2833030 	add	r3, r3, #48	; 0x30
   29774:	e3a02020 	mov	r2, #32
   29778:	e1a01003 	mov	r1, r3
   2977c:	eb0006f0 	bl	2b344 <memcpy>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
   29780:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29784:	e3a0202e 	mov	r2, #46	; 0x2e
   29788:	e5c32051 	strb	r2, [r3, #81]	; 0x51
   2978c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
   29790:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
						st_clust(fs, fs->win + SZDIRE, pcl);
   29794:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   29798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2979c:	e2833030 	add	r3, r3, #48	; 0x30
   297a0:	e2833020 	add	r3, r3, #32
   297a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   297a8:	e1a01003 	mov	r1, r3
   297ac:	ebfff28a 	bl	261dc <st_clust>
						fs->wflag = 1;
   297b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   297b4:	e3a02001 	mov	r2, #1
   297b8:	e5c32004 	strb	r2, [r3, #4]
					}
					res = dir_register(&dj);	/* Register the object to the parent directory */
   297bc:	e24b3044 	sub	r3, fp, #68	; 0x44
   297c0:	e1a00003 	mov	r0, r3
   297c4:	ebfff345 	bl	264e0 <dir_register>
   297c8:	e1a03000 	mov	r3, r0
   297cc:	e54b3005 	strb	r3, [fp, #-5]
				}
			}
			if (res == FR_OK) {
   297d0:	e55b3005 	ldrb	r3, [fp, #-5]
   297d4:	e3530000 	cmp	r3, #0
   297d8:	1a000019 	bne	29844 <f_mkdir+0x258>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
   297dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   297e0:	e2833016 	add	r3, r3, #22
   297e4:	e51b1010 	ldr	r1, [fp, #-16]
   297e8:	e1a00003 	mov	r0, r3
   297ec:	ebffed26 	bl	24c8c <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
   297f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   297f4:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   297f8:	e51b200c 	ldr	r2, [fp, #-12]
   297fc:	e1a00003 	mov	r0, r3
   29800:	ebfff275 	bl	261dc <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
   29804:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   29808:	e283300b 	add	r3, r3, #11
   2980c:	e3a02010 	mov	r2, #16
   29810:	e5c32000 	strb	r2, [r3]
					fs->wflag = 1;
   29814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29818:	e3a02001 	mov	r2, #1
   2981c:	e5c32004 	strb	r2, [r3, #4]
				}
				if (res == FR_OK) {
   29820:	e55b3005 	ldrb	r3, [fp, #-5]
   29824:	e3530000 	cmp	r3, #0
   29828:	1a00000a 	bne	29858 <f_mkdir+0x26c>
					res = sync_fs(fs);
   2982c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29830:	e1a00003 	mov	r0, r3
   29834:	ebffedbb 	bl	24f28 <sync_fs>
   29838:	e1a03000 	mov	r3, r0
   2983c:	e54b3005 	strb	r3, [fp, #-5]
   29840:	ea000004 	b	29858 <f_mkdir+0x26c>
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
   29844:	e24b3054 	sub	r3, fp, #84	; 0x54
   29848:	e3a02000 	mov	r2, #0
   2984c:	e51b100c 	ldr	r1, [fp, #-12]
   29850:	e1a00003 	mov	r0, r3
   29854:	ebffef98 	bl	256bc <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
   29858:	e55b3005 	ldrb	r3, [fp, #-5]
}
   2985c:	e1a00003 	mov	r0, r3
   29860:	e24bd004 	sub	sp, fp, #4
   29864:	e8bd8800 	pop	{fp, pc}
   29868:	59610000 	stmdbpl	r1!, {}^	; <UNPREDICTABLE>

0002986c <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
   2986c:	e92d4810 	push	{r4, fp, lr}
   29870:	e28db008 	add	fp, sp, #8
   29874:	e24dd094 	sub	sp, sp, #148	; 0x94
   29878:	e50b0098 	str	r0, [fp, #-152]	; 0xffffff68
   2987c:	e50b109c 	str	r1, [fp, #-156]	; 0xffffff64
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
   29880:	e24b309c 	sub	r3, fp, #156	; 0x9c
   29884:	e1a00003 	mov	r0, r3
   29888:	ebfff4df 	bl	26c0c <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
   2988c:	e24b101c 	sub	r1, fp, #28
   29890:	e24b3098 	sub	r3, fp, #152	; 0x98
   29894:	e3a02002 	mov	r2, #2
   29898:	e1a00003 	mov	r0, r3
   2989c:	ebfff600 	bl	270a4 <mount_volume>
   298a0:	e1a03000 	mov	r3, r0
   298a4:	e54b300d 	strb	r3, [fp, #-13]
	if (res == FR_OK) {
   298a8:	e55b300d 	ldrb	r3, [fp, #-13]
   298ac:	e3530000 	cmp	r3, #0
   298b0:	1a0000ac 	bne	29b68 <f_rename+0x2fc>
		djo.obj.fs = fs;
   298b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   298b8:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);			/* Check old object */
   298bc:	e51b2098 	ldr	r2, [fp, #-152]	; 0xffffff68
   298c0:	e24b3048 	sub	r3, fp, #72	; 0x48
   298c4:	e1a01002 	mov	r1, r2
   298c8:	e1a00003 	mov	r0, r3
   298cc:	ebfff46a 	bl	26a7c <follow_path>
   298d0:	e1a03000 	mov	r3, r0
   298d4:	e54b300d 	strb	r3, [fp, #-13]
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
   298d8:	e55b300d 	ldrb	r3, [fp, #-13]
   298dc:	e3530000 	cmp	r3, #0
   298e0:	1a000005 	bne	298fc <f_rename+0x90>
   298e4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   298e8:	e20330a0 	and	r3, r3, #160	; 0xa0
   298ec:	e3530000 	cmp	r3, #0
   298f0:	0a000001 	beq	298fc <f_rename+0x90>
   298f4:	e3a03006 	mov	r3, #6
   298f8:	e54b300d 	strb	r3, [fp, #-13]
#if FF_FS_LOCK
		if (res == FR_OK) {
			res = chk_share(&djo, 2);
		}
#endif
		if (res == FR_OK) {					/* Object to be renamed is found */
   298fc:	e55b300d 	ldrb	r3, [fp, #-13]
   29900:	e3530000 	cmp	r3, #0
   29904:	1a000097 	bne	29b68 <f_rename+0x2fc>
					}
				}
			} else
#endif
			{	/* At FAT/FAT32 volume */
				memcpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
   29908:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2990c:	e24bc094 	sub	ip, fp, #148	; 0x94
   29910:	e1a0e003 	mov	lr, r3
   29914:	e59e0000 	ldr	r0, [lr]
   29918:	e59e1004 	ldr	r1, [lr, #4]
   2991c:	e59e2008 	ldr	r2, [lr, #8]
   29920:	e59e300c 	ldr	r3, [lr, #12]
   29924:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   29928:	e59e0010 	ldr	r0, [lr, #16]
   2992c:	e59e1014 	ldr	r1, [lr, #20]
   29930:	e59e2018 	ldr	r2, [lr, #24]
   29934:	e59e301c 	ldr	r3, [lr, #28]
   29938:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
				memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
   2993c:	e24bc074 	sub	ip, fp, #116	; 0x74
   29940:	e24be048 	sub	lr, fp, #72	; 0x48
   29944:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   29948:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   2994c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   29950:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   29954:	e89e0007 	ldm	lr, {r0, r1, r2}
   29958:	e88c0007 	stm	ip, {r0, r1, r2}
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
   2995c:	e51b209c 	ldr	r2, [fp, #-156]	; 0xffffff64
   29960:	e24b3074 	sub	r3, fp, #116	; 0x74
   29964:	e1a01002 	mov	r1, r2
   29968:	e1a00003 	mov	r0, r3
   2996c:	ebfff442 	bl	26a7c <follow_path>
   29970:	e1a03000 	mov	r3, r0
   29974:	e54b300d 	strb	r3, [fp, #-13]
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
   29978:	e55b300d 	ldrb	r3, [fp, #-13]
   2997c:	e3530000 	cmp	r3, #0
   29980:	1a00000b 	bne	299b4 <f_rename+0x148>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
   29984:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
   29988:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
   2998c:	e1520003 	cmp	r2, r3
   29990:	1a000005 	bne	299ac <f_rename+0x140>
   29994:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
   29998:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2999c:	e1520003 	cmp	r2, r3
   299a0:	1a000001 	bne	299ac <f_rename+0x140>
   299a4:	e3a03004 	mov	r3, #4
   299a8:	ea000000 	b	299b0 <f_rename+0x144>
   299ac:	e3a03008 	mov	r3, #8
   299b0:	e54b300d 	strb	r3, [fp, #-13]
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
   299b4:	e55b300d 	ldrb	r3, [fp, #-13]
   299b8:	e3530004 	cmp	r3, #4
   299bc:	1a000059 	bne	29b28 <f_rename+0x2bc>
					res = dir_register(&djn);			/* Register the new entry */
   299c0:	e24b3074 	sub	r3, fp, #116	; 0x74
   299c4:	e1a00003 	mov	r0, r3
   299c8:	ebfff2c4 	bl	264e0 <dir_register>
   299cc:	e1a03000 	mov	r3, r0
   299d0:	e54b300d 	strb	r3, [fp, #-13]
					if (res == FR_OK) {
   299d4:	e55b300d 	ldrb	r3, [fp, #-13]
   299d8:	e3530000 	cmp	r3, #0
   299dc:	1a000051 	bne	29b28 <f_rename+0x2bc>
						dir = djn.dir;					/* Copy directory entry of the object except name */
   299e0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   299e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
						memcpy(dir + 13, buf + 13, SZDIRE - 13);
   299e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   299ec:	e283000d 	add	r0, r3, #13
   299f0:	e24b3094 	sub	r3, fp, #148	; 0x94
   299f4:	e283300d 	add	r3, r3, #13
   299f8:	e3a02013 	mov	r2, #19
   299fc:	e1a01003 	mov	r1, r3
   29a00:	eb00064f 	bl	2b344 <memcpy>
						dir[DIR_Attr] = buf[DIR_Attr];
   29a04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29a08:	e283300b 	add	r3, r3, #11
   29a0c:	e55b2089 	ldrb	r2, [fp, #-137]	; 0xffffff77
   29a10:	e5c32000 	strb	r2, [r3]
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
   29a14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29a18:	e283300b 	add	r3, r3, #11
   29a1c:	e5d33000 	ldrb	r3, [r3]
   29a20:	e2033010 	and	r3, r3, #16
   29a24:	e3530000 	cmp	r3, #0
   29a28:	1a000007 	bne	29a4c <f_rename+0x1e0>
   29a2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29a30:	e283300b 	add	r3, r3, #11
   29a34:	e5d32000 	ldrb	r2, [r3]
   29a38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29a3c:	e283300b 	add	r3, r3, #11
   29a40:	e3822020 	orr	r2, r2, #32
   29a44:	e6ef2072 	uxtb	r2, r2
   29a48:	e5c32000 	strb	r2, [r3]
						fs->wflag = 1;
   29a4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29a50:	e3a02001 	mov	r2, #1
   29a54:	e5c32004 	strb	r2, [r3, #4]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
   29a58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29a5c:	e283300b 	add	r3, r3, #11
   29a60:	e5d33000 	ldrb	r3, [r3]
   29a64:	e2033010 	and	r3, r3, #16
   29a68:	e3530000 	cmp	r3, #0
   29a6c:	0a00002d 	beq	29b28 <f_rename+0x2bc>
   29a70:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
   29a74:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
   29a78:	e1520003 	cmp	r2, r3
   29a7c:	0a000029 	beq	29b28 <f_rename+0x2bc>
							sect = clst2sect(fs, ld_clust(fs, dir));
   29a80:	e51b401c 	ldr	r4, [fp, #-28]	; 0xffffffe4
   29a84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29a88:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   29a8c:	e1a00003 	mov	r0, r3
   29a90:	ebfff1b5 	bl	2616c <ld_clust>
   29a94:	e1a03000 	mov	r3, r0
   29a98:	e1a01003 	mov	r1, r3
   29a9c:	e1a00004 	mov	r0, r4
   29aa0:	ebffed7d 	bl	2509c <clst2sect>
   29aa4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
							if (sect == 0) {
   29aa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   29aac:	e3530000 	cmp	r3, #0
   29ab0:	1a000002 	bne	29ac0 <f_rename+0x254>
								res = FR_INT_ERR;
   29ab4:	e3a03002 	mov	r3, #2
   29ab8:	e54b300d 	strb	r3, [fp, #-13]
   29abc:	ea000019 	b	29b28 <f_rename+0x2bc>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
   29ac0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29ac4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
   29ac8:	e1a00003 	mov	r0, r3
   29acc:	ebffeced 	bl	24e88 <move_window>
   29ad0:	e1a03000 	mov	r3, r0
   29ad4:	e54b300d 	strb	r3, [fp, #-13]
								dir = fs->win + SZDIRE * 1;	/* Pointer to .. entry */
   29ad8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29adc:	e2833030 	add	r3, r3, #48	; 0x30
   29ae0:	e2833020 	add	r3, r3, #32
   29ae4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
								if (res == FR_OK && dir[1] == '.') {
   29ae8:	e55b300d 	ldrb	r3, [fp, #-13]
   29aec:	e3530000 	cmp	r3, #0
   29af0:	1a00000c 	bne	29b28 <f_rename+0x2bc>
   29af4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29af8:	e2833001 	add	r3, r3, #1
   29afc:	e5d33000 	ldrb	r3, [r3]
   29b00:	e353002e 	cmp	r3, #46	; 0x2e
   29b04:	1a000007 	bne	29b28 <f_rename+0x2bc>
									st_clust(fs, dir, djn.obj.sclust);
   29b08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29b0c:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
   29b10:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
   29b14:	e1a00003 	mov	r0, r3
   29b18:	ebfff1af 	bl	261dc <st_clust>
									fs->wflag = 1;
   29b1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29b20:	e3a02001 	mov	r2, #1
   29b24:	e5c32004 	strb	r2, [r3, #4]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
   29b28:	e55b300d 	ldrb	r3, [fp, #-13]
   29b2c:	e3530000 	cmp	r3, #0
   29b30:	1a00000c 	bne	29b68 <f_rename+0x2fc>
				res = dir_remove(&djo);		/* Remove old entry */
   29b34:	e24b3048 	sub	r3, fp, #72	; 0x48
   29b38:	e1a00003 	mov	r0, r3
   29b3c:	ebfff294 	bl	26594 <dir_remove>
   29b40:	e1a03000 	mov	r3, r0
   29b44:	e54b300d 	strb	r3, [fp, #-13]
				if (res == FR_OK) {
   29b48:	e55b300d 	ldrb	r3, [fp, #-13]
   29b4c:	e3530000 	cmp	r3, #0
   29b50:	1a000004 	bne	29b68 <f_rename+0x2fc>
					res = sync_fs(fs);
   29b54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29b58:	e1a00003 	mov	r0, r3
   29b5c:	ebffecf1 	bl	24f28 <sync_fs>
   29b60:	e1a03000 	mov	r3, r0
   29b64:	e54b300d 	strb	r3, [fp, #-13]
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
   29b68:	e55b300d 	ldrb	r3, [fp, #-13]
}
   29b6c:	e1a00003 	mov	r0, r3
   29b70:	e24bd008 	sub	sp, fp, #8
   29b74:	e8bd8810 	pop	{r4, fp, pc}

00029b78 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
   29b78:	e92d4800 	push	{fp, lr}
   29b7c:	e28db004 	add	fp, sp, #4
   29b80:	e24dd038 	sub	sp, sp, #56	; 0x38
   29b84:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
   29b88:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
   29b8c:	e1a03000 	mov	r3, r0
   29b90:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3
   29b94:	e1a03002 	mov	r3, r2
   29b98:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   29b9c:	e24b202c 	sub	r2, fp, #44	; 0x2c
   29ba0:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
   29ba4:	e3a01001 	mov	r1, #1
   29ba8:	e1a00003 	mov	r0, r3
   29bac:	eb00052f 	bl	2b070 <disk_ioctl>
   29bb0:	e1a03000 	mov	r3, r0
   29bb4:	e3530000 	cmp	r3, #0
   29bb8:	0a000001 	beq	29bc4 <create_partition+0x4c>
   29bbc:	e3a03001 	mov	r3, #1
   29bc0:	ea0000fd 	b	29fbc <create_partition+0x444>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
   29bc4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   29bc8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
   29bcc:	e3a0303f 	mov	r3, #63	; 0x3f
   29bd0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
   29bd4:	e3a03008 	mov	r3, #8
   29bd8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   29bdc:	ea000002 	b	29bec <create_partition+0x74>
   29be0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29be4:	e1a03083 	lsl	r3, r3, #1
   29be8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
   29bec:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29bf0:	e3530000 	cmp	r3, #0
   29bf4:	0a00000c 	beq	29c2c <create_partition+0xb4>
   29bf8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29bfc:	e1a01003 	mov	r1, r3
   29c00:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
   29c04:	eb00055d 	bl	2b180 <__udivsi3>
   29c08:	e1a03000 	mov	r3, r0
   29c0c:	e1a02003 	mov	r2, r3
   29c10:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   29c14:	e1a01003 	mov	r1, r3
   29c18:	e1a00002 	mov	r0, r2
   29c1c:	eb000557 	bl	2b180 <__udivsi3>
   29c20:	e1a03000 	mov	r3, r0
   29c24:	e3530b01 	cmp	r3, #1024	; 0x400
   29c28:	8affffec 	bhi	29be0 <create_partition+0x68>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
   29c2c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29c30:	e3530000 	cmp	r3, #0
   29c34:	1a000001 	bne	29c40 <create_partition+0xc8>
   29c38:	e3e03000 	mvn	r3, #0
   29c3c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
   29c40:	e3a02c02 	mov	r2, #512	; 0x200
   29c44:	e3a01000 	mov	r1, #0
   29c48:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
   29c4c:	eb000604 	bl	2b464 <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
   29c50:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   29c54:	e2833f6f 	add	r3, r3, #444	; 0x1bc
   29c58:	e2833002 	add	r3, r3, #2
   29c5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   29c60:	e3a03000 	mov	r3, #0
   29c64:	e50b3008 	str	r3, [fp, #-8]
   29c68:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   29c6c:	e50b300c 	str	r3, [fp, #-12]
   29c70:	ea0000b4 	b	29f48 <create_partition+0x3d0>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
   29c74:	e51b3008 	ldr	r3, [fp, #-8]
   29c78:	e1a03103 	lsl	r3, r3, #2
   29c7c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   29c80:	e0823003 	add	r3, r2, r3
   29c84:	e5933000 	ldr	r3, [r3]
   29c88:	e50b3010 	str	r3, [fp, #-16]
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
   29c8c:	e51b3010 	ldr	r3, [fp, #-16]
   29c90:	e3530064 	cmp	r3, #100	; 0x64
   29c94:	8a00000b 	bhi	29cc8 <create_partition+0x150>
   29c98:	e51b3010 	ldr	r3, [fp, #-16]
   29c9c:	e3530064 	cmp	r3, #100	; 0x64
   29ca0:	0a000006 	beq	29cc0 <create_partition+0x148>
   29ca4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29ca8:	e59f2318 	ldr	r2, [pc, #792]	; 29fc8 <create_partition+0x450>
   29cac:	e0832392 	umull	r2, r3, r2, r3
   29cb0:	e1a032a3 	lsr	r3, r3, #5
   29cb4:	e51b2010 	ldr	r2, [fp, #-16]
   29cb8:	e0030392 	mul	r3, r2, r3
   29cbc:	ea000000 	b	29cc4 <create_partition+0x14c>
   29cc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29cc4:	e50b3010 	str	r3, [fp, #-16]
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
   29cc8:	e51b200c 	ldr	r2, [fp, #-12]
   29ccc:	e51b3010 	ldr	r3, [fp, #-16]
   29cd0:	e0823003 	add	r3, r2, r3
   29cd4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   29cd8:	e1520003 	cmp	r2, r3
   29cdc:	3a000005 	bcc	29cf8 <create_partition+0x180>
   29ce0:	e51b200c 	ldr	r2, [fp, #-12]
   29ce4:	e51b3010 	ldr	r3, [fp, #-16]
   29ce8:	e0823003 	add	r3, r2, r3
   29cec:	e51b200c 	ldr	r2, [fp, #-12]
   29cf0:	e1520003 	cmp	r2, r3
   29cf4:	9a000003 	bls	29d08 <create_partition+0x190>
   29cf8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   29cfc:	e51b300c 	ldr	r3, [fp, #-12]
   29d00:	e0423003 	sub	r3, r2, r3
   29d04:	e50b3010 	str	r3, [fp, #-16]
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
   29d08:	e51b3010 	ldr	r3, [fp, #-16]
   29d0c:	e3530000 	cmp	r3, #0
   29d10:	0a000097 	beq	29f74 <create_partition+0x3fc>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Partition start LBA sector */
   29d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29d18:	e2833008 	add	r3, r3, #8
   29d1c:	e51b100c 	ldr	r1, [fp, #-12]
   29d20:	e1a00003 	mov	r0, r3
   29d24:	ebffebd8 	bl	24c8c <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Size of partition [sector] */
   29d28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29d2c:	e283300c 	add	r3, r3, #12
   29d30:	e51b1010 	ldr	r1, [fp, #-16]
   29d34:	e1a00003 	mov	r0, r3
   29d38:	ebffebd3 	bl	24c8c <st_dword>
			pte[PTE_System] = sys;					/* System type */
   29d3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29d40:	e2833004 	add	r3, r3, #4
   29d44:	e55b202e 	ldrb	r2, [fp, #-46]	; 0xffffffd2
   29d48:	e5c32000 	strb	r2, [r3]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Partitio start CHS cylinder */
   29d4c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   29d50:	e1a01003 	mov	r1, r3
   29d54:	e51b000c 	ldr	r0, [fp, #-12]
   29d58:	eb000508 	bl	2b180 <__udivsi3>
   29d5c:	e1a03000 	mov	r3, r0
   29d60:	e1a02003 	mov	r2, r3
   29d64:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29d68:	e1a01003 	mov	r1, r3
   29d6c:	e1a00002 	mov	r0, r2
   29d70:	eb000502 	bl	2b180 <__udivsi3>
   29d74:	e1a03000 	mov	r3, r0
   29d78:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Partition start CHS head */
   29d7c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
   29d80:	e1a01003 	mov	r1, r3
   29d84:	e51b000c 	ldr	r0, [fp, #-12]
   29d88:	eb0004fc 	bl	2b180 <__udivsi3>
   29d8c:	e1a03000 	mov	r3, r0
   29d90:	e1a02003 	mov	r2, r3
   29d94:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29d98:	e1a01003 	mov	r1, r3
   29d9c:	e1a00002 	mov	r0, r2
   29da0:	eb000533 	bl	2b274 <__aeabi_uidivmod>
   29da4:	e1a03001 	mov	r3, r1
   29da8:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Partition start CHS sector */
   29dac:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
   29db0:	e51b300c 	ldr	r3, [fp, #-12]
   29db4:	e1a01002 	mov	r1, r2
   29db8:	e1a00003 	mov	r0, r3
   29dbc:	eb00052c 	bl	2b274 <__aeabi_uidivmod>
   29dc0:	e1a03001 	mov	r3, r1
   29dc4:	e6ef3073 	uxtb	r3, r3
   29dc8:	e2833001 	add	r3, r3, #1
   29dcc:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
			pte[PTE_StHead] = hd;
   29dd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29dd4:	e2833001 	add	r3, r3, #1
   29dd8:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
   29ddc:	e5c32000 	strb	r2, [r3]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   29de0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   29de4:	e1a03123 	lsr	r3, r3, #2
   29de8:	e6ef3073 	uxtb	r3, r3
   29dec:	e3c3303f 	bic	r3, r3, #63	; 0x3f
   29df0:	e6ef1073 	uxtb	r1, r3
   29df4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29df8:	e2833002 	add	r3, r3, #2
   29dfc:	e55b2026 	ldrb	r2, [fp, #-38]	; 0xffffffda
   29e00:	e1812002 	orr	r2, r1, r2
   29e04:	e6ef2072 	uxtb	r2, r2
   29e08:	e5c32000 	strb	r2, [r3]
			pte[PTE_StCyl] = (BYTE)cy;
   29e0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29e10:	e2833003 	add	r3, r3, #3
   29e14:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   29e18:	e6ef2072 	uxtb	r2, r2
   29e1c:	e5c32000 	strb	r2, [r3]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* Partition end CHS cylinder */
   29e20:	e51b200c 	ldr	r2, [fp, #-12]
   29e24:	e51b3010 	ldr	r3, [fp, #-16]
   29e28:	e0823003 	add	r3, r2, r3
   29e2c:	e2433001 	sub	r3, r3, #1
   29e30:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
   29e34:	e1a01002 	mov	r1, r2
   29e38:	e1a00003 	mov	r0, r3
   29e3c:	eb0004cf 	bl	2b180 <__udivsi3>
   29e40:	e1a03000 	mov	r3, r0
   29e44:	e1a02003 	mov	r2, r3
   29e48:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29e4c:	e1a01003 	mov	r1, r3
   29e50:	e1a00002 	mov	r0, r2
   29e54:	eb0004c9 	bl	2b180 <__udivsi3>
   29e58:	e1a03000 	mov	r3, r0
   29e5c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* Partition end CHS head */
   29e60:	e51b200c 	ldr	r2, [fp, #-12]
   29e64:	e51b3010 	ldr	r3, [fp, #-16]
   29e68:	e0823003 	add	r3, r2, r3
   29e6c:	e2433001 	sub	r3, r3, #1
   29e70:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
   29e74:	e1a01002 	mov	r1, r2
   29e78:	e1a00003 	mov	r0, r3
   29e7c:	eb0004bf 	bl	2b180 <__udivsi3>
   29e80:	e1a03000 	mov	r3, r0
   29e84:	e1a02003 	mov	r2, r3
   29e88:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
   29e8c:	e1a01003 	mov	r1, r3
   29e90:	e1a00002 	mov	r0, r2
   29e94:	eb0004f6 	bl	2b274 <__aeabi_uidivmod>
   29e98:	e1a03001 	mov	r3, r1
   29e9c:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* Partition end CHS sector */
   29ea0:	e51b200c 	ldr	r2, [fp, #-12]
   29ea4:	e51b3010 	ldr	r3, [fp, #-16]
   29ea8:	e0823003 	add	r3, r2, r3
   29eac:	e2433001 	sub	r3, r3, #1
   29eb0:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
   29eb4:	e1a01002 	mov	r1, r2
   29eb8:	e1a00003 	mov	r0, r3
   29ebc:	eb0004ec 	bl	2b274 <__aeabi_uidivmod>
   29ec0:	e1a03001 	mov	r3, r1
   29ec4:	e6ef3073 	uxtb	r3, r3
   29ec8:	e2833001 	add	r3, r3, #1
   29ecc:	e54b3026 	strb	r3, [fp, #-38]	; 0xffffffda
			pte[PTE_EdHead] = hd;
   29ed0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29ed4:	e2833005 	add	r3, r3, #5
   29ed8:	e55b2025 	ldrb	r2, [fp, #-37]	; 0xffffffdb
   29edc:	e5c32000 	strb	r2, [r3]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   29ee0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
   29ee4:	e1a03123 	lsr	r3, r3, #2
   29ee8:	e6ef3073 	uxtb	r3, r3
   29eec:	e3c3303f 	bic	r3, r3, #63	; 0x3f
   29ef0:	e6ef1073 	uxtb	r1, r3
   29ef4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29ef8:	e2833006 	add	r3, r3, #6
   29efc:	e55b2026 	ldrb	r2, [fp, #-38]	; 0xffffffda
   29f00:	e1812002 	orr	r2, r1, r2
   29f04:	e6ef2072 	uxtb	r2, r2
   29f08:	e5c32000 	strb	r2, [r3]
			pte[PTE_EdCyl] = (BYTE)cy;
   29f0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29f10:	e2833007 	add	r3, r3, #7
   29f14:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
   29f18:	e6ef2072 	uxtb	r2, r2
   29f1c:	e5c32000 	strb	r2, [r3]

			pte += SZ_PTE;		/* Next entry */
   29f20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   29f24:	e2833010 	add	r3, r3, #16
   29f28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
   29f2c:	e51b3008 	ldr	r3, [fp, #-8]
   29f30:	e2833001 	add	r3, r3, #1
   29f34:	e50b3008 	str	r3, [fp, #-8]
   29f38:	e51b200c 	ldr	r2, [fp, #-12]
   29f3c:	e51b3010 	ldr	r3, [fp, #-16]
   29f40:	e0823003 	add	r3, r2, r3
   29f44:	e50b300c 	str	r3, [fp, #-12]
   29f48:	e51b3008 	ldr	r3, [fp, #-8]
   29f4c:	e3530003 	cmp	r3, #3
   29f50:	8a000008 	bhi	29f78 <create_partition+0x400>
   29f54:	e51b300c 	ldr	r3, [fp, #-12]
   29f58:	e3530000 	cmp	r3, #0
   29f5c:	0a000005 	beq	29f78 <create_partition+0x400>
   29f60:	e51b200c 	ldr	r2, [fp, #-12]
   29f64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   29f68:	e1520003 	cmp	r2, r3
   29f6c:	3affff40 	bcc	29c74 <create_partition+0xfc>
   29f70:	ea000000 	b	29f78 <create_partition+0x400>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
   29f74:	e320f000 	nop	{0}
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
   29f78:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   29f7c:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   29f80:	e2833002 	add	r3, r3, #2
   29f84:	e59f1040 	ldr	r1, [pc, #64]	; 29fcc <create_partition+0x454>
   29f88:	e1a00003 	mov	r0, r3
   29f8c:	ebffeb25 	bl	24c28 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
   29f90:	e55b002d 	ldrb	r0, [fp, #-45]	; 0xffffffd3
   29f94:	e3a03001 	mov	r3, #1
   29f98:	e3a02000 	mov	r2, #0
   29f9c:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
   29fa0:	eb000405 	bl	2afbc <disk_write>
   29fa4:	e1a03000 	mov	r3, r0
   29fa8:	e3530000 	cmp	r3, #0
   29fac:	0a000001 	beq	29fb8 <create_partition+0x440>
   29fb0:	e3a03001 	mov	r3, #1
   29fb4:	ea000000 	b	29fbc <create_partition+0x444>
	}

	return FR_OK;
   29fb8:	e3a03000 	mov	r3, #0
}
   29fbc:	e1a00003 	mov	r0, r3
   29fc0:	e24bd004 	sub	sp, fp, #4
   29fc4:	e8bd8800 	pop	{fp, pc}
   29fc8:	51eb851f 	mvnpl	r8, pc, lsl r5
   29fcc:	0000aa55 	andeq	sl, r0, r5, asr sl

00029fd0 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
   29fd0:	e92d4800 	push	{fp, lr}
   29fd4:	e28db004 	add	fp, sp, #4
   29fd8:	e24dd080 	sub	sp, sp, #128	; 0x80
   29fdc:	e50b0078 	str	r0, [fp, #-120]	; 0xffffff88
   29fe0:	e50b107c 	str	r1, [fp, #-124]	; 0xffffff84
   29fe4:	e50b2080 	str	r2, [fp, #-128]	; 0xffffff80
   29fe8:	e50b3084 	str	r3, [fp, #-132]	; 0xffffff7c
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
   29fec:	e24b3078 	sub	r3, fp, #120	; 0x78
   29ff0:	e1a00003 	mov	r0, r3
   29ff4:	ebfff304 	bl	26c0c <get_ldnumber>
   29ff8:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
	if (vol < 0) return FR_INVALID_DRIVE;
   29ffc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2a000:	e3530000 	cmp	r3, #0
   2a004:	aa000001 	bge	2a010 <f_mkfs+0x40>
   2a008:	e3a0300b 	mov	r3, #11
   2a00c:	ea000384 	b	2ae24 <f_mkfs+0xe54>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
   2a010:	e59f2e18 	ldr	r2, [pc, #3608]	; 2ae30 <f_mkfs+0xe60>
   2a014:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2a018:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   2a01c:	e3530000 	cmp	r3, #0
   2a020:	0a000004 	beq	2a038 <f_mkfs+0x68>
   2a024:	e59f2e04 	ldr	r2, [pc, #3588]	; 2ae30 <f_mkfs+0xe60>
   2a028:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2a02c:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   2a030:	e3a02000 	mov	r2, #0
   2a034:	e5c32000 	strb	r2, [r3]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
   2a038:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
   2a03c:	e54b3039 	strb	r3, [fp, #-57]	; 0xffffffc7
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
   2a040:	e3a03000 	mov	r3, #0
   2a044:	e54b303a 	strb	r3, [fp, #-58]	; 0xffffffc6

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
   2a048:	e55b3039 	ldrb	r3, [fp, #-57]	; 0xffffffc7
   2a04c:	e1a00003 	mov	r0, r3
   2a050:	eb000394 	bl	2aea8 <disk_initialize>
   2a054:	e1a03000 	mov	r3, r0
   2a058:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
	if (ds & STA_NOINIT) return FR_NOT_READY;
   2a05c:	e55b303b 	ldrb	r3, [fp, #-59]	; 0xffffffc5
   2a060:	e2033001 	and	r3, r3, #1
   2a064:	e3530000 	cmp	r3, #0
   2a068:	0a000001 	beq	2a074 <f_mkfs+0xa4>
   2a06c:	e3a03003 	mov	r3, #3
   2a070:	ea00036b 	b	2ae24 <f_mkfs+0xe54>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
   2a074:	e55b303b 	ldrb	r3, [fp, #-59]	; 0xffffffc5
   2a078:	e2033004 	and	r3, r3, #4
   2a07c:	e3530000 	cmp	r3, #0
   2a080:	0a000001 	beq	2a08c <f_mkfs+0xbc>
   2a084:	e3a0300a 	mov	r3, #10
   2a088:	ea000365 	b	2ae24 <f_mkfs+0xe54>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
   2a08c:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a090:	e3530000 	cmp	r3, #0
   2a094:	1a000001 	bne	2a0a0 <f_mkfs+0xd0>
   2a098:	e59f3d94 	ldr	r3, [pc, #3476]	; 2ae34 <f_mkfs+0xe64>
   2a09c:	e50b307c 	str	r3, [fp, #-124]	; 0xffffff84
	sz_blk = opt->align;
   2a0a0:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a0a4:	e5933004 	ldr	r3, [r3, #4]
   2a0a8:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the parameter or lower layer */
   2a0ac:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a0b0:	e3530000 	cmp	r3, #0
   2a0b4:	1a000004 	bne	2a0cc <f_mkfs+0xfc>
   2a0b8:	e24b2064 	sub	r2, fp, #100	; 0x64
   2a0bc:	e55b3039 	ldrb	r3, [fp, #-57]	; 0xffffffc7
   2a0c0:	e3a01003 	mov	r1, #3
   2a0c4:	e1a00003 	mov	r0, r3
   2a0c8:	eb0003e8 	bl	2b070 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
   2a0cc:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a0d0:	e3530000 	cmp	r3, #0
   2a0d4:	0a000008 	beq	2a0fc <f_mkfs+0x12c>
   2a0d8:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a0dc:	e3530902 	cmp	r3, #32768	; 0x8000
   2a0e0:	8a000005 	bhi	2a0fc <f_mkfs+0x12c>
   2a0e4:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a0e8:	e2432001 	sub	r2, r3, #1
   2a0ec:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a0f0:	e0033002 	and	r3, r3, r2
   2a0f4:	e3530000 	cmp	r3, #0
   2a0f8:	0a000001 	beq	2a104 <f_mkfs+0x134>
   2a0fc:	e3a03001 	mov	r3, #1
   2a100:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
   2a104:	e3a03c02 	mov	r3, #512	; 0x200
   2a108:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
   2a10c:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a110:	e5d33000 	ldrb	r3, [r3]
   2a114:	e203300f 	and	r3, r3, #15
   2a118:	e54b303f 	strb	r3, [fp, #-63]	; 0xffffffc1
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
   2a11c:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a120:	e5d33001 	ldrb	r3, [r3, #1]
   2a124:	e3530000 	cmp	r3, #0
   2a128:	0a000006 	beq	2a148 <f_mkfs+0x178>
   2a12c:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a130:	e5d33001 	ldrb	r3, [r3, #1]
   2a134:	e3530002 	cmp	r3, #2
   2a138:	8a000002 	bhi	2a148 <f_mkfs+0x178>
   2a13c:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a140:	e5d33001 	ldrb	r3, [r3, #1]
   2a144:	ea000000 	b	2a14c <f_mkfs+0x17c>
   2a148:	e3a03001 	mov	r3, #1
   2a14c:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   2a150:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a154:	e5933008 	ldr	r3, [r3, #8]
   2a158:	e3530000 	cmp	r3, #0
   2a15c:	0a000011 	beq	2a1a8 <f_mkfs+0x1d8>
   2a160:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a164:	e5933008 	ldr	r3, [r3, #8]
   2a168:	e3530902 	cmp	r3, #32768	; 0x8000
   2a16c:	8a00000d 	bhi	2a1a8 <f_mkfs+0x1d8>
   2a170:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a174:	e5932008 	ldr	r2, [r3, #8]
   2a178:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2a17c:	e1a032a3 	lsr	r3, r3, #5
   2a180:	e6ff3073 	uxth	r3, r3
   2a184:	e1a01003 	mov	r1, r3
   2a188:	e1a00002 	mov	r0, r2
   2a18c:	eb000438 	bl	2b274 <__aeabi_uidivmod>
   2a190:	e1a03001 	mov	r3, r1
   2a194:	e3530000 	cmp	r3, #0
   2a198:	1a000002 	bne	2a1a8 <f_mkfs+0x1d8>
   2a19c:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a1a0:	e5933008 	ldr	r3, [r3, #8]
   2a1a4:	ea000000 	b	2a1ac <f_mkfs+0x1dc>
   2a1a8:	e3a03c02 	mov	r3, #512	; 0x200
   2a1ac:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
   2a1b0:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a1b4:	e593300c 	ldr	r3, [r3, #12]
   2a1b8:	e3530401 	cmp	r3, #16777216	; 0x1000000
   2a1bc:	8a00000a 	bhi	2a1ec <f_mkfs+0x21c>
   2a1c0:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a1c4:	e593200c 	ldr	r2, [r3, #12]
   2a1c8:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a1cc:	e593300c 	ldr	r3, [r3, #12]
   2a1d0:	e2433001 	sub	r3, r3, #1
   2a1d4:	e0033002 	and	r3, r3, r2
   2a1d8:	e3530000 	cmp	r3, #0
   2a1dc:	1a000002 	bne	2a1ec <f_mkfs+0x21c>
   2a1e0:	e51b307c 	ldr	r3, [fp, #-124]	; 0xffffff84
   2a1e4:	e593300c 	ldr	r3, [r3, #12]
   2a1e8:	ea000000 	b	2a1f0 <f_mkfs+0x220>
   2a1ec:	e3a03000 	mov	r3, #0
   2a1f0:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
	sz_au /= ss;	/* Byte --> Sector */
   2a1f4:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2a1f8:	e1a01003 	mov	r1, r3
   2a1fc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
   2a200:	eb0003de 	bl	2b180 <__udivsi3>
   2a204:	e1a03000 	mov	r3, r0
   2a208:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
   2a20c:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2a210:	e1a01003 	mov	r1, r3
   2a214:	e51b0084 	ldr	r0, [fp, #-132]	; 0xffffff7c
   2a218:	eb0003d8 	bl	2b180 <__udivsi3>
   2a21c:	e1a03000 	mov	r3, r0
   2a220:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
   2a224:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2a228:	e3530000 	cmp	r3, #0
   2a22c:	1a000001 	bne	2a238 <f_mkfs+0x268>
   2a230:	e3a03011 	mov	r3, #17
   2a234:	ea0002fa 	b	2ae24 <f_mkfs+0xe54>
	buf = (BYTE*)work;		/* Working buffer */
   2a238:	e51b3080 	ldr	r3, [fp, #-128]	; 0xffffff80
   2a23c:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
   2a240:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a244:	e3530000 	cmp	r3, #0
   2a248:	1a000001 	bne	2a254 <f_mkfs+0x284>
   2a24c:	e3a03011 	mov	r3, #17
   2a250:	ea0002f3 	b	2ae24 <f_mkfs+0xe54>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
   2a254:	e3a03000 	mov	r3, #0
   2a258:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
   2a25c:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a260:	e50b3010 	str	r3, [fp, #-16]
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   2a264:	e24b2068 	sub	r2, fp, #104	; 0x68
   2a268:	e55b3039 	ldrb	r3, [fp, #-57]	; 0xffffffc7
   2a26c:	e3a01001 	mov	r1, #1
   2a270:	e1a00003 	mov	r0, r3
   2a274:	eb00037d 	bl	2b070 <disk_ioctl>
   2a278:	e1a03000 	mov	r3, r0
   2a27c:	e3530000 	cmp	r3, #0
   2a280:	0a000001 	beq	2a28c <f_mkfs+0x2bc>
   2a284:	e3a03001 	mov	r3, #1
   2a288:	ea0002e5 	b	2ae24 <f_mkfs+0xe54>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
   2a28c:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2a290:	e2033008 	and	r3, r3, #8
   2a294:	e3530000 	cmp	r3, #0
   2a298:	1a000008 	bne	2a2c0 <f_mkfs+0x2f0>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
   2a29c:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a2a0:	e353003f 	cmp	r3, #63	; 0x3f
   2a2a4:	9a000005 	bls	2a2c0 <f_mkfs+0x2f0>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
   2a2a8:	e3a0303f 	mov	r3, #63	; 0x3f
   2a2ac:	e50b3010 	str	r3, [fp, #-16]
   2a2b0:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
   2a2b4:	e51b3010 	ldr	r3, [fp, #-16]
   2a2b8:	e0423003 	sub	r3, r2, r3
   2a2bc:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128 sectors */
   2a2c0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a2c4:	e353007f 	cmp	r3, #127	; 0x7f
   2a2c8:	8a000001 	bhi	2a2d4 <f_mkfs+0x304>
   2a2cc:	e3a0300e 	mov	r3, #14
   2a2d0:	ea0002d3 	b	2ae24 <f_mkfs+0xe54>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
   2a2d4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a2d8:	e3530080 	cmp	r3, #128	; 0x80
   2a2dc:	9a000001 	bls	2a2e8 <f_mkfs+0x318>
   2a2e0:	e3a03080 	mov	r3, #128	; 0x80
   2a2e4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
   2a2e8:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2a2ec:	e2033002 	and	r3, r3, #2
   2a2f0:	e3530000 	cmp	r3, #0
   2a2f4:	0a000006 	beq	2a314 <f_mkfs+0x344>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
   2a2f8:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2a2fc:	e2033001 	and	r3, r3, #1
   2a300:	e3530000 	cmp	r3, #0
   2a304:	1a000002 	bne	2a314 <f_mkfs+0x344>
				fsty = FS_FAT32; break;
   2a308:	e3a03003 	mov	r3, #3
   2a30c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
   2a310:	ea000007 	b	2a334 <f_mkfs+0x364>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
   2a314:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2a318:	e2033001 	and	r3, r3, #1
   2a31c:	e3530000 	cmp	r3, #0
   2a320:	1a000001 	bne	2a32c <f_mkfs+0x35c>
   2a324:	e3a03013 	mov	r3, #19
   2a328:	ea0002bd 	b	2ae24 <f_mkfs+0xe54>
		fsty = FS_FAT16;
   2a32c:	e3a03002 	mov	r3, #2
   2a330:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partition size */
   2a334:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a338:	e2833459 	add	r3, r3, #1493172224	; 0x59000000
   2a33c:	e2833861 	add	r3, r3, #6356992	; 0x610000
   2a340:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
   2a344:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a348:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
   2a34c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a350:	e3530003 	cmp	r3, #3
   2a354:	1a00003f 	bne	2a458 <f_mkfs+0x488>
				if (pau == 0) {	/* AU auto-selection */
   2a358:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a35c:	e3530000 	cmp	r3, #0
   2a360:	1a00001d 	bne	2a3dc <f_mkfs+0x40c>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
   2a364:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a368:	e1a038a3 	lsr	r3, r3, #17
   2a36c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   2a370:	e3a03000 	mov	r3, #0
   2a374:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2a378:	e3a03001 	mov	r3, #1
   2a37c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2a380:	ea000005 	b	2a39c <f_mkfs+0x3cc>
   2a384:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a388:	e2833001 	add	r3, r3, #1
   2a38c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2a390:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a394:	e1a03083 	lsl	r3, r3, #1
   2a398:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2a39c:	e59f2a94 	ldr	r2, [pc, #2708]	; 2ae38 <f_mkfs+0xe68>
   2a3a0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a3a4:	e1a03083 	lsl	r3, r3, #1
   2a3a8:	e0823003 	add	r3, r2, r3
   2a3ac:	e1d330b0 	ldrh	r3, [r3]
   2a3b0:	e3530000 	cmp	r3, #0
   2a3b4:	0a000008 	beq	2a3dc <f_mkfs+0x40c>
   2a3b8:	e59f2a78 	ldr	r2, [pc, #2680]	; 2ae38 <f_mkfs+0xe68>
   2a3bc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a3c0:	e1a03083 	lsl	r3, r3, #1
   2a3c4:	e0823003 	add	r3, r2, r3
   2a3c8:	e1d330b0 	ldrh	r3, [r3]
   2a3cc:	e1a02003 	mov	r2, r3
   2a3d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a3d4:	e1530002 	cmp	r3, r2
   2a3d8:	2affffe9 	bcs	2a384 <f_mkfs+0x3b4>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
   2a3dc:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a3e0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2a3e4:	e1a00003 	mov	r0, r3
   2a3e8:	eb000364 	bl	2b180 <__udivsi3>
   2a3ec:	e1a03000 	mov	r3, r0
   2a3f0:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   2a3f4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a3f8:	e2833002 	add	r3, r3, #2
   2a3fc:	e1a02103 	lsl	r2, r3, #2
   2a400:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2a404:	e0823003 	add	r3, r2, r3
   2a408:	e2433001 	sub	r3, r3, #1
   2a40c:	e15b23be 	ldrh	r2, [fp, #-62]	; 0xffffffc2
   2a410:	e1a01002 	mov	r1, r2
   2a414:	e1a00003 	mov	r0, r3
   2a418:	eb000358 	bl	2b180 <__udivsi3>
   2a41c:	e1a03000 	mov	r3, r0
   2a420:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
				sz_rsv = 32;	/* Number of reserved sectors */
   2a424:	e3a03020 	mov	r3, #32
   2a428:	e50b3008 	str	r3, [fp, #-8]
				sz_dir = 0;		/* No static directory */
   2a42c:	e3a03000 	mov	r3, #0
   2a430:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
   2a434:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a438:	e59f29fc 	ldr	r2, [pc, #2556]	; 2ae3c <f_mkfs+0xe6c>
   2a43c:	e1530002 	cmp	r3, r2
   2a440:	9a000002 	bls	2a450 <f_mkfs+0x480>
   2a444:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a448:	e37302bf 	cmn	r3, #-268435445	; 0xf000000b
   2a44c:	9a00004f 	bls	2a590 <f_mkfs+0x5c0>
   2a450:	e3a0300e 	mov	r3, #14
   2a454:	ea000272 	b	2ae24 <f_mkfs+0xe54>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
   2a458:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a45c:	e3530000 	cmp	r3, #0
   2a460:	1a00001d 	bne	2a4dc <f_mkfs+0x50c>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
   2a464:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a468:	e1a03623 	lsr	r3, r3, #12
   2a46c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   2a470:	e3a03000 	mov	r3, #0
   2a474:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2a478:	e3a03001 	mov	r3, #1
   2a47c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2a480:	ea000005 	b	2a49c <f_mkfs+0x4cc>
   2a484:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a488:	e2833001 	add	r3, r3, #1
   2a48c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2a490:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a494:	e1a03083 	lsl	r3, r3, #1
   2a498:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
   2a49c:	e59f299c 	ldr	r2, [pc, #2460]	; 2ae40 <f_mkfs+0xe70>
   2a4a0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a4a4:	e1a03083 	lsl	r3, r3, #1
   2a4a8:	e0823003 	add	r3, r2, r3
   2a4ac:	e1d330b0 	ldrh	r3, [r3]
   2a4b0:	e3530000 	cmp	r3, #0
   2a4b4:	0a000008 	beq	2a4dc <f_mkfs+0x50c>
   2a4b8:	e59f2980 	ldr	r2, [pc, #2432]	; 2ae40 <f_mkfs+0xe70>
   2a4bc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2a4c0:	e1a03083 	lsl	r3, r3, #1
   2a4c4:	e0823003 	add	r3, r2, r3
   2a4c8:	e1d330b0 	ldrh	r3, [r3]
   2a4cc:	e1a02003 	mov	r2, r3
   2a4d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a4d4:	e1530002 	cmp	r3, r2
   2a4d8:	2affffe9 	bcs	2a484 <f_mkfs+0x4b4>
				}
				n_clst = (DWORD)sz_vol / pau;
   2a4dc:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a4e0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2a4e4:	e1a00003 	mov	r0, r3
   2a4e8:	eb000324 	bl	2b180 <__udivsi3>
   2a4ec:	e1a03000 	mov	r3, r0
   2a4f0:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
				if (n_clst > MAX_FAT12) {
   2a4f4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a4f8:	e59f2944 	ldr	r2, [pc, #2372]	; 2ae44 <f_mkfs+0xe74>
   2a4fc:	e1530002 	cmp	r3, r2
   2a500:	9a000004 	bls	2a518 <f_mkfs+0x548>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
   2a504:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a508:	e2833002 	add	r3, r3, #2
   2a50c:	e1a03083 	lsl	r3, r3, #1
   2a510:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2a514:	ea000009 	b	2a540 <f_mkfs+0x570>
				} else {
					fsty = FS_FAT12;
   2a518:	e3a03001 	mov	r3, #1
   2a51c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   2a520:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
   2a524:	e1a03002 	mov	r3, r2
   2a528:	e1a03083 	lsl	r3, r3, #1
   2a52c:	e0833002 	add	r3, r3, r2
   2a530:	e2833001 	add	r3, r3, #1
   2a534:	e1a030a3 	lsr	r3, r3, #1
   2a538:	e2833003 	add	r3, r3, #3
   2a53c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   2a540:	e15b23be 	ldrh	r2, [fp, #-62]	; 0xffffffc2
   2a544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a548:	e0823003 	add	r3, r2, r3
   2a54c:	e2433001 	sub	r3, r3, #1
   2a550:	e15b23be 	ldrh	r2, [fp, #-62]	; 0xffffffc2
   2a554:	e1a01002 	mov	r1, r2
   2a558:	e1a00003 	mov	r0, r3
   2a55c:	eb000307 	bl	2b180 <__udivsi3>
   2a560:	e1a03000 	mov	r3, r0
   2a564:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
				sz_rsv = 1;						/* Number of reserved sectors */
   2a568:	e3a03001 	mov	r3, #1
   2a56c:	e50b3008 	str	r3, [fp, #-8]
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root directory size [sector] */
   2a570:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2a574:	e1a03283 	lsl	r3, r3, #5
   2a578:	e15b23be 	ldrh	r2, [fp, #-62]	; 0xffffffc2
   2a57c:	e1a01002 	mov	r1, r2
   2a580:	e1a00003 	mov	r0, r3
   2a584:	eb0002fd 	bl	2b180 <__udivsi3>
   2a588:	e1a03000 	mov	r3, r0
   2a58c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
   2a590:	e51b2010 	ldr	r2, [fp, #-16]
   2a594:	e51b3008 	ldr	r3, [fp, #-8]
   2a598:	e0823003 	add	r3, r2, r3
   2a59c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
   2a5a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a5a4:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
   2a5a8:	e0020392 	mul	r2, r2, r3
   2a5ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a5b0:	e0823003 	add	r3, r2, r3
   2a5b4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
   2a5b8:	e0823003 	add	r3, r2, r3
   2a5bc:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   2a5c0:	e51b2064 	ldr	r2, [fp, #-100]	; 0xffffff9c
   2a5c4:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a5c8:	e0823003 	add	r3, r2, r3
   2a5cc:	e2432001 	sub	r2, r3, #1
   2a5d0:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
   2a5d4:	e2633000 	rsb	r3, r3, #0
   2a5d8:	e0022003 	and	r2, r2, r3
   2a5dc:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a5e0:	e0423003 	sub	r3, r2, r3
   2a5e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
   2a5e8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a5ec:	e3530003 	cmp	r3, #3
   2a5f0:	1a000008 	bne	2a618 <f_mkfs+0x648>
				sz_rsv += n; b_fat += n;
   2a5f4:	e51b2008 	ldr	r2, [fp, #-8]
   2a5f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a5fc:	e0823003 	add	r3, r2, r3
   2a600:	e50b3008 	str	r3, [fp, #-8]
   2a604:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
   2a608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a60c:	e0823003 	add	r3, r2, r3
   2a610:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2a614:	ea000017 	b	2a678 <f_mkfs+0x6a8>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
   2a618:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a61c:	e51b1044 	ldr	r1, [fp, #-68]	; 0xffffffbc
   2a620:	e1a00003 	mov	r0, r3
   2a624:	eb000312 	bl	2b274 <__aeabi_uidivmod>
   2a628:	e1a03001 	mov	r3, r1
   2a62c:	e3530000 	cmp	r3, #0
   2a630:	0a000008 	beq	2a658 <f_mkfs+0x688>
					n--; sz_rsv++; b_fat++;
   2a634:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2a638:	e2433001 	sub	r3, r3, #1
   2a63c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
   2a640:	e51b3008 	ldr	r3, [fp, #-8]
   2a644:	e2833001 	add	r3, r3, #1
   2a648:	e50b3008 	str	r3, [fp, #-8]
   2a64c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2a650:	e2833001 	add	r3, r3, #1
   2a654:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
				}
				sz_fat += n / n_fat;
   2a658:	e51b1044 	ldr	r1, [fp, #-68]	; 0xffffffbc
   2a65c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   2a660:	eb0002c6 	bl	2b180 <__udivsi3>
   2a664:	e1a03000 	mov	r3, r0
   2a668:	e1a02003 	mov	r2, r3
   2a66c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a670:	e0833002 	add	r3, r3, r2
   2a674:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   2a678:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a67c:	e1a02203 	lsl	r2, r3, #4
   2a680:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
   2a684:	e0822003 	add	r2, r2, r3
   2a688:	e51b3010 	ldr	r3, [fp, #-16]
   2a68c:	e0422003 	sub	r2, r2, r3
   2a690:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a694:	e1520003 	cmp	r2, r3
   2a698:	9a000001 	bls	2a6a4 <f_mkfs+0x6d4>
   2a69c:	e3a0300e 	mov	r3, #14
   2a6a0:	ea0001df 	b	2ae24 <f_mkfs+0xe54>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
   2a6a4:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
   2a6a8:	e51b3008 	ldr	r3, [fp, #-8]
   2a6ac:	e0422003 	sub	r2, r2, r3
   2a6b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2a6b4:	e51b1044 	ldr	r1, [fp, #-68]	; 0xffffffbc
   2a6b8:	e0030391 	mul	r3, r1, r3
   2a6bc:	e0422003 	sub	r2, r2, r3
   2a6c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2a6c4:	e0423003 	sub	r3, r2, r3
   2a6c8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
   2a6cc:	e1a00003 	mov	r0, r3
   2a6d0:	eb0002aa 	bl	2b180 <__udivsi3>
   2a6d4:	e1a03000 	mov	r3, r0
   2a6d8:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
			if (fsty == FS_FAT32) {
   2a6dc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a6e0:	e3530003 	cmp	r3, #3
   2a6e4:	1a00000e 	bne	2a724 <f_mkfs+0x754>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
   2a6e8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a6ec:	e59f2748 	ldr	r2, [pc, #1864]	; 2ae3c <f_mkfs+0xe6c>
   2a6f0:	e1530002 	cmp	r3, r2
   2a6f4:	8a00000a 	bhi	2a724 <f_mkfs+0x754>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   2a6f8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a6fc:	e3530000 	cmp	r3, #0
   2a700:	1a000005 	bne	2a71c <f_mkfs+0x74c>
   2a704:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a708:	e1a030a3 	lsr	r3, r3, #1
   2a70c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   2a710:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a714:	e3530000 	cmp	r3, #0
   2a718:	1a00003d 	bne	2a814 <f_mkfs+0x844>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   2a71c:	e3a0300e 	mov	r3, #14
   2a720:	ea0001bf 	b	2ae24 <f_mkfs+0xe54>
				}
			}
			if (fsty == FS_FAT16) {
   2a724:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a728:	e3530002 	cmp	r3, #2
   2a72c:	1a00002f 	bne	2a7f0 <f_mkfs+0x820>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
   2a730:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a734:	e59f2700 	ldr	r2, [pc, #1792]	; 2ae3c <f_mkfs+0xe6c>
   2a738:	e1530002 	cmp	r3, r2
   2a73c:	9a00001c 	bls	2a7b4 <f_mkfs+0x7e4>
					if (sz_au == 0 && (pau * 2) <= 64) {
   2a740:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a744:	e3530000 	cmp	r3, #0
   2a748:	1a000007 	bne	2a76c <f_mkfs+0x79c>
   2a74c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a750:	e1a03083 	lsl	r3, r3, #1
   2a754:	e3530040 	cmp	r3, #64	; 0x40
   2a758:	8a000003 	bhi	2a76c <f_mkfs+0x79c>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
   2a75c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a760:	e1a03083 	lsl	r3, r3, #1
   2a764:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   2a768:	ea00002e 	b	2a828 <f_mkfs+0x858>
					}
					if ((fsopt & FM_FAT32)) {
   2a76c:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2a770:	e2033002 	and	r3, r3, #2
   2a774:	e3530000 	cmp	r3, #0
   2a778:	0a000002 	beq	2a788 <f_mkfs+0x7b8>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
   2a77c:	e3a03003 	mov	r3, #3
   2a780:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
   2a784:	ea000027 	b	2a828 <f_mkfs+0x858>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   2a788:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a78c:	e3530000 	cmp	r3, #0
   2a790:	1a000005 	bne	2a7ac <f_mkfs+0x7dc>
   2a794:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a798:	e1a03083 	lsl	r3, r3, #1
   2a79c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   2a7a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a7a4:	e3530080 	cmp	r3, #128	; 0x80
   2a7a8:	9a00001b 	bls	2a81c <f_mkfs+0x84c>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   2a7ac:	e3a0300e 	mov	r3, #14
   2a7b0:	ea00019b 	b	2ae24 <f_mkfs+0xe54>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
   2a7b4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a7b8:	e59f2684 	ldr	r2, [pc, #1668]	; 2ae44 <f_mkfs+0xe74>
   2a7bc:	e1530002 	cmp	r3, r2
   2a7c0:	8a00000a 	bhi	2a7f0 <f_mkfs+0x820>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   2a7c4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a7c8:	e3530000 	cmp	r3, #0
   2a7cc:	1a000005 	bne	2a7e8 <f_mkfs+0x818>
   2a7d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2a7d4:	e1a03083 	lsl	r3, r3, #1
   2a7d8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
   2a7dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
   2a7e0:	e3530080 	cmp	r3, #128	; 0x80
   2a7e4:	9a00000e 	bls	2a824 <f_mkfs+0x854>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   2a7e8:	e3a0300e 	mov	r3, #14
   2a7ec:	ea00018c 	b	2ae24 <f_mkfs+0xe54>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
   2a7f0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a7f4:	e3530001 	cmp	r3, #1
   2a7f8:	1a00000b 	bne	2a82c <f_mkfs+0x85c>
   2a7fc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2a800:	e59f263c 	ldr	r2, [pc, #1596]	; 2ae44 <f_mkfs+0xe74>
   2a804:	e1530002 	cmp	r3, r2
   2a808:	9a000007 	bls	2a82c <f_mkfs+0x85c>
   2a80c:	e3a0300e 	mov	r3, #14
   2a810:	ea000183 	b	2ae24 <f_mkfs+0xe54>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   2a814:	e320f000 	nop	{0}
   2a818:	eafffec9 	b	2a344 <f_mkfs+0x374>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   2a81c:	e320f000 	nop	{0}
   2a820:	eafffec7 	b	2a344 <f_mkfs+0x374>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   2a824:	e320f000 	nop	{0}
			pau = sz_au;
   2a828:	eafffec5 	b	2a344 <f_mkfs+0x374>

			/* Ok, it is the valid cluster configuration */
			break;
   2a82c:	e320f000 	nop	{0}
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
   2a830:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2a834:	e1a02003 	mov	r2, r3
   2a838:	e3a01000 	mov	r1, #0
   2a83c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2a840:	eb000307 	bl	2b464 <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
   2a844:	e3a0200b 	mov	r2, #11
   2a848:	e59f15f8 	ldr	r1, [pc, #1528]	; 2ae48 <f_mkfs+0xe78>
   2a84c:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2a850:	eb0002bb 	bl	2b344 <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
   2a854:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a858:	e283300b 	add	r3, r3, #11
   2a85c:	e15b23be 	ldrh	r2, [fp, #-62]	; 0xffffffc2
   2a860:	e1a01002 	mov	r1, r2
   2a864:	e1a00003 	mov	r0, r3
   2a868:	ebffe8ee 	bl	24c28 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
   2a86c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a870:	e283300d 	add	r3, r3, #13
   2a874:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
   2a878:	e6ef2072 	uxtb	r2, r2
   2a87c:	e5c32000 	strb	r2, [r3]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
   2a880:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a884:	e283300e 	add	r3, r3, #14
   2a888:	e51b2008 	ldr	r2, [fp, #-8]
   2a88c:	e6ff2072 	uxth	r2, r2
   2a890:	e1a01002 	mov	r1, r2
   2a894:	e1a00003 	mov	r0, r3
   2a898:	ebffe8e2 	bl	24c28 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
   2a89c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a8a0:	e2833010 	add	r3, r3, #16
   2a8a4:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
   2a8a8:	e6ef2072 	uxtb	r2, r2
   2a8ac:	e5c32000 	strb	r2, [r3]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
   2a8b0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a8b4:	e2832011 	add	r2, r3, #17
   2a8b8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a8bc:	e3530003 	cmp	r3, #3
   2a8c0:	0a000002 	beq	2a8d0 <f_mkfs+0x900>
   2a8c4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
   2a8c8:	e6ff3073 	uxth	r3, r3
   2a8cc:	ea000000 	b	2a8d4 <f_mkfs+0x904>
   2a8d0:	e3a03000 	mov	r3, #0
   2a8d4:	e1a01003 	mov	r1, r3
   2a8d8:	e1a00002 	mov	r0, r2
   2a8dc:	ebffe8d1 	bl	24c28 <st_word>
		if (sz_vol < 0x10000) {
   2a8e0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2a8e4:	e3530801 	cmp	r3, #65536	; 0x10000
   2a8e8:	2a000007 	bcs	2a90c <f_mkfs+0x93c>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
   2a8ec:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a8f0:	e2833013 	add	r3, r3, #19
   2a8f4:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
   2a8f8:	e6ff2072 	uxth	r2, r2
   2a8fc:	e1a01002 	mov	r1, r2
   2a900:	e1a00003 	mov	r0, r3
   2a904:	ebffe8c7 	bl	24c28 <st_word>
   2a908:	ea000005 	b	2a924 <f_mkfs+0x954>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
   2a90c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a910:	e2833020 	add	r3, r3, #32
   2a914:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
   2a918:	e1a01002 	mov	r1, r2
   2a91c:	e1a00003 	mov	r0, r3
   2a920:	ebffe8d9 	bl	24c8c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
   2a924:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a928:	e2833015 	add	r3, r3, #21
   2a92c:	e3e02007 	mvn	r2, #7
   2a930:	e5c32000 	strb	r2, [r3]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
   2a934:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a938:	e2833018 	add	r3, r3, #24
   2a93c:	e3a0103f 	mov	r1, #63	; 0x3f
   2a940:	e1a00003 	mov	r0, r3
   2a944:	ebffe8b7 	bl	24c28 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
   2a948:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a94c:	e283301a 	add	r3, r3, #26
   2a950:	e3a010ff 	mov	r1, #255	; 0xff
   2a954:	e1a00003 	mov	r0, r3
   2a958:	ebffe8b2 	bl	24c28 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
   2a95c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a960:	e283301c 	add	r3, r3, #28
   2a964:	e51b1010 	ldr	r1, [fp, #-16]
   2a968:	e1a00003 	mov	r0, r3
   2a96c:	ebffe8c6 	bl	24c8c <st_dword>
		if (fsty == FS_FAT32) {
   2a970:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2a974:	e3530003 	cmp	r3, #3
   2a978:	1a000027 	bne	2aa1c <f_mkfs+0xa4c>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
   2a97c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a980:	e2833043 	add	r3, r3, #67	; 0x43
   2a984:	e51b1054 	ldr	r1, [fp, #-84]	; 0xffffffac
   2a988:	e1a00003 	mov	r0, r3
   2a98c:	ebffe8be 	bl	24c8c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
   2a990:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a994:	e2833024 	add	r3, r3, #36	; 0x24
   2a998:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
   2a99c:	e1a00003 	mov	r0, r3
   2a9a0:	ebffe8b9 	bl	24c8c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
   2a9a4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a9a8:	e283302c 	add	r3, r3, #44	; 0x2c
   2a9ac:	e3a01002 	mov	r1, #2
   2a9b0:	e1a00003 	mov	r0, r3
   2a9b4:	ebffe8b4 	bl	24c8c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
   2a9b8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a9bc:	e2833030 	add	r3, r3, #48	; 0x30
   2a9c0:	e3a01001 	mov	r1, #1
   2a9c4:	e1a00003 	mov	r0, r3
   2a9c8:	ebffe896 	bl	24c28 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
   2a9cc:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a9d0:	e2833032 	add	r3, r3, #50	; 0x32
   2a9d4:	e3a01006 	mov	r1, #6
   2a9d8:	e1a00003 	mov	r0, r3
   2a9dc:	ebffe891 	bl	24c28 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
   2a9e0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a9e4:	e2833040 	add	r3, r3, #64	; 0x40
   2a9e8:	e3e0207f 	mvn	r2, #127	; 0x7f
   2a9ec:	e5c32000 	strb	r2, [r3]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
   2a9f0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2a9f4:	e2833042 	add	r3, r3, #66	; 0x42
   2a9f8:	e3a02029 	mov	r2, #41	; 0x29
   2a9fc:	e5c32000 	strb	r2, [r3]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
   2aa00:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aa04:	e2833047 	add	r3, r3, #71	; 0x47
   2aa08:	e3a02013 	mov	r2, #19
   2aa0c:	e59f1438 	ldr	r1, [pc, #1080]	; 2ae4c <f_mkfs+0xe7c>
   2aa10:	e1a00003 	mov	r0, r3
   2aa14:	eb00024a 	bl	2b344 <memcpy>
   2aa18:	ea000019 	b	2aa84 <f_mkfs+0xab4>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
   2aa1c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aa20:	e2833027 	add	r3, r3, #39	; 0x27
   2aa24:	e51b1054 	ldr	r1, [fp, #-84]	; 0xffffffac
   2aa28:	e1a00003 	mov	r0, r3
   2aa2c:	ebffe896 	bl	24c8c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
   2aa30:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aa34:	e2833016 	add	r3, r3, #22
   2aa38:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
   2aa3c:	e6ff2072 	uxth	r2, r2
   2aa40:	e1a01002 	mov	r1, r2
   2aa44:	e1a00003 	mov	r0, r3
   2aa48:	ebffe876 	bl	24c28 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
   2aa4c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aa50:	e2833024 	add	r3, r3, #36	; 0x24
   2aa54:	e3e0207f 	mvn	r2, #127	; 0x7f
   2aa58:	e5c32000 	strb	r2, [r3]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
   2aa5c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aa60:	e2833026 	add	r3, r3, #38	; 0x26
   2aa64:	e3a02029 	mov	r2, #41	; 0x29
   2aa68:	e5c32000 	strb	r2, [r3]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
   2aa6c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aa70:	e283302b 	add	r3, r3, #43	; 0x2b
   2aa74:	e3a02013 	mov	r2, #19
   2aa78:	e59f13d0 	ldr	r1, [pc, #976]	; 2ae50 <f_mkfs+0xe80>
   2aa7c:	e1a00003 	mov	r0, r3
   2aa80:	eb00022f 	bl	2b344 <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
   2aa84:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2aa88:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   2aa8c:	e2833002 	add	r3, r3, #2
   2aa90:	e59f13bc 	ldr	r1, [pc, #956]	; 2ae54 <f_mkfs+0xe84>
   2aa94:	e1a00003 	mov	r0, r3
   2aa98:	ebffe862 	bl	24c28 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
   2aa9c:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2aaa0:	e3a03001 	mov	r3, #1
   2aaa4:	e51b2010 	ldr	r2, [fp, #-16]
   2aaa8:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2aaac:	eb000142 	bl	2afbc <disk_write>
   2aab0:	e1a03000 	mov	r3, r0
   2aab4:	e3530000 	cmp	r3, #0
   2aab8:	0a000001 	beq	2aac4 <f_mkfs+0xaf4>
   2aabc:	e3a03001 	mov	r3, #1
   2aac0:	ea0000d7 	b	2ae24 <f_mkfs+0xe54>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
   2aac4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2aac8:	e3530003 	cmp	r3, #3
   2aacc:	1a000030 	bne	2ab94 <f_mkfs+0xbc4>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
   2aad0:	e51b3010 	ldr	r3, [fp, #-16]
   2aad4:	e2832006 	add	r2, r3, #6
   2aad8:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2aadc:	e3a03001 	mov	r3, #1
   2aae0:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2aae4:	eb000134 	bl	2afbc <disk_write>
			memset(buf, 0, ss);
   2aae8:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2aaec:	e1a02003 	mov	r2, r3
   2aaf0:	e3a01000 	mov	r1, #0
   2aaf4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2aaf8:	eb000259 	bl	2b464 <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
   2aafc:	e59f1354 	ldr	r1, [pc, #852]	; 2ae58 <f_mkfs+0xe88>
   2ab00:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2ab04:	ebffe860 	bl	24c8c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
   2ab08:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ab0c:	e2833f79 	add	r3, r3, #484	; 0x1e4
   2ab10:	e59f1344 	ldr	r1, [pc, #836]	; 2ae5c <f_mkfs+0xe8c>
   2ab14:	e1a00003 	mov	r0, r3
   2ab18:	ebffe85b 	bl	24c8c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   2ab1c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ab20:	e2832f7a 	add	r2, r3, #488	; 0x1e8
   2ab24:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
   2ab28:	e2433001 	sub	r3, r3, #1
   2ab2c:	e1a01003 	mov	r1, r3
   2ab30:	e1a00002 	mov	r0, r2
   2ab34:	ebffe854 	bl	24c8c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
   2ab38:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ab3c:	e2833f7b 	add	r3, r3, #492	; 0x1ec
   2ab40:	e3a01002 	mov	r1, #2
   2ab44:	e1a00003 	mov	r0, r3
   2ab48:	ebffe84f 	bl	24c8c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
   2ab4c:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2ab50:	e2833f7f 	add	r3, r3, #508	; 0x1fc
   2ab54:	e2833002 	add	r3, r3, #2
   2ab58:	e59f12f4 	ldr	r1, [pc, #756]	; 2ae54 <f_mkfs+0xe84>
   2ab5c:	e1a00003 	mov	r0, r3
   2ab60:	ebffe830 	bl	24c28 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   2ab64:	e51b3010 	ldr	r3, [fp, #-16]
   2ab68:	e2832007 	add	r2, r3, #7
   2ab6c:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2ab70:	e3a03001 	mov	r3, #1
   2ab74:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2ab78:	eb00010f 	bl	2afbc <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
   2ab7c:	e51b3010 	ldr	r3, [fp, #-16]
   2ab80:	e2832001 	add	r2, r3, #1
   2ab84:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2ab88:	e3a03001 	mov	r3, #1
   2ab8c:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2ab90:	eb000109 	bl	2afbc <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
   2ab94:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2ab98:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
   2ab9c:	e0030392 	mul	r3, r2, r3
   2aba0:	e1a02003 	mov	r2, r3
   2aba4:	e3a01000 	mov	r1, #0
   2aba8:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2abac:	eb00022c 	bl	2b464 <memset>
		sect = b_fat;		/* FAT start sector */
   2abb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2abb4:	e50b300c 	str	r3, [fp, #-12]
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   2abb8:	e3a03000 	mov	r3, #0
   2abbc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2abc0:	ea00003e 	b	2acc0 <f_mkfs+0xcf0>
			if (fsty == FS_FAT32) {
   2abc4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2abc8:	e3530003 	cmp	r3, #3
   2abcc:	1a00000d 	bne	2ac08 <f_mkfs+0xc38>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
   2abd0:	e3e01007 	mvn	r1, #7
   2abd4:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2abd8:	ebffe82b 	bl	24c8c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
   2abdc:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2abe0:	e2833004 	add	r3, r3, #4
   2abe4:	e3e01000 	mvn	r1, #0
   2abe8:	e1a00003 	mov	r0, r3
   2abec:	ebffe826 	bl	24c8c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory at cluster# 2) */
   2abf0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2abf4:	e2833008 	add	r3, r3, #8
   2abf8:	e3e0120f 	mvn	r1, #-268435456	; 0xf0000000
   2abfc:	e1a00003 	mov	r0, r3
   2ac00:	ebffe821 	bl	24c8c <st_dword>
   2ac04:	ea000008 	b	2ac2c <f_mkfs+0xc5c>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
   2ac08:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2ac0c:	e3530001 	cmp	r3, #1
   2ac10:	1a000001 	bne	2ac1c <f_mkfs+0xc4c>
   2ac14:	e59f3244 	ldr	r3, [pc, #580]	; 2ae60 <f_mkfs+0xe90>
   2ac18:	ea000000 	b	2ac20 <f_mkfs+0xc50>
   2ac1c:	e3e03007 	mvn	r3, #7
   2ac20:	e1a01003 	mov	r1, r3
   2ac24:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2ac28:	ebffe817 	bl	24c8c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
   2ac2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
   2ac30:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
   2ac34:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2ac38:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2ac3c:	e1520003 	cmp	r2, r3
   2ac40:	31a03002 	movcc	r3, r2
   2ac44:	21a03003 	movcs	r3, r3
   2ac48:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   2ac4c:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2ac50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ac54:	e51b200c 	ldr	r2, [fp, #-12]
   2ac58:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2ac5c:	eb0000d6 	bl	2afbc <disk_write>
   2ac60:	e1a03000 	mov	r3, r0
   2ac64:	e3530000 	cmp	r3, #0
   2ac68:	0a000001 	beq	2ac74 <f_mkfs+0xca4>
   2ac6c:	e3a03001 	mov	r3, #1
   2ac70:	ea00006b 	b	2ae24 <f_mkfs+0xe54>
				memset(buf, 0, ss);	/* Rest of FAT area is initially zero */
   2ac74:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
   2ac78:	e1a02003 	mov	r2, r3
   2ac7c:	e3a01000 	mov	r1, #0
   2ac80:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
   2ac84:	eb0001f6 	bl	2b464 <memset>
				sect += n; nsect -= n;
   2ac88:	e51b200c 	ldr	r2, [fp, #-12]
   2ac8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ac90:	e0823003 	add	r3, r2, r3
   2ac94:	e50b300c 	str	r3, [fp, #-12]
   2ac98:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2ac9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2aca0:	e0423003 	sub	r3, r2, r3
   2aca4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			} while (nsect);
   2aca8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2acac:	e3530000 	cmp	r3, #0
   2acb0:	1affffdf 	bne	2ac34 <f_mkfs+0xc64>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   2acb4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
   2acb8:	e2833001 	add	r3, r3, #1
   2acbc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
   2acc0:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
   2acc4:	e51b3044 	ldr	r3, [fp, #-68]	; 0xffffffbc
   2acc8:	e1520003 	cmp	r2, r3
   2accc:	3affffbc 	bcc	2abc4 <f_mkfs+0xbf4>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
   2acd0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2acd4:	e3530003 	cmp	r3, #3
   2acd8:	1a000001 	bne	2ace4 <f_mkfs+0xd14>
   2acdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
   2ace0:	ea000000 	b	2ace8 <f_mkfs+0xd18>
   2ace4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
   2ace8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
   2acec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2acf0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
   2acf4:	e1520003 	cmp	r2, r3
   2acf8:	31a03002 	movcc	r3, r2
   2acfc:	21a03003 	movcs	r3, r3
   2ad00:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   2ad04:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2ad08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ad0c:	e51b200c 	ldr	r2, [fp, #-12]
   2ad10:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
   2ad14:	eb0000a8 	bl	2afbc <disk_write>
   2ad18:	e1a03000 	mov	r3, r0
   2ad1c:	e3530000 	cmp	r3, #0
   2ad20:	0a000001 	beq	2ad2c <f_mkfs+0xd5c>
   2ad24:	e3a03001 	mov	r3, #1
   2ad28:	ea00003d 	b	2ae24 <f_mkfs+0xe54>
			sect += n; nsect -= n;
   2ad2c:	e51b200c 	ldr	r2, [fp, #-12]
   2ad30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ad34:	e0823003 	add	r3, r2, r3
   2ad38:	e50b300c 	str	r3, [fp, #-12]
   2ad3c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
   2ad40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
   2ad44:	e0423003 	sub	r3, r2, r3
   2ad48:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		} while (nsect);
   2ad4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
   2ad50:	e3530000 	cmp	r3, #0
   2ad54:	1affffe4 	bne	2acec <f_mkfs+0xd1c>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
   2ad58:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2ad5c:	e3530003 	cmp	r3, #3
   2ad60:	1a000002 	bne	2ad70 <f_mkfs+0xda0>
		sys = 0x0C;		/* FAT32X */
   2ad64:	e3a0300c 	mov	r3, #12
   2ad68:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
   2ad6c:	ea00000d 	b	2ada8 <f_mkfs+0xdd8>
	} else if (sz_vol >= 0x10000) {
   2ad70:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2ad74:	e3530801 	cmp	r3, #65536	; 0x10000
   2ad78:	3a000002 	bcc	2ad88 <f_mkfs+0xdb8>
		sys = 0x06;		/* FAT12/16 (large) */
   2ad7c:	e3a03006 	mov	r3, #6
   2ad80:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
   2ad84:	ea000007 	b	2ada8 <f_mkfs+0xdd8>
	} else if (fsty == FS_FAT16) {
   2ad88:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
   2ad8c:	e3530002 	cmp	r3, #2
   2ad90:	1a000002 	bne	2ada0 <f_mkfs+0xdd0>
		sys = 0x04;		/* FAT16 */
   2ad94:	e3a03004 	mov	r3, #4
   2ad98:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
   2ad9c:	ea000001 	b	2ada8 <f_mkfs+0xdd8>
	} else {
		sys = 0x01;		/* FAT12 */
   2ada0:	e3a03001 	mov	r3, #1
   2ada4:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
   2ada8:	e55b303f 	ldrb	r3, [fp, #-63]	; 0xffffffc1
   2adac:	e2033008 	and	r3, r3, #8
   2adb0:	e3530000 	cmp	r3, #0
   2adb4:	1a00000f 	bne	2adf8 <f_mkfs+0xe28>
			lba[0] = sz_vol; lba[1] = 0;
   2adb8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
   2adbc:	e50b3070 	str	r3, [fp, #-112]	; 0xffffff90
   2adc0:	e3a03000 	mov	r3, #0
   2adc4:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
			res = create_partition(pdrv, lba, sys, buf);
   2adc8:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
   2adcc:	e24b1070 	sub	r1, fp, #112	; 0x70
   2add0:	e55b0039 	ldrb	r0, [fp, #-57]	; 0xffffffc7
   2add4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
   2add8:	ebfffb66 	bl	29b78 <create_partition>
   2addc:	e1a03000 	mov	r3, r0
   2ade0:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
			if (res != FR_OK) LEAVE_MKFS(res);
   2ade4:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   2ade8:	e3530000 	cmp	r3, #0
   2adec:	0a000001 	beq	2adf8 <f_mkfs+0xe28>
   2adf0:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
   2adf4:	ea00000a 	b	2ae24 <f_mkfs+0xe54>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   2adf8:	e55b3039 	ldrb	r3, [fp, #-57]	; 0xffffffc7
   2adfc:	e3a02000 	mov	r2, #0
   2ae00:	e3a01000 	mov	r1, #0
   2ae04:	e1a00003 	mov	r0, r3
   2ae08:	eb000098 	bl	2b070 <disk_ioctl>
   2ae0c:	e1a03000 	mov	r3, r0
   2ae10:	e3530000 	cmp	r3, #0
   2ae14:	0a000001 	beq	2ae20 <f_mkfs+0xe50>
   2ae18:	e3a03001 	mov	r3, #1
   2ae1c:	ea000000 	b	2ae24 <f_mkfs+0xe54>

	LEAVE_MKFS(FR_OK);
   2ae20:	e3a03000 	mov	r3, #0
}
   2ae24:	e1a00003 	mov	r0, r3
   2ae28:	e24bd004 	sub	sp, fp, #4
   2ae2c:	e8bd8800 	pop	{fp, pc}
   2ae30:	0002d2d0 	ldrdeq	sp, [r2], -r0
   2ae34:	0002beb0 			; <UNDEFINED> instruction: 0x0002beb0
   2ae38:	0002bec0 	andeq	fp, r2, r0, asr #29
   2ae3c:	0000fff5 	strdeq	pc, [r0], -r5
   2ae40:	0002bed0 	ldrdeq	fp, [r2], -r0
   2ae44:	00000ff5 	strdeq	r0, [r0], -r5
   2ae48:	0002be7c 	andeq	fp, r2, ip, ror lr
   2ae4c:	0002be88 	andeq	fp, r2, r8, lsl #29
   2ae50:	0002be9c 	muleq	r2, ip, lr
   2ae54:	0000aa55 	andeq	sl, r0, r5, asr sl
   2ae58:	41615252 	cmnmi	r1, r2, asr r2
   2ae5c:	61417272 	hvcvs	5922	; 0x1722
   2ae60:	00fffff8 	ldrshteq	pc, [pc], #248	; <UNPREDICTABLE>

0002ae64 <disk_status>:

/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv) {
   2ae64:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2ae68:	e28db000 	add	fp, sp, #0
   2ae6c:	e24dd00c 	sub	sp, sp, #12
   2ae70:	e1a03000 	mov	r3, r0
   2ae74:	e54b3005 	strb	r3, [fp, #-5]
    if (pdrv != DEV_RAM) return STA_NOINIT;  /* 仅支持 RAM 磁盘 */
   2ae78:	e55b3005 	ldrb	r3, [fp, #-5]
   2ae7c:	e3530000 	cmp	r3, #0
   2ae80:	0a000001 	beq	2ae8c <disk_status+0x28>
   2ae84:	e3a03001 	mov	r3, #1
   2ae88:	ea000001 	b	2ae94 <disk_status+0x30>
    return Stat;
   2ae8c:	e59f3010 	ldr	r3, [pc, #16]	; 2aea4 <disk_status+0x40>
   2ae90:	e5d33000 	ldrb	r3, [r3]
}
   2ae94:	e1a00003 	mov	r0, r3
   2ae98:	e28bd000 	add	sp, fp, #0
   2ae9c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2aea0:	e12fff1e 	bx	lr
   2aea4:	0002beec 	andeq	fp, r2, ip, ror #29

0002aea8 <disk_initialize>:

/*-----------------------------------------------------------------------*/
/* Inidialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv) {
   2aea8:	e92d4800 	push	{fp, lr}
   2aeac:	e28db004 	add	fp, sp, #4
   2aeb0:	e24dd008 	sub	sp, sp, #8
   2aeb4:	e1a03000 	mov	r3, r0
   2aeb8:	e54b3005 	strb	r3, [fp, #-5]
    if (pdrv != DEV_RAM) return STA_NOINIT;  /* 仅支持 RAM 磁盘 */
   2aebc:	e55b3005 	ldrb	r3, [fp, #-5]
   2aec0:	e3530000 	cmp	r3, #0
   2aec4:	0a000001 	beq	2aed0 <disk_initialize+0x28>
   2aec8:	e3a03001 	mov	r3, #1
   2aecc:	ea000008 	b	2aef4 <disk_initialize+0x4c>
    
    /* 初始化 RAM 磁盘内容为 0 */
    memset(ramdisk, 0, RAMDISK_SIZE);
   2aed0:	e3a02702 	mov	r2, #524288	; 0x80000
   2aed4:	e3a01000 	mov	r1, #0
   2aed8:	e59f0020 	ldr	r0, [pc, #32]	; 2af00 <disk_initialize+0x58>
   2aedc:	eb000160 	bl	2b464 <memset>
    
    /* 清除所有状态标志，确保不会有写保护或其他状态 */
    Stat = 0;
   2aee0:	e59f301c 	ldr	r3, [pc, #28]	; 2af04 <disk_initialize+0x5c>
   2aee4:	e3a02000 	mov	r2, #0
   2aee8:	e5c32000 	strb	r2, [r3]
    
    return Stat;  /* 总是返回成功 */
   2aeec:	e59f3010 	ldr	r3, [pc, #16]	; 2af04 <disk_initialize+0x5c>
   2aef0:	e5d33000 	ldrb	r3, [r3]
}
   2aef4:	e1a00003 	mov	r0, r3
   2aef8:	e24bd004 	sub	sp, fp, #4
   2aefc:	e8bd8800 	pop	{fp, pc}
   2af00:	0002d2d8 	ldrdeq	sp, [r2], -r8
   2af04:	0002beec 	andeq	fp, r2, ip, ror #29

0002af08 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
   2af08:	e92d4800 	push	{fp, lr}
   2af0c:	e28db004 	add	fp, sp, #4
   2af10:	e24dd010 	sub	sp, sp, #16
   2af14:	e50b100c 	str	r1, [fp, #-12]
   2af18:	e50b2010 	str	r2, [fp, #-16]
   2af1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2af20:	e1a03000 	mov	r3, r0
   2af24:	e54b3005 	strb	r3, [fp, #-5]
    if (pdrv != DEV_RAM) return RES_PARERR;  /* 检查参数 */
   2af28:	e55b3005 	ldrb	r3, [fp, #-5]
   2af2c:	e3530000 	cmp	r3, #0
   2af30:	0a000001 	beq	2af3c <disk_read+0x34>
   2af34:	e3a03004 	mov	r3, #4
   2af38:	ea00001a 	b	2afa8 <disk_read+0xa0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;  /* 驱动器未初始化 */
   2af3c:	e59f3070 	ldr	r3, [pc, #112]	; 2afb4 <disk_read+0xac>
   2af40:	e5d33000 	ldrb	r3, [r3]
   2af44:	e2033001 	and	r3, r3, #1
   2af48:	e3530000 	cmp	r3, #0
   2af4c:	0a000001 	beq	2af58 <disk_read+0x50>
   2af50:	e3a03003 	mov	r3, #3
   2af54:	ea000013 	b	2afa8 <disk_read+0xa0>
    if (sector >= SECTOR_COUNT || sector + count > SECTOR_COUNT) {
   2af58:	e51b3010 	ldr	r3, [fp, #-16]
   2af5c:	e3530b01 	cmp	r3, #1024	; 0x400
   2af60:	2a000004 	bcs	2af78 <disk_read+0x70>
   2af64:	e51b2010 	ldr	r2, [fp, #-16]
   2af68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2af6c:	e0823003 	add	r3, r2, r3
   2af70:	e3530b01 	cmp	r3, #1024	; 0x400
   2af74:	9a000001 	bls	2af80 <disk_read+0x78>
        return RES_PARERR;  /* 超出范围 */
   2af78:	e3a03004 	mov	r3, #4
   2af7c:	ea000009 	b	2afa8 <disk_read+0xa0>
    }
    
    /* 从 RAM 磁盘拷贝数据到缓冲区 */
    memcpy(buff, ramdisk + sector * SECTOR_SIZE, count * SECTOR_SIZE);
   2af80:	e51b3010 	ldr	r3, [fp, #-16]
   2af84:	e1a03483 	lsl	r3, r3, #9
   2af88:	e59f2028 	ldr	r2, [pc, #40]	; 2afb8 <disk_read+0xb0>
   2af8c:	e0831002 	add	r1, r3, r2
   2af90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2af94:	e1a03483 	lsl	r3, r3, #9
   2af98:	e1a02003 	mov	r2, r3
   2af9c:	e51b000c 	ldr	r0, [fp, #-12]
   2afa0:	eb0000e7 	bl	2b344 <memcpy>
    
    return RES_OK;
   2afa4:	e3a03000 	mov	r3, #0
}
   2afa8:	e1a00003 	mov	r0, r3
   2afac:	e24bd004 	sub	sp, fp, #4
   2afb0:	e8bd8800 	pop	{fp, pc}
   2afb4:	0002beec 	andeq	fp, r2, ip, ror #29
   2afb8:	0002d2d8 	ldrdeq	sp, [r2], -r8

0002afbc <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
   2afbc:	e92d4800 	push	{fp, lr}
   2afc0:	e28db004 	add	fp, sp, #4
   2afc4:	e24dd010 	sub	sp, sp, #16
   2afc8:	e50b100c 	str	r1, [fp, #-12]
   2afcc:	e50b2010 	str	r2, [fp, #-16]
   2afd0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
   2afd4:	e1a03000 	mov	r3, r0
   2afd8:	e54b3005 	strb	r3, [fp, #-5]
    if (pdrv != DEV_RAM) return RES_PARERR;  /* 检查参数 */
   2afdc:	e55b3005 	ldrb	r3, [fp, #-5]
   2afe0:	e3530000 	cmp	r3, #0
   2afe4:	0a000001 	beq	2aff0 <disk_write+0x34>
   2afe8:	e3a03004 	mov	r3, #4
   2afec:	ea00001a 	b	2b05c <disk_write+0xa0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;  /* 驱动器未初始化 */
   2aff0:	e59f3070 	ldr	r3, [pc, #112]	; 2b068 <disk_write+0xac>
   2aff4:	e5d33000 	ldrb	r3, [r3]
   2aff8:	e2033001 	and	r3, r3, #1
   2affc:	e3530000 	cmp	r3, #0
   2b000:	0a000001 	beq	2b00c <disk_write+0x50>
   2b004:	e3a03003 	mov	r3, #3
   2b008:	ea000013 	b	2b05c <disk_write+0xa0>
    if (sector >= SECTOR_COUNT || sector + count > SECTOR_COUNT) {
   2b00c:	e51b3010 	ldr	r3, [fp, #-16]
   2b010:	e3530b01 	cmp	r3, #1024	; 0x400
   2b014:	2a000004 	bcs	2b02c <disk_write+0x70>
   2b018:	e51b2010 	ldr	r2, [fp, #-16]
   2b01c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b020:	e0823003 	add	r3, r2, r3
   2b024:	e3530b01 	cmp	r3, #1024	; 0x400
   2b028:	9a000001 	bls	2b034 <disk_write+0x78>
        return RES_PARERR;  /* 超出范围 */
   2b02c:	e3a03004 	mov	r3, #4
   2b030:	ea000009 	b	2b05c <disk_write+0xa0>
    }
    
    /* 从缓冲区拷贝数据到 RAM 磁盘 */
    memcpy(ramdisk + sector * SECTOR_SIZE, buff, count * SECTOR_SIZE);
   2b034:	e51b3010 	ldr	r3, [fp, #-16]
   2b038:	e1a03483 	lsl	r3, r3, #9
   2b03c:	e59f2028 	ldr	r2, [pc, #40]	; 2b06c <disk_write+0xb0>
   2b040:	e0830002 	add	r0, r3, r2
   2b044:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b048:	e1a03483 	lsl	r3, r3, #9
   2b04c:	e1a02003 	mov	r2, r3
   2b050:	e51b100c 	ldr	r1, [fp, #-12]
   2b054:	eb0000ba 	bl	2b344 <memcpy>
    
    return RES_OK;
   2b058:	e3a03000 	mov	r3, #0
}
   2b05c:	e1a00003 	mov	r0, r3
   2b060:	e24bd004 	sub	sp, fp, #4
   2b064:	e8bd8800 	pop	{fp, pc}
   2b068:	0002beec 	andeq	fp, r2, ip, ror #29
   2b06c:	0002d2d8 	ldrdeq	sp, [r2], -r8

0002b070 <disk_ioctl>:

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
   2b070:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2b074:	e28db000 	add	fp, sp, #0
   2b078:	e24dd014 	sub	sp, sp, #20
   2b07c:	e1a03000 	mov	r3, r0
   2b080:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
   2b084:	e54b300d 	strb	r3, [fp, #-13]
   2b088:	e1a03001 	mov	r3, r1
   2b08c:	e54b300e 	strb	r3, [fp, #-14]
    DRESULT res = RES_PARERR;
   2b090:	e3a03004 	mov	r3, #4
   2b094:	e54b3005 	strb	r3, [fp, #-5]
    
    if (pdrv != DEV_RAM) return RES_PARERR;  /* 检查参数 */
   2b098:	e55b300d 	ldrb	r3, [fp, #-13]
   2b09c:	e3530000 	cmp	r3, #0
   2b0a0:	0a000001 	beq	2b0ac <disk_ioctl+0x3c>
   2b0a4:	e3a03004 	mov	r3, #4
   2b0a8:	ea000027 	b	2b14c <disk_ioctl+0xdc>
    if (Stat & STA_NOINIT) return RES_NOTRDY;  /* 驱动器未初始化 */
   2b0ac:	e59f30a8 	ldr	r3, [pc, #168]	; 2b15c <disk_ioctl+0xec>
   2b0b0:	e5d33000 	ldrb	r3, [r3]
   2b0b4:	e2033001 	and	r3, r3, #1
   2b0b8:	e3530000 	cmp	r3, #0
   2b0bc:	0a000001 	beq	2b0c8 <disk_ioctl+0x58>
   2b0c0:	e3a03003 	mov	r3, #3
   2b0c4:	ea000020 	b	2b14c <disk_ioctl+0xdc>
    
    switch (cmd) {
   2b0c8:	e55b300e 	ldrb	r3, [fp, #-14]
   2b0cc:	e3530003 	cmp	r3, #3
   2b0d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2b0d4:	ea000018 	b	2b13c <disk_ioctl+0xcc>
   2b0d8:	0002b0e8 	andeq	fp, r2, r8, ror #1
   2b0dc:	0002b0f4 	strdeq	fp, [r2], -r4
   2b0e0:	0002b10c 	andeq	fp, r2, ip, lsl #2
   2b0e4:	0002b124 	andeq	fp, r2, r4, lsr #2
        case CTRL_SYNC:        /* 确保写入完成 */
            res = RES_OK;      /* RAM 磁盘不需要同步 */
   2b0e8:	e3a03000 	mov	r3, #0
   2b0ec:	e54b3005 	strb	r3, [fp, #-5]
            break;
   2b0f0:	ea000014 	b	2b148 <disk_ioctl+0xd8>
            
        case GET_SECTOR_COUNT: /* 获取媒体容量（以扇区为单位） */
            *(DWORD*)buff = SECTOR_COUNT;
   2b0f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b0f8:	e3a02b01 	mov	r2, #1024	; 0x400
   2b0fc:	e5832000 	str	r2, [r3]
            res = RES_OK;
   2b100:	e3a03000 	mov	r3, #0
   2b104:	e54b3005 	strb	r3, [fp, #-5]
            break;
   2b108:	ea00000e 	b	2b148 <disk_ioctl+0xd8>
            
        case GET_SECTOR_SIZE:  /* 获取扇区大小 */
            *(WORD*)buff = SECTOR_SIZE;
   2b10c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b110:	e3a02c02 	mov	r2, #512	; 0x200
   2b114:	e1c320b0 	strh	r2, [r3]
            res = RES_OK;
   2b118:	e3a03000 	mov	r3, #0
   2b11c:	e54b3005 	strb	r3, [fp, #-5]
            break;
   2b120:	ea000008 	b	2b148 <disk_ioctl+0xd8>
            
        case GET_BLOCK_SIZE:   /* 获取擦除块大小 */
            *(DWORD*)buff = 1; /* 不可擦除，返回1 */
   2b124:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
   2b128:	e3a02001 	mov	r2, #1
   2b12c:	e5832000 	str	r2, [r3]
            res = RES_OK;
   2b130:	e3a03000 	mov	r3, #0
   2b134:	e54b3005 	strb	r3, [fp, #-5]
            break;
   2b138:	ea000002 	b	2b148 <disk_ioctl+0xd8>
            
        default:
            res = RES_OK;  /* 对于未知命令，返回OK而不是错误 */
   2b13c:	e3a03000 	mov	r3, #0
   2b140:	e54b3005 	strb	r3, [fp, #-5]
            break;
   2b144:	e320f000 	nop	{0}
    }
    
    return res;
   2b148:	e55b3005 	ldrb	r3, [fp, #-5]
}
   2b14c:	e1a00003 	mov	r0, r3
   2b150:	e28bd000 	add	sp, fp, #0
   2b154:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2b158:	e12fff1e 	bx	lr
   2b15c:	0002beec 	andeq	fp, r2, ip, ror #29

0002b160 <get_fattime>:
/*------------------------------------------------------------------------*/

#include "ff.h"
#include "FreeRTOS.h"

DWORD get_fattime(void) {
   2b160:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   2b164:	e28db000 	add	fp, sp, #0
    return ((2025UL - 1980) << 25) | (4 << 21) | (13 << 16);
   2b168:	e59f300c 	ldr	r3, [pc, #12]	; 2b17c <get_fattime+0x1c>
}
   2b16c:	e1a00003 	mov	r0, r3
   2b170:	e28bd000 	add	sp, fp, #0
   2b174:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   2b178:	e12fff1e 	bx	lr
   2b17c:	5a8d0000 	bpl	fe36b184 <_estack+0xf634b184>

0002b180 <__udivsi3>:
   2b180:	e2512001 	subs	r2, r1, #1
   2b184:	012fff1e 	bxeq	lr
   2b188:	3a000036 	bcc	2b268 <__udivsi3+0xe8>
   2b18c:	e1500001 	cmp	r0, r1
   2b190:	9a000022 	bls	2b220 <__udivsi3+0xa0>
   2b194:	e1110002 	tst	r1, r2
   2b198:	0a000023 	beq	2b22c <__udivsi3+0xac>
   2b19c:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   2b1a0:	01a01181 	lsleq	r1, r1, #3
   2b1a4:	03a03008 	moveq	r3, #8
   2b1a8:	13a03001 	movne	r3, #1
   2b1ac:	e3510201 	cmp	r1, #268435456	; 0x10000000
   2b1b0:	31510000 	cmpcc	r1, r0
   2b1b4:	31a01201 	lslcc	r1, r1, #4
   2b1b8:	31a03203 	lslcc	r3, r3, #4
   2b1bc:	3afffffa 	bcc	2b1ac <__udivsi3+0x2c>
   2b1c0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   2b1c4:	31510000 	cmpcc	r1, r0
   2b1c8:	31a01081 	lslcc	r1, r1, #1
   2b1cc:	31a03083 	lslcc	r3, r3, #1
   2b1d0:	3afffffa 	bcc	2b1c0 <__udivsi3+0x40>
   2b1d4:	e3a02000 	mov	r2, #0
   2b1d8:	e1500001 	cmp	r0, r1
   2b1dc:	20400001 	subcs	r0, r0, r1
   2b1e0:	21822003 	orrcs	r2, r2, r3
   2b1e4:	e15000a1 	cmp	r0, r1, lsr #1
   2b1e8:	204000a1 	subcs	r0, r0, r1, lsr #1
   2b1ec:	218220a3 	orrcs	r2, r2, r3, lsr #1
   2b1f0:	e1500121 	cmp	r0, r1, lsr #2
   2b1f4:	20400121 	subcs	r0, r0, r1, lsr #2
   2b1f8:	21822123 	orrcs	r2, r2, r3, lsr #2
   2b1fc:	e15001a1 	cmp	r0, r1, lsr #3
   2b200:	204001a1 	subcs	r0, r0, r1, lsr #3
   2b204:	218221a3 	orrcs	r2, r2, r3, lsr #3
   2b208:	e3500000 	cmp	r0, #0
   2b20c:	11b03223 	lsrsne	r3, r3, #4
   2b210:	11a01221 	lsrne	r1, r1, #4
   2b214:	1affffef 	bne	2b1d8 <__udivsi3+0x58>
   2b218:	e1a00002 	mov	r0, r2
   2b21c:	e12fff1e 	bx	lr
   2b220:	03a00001 	moveq	r0, #1
   2b224:	13a00000 	movne	r0, #0
   2b228:	e12fff1e 	bx	lr
   2b22c:	e3510801 	cmp	r1, #65536	; 0x10000
   2b230:	21a01821 	lsrcs	r1, r1, #16
   2b234:	23a02010 	movcs	r2, #16
   2b238:	33a02000 	movcc	r2, #0
   2b23c:	e3510c01 	cmp	r1, #256	; 0x100
   2b240:	21a01421 	lsrcs	r1, r1, #8
   2b244:	22822008 	addcs	r2, r2, #8
   2b248:	e3510010 	cmp	r1, #16
   2b24c:	21a01221 	lsrcs	r1, r1, #4
   2b250:	22822004 	addcs	r2, r2, #4
   2b254:	e3510004 	cmp	r1, #4
   2b258:	82822003 	addhi	r2, r2, #3
   2b25c:	908220a1 	addls	r2, r2, r1, lsr #1
   2b260:	e1a00230 	lsr	r0, r0, r2
   2b264:	e12fff1e 	bx	lr
   2b268:	e3500000 	cmp	r0, #0
   2b26c:	13e00000 	mvnne	r0, #0
   2b270:	ea000007 	b	2b294 <__aeabi_idiv0>

0002b274 <__aeabi_uidivmod>:
   2b274:	e3510000 	cmp	r1, #0
   2b278:	0afffffa 	beq	2b268 <__udivsi3+0xe8>
   2b27c:	e92d4003 	push	{r0, r1, lr}
   2b280:	ebffffbe 	bl	2b180 <__udivsi3>
   2b284:	e8bd4006 	pop	{r1, r2, lr}
   2b288:	e0030092 	mul	r3, r2, r0
   2b28c:	e0411003 	sub	r1, r1, r3
   2b290:	e12fff1e 	bx	lr

0002b294 <__aeabi_idiv0>:
   2b294:	e12fff1e 	bx	lr

0002b298 <memcmp>:
   2b298:	e3520003 	cmp	r2, #3
   2b29c:	e92d4010 	push	{r4, lr}
   2b2a0:	9a000011 	bls	2b2ec <memcmp+0x54>
   2b2a4:	e180e001 	orr	lr, r0, r1
   2b2a8:	e31e0003 	tst	lr, #3
   2b2ac:	e1a0c000 	mov	ip, r0
   2b2b0:	e1a03001 	mov	r3, r1
   2b2b4:	1a00001d 	bne	2b330 <memcmp+0x98>
   2b2b8:	e1a01003 	mov	r1, r3
   2b2bc:	e1a0000c 	mov	r0, ip
   2b2c0:	e591e000 	ldr	lr, [r1]
   2b2c4:	e5904000 	ldr	r4, [r0]
   2b2c8:	e154000e 	cmp	r4, lr
   2b2cc:	e2833004 	add	r3, r3, #4
   2b2d0:	e28cc004 	add	ip, ip, #4
   2b2d4:	1a000015 	bne	2b330 <memcmp+0x98>
   2b2d8:	e2422004 	sub	r2, r2, #4
   2b2dc:	e3520003 	cmp	r2, #3
   2b2e0:	e1a0000c 	mov	r0, ip
   2b2e4:	e1a01003 	mov	r1, r3
   2b2e8:	8afffff2 	bhi	2b2b8 <memcmp+0x20>
   2b2ec:	e3520000 	cmp	r2, #0
   2b2f0:	01a00002 	moveq	r0, r2
   2b2f4:	e2424001 	sub	r4, r2, #1
   2b2f8:	0a00000a 	beq	2b328 <memcmp+0x90>
   2b2fc:	e240c001 	sub	ip, r0, #1
   2b300:	e2411001 	sub	r1, r1, #1
   2b304:	ea000001 	b	2b310 <memcmp+0x78>
   2b308:	e0903003 	adds	r3, r0, r3
   2b30c:	0a000009 	beq	2b338 <memcmp+0xa0>
   2b310:	e5fce001 	ldrb	lr, [ip, #1]!
   2b314:	e5f12001 	ldrb	r2, [r1, #1]!
   2b318:	e15e0002 	cmp	lr, r2
   2b31c:	e044300c 	sub	r3, r4, ip
   2b320:	0afffff8 	beq	2b308 <memcmp+0x70>
   2b324:	e04e0002 	sub	r0, lr, r2
   2b328:	e8bd4010 	pop	{r4, lr}
   2b32c:	e12fff1e 	bx	lr
   2b330:	e2424001 	sub	r4, r2, #1
   2b334:	eafffff0 	b	2b2fc <memcmp+0x64>
   2b338:	e1a00003 	mov	r0, r3
   2b33c:	e8bd4010 	pop	{r4, lr}
   2b340:	e12fff1e 	bx	lr

0002b344 <memcpy>:
   2b344:	e352000f 	cmp	r2, #15
   2b348:	9a000036 	bls	2b428 <memcpy+0xe4>
   2b34c:	e1803001 	orr	r3, r0, r1
   2b350:	e3130003 	tst	r3, #3
   2b354:	1a00003f 	bne	2b458 <memcpy+0x114>
   2b358:	e242c010 	sub	ip, r2, #16
   2b35c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2b360:	e2814020 	add	r4, r1, #32
   2b364:	e3cce00f 	bic	lr, ip, #15
   2b368:	e2813010 	add	r3, r1, #16
   2b36c:	e2806010 	add	r6, r0, #16
   2b370:	e084400e 	add	r4, r4, lr
   2b374:	e1a0522c 	lsr	r5, ip, #4
   2b378:	e513e00c 	ldr	lr, [r3, #-12]
   2b37c:	e513c008 	ldr	ip, [r3, #-8]
   2b380:	e5137010 	ldr	r7, [r3, #-16]
   2b384:	e506e00c 	str	lr, [r6, #-12]
   2b388:	e2833010 	add	r3, r3, #16
   2b38c:	e513e014 	ldr	lr, [r3, #-20]	; 0xffffffec
   2b390:	e1530004 	cmp	r3, r4
   2b394:	e9065000 	stmdb	r6, {ip, lr}
   2b398:	e5067010 	str	r7, [r6, #-16]
   2b39c:	e2866010 	add	r6, r6, #16
   2b3a0:	1afffff4 	bne	2b378 <memcpy+0x34>
   2b3a4:	e285c001 	add	ip, r5, #1
   2b3a8:	e312000c 	tst	r2, #12
   2b3ac:	e202300f 	and	r3, r2, #15
   2b3b0:	e081120c 	add	r1, r1, ip, lsl #4
   2b3b4:	01a02003 	moveq	r2, r3
   2b3b8:	e080c20c 	add	ip, r0, ip, lsl #4
   2b3bc:	0a00000d 	beq	2b3f8 <memcpy+0xb4>
   2b3c0:	e1a04001 	mov	r4, r1
   2b3c4:	e2433004 	sub	r3, r3, #4
   2b3c8:	e3c36003 	bic	r6, r3, #3
   2b3cc:	e1a0e123 	lsr	lr, r3, #2
   2b3d0:	e08c6006 	add	r6, ip, r6
   2b3d4:	e24c3004 	sub	r3, ip, #4
   2b3d8:	e4945004 	ldr	r5, [r4], #4
   2b3dc:	e5a35004 	str	r5, [r3, #4]!
   2b3e0:	e1530006 	cmp	r3, r6
   2b3e4:	1afffffb 	bne	2b3d8 <memcpy+0x94>
   2b3e8:	e28e3001 	add	r3, lr, #1
   2b3ec:	e2022003 	and	r2, r2, #3
   2b3f0:	e08cc103 	add	ip, ip, r3, lsl #2
   2b3f4:	e0811103 	add	r1, r1, r3, lsl #2
   2b3f8:	e3520000 	cmp	r2, #0
   2b3fc:	e2423001 	sub	r3, r2, #1
   2b400:	12833001 	addne	r3, r3, #1
   2b404:	124c2001 	subne	r2, ip, #1
   2b408:	10813003 	addne	r3, r1, r3
   2b40c:	0a000003 	beq	2b420 <memcpy+0xdc>
   2b410:	e4d1c001 	ldrb	ip, [r1], #1
   2b414:	e1510003 	cmp	r1, r3
   2b418:	e5e2c001 	strb	ip, [r2, #1]!
   2b41c:	1afffffb 	bne	2b410 <memcpy+0xcc>
   2b420:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   2b424:	e12fff1e 	bx	lr
   2b428:	e3520000 	cmp	r2, #0
   2b42c:	e1a0c000 	mov	ip, r0
   2b430:	e2423001 	sub	r3, r2, #1
   2b434:	012fff1e 	bxeq	lr
   2b438:	e2833001 	add	r3, r3, #1
   2b43c:	e24c2001 	sub	r2, ip, #1
   2b440:	e0813003 	add	r3, r1, r3
   2b444:	e4d1c001 	ldrb	ip, [r1], #1
   2b448:	e1510003 	cmp	r1, r3
   2b44c:	e5e2c001 	strb	ip, [r2, #1]!
   2b450:	1afffffb 	bne	2b444 <memcpy+0x100>
   2b454:	e12fff1e 	bx	lr
   2b458:	e1a0c000 	mov	ip, r0
   2b45c:	e2423001 	sub	r3, r2, #1
   2b460:	eafffff4 	b	2b438 <memcpy+0xf4>

0002b464 <memset>:
   2b464:	e3100003 	tst	r0, #3
   2b468:	0a000040 	beq	2b570 <memset+0x10c>
   2b46c:	e3520000 	cmp	r2, #0
   2b470:	e2422001 	sub	r2, r2, #1
   2b474:	012fff1e 	bxeq	lr
   2b478:	e1a03000 	mov	r3, r0
   2b47c:	e201c0ff 	and	ip, r1, #255	; 0xff
   2b480:	ea000002 	b	2b490 <memset+0x2c>
   2b484:	e2422001 	sub	r2, r2, #1
   2b488:	e3720001 	cmn	r2, #1
   2b48c:	012fff1e 	bxeq	lr
   2b490:	e4c3c001 	strb	ip, [r3], #1
   2b494:	e3130003 	tst	r3, #3
   2b498:	1afffff9 	bne	2b484 <memset+0x20>
   2b49c:	e3520003 	cmp	r2, #3
   2b4a0:	9a000028 	bls	2b548 <memset+0xe4>
   2b4a4:	e92d4030 	push	{r4, r5, lr}
   2b4a8:	e201e0ff 	and	lr, r1, #255	; 0xff
   2b4ac:	e18ee40e 	orr	lr, lr, lr, lsl #8
   2b4b0:	e352000f 	cmp	r2, #15
   2b4b4:	e18ee80e 	orr	lr, lr, lr, lsl #16
   2b4b8:	9a00002e 	bls	2b578 <memset+0x114>
   2b4bc:	e242c010 	sub	ip, r2, #16
   2b4c0:	e3cc400f 	bic	r4, ip, #15
   2b4c4:	e2835020 	add	r5, r3, #32
   2b4c8:	e0855004 	add	r5, r5, r4
   2b4cc:	e1a0422c 	lsr	r4, ip, #4
   2b4d0:	e283c010 	add	ip, r3, #16
   2b4d4:	e50ce010 	str	lr, [ip, #-16]
   2b4d8:	e50ce00c 	str	lr, [ip, #-12]
   2b4dc:	e50ce008 	str	lr, [ip, #-8]
   2b4e0:	e50ce004 	str	lr, [ip, #-4]
   2b4e4:	e28cc010 	add	ip, ip, #16
   2b4e8:	e15c0005 	cmp	ip, r5
   2b4ec:	1afffff8 	bne	2b4d4 <memset+0x70>
   2b4f0:	e284c001 	add	ip, r4, #1
   2b4f4:	e312000c 	tst	r2, #12
   2b4f8:	e083c20c 	add	ip, r3, ip, lsl #4
   2b4fc:	e202200f 	and	r2, r2, #15
   2b500:	0a000018 	beq	2b568 <memset+0x104>
   2b504:	e2423004 	sub	r3, r2, #4
   2b508:	e3c33003 	bic	r3, r3, #3
   2b50c:	e2833004 	add	r3, r3, #4
   2b510:	e08c3003 	add	r3, ip, r3
   2b514:	e48ce004 	str	lr, [ip], #4
   2b518:	e153000c 	cmp	r3, ip
   2b51c:	1afffffc 	bne	2b514 <memset+0xb0>
   2b520:	e2022003 	and	r2, r2, #3
   2b524:	e3520000 	cmp	r2, #0
   2b528:	0a000004 	beq	2b540 <memset+0xdc>
   2b52c:	e20110ff 	and	r1, r1, #255	; 0xff
   2b530:	e0832002 	add	r2, r3, r2
   2b534:	e4c31001 	strb	r1, [r3], #1
   2b538:	e1520003 	cmp	r2, r3
   2b53c:	1afffffc 	bne	2b534 <memset+0xd0>
   2b540:	e8bd4030 	pop	{r4, r5, lr}
   2b544:	e12fff1e 	bx	lr
   2b548:	e3520000 	cmp	r2, #0
   2b54c:	012fff1e 	bxeq	lr
   2b550:	e20110ff 	and	r1, r1, #255	; 0xff
   2b554:	e0832002 	add	r2, r3, r2
   2b558:	e4c31001 	strb	r1, [r3], #1
   2b55c:	e1520003 	cmp	r2, r3
   2b560:	1afffffc 	bne	2b558 <memset+0xf4>
   2b564:	e12fff1e 	bx	lr
   2b568:	e1a0300c 	mov	r3, ip
   2b56c:	eaffffec 	b	2b524 <memset+0xc0>
   2b570:	e1a03000 	mov	r3, r0
   2b574:	eaffffc8 	b	2b49c <memset+0x38>
   2b578:	e1a0c003 	mov	ip, r3
   2b57c:	eaffffe0 	b	2b504 <memset+0xa0>

0002b580 <strchr>:
   2b580:	e21110ff 	ands	r1, r1, #255	; 0xff
   2b584:	0a00002e 	beq	2b644 <strchr+0xc4>
   2b588:	e3100003 	tst	r0, #3
   2b58c:	e1a03000 	mov	r3, r0
   2b590:	1a000025 	bne	2b62c <strchr+0xac>
   2b594:	e92d4070 	push	{r4, r5, r6, lr}
   2b598:	e590c000 	ldr	ip, [r0]
   2b59c:	e1815401 	orr	r5, r1, r1, lsl #8
   2b5a0:	e59f4120 	ldr	r4, [pc, #288]	; 2b6c8 <strchr+0x148>
   2b5a4:	e1855805 	orr	r5, r5, r5, lsl #16
   2b5a8:	e025200c 	eor	r2, r5, ip
   2b5ac:	e0823004 	add	r3, r2, r4
   2b5b0:	e1c33002 	bic	r3, r3, r2
   2b5b4:	e08c2004 	add	r2, ip, r4
   2b5b8:	e59f610c 	ldr	r6, [pc, #268]	; 2b6cc <strchr+0x14c>
   2b5bc:	e1c2200c 	bic	r2, r2, ip
   2b5c0:	e1833002 	orr	r3, r3, r2
   2b5c4:	e1130006 	tst	r3, r6
   2b5c8:	1a000008 	bne	2b5f0 <strchr+0x70>
   2b5cc:	e5b0c004 	ldr	ip, [r0, #4]!
   2b5d0:	e02ce005 	eor	lr, ip, r5
   2b5d4:	e08c3004 	add	r3, ip, r4
   2b5d8:	e08e2004 	add	r2, lr, r4
   2b5dc:	e1c3300c 	bic	r3, r3, ip
   2b5e0:	e1c2200e 	bic	r2, r2, lr
   2b5e4:	e1833002 	orr	r3, r3, r2
   2b5e8:	e1130006 	tst	r3, r6
   2b5ec:	0afffff6 	beq	2b5cc <strchr+0x4c>
   2b5f0:	e5d03000 	ldrb	r3, [r0]
   2b5f4:	e3530000 	cmp	r3, #0
   2b5f8:	1a000003 	bne	2b60c <strchr+0x8c>
   2b5fc:	ea00002e 	b	2b6bc <strchr+0x13c>
   2b600:	e5f03001 	ldrb	r3, [r0, #1]!
   2b604:	e3530000 	cmp	r3, #0
   2b608:	0a00002b 	beq	2b6bc <strchr+0x13c>
   2b60c:	e1510003 	cmp	r1, r3
   2b610:	1afffffa 	bne	2b600 <strchr+0x80>
   2b614:	ea000029 	b	2b6c0 <strchr+0x140>
   2b618:	e1520001 	cmp	r2, r1
   2b61c:	012fff1e 	bxeq	lr
   2b620:	e3130003 	tst	r3, #3
   2b624:	e1a00003 	mov	r0, r3
   2b628:	0affffd9 	beq	2b594 <strchr+0x14>
   2b62c:	e1a00003 	mov	r0, r3
   2b630:	e4d32001 	ldrb	r2, [r3], #1
   2b634:	e3520000 	cmp	r2, #0
   2b638:	1afffff6 	bne	2b618 <strchr+0x98>
   2b63c:	e1a00002 	mov	r0, r2
   2b640:	e12fff1e 	bx	lr
   2b644:	e3100003 	tst	r0, #3
   2b648:	e1a03000 	mov	r3, r0
   2b64c:	0a000007 	beq	2b670 <strchr+0xf0>
   2b650:	e1a00003 	mov	r0, r3
   2b654:	e5d02000 	ldrb	r2, [r0]
   2b658:	e3520000 	cmp	r2, #0
   2b65c:	e2833001 	add	r3, r3, #1
   2b660:	012fff1e 	bxeq	lr
   2b664:	e3130003 	tst	r3, #3
   2b668:	e1a00003 	mov	r0, r3
   2b66c:	1afffff7 	bne	2b650 <strchr+0xd0>
   2b670:	e5902000 	ldr	r2, [r0]
   2b674:	e59fc04c 	ldr	ip, [pc, #76]	; 2b6c8 <strchr+0x148>
   2b678:	e59f104c 	ldr	r1, [pc, #76]	; 2b6cc <strchr+0x14c>
   2b67c:	e082300c 	add	r3, r2, ip
   2b680:	e1c33002 	bic	r3, r3, r2
   2b684:	e1130001 	tst	r3, r1
   2b688:	1a000004 	bne	2b6a0 <strchr+0x120>
   2b68c:	e5b02004 	ldr	r2, [r0, #4]!
   2b690:	e082300c 	add	r3, r2, ip
   2b694:	e1c33002 	bic	r3, r3, r2
   2b698:	e1130001 	tst	r3, r1
   2b69c:	0afffffa 	beq	2b68c <strchr+0x10c>
   2b6a0:	e5d03000 	ldrb	r3, [r0]
   2b6a4:	e3530000 	cmp	r3, #0
   2b6a8:	012fff1e 	bxeq	lr
   2b6ac:	e5f03001 	ldrb	r3, [r0, #1]!
   2b6b0:	e3530000 	cmp	r3, #0
   2b6b4:	1afffffc 	bne	2b6ac <strchr+0x12c>
   2b6b8:	e12fff1e 	bx	lr
   2b6bc:	e1a00003 	mov	r0, r3
   2b6c0:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b6c4:	e12fff1e 	bx	lr
   2b6c8:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   2b6cc:	80808080 	addhi	r8, r0, r0, lsl #1

0002b6d0 <strlen>:
   2b6d0:	e3c01003 	bic	r1, r0, #3
   2b6d4:	e2100003 	ands	r0, r0, #3
   2b6d8:	e2600000 	rsb	r0, r0, #0
   2b6dc:	e4913004 	ldr	r3, [r1], #4
   2b6e0:	e280c004 	add	ip, r0, #4
   2b6e4:	e1a0c18c 	lsl	ip, ip, #3
   2b6e8:	e3e02000 	mvn	r2, #0
   2b6ec:	11833c32 	orrne	r3, r3, r2, lsr ip
   2b6f0:	e3a0c001 	mov	ip, #1
   2b6f4:	e18cc40c 	orr	ip, ip, ip, lsl #8
   2b6f8:	e18cc80c 	orr	ip, ip, ip, lsl #16
   2b6fc:	e043200c 	sub	r2, r3, ip
   2b700:	e1c22003 	bic	r2, r2, r3
   2b704:	e012238c 	ands	r2, r2, ip, lsl #7
   2b708:	04913004 	ldreq	r3, [r1], #4
   2b70c:	02800004 	addeq	r0, r0, #4
   2b710:	0afffff9 	beq	2b6fc <strlen+0x2c>
   2b714:	e31300ff 	tst	r3, #255	; 0xff
   2b718:	12800001 	addne	r0, r0, #1
   2b71c:	13130cff 	tstne	r3, #65280	; 0xff00
   2b720:	12800001 	addne	r0, r0, #1
   2b724:	131308ff 	tstne	r3, #16711680	; 0xff0000
   2b728:	12800001 	addne	r0, r0, #1
   2b72c:	e12fff1e 	bx	lr

0002b730 <strncpy>:
   2b730:	e1803001 	orr	r3, r0, r1
   2b734:	e3520003 	cmp	r2, #3
   2b738:	e2033003 	and	r3, r3, #3
   2b73c:	93a0c000 	movls	ip, #0
   2b740:	83a0c001 	movhi	ip, #1
   2b744:	e3530000 	cmp	r3, #0
   2b748:	13a0c000 	movne	ip, #0
   2b74c:	e35c0000 	cmp	ip, #0
   2b750:	01a0c000 	moveq	ip, r0
   2b754:	e92d4070 	push	{r4, r5, r6, lr}
   2b758:	1a000015 	bne	2b7b4 <strncpy+0x84>
   2b75c:	e241e001 	sub	lr, r1, #1
   2b760:	ea000007 	b	2b784 <strncpy+0x54>
   2b764:	e1a0300c 	mov	r3, ip
   2b768:	e5fe1001 	ldrb	r1, [lr, #1]!
   2b76c:	e3510000 	cmp	r1, #0
   2b770:	e4c31001 	strb	r1, [r3], #1
   2b774:	e2424001 	sub	r4, r2, #1
   2b778:	0a000005 	beq	2b794 <strncpy+0x64>
   2b77c:	e1a0c003 	mov	ip, r3
   2b780:	e1a02004 	mov	r2, r4
   2b784:	e3520000 	cmp	r2, #0
   2b788:	1afffff5 	bne	2b764 <strncpy+0x34>
   2b78c:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b790:	e12fff1e 	bx	lr
   2b794:	e3540000 	cmp	r4, #0
   2b798:	108c2002 	addne	r2, ip, r2
   2b79c:	0afffffa 	beq	2b78c <strncpy+0x5c>
   2b7a0:	e4c31001 	strb	r1, [r3], #1
   2b7a4:	e1530002 	cmp	r3, r2
   2b7a8:	1afffffc 	bne	2b7a0 <strncpy+0x70>
   2b7ac:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b7b0:	e12fff1e 	bx	lr
   2b7b4:	e1a03001 	mov	r3, r1
   2b7b8:	e1a0c000 	mov	ip, r0
   2b7bc:	e59f6030 	ldr	r6, [pc, #48]	; 2b7f4 <strncpy+0xc4>
   2b7c0:	e59f5030 	ldr	r5, [pc, #48]	; 2b7f8 <strncpy+0xc8>
   2b7c4:	e1a01003 	mov	r1, r3
   2b7c8:	e4934004 	ldr	r4, [r3], #4
   2b7cc:	e084e006 	add	lr, r4, r6
   2b7d0:	e1cee004 	bic	lr, lr, r4
   2b7d4:	e11e0005 	tst	lr, r5
   2b7d8:	1affffdf 	bne	2b75c <strncpy+0x2c>
   2b7dc:	e2422004 	sub	r2, r2, #4
   2b7e0:	e3520003 	cmp	r2, #3
   2b7e4:	e1a01003 	mov	r1, r3
   2b7e8:	e48c4004 	str	r4, [ip], #4
   2b7ec:	8afffff4 	bhi	2b7c4 <strncpy+0x94>
   2b7f0:	eaffffd9 	b	2b75c <strncpy+0x2c>
   2b7f4:	fefefeff 	mrc2	14, 7, pc, cr14, cr15, {7}
   2b7f8:	80808080 	addhi	r8, r0, r0, lsl #1

Disassembly of section .rodata:

0002b7fc <pRegs>:
static volatile BCM2835_TIMER_REGS * const pRegs = (BCM2835_TIMER_REGS *) (portTIMER_BASE);
   2b7fc:	2000b400 	andcs	fp, r0, r0, lsl #8
   2b800:	454c4449 	strbmi	r4, [ip, #-1097]	; 0xfffffbb7
   2b804:	00000000 	andeq	r0, r0, r0

0002b808 <pRegs>:
static volatile BCM2835_INTC_REGS * const pRegs = (BCM2835_INTC_REGS *) (BCM2835_BASE_INTC);
   2b808:	2000b200 	andcs	fp, r0, r0, lsl #4

0002b80c <pRegs>:
volatile BCM2835_GPIO_REGS * const pRegs = (BCM2835_GPIO_REGS *) (0x20200000);
   2b80c:	20200000 	eorcs	r0, r0, r0

0002b810 <heapSTRUCT_SIZE>:
static const unsigned short heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( sizeof( xBlockLink ) % portBYTE_ALIGNMENT ) );
   2b810:	00000010 	andeq	r0, r0, r0, lsl r0

0002b814 <xTotalHeapSize>:
static const size_t xTotalHeapSize = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   2b814:	00001000 	andeq	r1, r0, r0
   2b818:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
   2b81c:	72452053 	subvc	r2, r5, #83	; 0x53
   2b820:	3a726f72 	bcc	1cc75f0 <__bss_end+0x1c1a318>
   2b824:	00000020 	andeq	r0, r0, r0, lsr #32
   2b828:	20293028 	eorcs	r3, r9, r8, lsr #32
   2b82c:	63637553 	cmnvs	r3, #348127232	; 0x14c00000
   2b830:	65646565 	strbvs	r6, [r4, #-1381]!	; 0xfffffa9b
   2b834:	00000064 	andeq	r0, r0, r4, rrx
   2b838:	20293128 	eorcs	r3, r9, r8, lsr #2
   2b83c:	61682041 	cmnvs	r8, r1, asr #32
   2b840:	65206472 	strvs	r6, [r0, #-1138]!	; 0xfffffb8e
   2b844:	726f7272 	rsbvc	r7, pc, #536870919	; 0x20000007
   2b848:	63636f20 	cmnvs	r3, #32, 30	; 0x80
   2b84c:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
   2b850:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
   2b854:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
   2b858:	776f6c20 	strbvc	r6, [pc, -r0, lsr #24]!
   2b85c:	76656c20 	strbtvc	r6, [r5], -r0, lsr #24
   2b860:	64206c65 	strtvs	r6, [r0], #-3173	; 0xfffff39b
   2b864:	206b7369 	rsbcs	r7, fp, r9, ror #6
   2b868:	204f2f49 	subcs	r2, pc, r9, asr #30
   2b86c:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
   2b870:	00000072 	andeq	r0, r0, r2, ror r0
   2b874:	20293228 	eorcs	r3, r9, r8, lsr #4
   2b878:	65737341 	ldrbvs	r7, [r3, #-833]!	; 0xfffffcbf
   2b87c:	6f697472 	svcvs	0x00697472
   2b880:	6166206e 	cmnvs	r6, lr, rrx
   2b884:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
   2b888:	00000000 	andeq	r0, r0, r0
   2b88c:	20293328 	eorcs	r3, r9, r8, lsr #6
   2b890:	20656854 	rsbcs	r6, r5, r4, asr r8
   2b894:	73796870 	cmnvc	r9, #112, 16	; 0x700000
   2b898:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
   2b89c:	69726420 	ldmdbvs	r2!, {r5, sl, sp, lr}^
   2b8a0:	63206576 			; <UNDEFINED> instruction: 0x63206576
   2b8a4:	6f6e6e61 	svcvs	0x006e6e61
   2b8a8:	6f772074 	svcvs	0x00772074
   2b8ac:	00006b72 	andeq	r6, r0, r2, ror fp
   2b8b0:	20293428 	eorcs	r3, r9, r8, lsr #8
   2b8b4:	6c756f43 	ldclvs	15, cr6, [r5], #-268	; 0xfffffef4
   2b8b8:	6f6e2064 	svcvs	0x006e2064
   2b8bc:	69662074 	stmdbvs	r6!, {r2, r4, r5, r6, sp}^
   2b8c0:	7420646e 	strtvc	r6, [r0], #-1134	; 0xfffffb92
   2b8c4:	66206568 	strtvs	r6, [r0], -r8, ror #10
   2b8c8:	00656c69 	rsbeq	r6, r5, r9, ror #24
   2b8cc:	20293528 	eorcs	r3, r9, r8, lsr #10
   2b8d0:	6c756f43 	ldclvs	15, cr6, [r5], #-268	; 0xfffffef4
   2b8d4:	6f6e2064 	svcvs	0x006e2064
   2b8d8:	69662074 	stmdbvs	r6!, {r2, r4, r5, r6, sp}^
   2b8dc:	7420646e 	strtvc	r6, [r0], #-1134	; 0xfffffb92
   2b8e0:	70206568 	eorvc	r6, r0, r8, ror #10
   2b8e4:	00687461 	rsbeq	r7, r8, r1, ror #8
   2b8e8:	20293628 	eorcs	r3, r9, r8, lsr #12
   2b8ec:	20656854 	rsbcs	r6, r5, r4, asr r8
   2b8f0:	68746170 	ldmdavs	r4!, {r4, r5, r6, r8, sp, lr}^
   2b8f4:	6d616e20 	stclvs	14, cr6, [r1, #-128]!	; 0xffffff80
   2b8f8:	6f662065 	svcvs	0x00662065
   2b8fc:	74616d72 	strbtvc	r6, [r1], #-3442	; 0xfffff28e
   2b900:	20736920 	rsbscs	r6, r3, r0, lsr #18
   2b904:	61766e69 	cmnvs	r6, r9, ror #28
   2b908:	0064696c 	rsbeq	r6, r4, ip, ror #18
   2b90c:	20293728 	eorcs	r3, r9, r8, lsr #14
   2b910:	65636341 	strbvs	r6, [r3, #-833]!	; 0xfffffcbf
   2b914:	64207373 	strtvs	r7, [r0], #-883	; 0xfffffc8d
   2b918:	65696e65 	strbvs	r6, [r9, #-3685]!	; 0xfffff19b
   2b91c:	75642064 	strbvc	r2, [r4, #-100]!	; 0xffffff9c
   2b920:	6f742065 	svcvs	0x00742065
   2b924:	6f727020 	svcvs	0x00727020
   2b928:	69626968 	stmdbvs	r2!, {r3, r5, r6, r8, fp, sp, lr}^
   2b92c:	20646574 	rsbcs	r6, r4, r4, ror r5
   2b930:	65636361 	strbvs	r6, [r3, #-865]!	; 0xfffffc9f
   2b934:	6f207373 	svcvs	0x00207373
   2b938:	69642072 	stmdbvs	r4!, {r1, r4, r5, r6, sp}^
   2b93c:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
   2b940:	2079726f 	rsbscs	r7, r9, pc, ror #4
   2b944:	6c6c7566 	cfstr64vs	mvdx7, [ip], #-408	; 0xfffffe68
   2b948:	00000000 	andeq	r0, r0, r0
   2b94c:	20293828 	eorcs	r3, r9, r8, lsr #16
   2b950:	65636341 	strbvs	r6, [r3, #-833]!	; 0xfffffcbf
   2b954:	64207373 	strtvs	r7, [r0], #-883	; 0xfffffc8d
   2b958:	65696e65 	strbvs	r6, [r9, #-3685]!	; 0xfffff19b
   2b95c:	75642064 	strbvc	r2, [r4, #-100]!	; 0xffffff9c
   2b960:	6f742065 	svcvs	0x00742065
   2b964:	6f727020 	svcvs	0x00727020
   2b968:	69626968 	stmdbvs	r2!, {r3, r5, r6, r8, fp, sp, lr}^
   2b96c:	20646574 	rsbcs	r6, r4, r4, ror r5
   2b970:	65636361 	strbvs	r6, [r3, #-865]!	; 0xfffffc9f
   2b974:	00007373 	andeq	r7, r0, r3, ror r3
   2b978:	20293928 	eorcs	r3, r9, r8, lsr #18
   2b97c:	20656854 	rsbcs	r6, r5, r4, asr r8
   2b980:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
   2b984:	7269642f 	rsbvc	r6, r9, #788529152	; 0x2f000000
   2b988:	6f746365 	svcvs	0x00746365
   2b98c:	6f207972 	svcvs	0x00207972
   2b990:	63656a62 	cmnvs	r5, #401408	; 0x62000
   2b994:	73692074 	cmnvc	r9, #116	; 0x74
   2b998:	766e6920 	strbtvc	r6, [lr], -r0, lsr #18
   2b99c:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
   2b9a0:	00000000 	andeq	r0, r0, r0
   2b9a4:	29303128 	ldmdbcs	r0!, {r3, r5, r8, ip, sp}
   2b9a8:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2b9ac:	79687020 	stmdbvc	r8!, {r5, ip, sp, lr}^
   2b9b0:	61636973 	smcvs	13971	; 0x3693
   2b9b4:	7264206c 	rsbvc	r2, r4, #108	; 0x6c
   2b9b8:	20657669 	rsbcs	r7, r5, r9, ror #12
   2b9bc:	77207369 	strvc	r7, [r0, -r9, ror #6]!
   2b9c0:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
   2b9c4:	6f727020 	svcvs	0x00727020
   2b9c8:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
   2b9cc:	00006465 	andeq	r6, r0, r5, ror #8
   2b9d0:	29313128 	ldmdbcs	r1!, {r3, r5, r8, ip, sp}
   2b9d4:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2b9d8:	676f6c20 	strbvs	r6, [pc, -r0, lsr #24]!
   2b9dc:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
   2b9e0:	69726420 	ldmdbvs	r2!, {r5, sl, sp, lr}^
   2b9e4:	6e206576 	mcrvs	5, 1, r6, cr0, cr6, {3}
   2b9e8:	65626d75 	strbvs	r6, [r2, #-3445]!	; 0xfffff28b
   2b9ec:	73692072 	cmnvc	r9, #114	; 0x72
   2b9f0:	766e6920 	strbtvc	r6, [lr], -r0, lsr #18
   2b9f4:	64696c61 	strbtvs	r6, [r9], #-3169	; 0xfffff39f
   2b9f8:	00000000 	andeq	r0, r0, r0
   2b9fc:	29323128 	ldmdbcs	r2!, {r3, r5, r8, ip, sp}
   2ba00:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2ba04:	6c6f7620 	stclvs	6, cr7, [pc], #-128	; 2b98c <xTotalHeapSize+0x178>
   2ba08:	20656d75 	rsbcs	r6, r5, r5, ror sp
   2ba0c:	20736168 	rsbscs	r6, r3, r8, ror #2
   2ba10:	77206f6e 	strvc	r6, [r0, -lr, ror #30]!
   2ba14:	206b726f 	rsbcs	r7, fp, pc, ror #4
   2ba18:	61657261 	cmnvs	r5, r1, ror #4
   2ba1c:	00000000 	andeq	r0, r0, r0
   2ba20:	29333128 	ldmdbcs	r3!, {r3, r5, r8, ip, sp}
   2ba24:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2ba28:	69206572 	stmdbvs	r0!, {r1, r4, r5, r6, r8, sl, sp, lr}
   2ba2c:	6f6e2073 	svcvs	0x006e2073
   2ba30:	6c617620 	stclvs	6, cr7, [r1], #-128	; 0xffffff80
   2ba34:	46206469 	strtmi	r6, [r0], -r9, ror #8
   2ba38:	76205441 	strtvc	r5, [r0], -r1, asr #8
   2ba3c:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
   2ba40:	00000065 	andeq	r0, r0, r5, rrx
   2ba44:	29343128 	ldmdbcs	r4!, {r3, r5, r8, ip, sp}
   2ba48:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2ba4c:	6d5f6620 	ldclvs	6, cr6, [pc, #-128]	; 2b9d4 <xTotalHeapSize+0x1c0>
   2ba50:	2873666b 	ldmdacs	r3!, {r0, r1, r3, r5, r6, r9, sl, sp, lr}^
   2ba54:	62612029 	rsbvs	r2, r1, #41	; 0x29
   2ba58:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0xfffffd91
   2ba5c:	75642064 	strbvc	r2, [r4, #-100]!	; 0xffffff9c
   2ba60:	6f742065 	svcvs	0x00742065
   2ba64:	796e6120 	stmdbvc	lr!, {r5, r8, sp, lr}^
   2ba68:	6f727020 	svcvs	0x00727020
   2ba6c:	6d656c62 	stclvs	12, cr6, [r5, #-392]!	; 0xfffffe78
   2ba70:	00000000 	andeq	r0, r0, r0
   2ba74:	29353128 	ldmdbcs	r5!, {r3, r5, r8, ip, sp}
   2ba78:	756f4320 	strbvc	r4, [pc, #-800]!	; 2b760 <strncpy+0x30>
   2ba7c:	6e20646c 	cdpvs	4, 2, cr6, cr0, cr12, {3}
   2ba80:	6720746f 	strvs	r7, [r0, -pc, ror #8]!
   2ba84:	61207465 			; <UNDEFINED> instruction: 0x61207465
   2ba88:	61726720 	cmnvs	r2, r0, lsr #14
   2ba8c:	7420746e 	strtvc	r7, [r0], #-1134	; 0xfffffb92
   2ba90:	6361206f 	cmnvs	r1, #111	; 0x6f
   2ba94:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
   2ba98:	65687420 	strbvs	r7, [r8, #-1056]!	; 0xfffffbe0
   2ba9c:	6c6f7620 	stclvs	6, cr7, [pc], #-128	; 2ba24 <xTotalHeapSize+0x210>
   2baa0:	20656d75 	rsbcs	r6, r5, r5, ror sp
   2baa4:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
   2baa8:	64206e69 	strtvs	r6, [r0], #-3689	; 0xfffff197
   2baac:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
   2bab0:	70206465 	eorvc	r6, r0, r5, ror #8
   2bab4:	6f697265 	svcvs	0x00697265
   2bab8:	00000064 	andeq	r0, r0, r4, rrx
   2babc:	29363128 	ldmdbcs	r6!, {r3, r5, r8, ip, sp}
   2bac0:	65685420 	strbvs	r5, [r8, #-1056]!	; 0xfffffbe0
   2bac4:	65706f20 	ldrbvs	r6, [r0, #-3872]!	; 0xfffff0e0
   2bac8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
   2bacc:	69206e6f 	stmdbvs	r0!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
   2bad0:	65722073 	ldrbvs	r2, [r2, #-115]!	; 0xffffff8d
   2bad4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
   2bad8:	61206465 			; <UNDEFINED> instruction: 0x61206465
   2badc:	726f6363 	rsbvc	r6, pc, #-1946157055	; 0x8c000001
   2bae0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
   2bae4:	206f7420 	rsbcs	r7, pc, r0, lsr #8
   2bae8:	20656874 	rsbcs	r6, r5, r4, ror r8
   2baec:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
   2baf0:	61687320 	cmnvs	r8, r0, lsr #6
   2baf4:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
   2baf8:	6c6f7020 	stclvs	0, cr7, [pc], #-128	; 2ba80 <xTotalHeapSize+0x26c>
   2bafc:	00796369 	rsbseq	r6, r9, r9, ror #6
   2bb00:	29373128 	ldmdbcs	r7!, {r3, r5, r8, ip, sp}
   2bb04:	4e464c20 	cdpmi	12, 4, cr4, cr6, cr0, {1}
   2bb08:	726f7720 	rsbvc	r7, pc, #32, 14	; 0x800000
   2bb0c:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
   2bb10:	66756220 	ldrbtvs	r6, [r5], -r0, lsr #4
   2bb14:	20726566 	rsbscs	r6, r2, r6, ror #10
   2bb18:	6c756f63 	ldclvs	15, cr6, [r5], #-396	; 0xfffffe74
   2bb1c:	6f6e2064 	svcvs	0x006e2064
   2bb20:	65622074 	strbvs	r2, [r2, #-116]!	; 0xffffff8c
   2bb24:	6c6c6120 	stfvse	f6, [ip], #-128	; 0xffffff80
   2bb28:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
   2bb2c:	00006465 	andeq	r6, r0, r5, ror #8
   2bb30:	29383128 	ldmdbcs	r8!, {r3, r5, r8, ip, sp}
   2bb34:	6d754e20 	ldclvs	14, cr4, [r5, #-128]!	; 0xffffff80
   2bb38:	20726562 	rsbscs	r6, r2, r2, ror #10
   2bb3c:	6f20666f 	svcvs	0x0020666f
   2bb40:	206e6570 	rsbcs	r6, lr, r0, ror r5
   2bb44:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
   2bb48:	203e2073 	eorscs	r2, lr, r3, ror r0
   2bb4c:	465f4646 	ldrbmi	r4, [pc], -r6, asr #12
   2bb50:	4f4c5f53 	svcmi	0x004c5f53
   2bb54:	00004b43 	andeq	r4, r0, r3, asr #22
   2bb58:	29393128 	ldmdbcs	r9!, {r3, r5, r8, ip, sp}
   2bb5c:	76694720 	strbtvc	r4, [r9], -r0, lsr #14
   2bb60:	70206e65 	eorvc	r6, r0, r5, ror #28
   2bb64:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
   2bb68:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
   2bb6c:	20736920 	rsbscs	r6, r3, r0, lsr #18
   2bb70:	61766e69 	cmnvs	r6, r9, ror #28
   2bb74:	0064696c 	rsbeq	r6, r4, ip, ror #18
   2bb78:	6e6b6e55 	mcrvs	14, 3, r6, cr11, cr5, {2}
   2bb7c:	206e776f 	rsbcs	r7, lr, pc, ror #14
   2bb80:	6f727265 	svcvs	0x00727265
   2bb84:	6f632072 	svcvs	0x00632072
   2bb88:	00006564 	andeq	r6, r0, r4, ror #10
   2bb8c:	0000000a 	andeq	r0, r0, sl
   2bb90:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
   2bb94:	61542053 	cmpvs	r4, r3, asr r0
   2bb98:	53206b73 			; <UNDEFINED> instruction: 0x53206b73
   2bb9c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
   2bba0:	000a6465 	andeq	r6, sl, r5, ror #8
   2bba4:	00000000 	andeq	r0, r0, r0
   2bba8:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
   2bbac:	69747461 	ldmdbvs	r4!, {r0, r5, r6, sl, ip, sp, lr}^
   2bbb0:	6420676e 	strtvs	r6, [r0], #-1902	; 0xfffff892
   2bbb4:	2e6b7369 	cdpcs	3, 6, cr7, cr11, cr9, {3}
   2bbb8:	000a2e2e 	andeq	r2, sl, lr, lsr #28
   2bbbc:	6d726f46 	ldclvs	15, cr6, [r2, #-280]!	; 0xfffffee8
   2bbc0:	72207461 	eorvc	r7, r0, #1627389952	; 0x61000000
   2bbc4:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
   2bbc8:	00203a74 	eoreq	r3, r0, r4, ror sl
   2bbcc:	63637553 	cmnvs	r3, #348127232	; 0x14c00000
   2bbd0:	0a737365 	beq	1d0896c <__bss_end+0x1c5b694>
   2bbd4:	00000000 	andeq	r0, r0, r0
   2bbd8:	6e756f4d 	cdpvs	15, 7, cr6, cr5, cr13, {2}
   2bbdc:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
   2bbe0:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
   2bbe4:	73797365 	cmnvc	r9, #-1811939327	; 0x94000001
   2bbe8:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
   2bbec:	000a2e2e 	andeq	r2, sl, lr, lsr #28
   2bbf0:	6e756f4d 	cdpvs	15, 7, cr6, cr5, cr13, {2}
   2bbf4:	61662074 	smcvs	25092	; 0x6204
   2bbf8:	64656c69 	strbtvs	r6, [r5], #-3177	; 0xfffff397
   2bbfc:	0000203a 	andeq	r2, r0, sl, lsr r0
   2bc00:	656c6946 	strbvs	r6, [ip, #-2374]!	; 0xfffff6ba
   2bc04:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0xfffff68d
   2bc08:	6d206d65 	stcvs	13, cr6, [r0, #-404]!	; 0xfffffe6c
   2bc0c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
   2bc10:	73206465 			; <UNDEFINED> instruction: 0x73206465
   2bc14:	65636375 	strbvs	r6, [r3, #-885]!	; 0xfffffc8b
   2bc18:	75667373 	strbvc	r7, [r6, #-883]!	; 0xfffffc8d
   2bc1c:	0a796c6c 	beq	1e86dd4 <__bss_end+0x1dd9afc>
   2bc20:	00000000 	andeq	r0, r0, r0
   2bc24:	61657243 	cmnvs	r5, r3, asr #4
   2bc28:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
   2bc2c:	73657420 	cmnvc	r5, #32, 8	; 0x20000000
   2bc30:	69662074 	stmdbvs	r6!, {r2, r4, r5, r6, sp}^
   2bc34:	2e2e656c 	cfsh64cs	mvdx6, mvdx14, #60
   2bc38:	00000a2e 	andeq	r0, r0, lr, lsr #20
   2bc3c:	54534554 	ldrbpl	r4, [r3], #-1364	; 0xfffffaac
   2bc40:	5458542e 	ldrbpl	r5, [r8], #-1070	; 0xfffffbd2
   2bc44:	00000000 	andeq	r0, r0, r0
   2bc48:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
   2bc4c:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
   2bc50:	7263206f 	rsbvc	r2, r3, #111	; 0x6f
   2bc54:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
   2bc58:	6c696620 	stclvs	6, cr6, [r9], #-128	; 0xffffff80
   2bc5c:	00203a65 	eoreq	r3, r0, r5, ror #20
   2bc60:	63656843 	cmnvs	r5, #4390912	; 0x430000
   2bc64:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
   2bc68:	6f6f7220 	svcvs	0x006f7220
   2bc6c:	69642074 	stmdbvs	r4!, {r2, r4, r5, r6, sp}^
   2bc70:	74636572 	strbtvc	r6, [r3], #-1394	; 0xfffffa8e
   2bc74:	2e79726f 	cdpcs	2, 7, cr7, cr9, cr15, {3}
   2bc78:	000a2e2e 	andeq	r2, sl, lr, lsr #28
   2bc7c:	0000002f 	andeq	r0, r0, pc, lsr #32
   2bc80:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
   2bc84:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
   2bc88:	706f206f 	rsbvc	r2, pc, pc, rrx
   2bc8c:	72206e65 	eorvc	r6, r0, #1616	; 0x650
   2bc90:	20746f6f 	rsbscs	r6, r4, pc, ror #30
   2bc94:	65726964 	ldrbvs	r6, [r2, #-2404]!	; 0xfffff69c
   2bc98:	726f7463 	rsbvc	r7, pc, #1660944384	; 0x63000000
   2bc9c:	00203a79 	eoreq	r3, r0, r9, ror sl
   2bca0:	746f6f52 	strbtvc	r6, [pc], #-3922	; 2bca8 <xTotalHeapSize+0x494>
   2bca4:	72696420 	rsbvc	r6, r9, #32, 8	; 0x20000000
   2bca8:	6f746365 	svcvs	0x00746365
   2bcac:	6f207972 	svcvs	0x00207972
   2bcb0:	656e6570 	strbvs	r6, [lr, #-1392]!	; 0xfffffa90
   2bcb4:	75732064 	ldrbvc	r2, [r3, #-100]!	; 0xffffff9c
   2bcb8:	73656363 	cmnvc	r5, #-1946157055	; 0x8c000001
   2bcbc:	6c756673 	ldclvs	6, cr6, [r5], #-460	; 0xfffffe34
   2bcc0:	000a796c 	andeq	r7, sl, ip, ror #18
   2bcc4:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	; 0xfffffee0
   2bcc8:	7266206f 	rsbvc	r2, r6, #111	; 0x6f
   2bccc:	46206d6f 	strtmi	r6, [r0], -pc, ror #26
   2bcd0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
   2bcd4:	20534f54 	subscs	r4, r3, r4, asr pc
   2bcd8:	20646e61 	rsbcs	r6, r4, r1, ror #28
   2bcdc:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
   2bce0:	6e692053 	mcrvs	0, 3, r2, cr9, cr3, {2}
   2bce4:	72676574 	rsbvc	r6, r7, #116, 10	; 0x1d000000
   2bce8:	6f697461 	svcvs	0x00697461
   2bcec:	000a216e 	andeq	r2, sl, lr, ror #2
   2bcf0:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
   2bcf4:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
   2bcf8:	7277206f 	rsbsvc	r2, r7, #111	; 0x6f
   2bcfc:	20657469 	rsbcs	r7, r5, r9, ror #8
   2bd00:	66206f74 	qsub16vs	r6, r0, r4
   2bd04:	3a656c69 	bcc	1986eb0 <__bss_end+0x18d9bd8>
   2bd08:	00000020 	andeq	r0, r0, r0, lsr #32
   2bd0c:	656c6946 	strbvs	r6, [ip, #-2374]!	; 0xfffff6ba
   2bd10:	69727720 	ldmdbvs	r2!, {r5, r8, r9, sl, ip, sp, lr}^
   2bd14:	6e657474 	mcrvs	4, 3, r7, cr5, cr4, {3}
   2bd18:	63757320 	cmnvs	r5, #32, 6	; 0x80000000
   2bd1c:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
   2bd20:	6c6c7566 	cfstr64vs	mvdx7, [ip], #-408	; 0xfffffe68
   2bd24:	00202c79 	eoreq	r2, r0, r9, ror ip
   2bd28:	74796220 	ldrbtvc	r6, [r9], #-544	; 0xfffffde0
   2bd2c:	77207365 	strvc	r7, [r0, -r5, ror #6]!
   2bd30:	74746972 	ldrbtvc	r6, [r4], #-2418	; 0xfffff68e
   2bd34:	000a6e65 	andeq	r6, sl, r5, ror #28
   2bd38:	6e65704f 	cdpvs	0, 6, cr7, cr5, cr15, {2}
   2bd3c:	20676e69 	rsbcs	r6, r7, r9, ror #28
   2bd40:	656c6966 	strbvs	r6, [ip, #-2406]!	; 0xfffff69a
   2bd44:	726f6620 	rsbvc	r6, pc, #32, 12	; 0x2000000
   2bd48:	61657220 	cmnvs	r5, r0, lsr #4
   2bd4c:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
   2bd50:	0a2e2e2e 	beq	bb7610 <__bss_end+0xb0a338>
   2bd54:	00000000 	andeq	r0, r0, r0
   2bd58:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
   2bd5c:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
   2bd60:	706f206f 	rsbvc	r2, pc, pc, rrx
   2bd64:	66206e65 	strtvs	r6, [r0], -r5, ror #28
   2bd68:	20656c69 	rsbcs	r6, r5, r9, ror #24
   2bd6c:	20726f66 	rsbscs	r6, r2, r6, ror #30
   2bd70:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
   2bd74:	3a676e69 	bcc	1a07720 <__bss_end+0x195a448>
   2bd78:	00000020 	andeq	r0, r0, r0, lsr #32
   2bd7c:	6c696146 	stfvse	f6, [r9], #-280	; 0xfffffee8
   2bd80:	74206465 	strtvc	r6, [r0], #-1125	; 0xfffffb9b
   2bd84:	6572206f 	ldrbvs	r2, [r2, #-111]!	; 0xffffff91
   2bd88:	66206461 	strtvs	r6, [r0], -r1, ror #8
   2bd8c:	3a656c69 	bcc	1986f38 <__bss_end+0x18d9c60>
   2bd90:	00000020 	andeq	r0, r0, r0, lsr #32
   2bd94:	656c6946 	strbvs	r6, [ip, #-2374]!	; 0xfffff6ba
   2bd98:	6e6f6320 	cdpvs	3, 6, cr6, cr15, cr0, {1}
   2bd9c:	746e6574 	strbtvc	r6, [lr], #-1396	; 0xfffffa8c
   2bda0:	0000203a 	andeq	r2, r0, sl, lsr r0
   2bda4:	6c6c6548 	cfstr64vs	mvdx6, [ip], #-288	; 0xfffffee0
   2bda8:	7266206f 	rsbvc	r2, r6, #111	; 0x6f
   2bdac:	46206d6f 	strtmi	r6, [r0], -pc, ror #26
   2bdb0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
   2bdb4:	20534f54 	subscs	r4, r3, r4, asr pc
   2bdb8:	68746977 	ldmdavs	r4!, {r0, r1, r2, r4, r5, r6, r8, fp, sp, lr}^
   2bdbc:	74614620 	strbtvc	r4, [r1], #-1568	; 0xfffff9e0
   2bdc0:	0a215346 	beq	880ae0 <__bss_end+0x7d3808>
   2bdc4:	00000000 	andeq	r0, r0, r0
   2bdc8:	5f44454c 	svcpl	0x0044454c
   2bdcc:	00000030 	andeq	r0, r0, r0, lsr r0
   2bdd0:	5f44454c 	svcpl	0x0044454c
   2bdd4:	00000031 	andeq	r0, r0, r1, lsr r0
   2bdd8:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
   2bddc:	00000053 	andeq	r0, r0, r3, asr r0

0002bde0 <ExCvt>:
static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CODE_PAGE);
   2bde0:	41459a80 	smlalbbmi	r9, r5, r0, sl
   2bde4:	808f418e 	addhi	r4, pc, lr, lsl #3
   2bde8:	49454545 	stmdbmi	r5, {r0, r2, r6, r8, sl, lr}^
   2bdec:	8f8e4949 	svchi	0x008e4949
   2bdf0:	4f929290 	svcmi	0x00929290
   2bdf4:	55554f99 	ldrbpl	r4, [r5, #-3993]	; 0xfffff067
   2bdf8:	9b9a9959 	blls	fe6d2364 <_estack+0xf66b2364>
   2bdfc:	9f9e9d9c 	svcls	0x009e9d9c
   2be00:	554f4941 	strbpl	r4, [pc, #-2369]	; 2b4c7 <memset+0x63>
   2be04:	a7a6a5a5 	strge	sl, [r6, r5, lsr #11]!
   2be08:	abaaa9a8 	blge	fead64b0 <_estack+0xf6ab64b0>
   2be0c:	afaeadac 	svcge	0x00aeadac
   2be10:	b3b2b1b0 			; <UNDEFINED> instruction: 0xb3b2b1b0
   2be14:	b7b6b5b4 			; <UNDEFINED> instruction: 0xb7b6b5b4
   2be18:	bbbab9b8 	bllt	feeda500 <_estack+0xf6eba500>
   2be1c:	bfbebdbc 	svclt	0x00bebdbc
   2be20:	c3c2c1c0 	bicgt	ip, r2, #192, 2	; 0x30
   2be24:	c7c6c5c4 	strbgt	ip, [r6, r4, asr #11]
   2be28:	cbcac9c8 	blgt	ff2de550 <_estack+0xf72be550>
   2be2c:	cfcecdcc 	svcgt	0x00cecdcc
   2be30:	d3d2d1d0 	bicsle	sp, r2, #208, 2	; 0x34
   2be34:	d7d6d5d4 			; <UNDEFINED> instruction: 0xd7d6d5d4
   2be38:	dbdad9d8 	blle	ff6e25a0 <_estack+0xf76c25a0>
   2be3c:	dfdedddc 	svcle	0x00dedddc
   2be40:	e3e2e1e0 	mvn	lr, #224, 2	; 0x38
   2be44:	e7e6e5e4 	strb	lr, [r6, r4, ror #11]!
   2be48:	ebeae9e8 	bl	ffae65f0 <_estack+0xf7ac65f0>
   2be4c:	efeeedec 	svc	0x00eeedec
   2be50:	f3f2f1f0 	vsra.u64	<illegal reg q15.5>, q8, #14
   2be54:	f7f6f5f4 			; <UNDEFINED> instruction: 0xf7f6f5f4
   2be58:	fbfaf9f8 	blx	ffeea642 <_estack+0xf7eca642>
   2be5c:	fffefdfc 			; <UNDEFINED> instruction: 0xfffefdfc
   2be60:	3a2c2b2a 	bcc	b36b10 <__bss_end+0xa89838>
   2be64:	3e3d3c3b 	mrccc	12, 1, r3, cr13, cr11, {1}
   2be68:	227c5d5b 	rsbscs	r5, ip, #5824	; 0x16c0
   2be6c:	00007f3f 	andeq	r7, r0, pc, lsr pc
   2be70:	33544146 	cmpcc	r4, #-2147483631	; 0x80000011
   2be74:	20202032 	eorcs	r2, r0, r2, lsr r0
   2be78:	00000000 	andeq	r0, r0, r0
   2be7c:	4d90feeb 	ldcmi	14, cr15, [r0, #940]	; 0x3ac
   2be80:	534f4453 	movtpl	r4, #62547	; 0xf453
   2be84:	00302e35 	eorseq	r2, r0, r5, lsr lr
   2be88:	4e204f4e 	cdpmi	15, 2, cr4, cr0, cr14, {2}
   2be8c:	20454d41 	subcs	r4, r5, r1, asr #26
   2be90:	46202020 	strtmi	r2, [r0], -r0, lsr #32
   2be94:	32335441 	eorscc	r5, r3, #1090519040	; 0x41000000
   2be98:	00202020 	eoreq	r2, r0, r0, lsr #32
   2be9c:	4e204f4e 	cdpmi	15, 2, cr4, cr0, cr14, {2}
   2bea0:	20454d41 	subcs	r4, r5, r1, asr #26
   2bea4:	46202020 	strtmi	r2, [r0], -r0, lsr #32
   2bea8:	20205441 	eorcs	r5, r0, r1, asr #8
   2beac:	00202020 	eoreq	r2, r0, r0, lsr #32

0002beb0 <defopt.2>:
   2beb0:	00000007 	andeq	r0, r0, r7
	...

0002bec0 <cst32.1>:
   2bec0:	00020001 	andeq	r0, r2, r1
   2bec4:	00080004 	andeq	r0, r8, r4
   2bec8:	00200010 	eoreq	r0, r0, r0, lsl r0
   2becc:	00000000 	andeq	r0, r0, r0

0002bed0 <cst.0>:
   2bed0:	00040001 	andeq	r0, r4, r1
   2bed4:	00400010 	subeq	r0, r0, r0, lsl r0
   2bed8:	02000100 	andeq	r0, r0, #0, 2
	...

Disassembly of section .data:

0002bee0 <ulCriticalNesting>:
volatile unsigned long ulCriticalNesting = 9999UL;
   2bee0:	0000270f 	andeq	r2, r0, pc, lsl #14

0002bee4 <xNextTaskUnblockTime>:
PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
   2bee4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff

0002bee8 <xFreeBytesRemaining>:
static size_t xFreeBytesRemaining = ( ( size_t ) configTOTAL_HEAP_SIZE ) & ( ( size_t ) ~portBYTE_ALIGNMENT_MASK );
   2bee8:	00001000 	andeq	r1, r0, r0

0002beec <Stat>:
   2beec:	Address 0x000000000002beec is out of bounds.


Disassembly of section .bss:

0002bef0 <g_bStarted>:
   2bef0:	00000000 	andeq	r0, r0, r0

0002bef4 <pxReadyCoRoutineLists>:
	...

0002bf1c <xDelayedCoRoutineList1>:
	...

0002bf30 <xDelayedCoRoutineList2>:
	...

0002bf44 <pxDelayedCoRoutineList>:
static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently being used. */
   2bf44:	00000000 	andeq	r0, r0, r0

0002bf48 <pxOverflowDelayedCoRoutineList>:
static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list currently being used to hold co-routines that have overflowed the current tick count. */
   2bf48:	00000000 	andeq	r0, r0, r0

0002bf4c <xPendingReadyCoRoutineList>:
	...

0002bf60 <pxCurrentCoRoutine>:
corCRCB * pxCurrentCoRoutine = NULL;
   2bf60:	00000000 	andeq	r0, r0, r0

0002bf64 <uxTopCoRoutineReadyPriority>:
static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
   2bf64:	00000000 	andeq	r0, r0, r0

0002bf68 <xCoRoutineTickCount>:
static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
   2bf68:	00000000 	andeq	r0, r0, r0

0002bf6c <xLastTickCount>:
   2bf6c:	00000000 	andeq	r0, r0, r0

0002bf70 <xPassedTicks>:
   2bf70:	00000000 	andeq	r0, r0, r0

0002bf74 <pxCurrentTCB>:
PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
   2bf74:	00000000 	andeq	r0, r0, r0

0002bf78 <pxReadyTasksLists>:
	...

0002bfdc <xDelayedTaskList1>:
	...

0002bff0 <xDelayedTaskList2>:
	...

0002c004 <pxDelayedTaskList>:
PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list currently being used. */
   2c004:	00000000 	andeq	r0, r0, r0

0002c008 <pxOverflowDelayedTaskList>:
PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task list currently being used to hold tasks that have overflowed the current tick count. */
   2c008:	00000000 	andeq	r0, r0, r0

0002c00c <xPendingReadyList>:
	...

0002c020 <xTasksWaitingTermination>:
	...

0002c034 <uxTasksDeleted>:
	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE ) 0U;
   2c034:	00000000 	andeq	r0, r0, r0

0002c038 <xSuspendedTaskList>:
	...

0002c04c <uxCurrentNumberOfTasks>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBASE_TYPE ) 0U;
   2c04c:	00000000 	andeq	r0, r0, r0

0002c050 <xTickCount>:
PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
   2c050:	00000000 	andeq	r0, r0, r0

0002c054 <uxTopUsedPriority>:
PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
   2c054:	00000000 	andeq	r0, r0, r0

0002c058 <uxTopReadyPriority>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
   2c058:	00000000 	andeq	r0, r0, r0

0002c05c <xSchedulerRunning>:
PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
   2c05c:	00000000 	andeq	r0, r0, r0

0002c060 <uxSchedulerSuspended>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE_TYPE ) pdFALSE;
   2c060:	00000000 	andeq	r0, r0, r0

0002c064 <uxMissedTicks>:
PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE ) 0U;
   2c064:	00000000 	andeq	r0, r0, r0

0002c068 <xMissedYield>:
PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
   2c068:	00000000 	andeq	r0, r0, r0

0002c06c <xNumOfOverflows>:
PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
   2c06c:	00000000 	andeq	r0, r0, r0

0002c070 <uxTaskNumber>:
PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
   2c070:	00000000 	andeq	r0, r0, r0

0002c074 <g_VectorTable>:
	...

0002c2b4 <enabled>:
	...

0002c2c0 <xHeap>:
	...

0002d2c0 <xStart>:
	...

0002d2c8 <pxEnd>:
static xBlockLink xStart, *pxEnd = NULL;
   2d2c8:	00000000 	andeq	r0, r0, r0

0002d2cc <allocated>:
size_t allocated = 0;
   2d2cc:	00000000 	andeq	r0, r0, r0

0002d2d0 <FatFs>:
static FATFS *FatFs[FF_VOLUMES];	/* Pointer to the filesystem objects (logical drives) */
   2d2d0:	00000000 	andeq	r0, r0, r0

0002d2d4 <Fsid>:
static WORD Fsid;					/* Filesystem mount ID */
   2d2d4:	00000000 	andeq	r0, r0, r0

0002d2d8 <ramdisk>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	00000212 	andeq	r0, r0, r2, lsl r2
       4:	00000004 	andeq	r0, r0, r4
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000037 	andeq	r0, r0, r7, lsr r0
      10:	0000ee0c 	andeq	lr, r0, ip, lsl #28
      14:	0000ae00 	andeq	sl, r0, r0, lsl #28
      18:	02000000 	andeq	r0, r0, #0
      1c:	00034400 	andeq	r4, r3, r0, lsl #8
      20:	00000000 	andeq	r0, r0, r0
      24:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
      28:	00746e69 	rsbseq	r6, r4, r9, ror #28
      2c:	59070403 	stmdbpl	r7, {r0, r1, sl}
      30:	03000006 	movweq	r0, #6
      34:	017b0508 	cmneq	fp, r8, lsl #10
      38:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
      3c:	0001a904 	andeq	sl, r1, r4, lsl #18
      40:	00e20400 	rsceq	r0, r2, r0, lsl #8
      44:	47020000 	strmi	r0, [r2, -r0]
      48:	00004d10 	andeq	r4, r0, r0, lsl sp
      4c:	53040500 	movwpl	r0, #17664	; 0x4500
      50:	06000000 	streq	r0, [r0], -r0
      54:	0000005e 	andeq	r0, r0, lr, asr r0
      58:	00005e07 	andeq	r5, r0, r7, lsl #28
      5c:	04080000 	streq	r0, [r8], #-0
      60:	00000c04 	andeq	r0, r0, r4, lsl #24
      64:	1c610300 	stclne	3, cr0, [r1], #-0
      68:	0000006c 	andeq	r0, r0, ip, rrx
      6c:	54070403 	strpl	r0, [r7], #-1027	; 0xfffffbfd
      70:	03000006 	movweq	r0, #6
      74:	01800504 	orreq	r0, r0, r4, lsl #10
      78:	01030000 	mrseq	r0, (UNDEF: 3)
      7c:	00066806 	andeq	r6, r6, r6, lsl #16
      80:	07020300 	streq	r0, [r2, -r0, lsl #6]
      84:	0000009b 	muleq	r0, fp, r0
      88:	006c0405 	rsbeq	r0, ip, r5, lsl #8
      8c:	87090000 	strhi	r0, [r9, -r0]
      90:	24000000 	strcs	r0, [r0], #-0
      94:	11105601 	tstne	r0, r1, lsl #12
      98:	0a000001 	beq	a4 <_start-0xff5c>
      9c:	00444f4c 	subeq	r4, r4, ip, asr #30
      a0:	6c105701 	ldcvs	7, cr5, [r0], {1}
      a4:	00000000 	andeq	r0, r0, r0
      a8:	4c41560a 	mcrrmi	6, 0, r5, r1, cr10
      ac:	10580100 	subsne	r0, r8, r0, lsl #2
      b0:	0000006c 	andeq	r0, r0, ip, rrx
      b4:	54430a04 	strbpl	r0, [r3], #-2564	; 0xfffff5fc
      b8:	5901004c 	stmdbpl	r1, {r2, r3, r6}
      bc:	00006c10 	andeq	r6, r0, r0, lsl ip
      c0:	430a0800 	movwmi	r0, #43008	; 0xa800
      c4:	0100494c 	tsteq	r0, ip, asr #18
      c8:	006c105a 	rsbeq	r1, ip, sl, asr r0
      cc:	0a0c0000 	beq	3000d4 <__bss_end+0x252dfc>
      d0:	00534952 	subseq	r4, r3, r2, asr r9
      d4:	6c105b01 			; <UNDEFINED> instruction: 0x6c105b01
      d8:	10000000 	andne	r0, r0, r0
      dc:	53494d0a 	movtpl	r4, #40202	; 0x9d0a
      e0:	105c0100 	subsne	r0, ip, r0, lsl #2
      e4:	0000006c 	andeq	r0, r0, ip, rrx
      e8:	4c520a14 	vmovmi	r0, r2, s8, s9
      ec:	5d010044 	stcpl	0, cr0, [r1, #-272]	; 0xfffffef0
      f0:	00006c10 	andeq	r6, r0, r0, lsl ip
      f4:	440a1800 	strmi	r1, [sl], #-2048	; 0xfffff800
      f8:	01005649 	tsteq	r0, r9, asr #12
      fc:	006c105e 	rsbeq	r1, ip, lr, asr r0
     100:	0a1c0000 	beq	700108 <__bss_end+0x652e30>
     104:	00544e43 	subseq	r4, r4, r3, asr #28
     108:	6c105f01 	ldcvs	15, cr5, [r0], {1}
     10c:	20000000 	andcs	r0, r0, r0
     110:	00880400 	addeq	r0, r8, r0, lsl #8
     114:	60010000 	andvs	r0, r1, r0
     118:	00008e03 	andeq	r8, r0, r3, lsl #28
     11c:	01110b00 	tsteq	r1, r0, lsl #22
     120:	960c0000 	strls	r0, [ip], -r0
     124:	01000001 	tsteq	r0, r1
     128:	013a2c62 	teqeq	sl, r2, ror #24
     12c:	03050000 	movweq	r0, #20480	; 0x5000
     130:	0002b7fc 	strdeq	fp, [r2], -ip
     134:	011d0405 	tsteq	sp, r5, lsl #8
     138:	340d0000 	strcc	r0, [sp], #-0
     13c:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
     140:	00000019 	andeq	r0, r0, r9, lsl r0
     144:	ac0deb01 			; <UNDEFINED> instruction: 0xac0deb01
     148:	98000202 	stmdals	r0, {r1, r9}
     14c:	01000000 	mrseq	r0, (UNDEF: 0)
     150:	0001659c 	muleq	r1, ip, r5
     154:	01df0c00 	bicseq	r0, pc, r0, lsl #24
     158:	ed010000 	stc	0, cr0, [r1, #-0]
     15c:	00006c10 	andeq	r6, r0, r0, lsl ip
     160:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     164:	01720f00 	cmneq	r2, r0, lsl #30
     168:	dd010000 	stcle	0, cr0, [r1, #-0]
     16c:	02027406 	andeq	r7, r2, #100663296	; 0x6000000
     170:	00003800 	andeq	r3, r0, r0, lsl #16
     174:	9a9c0100 	bls	fe70057c <_estack+0xf66e057c>
     178:	10000001 	andne	r0, r0, r1
     17c:	00000000 	andeq	r0, r0, r0
     180:	2c1ddd01 	ldccs	13, cr13, [sp], {1}
     184:	02000000 	andeq	r0, r0, #0
     188:	30107491 	mulscc	r0, r1, r4
     18c:	01000000 	mrseq	r0, (UNDEF: 0)
     190:	005e29dd 	ldrsbeq	r2, [lr], #-157	; 0xffffff63
     194:	91020000 	mrsls	r0, (UNDEF: 2)
     198:	52110070 	andspl	r0, r1, #112	; 0x70
     19c:	01000001 	tsteq	r0, r1
     1a0:	025c06d0 	subseq	r0, ip, #208, 12	; 0xd000000
     1a4:	00180002 	andseq	r0, r8, r2
     1a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     1ac:	0001b512 	andeq	fp, r1, r2, lsl r5
     1b0:	0fc20100 	svceq	0x00c20100
     1b4:	00000073 	andeq	r0, r0, r3, ror r0
     1b8:	00020240 	andeq	r0, r2, r0, asr #4
     1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1c0:	c9139c01 	ldmdbgt	r3, {r0, sl, fp, ip, pc}
     1c4:	01000001 	tsteq	r0, r1
     1c8:	00881177 	addeq	r1, r8, r7, ror r1
     1cc:	00000000 	andeq	r0, r0, r0
     1d0:	02400002 	subeq	r0, r0, #2
     1d4:	9c010000 	stcls	0, cr0, [r1], {-0}
     1d8:	00019c10 	andeq	r9, r1, r0, lsl ip
     1dc:	38770100 	ldmdacc	r7!, {r8}^
     1e0:	00000088 	andeq	r0, r0, r8, lsl #1
     1e4:	106c9102 	rsbne	r9, ip, r2, lsl #2
     1e8:	00000005 	andeq	r0, r0, r5
     1ec:	41527701 	cmpmi	r2, r1, lsl #14
     1f0:	02000000 	andeq	r0, r0, #0
     1f4:	89106891 	ldmdbhi	r0, {r0, r4, r7, fp, sp, lr}
     1f8:	01000001 	tsteq	r0, r1
     1fc:	005e6077 	subseq	r6, lr, r7, ror r0
     200:	91020000 	mrsls	r0, (UNDEF: 2)
     204:	01640c64 	cmneq	r4, r4, ror #24
     208:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
     20c:	00008811 	andeq	r8, r0, r1, lsl r8
     210:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     214:	01980000 	orrseq	r0, r8, r0
     218:	00040000 	andeq	r0, r4, r0
     21c:	00000133 	andeq	r0, r0, r3, lsr r1
     220:	00370104 	eorseq	r0, r7, r4, lsl #2
     224:	010c0000 	mrseq	r0, (UNDEF: 12)
     228:	ae000002 	cdpge	0, 0, cr0, cr0, cr2, {0}
     22c:	44000000 	strmi	r0, [r0], #-0
     230:	a4000203 	strge	r0, [r0], #-515	; 0xfffffdfd
     234:	e0000002 	and	r0, r0, r2
     238:	02000001 	andeq	r0, r0, #1
     23c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     240:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     244:	00065907 	andeq	r5, r6, r7, lsl #18
     248:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     24c:	0000017b 	andeq	r0, r0, fp, ror r1
     250:	a9040803 	stmdbge	r4, {r0, r1, fp}
     254:	03000001 	movweq	r0, #1
     258:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
     25c:	41040000 	mrsmi	r0, (UNDEF: 4)
     260:	03000000 	movweq	r0, #0
     264:	01800504 	orreq	r0, r0, r4, lsl #10
     268:	68050000 	stmdavs	r5, {}	; <UNPREDICTABLE>
     26c:	01000002 	tsteq	r0, r2
     270:	00481865 	subeq	r1, r8, r5, ror #16
     274:	03050000 	movweq	r0, #20480	; 0x5000
     278:	0002bee0 	andeq	fp, r2, r0, ror #29
     27c:	0002c505 	andeq	ip, r2, r5, lsl #10
     280:	05730100 	ldrbeq	r0, [r3, #-256]!	; 0xffffff00
     284:	00000025 	andeq	r0, r0, r5, lsr #32
     288:	bef00305 	cdplt	3, 15, cr0, cr0, cr5, {0}
     28c:	7a060002 	bvc	18029c <__bss_end+0xd2fc4>
     290:	01000002 	tsteq	r0, r2
     294:	058406fe 	streq	r0, [r4, #1790]	; 0x6fe
     298:	00640002 	rsbeq	r0, r4, r2
     29c:	9c010000 	stcls	0, cr0, [r1], {-0}
     2a0:	0001ee06 	andeq	lr, r1, r6, lsl #28
     2a4:	06ee0100 	strbteq	r0, [lr], r0, lsl #2
     2a8:	00020540 	andeq	r0, r2, r0, asr #10
     2ac:	00000044 	andeq	r0, r0, r4, asr #32
     2b0:	b7079c01 	strlt	r9, [r7, -r1, lsl #24]
     2b4:	01000002 	tsteq	r0, r2
     2b8:	049006c1 	ldreq	r0, [r0], #1729	; 0x6c1
     2bc:	00b00002 	adcseq	r0, r0, r2
     2c0:	9c010000 	stcls	0, cr0, [r1], {-0}
     2c4:	000000fb 	strdeq	r0, [r0], -fp
     2c8:	02049008 	andeq	r9, r4, #8
     2cc:	00005800 	andeq	r5, r0, r0, lsl #16
     2d0:	0000d800 	andeq	sp, r0, r0, lsl #16
     2d4:	02d00900 	sbcseq	r0, r0, #0, 18
     2d8:	c2010000 	andgt	r0, r1, #0
     2dc:	00010102 	andeq	r0, r1, r2, lsl #2
     2e0:	02680900 	rsbeq	r0, r8, #0, 18
     2e4:	c2010000 	andgt	r0, r1, #0
     2e8:	00004802 	andeq	r4, r0, r2, lsl #16
     2ec:	ec0a0000 	stc	0, cr0, [sl], {-0}
     2f0:	48000204 	stmdami	r0, {r2, r9}
     2f4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     2f8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     2fc:	0102c401 	tsteq	r2, r1, lsl #8
     300:	09000001 	stmdbeq	r0, {r0}
     304:	00000268 	andeq	r0, r0, r8, ror #4
     308:	4802c401 	stmdami	r2, {r0, sl, lr, pc}
     30c:	00000000 	andeq	r0, r0, r0
     310:	06040b00 	streq	r0, [r4], -r0, lsl #22
     314:	04000001 	streq	r0, [r0], #-1
     318:	000000fb 	strdeq	r0, [r0], -fp
     31c:	02a30d0c 	adceq	r0, r3, #12, 26	; 0x300
     320:	9c010000 	stcls	0, cr0, [r1], {-0}
     324:	0203dc06 	andeq	sp, r3, #1536	; 0x600
     328:	0000b400 	andeq	fp, r0, r0, lsl #8
     32c:	669c0100 	ldrvs	r0, [ip], r0, lsl #2
     330:	08000001 	stmdaeq	r0, {r0}
     334:	000203e0 	andeq	r0, r2, r0, ror #7
     338:	00000058 	andeq	r0, r0, r8, asr r0
     33c:	00000143 	andeq	r0, r0, r3, asr #2
     340:	0002d009 	andeq	sp, r2, r9
     344:	02a40100 	adceq	r0, r4, #0, 2
     348:	00000101 	andeq	r0, r0, r1, lsl #2
     34c:	00026809 	andeq	r6, r2, r9, lsl #16
     350:	02a40100 	adceq	r0, r4, #0, 2
     354:	00000048 	andeq	r0, r0, r8, asr #32
     358:	043c0a00 	ldrteq	r0, [ip], #-2560	; 0xfffff600
     35c:	00480002 	subeq	r0, r8, r2
     360:	d0090000 	andle	r0, r9, r0
     364:	01000002 	tsteq	r0, r2
     368:	010102aa 	smlatbeq	r1, sl, r2, r0
     36c:	68090000 	stmdavs	r9, {}	; <UNPREDICTABLE>
     370:	01000002 	tsteq	r0, r2
     374:	004802aa 	subeq	r0, r8, sl, lsr #5
     378:	00000000 	andeq	r0, r0, r0
     37c:	00028c0e 	andeq	r8, r2, lr, lsl #24
     380:	06750100 	ldrbteq	r0, [r5], -r0, lsl #2
     384:	00020344 	andeq	r0, r2, r4, asr #6
     388:	00000098 	muleq	r0, r8, r0
     38c:	6c0a9c01 	stcvs	12, cr9, [sl], {1}
     390:	48000203 	stmdami	r0, {r0, r1, r9}
     394:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     398:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     39c:	01028801 	tsteq	r2, r1, lsl #16
     3a0:	09000001 	stmdbeq	r0, {r0}
     3a4:	00000268 	andeq	r0, r0, r8, ror #4
     3a8:	48028801 	stmdami	r2, {r0, fp, pc}
     3ac:	00000000 	andeq	r0, r0, r0
     3b0:	04ab0000 	strteq	r0, [fp], #0
     3b4:	00040000 	andeq	r0, r4, r0
     3b8:	00000218 	andeq	r0, r0, r8, lsl r2
     3bc:	00370104 	eorseq	r0, r7, r4, lsl #2
     3c0:	690c0000 	stmdbvs	ip, {}	; <UNPREDICTABLE>
     3c4:	ae000005 	cdpge	0, 0, cr0, cr0, cr5, {0}
     3c8:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     3cc:	64000205 	strvs	r0, [r0], #-517	; 0xfffffdfb
     3d0:	cd000007 	stcgt	0, cr0, [r0, #-28]	; 0xffffffe4
     3d4:	02000002 	andeq	r0, r0, #2
     3d8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
     3dc:	04030074 	streq	r0, [r3], #-116	; 0xffffff8c
     3e0:	00065907 	andeq	r5, r6, r7, lsl #18
     3e4:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     3e8:	0000017b 	andeq	r0, r0, fp, ror r1
     3ec:	a9040803 	stmdbge	r4, {r0, r1, fp}
     3f0:	04000001 	streq	r0, [r0], #-1
     3f4:	000c0504 	andeq	r0, ip, r4, lsl #10
     3f8:	61030000 	mrsvs	r0, (UNDEF: 3)
     3fc:	00004f1c 	andeq	r4, r0, ip, lsl pc
     400:	07040300 	streq	r0, [r4, -r0, lsl #6]
     404:	00000654 	andeq	r0, r0, r4, asr r6
     408:	00004f06 	andeq	r4, r0, r6, lsl #30
     40c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     410:	00000180 	andeq	r0, r0, r0, lsl #3
     414:	00039107 	andeq	r9, r3, r7, lsl #2
     418:	69021400 	stmdbvs	r2, {sl, ip}
     41c:	0000b108 	andeq	fp, r0, r8, lsl #2
     420:	03440800 	movteq	r0, #18432	; 0x4800
     424:	6b020000 	blvs	8042c <ramdisk+0x53154>
     428:	0000430f 	andeq	r4, r0, pc, lsl #6
     42c:	ea080000 	b	200434 <__bss_end+0x15315c>
     430:	02000004 	andeq	r0, r0, #4
     434:	00b61f6c 	adcseq	r1, r6, ip, ror #30
     438:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     43c:	00000409 	andeq	r0, r0, r9, lsl #8
     440:	b61f6d02 	ldrlt	r6, [pc], -r2, lsl #26
     444:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     448:	00036608 	andeq	r6, r3, r8, lsl #12
     44c:	096e0200 	stmdbeq	lr!, {r9}^
     450:	00000041 	andeq	r0, r0, r1, asr #32
     454:	030f080c 	movweq	r0, #63500	; 0xf80c
     458:	6f020000 	svcvs	0x00020000
     45c:	00004109 	andeq	r4, r0, r9, lsl #2
     460:	06001000 	streq	r1, [r0], -r0
     464:	00000062 	andeq	r0, r0, r2, rrx
     468:	00b10409 	adcseq	r0, r1, r9, lsl #8
     46c:	fd050000 	stc2	0, cr0, [r5, #-0]
     470:	02000004 	andeq	r0, r0, #4
     474:	00621b71 	rsbeq	r1, r2, r1, ror fp
     478:	bc060000 	stclt	0, cr0, [r6], {-0}
     47c:	07000000 	streq	r0, [r0, -r0]
     480:	00000559 	andeq	r0, r0, r9, asr r5
     484:	0873020c 	ldmdaeq	r3!, {r2, r3, r9}^
     488:	00000102 	andeq	r0, r0, r2, lsl #2
     48c:	00034408 	andeq	r4, r3, r8, lsl #8
     490:	0f750200 	svceq	0x00750200
     494:	00000043 	andeq	r0, r0, r3, asr #32
     498:	04ea0800 	strbteq	r0, [sl], #2048	; 0x800
     49c:	76020000 	strvc	r0, [r2], -r0
     4a0:	0000b61e 	andeq	fp, r0, lr, lsl r6
     4a4:	09080400 	stmdbeq	r8, {sl}
     4a8:	02000004 	andeq	r0, r0, #4
     4ac:	00b61e77 	adcseq	r1, r6, r7, ror lr
     4b0:	00080000 	andeq	r0, r8, r0
     4b4:	00046905 	andeq	r6, r4, r5, lsl #18
     4b8:	20790200 	rsbscs	r0, r9, r0, lsl #4
     4bc:	000000cd 	andeq	r0, r0, sp, asr #1
     4c0:	00010206 	andeq	r0, r1, r6, lsl #4
     4c4:	05b80700 	ldreq	r0, [r8, #1792]!	; 0x700
     4c8:	02140000 	andseq	r0, r4, #0
     4cc:	0148107e 	hvceq	33038	; 0x810e
     4d0:	90080000 	andls	r0, r8, r0
     4d4:	02000004 	andeq	r0, r0, #4
     4d8:	00562280 	subseq	r2, r6, r0, lsl #5
     4dc:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     4e0:	0000033c 	andeq	r0, r0, ip, lsr r3
     4e4:	48178102 	ldmdami	r7, {r1, r8, pc}
     4e8:	04000001 	streq	r0, [r0], #-1
     4ec:	00035d08 	andeq	r5, r3, r8, lsl #26
     4f0:	19820200 	stmibne	r2, {r9}
     4f4:	0000010e 	andeq	r0, r0, lr, lsl #2
     4f8:	04090008 	streq	r0, [r9], #-8
     4fc:	000000c8 	andeq	r0, r0, r8, asr #1
     500:	00073c05 	andeq	r3, r7, r5, lsl #24
     504:	03830200 	orreq	r0, r3, #0, 4
     508:	00000113 	andeq	r0, r0, r3, lsl r1
     50c:	00014e0a 	andeq	r4, r1, sl, lsl #28
     510:	06010300 	streq	r0, [r1], -r0, lsl #6
     514:	00000668 	andeq	r0, r0, r8, ror #12
     518:	9b070203 	blls	1c0d2c <__bss_end+0x113a54>
     51c:	05000000 	streq	r0, [r0, #-0]
     520:	000004be 			; <UNDEFINED> instruction: 0x000004be
     524:	41105304 	tstmi	r0, r4, lsl #6
     528:	05000000 	streq	r0, [r0, #-0]
     52c:	0000063e 	andeq	r0, r0, lr, lsr r6
     530:	85105604 	ldrhi	r5, [r0, #-1540]	; 0xfffff9fc
     534:	09000001 	stmdbeq	r0, {r0}
     538:	00018b04 	andeq	r8, r1, r4, lsl #22
     53c:	019b0b00 	orrseq	r0, fp, r0, lsl #22
     540:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
     544:	0c000001 	stceq	0, cr0, [r0], {1}
     548:	0000004f 	andeq	r0, r0, pc, asr #32
     54c:	04140700 	ldreq	r0, [r4], #-1792	; 0xfffff900
     550:	04380000 	ldrteq	r0, [r8], #-0
     554:	01f71058 	mvnseq	r1, r8, asr r0
     558:	1b080000 	blne	200560 <__bss_end+0x153288>
     55c:	04000003 	streq	r0, [r0], #-3
     560:	0179155a 	cmneq	r9, sl, asr r5
     564:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     568:	000005ee 	andeq	r0, r0, lr, ror #11
     56c:	bc0f5b04 			; <UNDEFINED> instruction: 0xbc0f5b04
     570:	04000000 	streq	r0, [r0], #-0
     574:	00061b08 	andeq	r1, r6, r8, lsl #22
     578:	0f5c0400 	svceq	0x005c0400
     57c:	000000bc 	strheq	r0, [r0], -ip
     580:	04b30818 	ldrteq	r0, [r3], #2072	; 0x818
     584:	5d040000 	stcpl	0, cr0, [r4, #-0]
     588:	00004f1a 	andeq	r4, r0, sl, lsl pc
     58c:	61082c00 	tstvs	r8, r0, lsl #24
     590:	04000004 	streq	r0, [r0], #-4
     594:	004f1a5e 	subeq	r1, pc, lr, asr sl	; <UNPREDICTABLE>
     598:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
     59c:	00000532 	andeq	r0, r0, r2, lsr r5
     5a0:	66135f04 	ldrvs	r5, [r3], -r4, lsl #30
     5a4:	34000001 	strcc	r0, [r0], #-1
     5a8:	04880500 	streq	r0, [r8], #1280	; 0x500
     5ac:	60040000 	andvs	r0, r4, r0
     5b0:	00019b03 	andeq	r9, r1, r3, lsl #22
     5b4:	014e0d00 	cmpeq	lr, r0, lsl #26
     5b8:	02130000 	andseq	r0, r3, #0
     5bc:	2c0e0000 	stccs	0, cr0, [lr], {-0}
     5c0:	01000000 	mrseq	r0, (UNDEF: 0)
     5c4:	044b0f00 	strbeq	r0, [fp], #-3840	; 0xfffff100
     5c8:	51010000 	mrspl	r0, (UNDEF: 1)
     5cc:	0002030e 	andeq	r0, r2, lr, lsl #6
     5d0:	f4030500 	vst3.8	{d0,d2,d4}, [r3], r0
     5d4:	0f0002be 	svceq	0x000002be
     5d8:	000003c4 	andeq	r0, r0, r4, asr #7
     5dc:	4e0e5201 	cdpmi	2, 0, cr5, cr14, cr1, {0}
     5e0:	05000001 	streq	r0, [r0, #-1]
     5e4:	02bf1c03 	adcseq	r1, pc, #768	; 0x300
     5e8:	03db0f00 	bicseq	r0, fp, #0, 30
     5ec:	53010000 	movwpl	r0, #4096	; 0x1000
     5f0:	00014e0e 	andeq	r4, r1, lr, lsl #28
     5f4:	30030500 	andcc	r0, r3, r0, lsl #10
     5f8:	0f0002bf 	svceq	0x000002bf
     5fc:	000005be 			; <UNDEFINED> instruction: 0x000005be
     600:	5b105401 	blpl	41560c <__bss_end+0x368334>
     604:	05000002 	streq	r0, [r0, #-2]
     608:	02bf4403 	adcseq	r4, pc, #50331648	; 0x3000000
     60c:	4e040900 	vmlami.f16	s0, s8, s0	; <UNPREDICTABLE>
     610:	0a000001 	beq	61c <_start-0xf9e4>
     614:	0000025b 	andeq	r0, r0, fp, asr r2
     618:	00053a0f 	andeq	r3, r5, pc, lsl #20
     61c:	10550100 	subsne	r0, r5, r0, lsl #2
     620:	0000025b 	andeq	r0, r0, fp, asr r2
     624:	bf480305 	svclt	0x00480305
     628:	cf0f0002 	svcgt	0x000f0002
     62c:	01000004 	tsteq	r0, r4
     630:	014e0e56 	cmpeq	lr, r6, asr lr
     634:	03050000 	movweq	r0, #20480	; 0x5000
     638:	0002bf4c 	andeq	fp, r2, ip, asr #30
     63c:	0004a010 	andeq	sl, r4, r0, lsl r0
     640:	0b590100 	bleq	1640a48 <__bss_end+0x1593770>
     644:	0000029c 	muleq	r0, ip, r2
     648:	bf600305 	svclt	0x00600305
     64c:	04090002 	streq	r0, [r9], #-2
     650:	000001f7 	strdeq	r0, [r0], -r7
     654:	0003a80f 	andeq	sl, r3, pc, lsl #16
     658:	1f5a0100 	svcne	0x005a0100
     65c:	0000004f 	andeq	r0, r0, pc, asr #32
     660:	bf640305 	svclt	0x00640305
     664:	7d0f0002 	stcvc	0, cr0, [pc, #-8]	; 664 <_start-0xf99c>
     668:	01000003 	tsteq	r0, r3
     66c:	0043155b 	subeq	r1, r3, fp, asr r5
     670:	03050000 	movweq	r0, #20480	; 0x5000
     674:	0002bf68 	andeq	fp, r2, r8, ror #30
     678:	00036e0f 	andeq	r6, r3, pc, lsl #28
     67c:	2e5b0100 	rdfcse	f0, f3, f0
     680:	00000043 	andeq	r0, r0, r3, asr #32
     684:	bf6c0305 	svclt	0x006c0305
     688:	2f0f0002 	svccs	0x000f0002
     68c:	01000003 	tsteq	r0, r3
     690:	0043425b 	subeq	r4, r3, fp, asr r2
     694:	03050000 	movweq	r0, #20480	; 0x5000
     698:	0002bf70 	andeq	fp, r2, r0, ror pc
     69c:	00042d11 	andeq	r2, r4, r1, lsl sp
     6a0:	016c0100 	cmneq	ip, r0, lsl #2
     6a4:	00005b16 	andeq	r5, r0, r6, lsl fp
     6a8:	020cc800 	andeq	ip, ip, #0, 16
     6ac:	00008c00 	andeq	r8, r0, r0, lsl #24
     6b0:	369c0100 	ldrcc	r0, [ip], r0, lsl #2
     6b4:	12000003 	andne	r0, r0, #3
     6b8:	000004f1 	strdeq	r0, [r0], -r1
     6bc:	42016c01 	andmi	r6, r1, #256	; 0x100
     6c0:	00000336 	andeq	r0, r0, r6, lsr r3
     6c4:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
     6c8:	000002dd 	ldrdeq	r0, [r0], -sp
     6cc:	0a016e01 	beq	5bed8 <ramdisk+0x2ec00>
     6d0:	0000029c 	muleq	r0, ip, r2
     6d4:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
     6d8:	0000091c 	andeq	r0, r0, ip, lsl r9
     6dc:	16016f01 	strne	r6, [r1], -r1, lsl #30
     6e0:	0000005b 	andeq	r0, r0, fp, asr r0
     6e4:	00749102 	rsbseq	r9, r4, r2, lsl #2
     6e8:	015a0409 	cmpeq	sl, r9, lsl #8
     6ec:	ff140000 			; <UNDEFINED> instruction: 0xff140000
     6f0:	01000005 	tsteq	r0, r5
     6f4:	200d0158 	andcs	r0, sp, r8, asr r1
     6f8:	a800020c 	stmdage	r0, {r2, r3, r9}
     6fc:	01000000 	mrseq	r0, (UNDEF: 0)
     700:	0003649c 	muleq	r3, ip, r4
     704:	04b31300 	ldrteq	r1, [r3], #768	; 0x300
     708:	5a010000 	bpl	40710 <ramdisk+0x13438>
     70c:	004f1801 	subeq	r1, pc, r1, lsl #16
     710:	91020000 	mrsls	r0, (UNDEF: 2)
     714:	07150074 			; <UNDEFINED> instruction: 0x07150074
     718:	01000005 	tsteq	r0, r5
     71c:	fc06013a 	stc2	1, cr0, [r6], {58}	; 0x3a
     720:	2400020a 	strcs	r0, [r0], #-522	; 0xfffffdf6
     724:	01000001 	tsteq	r0, r1
     728:	0003969c 	muleq	r3, ip, r6
     72c:	0b641600 	bleq	1905f34 <__bss_end+0x1858c5c>
     730:	00780002 	rsbseq	r0, r8, r2
     734:	9c130000 	ldcls	0, cr0, [r3], {-0}
     738:	01000003 	tsteq	r0, r3
     73c:	6102014f 	tstvs	r2, pc, asr #2
     740:	02000002 	andeq	r0, r0, #2
     744:	00007491 	muleq	r0, r1, r4
     748:	00062a14 	andeq	r2, r6, r4, lsl sl
     74c:	01000100 	mrseq	r0, (UNDEF: 16)
     750:	02092c0d 	andeq	r2, r9, #3328	; 0xd00
     754:	0001d000 	andeq	sp, r1, r0
     758:	d89c0100 	ldmle	ip, {r8}
     75c:	13000003 	movwne	r0, #3
     760:	000003f2 	strdeq	r0, [r0], -r2
     764:	0a010201 	beq	40f70 <ramdisk+0x13c98>
     768:	0000029c 	muleq	r0, ip, r2
     76c:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
     770:	00020990 	muleq	r2, r0, r9
     774:	00000028 	andeq	r0, r0, r8, lsr #32
     778:	0002ed13 	andeq	lr, r2, r3, lsl sp
     77c:	010d0100 	mrseq	r0, (UNDEF: 29)
     780:	00025b0c 	andeq	r5, r2, ip, lsl #22
     784:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     788:	d5170000 	ldrle	r0, [r7, #-0]
     78c:	01000005 	tsteq	r0, r5
     790:	083c0de9 	ldmdaeq	ip!, {r0, r3, r5, r6, r7, r8, sl, fp}
     794:	00f00002 	rscseq	r0, r0, r2
     798:	9c010000 	stcls	0, cr0, [r1], {-0}
     79c:	00000408 	andeq	r0, r0, r8, lsl #8
     7a0:	02084c16 	andeq	r4, r8, #5632	; 0x1600
     7a4:	0000b400 	andeq	fp, r0, r0, lsl #8
     7a8:	02dd0f00 	sbcseq	r0, sp, #0, 30
     7ac:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
     7b0:	00029c0c 	andeq	r9, r2, ip, lsl #24
     7b4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     7b8:	f4180000 			; <UNDEFINED> instruction: 0xf4180000
     7bc:	01000002 	tsteq	r0, r2
     7c0:	075806c3 	ldrbeq	r0, [r8, -r3, asr #13]
     7c4:	00e40002 	rsceq	r0, r4, r2
     7c8:	9c010000 	stcls	0, cr0, [r1], {-0}
     7cc:	0000044c 	andeq	r0, r0, ip, asr #8
     7d0:	00034f19 	andeq	r4, r3, r9, lsl pc
     7d4:	2fc30100 	svccs	0x00c30100
     7d8:	00000043 	andeq	r0, r0, r3, asr #32
     7dc:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     7e0:	000004f1 	strdeq	r0, [r0], -r1
     7e4:	5b45c301 	blpl	11713f0 <__bss_end+0x10c4118>
     7e8:	02000002 	andeq	r0, r0, #2
     7ec:	1a0f6891 	bne	3daa38 <__bss_end+0x32d760>
     7f0:	01000005 	tsteq	r0, r5
     7f4:	00430ec5 	subeq	r0, r3, r5, asr #29
     7f8:	91020000 	mrsls	r0, (UNDEF: 2)
     7fc:	771a0074 			; <UNDEFINED> instruction: 0x771a0074
     800:	01000004 	tsteq	r0, r4
     804:	005b168a 	subseq	r1, fp, sl, lsl #13
     808:	05f00000 	ldrbeq	r0, [r0, #0]!
     80c:	01680002 	cmneq	r8, r2
     810:	9c010000 	stcls	0, cr0, [r1], {-0}
     814:	0003f919 	andeq	pc, r3, r9, lsl r9	; <UNPREDICTABLE>
     818:	398a0100 	stmibcc	sl, {r8}
     81c:	00000179 	andeq	r0, r0, r9, ror r1
     820:	196c9102 	stmdbne	ip!, {r1, r8, ip, pc}^
     824:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
     828:	4f618a01 	svcmi	0x00618a01
     82c:	02000000 	andeq	r0, r0, #0
     830:	61196891 			; <UNDEFINED> instruction: 0x61196891
     834:	01000004 	tsteq	r0, r4
     838:	004f848a 	subeq	r8, pc, sl, lsl #9
     83c:	91020000 	mrsls	r0, (UNDEF: 2)
     840:	091c0f64 	ldmdbeq	ip, {r2, r5, r6, r8, r9, sl, fp}
     844:	8c010000 	stchi	0, cr0, [r1], {-0}
     848:	00005b16 	andeq	r5, r0, r6, lsl fp
     84c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     850:	0005260f 	andeq	r2, r5, pc, lsl #12
     854:	0a8d0100 	beq	fe340c5c <_estack+0xf6320c5c>
     858:	0000029c 	muleq	r0, ip, r2
     85c:	00709102 	rsbseq	r9, r0, r2, lsl #2
     860:	0002a100 	andeq	sl, r2, r0, lsl #2
     864:	b9000400 	stmdblt	r0, {sl}
     868:	04000003 	streq	r0, [r0], #-3
     86c:	00003701 	andeq	r3, r0, r1, lsl #14
     870:	06c80c00 	strbeq	r0, [r8], r0, lsl #24
     874:	00ae0000 	adceq	r0, lr, r0
     878:	0d540000 	ldcleq	0, cr0, [r4, #-0]
     87c:	029c0002 	addseq	r0, ip, #2
     880:	05cf0000 	strbeq	r0, [pc]	; 888 <_start-0xf778>
     884:	04020000 	streq	r0, [r2], #-0
     888:	00065907 	andeq	r5, r6, r7, lsl #18
     88c:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
     890:	00746e69 	rsbseq	r6, r4, r9, ror #28
     894:	7b050802 	blvc	1428a4 <__bss_end+0x955cc>
     898:	02000001 	andeq	r0, r0, #1
     89c:	01a90408 			; <UNDEFINED> instruction: 0x01a90408
     8a0:	01020000 	mrseq	r0, (UNDEF: 2)
     8a4:	00066806 	andeq	r6, r6, r6, lsl #16
     8a8:	08010200 	stmdaeq	r1, {r9}
     8ac:	00000666 	andeq	r0, r0, r6, ror #12
     8b0:	31050202 	tstcc	r5, r2, lsl #4
     8b4:	02000007 	andeq	r0, r0, #7
     8b8:	009b0702 	addseq	r0, fp, r2, lsl #14
     8bc:	04020000 	streq	r0, [r2], #-0
     8c0:	00018005 	andeq	r8, r1, r5
     8c4:	07040200 	streq	r0, [r4, -r0, lsl #4]
     8c8:	00000654 	andeq	r0, r0, r4, asr r6
     8cc:	00006404 	andeq	r6, r0, r4, lsl #8
     8d0:	07080200 	streq	r0, [r8, -r0, lsl #4]
     8d4:	0000064f 	andeq	r0, r0, pc, asr #12
     8d8:	01020405 	tsteq	r2, r5, lsl #8
     8dc:	00066f08 	andeq	r6, r6, r8, lsl #30
     8e0:	000c0600 	andeq	r0, ip, r0, lsl #12
     8e4:	61030000 	mrsvs	r0, (UNDEF: 3)
     8e8:	0000641c 	andeq	r6, r0, ip, lsl r4
     8ec:	03910700 	orrseq	r0, r1, #0, 14
     8f0:	02140000 	andseq	r0, r4, #0
     8f4:	00db0869 	sbcseq	r0, fp, r9, ror #16
     8f8:	44080000 	strmi	r0, [r8], #-0
     8fc:	02000003 	andeq	r0, r0, #3
     900:	00800f6b 	addeq	r0, r0, fp, ror #30
     904:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     908:	000004ea 	andeq	r0, r0, sl, ror #9
     90c:	e01f6c02 	ands	r6, pc, r2, lsl #24
     910:	04000000 	streq	r0, [r0], #-0
     914:	00040908 	andeq	r0, r4, r8, lsl #18
     918:	1f6d0200 	svcne	0x006d0200
     91c:	000000e0 	andeq	r0, r0, r0, ror #1
     920:	03660808 	cmneq	r6, #8, 16	; 0x80000
     924:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
     928:	00007709 	andeq	r7, r0, r9, lsl #14
     92c:	0f080c00 	svceq	0x00080c00
     930:	02000003 	andeq	r0, r0, #3
     934:	0077096f 	rsbseq	r0, r7, pc, ror #18
     938:	00100000 	andseq	r0, r0, r0
     93c:	00008c04 	andeq	r8, r0, r4, lsl #24
     940:	db040900 	blle	102d48 <__bss_end+0x55a70>
     944:	06000000 	streq	r0, [r0], -r0
     948:	000004fd 	strdeq	r0, [r0], -sp
     94c:	8c1b7102 	ldfhis	f7, [fp], {2}
     950:	04000000 	streq	r0, [r0], #-0
     954:	000000e6 	andeq	r0, r0, r6, ror #1
     958:	00055907 	andeq	r5, r5, r7, lsl #18
     95c:	73020c00 	movwvc	r0, #11264	; 0x2c00
     960:	00012c08 	andeq	r2, r1, r8, lsl #24
     964:	03440800 	movteq	r0, #18432	; 0x4800
     968:	75020000 	strvc	r0, [r2, #-0]
     96c:	0000800f 	andeq	r8, r0, pc
     970:	ea080000 	b	200978 <__bss_end+0x1536a0>
     974:	02000004 	andeq	r0, r0, #4
     978:	00e01e76 	rsceq	r1, r0, r6, ror lr
     97c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     980:	00000409 	andeq	r0, r0, r9, lsl #8
     984:	e01e7702 	ands	r7, lr, r2, lsl #14
     988:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     98c:	04690600 	strbteq	r0, [r9], #-1536	; 0xfffffa00
     990:	79020000 	stmdbvc	r2, {}	; <UNPREDICTABLE>
     994:	0000f720 	andeq	pc, r0, r0, lsr #14
     998:	012c0400 			; <UNDEFINED> instruction: 0x012c0400
     99c:	b8070000 	stmdalt	r7, {}	; <UNPREDICTABLE>
     9a0:	14000005 	strne	r0, [r0], #-5
     9a4:	72107e02 	andsvc	r7, r0, #2, 28
     9a8:	08000001 	stmdaeq	r0, {r0}
     9ac:	00000490 	muleq	r0, r0, r4
     9b0:	6b228002 	blvs	8a09c0 <__bss_end+0x7f36e8>
     9b4:	00000000 	andeq	r0, r0, r0
     9b8:	00033c08 	andeq	r3, r3, r8, lsl #24
     9bc:	17810200 	strne	r0, [r1, r0, lsl #4]
     9c0:	00000172 	andeq	r0, r0, r2, ror r1
     9c4:	035d0804 	cmpeq	sp, #4, 16	; 0x40000
     9c8:	82020000 	andhi	r0, r2, #0
     9cc:	00013819 	andeq	r3, r1, r9, lsl r8
     9d0:	09000800 	stmdbeq	r0, {fp}
     9d4:	0000f204 	andeq	pc, r0, r4, lsl #4
     9d8:	073c0600 	ldreq	r0, [ip, -r0, lsl #12]!
     9dc:	83020000 	movwhi	r0, #8192	; 0x2000
     9e0:	00013d03 	andeq	r3, r1, r3, lsl #26
     9e4:	071a0a00 	ldreq	r0, [sl, -r0, lsl #20]
     9e8:	b7010000 	strlt	r0, [r1, -r0]
     9ec:	020f5806 	andeq	r5, pc, #393216	; 0x60000
     9f0:	00009800 	andeq	r9, r0, r0, lsl #16
     9f4:	b99c0100 	ldmiblt	ip, {r8}
     9f8:	0b000001 	bleq	a04 <_start-0xf5fc>
     9fc:	00000674 	andeq	r0, r0, r4, ror r6
     a00:	b91eb701 	ldmdblt	lr, {r0, r8, r9, sl, ip, sp, pc}
     a04:	02000001 	andeq	r0, r0, #1
     a08:	3b0c6c91 	blcc	31bc54 <__bss_end+0x26e97c>
     a0c:	01000007 	tsteq	r0, r7
     a10:	01bf09b9 			; <UNDEFINED> instruction: 0x01bf09b9
     a14:	91020000 	mrsls	r0, (UNDEF: 2)
     a18:	04090074 	streq	r0, [r9], #-116	; 0xffffff8c
     a1c:	000000e6 	andeq	r0, r0, r6, ror #1
     a20:	01780409 	cmneq	r8, r9, lsl #8
     a24:	500a0000 	andpl	r0, sl, r0
     a28:	01000007 	tsteq	r0, r7
     a2c:	0e80067e 	mcreq	6, 4, r0, cr0, cr14, {3}
     a30:	00d80002 	sbcseq	r0, r8, r2
     a34:	9c010000 	stcls	0, cr0, [r1], {-0}
     a38:	00000218 	andeq	r0, r0, r8, lsl r2
     a3c:	00073b0b 	andeq	r3, r7, fp, lsl #22
     a40:	1a7e0100 	bne	1f80e48 <__bss_end+0x1ed3b70>
     a44:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
     a48:	0b6c9102 	bleq	1b24e58 <__bss_end+0x1a77b80>
     a4c:	00000742 	andeq	r0, r0, r2, asr #14
     a50:	b92d7e01 	pushlt	{r0, r9, sl, fp, ip, sp, lr}
     a54:	02000001 	andeq	r0, r0, #1
     a58:	260c6891 			; <UNDEFINED> instruction: 0x260c6891
     a5c:	01000007 	tsteq	r0, r7
     a60:	01721580 	cmneq	r2, r0, lsl #11
     a64:	91020000 	mrsls	r0, (UNDEF: 2)
     a68:	06b60c74 	sxtaheq	r0, r6, r4, ror #24
     a6c:	81010000 	mrshi	r0, (UNDEF: 1)
     a70:	0000800e 	andeq	r8, r0, lr
     a74:	70910200 	addsvc	r0, r1, r0, lsl #4
     a78:	06970a00 	ldreq	r0, [r7], r0, lsl #20
     a7c:	67010000 	strvs	r0, [r1, -r0]
     a80:	020de806 	andeq	lr, sp, #393216	; 0x60000
     a84:	00009800 	andeq	r9, r0, r0, lsl #16
     a88:	5c9c0100 	ldfpls	f0, [ip], {0}
     a8c:	0b000002 	bleq	a9c <_start-0xf564>
     a90:	0000073b 	andeq	r0, r0, fp, lsr r7
     a94:	bf1d6701 	svclt	0x001d6701
     a98:	02000001 	andeq	r0, r0, #1
     a9c:	420b6c91 	andmi	r6, fp, #37120	; 0x9100
     aa0:	01000007 	tsteq	r0, r7
     aa4:	01b93067 			; <UNDEFINED> instruction: 0x01b93067
     aa8:	91020000 	mrsls	r0, (UNDEF: 2)
     aac:	033c0c68 	teqeq	ip, #104, 24	; 0x6800
     ab0:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
     ab4:	00017216 	andeq	r7, r1, r6, lsl r2
     ab8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     abc:	06830a00 	streq	r0, [r3], r0, lsl #20
     ac0:	60010000 	andvs	r0, r1, r0
     ac4:	020dbc06 	andeq	fp, sp, #1536	; 0x600
     ac8:	00002c00 	andeq	r2, r0, r0, lsl #24
     acc:	829c0100 	addshi	r0, ip, #0, 2
     ad0:	0b000002 	bleq	ae0 <_start-0xf520>
     ad4:	00000713 	andeq	r0, r0, r3, lsl r7
     ad8:	b9266001 	stmdblt	r6!, {r0, sp, lr}
     adc:	02000001 	andeq	r0, r0, #1
     ae0:	0d007491 	cfstrseq	mvf7, [r0, #-580]	; 0xfffffdbc
     ae4:	000006a6 	andeq	r0, r0, r6, lsr #13
     ae8:	54064c01 	strpl	r4, [r6], #-3073	; 0xfffff3ff
     aec:	6800020d 	stmdavs	r0, {r0, r2, r3, r9}
     af0:	01000000 	mrseq	r0, (UNDEF: 0)
     af4:	073b0b9c 			; <UNDEFINED> instruction: 0x073b0b9c
     af8:	4c010000 	stcmi	0, cr0, [r1], {-0}
     afc:	0001bf1e 	andeq	fp, r1, lr, lsl pc
     b00:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     b04:	07840000 	streq	r0, [r4, r0]
     b08:	00040000 	andeq	r0, r4, r0
     b0c:	00000483 	andeq	r0, r0, r3, lsl #9
     b10:	00370104 	eorseq	r0, r7, r4, lsl #2
     b14:	700c0000 	andvc	r0, ip, r0
     b18:	ae000008 	cdpge	0, 0, cr0, cr0, cr8, {0}
     b1c:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     b20:	b000020f 	andlt	r0, r0, pc, lsl #4
     b24:	d200000b 	andle	r0, r0, #11
     b28:	02000007 	andeq	r0, r0, #7
     b2c:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
     b30:	3117d102 	tstcc	r7, r2, lsl #2
     b34:	03000000 	movweq	r0, #0
     b38:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
     b3c:	04040000 	streq	r0, [r4], #-0
     b40:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
     b44:	05080300 	streq	r0, [r8, #-768]	; 0xfffffd00
     b48:	0000017b 	andeq	r0, r0, fp, ror r1
     b4c:	a9040803 	stmdbge	r4, {r0, r1, fp}
     b50:	03000001 	movweq	r0, #1
     b54:	06680601 	strbteq	r0, [r8], -r1, lsl #12
     b58:	01030000 	mrseq	r0, (UNDEF: 3)
     b5c:	00066608 	andeq	r6, r6, r8, lsl #12
     b60:	05020300 	streq	r0, [r2, #-768]	; 0xfffffd00
     b64:	00000731 	andeq	r0, r0, r1, lsr r7
     b68:	9b070203 	blls	1c137c <__bss_end+0x1140a4>
     b6c:	03000000 	movweq	r0, #0
     b70:	01800504 	orreq	r0, r0, r4, lsl #10
     b74:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
     b78:	03000000 	movweq	r0, #0
     b7c:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
     b80:	75050000 	strvc	r0, [r5, #-0]
     b84:	03000000 	movweq	r0, #0
     b88:	064f0708 	strbeq	r0, [pc], -r8, lsl #14
     b8c:	04060000 	streq	r0, [r6], #-0
     b90:	00008807 	andeq	r8, r0, r7, lsl #16
     b94:	08010300 	stmdaeq	r1, {r8, r9}
     b98:	0000066f 	andeq	r0, r0, pc, ror #12
     b9c:	00a10408 	adceq	r0, r1, r8, lsl #8
     ba0:	96070000 	strls	r0, [r7], -r0
     ba4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     ba8:	00000c02 	andeq	r0, r0, r2, lsl #24
     bac:	1c610300 	stclne	3, cr0, [r1], #-0
     bb0:	00000075 	andeq	r0, r0, r5, ror r0
     bb4:	0003910a 	andeq	r9, r3, sl, lsl #2
     bb8:	69041400 	stmdbvs	r4, {sl, ip}
     bbc:	0000fd08 	andeq	pc, r0, r8, lsl #26
     bc0:	03440b00 	movteq	r0, #19200	; 0x4b00
     bc4:	6b040000 	blvs	100bcc <__bss_end+0x538f4>
     bc8:	0000a20f 	andeq	sl, r0, pc, lsl #4
     bcc:	ea0b0000 	b	2c0bd4 <__bss_end+0x2138fc>
     bd0:	04000004 	streq	r0, [r0], #-4
     bd4:	01021f6c 	tsteq	r2, ip, ror #30
     bd8:	0b040000 	bleq	100be0 <__bss_end+0x53908>
     bdc:	00000409 	andeq	r0, r0, r9, lsl #8
     be0:	021f6d04 	andseq	r6, pc, #4, 26	; 0x100
     be4:	08000001 	stmdaeq	r0, {r0}
     be8:	0003660b 	andeq	r6, r3, fp, lsl #12
     bec:	096e0400 	stmdbeq	lr!, {sl}^
     bf0:	00000088 	andeq	r0, r0, r8, lsl #1
     bf4:	030f0b0c 	movweq	r0, #64268	; 0xfb0c
     bf8:	6f040000 	svcvs	0x00040000
     bfc:	00008809 	andeq	r8, r0, r9, lsl #16
     c00:	05001000 	streq	r1, [r0, #-0]
     c04:	000000ae 	andeq	r0, r0, lr, lsr #1
     c08:	00fd0408 	rscseq	r0, sp, r8, lsl #8
     c0c:	fd020000 	stc2	0, cr0, [r2, #-0]
     c10:	04000004 	streq	r0, [r0], #-4
     c14:	00ae1b71 	adceq	r1, lr, r1, ror fp
     c18:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
     c1c:	0a000001 	beq	c28 <_start-0xf3d8>
     c20:	00000559 	andeq	r0, r0, r9, asr r5
     c24:	0873040c 	ldmdaeq	r3!, {r2, r3, sl}^
     c28:	0000014e 	andeq	r0, r0, lr, asr #2
     c2c:	0003440b 	andeq	r4, r3, fp, lsl #8
     c30:	0f750400 	svceq	0x00750400
     c34:	000000a2 	andeq	r0, r0, r2, lsr #1
     c38:	04ea0b00 	strbteq	r0, [sl], #2816	; 0xb00
     c3c:	76040000 	strvc	r0, [r4], -r0
     c40:	0001021e 	andeq	r0, r1, lr, lsl r2
     c44:	090b0400 	stmdbeq	fp, {sl}
     c48:	04000004 	streq	r0, [r0], #-4
     c4c:	01021e77 	tsteq	r2, r7, ror lr
     c50:	00080000 	andeq	r0, r8, r0
     c54:	00046902 	andeq	r6, r4, r2, lsl #18
     c58:	20790400 	rsbscs	r0, r9, r0, lsl #8
     c5c:	00000119 	andeq	r0, r0, r9, lsl r1
     c60:	00014e05 	andeq	r4, r1, r5, lsl #28
     c64:	05b80a00 	ldreq	r0, [r8, #2560]!	; 0xa00
     c68:	04140000 	ldreq	r0, [r4], #-0
     c6c:	0194107e 	orrseq	r1, r4, lr, ror r0
     c70:	900b0000 	andls	r0, fp, r0
     c74:	04000004 	streq	r0, [r0], #-4
     c78:	007c2280 	rsbseq	r2, ip, r0, lsl #5
     c7c:	0b000000 	bleq	c84 <_start-0xf37c>
     c80:	0000033c 	andeq	r0, r0, ip, lsr r3
     c84:	94178104 	ldrls	r8, [r7], #-260	; 0xfffffefc
     c88:	04000001 	streq	r0, [r0], #-1
     c8c:	00035d0b 	andeq	r5, r3, fp, lsl #26
     c90:	19820400 	stmibne	r2, {sl}
     c94:	0000015a 	andeq	r0, r0, sl, asr r1
     c98:	04080008 	streq	r0, [r8], #-8
     c9c:	00000114 	andeq	r0, r0, r4, lsl r1
     ca0:	00073c02 	andeq	r3, r7, r2, lsl #24
     ca4:	03830400 	orreq	r0, r3, #0, 8
     ca8:	0000015f 	andeq	r0, r0, pc, asr r1
     cac:	00082f0a 	andeq	r2, r8, sl, lsl #30
     cb0:	68050800 	stmdavs	r5, {fp}
     cb4:	0001ce10 	andeq	ip, r1, r0, lsl lr
     cb8:	08bc0b00 	ldmeq	ip!, {r8, r9, fp}
     cbc:	6a050000 	bvs	140cc4 <__bss_end+0x939ec>
     cc0:	00006910 	andeq	r6, r0, r0, lsl r9
     cc4:	df0b0000 	svcle	0x000b0000
     cc8:	05000008 	streq	r0, [r0, #-8]
     ccc:	00a2106b 	adceq	r1, r2, fp, rrx
     cd0:	00040000 	andeq	r0, r4, r0
     cd4:	00090e02 	andeq	r0, r9, r2, lsl #28
     cd8:	036c0500 	cmneq	ip, #0, 10
     cdc:	000001a6 	andeq	r0, r0, r6, lsr #3
     ce0:	0009c40a 	andeq	ip, r9, sl, lsl #8
     ce4:	79014c00 	stmdbvc	r1, {sl, fp, lr}
     ce8:	00027710 	andeq	r7, r2, r0, lsl r7
     cec:	08d80b00 	ldmeq	r8, {r8, r9, fp}^
     cf0:	7b010000 	blvc	40cf8 <ramdisk+0x13a20>
     cf4:	0002770f 	andeq	r7, r2, pc, lsl #14
     cf8:	5a0b0000 	bpl	2c0d00 <__bss_end+0x213a28>
     cfc:	0100000a 	tsteq	r0, sl
     d00:	02770f7c 	rsbseq	r0, r7, #124, 30	; 0x1f0
     d04:	0b040000 	bleq	100d0c <__bss_end+0x53a34>
     d08:	00000a99 	muleq	r0, r9, sl
     d0c:	770f7e01 	strvc	r7, [pc, -r1, lsl #28]
     d10:	08000002 	stmdaeq	r0, {r1}
     d14:	0008390b 	andeq	r3, r8, fp, lsl #18
     d18:	0f7f0100 	svceq	0x007f0100
     d1c:	00000277 	andeq	r0, r0, r7, ror r2
     d20:	0a6b0b0c 	beq	1ac3958 <__bss_end+0x1a16680>
     d24:	81010000 	mrshi	r0, (UNDEF: 1)
     d28:	00019a08 	andeq	r9, r1, r8, lsl #20
     d2c:	6c0b1000 	stcvs	0, cr1, [fp], {-0}
     d30:	01000009 	tsteq	r0, r9
     d34:	019a0882 	orrseq	r0, sl, r2, lsl #17
     d38:	0b240000 	bleq	900d40 <__bss_end+0x853a68>
     d3c:	00000a07 	andeq	r0, r0, r7, lsl #20
     d40:	7c228401 	cfstrsvc	mvf8, [r2], #-4
     d44:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     d48:	0009550b 	andeq	r5, r9, fp, lsl #10
     d4c:	19850100 	stmibne	r5, {r8}
     d50:	00000075 	andeq	r0, r0, r5, ror r0
     d54:	0aa30b3c 	beq	fe8c3a4c <_estack+0xf68a3a4c>
     d58:	86010000 	strhi	r0, [r1], -r0
     d5c:	00007519 	andeq	r7, r0, r9, lsl r5
     d60:	520b4000 	andpl	r4, fp, #0
     d64:	0100000a 	tsteq	r0, sl
     d68:	00702088 	rsbseq	r2, r0, r8, lsl #1
     d6c:	0b440000 	bleq	1100d74 <__bss_end+0x1053a9c>
     d70:	000009d4 	ldrdeq	r0, [r0], -r4
     d74:	70208901 	eorvc	r8, r0, r1, lsl #18
     d78:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
     d7c:	4d040800 	stcmi	8, cr0, [r4, #-0]
     d80:	02000000 	andeq	r0, r0, #0
     d84:	000009af 	andeq	r0, r0, pc, lsr #19
     d88:	da039001 	ble	e4d94 <__bss_end+0x37abc>
     d8c:	02000001 	andeq	r0, r0, #1
     d90:	00000924 	andeq	r0, r0, r4, lsr #18
     d94:	9a129801 	bls	4a6da0 <__bss_end+0x3f9ac8>
     d98:	07000002 	streq	r0, [r0, -r2]
     d9c:	00000289 	andeq	r0, r0, r9, lsl #5
     da0:	027d0408 	rsbseq	r0, sp, #8, 8	; 0x8000000
     da4:	9a070000 	bls	1c0dac <__bss_end+0x113ad4>
     da8:	0c000002 	stceq	0, cr0, [r0], {2}
     dac:	00000781 	andeq	r0, r0, r1, lsl #15
     db0:	16056901 	strne	r6, [r5], -r1, lsl #18
     db4:	00000069 	andeq	r0, r0, r9, rrx
     db8:	00021b58 	andeq	r1, r2, r8, asr fp
     dbc:	00000048 	andeq	r0, r0, r8, asr #32
     dc0:	02e19c01 	rsceq	r9, r1, #256	; 0x100
     dc4:	910d0000 	mrsls	r0, (UNDEF: 13)
     dc8:	0100000a 	tsteq	r0, sl
     dcc:	95430569 	strbls	r0, [r3, #-1385]	; 0xfffffa97
     dd0:	02000002 	andeq	r0, r0, #2
     dd4:	1c0e6c91 	stcne	12, cr6, [lr], {145}	; 0x91
     dd8:	01000009 	tsteq	r0, r9
     ddc:	6916056b 	ldmdbvs	r6, {r0, r1, r3, r5, r6, r8, sl}
     de0:	02000000 	andeq	r0, r0, #0
     de4:	0f007491 	svceq	0x00007491
     de8:	00000946 	andeq	r0, r0, r6, asr #18
     dec:	1d055d01 	stcne	13, cr5, [r5, #-4]
     df0:	00000069 	andeq	r0, r0, r9, rrx
     df4:	00021b0c 	andeq	r1, r2, ip, lsl #22
     df8:	0000004c 	andeq	r0, r0, ip, asr #32
     dfc:	031d9c01 	tsteq	sp, #256	; 0x100
     e00:	910d0000 	mrsls	r0, (UNDEF: 13)
     e04:	0100000a 	tsteq	r0, sl
     e08:	9540055d 	strbls	r0, [r0, #-1373]	; 0xfffffaa3
     e0c:	02000002 	andeq	r0, r0, #2
     e10:	1c0e6c91 	stcne	12, cr6, [lr], {145}	; 0x91
     e14:	01000009 	tsteq	r0, r9
     e18:	6916055f 	ldmdbvs	r6, {r0, r1, r2, r3, r4, r6, r8, sl}
     e1c:	02000000 	andeq	r0, r0, #0
     e20:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
     e24:	000007d2 	ldrdeq	r0, [r0], -r2
     e28:	16055201 	strne	r5, [r5], -r1, lsl #4
     e2c:	00000069 	andeq	r0, r0, r9, rrx
     e30:	00021acc 	andeq	r1, r2, ip, asr #21
     e34:	00000040 	andeq	r0, r0, r0, asr #32
     e38:	03599c01 	cmpeq	r9, #256	; 0x100
     e3c:	910d0000 	mrsls	r0, (UNDEF: 13)
     e40:	0100000a 	tsteq	r0, sl
     e44:	95440552 	strbls	r0, [r4, #-1362]	; 0xfffffaae
     e48:	02000002 	andeq	r0, r0, #2
     e4c:	1c0e6c91 	stcne	12, cr6, [lr], {145}	; 0x91
     e50:	01000009 	tsteq	r0, r9
     e54:	69160554 	ldmdbvs	r6, {r2, r4, r6, r8, sl}
     e58:	02000000 	andeq	r0, r0, #0
     e5c:	0f007491 	svceq	0x00007491
     e60:	000007ec 	andeq	r0, r0, ip, ror #15
     e64:	1d054601 	stcne	6, cr4, [r5, #-4]
     e68:	00000069 	andeq	r0, r0, r9, rrx
     e6c:	00021a88 	andeq	r1, r2, r8, lsl #21
     e70:	00000044 	andeq	r0, r0, r4, asr #32
     e74:	03959c01 	orrseq	r9, r5, #256	; 0x100
     e78:	910d0000 	mrsls	r0, (UNDEF: 13)
     e7c:	0100000a 	tsteq	r0, sl
     e80:	95410546 	strbls	r0, [r1, #-1350]	; 0xfffffaba
     e84:	02000002 	andeq	r0, r0, #2
     e88:	1c0e6c91 	stcne	12, cr6, [lr], {145}	; 0x91
     e8c:	01000009 	tsteq	r0, r9
     e90:	69160548 	ldmdbvs	r6, {r3, r6, r8, sl}
     e94:	02000000 	andeq	r0, r0, #0
     e98:	10007491 	mulne	r0, r1, r4
     e9c:	00000a43 	andeq	r0, r0, r3, asr #20
     ea0:	0d050601 	stceq	6, cr0, [r5, #-4]
     ea4:	00021984 	andeq	r1, r2, r4, lsl #19
     ea8:	00000104 	andeq	r0, r0, r4, lsl #2
     eac:	03bd9c01 			; <UNDEFINED> instruction: 0x03bd9c01
     eb0:	910d0000 	mrsls	r0, (UNDEF: 13)
     eb4:	0100000a 	tsteq	r0, sl
     eb8:	892a0506 	stmdbhi	sl!, {r1, r2, r8, sl}
     ebc:	02000002 	andeq	r0, r0, #2
     ec0:	10007491 	mulne	r0, r1, r4
     ec4:	000007fc 	strdeq	r0, [r0], -ip
     ec8:	0d04f801 	stceq	8, cr15, [r4, #-4]
     ecc:	000218f4 	strdeq	r1, [r2], -r4
     ed0:	00000090 	muleq	r0, r0, r0
     ed4:	03f59c01 	mvnseq	r9, #256	; 0x100
     ed8:	910d0000 	mrsls	r0, (UNDEF: 13)
     edc:	0100000a 	tsteq	r0, sl
     ee0:	a03204f8 	ldrshtge	r0, [r2], -r8
     ee4:	02000002 	andeq	r0, r0, #2
     ee8:	190d7491 	stmdbne	sp, {r0, r4, r7, sl, ip, sp, lr}
     eec:	0100000a 	tsteq	r0, sl
     ef0:	964704f8 			; <UNDEFINED> instruction: 0x964704f8
     ef4:	02000000 	andeq	r0, r0, #0
     ef8:	10007091 	mulne	r0, r1, r0
     efc:	0000081c 	andeq	r0, r0, ip, lsl r8
     f00:	0d04d201 	sfmeq	f5, 1, [r4, #-4]
     f04:	000217c8 	andeq	r1, r2, r8, asr #15
     f08:	0000012c 	andeq	r0, r0, ip, lsr #2
     f0c:	043d9c01 	ldrteq	r9, [sp], #-3073	; 0xfffff3ff
     f10:	910d0000 	mrsls	r0, (UNDEF: 13)
     f14:	0100000a 	tsteq	r0, sl
     f18:	9a2904d2 	bls	a42268 <__bss_end+0x994f90>
     f1c:	02000002 	andeq	r0, r0, #2
     f20:	a10d7491 			; <UNDEFINED> instruction: 0xa10d7491
     f24:	01000009 	tsteq	r0, r9
     f28:	963e04d2 			; <UNDEFINED> instruction: 0x963e04d2
     f2c:	02000000 	andeq	r0, r0, #0
     f30:	610d7091 	swpvs	r7, r1, [sp]
     f34:	0100000a 	tsteq	r0, sl
     f38:	695b04d2 	ldmdbvs	fp, {r1, r4, r6, r7, sl}^
     f3c:	02000000 	andeq	r0, r0, #0
     f40:	11006c91 			; <UNDEFINED> instruction: 0x11006c91
     f44:	000008cb 	andeq	r0, r0, fp, asr #17
     f48:	0604a901 	streq	sl, [r4], -r1, lsl #18
     f4c:	00021794 	muleq	r2, r4, r7
     f50:	00000034 	andeq	r0, r0, r4, lsr r0
     f54:	04659c01 	strbteq	r9, [r5], #-3073	; 0xfffff3ff
     f58:	910d0000 	mrsls	r0, (UNDEF: 13)
     f5c:	0100000a 	tsteq	r0, sl
     f60:	892104a9 	stmdbhi	r1!, {r0, r3, r5, r7, sl}
     f64:	02000002 	andeq	r0, r0, #2
     f68:	0c007491 	cfstrseq	mvf7, [r0], {145}	; 0x91
     f6c:	00000983 	andeq	r0, r0, r3, lsl #19
     f70:	18049d01 	stmdane	r4, {r0, r8, sl, fp, ip, pc}
     f74:	00000075 	andeq	r0, r0, r5, ror r0
     f78:	00021764 	andeq	r1, r2, r4, ror #14
     f7c:	00000030 	andeq	r0, r0, r0, lsr r0
     f80:	04a19c01 	strteq	r9, [r1], #3073	; 0xc01
     f84:	910d0000 	mrsls	r0, (UNDEF: 13)
     f88:	0100000a 	tsteq	r0, sl
     f8c:	954a049d 	strbls	r0, [sl, #-1181]	; 0xfffffb63
     f90:	02000002 	andeq	r0, r0, #2
     f94:	1b0e6c91 	blne	39c1e0 <__bss_end+0x2eef08>
     f98:	01000009 	tsteq	r0, r9
     f9c:	7518049f 	ldrvc	r0, [r8, #-1183]	; 0xfffffb61
     fa0:	02000000 	andeq	r0, r0, #0
     fa4:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
     fa8:	0000079a 	muleq	r0, sl, r7
     fac:	18048f01 	stmdane	r4, {r0, r8, r9, sl, fp, pc}
     fb0:	00000075 	andeq	r0, r0, r5, ror r0
     fb4:	00021730 	andeq	r1, r2, r0, lsr r7
     fb8:	00000034 	andeq	r0, r0, r4, lsr r0
     fbc:	04dd9c01 	ldrbeq	r9, [sp], #3073	; 0xc01
     fc0:	910d0000 	mrsls	r0, (UNDEF: 13)
     fc4:	0100000a 	tsteq	r0, sl
     fc8:	9543048f 	strbls	r0, [r3, #-1167]	; 0xfffffb71
     fcc:	02000002 	andeq	r0, r0, #2
     fd0:	1b0e6c91 	blne	39c21c <__bss_end+0x2eef44>
     fd4:	01000009 	tsteq	r0, r9
     fd8:	75180491 	ldrvc	r0, [r8, #-1169]	; 0xfffffb6f
     fdc:	02000000 	andeq	r0, r0, #0
     fe0:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
     fe4:	00000931 	andeq	r0, r0, r1, lsr r9
     fe8:	16045601 	strne	r5, [r4], -r1, lsl #12
     fec:	00000069 	andeq	r0, r0, r9, rrx
     ff0:	00021650 	andeq	r1, r2, r0, asr r6
     ff4:	000000e0 	andeq	r0, r0, r0, ror #1
     ff8:	05499c01 	strbeq	r9, [r9, #-3073]	; 0xfffff3ff
     ffc:	910d0000 	mrsls	r0, (UNDEF: 13)
    1000:	0100000a 	tsteq	r0, sl
    1004:	89390456 	ldmdbhi	r9!, {r1, r2, r4, r6, sl}
    1008:	02000002 	andeq	r0, r0, #2
    100c:	190d6c91 	stmdbne	sp, {r0, r4, r7, sl, fp, sp, lr}
    1010:	0100000a 	tsteq	r0, sl
    1014:	8a4f0456 	bhi	13c2174 <__bss_end+0x1314e9c>
    1018:	02000000 	andeq	r0, r0, #0
    101c:	b80d6891 	stmdalt	sp, {r0, r4, r7, fp, sp, lr}
    1020:	01000007 	tsteq	r0, r7
    1024:	496f0456 	stmdbmi	pc!, {r1, r2, r4, r6, sl}^	; <UNPREDICTABLE>
    1028:	02000005 	andeq	r0, r0, #5
    102c:	1c0e6491 	cfstrsne	mvf6, [lr], {145}	; 0x91
    1030:	01000009 	tsteq	r0, r9
    1034:	69160458 	ldmdbvs	r6, {r3, r4, r6, sl}
    1038:	02000000 	andeq	r0, r0, #0
    103c:	f00e7491 			; <UNDEFINED> instruction: 0xf00e7491
    1040:	01000009 	tsteq	r0, r9
    1044:	75180459 	ldrvc	r0, [r8, #-1113]	; 0xfffffba7
    1048:	02000000 	andeq	r0, r0, #0
    104c:	08007091 	stmdaeq	r0, {r0, r4, r7, ip, sp, lr}
    1050:	00006904 	andeq	r6, r0, r4, lsl #18
    1054:	08441200 	stmdaeq	r4, {r9, ip}^
    1058:	c1010000 	mrsgt	r0, (UNDEF: 1)
    105c:	00691603 	rsbeq	r1, r9, r3, lsl #12
    1060:	144c0000 	strbne	r0, [ip], #-0
    1064:	02040002 	andeq	r0, r4, #2
    1068:	9c010000 	stcls	0, cr0, [r1], {-0}
    106c:	000005db 	ldrdeq	r0, [r0], -fp
    1070:	000a910d 	andeq	r9, sl, sp, lsl #2
    1074:	03c10100 	biceq	r0, r1, #0, 2
    1078:	00028939 	andeq	r8, r2, r9, lsr r9
    107c:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1080:	000a190d 	andeq	r1, sl, sp, lsl #18
    1084:	03c10100 	biceq	r0, r1, #0, 2
    1088:	00008a4f 	andeq	r8, r0, pc, asr #20
    108c:	60910200 	addsvs	r0, r1, r0, lsl #4
    1090:	000c8c0d 	andeq	r8, ip, sp, lsl #24
    1094:	03c10100 	biceq	r0, r1, #0, 2
    1098:	0000a266 	andeq	sl, r0, r6, ror #4
    109c:	5c910200 	lfmpl	f0, 4, [r1], {0}
    10a0:	0008ef0d 	andeq	lr, r8, sp, lsl #30
    10a4:	03c10100 	biceq	r0, r1, #0, 2
    10a8:	00006982 	andeq	r6, r0, r2, lsl #19
    10ac:	58910200 	ldmpl	r1, {r9}
    10b0:	0009b60e 	andeq	fp, r9, lr, lsl #12
    10b4:	03c30100 	biceq	r0, r3, #0, 2
    10b8:	00006916 	andeq	r6, r0, r6, lsl r9
    10bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    10c0:	000df70e 	andeq	pc, sp, lr, lsl #14
    10c4:	03c40100 	biceq	r0, r4, #0, 2
    10c8:	0001ce0e 	andeq	ip, r1, lr, lsl #28
    10cc:	68910200 	ldmvs	r1, {r9}
    10d0:	0008590e 	andeq	r5, r8, lr, lsl #18
    10d4:	03c50100 	biceq	r0, r5, #0, 2
    10d8:	0002770e 	andeq	r7, r2, lr, lsl #14
    10dc:	70910200 	addsvc	r0, r1, r0, lsl #4
    10e0:	075c1200 	ldrbeq	r1, [ip, -r0, lsl #4]
    10e4:	86010000 	strhi	r0, [r1], -r0
    10e8:	00691603 	rsbeq	r1, r9, r3, lsl #12
    10ec:	13700000 	cmnne	r0, #0
    10f0:	00dc0002 	sbcseq	r0, ip, r2
    10f4:	9c010000 	stcls	0, cr0, [r1], {-0}
    10f8:	00000657 	andeq	r0, r0, r7, asr r6
    10fc:	000a910d 	andeq	r9, sl, sp, lsl #2
    1100:	03860100 	orreq	r0, r6, #0, 2
    1104:	0002893d 	andeq	r8, r2, sp, lsr r9
    1108:	6c910200 	lfmvs	f0, 4, [r1], {0}
    110c:	0009a10d 	andeq	sl, r9, sp, lsl #2
    1110:	03860100 	orreq	r0, r6, #0, 2
    1114:	00009c59 	andeq	r9, r0, r9, asr ip
    1118:	68910200 	ldmvs	r1, {r9}
    111c:	0007b80d 	andeq	fp, r7, sp, lsl #16
    1120:	03860100 	orreq	r0, r6, #0, 2
    1124:	0005497e 	andeq	r4, r5, lr, ror r9
    1128:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    112c:	000a350d 	andeq	r3, sl, sp, lsl #10
    1130:	03860100 	orreq	r0, r6, #0, 2
    1134:	000069a7 	andeq	r6, r0, r7, lsr #19
    1138:	60910200 	addsvs	r0, r1, r0, lsl #4
    113c:	00091c0e 	andeq	r1, r9, lr, lsl #24
    1140:	03880100 	orreq	r0, r8, #0, 2
    1144:	00006916 	andeq	r6, r0, r6, lsl r9
    1148:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    114c:	0009f00e 	andeq	pc, r9, lr
    1150:	03890100 	orreq	r0, r9, #0, 2
    1154:	00007518 	andeq	r7, r0, r8, lsl r5
    1158:	70910200 	addsvc	r0, r1, r0, lsl #4
    115c:	08fc1200 	ldmeq	ip!, {r9, ip}^
    1160:	41010000 	mrsmi	r0, (UNDEF: 1)
    1164:	00691602 	rsbeq	r1, r9, r2, lsl #12
    1168:	11cc0000 	bicne	r0, ip, r0
    116c:	01a40002 			; <UNDEFINED> instruction: 0x01a40002
    1170:	9c010000 	stcls	0, cr0, [r1], {-0}
    1174:	000006d3 	ldrdeq	r0, [r0], -r3
    1178:	000a910d 	andeq	r9, sl, sp, lsl #2
    117c:	02410100 	subeq	r0, r1, #0, 2
    1180:	00028936 	andeq	r8, r2, r6, lsr r9
    1184:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1188:	0009a10d 	andeq	sl, r9, sp, lsl #2
    118c:	02410100 	subeq	r0, r1, #0, 2
    1190:	00009c52 	andeq	r9, r0, r2, asr ip
    1194:	60910200 	addsvs	r0, r1, r0, lsl #4
    1198:	000c8c0d 	andeq	r8, ip, sp, lsl #24
    119c:	02410100 	subeq	r0, r1, #0, 2
    11a0:	0000a26e 	andeq	sl, r0, lr, ror #4
    11a4:	5c910200 	lfmpl	f0, 4, [r1], {0}
    11a8:	000a350d 	andeq	r3, sl, sp, lsl #10
    11ac:	02410100 	subeq	r0, r1, #0, 2
    11b0:	0000698a 	andeq	r6, r0, sl, lsl #19
    11b4:	58910200 	ldmpl	r1, {r9}
    11b8:	0009b60e 	andeq	fp, r9, lr, lsl #12
    11bc:	02430100 	subeq	r0, r3, #0, 2
    11c0:	00006916 	andeq	r6, r0, r6, lsl r9
    11c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    11c8:	000df70e 	andeq	pc, sp, lr, lsl #14
    11cc:	02440100 	subeq	r0, r4, #0, 2
    11d0:	0001ce0e 	andeq	ip, r1, lr, lsl #28
    11d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
    11d8:	09dc1200 	ldmibeq	ip, {r9, ip}^
    11dc:	42010000 	andmi	r0, r1, #0
    11e0:	02890e01 	addeq	r0, r9, #1, 28
    11e4:	11040000 	mrsne	r0, (UNDEF: 4)
    11e8:	00c80002 	sbceq	r0, r8, r2
    11ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    11f0:	0000074f 	andeq	r0, r0, pc, asr #14
    11f4:	00095e0d 	andeq	r5, r9, sp, lsl #28
    11f8:	01420100 	mrseq	r0, (UNDEF: 82)
    11fc:	0000753a 	andeq	r7, r0, sl, lsr r5
    1200:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    1204:	000aa30d 	andeq	sl, sl, sp, lsl #6
    1208:	01420100 	mrseq	r0, (UNDEF: 82)
    120c:	00007560 	andeq	r7, r0, r0, ror #10
    1210:	60910200 	addsvs	r0, r1, r0, lsl #4
    1214:	0007750d 	andeq	r7, r7, sp, lsl #10
    1218:	01420100 	mrseq	r0, (UNDEF: 82)
    121c:	0000547a 	andeq	r5, r0, sl, ror r4
    1220:	5f910200 	svcpl	0x00910200
    1224:	0008110e 	andeq	r1, r8, lr, lsl #2
    1228:	01440100 	mrseq	r0, (UNDEF: 84)
    122c:	00029a09 	andeq	r9, r2, r9, lsl #20
    1230:	70910200 	addsvc	r0, r1, r0, lsl #4
    1234:	000a7f0e 	andeq	r7, sl, lr, lsl #30
    1238:	01450100 	mrseq	r0, (UNDEF: 85)
    123c:	00002508 	andeq	r2, r0, r8, lsl #10
    1240:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1244:	00091c0e 	andeq	r1, r9, lr, lsl #24
    1248:	01460100 	mrseq	r0, (UNDEF: 86)
    124c:	0002890e 	andeq	r8, r2, lr, lsl #18
    1250:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1254:	0a221300 	beq	885e5c <__bss_end+0x7d8b84>
    1258:	17010000 	strne	r0, [r1, -r0]
    125c:	00690f01 	rsbeq	r0, r9, r1, lsl #30
    1260:	0ff00000 	svceq	0x00f00000	; IMB
    1264:	01140002 	tsteq	r4, r2
    1268:	9c010000 	stcls	0, cr0, [r1], {-0}
    126c:	000a910d 	andeq	r9, sl, sp, lsl #2
    1270:	01170100 	tsteq	r7, r0, lsl #2
    1274:	00028930 	andeq	r8, r2, r0, lsr r9
    1278:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    127c:	0008120d 	andeq	r1, r8, sp, lsl #4
    1280:	01170100 	tsteq	r7, r0, lsl #2
    1284:	00006947 	andeq	r6, r0, r7, asr #18
    1288:	70910200 	addsvc	r0, r1, r0, lsl #4
    128c:	0dd20000 	ldcleq	0, cr0, [r2]
    1290:	00040000 	andeq	r0, r4, r0
    1294:	000005cd 	andeq	r0, r0, sp, asr #11
    1298:	00370104 	eorseq	r0, r7, r4, lsl #2
    129c:	070c0000 	streq	r0, [ip, -r0]
    12a0:	ae00000f 	cdpge	0, 0, cr0, cr0, cr15, {0}
    12a4:	a0000000 	andge	r0, r0, r0
    12a8:	2400021b 	strcs	r0, [r0], #-539	; 0xfffffde5
    12ac:	17000019 	smladne	r0, r9, r0, r0
    12b0:	0200000d 	andeq	r0, r0, #13
    12b4:	06680601 	strbteq	r0, [r8], -r1, lsl #12
    12b8:	25030000 	strcs	r0, [r3, #-0]
    12bc:	02000000 	andeq	r0, r0, #0
    12c0:	06660801 	strbteq	r0, [r6], -r1, lsl #16
    12c4:	02020000 	andeq	r0, r2, #0
    12c8:	00073105 	andeq	r3, r7, r5, lsl #2
    12cc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    12d0:	0000009b 	muleq	r0, fp, r0
    12d4:	80050402 	andhi	r0, r5, r2, lsl #8
    12d8:	04000001 	streq	r0, [r0], #-1
    12dc:	00000046 	andeq	r0, r0, r6, asr #32
    12e0:	54070402 	strpl	r0, [r7], #-1026	; 0xfffffbfe
    12e4:	04000006 	streq	r0, [r0], #-6
    12e8:	00000052 	andeq	r0, r0, r2, asr r0
    12ec:	7b050802 	blvc	1432fc <__bss_end+0x96024>
    12f0:	02000001 	andeq	r0, r0, #1
    12f4:	064f0708 	strbeq	r0, [pc], -r8, lsl #14
    12f8:	04050000 	streq	r0, [r5], #-0
    12fc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    1300:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1304:	00000659 	andeq	r0, r0, r9, asr r6
    1308:	0007b106 	andeq	fp, r7, r6, lsl #2
    130c:	17d10200 	ldrbne	r0, [r1, r0, lsl #4]
    1310:	00000073 	andeq	r0, r0, r3, ror r0
    1314:	a9040802 	stmdbge	r4, {r1, fp}
    1318:	07000001 	streq	r0, [r0, -r1]
    131c:	08010204 	stmdaeq	r1, {r2, r9}
    1320:	0000066f 	andeq	r0, r0, pc, ror #12
    1324:	0000e206 	andeq	lr, r0, r6, lsl #4
    1328:	10470300 	subne	r0, r7, r0, lsl #6
    132c:	000000a2 	andeq	r0, r0, r2, lsr #1
    1330:	00a80408 	adceq	r0, r8, r8, lsl #8
    1334:	b3090000 	movwlt	r0, #36864	; 0x9000
    1338:	0a000000 	beq	1340 <_start-0xecc0>
    133c:	0000008d 	andeq	r0, r0, sp, lsl #1
    1340:	000c0600 	andeq	r0, ip, r0, lsl #12
    1344:	61040000 	mrsvs	r0, (UNDEF: 4)
    1348:	0000521c 	andeq	r5, r0, ip, lsl r2
    134c:	00b30400 	adcseq	r0, r3, r0, lsl #8
    1350:	69060000 	stmdbvs	r6, {}	; <UNPREDICTABLE>
    1354:	0500000d 	streq	r0, [r0, #-13]
    1358:	00d01957 	sbcseq	r1, r0, r7, asr r9
    135c:	04080000 	streq	r0, [r8], #-0
    1360:	000000d6 	ldrdeq	r0, [r0], -r6
    1364:	0000460b 	andeq	r4, r0, fp, lsl #12
    1368:	0000e500 	andeq	lr, r0, r0, lsl #10
    136c:	008d0a00 	addeq	r0, sp, r0, lsl #20
    1370:	0c000000 	stceq	0, cr0, [r0], {-0}
    1374:	00000391 	muleq	r0, r1, r3
    1378:	08690614 	stmdaeq	r9!, {r2, r4, r9, sl}^
    137c:	00000134 	andeq	r0, r0, r4, lsr r1
    1380:	0003440d 	andeq	r4, r3, sp, lsl #8
    1384:	0f6b0600 	svceq	0x006b0600
    1388:	000000b3 	strheq	r0, [r0], -r3
    138c:	04ea0d00 	strbteq	r0, [sl], #3328	; 0xd00
    1390:	6c060000 	stcvs	0, cr0, [r6], {-0}
    1394:	0001391f 	andeq	r3, r1, pc, lsl r9
    1398:	090d0400 	stmdbeq	sp, {sl}
    139c:	06000004 	streq	r0, [r0], -r4
    13a0:	01391f6d 	teqeq	r9, sp, ror #30
    13a4:	0d080000 	stceq	0, cr0, [r8, #-0]
    13a8:	00000366 	andeq	r0, r0, r6, ror #6
    13ac:	8d096e06 	stchi	14, cr6, [r9, #-24]	; 0xffffffe8
    13b0:	0c000000 	stceq	0, cr0, [r0], {-0}
    13b4:	00030f0d 	andeq	r0, r3, sp, lsl #30
    13b8:	096f0600 	stmdbeq	pc!, {r9, sl}^	; <UNPREDICTABLE>
    13bc:	0000008d 	andeq	r0, r0, sp, lsl #1
    13c0:	e5040010 	str	r0, [r4, #-16]
    13c4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    13c8:	00013404 	andeq	r3, r1, r4, lsl #8
    13cc:	04fd0600 	ldrbteq	r0, [sp], #1536	; 0x600
    13d0:	71060000 	mrsvc	r0, (UNDEF: 6)
    13d4:	0000e51b 	andeq	lr, r0, fp, lsl r5
    13d8:	013f0400 	teqeq	pc, r0, lsl #8
    13dc:	590c0000 	stmdbpl	ip, {}	; <UNPREDICTABLE>
    13e0:	0c000005 	stceq	0, cr0, [r0], {5}
    13e4:	85087306 	strhi	r7, [r8, #-774]	; 0xfffffcfa
    13e8:	0d000001 	stceq	0, cr0, [r0, #-4]
    13ec:	00000344 	andeq	r0, r0, r4, asr #6
    13f0:	b30f7506 	movwlt	r7, #62726	; 0xf506
    13f4:	00000000 	andeq	r0, r0, r0
    13f8:	0004ea0d 	andeq	lr, r4, sp, lsl #20
    13fc:	1e760600 	cdpne	6, 7, cr0, cr6, cr0, {0}
    1400:	00000139 	andeq	r0, r0, r9, lsr r1
    1404:	04090d04 	streq	r0, [r9], #-3332	; 0xfffff2fc
    1408:	77060000 	strvc	r0, [r6, -r0]
    140c:	0001391e 	andeq	r3, r1, lr, lsl r9
    1410:	06000800 	streq	r0, [r0], -r0, lsl #16
    1414:	00000469 	andeq	r0, r0, r9, ror #8
    1418:	50207906 	eorpl	r7, r0, r6, lsl #18
    141c:	04000001 	streq	r0, [r0], #-1
    1420:	00000185 	andeq	r0, r0, r5, lsl #3
    1424:	0005b80c 	andeq	fp, r5, ip, lsl #16
    1428:	7e061400 	cfcpysvc	mvf1, mvf6
    142c:	0001cb10 	andeq	ip, r1, r0, lsl fp
    1430:	04900d00 	ldreq	r0, [r0], #3328	; 0xd00
    1434:	80060000 	andhi	r0, r6, r0
    1438:	00005922 	andeq	r5, r0, r2, lsr #18
    143c:	3c0d0000 	stccc	0, cr0, [sp], {-0}
    1440:	06000003 	streq	r0, [r0], -r3
    1444:	01cb1781 	biceq	r1, fp, r1, lsl #15
    1448:	0d040000 	stceq	0, cr0, [r4, #-0]
    144c:	0000035d 	andeq	r0, r0, sp, asr r3
    1450:	91198206 	tstls	r9, r6, lsl #4
    1454:	08000001 	stmdaeq	r0, {r0}
    1458:	4b040800 	blmi	103460 <__bss_end+0x56188>
    145c:	06000001 	streq	r0, [r0], -r1
    1460:	0000073c 	andeq	r0, r0, ip, lsr r7
    1464:	96038306 	strls	r8, [r3], -r6, lsl #6
    1468:	03000001 	movweq	r0, #1
    146c:	000001d1 	ldrdeq	r0, [r0], -r1
    1470:	000c7f06 	andeq	r7, ip, r6, lsl #30
    1474:	10630700 	rsbne	r0, r3, r0, lsl #14
    1478:	0000008d 	andeq	r0, r0, sp, lsl #1
    147c:	00082f0c 	andeq	r2, r8, ip, lsl #30
    1480:	68070800 	stmdavs	r7, {fp}
    1484:	00021610 	andeq	r1, r2, r0, lsl r6
    1488:	08bc0d00 	ldmeq	ip!, {r8, sl, fp}
    148c:	6a070000 	bvs	1c1494 <__bss_end+0x1141bc>
    1490:	00004610 	andeq	r4, r0, r0, lsl r6
    1494:	df0d0000 	svcle	0x000d0000
    1498:	07000008 	streq	r0, [r0, -r8]
    149c:	00b3106b 	adcseq	r1, r3, fp, rrx
    14a0:	00040000 	andeq	r0, r4, r0
    14a4:	00090e06 	andeq	r0, r9, r6, lsl #28
    14a8:	036c0700 	cmneq	ip, #0, 14
    14ac:	000001ee 	andeq	r0, r0, lr, ror #3
    14b0:	000e660c 	andeq	r6, lr, ip, lsl #12
    14b4:	71070c00 	tstvc	r7, r0, lsl #24
    14b8:	00025710 	andeq	r5, r2, r0, lsl r7
    14bc:	0fd90d00 	svceq	0x00d90d00
    14c0:	73070000 	movwvc	r0, #28672	; 0x7000
    14c4:	00008d08 	andeq	r8, r0, r8, lsl #26
    14c8:	d10d0000 	mrsle	r0, (UNDEF: 13)
    14cc:	0700000d 	streq	r0, [r0, -sp]
    14d0:	00521074 	subseq	r1, r2, r4, ror r0
    14d4:	0d040000 	stceq	0, cr0, [r4, #-0]
    14d8:	00000b54 	andeq	r0, r0, r4, asr fp
    14dc:	52107507 	andspl	r7, r0, #29360128	; 0x1c00000
    14e0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    14e4:	0e1e0600 	cfmsub32eq	mvax0, mvfx0, mvfx14, mvfx0
    14e8:	76070000 	strvc	r0, [r7], -r0
    14ec:	00022203 	andeq	r2, r2, r3, lsl #4
    14f0:	02570300 	subseq	r0, r7, #0, 6
    14f4:	04080000 	streq	r0, [r8], #-0
    14f8:	0000002c 	andeq	r0, r0, ip, lsr #32
    14fc:	00026803 	andeq	r6, r2, r3, lsl #16
    1500:	52040800 	andpl	r0, r4, #0, 16
    1504:	0c000000 	stceq	0, cr0, [r0], {-0}
    1508:	00000ab9 			; <UNDEFINED> instruction: 0x00000ab9
    150c:	10660148 	rsbne	r0, r6, r8, asr #2
    1510:	000002e2 	andeq	r0, r0, r2, ror #5
    1514:	00019c0d 	andeq	r9, r1, sp, lsl #24
    1518:	1b680100 	blne	1a01920 <__bss_end+0x1954648>
    151c:	000002e2 	andeq	r0, r0, r2, ror #5
    1520:	05ee0d00 	strbeq	r0, [lr, #3328]!	; 0xd00
    1524:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1528:	00013f0f 	andeq	r3, r1, pc, lsl #30
    152c:	1b0d0400 	blne	342534 <__bss_end+0x29525c>
    1530:	01000006 	tsteq	r0, r6
    1534:	013f0f6f 	teqeq	pc, pc, ror #30
    1538:	0d180000 	ldceq	0, cr0, [r8, #-0]
    153c:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    1540:	52197001 	andspl	r7, r9, #1
    1544:	2c000000 	stccs	0, cr0, [r0], {-0}
    1548:	000eff0d 	andeq	pc, lr, sp, lsl #30
    154c:	14710100 	ldrbtne	r0, [r1], #-256	; 0xffffff00
    1550:	00000273 	andeq	r0, r0, r3, ror r2
    1554:	0aae0d30 	beq	feb84a1c <_estack+0xf6b64a1c>
    1558:	72010000 	andvc	r0, r1, #0
    155c:	0002e811 	andeq	lr, r2, r1, lsl r8
    1560:	d40d3400 	strle	r3, [sp], #-1024	; 0xfffffc00
    1564:	0100000e 	tsteq	r0, lr
    1568:	00c41486 	sbceq	r1, r4, r6, lsl #9
    156c:	00440000 	subeq	r0, r4, r0
    1570:	00590408 	subseq	r0, r9, r8, lsl #8
    1574:	250e0000 	strcs	r0, [lr, #-0]
    1578:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
    157c:	0f000002 	svceq	0x00000002
    1580:	00000073 	andeq	r0, r0, r3, ror r0
    1584:	a106000f 	tstge	r6, pc
    1588:	0100000b 	tsteq	r0, fp
    158c:	02790393 	rsbseq	r0, r9, #1275068418	; 0x4c000002
    1590:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    1594:	10000002 	andne	r0, r0, r2
    1598:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    159c:	21239f01 			; <UNDEFINED> instruction: 0x21239f01
    15a0:	05000003 	streq	r0, [r0, #-3]
    15a4:	02bf7403 	adcseq	r7, pc, #50331648	; 0x3000000
    15a8:	f8040800 			; <UNDEFINED> instruction: 0xf8040800
    15ac:	04000002 	streq	r0, [r0], #-2
    15b0:	0000031b 	andeq	r0, r0, fp, lsl r3
    15b4:	0001d10e 	andeq	sp, r1, lr, lsl #2
    15b8:	00033600 	andeq	r3, r3, r0, lsl #12
    15bc:	00730f00 	rsbseq	r0, r3, r0, lsl #30
    15c0:	00040000 	andeq	r0, r4, r0
    15c4:	000b0911 	andeq	r0, fp, r1, lsl r9
    15c8:	1ea30100 	fdvnes	f0, f3, f0
    15cc:	00000326 	andeq	r0, r0, r6, lsr #6
    15d0:	bf780305 	svclt	0x00780305
    15d4:	30110002 	andscc	r0, r1, r2
    15d8:	0100000b 	tsteq	r0, fp
    15dc:	01d11ea4 	bicseq	r1, r1, r4, lsr #29
    15e0:	03050000 	movweq	r0, #20480	; 0x5000
    15e4:	0002bfdc 	ldrdeq	fp, [r2], -ip
    15e8:	000b4211 	andeq	r4, fp, r1, lsl r2
    15ec:	1ea50100 	fdvnes	f0, f5, f0
    15f0:	000001d1 	ldrdeq	r0, [r0], -r1
    15f4:	bff00305 	svclt	0x00f00305
    15f8:	ed110002 	ldc	0, cr0, [r1, #-8]
    15fc:	0100000e 	tsteq	r0, lr
    1600:	038429a6 	orreq	r2, r4, #2719744	; 0x298000
    1604:	03050000 	movweq	r0, #20480	; 0x5000
    1608:	0002c004 	andeq	ip, r2, r4
    160c:	01d10408 	bicseq	r0, r1, r8, lsl #8
    1610:	7e040000 	cdpvc	0, 0, cr0, cr4, cr0, {0}
    1614:	03000003 	movweq	r0, #3
    1618:	0000037e 	andeq	r0, r0, lr, ror r3
    161c:	000cd711 	andeq	sp, ip, r1, lsl r7
    1620:	29a70100 	stmibcs	r7!, {r8}
    1624:	00000384 	andeq	r0, r0, r4, lsl #7
    1628:	c0080305 	andgt	r0, r8, r5, lsl #6
    162c:	0e110002 	cdpeq	0, 1, cr0, cr1, cr2, {0}
    1630:	0100000c 	tsteq	r0, ip
    1634:	01d11ea8 	bicseq	r1, r1, r8, lsr #29
    1638:	03050000 	movweq	r0, #20480	; 0x5000
    163c:	0002c00c 	andeq	ip, r2, ip
    1640:	000d2b11 	andeq	r2, sp, r1, lsl fp
    1644:	1fac0100 	svcne	0x00ac0100
    1648:	000001d1 	ldrdeq	r0, [r0], -r1
    164c:	c0200305 	eorgt	r0, r0, r5, lsl #6
    1650:	99110002 	ldmdbls	r1, {r1}
    1654:	0100000c 	tsteq	r0, ip
    1658:	005939ad 	subseq	r3, r9, sp, lsr #19
    165c:	03050000 	movweq	r0, #20480	; 0x5000
    1660:	0002c034 	andeq	ip, r2, r4, lsr r0
    1664:	000be211 	andeq	lr, fp, r1, lsl r2
    1668:	1fb30100 	svcne	0x00b30100
    166c:	000001d1 	ldrdeq	r0, [r0], -r1
    1670:	c0380305 	eorsgt	r0, r8, r5, lsl #6
    1674:	55110002 	ldrpl	r0, [r1, #-2]
    1678:	01000010 	tsteq	r0, r0, lsl r0
    167c:	005938be 	ldrheq	r3, [r9], #-142	; 0xffffff72
    1680:	03050000 	movweq	r0, #20480	; 0x5000
    1684:	0002c04c 	andeq	ip, r2, ip, asr #32
    1688:	000ca811 	andeq	sl, ip, r1, lsl r8
    168c:	2ebf0100 	frdcse	f0, f7, f0
    1690:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
    1694:	c0500305 	subsgt	r0, r0, r5, lsl #6
    1698:	5d110002 	ldcpl	0, cr0, [r1, #-8]
    169c:	0100000c 	tsteq	r0, ip
    16a0:	00522fc0 	subseq	r2, r2, r0, asr #31
    16a4:	03050000 	movweq	r0, #20480	; 0x5000
    16a8:	0002c054 	andeq	ip, r2, r4, asr r0
    16ac:	000ae411 	andeq	lr, sl, r1, lsl r4
    16b0:	38c10100 	stmiacc	r1, {r8}^
    16b4:	00000059 	andeq	r0, r0, r9, asr r0
    16b8:	c0580305 	subsgt	r0, r8, r5, lsl #6
    16bc:	f7110002 			; <UNDEFINED> instruction: 0xf7110002
    16c0:	0100000a 	tsteq	r0, sl
    16c4:	004d36c2 	subeq	r3, sp, r2, asr #13
    16c8:	03050000 	movweq	r0, #20480	; 0x5000
    16cc:	0002c05c 	andeq	ip, r2, ip, asr r0
    16d0:	00108111 	andseq	r8, r0, r1, lsl r1
    16d4:	38c30100 	stmiacc	r3, {r8}^
    16d8:	00000059 	andeq	r0, r0, r9, asr r0
    16dc:	c0600305 	rsbgt	r0, r0, r5, lsl #6
    16e0:	93110002 	tstls	r1, #2
    16e4:	0100000b 	tsteq	r0, fp
    16e8:	005938c4 	subseq	r3, r9, r4, asr #17
    16ec:	03050000 	movweq	r0, #20480	; 0x5000
    16f0:	0002c064 	andeq	ip, r2, r4, rrx
    16f4:	000c5011 	andeq	r5, ip, r1, lsl r0
    16f8:	2fc50100 	svccs	0x00c50100
    16fc:	0000004d 	andeq	r0, r0, sp, asr #32
    1700:	c0680305 	rsbgt	r0, r8, r5, lsl #6
    1704:	c4110002 	ldrgt	r0, [r1], #-2
    1708:	0100000e 	tsteq	r0, lr
    170c:	004d2fc6 	subeq	r2, sp, r6, asr #31
    1710:	03050000 	movweq	r0, #20480	; 0x5000
    1714:	0002c06c 	andeq	ip, r2, ip, rrx
    1718:	000e0011 	andeq	r0, lr, r1, lsl r0
    171c:	2fc70100 	svccs	0x00c70100
    1720:	00000052 	andeq	r0, r0, r2, asr r0
    1724:	c0700305 	rsbsgt	r0, r0, r5, lsl #6
    1728:	bc110002 	ldclt	0, cr0, [r1], {2}
    172c:	0100000d 	tsteq	r0, sp
    1730:	00b325c8 	adcseq	r2, r3, r8, asr #11
    1734:	03050000 	movweq	r0, #20480	; 0x5000
    1738:	0002bee4 	andeq	fp, r2, r4, ror #29
    173c:	000ff712 	andeq	pc, pc, r2, lsl r7	; <UNPREDICTABLE>
    1740:	09290100 	stmdbeq	r9!, {r8}
    1744:	0234900e 	eorseq	r9, r4, #14
    1748:	00003400 	andeq	r3, r0, r0, lsl #8
    174c:	d69c0100 	ldrle	r0, [ip], r0, lsl #2
    1750:	13000004 	movwne	r0, #4
    1754:	0000107b 	andeq	r1, r0, fp, ror r0
    1758:	24092901 	strcs	r2, [r9], #-2305	; 0xfffff6ff
    175c:	0000031b 	andeq	r0, r0, fp, lsl r3
    1760:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1764:	000b6114 	andeq	r6, fp, r4, lsl r1
    1768:	086a0100 	stmdaeq	sl!, {r8}^
    176c:	00031b10 	andeq	r1, r3, r0, lsl fp
    1770:	0233e000 	eorseq	lr, r3, #0
    1774:	0000b000 	andeq	fp, r0, r0
    1778:	229c0100 	addscs	r0, ip, #0, 2
    177c:	13000005 	movwne	r0, #5
    1780:	00000bd5 	ldrdeq	r0, [r0], -r5
    1784:	37086a01 	strcc	r6, [r8, -r1, lsl #20]
    1788:	0000003f 	andeq	r0, r0, pc, lsr r0
    178c:	136e9102 	cmnne	lr, #-2147483648	; 0x80000000
    1790:	00001096 	muleq	r0, r6, r0
    1794:	55086a01 	strpl	r6, [r8, #-2561]	; 0xfffff5ff
    1798:	00000273 	andeq	r0, r0, r3, ror r2
    179c:	15689102 	strbne	r9, [r8, #-258]!	; 0xfffffefe
    17a0:	00000d96 	muleq	r0, r6, sp
    17a4:	09086c01 	stmdbeq	r8, {r0, sl, fp, sp, lr}
    17a8:	0000031b 	andeq	r0, r0, fp, lsl r3
    17ac:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17b0:	00103612 	andseq	r3, r0, r2, lsl r6
    17b4:	08500100 	ldmdaeq	r0, {r8}^
    17b8:	0233280d 	eorseq	r2, r3, #851968	; 0xd0000
    17bc:	0000b800 	andeq	fp, r0, r0, lsl #16
    17c0:	4a9c0100 	bmi	fe701bc8 <_estack+0xf66e1bc8>
    17c4:	13000005 	movwne	r0, #5
    17c8:	0000051a 	andeq	r0, r0, sl, lsl r5
    17cc:	3a085001 	bcc	2157d8 <__bss_end+0x168500>
    17d0:	000000b3 	strheq	r0, [r0], -r3
    17d4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    17d8:	0010d612 	andseq	sp, r0, r2, lsl r6
    17dc:	082d0100 	stmdaeq	sp!, {r8}
    17e0:	02326c0d 	eorseq	r6, r2, #3328	; 0xd00
    17e4:	0000bc00 	andeq	fp, r0, r0, lsl #24
    17e8:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    17ec:	16000005 	strne	r0, [r0], -r5
    17f0:	00023278 	andeq	r3, r2, r8, ror r2
    17f4:	00000098 	muleq	r0, r8, r0
    17f8:	000d7a15 	andeq	r7, sp, r5, lsl sl
    17fc:	08310100 	ldmdaeq	r1!, {r8}
    1800:	00004611 	andeq	r4, r0, r1, lsl r6
    1804:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1808:	0232b816 	eorseq	fp, r2, #1441792	; 0x160000
    180c:	00005800 	andeq	r5, r0, r0, lsl #16
    1810:	107b1500 	rsbsne	r1, fp, r0, lsl #10
    1814:	3d010000 	stccc	0, cr0, [r1, #-0]
    1818:	031b0d08 	tsteq	fp, #8, 26	; 0x200
    181c:	91020000 	mrsls	r0, (UNDEF: 2)
    1820:	00000070 	andeq	r0, r0, r0, ror r0
    1824:	0010b112 	andseq	fp, r0, r2, lsl r1
    1828:	080d0100 	stmdaeq	sp, {r8}
    182c:	0231ac0d 	eorseq	sl, r1, #3328	; 0xd00
    1830:	0000c000 	andeq	ip, r0, r0
    1834:	be9c0100 	fmllte	f0, f4, f0
    1838:	15000005 	strne	r0, [r0, #-5]
    183c:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    1840:	18080f01 	stmdane	r8, {r0, r8, r9, sl, fp}
    1844:	00000052 	andeq	r0, r0, r2, asr r0
    1848:	00749102 	rsbseq	r9, r4, r2, lsl #2
    184c:	000e4c12 	andeq	r4, lr, r2, lsl ip
    1850:	07b70100 	ldreq	r0, [r7, r0, lsl #2]!
    1854:	0230ec0d 	eorseq	lr, r0, #3328	; 0xd00
    1858:	0000c000 	andeq	ip, r0, r0
    185c:	269c0100 	ldrcs	r0, [ip], r0, lsl #2
    1860:	13000006 	movwne	r0, #6
    1864:	0000107b 	andeq	r1, r0, fp, ror r0
    1868:	3007b701 	andcc	fp, r7, r1, lsl #14
    186c:	0000031b 	andeq	r0, r0, fp, lsl r3
    1870:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
    1874:	00000def 	andeq	r0, r0, pc, ror #27
    1878:	5107b701 	tstpl	r7, r1, lsl #14
    187c:	0000026e 	andeq	r0, r0, lr, ror #4
    1880:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    1884:	000004b3 			; <UNDEFINED> instruction: 0x000004b3
    1888:	7007b701 	andvc	fp, r7, r1, lsl #14
    188c:	00000052 	andeq	r0, r0, r2, asr r0
    1890:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    1894:	0000102d 	andeq	r1, r0, sp, lsr #32
    1898:	9807b701 	stmdals	r7, {r0, r8, r9, sl, ip, sp, pc}
    189c:	0000062c 	andeq	r0, r0, ip, lsr #12
    18a0:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
    18a4:	00000bd5 	ldrdeq	r0, [r0], -r5
    18a8:	b107b701 	tstlt	r7, r1, lsl #14
    18ac:	0000003f 	andeq	r0, r0, pc, lsr r0
    18b0:	00009102 	andeq	r9, r0, r2, lsl #2
    18b4:	02630408 	rsbeq	r0, r3, #8, 8	; 0x8000000
    18b8:	26030000 	strcs	r0, [r3], -r0
    18bc:	12000006 	andne	r0, r0, #6
    18c0:	00000d5d 	andeq	r0, r0, sp, asr sp
    18c4:	08077601 	stmdaeq	r7, {r0, r9, sl, ip, sp, lr}
    18c8:	000230bc 	strheq	r3, [r2], -ip
    18cc:	00000030 	andeq	r0, r0, r0, lsr r0
    18d0:	06599c01 	ldrbeq	r9, [r9], -r1, lsl #24
    18d4:	89130000 	ldmdbhi	r3, {}	; <UNPREDICTABLE>
    18d8:	01000001 	tsteq	r0, r1
    18dc:	8d080776 	stchi	7, cr0, [r8, #-472]	; 0xfffffe28
    18e0:	02000000 	andeq	r0, r0, #0
    18e4:	17007491 			; <UNDEFINED> instruction: 0x17007491
    18e8:	00000fad 	andeq	r0, r0, sp, lsr #31
    18ec:	06074201 	streq	r4, [r7], -r1, lsl #4
    18f0:	00023094 	muleq	r2, r4, r0
    18f4:	00000028 	andeq	r0, r0, r8, lsr #32
    18f8:	53189c01 	tstpl	r8, #256	; 0x100
    18fc:	0100000f 	tsteq	r0, pc
    1900:	460f0714 			; <UNDEFINED> instruction: 0x460f0714
    1904:	a0000000 	andge	r0, r0, r0
    1908:	f400022f 	vst1.8	{d0-d3}, [r0 :128]
    190c:	01000000 	mrseq	r0, (UNDEF: 0)
    1910:	0006b89c 	muleq	r6, ip, r8
    1914:	0df61300 	ldcleq	3, cr1, [r6]
    1918:	14010000 	strne	r0, [r1], #-0
    191c:	06be3a07 	ldrteq	r3, [lr], r7, lsl #20
    1920:	91020000 	mrsls	r0, (UNDEF: 2)
    1924:	0c8b136c 	stceq	3, cr1, [fp], {108}	; 0x6c
    1928:	14010000 	strne	r0, [r1], #-0
    192c:	06c95a07 	strbeq	r5, [r9], r7, lsl #20
    1930:	91020000 	mrsls	r0, (UNDEF: 2)
    1934:	091c1568 	ldmdbeq	ip, {r3, r5, r6, r8, sl, ip}
    1938:	16010000 	strne	r0, [r1], -r0
    193c:	00460f07 	subeq	r0, r6, r7, lsl #30
    1940:	91020000 	mrsls	r0, (UNDEF: 2)
    1944:	04080074 	streq	r0, [r8], #-116	; 0xffffff8c
    1948:	00000216 	andeq	r0, r0, r6, lsl r2
    194c:	0006b803 	andeq	fp, r6, r3, lsl #16
    1950:	b3040800 	movwlt	r0, #18432	; 0x4800
    1954:	03000000 	movweq	r0, #0
    1958:	000006c3 	andeq	r0, r0, r3, asr #13
    195c:	000b1b19 	andeq	r1, fp, r9, lsl fp
    1960:	070c0100 	streq	r0, [ip, -r0, lsl #2]
    1964:	022f5806 	eoreq	r5, pc, #393216	; 0x60000
    1968:	00004800 	andeq	r4, r0, r0, lsl #16
    196c:	f69c0100 			; <UNDEFINED> instruction: 0xf69c0100
    1970:	13000006 	movwne	r0, #6
    1974:	00000df6 	strdeq	r0, [r0], -r6
    1978:	31070c01 	tstcc	r7, r1, lsl #24
    197c:	000006be 			; <UNDEFINED> instruction: 0x000006be
    1980:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1984:	000d4418 	andeq	r4, sp, r8, lsl r4
    1988:	06d90100 	ldrbeq	r0, [r9], r0, lsl #2
    198c:	00004616 	andeq	r4, r0, r6, lsl r6
    1990:	022e4000 	eoreq	r4, lr, #0
    1994:	00011800 	andeq	r1, r1, r0, lsl #16
    1998:	429c0100 	addsmi	r0, ip, #0, 2
    199c:	13000007 	movwne	r0, #7
    19a0:	000004f1 	strdeq	r0, [r0], -r1
    19a4:	4406d901 	strmi	sp, [r6], #-2305	; 0xfffff6ff
    19a8:	00000748 	andeq	r0, r0, r8, asr #14
    19ac:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
    19b0:	00000bc6 	andeq	r0, r0, r6, asr #23
    19b4:	0906db01 	stmdbeq	r6, {r0, r8, r9, fp, ip, lr, pc}
    19b8:	0000031b 	andeq	r0, r0, fp, lsl r3
    19bc:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    19c0:	0000091c 	andeq	r0, r0, ip, lsl r9
    19c4:	0f06dc01 	svceq	0x0006dc01
    19c8:	00000046 	andeq	r0, r0, r6, asr #32
    19cc:	00749102 	rsbseq	r9, r4, r2, lsl #2
    19d0:	01dd0408 	bicseq	r0, sp, r8, lsl #8
    19d4:	42030000 	andmi	r0, r3, #0
    19d8:	1a000007 	bne	19fc <_start-0xe604>
    19dc:	00000cf1 	strdeq	r0, [r0], -r1
    19e0:	06068701 	streq	r8, [r6], -r1, lsl #14
    19e4:	00022da4 	andeq	r2, r2, r4, lsr #27
    19e8:	0000009c 	muleq	r0, ip, r0
    19ec:	07959c01 	ldreq	r9, [r5, r1, lsl #24]
    19f0:	f1130000 			; <UNDEFINED> instruction: 0xf1130000
    19f4:	01000004 	tsteq	r0, r4
    19f8:	48310687 	ldmdami	r1!, {r0, r1, r2, r7, r9, sl}
    19fc:	02000007 	andeq	r0, r0, #7
    1a00:	8c136c91 	ldchi	12, cr6, [r3], {145}	; 0x91
    1a04:	0100000c 	tsteq	r0, ip
    1a08:	b34b0687 	movtlt	r0, #46727	; 0xb687
    1a0c:	02000000 	andeq	r0, r0, #0
    1a10:	1a156891 	bne	55bc5c <__bss_end+0x4ae984>
    1a14:	01000005 	tsteq	r0, r5
    1a18:	b30e0689 	movwlt	r0, #59017	; 0xe689
    1a1c:	02000000 	andeq	r0, r0, #0
    1a20:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
    1a24:	00000eb1 			; <UNDEFINED> instruction: 0x00000eb1
    1a28:	06064b01 	streq	r4, [r6], -r1, lsl #22
    1a2c:	00022c9c 	muleq	r2, ip, ip
    1a30:	00000108 	andeq	r0, r0, r8, lsl #2
    1a34:	07c79c01 	strbeq	r9, [r7, r1, lsl #24]
    1a38:	08160000 	ldmdaeq	r6, {}	; <UNPREDICTABLE>
    1a3c:	7800022d 	stmdavc	r0, {r0, r2, r3, r5, r9}
    1a40:	15000000 	strne	r0, [r0, #-0]
    1a44:	0000039c 	muleq	r0, ip, r3
    1a48:	03067c01 	movweq	r7, #27649	; 0x6c01
    1a4c:	00000389 	andeq	r0, r0, r9, lsl #7
    1a50:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1a54:	0e811800 	cdpeq	8, 8, cr1, cr1, cr0, {0}
    1a58:	2d010000 	stccs	0, cr0, [r1, #-0]
    1a5c:	00461006 	subeq	r1, r6, r6
    1a60:	2c200000 	stccs	0, cr0, [r0], #-0
    1a64:	007c0002 	rsbseq	r0, ip, r2
    1a68:	9c010000 	stcls	0, cr0, [r1], {-0}
    1a6c:	00000823 	andeq	r0, r0, r3, lsr #16
    1a70:	000d2513 	andeq	r2, sp, r3, lsl r5
    1a74:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    1a78:	0001e23a 	andeq	lr, r1, sl, lsr r2
    1a7c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1a80:	00102113 	andseq	r2, r0, r3, lsl r1
    1a84:	062d0100 	strteq	r0, [sp], -r0, lsl #2
    1a88:	00008d47 	andeq	r8, r0, r7, asr #26
    1a8c:	68910200 	ldmvs	r1, {r9}
    1a90:	00107c15 	andseq	r7, r0, r5, lsl ip
    1a94:	062f0100 	strteq	r0, [pc], -r0, lsl #2
    1a98:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1a9c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1aa0:	00091c15 	andeq	r1, r9, r5, lsl ip
    1aa4:	06300100 	ldrteq	r0, [r0], -r0, lsl #2
    1aa8:	00004610 	andeq	r4, r0, r0, lsl r6
    1aac:	70910200 	addsvc	r0, r1, r0, lsl #4
    1ab0:	0c351800 	ldceq	8, cr1, [r5], #-0
    1ab4:	10010000 	andne	r0, r1, r0
    1ab8:	00c41306 	sbceq	r1, r4, r6, lsl #6
    1abc:	2bc40000 	blcs	ff101ac4 <_estack+0xf70e1ac4>
    1ac0:	005c0002 	subseq	r0, ip, r2
    1ac4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1ac8:	0000086f 	andeq	r0, r0, pc, ror #16
    1acc:	000d2513 	andeq	r2, sp, r3, lsl r5
    1ad0:	06100100 	ldreq	r0, [r0], -r0, lsl #2
    1ad4:	0001e23b 	andeq	lr, r1, fp, lsr r2
    1ad8:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1adc:	00107c15 	andseq	r7, r0, r5, lsl ip
    1ae0:	06120100 	ldreq	r0, [r2], -r0, lsl #2
    1ae4:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1ae8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1aec:	00091c15 	andeq	r1, r9, r5, lsl ip
    1af0:	06130100 	ldreq	r0, [r3], -r0, lsl #2
    1af4:	0000c413 	andeq	ip, r0, r3, lsl r4
    1af8:	70910200 	addsvc	r0, r1, r0, lsl #4
    1afc:	0b781a00 	bleq	1e08304 <__bss_end+0x1d5b02c>
    1b00:	f6010000 			; <UNDEFINED> instruction: 0xf6010000
    1b04:	2b680705 	blcs	1a03720 <__bss_end+0x1956448>
    1b08:	005c0002 	subseq	r0, ip, r2
    1b0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b10:	000008b7 			; <UNDEFINED> instruction: 0x000008b7
    1b14:	000d2513 	andeq	r2, sp, r3, lsl r5
    1b18:	05f60100 	ldrbeq	r0, [r6, #256]!	; 0x100
    1b1c:	0001e22f 	andeq	lr, r1, pc, lsr #4
    1b20:	6c910200 	lfmvs	f0, 4, [r1], {0}
    1b24:	000d8713 	andeq	r8, sp, r3, lsl r7
    1b28:	05f60100 	ldrbeq	r0, [r6, #256]!	; 0x100
    1b2c:	0000c447 	andeq	ip, r0, r7, asr #8
    1b30:	68910200 	ldmvs	r1, {r9}
    1b34:	00107c15 	andseq	r7, r0, r5, lsl ip
    1b38:	05f80100 	ldrbeq	r0, [r8, #256]!	; 0x100
    1b3c:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1b40:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    1b44:	0e2c1a00 	vmuleq.f32	s2, s24, s0
    1b48:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    1b4c:	294c0605 	stmdbcs	ip, {r0, r2, r9, sl}^
    1b50:	021c0002 	andseq	r0, ip, #2
    1b54:	9c010000 	stcls	0, cr0, [r1], {-0}
    1b58:	00000917 	andeq	r0, r0, r7, lsl r9
    1b5c:	00107b15 	andseq	r7, r0, r5, lsl fp
    1b60:	05ab0100 	streq	r0, [fp, #256]!	; 0x100
    1b64:	00031b0a 	andeq	r1, r3, sl, lsl #22
    1b68:	70910200 	addsvc	r0, r1, r0, lsl #4
    1b6c:	02298c1b 	eoreq	r8, r9, #6912	; 0x1b00
    1b70:	00008400 	andeq	r8, r0, r0, lsl #8
    1b74:	0008fc00 	andeq	pc, r8, r0, lsl #24
    1b78:	02ed1500 	rsceq	r1, sp, #0, 10
    1b7c:	b5010000 	strlt	r0, [r1, #-0]
    1b80:	037e0b05 	cmneq	lr, #5120	; 0x1400
    1b84:	91020000 	mrsls	r0, (UNDEF: 2)
    1b88:	10160074 	andsne	r0, r6, r4, ror r0
    1b8c:	1000022a 	andne	r0, r0, sl, lsr #4
    1b90:	15000001 	strne	r0, [r0, #-1]
    1b94:	00000344 	andeq	r0, r0, r4, asr #6
    1b98:	0305d601 	movweq	sp, #22017	; 0x5601
    1b9c:	000000b3 	strheq	r0, [r0], -r3
    1ba0:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    1ba4:	0acd1c00 	beq	ff348bac <_estack+0xf7328bac>
    1ba8:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    1bac:	00521804 	subseq	r1, r2, r4, lsl #16
    1bb0:	29280000 	stmdbcs	r8!, {}	; <UNPREDICTABLE>
    1bb4:	00240002 	eoreq	r0, r4, r2
    1bb8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bbc:	000bf51d 	andeq	pc, fp, sp, lsl r5	; <UNPREDICTABLE>
    1bc0:	04ea0100 	strbteq	r0, [sl], #256	; 0x100
    1bc4:	0000b30e 	andeq	fp, r0, lr, lsl #6
    1bc8:	0228f000 	eoreq	pc, r8, #0
    1bcc:	00003800 	andeq	r3, r0, r0, lsl #16
    1bd0:	6a9c0100 	bvs	fe701fd8 <_estack+0xf66e1fd8>
    1bd4:	15000009 	strne	r0, [r0, #-9]
    1bd8:	0000091c 	andeq	r0, r0, ip, lsl r9
    1bdc:	0e04ec01 	cdpeq	12, 0, cr14, cr4, cr1, {0}
    1be0:	000000b3 	strheq	r0, [r0], -r3
    1be4:	15709102 	ldrbne	r9, [r0, #-258]!	; 0xfffffefe
    1be8:	000009f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1bec:	1804ed01 	stmdane	r4, {r0, r8, sl, fp, sp, lr, pc}
    1bf0:	00000052 	andeq	r0, r0, r2, asr r0
    1bf4:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1bf8:	000daa18 	andeq	sl, sp, r8, lsl sl
    1bfc:	04db0100 	ldrbeq	r0, [fp], #256	; 0x100
    1c00:	0000b30e 	andeq	fp, r0, lr, lsl #6
    1c04:	0228bc00 	eoreq	fp, r8, #0, 24
    1c08:	00003400 	andeq	r3, r0, r0, lsl #8
    1c0c:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    1c10:	15000009 	strne	r0, [r0, #-9]
    1c14:	00000fbe 			; <UNDEFINED> instruction: 0x00000fbe
    1c18:	0e04dd01 	cdpeq	13, 0, cr13, cr4, cr1, {0}
    1c1c:	000000b3 	strheq	r0, [r0], -r3
    1c20:	00749102 	rsbseq	r9, r4, r2, lsl #2
    1c24:	000ede18 	andeq	sp, lr, r8, lsl lr
    1c28:	04840100 	streq	r0, [r4], #256	; 0x100
    1c2c:	00004616 	andeq	r4, r0, r6, lsl r6
    1c30:	02271800 	eoreq	r1, r7, #0, 16
    1c34:	0001a400 	andeq	sl, r1, r0, lsl #8
    1c38:	eb9c0100 	bl	fe702040 <_estack+0xf66e2040>
    1c3c:	15000009 	strne	r0, [r0, #-9]
    1c40:	0000107b 	andeq	r1, r0, fp, ror r0
    1c44:	12048601 	andne	r8, r4, #1048576	; 0x100000
    1c48:	0000031b 	andeq	r0, r0, fp, lsl r3
    1c4c:	11155401 	tstne	r5, r1, lsl #8
    1c50:	01000010 	tsteq	r0, r0, lsl r0
    1c54:	46160487 	ldrmi	r0, [r6], -r7, lsl #9
    1c58:	02000000 	andeq	r0, r0, #0
    1c5c:	64166c91 	ldrvs	r6, [r6], #-3217	; 0xfffff36f
    1c60:	24000227 	strcs	r0, [r0], #-551	; 0xfffffdd9
    1c64:	15000001 	strne	r0, [r0, #-1]
    1c68:	00000bb7 			; <UNDEFINED> instruction: 0x00000bb7
    1c6c:	13049a01 	movwne	r9, #18945	; 0x4a01
    1c70:	00000046 	andeq	r0, r0, r6, asr #32
    1c74:	00689102 	rsbeq	r9, r8, r2, lsl #2
    1c78:	0c6f1700 	stcleq	7, cr1, [pc], #-0	; 1c80 <_start-0xe380>
    1c7c:	7c010000 	stcvc	0, cr0, [r1], {-0}
    1c80:	26e80604 	strbtcs	r0, [r8], r4, lsl #12
    1c84:	00300002 	eorseq	r0, r0, r2
    1c88:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c8c:	000cb31e 	andeq	fp, ip, lr, lsl r3
    1c90:	04710100 	ldrbteq	r0, [r1], #-256	; 0xffffff00
    1c94:	0226b006 	eoreq	fp, r6, #6
    1c98:	00003800 	andeq	r3, r0, r0, lsl #16
    1c9c:	1a9c0100 	bne	fe7020a4 <_estack+0xf66e20a4>
    1ca0:	00000fc5 	andeq	r0, r0, r5, asr #31
    1ca4:	06043001 	streq	r3, [r4], -r1
    1ca8:	00022614 	andeq	r2, r2, r4, lsl r6
    1cac:	0000009c 	muleq	r0, ip, r0
    1cb0:	0a399c01 	beq	e68cbc <__bss_end+0xdbb9e4>
    1cb4:	1c150000 	ldcne	0, cr0, [r5], {-0}
    1cb8:	01000009 	tsteq	r0, r9
    1cbc:	460f0432 			; <UNDEFINED> instruction: 0x460f0432
    1cc0:	02000000 	andeq	r0, r0, #0
    1cc4:	18007491 	stmdane	r0, {r0, r4, r7, sl, ip, sp, lr}
    1cc8:	00000f9a 	muleq	r0, sl, pc	; <UNPREDICTABLE>
    1ccc:	10040201 	andne	r0, r4, r1, lsl #4
    1cd0:	00000046 	andeq	r0, r0, r6, asr #32
    1cd4:	000224f8 	strdeq	r2, [r2], -r8
    1cd8:	0000011c 	andeq	r0, r0, ip, lsl r1
    1cdc:	0a959c01 	beq	fe568ce8 <_estack+0xf6548ce8>
    1ce0:	a8130000 	ldmdage	r3, {}	; <UNPREDICTABLE>
    1ce4:	0100000b 	tsteq	r0, fp
    1ce8:	e2300402 	eors	r0, r0, #33554432	; 0x2000000
    1cec:	02000001 	andeq	r0, r0, #1
    1cf0:	b7156491 			; <UNDEFINED> instruction: 0xb7156491
    1cf4:	0100000b 	tsteq	r0, fp
    1cf8:	46100404 	ldrmi	r0, [r0], -r4, lsl #8
    1cfc:	02000000 	andeq	r0, r0, #0
    1d00:	7b157491 	blvc	55ef4c <__bss_end+0x4b1c74>
    1d04:	01000010 	tsteq	r0, r0, lsl r0
    1d08:	1b0a0405 	blne	282d24 <__bss_end+0x1d5a4c>
    1d0c:	02000003 	andeq	r0, r0, #3
    1d10:	f0157091 			; <UNDEFINED> instruction: 0xf0157091
    1d14:	01000009 	tsteq	r0, r9
    1d18:	52190406 	andspl	r0, r9, #100663296	; 0x6000000
    1d1c:	02000000 	andeq	r0, r0, #0
    1d20:	1a006c91 	bne	1cf6c <__module_entries_end+0xcec8>
    1d24:	000010a5 	andeq	r1, r0, r5, lsr #1
    1d28:	0703d501 	streq	sp, [r3, -r1, lsl #10]
    1d2c:	00022400 	andeq	r2, r2, r0, lsl #8
    1d30:	000000f8 	strdeq	r0, [r0], -r8
    1d34:	0acd9c01 	beq	ff368d40 <_estack+0xf7348d40>
    1d38:	a8130000 	ldmdage	r3, {}	; <UNPREDICTABLE>
    1d3c:	0100000b 	tsteq	r0, fp
    1d40:	e22003d5 	eor	r0, r0, #1409286147	; 0x54000003
    1d44:	02000001 	andeq	r0, r0, #1
    1d48:	7b156c91 	blvc	55cf94 <__bss_end+0x4afcbc>
    1d4c:	01000010 	tsteq	r0, r0, lsl r0
    1d50:	1b0a03d7 	blne	282cb4 <__bss_end+0x1d59dc>
    1d54:	02000003 	andeq	r0, r0, #3
    1d58:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    1d5c:	00000c20 	andeq	r0, r0, r0, lsr #24
    1d60:	1703b301 	strne	fp, [r3, -r1, lsl #6]
    1d64:	00000046 	andeq	r0, r0, r6, asr #32
    1d68:	00022384 	andeq	r2, r2, r4, lsl #7
    1d6c:	0000007c 	andeq	r0, r0, ip, ror r0
    1d70:	0b199c01 	bleq	668d7c <__bss_end+0x5bbaa4>
    1d74:	25130000 	ldrcs	r0, [r3, #-0]
    1d78:	0100000d 	tsteq	r0, sp
    1d7c:	e23903b3 	eors	r0, r9, #-872415230	; 0xcc000002
    1d80:	02000001 	andeq	r0, r0, #1
    1d84:	1c156c91 	ldcne	12, cr6, [r5], {145}	; 0x91
    1d88:	01000009 	tsteq	r0, r9
    1d8c:	461003b5 			; <UNDEFINED> instruction: 0x461003b5
    1d90:	02000000 	andeq	r0, r0, #0
    1d94:	7b157491 	blvc	55efe0 <__bss_end+0x4b1d08>
    1d98:	01000010 	tsteq	r0, r0, lsl r0
    1d9c:	1f1703b6 	svcne	0x001703b6
    1da0:	0200000b 	andeq	r0, r0, #11
    1da4:	08007091 	stmdaeq	r0, {r0, r4, r7, ip, sp, lr}
    1da8:	00030404 	andeq	r0, r3, r4, lsl #8
    1dac:	0b190300 	bleq	6429b4 <__bss_end+0x5956dc>
    1db0:	041a0000 	ldreq	r0, [sl], #-0
    1db4:	01000010 	tsteq	r0, r0, lsl r0
    1db8:	80070373 	andhi	r0, r7, r3, ror r3
    1dbc:	04000222 	streq	r0, [r0], #-546	; 0xfffffdde
    1dc0:	01000001 	tsteq	r0, r1
    1dc4:	000b5c9c 	muleq	fp, ip, ip
    1dc8:	0f681300 	svceq	0x00681300
    1dcc:	73010000 	movwvc	r0, #4096	; 0x1000
    1dd0:	01e22103 	mvneq	r2, r3, lsl #2
    1dd4:	91020000 	mrsls	r0, (UNDEF: 2)
    1dd8:	107b156c 	rsbsne	r1, fp, ip, ror #10
    1ddc:	75010000 	strvc	r0, [r1, #-0]
    1de0:	031b0a03 	tsteq	fp, #12288	; 0x3000
    1de4:	91020000 	mrsls	r0, (UNDEF: 2)
    1de8:	0d1a0074 	ldceq	0, cr0, [sl, #-464]	; 0xfffffe30
    1dec:	0100000e 	tsteq	r0, lr
    1df0:	d8070307 	stmdale	r7, {r0, r1, r2, r8, r9}
    1df4:	a8000220 	stmdage	r0, {r5, r9}
    1df8:	01000001 	tsteq	r0, r1
    1dfc:	000bc49c 	muleq	fp, ip, r4
    1e00:	0d241300 	stceq	3, cr1, [r4, #-0]
    1e04:	07010000 	streq	r0, [r1, -r0]
    1e08:	01e22503 	mvneq	r2, r3, lsl #10
    1e0c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e10:	0de11364 	stcleq	3, cr1, [r1, #400]!	; 0x190
    1e14:	07010000 	streq	r0, [r1, -r0]
    1e18:	00524403 	subseq	r4, r2, r3, lsl #8
    1e1c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e20:	107b1560 	rsbsne	r1, fp, r0, ror #10
    1e24:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1e28:	031b0a03 	tsteq	fp, #12288	; 0x3000
    1e2c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e30:	0d121570 	cfldr32eq	mvfx1, [r2, #-448]	; 0xfffffe40
    1e34:	0a010000 	beq	41e3c <ramdisk+0x14b64>
    1e38:	00521903 	subseq	r1, r2, r3, lsl #18
    1e3c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e40:	0bb7156c 	bleq	fedc73f8 <_estack+0xf6da73f8>
    1e44:	0b010000 	bleq	41e4c <ramdisk+0x14b74>
    1e48:	00461003 	subeq	r1, r6, r3
    1e4c:	91020000 	mrsls	r0, (UNDEF: 2)
    1e50:	c5180074 	ldrgt	r0, [r8, #-116]	; 0xffffff8c
    1e54:	0100000c 	tsteq	r0, ip
    1e58:	521902f1 	andspl	r0, r9, #268435471	; 0x1000000f
    1e5c:	80000000 	andhi	r0, r0, r0
    1e60:	58000220 	stmdapl	r0, {r5, r9}
    1e64:	01000000 	mrseq	r0, (UNDEF: 0)
    1e68:	000c109c 	muleq	ip, ip, r0
    1e6c:	0d241300 	stceq	3, cr1, [r4, #-0]
    1e70:	f1010000 	setend	le
    1e74:	01e23802 	mvneq	r3, r2, lsl #16
    1e78:	91020000 	mrsls	r0, (UNDEF: 2)
    1e7c:	107b156c 	rsbsne	r1, fp, ip, ror #10
    1e80:	f3010000 	vhadd.u8	d0, d1, d0
    1e84:	031b0a02 	tsteq	fp, #8192	; 0x2000
    1e88:	91020000 	mrsls	r0, (UNDEF: 2)
    1e8c:	091b1574 	ldmdbeq	fp, {r2, r4, r5, r6, r8, sl, ip}
    1e90:	f4010000 	vst4.8	{d0-d3}, [r1], r0
    1e94:	00521902 	subseq	r1, r2, r2, lsl #18
    1e98:	91020000 	mrsls	r0, (UNDEF: 2)
    1e9c:	071a0070 			; <UNDEFINED> instruction: 0x071a0070
    1ea0:	0100000d 	tsteq	r0, sp
    1ea4:	fc0702c3 	stc2	2, cr0, [r7], {195}	; 0xc3
    1ea8:	8400021f 	strhi	r0, [r0], #-543	; 0xfffffde1
    1eac:	01000000 	mrseq	r0, (UNDEF: 0)
    1eb0:	000c589c 	muleq	ip, ip, r8
    1eb4:	034f1300 	movteq	r1, #62208	; 0xf300
    1eb8:	c3010000 	movwgt	r0, #4096	; 0x1000
    1ebc:	00b32002 	adcseq	r2, r3, r2
    1ec0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ec4:	051a156c 	ldreq	r1, [sl, #-1388]	; 0xfffffa94
    1ec8:	c5010000 	strgt	r0, [r1, #-0]
    1ecc:	00b30f02 	adcseq	r0, r3, r2, lsl #30
    1ed0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ed4:	10111570 	andsne	r1, r1, r0, ror r5
    1ed8:	c6010000 	strgt	r0, [r1], -r0
    1edc:	00461702 	subeq	r1, r6, r2, lsl #14
    1ee0:	91020000 	mrsls	r0, (UNDEF: 2)
    1ee4:	e71a0074 			; <UNDEFINED> instruction: 0xe71a0074
    1ee8:	0100000f 	tsteq	r0, pc
    1eec:	ec070282 	sfm	f0, 4, [r7], {130}	; 0x82
    1ef0:	1000021e 	andne	r0, r0, lr, lsl r2
    1ef4:	01000001 	tsteq	r0, r1
    1ef8:	000cc09c 	muleq	ip, ip, r0
    1efc:	0f781300 	svceq	0x00781300
    1f00:	82010000 	andhi	r0, r1, #0
    1f04:	06c92d02 	strbeq	r2, [r9], r2, lsl #26
    1f08:	91020000 	mrsls	r0, (UNDEF: 2)
    1f0c:	106c1364 	rsbne	r1, ip, r4, ror #6
    1f10:	82010000 	andhi	r0, r1, #0
    1f14:	00b34e02 	adcseq	r4, r3, r2, lsl #28
    1f18:	91020000 	mrsls	r0, (UNDEF: 2)
    1f1c:	051a1560 	ldreq	r1, [sl, #-1376]	; 0xfffffaa0
    1f20:	84010000 	strhi	r0, [r1], #-0
    1f24:	00b30f02 	adcseq	r0, r3, r2, lsl #30
    1f28:	91020000 	mrsls	r0, (UNDEF: 2)
    1f2c:	10111570 	andsne	r1, r1, r0, ror r5
    1f30:	85010000 	strhi	r0, [r1, #-0]
    1f34:	00461002 	subeq	r1, r6, r2
    1f38:	91020000 	mrsls	r0, (UNDEF: 2)
    1f3c:	0e3f156c 	cdpeq	5, 3, cr1, cr15, cr12, {3}
    1f40:	85010000 	strhi	r0, [r1, #-0]
    1f44:	00462102 	subeq	r2, r6, r2, lsl #2
    1f48:	91020000 	mrsls	r0, (UNDEF: 2)
    1f4c:	751a0074 	ldrvc	r0, [sl, #-116]	; 0xffffff8c
    1f50:	0100000e 	tsteq	r0, lr
    1f54:	ec070240 	sfm	f0, 4, [r7], {64}	; 0x40
    1f58:	0000021d 	andeq	r0, r0, sp, lsl r2
    1f5c:	01000001 	tsteq	r0, r1
    1f60:	000cf89c 	muleq	ip, ip, r8
    1f64:	0f8b1300 	svceq	0x008b1300
    1f68:	40010000 	andmi	r0, r1, r0
    1f6c:	01e22002 	mvneq	r2, r2
    1f70:	91020000 	mrsls	r0, (UNDEF: 2)
    1f74:	107b156c 	rsbsne	r1, fp, ip, ror #10
    1f78:	42010000 	andmi	r0, r1, #0
    1f7c:	031b0a02 	tsteq	fp, #8192	; 0x2000
    1f80:	91020000 	mrsls	r0, (UNDEF: 2)
    1f84:	9e180074 	mrcls	0, 0, r0, cr8, cr4, {3}
    1f88:	0100000e 	tsteq	r0, lr
    1f8c:	4616019b 			; <UNDEFINED> instruction: 0x4616019b
    1f90:	a0000000 	andge	r0, r0, r0
    1f94:	4c00021b 	sfmmi	f0, 4, [r0], {27}
    1f98:	01000002 	tsteq	r0, r2
    1f9c:	000dcf9c 	muleq	sp, ip, pc	; <UNPREDICTABLE>
    1fa0:	0d9f1300 	ldceq	3, cr1, [pc]	; 1fa8 <_start-0xe058>
    1fa4:	9b010000 	blls	41fac <ramdisk+0x14cd4>
    1fa8:	00963601 	addseq	r3, r6, r1, lsl #12
    1fac:	91020000 	mrsls	r0, (UNDEF: 2)
    1fb0:	0def1364 	stcleq	3, cr1, [pc, #400]!	; 2148 <_start-0xdeb8>
    1fb4:	9b010000 	blls	41fbc <ramdisk+0x14ce4>
    1fb8:	026e5c01 	rsbeq	r5, lr, #256	; 0x100
    1fbc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fc0:	0bd51360 	bleq	ff546d48 <_estack+0xf7526d48>
    1fc4:	9b010000 	blls	41fcc <ramdisk+0x14cf4>
    1fc8:	003f7301 	eorseq	r7, pc, r1, lsl #6
    1fcc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fd0:	0189135e 	orreq	r1, r9, lr, asr r3
    1fd4:	9b010000 	blls	41fdc <ramdisk+0x14d04>
    1fd8:	008d8701 	addeq	r8, sp, r1, lsl #14
    1fdc:	91020000 	mrsls	r0, (UNDEF: 2)
    1fe0:	04b31358 	ldrteq	r1, [r3], #856	; 0x358
    1fe4:	9b010000 	blls	41fec <ramdisk+0x14d14>
    1fe8:	0052ac01 	subseq	sl, r2, r1, lsl #24
    1fec:	91020000 	mrsls	r0, (UNDEF: 2)
    1ff0:	10c81300 	sbcne	r1, r8, r0, lsl #6
    1ff4:	9b010000 	blls	41ffc <ramdisk+0x14d24>
    1ff8:	0dcfc501 	cfstr64eq	mvdx12, [pc, #4]	; 2004 <_start-0xdffc>
    1ffc:	91020000 	mrsls	r0, (UNDEF: 2)
    2000:	10961304 	addsne	r1, r6, r4, lsl #6
    2004:	9b010000 	blls	4200c <ramdisk+0x14d34>
    2008:	0273e401 	rsbseq	lr, r3, #16777216	; 0x1000000
    200c:	91020000 	mrsls	r0, (UNDEF: 2)
    2010:	102d1f08 	eorne	r1, sp, r8, lsl #30
    2014:	9b010000 	blls	4201c <ramdisk+0x14d44>
    2018:	2c011001 	stccs	0, cr1, [r1], {1}
    201c:	02000006 	andeq	r0, r0, #6
    2020:	1c150c91 	ldcne	12, cr0, [r5], {145}	; 0x91
    2024:	01000009 	tsteq	r0, r9
    2028:	4616019d 			; <UNDEFINED> instruction: 0x4616019d
    202c:	02000000 	andeq	r0, r0, #0
    2030:	96157491 			; <UNDEFINED> instruction: 0x96157491
    2034:	0100000d 	tsteq	r0, sp
    2038:	1b0a019e 	blne	2826b8 <__bss_end+0x1d53e0>
    203c:	02000003 	andeq	r0, r0, #3
    2040:	e0167091 	muls	r6, r1, r0
    2044:	9c00021b 	sfmls	f0, 4, [r0], {27}
    2048:	15000001 	strne	r0, [r0, #-1]
    204c:	0000019c 	muleq	r0, ip, r1
    2050:	1301a901 	movwne	sl, #6401	; 0x1901
    2054:	00000273 	andeq	r0, r0, r3, ror r2
    2058:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    205c:	e2040800 	and	r0, r4, #0, 16
    2060:	00000001 	andeq	r0, r0, r1
    2064:	000002d7 	ldrdeq	r0, [r0], -r7
    2068:	07d80004 	ldrbeq	r0, [r8, r4]
    206c:	01040000 	mrseq	r0, (UNDEF: 4)
    2070:	00000037 	andeq	r0, r0, r7, lsr r0
    2074:	0011790c 	andseq	r7, r1, ip, lsl #18
    2078:	0000ae00 	andeq	sl, r0, r0, lsl #28
    207c:	0234c400 	eorseq	ip, r4, #0, 8
    2080:	0003a400 	andeq	sl, r3, r0, lsl #8
    2084:	0015b900 	andseq	fp, r5, r0, lsl #18
    2088:	11fd0200 	mvnsne	r0, r0, lsl #4
    208c:	0b020000 	bleq	82094 <ramdisk+0x54dbc>
    2090:	00003110 	andeq	r3, r0, r0, lsl r1
    2094:	37040300 	strcc	r0, [r4, -r0, lsl #6]
    2098:	04000000 	streq	r0, [r0], #-0
    209c:	00000047 	andeq	r0, r0, r7, asr #32
    20a0:	00004705 	andeq	r4, r0, r5, lsl #14
    20a4:	00530500 	subseq	r0, r3, r0, lsl #10
    20a8:	06000000 	streq	r0, [r0], -r0
    20ac:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
    20b0:	47070000 	strmi	r0, [r7, -r0]
    20b4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    20b8:	02080904 	andeq	r0, r8, #4, 18	; 0x10000
    20bc:	0079090d 	rsbseq	r0, r9, sp, lsl #18
    20c0:	6e0a0000 	cdpvs	0, 0, cr0, cr10, cr0, {0}
    20c4:	02000011 	andeq	r0, r0, #17
    20c8:	0025180e 	eoreq	r1, r5, lr, lsl #16
    20cc:	0a000000 	beq	20d4 <_start-0xdf2c>
    20d0:	00000030 	andeq	r0, r0, r0, lsr r0
    20d4:	530f0f02 	movwpl	r0, #65282	; 0xff02
    20d8:	04000000 	streq	r0, [r0], #-0
    20dc:	12120200 	andsne	r0, r2, #0, 4
    20e0:	10020000 	andne	r0, r2, r0
    20e4:	00005503 	andeq	r5, r0, r3, lsl #10
    20e8:	00790b00 	rsbseq	r0, r9, r0, lsl #22
    20ec:	00950000 	addseq	r0, r5, r0
    20f0:	470c0000 	strmi	r0, [ip, -r0]
    20f4:	47000000 	strmi	r0, [r0, -r0]
    20f8:	11e50d00 	mvnne	r0, r0, lsl #26
    20fc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    2100:	00008519 	andeq	r8, r0, r9, lsl r5
    2104:	74030500 	strvc	r0, [r3], #-1280	; 0xfffffb00
    2108:	090002c0 	stmdbeq	r0, {r6, r7, r9}
    210c:	090c0128 	stmdbeq	ip, {r3, r5, r8}
    2110:	00000133 	andeq	r0, r0, r3, lsr r1
    2114:	0012340a 	andseq	r3, r2, sl, lsl #8
    2118:	100d0100 	andne	r0, sp, r0, lsl #2
    211c:	00000133 	andeq	r0, r0, r3, lsr r1
    2120:	10f60a00 	rscsne	r0, r6, r0, lsl #20
    2124:	0e010000 	cdpeq	0, 0, cr0, cr1, cr0, {0}
    2128:	00013310 	andeq	r3, r1, r0, lsl r3
    212c:	2b0a0400 	blcs	283134 <__bss_end+0x1d5e5c>
    2130:	01000012 	tsteq	r0, r2, lsl r0
    2134:	0133100f 	teqeq	r3, pc
    2138:	0a080000 	beq	202140 <__bss_end+0x154e68>
    213c:	0000111e 	andeq	r1, r0, lr, lsl r1
    2140:	33101001 	tstcc	r0, #1
    2144:	0c000001 	stceq	0, cr0, [r0], {1}
    2148:	0012540a 	andseq	r5, r2, sl, lsl #8
    214c:	10110100 	andsne	r0, r1, r0, lsl #2
    2150:	00000133 	andeq	r0, r0, r3, lsr r1
    2154:	11cb0a10 	bicne	r0, fp, r0, lsl sl
    2158:	12010000 	andne	r0, r1, #0
    215c:	00013310 	andeq	r3, r1, r0, lsl r3
    2160:	480a1400 	stmdami	sl, {sl, ip}
    2164:	01000012 	tsteq	r0, r2, lsl r0
    2168:	01331013 	teqeq	r3, r3, lsl r0
    216c:	0a180000 	beq	602174 <__bss_end+0x554e9c>
    2170:	000011d3 	ldrdeq	r1, [r0], -r3
    2174:	33101401 	tstcc	r0, #16777216	; 0x1000000
    2178:	1c000001 	stcne	0, cr0, [r0], {1}
    217c:	0011dc0a 	andseq	sp, r1, sl, lsl #24
    2180:	10150100 	andsne	r0, r5, r0, lsl #2
    2184:	00000133 	andeq	r0, r0, r3, lsr r1
    2188:	10ff0a20 	rscsne	r0, pc, r0, lsr #20
    218c:	16010000 	strne	r0, [r1], -r0
    2190:	00013310 	andeq	r3, r1, r0, lsl r3
    2194:	06002400 	streq	r2, [r0], -r0, lsl #8
    2198:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
    219c:	0c020000 	stceq	0, cr0, [r2], {-0}
    21a0:	01000011 	tsteq	r0, r1, lsl r0
    21a4:	00a70317 	adceq	r0, r7, r7, lsl r3
    21a8:	3a0e0000 	bcc	3821b0 <__bss_end+0x2d4ed8>
    21ac:	0d000001 	stceq	0, cr0, [r0, #-4]
    21b0:	00000196 	muleq	r0, r6, r1
    21b4:	632b1901 			; <UNDEFINED> instruction: 0x632b1901
    21b8:	05000001 	streq	r0, [r0, #-1]
    21bc:	02b80803 	adcseq	r0, r8, #196608	; 0x30000
    21c0:	46040300 	strmi	r0, [r4], -r0, lsl #6
    21c4:	07000001 	streq	r0, [r0, -r1]
    21c8:	0000015d 	andeq	r0, r0, sp, asr r1
    21cc:	0001330b 	andeq	r3, r1, fp, lsl #6
    21d0:	00017800 	andeq	r7, r1, r0, lsl #16
    21d4:	00470c00 	subeq	r0, r7, r0, lsl #24
    21d8:	00020000 	andeq	r0, r2, r0
    21dc:	00114a0d 	andseq	r4, r1, sp, lsl #20
    21e0:	161c0100 	ldrne	r0, [ip], -r0, lsl #2
    21e4:	00000168 	andeq	r0, r0, r8, ror #2
    21e8:	c2b40305 	adcsgt	r0, r4, #335544320	; 0x14000000
    21ec:	630f0002 	movwvs	r0, #61442	; 0xf002
    21f0:	01000011 	tsteq	r0, r1, lsl r0
    21f4:	3788066d 	strcc	r0, [r8, sp, ror #12]
    21f8:	00e00002 	rsceq	r0, r0, r2
    21fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2200:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
    2204:	71726910 	cmnvc	r2, r0, lsl r9
    2208:	256d0100 	strbcs	r0, [sp, #-256]!	; 0xffffff00
    220c:	0000004e 	andeq	r0, r0, lr, asr #32
    2210:	0d6c9102 	stfeqp	f1, [ip, #-8]!
    2214:	0000115e 	andeq	r1, r0, lr, asr r1
    2218:	33106f01 	tstcc	r0, #1, 30
    221c:	02000001 	andeq	r0, r0, #1
    2220:	0f007491 	svceq	0x00007491
    2224:	000011f3 	strdeq	r1, [r0], -r3
    2228:	b4065b01 	strlt	r5, [r6], #-2817	; 0xfffff4ff
    222c:	d4000236 	strle	r0, [r0], #-566	; 0xfffffdca
    2230:	01000000 	mrseq	r0, (UNDEF: 0)
    2234:	0001f49c 	muleq	r1, ip, r4
    2238:	72691000 	rsbvc	r1, r9, #0
    223c:	5b010071 	blpl	42408 <ramdisk+0x15130>
    2240:	00004e24 	andeq	r4, r0, r4, lsr #28
    2244:	6c910200 	lfmvs	f0, 4, [r1], {0}
    2248:	00115e0d 	andseq	r5, r1, sp, lsl #28
    224c:	105d0100 	subsne	r0, sp, r0, lsl #2
    2250:	00000133 	andeq	r0, r0, r3, lsr r1
    2254:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2258:	00112611 	andseq	r2, r1, r1, lsl r6
    225c:	06510100 	ldrbeq	r0, [r1], -r0, lsl #2
    2260:	00023650 	andeq	r3, r2, r0, asr r6
    2264:	00000064 	andeq	r0, r0, r4, rrx
    2268:	02389c01 	eorseq	r9, r8, #256	; 0x100
    226c:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
    2270:	01007172 	tsteq	r0, r2, ror r1
    2274:	004e2651 	subeq	r2, lr, r1, asr r6
    2278:	91020000 	mrsls	r0, (UNDEF: 2)
    227c:	116e1274 	smcne	57636	; 0xe124
    2280:	51010000 	mrspl	r0, (UNDEF: 1)
    2284:	00002540 	andeq	r2, r0, r0, asr #10
    2288:	70910200 	addsvc	r0, r1, r0, lsl #4
    228c:	00003012 	andeq	r3, r0, r2, lsl r0
    2290:	52510100 	subspl	r0, r1, #0, 2
    2294:	00000053 	andeq	r0, r0, r3, asr r0
    2298:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    229c:	00113213 	andseq	r3, r1, r3, lsl r2
    22a0:	064c0100 	strbeq	r0, [ip], -r0, lsl #2
    22a4:	00023634 	andeq	r3, r2, r4, lsr r6
    22a8:	0000001c 	andeq	r0, r0, ip, lsl r0
    22ac:	3d139c01 	ldccc	12, cr9, [r3, #-4]
    22b0:	01000012 	tsteq	r0, r2, lsl r0
    22b4:	36180647 	ldrcc	r0, [r8], -r7, asr #12
    22b8:	001c0002 	andseq	r0, ip, r2
    22bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    22c0:	0011c011 	andseq	ip, r1, r1, lsl r0
    22c4:	06360100 	ldrteq	r0, [r6], -r0, lsl #2
    22c8:	00023578 	andeq	r3, r2, r8, ror r5
    22cc:	000000a0 	andeq	r0, r0, r0, lsr #1
    22d0:	02819c01 	addeq	r9, r1, #256	; 0x100
    22d4:	3b0d0000 	blcc	3422dc <__bss_end+0x295004>
    22d8:	01000011 	tsteq	r0, r1, lsl r0
    22dc:	01331938 	teqeq	r3, r8, lsr r9
    22e0:	54010000 	strpl	r0, [r1], #-0
    22e4:	11521400 	cmpne	r2, r0, lsl #8
    22e8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    22ec:	0234c40d 	eorseq	ip, r4, #218103808	; 0xd000000
    22f0:	0000b400 	andeq	fp, r0, r0, lsl #8
    22f4:	129c0100 	addsne	r0, ip, #0, 2
    22f8:	00001223 	andeq	r1, r0, r3, lsr #4
    22fc:	33281e01 			; <UNDEFINED> instruction: 0x33281e01
    2300:	02000001 	andeq	r0, r0, #1
    2304:	d0126c91 	mulsle	r2, r1, ip
    2308:	01000017 	tsteq	r0, r7, lsl r0
    230c:	004e441e 	subeq	r4, lr, lr, lsl r4
    2310:	91020000 	mrsls	r0, (UNDEF: 2)
    2314:	34dc1568 	ldrbcc	r1, [ip], #1384	; 0x568
    2318:	007c0002 	rsbseq	r0, ip, r2
    231c:	62160000 	andsvs	r0, r6, #0
    2320:	01007469 	tsteq	r0, r9, ror #8
    2324:	00471023 	subeq	r1, r7, r3, lsr #32
    2328:	91020000 	mrsls	r0, (UNDEF: 2)
    232c:	72691674 	rsbvc	r1, r9, #116, 12	; 0x7400000
    2330:	26010071 			; <UNDEFINED> instruction: 0x26010071
    2334:	00004710 	andeq	r4, r0, r0, lsl r7
    2338:	70910200 	addsvc	r0, r1, r0, lsl #4
    233c:	34000000 	strcc	r0, [r0], #-0
    2340:	04000004 	streq	r0, [r0], #-4
    2344:	00091d00 	andeq	r1, r9, r0, lsl #26
    2348:	37010400 	strcc	r0, [r1, -r0, lsl #8]
    234c:	0c000000 	stceq	0, cr0, [r0], {-0}
    2350:	0000131a 	andeq	r1, r0, sl, lsl r3
    2354:	000000ae 	andeq	r0, r0, lr, lsr #1
    2358:	00023868 	andeq	r3, r2, r8, ror #16
    235c:	000005d8 	ldrdeq	r0, [r0], -r8
    2360:	0000173e 	andeq	r1, r0, lr, lsr r7
    2364:	00130002 	andseq	r0, r3, r2
    2368:	62010700 	andvs	r0, r1, #0, 14
    236c:	02000000 	andeq	r0, r0, #0
    2370:	00620647 	rsbeq	r0, r2, r7, asr #12
    2374:	85030000 	strhi	r0, [r3, #-0]
    2378:	00000013 	andeq	r0, r0, r3, lsl r0
    237c:	0013b003 	andseq	fp, r3, r3
    2380:	66030100 	strvs	r0, [r3], -r0, lsl #2
    2384:	02000014 	andeq	r0, r0, #20
    2388:	00137903 	andseq	r7, r3, r3, lsl #18
    238c:	be030300 	cdplt	3, 0, cr0, cr3, cr0, {0}
    2390:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
    2394:	0012a603 	andseq	sl, r2, r3, lsl #12
    2398:	ba030500 	blt	c37a0 <__bss_end+0x164c8>
    239c:	06000012 			; <UNDEFINED> instruction: 0x06000012
    23a0:	08010400 	stmdaeq	r1, {sl}
    23a4:	00000666 	andeq	r0, r0, r6, ror #12
    23a8:	00136202 	andseq	r6, r3, r2, lsl #4
    23ac:	62010700 	andvs	r0, r1, #0, 14
    23b0:	02000000 	andeq	r0, r0, #0
    23b4:	0088065a 	addeq	r0, r8, sl, asr r6
    23b8:	71030000 	mrsvc	r0, (UNDEF: 3)
    23bc:	00000013 	andeq	r0, r0, r3, lsl r0
    23c0:	00149303 	andseq	r9, r4, r3, lsl #6
    23c4:	05000100 	streq	r0, [r0, #-256]	; 0xffffff00
    23c8:	094a01a0 	stmdbeq	sl, {r5, r7, r8}^
    23cc:	000001ca 	andeq	r0, r0, sl, asr #3
    23d0:	0013fc06 	andseq	pc, r3, r6, lsl #24
    23d4:	104b0100 	subne	r0, fp, r0, lsl #2
    23d8:	000001ca 	andeq	r0, r0, sl, asr #3
    23dc:	14030600 	strne	r0, [r3], #-1536	; 0xfffffa00
    23e0:	4c010000 	stcmi	0, cr0, [r1], {-0}
    23e4:	0001e110 	andeq	lr, r1, r0, lsl r1
    23e8:	5c061800 	stcpl	8, cr1, [r6], {-0}
    23ec:	01000012 	tsteq	r0, r2, lsl r0
    23f0:	01e8104d 	mvneq	r1, sp, asr #32
    23f4:	061c0000 	ldreq	r0, [ip], -r0
    23f8:	0000140e 	andeq	r1, r0, lr, lsl #8
    23fc:	e1104e01 	tst	r0, r1, lsl #28
    2400:	24000001 	strcs	r0, [r0], #-1
    2404:	00129a06 	andseq	r9, r2, r6, lsl #20
    2408:	104f0100 	subne	r0, pc, r0, lsl #2
    240c:	000001e8 	andeq	r0, r0, r8, ror #3
    2410:	14190628 	ldrne	r0, [r9], #-1576	; 0xfffff9d8
    2414:	50010000 	andpl	r0, r1, r0
    2418:	0001e110 	andeq	lr, r1, r0, lsl r1
    241c:	c9063000 	stmdbgt	r6, {ip, sp}
    2420:	01000013 	tsteq	r0, r3, lsl r0
    2424:	01e81051 	mvneq	r1, r1, asr r0
    2428:	06340000 	ldrteq	r0, [r4], -r0
    242c:	00001424 	andeq	r1, r0, r4, lsr #8
    2430:	e1105201 	tst	r0, r1, lsl #4
    2434:	3c000001 	stccc	0, cr0, [r0], {1}
    2438:	0013dd06 	andseq	sp, r3, r6, lsl #26
    243c:	10530100 	subsne	r0, r3, r0, lsl #2
    2440:	000001e8 	andeq	r0, r0, r8, ror #3
    2444:	142f0640 	strtne	r0, [pc], #-1600	; 244c <_start-0xdbb4>
    2448:	54010000 	strpl	r0, [r1], #-0
    244c:	0001e110 	andeq	lr, r1, r0, lsl r1
    2450:	d7064800 	strle	r4, [r6, -r0, lsl #16]
    2454:	01000013 	tsteq	r0, r3, lsl r0
    2458:	01e81055 	mvneq	r1, r5, asr r0
    245c:	064c0000 	strbeq	r0, [ip], -r0
    2460:	0000143a 	andeq	r1, r0, sl, lsr r4
    2464:	e1105601 	tst	r0, r1, lsl #12
    2468:	54000001 	strpl	r0, [r0], #-1
    246c:	00136b06 	andseq	r6, r3, r6, lsl #22
    2470:	10570100 	subsne	r0, r7, r0, lsl #2
    2474:	000001e8 	andeq	r0, r0, r8, ror #3
    2478:	14450658 	strbne	r0, [r5], #-1624	; 0xfffff9a8
    247c:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
    2480:	0001e110 	andeq	lr, r1, r0, lsl r1
    2484:	a0066000 	andge	r6, r6, r0
    2488:	01000012 	tsteq	r0, r2, lsl r0
    248c:	01e81059 	mvneq	r1, r9, asr r0
    2490:	06640000 	strbteq	r0, [r4], -r0
    2494:	00001450 	andeq	r1, r0, r0, asr r4
    2498:	e1105a01 	tst	r0, r1, lsl #20
    249c:	6c000001 	stcvs	0, cr0, [r0], {1}
    24a0:	00139106 	andseq	r9, r3, r6, lsl #2
    24a4:	105b0100 	subsne	r0, fp, r0, lsl #2
    24a8:	000001e8 	andeq	r0, r0, r8, ror #3
    24ac:	145b0670 	ldrbne	r0, [fp], #-1648	; 0xfffff990
    24b0:	5c010000 	stcpl	0, cr0, [r1], {-0}
    24b4:	0001e110 	andeq	lr, r1, r0, lsl r1
    24b8:	13067800 	movwne	r7, #26624	; 0x6800
    24bc:	01000013 	tsteq	r0, r3, lsl r0
    24c0:	01e8105d 	mvneq	r1, sp, asr r0
    24c4:	067c0000 	ldrbteq	r0, [ip], -r0
    24c8:	0000147d 	andeq	r1, r0, sp, ror r4
    24cc:	e1105e01 	tst	r0, r1, lsl #28
    24d0:	84000001 	strhi	r0, [r0], #-1
    24d4:	0012e206 	andseq	lr, r2, r6, lsl #4
    24d8:	105f0100 	subsne	r0, pc, r0, lsl #2
    24dc:	000001e8 	andeq	r0, r0, r8, ror #3
    24e0:	14880688 	strne	r0, [r8], #1672	; 0x688
    24e4:	60010000 	andvs	r0, r1, r0
    24e8:	0001e110 	andeq	lr, r1, r0, lsl r1
    24ec:	fa069000 	blx	1a64f4 <__bss_end+0xf921c>
    24f0:	01000012 	tsteq	r0, r2, lsl r0
    24f4:	01f81061 	mvnseq	r1, r1, rrx
    24f8:	06940000 	ldreq	r0, [r4], r0
    24fc:	000013a7 	andeq	r1, r0, r7, lsr #7
    2500:	e8106201 	ldmda	r0, {r0, r9, sp, lr}
    2504:	98000001 	stmdals	r0, {r0}
    2508:	01e10700 	mvneq	r0, r0, lsl #14
    250c:	01da0000 	bicseq	r0, sl, r0
    2510:	da080000 	ble	202518 <__bss_end+0x155240>
    2514:	05000001 	streq	r0, [r0, #-1]
    2518:	07040400 	streq	r0, [r4, -r0, lsl #8]
    251c:	00000659 	andeq	r0, r0, r9, asr r6
    2520:	54070404 	strpl	r0, [r7], #-1028	; 0xfffffbfc
    2524:	07000006 	streq	r0, [r0, -r6]
    2528:	000001e1 	andeq	r0, r0, r1, ror #3
    252c:	000001f8 	strdeq	r0, [r0], -r8
    2530:	0001da08 	andeq	sp, r1, r8, lsl #20
    2534:	07000100 	streq	r0, [r0, -r0, lsl #2]
    2538:	000001e1 	andeq	r0, r0, r1, ror #3
    253c:	00000208 	andeq	r0, r0, r8, lsl #4
    2540:	0001da08 	andeq	sp, r1, r8, lsl #20
    2544:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    2548:	00001262 	andeq	r1, r0, r2, ror #4
    254c:	88036401 	stmdahi	r3, {r0, sl, sp, lr}
    2550:	0a000000 	beq	2558 <_start-0xdaa8>
    2554:	00000208 	andeq	r0, r0, r8, lsl #4
    2558:	0001960b 	andeq	r9, r1, fp, lsl #12
    255c:	24660100 	strbtcs	r0, [r6], #-256	; 0xffffff00
    2560:	00000231 	andeq	r0, r0, r1, lsr r2
    2564:	b80c0305 	stmdalt	ip, {r0, r2, r8, r9}
    2568:	040c0002 	streq	r0, [ip], #-2
    256c:	00000214 	andeq	r0, r0, r4, lsl r2
    2570:	00022b0d 	andeq	r2, r2, sp, lsl #22
    2574:	12cf0e00 	sbcne	r0, pc, #0, 28
    2578:	c2010000 	andgt	r0, r1, #0
    257c:	023de806 	eorseq	lr, sp, #393216	; 0x60000
    2580:	00005800 	andeq	r5, r0, r0, lsl #16
    2584:	7a9c0100 	bvc	fe70298c <_estack+0xf66e298c>
    2588:	0f000002 	svceq	0x00000002
    258c:	00001279 	andeq	r1, r0, r9, ror r2
    2590:	da26c201 	ble	9b2d9c <__bss_end+0x905ac4>
    2594:	02000001 	andeq	r0, r0, #1
    2598:	5e106c91 	mrcpl	12, 0, r6, cr0, cr1, {4}
    259c:	01000011 	tsteq	r0, r1, lsl r0
    25a0:	01e110c4 	mvneq	r1, r4, asr #1
    25a4:	91020000 	mrsls	r0, (UNDEF: 2)
    25a8:	13f51074 	mvnsne	r1, #116	; 0x74
    25ac:	c5010000 	strgt	r0, [r1, #-0]
    25b0:	0001e110 	andeq	lr, r1, r0, lsl r1
    25b4:	70910200 	addsvc	r0, r1, r0, lsl #4
    25b8:	13e30e00 	mvnne	r0, #0, 28
    25bc:	a5010000 	strge	r0, [r1, #-0]
    25c0:	023c3006 	eorseq	r3, ip, #6
    25c4:	0001b800 	andeq	fp, r1, r0, lsl #16
    25c8:	cd9c0100 	ldfgts	f0, [ip]
    25cc:	0f000002 	svceq	0x00000002
    25d0:	00001279 	andeq	r1, r0, r9, ror r2
    25d4:	da25a501 	ble	96b9e0 <__bss_end+0x8be708>
    25d8:	02000001 	andeq	r0, r0, #1
    25dc:	930f6c91 	movwls	r6, #64657	; 0xfc91
    25e0:	01000016 	tsteq	r0, r6, lsl r0
    25e4:	00253ea5 	eoreq	r3, r5, r5, lsr #29
    25e8:	91020000 	mrsls	r0, (UNDEF: 2)
    25ec:	115e106b 	cmpne	lr, fp, rrx
    25f0:	a7010000 	strge	r0, [r1, -r0]
    25f4:	0001e110 	andeq	lr, r1, r0, lsl r1
    25f8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    25fc:	0013f510 	andseq	pc, r3, r0, lsl r5	; <UNPREDICTABLE>
    2600:	10a80100 	adcne	r0, r8, r0, lsl #2
    2604:	000001e1 	andeq	r0, r0, r1, ror #3
    2608:	00709102 	rsbseq	r9, r0, r2, lsl #2
    260c:	0012e90e 	andseq	lr, r2, lr, lsl #18
    2610:	06880100 	streq	r0, [r8], r0, lsl #2
    2614:	00023a80 	andeq	r3, r2, r0, lsl #21
    2618:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    261c:	03209c01 			; <UNDEFINED> instruction: 0x03209c01
    2620:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    2624:	01000012 	tsteq	r0, r2, lsl r0
    2628:	01da2488 	bicseq	r2, sl, r8, lsl #9
    262c:	91020000 	mrsls	r0, (UNDEF: 2)
    2630:	16930f6c 	ldrne	r0, [r3], ip, ror #30
    2634:	88010000 	stmdahi	r1, {}	; <UNPREDICTABLE>
    2638:	0000253d 	andeq	r2, r0, sp, lsr r5
    263c:	6b910200 	blvs	fe442e44 <_estack+0xf6422e44>
    2640:	00115e10 	andseq	r5, r1, r0, lsl lr
    2644:	108a0100 	addne	r0, sl, r0, lsl #2
    2648:	000001e1 	andeq	r0, r0, r1, ror #3
    264c:	10749102 	rsbsne	r9, r4, r2, lsl #2
    2650:	000013f5 	strdeq	r1, [r0], -r5
    2654:	e1108b01 	tst	r0, r1, lsl #22
    2658:	02000001 	andeq	r0, r0, #1
    265c:	11007091 	swpne	r7, r1, [r0]
    2660:	00001280 	andeq	r1, r0, r0, lsl #5
    2664:	4a058401 	bmi	163670 <__bss_end+0xb6398>
    2668:	30000003 	andcc	r0, r0, r3
    266c:	5000023a 	andpl	r0, r0, sl, lsr r2
    2670:	01000000 	mrseq	r0, (UNDEF: 0)
    2674:	00034a9c 	muleq	r3, ip, sl
    2678:	12790f00 	rsbsne	r0, r9, #0, 30
    267c:	84010000 	strhi	r0, [r1], #-0
    2680:	0001da1b 	andeq	sp, r1, fp, lsl sl
    2684:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2688:	05041200 	streq	r1, [r4, #-512]	; 0xfffffe00
    268c:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2690:	0014750e 	andseq	r7, r4, lr, lsl #10
    2694:	06790100 	ldrbteq	r0, [r9], -r0, lsl #2
    2698:	00023978 	andeq	r3, r2, r8, ror r9
    269c:	000000b8 	strheq	r0, [r0], -r8
    26a0:	03a49c01 			; <UNDEFINED> instruction: 0x03a49c01
    26a4:	790f0000 	stmdbvc	pc, {}	; <UNPREDICTABLE>
    26a8:	01000012 	tsteq	r0, r2, lsl r0
    26ac:	01da1b79 	bicseq	r1, sl, r9, ror fp
    26b0:	91020000 	mrsls	r0, (UNDEF: 2)
    26b4:	130c0f6c 	movwne	r0, #53100	; 0xcf6c
    26b8:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    26bc:	0001da30 	andeq	sp, r1, r0, lsr sl
    26c0:	68910200 	ldmvs	r1, {r9}
    26c4:	0013f510 	andseq	pc, r3, r0, lsl r5	; <UNPREDICTABLE>
    26c8:	107a0100 	rsbsne	r0, sl, r0, lsl #2
    26cc:	000001e1 	andeq	r0, r0, r1, ror #3
    26d0:	10749102 	rsbsne	r9, r4, r2, lsl #2
    26d4:	0000115e 	andeq	r1, r0, lr, asr r1
    26d8:	e1107b01 	tst	r0, r1, lsl #22
    26dc:	02000001 	andeq	r0, r0, #1
    26e0:	13007091 	movwne	r7, #145	; 0x91
    26e4:	00001289 	andeq	r1, r0, r9, lsl #5
    26e8:	44067501 	strmi	r7, [r6], #-1281	; 0xfffffaff
    26ec:	34000239 	strcc	r0, [r0], #-569	; 0xfffffdc7
    26f0:	01000000 	mrseq	r0, (UNDEF: 0)
    26f4:	0003d99c 	muleq	r3, ip, r9
    26f8:	12790f00 	rsbsne	r0, r9, #0, 30
    26fc:	75010000 	strvc	r0, [r1, #-0]
    2700:	0001da24 	andeq	sp, r1, r4, lsr #20
    2704:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    2708:	72696414 	rsbvc	r6, r9, #20, 8	; 0x14000000
    270c:	3a750100 	bcc	1d42b14 <__bss_end+0x1c9583c>
    2710:	00000069 	andeq	r0, r0, r9, rrx
    2714:	00739102 	rsbseq	r9, r3, r2, lsl #2
    2718:	00139715 	andseq	r9, r3, r5, lsl r7
    271c:	06690100 	strbteq	r0, [r9], -r0, lsl #2
    2720:	00023868 	andeq	r3, r2, r8, ror #16
    2724:	000000dc 	ldrdeq	r0, [r0], -ip
    2728:	790f9c01 	stmdbvc	pc, {r0, sl, fp, ip, pc}	; <UNPREDICTABLE>
    272c:	01000012 	tsteq	r0, r2, lsl r0
    2730:	01da2369 	bicseq	r2, sl, r9, ror #6
    2734:	91020000 	mrsls	r0, (UNDEF: 2)
    2738:	13cf0f64 	bicne	r0, pc, #100, 30	; 0x190
    273c:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    2740:	0001da38 	andeq	sp, r1, r8, lsr sl
    2744:	60910200 	addsvs	r0, r1, r0, lsl #4
    2748:	0013f510 	andseq	pc, r3, r0, lsl r5	; <UNPREDICTABLE>
    274c:	066b0100 	strbteq	r0, [fp], -r0, lsl #2
    2750:	0000034a 	andeq	r0, r0, sl, asr #6
    2754:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
    2758:	006c6176 	rsbeq	r6, ip, r6, ror r1
    275c:	e1106d01 	tst	r0, r1, lsl #26
    2760:	02000001 	andeq	r0, r0, #1
    2764:	74107091 	ldrvc	r7, [r0], #-145	; 0xffffff6f
    2768:	01000012 	tsteq	r0, r2, lsl r0
    276c:	034a066f 	movteq	r0, #42607	; 0xa66f
    2770:	91020000 	mrsls	r0, (UNDEF: 2)
    2774:	e500006c 	str	r0, [r0, #-108]	; 0xffffff94
    2778:	04000002 	streq	r0, [r0], #-2
    277c:	000a8400 	andeq	r8, sl, r0, lsl #8
    2780:	37010400 	strcc	r0, [r1, -r0, lsl #8]
    2784:	0c000000 	stceq	0, cr0, [r0], {-0}
    2788:	0000152b 	andeq	r1, r0, fp, lsr #10
    278c:	000000ae 	andeq	r0, r0, lr, lsr #1
    2790:	00023e40 	andeq	r3, r2, r0, asr #28
    2794:	000004ac 	andeq	r0, r0, ip, lsr #9
    2798:	000018c5 	andeq	r1, r0, r5, asr #17
    279c:	0007b102 	andeq	fp, r7, r2, lsl #2
    27a0:	17d10200 	ldrbne	r0, [r1, r0, lsl #4]
    27a4:	00000036 	andeq	r0, r0, r6, lsr r0
    27a8:	00002503 	andeq	r2, r0, r3, lsl #10
    27ac:	07040400 	streq	r0, [r4, -r0, lsl #8]
    27b0:	00000659 	andeq	r0, r0, r9, asr r6
    27b4:	69050405 	stmdbvs	r5, {r0, r2, sl}
    27b8:	0400746e 	streq	r7, [r0], #-1134	; 0xfffffb92
    27bc:	017b0508 	cmneq	fp, r8, lsl #10
    27c0:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    27c4:	0001a904 	andeq	sl, r1, r4, lsl #18
    27c8:	06010400 	streq	r0, [r1], -r0, lsl #8
    27cc:	00000668 	andeq	r0, r0, r8, ror #12
    27d0:	66080104 	strvs	r0, [r8], -r4, lsl #2
    27d4:	04000006 	streq	r0, [r0], #-6
    27d8:	07310502 	ldreq	r0, [r1, -r2, lsl #10]!
    27dc:	02040000 	andeq	r0, r4, #0
    27e0:	00009b07 	andeq	r9, r0, r7, lsl #22
    27e4:	00670300 	rsbeq	r0, r7, r0, lsl #6
    27e8:	04040000 	streq	r0, [r4], #-0
    27ec:	00018005 	andeq	r8, r1, r5
    27f0:	07040400 	streq	r0, [r4, -r0, lsl #8]
    27f4:	00000654 	andeq	r0, r0, r4, asr r6
    27f8:	4f070804 	svcmi	0x00070804
    27fc:	06000006 	streq	r0, [r0], -r6
    2800:	59040704 	stmdbpl	r4, {r2, r8, r9, sl}
    2804:	04000000 	streq	r0, [r0], #-0
    2808:	066f0801 	strbteq	r0, [pc], -r1, lsl #16
    280c:	12080000 	andne	r0, r8, #0
    2810:	00000015 	andeq	r0, r0, r5, lsl r0
    2814:	0e5c0110 	mrceq	1, 2, r0, cr12, cr0, {0}
    2818:	000000be 	strheq	r0, [r0], -lr
    281c:	00152409 	andseq	r2, r5, r9, lsl #8
    2820:	175f0100 	ldrbne	r0, [pc, -r0, lsl #2]
    2824:	000000c5 	andeq	r0, r0, r5, asr #1
    2828:	00151d09 	andseq	r1, r5, r9, lsl #26
    282c:	10630100 	rsbne	r0, r3, r0, lsl #2
    2830:	000000ca 	andeq	r0, r0, sl, asr #1
    2834:	04080400 	streq	r0, [r8], #-1024	; 0xfffffc00
    2838:	000001ae 	andeq	r0, r0, lr, lsr #3
    283c:	0000be0a 	andeq	fp, r0, sl, lsl #28
    2840:	00590b00 	subseq	r0, r9, r0, lsl #22
    2844:	00db0000 	sbcseq	r0, fp, r0
    2848:	360c0000 	strcc	r0, [ip], -r0
    284c:	ff000000 			; <UNDEFINED> instruction: 0xff000000
    2850:	950d000f 	strls	r0, [sp, #-15]
    2854:	01000015 	tsteq	r0, r5, lsl r0
    2858:	00970364 	addseq	r0, r7, r4, ror #6
    285c:	03050000 	movweq	r0, #20480	; 0x5000
    2860:	0002c2c0 	andeq	ip, r2, r0, asr #5
    2864:	0014cc0e 	andseq	ip, r4, lr, lsl #24
    2868:	68010800 	stmdavs	r1, {fp}
    286c:	00011510 	andeq	r1, r1, r0, lsl r5
    2870:	16440f00 	strbne	r0, [r4], -r0, lsl #30
    2874:	6a010000 	bvs	4287c <ramdisk+0x155a4>
    2878:	00011517 	andeq	r1, r1, r7, lsl r5
    287c:	8a0f0000 	bhi	3c2884 <__bss_end+0x3155ac>
    2880:	01000015 	tsteq	r0, r5, lsl r0
    2884:	0025096b 	eoreq	r0, r5, fp, ror #18
    2888:	00040000 	andeq	r0, r4, r0
    288c:	00ed0407 	rsceq	r0, sp, r7, lsl #8
    2890:	f6020000 			; <UNDEFINED> instruction: 0xf6020000
    2894:	01000015 	tsteq	r0, r5, lsl r0
    2898:	00ed036c 	rsceq	r0, sp, ip, ror #6
    289c:	df0d0000 	svcle	0x000d0000
    28a0:	01000015 	tsteq	r0, r5, lsl r0
    28a4:	006e1d82 	rsbeq	r1, lr, r2, lsl #27
    28a8:	03050000 	movweq	r0, #20480	; 0x5000
    28ac:	0002b810 	andeq	fp, r2, r0, lsl r8
    28b0:	0015b10d 	andseq	fp, r5, sp, lsl #2
    28b4:	15850100 	strne	r0, [r5, #256]	; 0x100
    28b8:	00000031 	andeq	r0, r0, r1, lsr r0
    28bc:	b8140305 	ldmdalt	r4, {r0, r2, r8, r9}
    28c0:	ef0d0002 	svc	0x000d0002
    28c4:	01000015 	tsteq	r0, r5, lsl r0
    28c8:	011b1388 	tsteq	fp, r8, lsl #7
    28cc:	03050000 	movweq	r0, #20480	; 0x5000
    28d0:	0002d2c0 	andeq	sp, r2, r0, asr #5
    28d4:	00159b0d 	andseq	r9, r5, sp, lsl #22
    28d8:	1c880100 	stfnes	f0, [r8], {0}
    28dc:	0000016f 	andeq	r0, r0, pc, ror #2
    28e0:	d2c80305 	sbcle	r0, r8, #335544320	; 0x14000000
    28e4:	04070002 	streq	r0, [r7], #-2
    28e8:	0000011b 	andeq	r0, r0, fp, lsl r1
    28ec:	0016210d 	andseq	r2, r6, sp, lsl #2
    28f0:	0f8c0100 	svceq	0x008c0100
    28f4:	00000025 	andeq	r0, r0, r5, lsr #32
    28f8:	bee80305 	cdplt	3, 14, cr0, cr8, cr5, {0}
    28fc:	01100002 	tsteq	r0, r2
    2900:	01000016 	tsteq	r0, r6, lsl r0
    2904:	00250891 	mlaeq	r5, r1, r8, r0
    2908:	03050000 	movweq	r0, #20480	; 0x5000
    290c:	0002d2cc 	andeq	sp, r2, ip, asr #5
    2910:	00149c11 	andseq	r9, r4, r1, lsl ip
    2914:	01340100 	teqeq	r4, r0, lsl #2
    2918:	0241980d 	subeq	r9, r1, #851968	; 0xd0000
    291c:	00015400 	andeq	r5, r1, r0, lsl #8
    2920:	e19c0100 	orrs	r0, ip, r0, lsl #2
    2924:	12000001 	andne	r0, r0, #1
    2928:	0000165f 	andeq	r1, r0, pc, asr r6
    292c:	35013401 	strcc	r3, [r1, #-1025]	; 0xfffffbff
    2930:	0000016f 	andeq	r0, r0, pc, ror #2
    2934:	136c9102 	cmnne	ip, #-2147483648	; 0x80000000
    2938:	00000726 	andeq	r0, r0, r6, lsr #14
    293c:	0d013601 	stceq	6, cr3, [r1, #-4]
    2940:	0000016f 	andeq	r0, r0, pc, ror #2
    2944:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
    2948:	00637570 	rsbeq	r7, r3, r0, ror r5
    294c:	10013701 	andne	r3, r1, r1, lsl #14
    2950:	0000008a 	andeq	r0, r0, sl, lsl #1
    2954:	00709102 	rsbseq	r9, r0, r2, lsl #2
    2958:	0014d911 	andseq	sp, r4, r1, lsl r9
    295c:	01130100 	tsteq	r3, r0, lsl #2
    2960:	0240c00d 	subeq	ip, r0, #13
    2964:	0000d800 	andeq	sp, r0, r0, lsl #16
    2968:	199c0100 	ldmibne	ip, {r8}
    296c:	13000002 	movwne	r0, #2
    2970:	00001501 	andeq	r1, r0, r1, lsl #10
    2974:	0d011501 	cfstr32eq	mvfx1, [r1, #-4]
    2978:	0000016f 	andeq	r0, r0, pc, ror #2
    297c:	13709102 	cmnne	r0, #-2147483648	; 0x80000000
    2980:	00001654 	andeq	r1, r0, r4, asr r6
    2984:	10011601 	andne	r1, r1, r1, lsl #12
    2988:	0000008a 	andeq	r0, r0, sl, lsl #1
    298c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    2990:	0015c915 	andseq	ip, r5, r5, lsl r9
    2994:	010d0100 	mrseq	r0, (UNDEF: 29)
    2998:	0240a806 	subeq	sl, r0, #393216	; 0x60000
    299c:	00001800 	andeq	r1, r0, r0, lsl #16
    29a0:	169c0100 	ldrne	r0, [ip], r0, lsl #2
    29a4:	000014b7 			; <UNDEFINED> instruction: 0x000014b7
    29a8:	08010701 	stmdaeq	r1, {r0, r8, r9, sl}
    29ac:	00000025 	andeq	r0, r0, r5, lsr #32
    29b0:	00024084 	andeq	r4, r2, r4, lsl #1
    29b4:	00000024 	andeq	r0, r0, r4, lsr #32
    29b8:	17179c01 	ldrne	r9, [r7, -r1, lsl #24]
    29bc:	01000016 	tsteq	r0, r6, lsl r0
    29c0:	400806ee 	andmi	r0, r8, lr, ror #13
    29c4:	007c0002 	rsbseq	r0, ip, r2
    29c8:	9c010000 	stcls	0, cr0, [r1], {-0}
    29cc:	00000286 	andeq	r0, r0, r6, lsl #5
    29d0:	00767018 	rsbseq	r7, r6, r8, lsl r0
    29d4:	8817ee01 	ldmdahi	r7, {r0, r9, sl, fp, sp, lr, pc}
    29d8:	02000000 	andeq	r0, r0, #0
    29dc:	70196c91 	mulsvc	r9, r1, ip
    29e0:	01006375 	tsteq	r0, r5, ror r3
    29e4:	008a10f0 	strdeq	r1, [sl], r0
    29e8:	91020000 	mrsls	r0, (UNDEF: 2)
    29ec:	14ed0d74 	strbtne	r0, [sp], #3444	; 0xd74
    29f0:	f1010000 	setend	le
    29f4:	00016f0d 	andeq	r6, r1, sp, lsl #30
    29f8:	70910200 	addsvc	r0, r1, r0, lsl #4
    29fc:	14f41a00 	ldrbtne	r1, [r4], #2560	; 0xa00
    2a00:	92010000 	andls	r0, r1, #0
    2a04:	00008807 	andeq	r8, r0, r7, lsl #16
    2a08:	023e4000 	eorseq	r4, lr, #0
    2a0c:	0001c800 	andeq	ip, r1, r0, lsl #16
    2a10:	1b9c0100 	blne	fe702e18 <_estack+0xf66e2e18>
    2a14:	0000160b 	andeq	r1, r0, fp, lsl #12
    2a18:	251c9201 	ldrcs	r9, [ip, #-513]	; 0xfffffdff
    2a1c:	02000000 	andeq	r0, r0, #0
    2a20:	e50d6491 	str	r6, [sp, #-1169]	; 0xfffffb6f
    2a24:	01000014 	tsteq	r0, r4, lsl r0
    2a28:	016f0d94 			; <UNDEFINED> instruction: 0x016f0d94
    2a2c:	91020000 	mrsls	r0, (UNDEF: 2)
    2a30:	15a10d74 	strne	r0, [r1, #3444]!	; 0xd74
    2a34:	94010000 	strls	r0, [r1], #-0
    2a38:	00016f17 	andeq	r6, r1, r7, lsl pc
    2a3c:	70910200 	addsvc	r0, r1, r0, lsl #4
    2a40:	0016350d 	andseq	r3, r6, sp, lsl #10
    2a44:	29940100 	ldmibcs	r4, {r8}
    2a48:	0000016f 	andeq	r0, r0, pc, ror #2
    2a4c:	0d689102 	stfeqp	f1, [r8, #-8]!
    2a50:	000015c0 	andeq	r1, r0, r0, asr #11
    2a54:	88079501 	stmdahi	r7, {r0, r8, sl, ip, pc}
    2a58:	02000000 	andeq	r0, r0, #0
    2a5c:	00006c91 	muleq	r0, r1, ip
    2a60:	000006fd 	strdeq	r0, [r0], -sp
    2a64:	0c410004 	mcrreq	0, 0, r0, r1, cr4
    2a68:	01040000 	mrseq	r0, (UNDEF: 4)
    2a6c:	00000037 	andeq	r0, r0, r7, lsr r0
    2a70:	00184c0c 	andseq	r4, r8, ip, lsl #24
    2a74:	0000ae00 	andeq	sl, r0, r0, lsl #28
    2a78:	02430400 	subeq	r0, r3, #0, 8
    2a7c:	00084800 	andeq	r4, r8, r0, lsl #16
    2a80:	001af200 	andseq	pc, sl, r0, lsl #4
    2a84:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
    2a88:	00746e69 	rsbseq	r6, r4, r9, ror #28
    2a8c:	59070403 	stmdbpl	r7, {r0, r1, sl}
    2a90:	03000006 	movweq	r0, #6
    2a94:	017b0508 	cmneq	fp, r8, lsl #10
    2a98:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    2a9c:	0001a904 	andeq	sl, r1, r4, lsl #18
    2aa0:	03040400 	movweq	r0, #17408	; 0x4400
    2aa4:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
    2aa8:	04030000 	streq	r0, [r3], #-0
    2aac:	00018005 	andeq	r8, r1, r5
    2ab0:	06010300 	streq	r0, [r1], -r0, lsl #6
    2ab4:	00000668 	andeq	r0, r0, r8, ror #12
    2ab8:	9b070203 	blls	1c32cc <__bss_end+0x115ff4>
    2abc:	03000000 	movweq	r0, #0
    2ac0:	06660801 	strbteq	r0, [r6], -r1, lsl #16
    2ac4:	02030000 	andeq	r0, r3, #0
    2ac8:	00073105 	andeq	r3, r7, r5, lsl #2
    2acc:	07080300 	streq	r0, [r8, -r0, lsl #6]
    2ad0:	0000064f 	andeq	r0, r0, pc, asr #12
    2ad4:	6f080103 	svcvs	0x00080103
    2ad8:	05000006 	streq	r0, [r0, #-6]
    2adc:	00000074 	andeq	r0, r0, r4, ror r0
    2ae0:	007b0406 	rsbseq	r0, fp, r6, lsl #8
    2ae4:	2b070000 	blcs	1c2aec <__bss_end+0x115814>
    2ae8:	02000017 	andeq	r0, r0, #23
    2aec:	00581931 	subseq	r1, r8, r1, lsr r9
    2af0:	ea070000 	b	1c2af8 <__bss_end+0x115820>
    2af4:	02000018 	andeq	r0, r0, #24
    2af8:	00431934 	subeq	r1, r3, r4, lsr r9
    2afc:	a5070000 	strge	r0, [r7, #-0]
    2b00:	03000017 	movweq	r0, #23
    2b04:	002c1632 	eoreq	r1, ip, r2, lsr r6
    2b08:	8b070000 	blhi	1c2b10 <__bss_end+0x115838>
    2b0c:	03000017 	movweq	r0, #23
    2b10:	005f1733 	subseq	r1, pc, r3, lsr r7	; <UNPREDICTABLE>
    2b14:	59070000 	stmdbpl	r7, {}	; <UNPREDICTABLE>
    2b18:	03000017 	movweq	r0, #23
    2b1c:	00861334 	addeq	r1, r6, r4, lsr r3
    2b20:	58070000 	stmdapl	r7, {}	; <UNPREDICTABLE>
    2b24:	03000017 	movweq	r0, #23
    2b28:	00921335 	addseq	r1, r2, r5, lsr r3
    2b2c:	5e070000 	cdppl	0, 0, cr0, cr7, cr0, {0}
    2b30:	03000017 	movweq	r0, #23
    2b34:	00c20f53 	sbceq	r0, r2, r3, asr pc
    2b38:	61070000 	mrsvs	r0, (UNDEF: 7)
    2b3c:	03000019 	movweq	r0, #25
    2b40:	00c20f54 	sbceq	r0, r2, r4, asr pc
    2b44:	46070000 	strmi	r0, [r7], -r0
    2b48:	03000018 	movweq	r0, #24
    2b4c:	00740e6a 	rsbseq	r0, r4, sl, ror #28
    2b50:	30080000 	andcc	r0, r8, r0
    2b54:	09850302 	stmibeq	r5, {r1, r8, r9}
    2b58:	000001f3 	strdeq	r0, [r0], -r3
    2b5c:	00169009 	andseq	r9, r6, r9
    2b60:	07860300 	streq	r0, [r6, r0, lsl #6]
    2b64:	000000aa 	andeq	r0, r0, sl, lsr #1
    2b68:	177c0900 	ldrbne	r0, [ip, -r0, lsl #18]!
    2b6c:	87030000 	strhi	r0, [r3, -r0]
    2b70:	0000aa07 	andeq	sl, r0, r7, lsl #20
    2b74:	f3090100 	vrhadd.u8	d0, d9, d0
    2b78:	03000018 	movweq	r0, #24
    2b7c:	00aa0788 	adceq	r0, sl, r8, lsl #15
    2b80:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    2b84:	00001713 	andeq	r1, r0, r3, lsl r7
    2b88:	aa078903 	bge	1e4f9c <__bss_end+0x137cc4>
    2b8c:	03000000 	movweq	r0, #0
    2b90:	0018e409 	andseq	lr, r8, r9, lsl #8
    2b94:	078a0300 	streq	r0, [sl, r0, lsl #6]
    2b98:	000000aa 	andeq	r0, r0, sl, lsr #1
    2b9c:	19480904 	stmdbne	r8, {r2, r8, fp}^
    2ba0:	8b030000 	blhi	c2ba8 <__bss_end+0x158d0>
    2ba4:	0000aa07 	andeq	sl, r0, r7, lsl #20
    2ba8:	690a0500 	stmdbvs	sl, {r8, sl}
    2bac:	8c030064 	stchi	0, cr0, [r3], {100}	; 0x64
    2bb0:	0000b607 	andeq	fp, r0, r7, lsl #12
    2bb4:	a3090600 	movwge	r0, #38400	; 0x9600
    2bb8:	03000016 	movweq	r0, #22
    2bbc:	00b6078d 	adcseq	r0, r6, sp, lsl #15
    2bc0:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    2bc4:	00001766 	andeq	r1, r0, r6, ror #14
    2bc8:	b6078e03 	strlt	r8, [r7], -r3, lsl #28
    2bcc:	0a000000 	beq	2bd4 <_start-0xd42c>
    2bd0:	00189b09 	andseq	r9, r8, r9, lsl #22
    2bd4:	08990300 	ldmeq	r9, {r8, r9}
    2bd8:	000000c2 	andeq	r0, r0, r2, asr #1
    2bdc:	1781090c 	strne	r0, [r1, ip, lsl #18]
    2be0:	9a030000 	bls	c2be8 <__bss_end+0x15910>
    2be4:	0000c208 	andeq	ip, r0, r8, lsl #4
    2be8:	e9091000 	stmdb	r9, {ip}
    2bec:	03000016 	movweq	r0, #22
    2bf0:	00c208a4 	sbceq	r0, r2, r4, lsr #17
    2bf4:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    2bf8:	000016e3 	andeq	r1, r0, r3, ror #13
    2bfc:	c208a503 	andgt	sl, r8, #12582912	; 0xc00000
    2c00:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    2c04:	00192b09 	andseq	r2, r9, r9, lsl #22
    2c08:	08a60300 	stmiaeq	r6!, {r8, r9}
    2c0c:	000000da 	ldrdeq	r0, [r0], -sl
    2c10:	1750091c 	smmlane	r0, ip, r9, r0
    2c14:	a7030000 	strge	r0, [r3, -r0]
    2c18:	0000da08 	andeq	sp, r0, r8, lsl #20
    2c1c:	c6092000 	strgt	r2, [r9], -r0
    2c20:	03000016 	movweq	r0, #22
    2c24:	00da08a8 	sbcseq	r0, sl, r8, lsr #17
    2c28:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    2c2c:	000017cc 	andeq	r1, r0, ip, asr #15
    2c30:	da08a903 	ble	22d044 <__bss_end+0x17fd6c>
    2c34:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
    2c38:	0017ec09 	andseq	lr, r7, r9, lsl #24
    2c3c:	08ad0300 	stmiaeq	sp!, {r8, r9}
    2c40:	000000da 	ldrdeq	r0, [r0], -sl
    2c44:	69770a2c 	ldmdbvs	r7!, {r2, r3, r5, r9, fp}^
    2c48:	ae03006e 	cdpge	0, 0, cr0, cr3, cr14, {3}
    2c4c:	0001f307 	andeq	pc, r1, r7, lsl #6
    2c50:	0b003000 	bleq	ec58 <_start-0x13a8>
    2c54:	000000aa 	andeq	r0, r0, sl, lsr #1
    2c58:	00000204 	andeq	r0, r0, r4, lsl #4
    2c5c:	00002c0c 	andeq	r2, r0, ip, lsl #24
    2c60:	0001ff00 	andeq	pc, r1, r0, lsl #30
    2c64:	00181507 	andseq	r1, r8, r7, lsl #10
    2c68:	03af0300 			; <UNDEFINED> instruction: 0x03af0300
    2c6c:	000000f2 	strdeq	r0, [r0], -r2
    2c70:	b503100d 	strlt	r1, [r3, #-13]
    2c74:	00026609 	andeq	r6, r2, r9, lsl #12
    2c78:	73660a00 	cmnvc	r6, #0, 20
    2c7c:	09b60300 	ldmibeq	r6!, {r8, r9}
    2c80:	00000266 	andeq	r0, r0, r6, ror #4
    2c84:	64690a00 	strbtvs	r0, [r9], #-2560	; 0xfffff600
    2c88:	07b70300 	ldreq	r0, [r7, r0, lsl #6]!
    2c8c:	000000b6 	strheq	r0, [r0], -r6
    2c90:	17980904 	ldrne	r0, [r8, r4, lsl #18]
    2c94:	b8030000 	stmdalt	r3, {}	; <UNPREDICTABLE>
    2c98:	0000aa07 	andeq	sl, r0, r7, lsl #20
    2c9c:	23090600 	movwcs	r0, #38400	; 0x9600
    2ca0:	0300001d 	movweq	r0, #29
    2ca4:	00aa07b9 	strhteq	r0, [sl], r9
    2ca8:	09070000 	stmdbeq	r7, {}	; <UNPREDICTABLE>
    2cac:	0000182c 	andeq	r1, r0, ip, lsr #16
    2cb0:	c208ba03 	andgt	fp, r8, #12288	; 0x3000
    2cb4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2cb8:	0018a509 	andseq	sl, r8, r9, lsl #10
    2cbc:	0abb0300 	beq	feec38c4 <_estack+0xf6ea38c4>
    2cc0:	000000ce 	andeq	r0, r0, lr, asr #1
    2cc4:	0406000c 	streq	r0, [r6], #-12
    2cc8:	00000204 	andeq	r0, r0, r4, lsl #4
    2ccc:	00198707 	andseq	r8, r9, r7, lsl #14
    2cd0:	03c60300 	biceq	r0, r6, #0, 6
    2cd4:	00000210 	andeq	r0, r0, r0, lsl r2
    2cd8:	cc03280d 	stcgt	8, cr2, [r3], {13}
    2cdc:	0002ea09 	andeq	lr, r2, r9, lsl #20
    2ce0:	626f0a00 	rsbvs	r0, pc, #0, 20
    2ce4:	cd03006a 	stcgt	0, cr0, [r3, #-424]	; 0xfffffe58
    2ce8:	00026c0a 	andeq	r6, r2, sl, lsl #24
    2cec:	4c090000 	stcmi	0, cr0, [r9], {-0}
    2cf0:	03000019 	movweq	r0, #25
    2cf4:	00aa07ce 	adceq	r0, sl, lr, asr #15
    2cf8:	0a100000 	beq	402d00 <__bss_end+0x355a28>
    2cfc:	00727265 	rsbseq	r7, r2, r5, ror #4
    2d00:	aa07cf03 	bge	1f6914 <__bss_end+0x14963c>
    2d04:	11000000 	mrsne	r0, (UNDEF: 0)
    2d08:	001ab009 	andseq	fp, sl, r9
    2d0c:	0ad00300 	beq	ff403914 <_estack+0xf73e3914>
    2d10:	000000ce 	andeq	r0, r0, lr, asr #1
    2d14:	1cb10914 			; <UNDEFINED> instruction: 0x1cb10914
    2d18:	d1030000 	mrsle	r0, (UNDEF: 3)
    2d1c:	0000c208 	andeq	ip, r0, r8, lsl #4
    2d20:	e4091800 	str	r1, [r9], #-2048	; 0xfffff800
    2d24:	0300001b 	movweq	r0, #27
    2d28:	00da08d2 	ldrsbeq	r0, [sl], #130	; 0x82
    2d2c:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
    2d30:	000016bd 			; <UNDEFINED> instruction: 0x000016bd
    2d34:	da08d403 	ble	237d48 <__bss_end+0x18aa70>
    2d38:	20000000 	andcs	r0, r0, r0
    2d3c:	00179009 	andseq	r9, r7, r9
    2d40:	08d50300 	ldmeq	r5, {r8, r9}^
    2d44:	000002ea 	andeq	r0, r0, sl, ror #5
    2d48:	04060024 	streq	r0, [r6], #-36	; 0xffffffdc
    2d4c:	000000aa 	andeq	r0, r0, sl, lsr #1
    2d50:	4c49460e 	mcrrmi	6, 0, r4, r9, cr14
    2d54:	03dd0300 	bicseq	r0, sp, #0, 6
    2d58:	00000278 	andeq	r0, r0, r8, ror r2
    2d5c:	e3032c0d 	movw	r2, #15373	; 0x3c0d
    2d60:	00035309 	andeq	r5, r3, r9, lsl #6
    2d64:	626f0a00 	rsbvs	r0, pc, #0, 20
    2d68:	e403006a 	str	r0, [r3], #-106	; 0xffffff96
    2d6c:	00026c0a 	andeq	r6, r2, sl, lsl #24
    2d70:	ce090000 	cdpgt	0, 0, cr0, cr9, cr0, {0}
    2d74:	03000018 	movweq	r0, #24
    2d78:	00c208e5 	sbceq	r0, r2, r5, ror #17
    2d7c:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    2d80:	00001cb1 			; <UNDEFINED> instruction: 0x00001cb1
    2d84:	c208e603 	andgt	lr, r8, #3145728	; 0x300000
    2d88:	14000000 	strne	r0, [r0], #-0
    2d8c:	001be409 	andseq	lr, fp, r9, lsl #8
    2d90:	08e70300 	stmiaeq	r7!, {r8, r9}^
    2d94:	000000da 	ldrdeq	r0, [r0], -sl
    2d98:	69640a18 	stmdbvs	r4!, {r3, r4, r9, fp}^
    2d9c:	e8030072 	stmda	r3, {r1, r4, r5, r6}
    2da0:	0002ea08 	andeq	lr, r2, r8, lsl #20
    2da4:	660a1c00 	strvs	r1, [sl], -r0, lsl #24
    2da8:	e903006e 	stmdb	r3, {r1, r2, r3, r5, r6}
    2dac:	00035307 	andeq	r5, r3, r7, lsl #6
    2db0:	0b002000 	bleq	adb8 <_start-0x5248>
    2db4:	000000aa 	andeq	r0, r0, sl, lsr #1
    2db8:	00000363 	andeq	r0, r0, r3, ror #6
    2dbc:	00002c0f 	andeq	r2, r0, pc, lsl #24
    2dc0:	0e000b00 	vmlaeq.f64	d0, d0, d0
    2dc4:	00524944 	subseq	r4, r2, r4, asr #18
    2dc8:	fc03f003 	stc2	0, cr15, [r3], {3}
    2dcc:	0d000002 	stceq	0, cr0, [r0, #-8]
    2dd0:	09f60318 	ldmibeq	r6!, {r3, r4, r8, r9}^
    2dd4:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    2dd8:	0016e309 	andseq	lr, r6, r9, lsl #6
    2ddc:	0af70300 	beq	ffdc39e4 <_estack+0xf7da39e4>
    2de0:	000000ce 	andeq	r0, r0, lr, asr #1
    2de4:	181b0900 	ldmdane	fp, {r8, fp}
    2de8:	f8030000 			; <UNDEFINED> instruction: 0xf8030000
    2dec:	0000b607 	andeq	fp, r0, r7, lsl #12
    2df0:	aa090400 	bge	243df8 <__bss_end+0x196b20>
    2df4:	03000017 	movweq	r0, #23
    2df8:	00b607f9 	ldrshteq	r0, [r6], r9
    2dfc:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    2e00:	00001951 	andeq	r1, r0, r1, asr r9
    2e04:	aa07fa03 	bge	201618 <__bss_end+0x154340>
    2e08:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2e0c:	0017fc09 	andseq	pc, r7, r9, lsl #24
    2e10:	08ff0300 	ldmeq	pc!, {r8, r9}^	; <UNPREDICTABLE>
    2e14:	000003ba 			; <UNDEFINED> instruction: 0x000003ba
    2e18:	e60b0009 	str	r0, [fp], -r9
    2e1c:	ca000000 	bgt	2e24 <_start-0xd1dc>
    2e20:	0f000003 	svceq	0x00000003
    2e24:	0000002c 	andeq	r0, r0, ip, lsr #32
    2e28:	5910000c 	ldmdbpl	r0, {r2, r3}
    2e2c:	03000019 	movweq	r0, #25
    2e30:	6f030101 	svcvs	0x00030101
    2e34:	11000003 	tstne	r0, r3
    2e38:	01070310 	tsteq	r7, r0, lsl r3
    2e3c:	00042809 	andeq	r2, r4, r9, lsl #16
    2e40:	6d661200 	sfmvs	f1, 2, [r6, #-0]
    2e44:	08030074 	stmdaeq	r3, {r2, r4, r5, r6}
    2e48:	00aa0701 	adceq	r0, sl, r1, lsl #14
    2e4c:	13000000 	movwne	r0, #0
    2e50:	000018ad 	andeq	r1, r0, sp, lsr #17
    2e54:	07010903 	streq	r0, [r1, -r3, lsl #18]
    2e58:	000000aa 	andeq	r0, r0, sl, lsr #1
    2e5c:	16b71301 	ldrtne	r1, [r7], r1, lsl #6
    2e60:	0a030000 	beq	c2e68 <__bss_end+0x15b90>
    2e64:	009e0701 	addseq	r0, lr, r1, lsl #14
    2e68:	13040000 	movwne	r0, #16384	; 0x4000
    2e6c:	000018d3 	ldrdeq	r1, [r0], -r3
    2e70:	07010b03 	streq	r0, [r1, -r3, lsl #22]
    2e74:	0000009e 	muleq	r0, lr, r0
    2e78:	179d1308 	ldrne	r1, [sp, r8, lsl #6]
    2e7c:	0c030000 	stceq	0, cr0, [r3], {-0}
    2e80:	00c20801 	sbceq	r0, r2, r1, lsl #16
    2e84:	000c0000 	andeq	r0, ip, r0
    2e88:	00168610 	andseq	r8, r6, r0, lsl r6
    2e8c:	010d0300 	mrseq	r0, SP_mon
    2e90:	0003d703 	andeq	sp, r3, r3, lsl #14
    2e94:	01071400 	tsteq	r7, r0, lsl #8
    2e98:	0000005f 	andeq	r0, r0, pc, asr r0
    2e9c:	0e011303 	cdpeq	3, 0, cr1, cr1, cr3, {0}
    2ea0:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    2ea4:	00191415 	andseq	r1, r9, r5, lsl r4
    2ea8:	e0150000 	ands	r0, r5, r0
    2eac:	01000017 	tsteq	r0, r7, lsl r0
    2eb0:	0017d515 	andseq	sp, r7, r5, lsl r5
    2eb4:	7a150200 	bvc	5436bc <__bss_end+0x4963e4>
    2eb8:	03000019 	movweq	r0, #25
    2ebc:	00183315 	andseq	r3, r8, r5, lsl r3
    2ec0:	6f150400 	svcvs	0x00150400
    2ec4:	05000019 	streq	r0, [r0, #-25]	; 0xffffffe7
    2ec8:	00193815 	andseq	r3, r9, r5, lsl r8
    2ecc:	c4150600 	ldrgt	r0, [r5], #-1536	; 0xfffffa00
    2ed0:	07000018 	smladeq	r0, r8, r0, r0
    2ed4:	00174715 	andseq	r4, r7, r5, lsl r7
    2ed8:	f2150800 	vadd.i16	d0, d5, d0
    2edc:	09000016 	stmdbeq	r0, {r1, r2, r4}
    2ee0:	00180215 	andseq	r0, r8, r5, lsl r2
    2ee4:	b3150a00 	tstlt	r5, #0, 20
    2ee8:	0b000018 	bleq	2f50 <_start-0xd0b0>
    2eec:	00188c15 	andseq	r8, r8, r5, lsl ip
    2ef0:	1a150c00 	bne	545ef8 <__bss_end+0x498c20>
    2ef4:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    2ef8:	0017b015 	andseq	fp, r7, r5, lsl r0
    2efc:	21150e00 	tstcs	r5, r0, lsl #28
    2f00:	0f000018 	svceq	0x00000018
    2f04:	0018da15 	andseq	sp, r8, r5, lsl sl
    2f08:	34151000 	ldrcc	r1, [r5], #-0
    2f0c:	11000017 	tstne	r0, r7, lsl r0
    2f10:	00166f15 	andseq	r6, r6, r5, lsl pc
    2f14:	ce151200 	cdpgt	2, 1, cr1, cr5, cr0, {0}
    2f18:	13000016 	movwne	r0, #22
    2f1c:	19671000 	stmdbne	r7!, {ip}^
    2f20:	28030000 	stmdacs	r3, {}	; <UNPREDICTABLE>
    2f24:	04350301 	ldrteq	r0, [r5], #-769	; 0xfffffcff
    2f28:	0b160000 	bleq	582f30 <__bss_end+0x4d5c58>
    2f2c:	0100001c 	tsteq	r0, ip, lsl r0
    2f30:	68060121 	stmdavs	r6, {r0, r5, r8}
    2f34:	e400024a 	str	r0, [r0], #-586	; 0xfffffdb6
    2f38:	01000000 	mrseq	r0, (UNDEF: 0)
    2f3c:	1698179c 			; <UNDEFINED> instruction: 0x1698179c
    2f40:	aa010000 	bge	42f48 <ramdisk+0x15c70>
    2f44:	0246fc06 	subeq	pc, r6, #1536	; 0x600
    2f48:	00036c00 	andeq	r6, r3, r0, lsl #24
    2f4c:	bc9c0100 	ldflts	f0, [ip], {0}
    2f50:	18000005 	stmdane	r0, {r0, r2}
    2f54:	00000030 	andeq	r0, r0, r0, lsr r0
    2f58:	4117aa01 	tstmi	r7, r1, lsl #20
    2f5c:	03000000 	movweq	r0, #0
    2f60:	1975d491 	ldmdbne	r5!, {r0, r4, r7, sl, ip, lr, pc}^
    2f64:	01007366 	tsteq	r0, r6, ror #6
    2f68:	02040bab 	andeq	r0, r4, #175104	; 0x2ac00
    2f6c:	91030000 	mrsls	r0, (UNDEF: 3)
    2f70:	66197bc0 	ldrvs	r7, [r9], -r0, asr #23
    2f74:	01006c69 	tsteq	r0, r9, ror #24
    2f78:	02f009ac 	rscseq	r0, r0, #172, 18	; 0x2b0000
    2f7c:	91030000 	mrsls	r0, (UNDEF: 3)
    2f80:	64197b98 	ldrvs	r7, [r9], #-2968	; 0xfffff468
    2f84:	01007269 	tsteq	r0, r9, ror #4
    2f88:	036309ad 	cmneq	r3, #2834432	; 0x2b4000
    2f8c:	91030000 	mrsls	r0, (UNDEF: 3)
    2f90:	72197aec 	andsvc	r7, r9, #236, 20	; 0xec000
    2f94:	01007365 	tsteq	r0, r5, ror #6
    2f98:	04bd0dae 	ldrteq	r0, [sp], #3502	; 0xdae
    2f9c:	91020000 	mrsls	r0, (UNDEF: 2)
    2fa0:	77621977 			; <UNDEFINED> instruction: 0x77621977
    2fa4:	0aaf0100 	beq	febc33ac <_estack+0xf6ba33ac>
    2fa8:	0000009e 	muleq	r0, lr, r0
    2fac:	7ae89103 	bvc	ffa273c0 <_estack+0xf7a073c0>
    2fb0:	00191a1a 	andseq	r1, r9, sl, lsl sl
    2fb4:	0ab00100 	beq	fec033bc <_estack+0xf6be33bc>
    2fb8:	000005bc 			; <UNDEFINED> instruction: 0x000005bc
    2fbc:	7a849103 	bvc	fe1273d0 <_estack+0xf61073d0>
    2fc0:	0019331a 	andseq	r3, r9, sl, lsl r3
    2fc4:	0ab10100 	beq	fec433cc <_estack+0xf6c233cc>
    2fc8:	000001f3 	strdeq	r0, [r0], -r3
    2fcc:	76849103 	strvc	r9, [r4], r3, lsl #2
    2fd0:	6f6e6619 	svcvs	0x006e6619
    2fd4:	0db20100 	ldfeqs	f0, [r2]
    2fd8:	000003ca 	andeq	r0, r0, sl, asr #7
    2fdc:	75ec9103 	strbvc	r9, [ip, #259]!	; 0x103
    2fe0:	00176c1b 	andseq	r6, r7, fp, lsl ip
    2fe4:	05b90100 	ldreq	r0, [r9, #256]!	; 0x100
    2fe8:	00000025 	andeq	r0, r0, r5, lsr #32
    2fec:	00000592 	muleq	r0, r2, r5
    2ff0:	f41a001c 			; <UNDEFINED> instruction: 0xf41a001c
    2ff4:	01000017 	tsteq	r0, r7, lsl r0
    2ff8:	04280fc0 	strteq	r0, [r8], #-4032	; 0xfffff040
    2ffc:	91030000 	mrsls	r0, (UNDEF: 3)
    3000:	b41d75dc 	ldrlt	r7, [sp], #-1500	; 0xfffffa24
    3004:	44000248 	strmi	r0, [r0], #-584	; 0xfffffdb8
    3008:	1a000001 	bne	3014 <_start-0xcfec>
    300c:	0000183e 	andeq	r1, r0, lr, lsr r8
    3010:	8015ee01 	andshi	lr, r5, r1, lsl #28
    3014:	02000000 	andeq	r0, r0, #0
    3018:	00007091 	muleq	r0, r1, r0
    301c:	0000740b 	andeq	r7, r0, fp, lsl #8
    3020:	0005cc00 	andeq	ip, r5, r0, lsl #24
    3024:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    3028:	00630000 	rsbeq	r0, r3, r0
    302c:	0017c617 	andseq	ip, r7, r7, lsl r6
    3030:	069e0100 	ldreq	r0, [lr], r0, lsl #2
    3034:	000246b8 			; <UNDEFINED> instruction: 0x000246b8
    3038:	00000044 	andeq	r0, r0, r4, asr #32
    303c:	05ff9c01 	ldrbeq	r9, [pc, #3073]!	; 3c45 <_start-0xc3bb>
    3040:	30180000 	andscc	r0, r8, r0
    3044:	01000000 	mrseq	r0, (UNDEF: 0)
    3048:	0041129e 	umaaleq	r1, r1, lr, r2
    304c:	91020000 	mrsls	r0, (UNDEF: 2)
    3050:	0069196c 	rsbeq	r1, r9, ip, ror #18
    3054:	2509a101 	strcs	sl, [r9, #-257]	; 0xfffffeff
    3058:	02000000 	andeq	r0, r0, #0
    305c:	17007491 			; <UNDEFINED> instruction: 0x17007491
    3060:	000017c0 	andeq	r1, r0, r0, asr #15
    3064:	7c069301 	stcvc	3, cr9, [r6], {1}
    3068:	3c000246 	sfmcc	f0, 4, [r0], {70}	; 0x46
    306c:	01000000 	mrseq	r0, (UNDEF: 0)
    3070:	0006329c 	muleq	r6, ip, r2
    3074:	00301800 	eorseq	r1, r0, r0, lsl #16
    3078:	93010000 	movwls	r0, #4096	; 0x1000
    307c:	00004112 	andeq	r4, r0, r2, lsl r1
    3080:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3084:	01006919 	tsteq	r0, r9, lsl r9
    3088:	00250996 	mlaeq	r5, r6, r9, r0
    308c:	91020000 	mrsls	r0, (UNDEF: 2)
    3090:	ad1e0074 	ldcge	0, cr0, [lr, #-464]	; 0xfffffe30
    3094:	01000016 	tsteq	r0, r6, lsl r0
    3098:	4664068e 	strbtmi	r0, [r4], -lr, lsl #13
    309c:	00180002 	andseq	r0, r8, r2
    30a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    30a4:	00190217 	andseq	r0, r9, r7, lsl r2
    30a8:	06720100 	ldrbteq	r0, [r2], -r0, lsl #2
    30ac:	0002447c 	andeq	r4, r2, ip, ror r4
    30b0:	000001e8 	andeq	r0, r0, r8, ror #3
    30b4:	066a9c01 	strbteq	r9, [sl], -r1, lsl #24
    30b8:	721f0000 	andsvc	r0, pc, #0
    30bc:	01007365 	tsteq	r0, r5, ror #6
    30c0:	04bd2072 	ldrteq	r2, [sp], #114	; 0x72
    30c4:	91020000 	mrsls	r0, (UNDEF: 2)
    30c8:	04170077 	ldreq	r0, [r7], #-119	; 0xffffff89
    30cc:	01000017 	tsteq	r0, r7, lsl r0
    30d0:	43a0065c 	movmi	r0, #92, 12	; 0x5c00000
    30d4:	00dc0002 	sbcseq	r0, ip, r2
    30d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    30dc:	000006ac 	andeq	r0, r0, ip, lsr #13
    30e0:	6d756e1f 	ldclvs	14, cr6, [r5, #-124]!	; 0xffffff84
    30e4:	1d5c0100 	ldfnee	f0, [ip, #-0]
    30e8:	000004bd 			; <UNDEFINED> instruction: 0x000004bd
    30ec:	196f9102 	stmdbne	pc!, {r1, r8, ip, pc}^	; <UNPREDICTABLE>
    30f0:	00667562 	rsbeq	r7, r6, r2, ror #10
    30f4:	ac0a5d01 	stcge	13, cr5, [sl], {1}
    30f8:	02000006 	andeq	r0, r0, #6
    30fc:	69197091 	ldmdbvs	r9, {r0, r4, r7, ip, sp, lr}
    3100:	095e0100 	ldmdbeq	lr, {r8}^
    3104:	00000025 	andeq	r0, r0, r5, lsr #32
    3108:	00749102 	rsbseq	r9, r4, r2, lsl #2
    310c:	0000740b 	andeq	r7, r0, fp, lsl #8
    3110:	0006bc00 	andeq	fp, r6, r0, lsl #24
    3114:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    3118:	00030000 	andeq	r0, r3, r0
    311c:	00192117 	andseq	r2, r9, r7, lsl r1
    3120:	06550100 	ldrbeq	r0, [r5], -r0, lsl #2
    3124:	00024354 	andeq	r4, r2, r4, asr r3
    3128:	0000004c 	andeq	r0, r0, ip, asr #32
    312c:	06e09c01 	strbteq	r9, [r0], r1, lsl #24
    3130:	731f0000 	tstvc	pc, #0
    3134:	1c550100 	ldfnee	f0, [r5], {-0}
    3138:	00000080 	andeq	r0, r0, r0, lsl #1
    313c:	00749102 	rsbseq	r9, r4, r2, lsl #2
    3140:	0018f820 	andseq	pc, r8, r0, lsr #16
    3144:	06500100 	ldrbeq	r0, [r0], -r0, lsl #2
    3148:	00024304 	andeq	r4, r2, r4, lsl #6
    314c:	00000050 	andeq	r0, r0, r0, asr r0
    3150:	631f9c01 	tstvs	pc, #256	; 0x100
    3154:	15500100 	ldrbne	r0, [r0, #-256]	; 0xffffff00
    3158:	00000074 	andeq	r0, r0, r4, ror r0
    315c:	00779102 	rsbseq	r9, r7, r2, lsl #2
    3160:	001e1400 	andseq	r1, lr, r0, lsl #8
    3164:	26000400 	strcs	r0, [r0], -r0, lsl #8
    3168:	0400000e 	streq	r0, [r0], #-14
    316c:	00003701 	andeq	r3, r0, r1, lsl #14
    3170:	1b990c00 	blne	fe646178 <_estack+0xf6626178>
    3174:	00ae0000 	adceq	r0, lr, r0
    3178:	4b4c0000 	blmi	1303180 <__bss_end+0x1255ea8>
    317c:	63180002 	tstvs	r8, #2
    3180:	1db80000 	ldcne	0, cr0, [r8]
    3184:	04020000 	streq	r0, [r2], #-0
    3188:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    318c:	07040300 	streq	r0, [r4, -r0, lsl #6]
    3190:	00000659 	andeq	r0, r0, r9, asr r6
    3194:	7b050803 	blvc	1451a8 <__bss_end+0x97ed0>
    3198:	03000001 	movweq	r0, #1
    319c:	01a90408 			; <UNDEFINED> instruction: 0x01a90408
    31a0:	01030000 	mrseq	r0, (UNDEF: 3)
    31a4:	00066806 	andeq	r6, r6, r6, lsl #16
    31a8:	08010300 	stmdaeq	r1, {r8, r9}
    31ac:	00000666 	andeq	r0, r0, r6, ror #12
    31b0:	31050203 	tstcc	r5, r3, lsl #4
    31b4:	03000007 	movweq	r0, #7
    31b8:	009b0702 	addseq	r0, fp, r2, lsl #14
    31bc:	04030000 	streq	r0, [r3], #-0
    31c0:	00018005 	andeq	r8, r1, r5
    31c4:	07040300 	streq	r0, [r4, -r0, lsl #6]
    31c8:	00000654 	andeq	r0, r0, r4, asr r6
    31cc:	4f070803 	svcmi	0x00070803
    31d0:	04000006 	streq	r0, [r0], #-6
    31d4:	08010304 	stmdaeq	r1, {r2, r8, r9}
    31d8:	0000066f 	andeq	r0, r0, pc, ror #12
    31dc:	00007405 	andeq	r7, r0, r5, lsl #8
    31e0:	7b040600 	blvc	1049e8 <__bss_end+0x57710>
    31e4:	07000000 	streq	r0, [r0, -r0]
    31e8:	0000172b 	andeq	r1, r0, fp, lsr #14
    31ec:	56193102 	ldrpl	r3, [r9], -r2, lsl #2
    31f0:	07000000 	streq	r0, [r0, -r0]
    31f4:	000018ea 	andeq	r1, r0, sl, ror #17
    31f8:	64193402 	ldrvs	r3, [r9], #-1026	; 0xfffffbfe
    31fc:	07000000 	streq	r0, [r0, -r0]
    3200:	000017a5 	andeq	r1, r0, r5, lsr #15
    3204:	2c163203 	lfmcs	f3, 4, [r6], {3}
    3208:	07000000 	streq	r0, [r0, -r0]
    320c:	0000178b 	andeq	r1, r0, fp, lsl #15
    3210:	48173303 	ldmdami	r7, {r0, r1, r8, r9, ip, sp}
    3214:	05000000 	streq	r0, [r0, #-0]
    3218:	000000aa 	andeq	r0, r0, sl, lsr #1
    321c:	00175907 	andseq	r5, r7, r7, lsl #18
    3220:	13340300 	teqne	r4, #0, 6
    3224:	00000086 	andeq	r0, r0, r6, lsl #1
    3228:	0000bb05 	andeq	fp, r0, r5, lsl #22
    322c:	17580700 	ldrbne	r0, [r8, -r0, lsl #14]
    3230:	35030000 	strcc	r0, [r3, #-0]
    3234:	00009213 	andeq	r9, r0, r3, lsl r2
    3238:	175e0700 	ldrbne	r0, [lr, -r0, lsl #14]
    323c:	53030000 	movwpl	r0, #12288	; 0x3000
    3240:	0000cc0f 	andeq	ip, r0, pc, lsl #24
    3244:	19610700 	stmdbne	r1!, {r8, r9, sl}^
    3248:	54030000 	strpl	r0, [r3], #-0
    324c:	0000cc0f 	andeq	ip, r0, pc, lsl #24
    3250:	00e40500 	rsceq	r0, r4, r0, lsl #10
    3254:	46070000 	strmi	r0, [r7], -r0
    3258:	03000018 	movweq	r0, #24
    325c:	00740e6a 	rsbseq	r0, r4, sl, ror #28
    3260:	f5050000 			; <UNDEFINED> instruction: 0xf5050000
    3264:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3268:	85030230 	strhi	r0, [r3, #-560]	; 0xfffffdd0
    326c:	00020709 	andeq	r0, r2, r9, lsl #14
    3270:	16900900 	ldrne	r0, [r0], r0, lsl #18
    3274:	86030000 	strhi	r0, [r3], -r0
    3278:	0000aa07 	andeq	sl, r0, r7, lsl #20
    327c:	7c090000 	stcvc	0, cr0, [r9], {-0}
    3280:	03000017 	movweq	r0, #23
    3284:	00aa0787 	adceq	r0, sl, r7, lsl #15
    3288:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    328c:	000018f3 	strdeq	r1, [r0], -r3
    3290:	aa078803 	bge	1e52a4 <__bss_end+0x137fcc>
    3294:	02000000 	andeq	r0, r0, #0
    3298:	00171309 	andseq	r1, r7, r9, lsl #6
    329c:	07890300 	streq	r0, [r9, r0, lsl #6]
    32a0:	000000aa 	andeq	r0, r0, sl, lsr #1
    32a4:	18e40903 	stmiane	r4!, {r0, r1, r8, fp}^
    32a8:	8a030000 	bhi	c32b0 <__bss_end+0x15fd8>
    32ac:	0000aa07 	andeq	sl, r0, r7, lsl #20
    32b0:	48090400 	stmdami	r9, {sl}
    32b4:	03000019 	movweq	r0, #25
    32b8:	00aa078b 	adceq	r0, sl, fp, lsl #15
    32bc:	0a050000 	beq	1432c4 <__bss_end+0x95fec>
    32c0:	03006469 	movweq	r6, #1129	; 0x469
    32c4:	00bb078c 	adcseq	r0, fp, ip, lsl #15
    32c8:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    32cc:	000016a3 	andeq	r1, r0, r3, lsr #13
    32d0:	bb078d03 	bllt	1e66e4 <__bss_end+0x13940c>
    32d4:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    32d8:	00176609 	andseq	r6, r7, r9, lsl #12
    32dc:	078e0300 	streq	r0, [lr, r0, lsl #6]
    32e0:	000000bb 	strheq	r0, [r0], -fp
    32e4:	189b090a 	ldmne	fp, {r1, r3, r8, fp}
    32e8:	99030000 	stmdbls	r3, {}	; <UNPREDICTABLE>
    32ec:	0000cc08 	andeq	ip, r0, r8, lsl #24
    32f0:	81090c00 	tsthi	r9, r0, lsl #24
    32f4:	03000017 	movweq	r0, #23
    32f8:	00cc089a 	smulleq	r0, ip, sl, r8
    32fc:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    3300:	000016e9 	andeq	r1, r0, r9, ror #13
    3304:	cc08a403 	cfstrsgt	mvf10, [r8], {3}
    3308:	14000000 	strne	r0, [r0], #-0
    330c:	0016e309 	andseq	lr, r6, r9, lsl #6
    3310:	08a50300 	stmiaeq	r5!, {r8, r9}
    3314:	000000cc 	andeq	r0, r0, ip, asr #1
    3318:	192b0918 	stmdbne	fp!, {r3, r4, r8, fp}
    331c:	a6030000 	strge	r0, [r3], -r0
    3320:	0000e408 	andeq	lr, r0, r8, lsl #8
    3324:	50091c00 	andpl	r1, r9, r0, lsl #24
    3328:	03000017 	movweq	r0, #23
    332c:	00e408a7 	rsceq	r0, r4, r7, lsr #17
    3330:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    3334:	000016c6 	andeq	r1, r0, r6, asr #13
    3338:	e408a803 	str	sl, [r8], #-2051	; 0xfffff7fd
    333c:	24000000 	strcs	r0, [r0], #-0
    3340:	0017cc09 	andseq	ip, r7, r9, lsl #24
    3344:	08a90300 	stmiaeq	r9!, {r8, r9}
    3348:	000000e4 	andeq	r0, r0, r4, ror #1
    334c:	17ec0928 	strbne	r0, [ip, r8, lsr #18]!
    3350:	ad030000 	stcge	0, cr0, [r3, #-0]
    3354:	0000e408 	andeq	lr, r0, r8, lsl #8
    3358:	770a2c00 	strvc	r2, [sl, -r0, lsl #24]
    335c:	03006e69 	movweq	r6, #3689	; 0xe69
    3360:	020707ae 	andeq	r0, r7, #45613056	; 0x2b80000
    3364:	00300000 	eorseq	r0, r0, r0
    3368:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    336c:	00021800 	andeq	r1, r2, r0, lsl #16
    3370:	002c0c00 	eoreq	r0, ip, r0, lsl #24
    3374:	01ff0000 	mvnseq	r0, r0
    3378:	18150700 	ldmdane	r5, {r8, r9, sl}
    337c:	af030000 	svcge	0x00030000
    3380:	00010603 	andeq	r0, r1, r3, lsl #12
    3384:	03100d00 	tsteq	r0, #0, 26
    3388:	027a09b5 	rsbseq	r0, sl, #2965504	; 0x2d4000
    338c:	660a0000 	strvs	r0, [sl], -r0
    3390:	b6030073 			; <UNDEFINED> instruction: 0xb6030073
    3394:	00027a09 	andeq	r7, r2, r9, lsl #20
    3398:	690a0000 	stmdbvs	sl, {}	; <UNPREDICTABLE>
    339c:	b7030064 	strlt	r0, [r3, -r4, rrx]
    33a0:	0000bb07 	andeq	fp, r0, r7, lsl #22
    33a4:	98090400 	stmdals	r9, {sl}
    33a8:	03000017 	movweq	r0, #23
    33ac:	00aa07b8 	strhteq	r0, [sl], r8
    33b0:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    33b4:	00001d23 	andeq	r1, r0, r3, lsr #26
    33b8:	aa07b903 	bge	1f17cc <__bss_end+0x1444f4>
    33bc:	07000000 	streq	r0, [r0, -r0]
    33c0:	00182c09 	andseq	r2, r8, r9, lsl #24
    33c4:	08ba0300 	ldmeq	sl!, {r8, r9}
    33c8:	000000cc 	andeq	r0, r0, ip, asr #1
    33cc:	18a50908 	stmiane	r5!, {r3, r8, fp}
    33d0:	bb030000 	bllt	c33d8 <__bss_end+0x16100>
    33d4:	0000d80a 	andeq	sp, r0, sl, lsl #16
    33d8:	06000c00 	streq	r0, [r0], -r0, lsl #24
    33dc:	00021804 	andeq	r1, r2, r4, lsl #16
    33e0:	19870700 	stmibne	r7, {r8, r9, sl}
    33e4:	c6030000 	strgt	r0, [r3], -r0
    33e8:	00022403 	andeq	r2, r2, r3, lsl #8
    33ec:	03280d00 			; <UNDEFINED> instruction: 0x03280d00
    33f0:	02fe09cc 	rscseq	r0, lr, #204, 18	; 0x330000
    33f4:	6f0a0000 	svcvs	0x000a0000
    33f8:	03006a62 	movweq	r6, #2658	; 0xa62
    33fc:	02800acd 	addeq	r0, r0, #839680	; 0xcd000
    3400:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3404:	0000194c 	andeq	r1, r0, ip, asr #18
    3408:	aa07ce03 	bge	1f6c1c <__bss_end+0x149944>
    340c:	10000000 	andne	r0, r0, r0
    3410:	7272650a 	rsbsvc	r6, r2, #41943040	; 0x2800000
    3414:	07cf0300 	strbeq	r0, [pc, r0, lsl #6]
    3418:	000000aa 	andeq	r0, r0, sl, lsr #1
    341c:	1ab00911 	bne	fec05868 <_estack+0xf6be5868>
    3420:	d0030000 	andle	r0, r3, r0
    3424:	0000d80a 	andeq	sp, r0, sl, lsl #16
    3428:	b1091400 	tstlt	r9, r0, lsl #8
    342c:	0300001c 	movweq	r0, #28
    3430:	00cc08d1 	ldrdeq	r0, [ip], #129	; 0x81
    3434:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    3438:	00001be4 	andeq	r1, r0, r4, ror #23
    343c:	e408d203 	str	sp, [r8], #-515	; 0xfffffdfd
    3440:	1c000000 	stcne	0, cr0, [r0], {-0}
    3444:	0016bd09 	andseq	fp, r6, r9, lsl #26
    3448:	08d40300 	ldmeq	r4, {r8, r9}^
    344c:	000000e4 	andeq	r0, r0, r4, ror #1
    3450:	17900920 	ldrne	r0, [r0, r0, lsr #18]
    3454:	d5030000 	strle	r0, [r3, #-0]
    3458:	0002fe08 	andeq	pc, r2, r8, lsl #28
    345c:	06002400 	streq	r2, [r0], -r0, lsl #8
    3460:	0000aa04 	andeq	sl, r0, r4, lsl #20
    3464:	49460e00 	stmdbmi	r6, {r9, sl, fp}^
    3468:	dd03004c 	stcle	0, cr0, [r3, #-304]	; 0xfffffed0
    346c:	00028c03 	andeq	r8, r2, r3, lsl #24
    3470:	032c0d00 			; <UNDEFINED> instruction: 0x032c0d00
    3474:	036709e3 	cmneq	r7, #3719168	; 0x38c000
    3478:	6f0a0000 	svcvs	0x000a0000
    347c:	03006a62 	movweq	r6, #2658	; 0xa62
    3480:	02800ae4 	addeq	r0, r0, #228, 20	; 0xe4000
    3484:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3488:	000018ce 	andeq	r1, r0, lr, asr #17
    348c:	cc08e503 	cfstr32gt	mvfx14, [r8], {3}
    3490:	10000000 	andne	r0, r0, r0
    3494:	001cb109 	andseq	fp, ip, r9, lsl #2
    3498:	08e60300 	stmiaeq	r6!, {r8, r9}^
    349c:	000000cc 	andeq	r0, r0, ip, asr #1
    34a0:	1be40914 	blne	ff9058f8 <_estack+0xf78e58f8>
    34a4:	e7030000 	str	r0, [r3, -r0]
    34a8:	0000e408 	andeq	lr, r0, r8, lsl #8
    34ac:	640a1800 	strvs	r1, [sl], #-2048	; 0xfffff800
    34b0:	03007269 	movweq	r7, #617	; 0x269
    34b4:	02fe08e8 	rscseq	r0, lr, #232, 16	; 0xe80000
    34b8:	0a1c0000 	beq	7034c0 <__bss_end+0x6561e8>
    34bc:	03006e66 	movweq	r6, #3686	; 0xe66
    34c0:	036707e9 	cmneq	r7, #61079552	; 0x3a40000
    34c4:	00200000 	eoreq	r0, r0, r0
    34c8:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    34cc:	00037700 	andeq	r7, r3, r0, lsl #14
    34d0:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    34d4:	000b0000 	andeq	r0, fp, r0
    34d8:	5249440e 	subpl	r4, r9, #234881024	; 0xe000000
    34dc:	03f00300 	mvnseq	r0, #0, 6
    34e0:	00000310 	andeq	r0, r0, r0, lsl r3
    34e4:	f603180d 			; <UNDEFINED> instruction: 0xf603180d
    34e8:	0003ce09 	andeq	ip, r3, r9, lsl #28
    34ec:	16e30900 	strbtne	r0, [r3], r0, lsl #18
    34f0:	f7030000 			; <UNDEFINED> instruction: 0xf7030000
    34f4:	0000d80a 	andeq	sp, r0, sl, lsl #16
    34f8:	1b090000 	blne	243500 <__bss_end+0x196228>
    34fc:	03000018 	movweq	r0, #24
    3500:	00bb07f8 	ldrshteq	r0, [fp], r8
    3504:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    3508:	000017aa 	andeq	r1, r0, sl, lsr #15
    350c:	bb07f903 	bllt	201920 <__bss_end+0x154648>
    3510:	06000000 	streq	r0, [r0], -r0
    3514:	00195109 	andseq	r5, r9, r9, lsl #2
    3518:	07fa0300 	ldrbeq	r0, [sl, r0, lsl #6]!
    351c:	000000aa 	andeq	r0, r0, sl, lsr #1
    3520:	17fc0908 	ldrbne	r0, [ip, r8, lsl #18]!
    3524:	ff030000 			; <UNDEFINED> instruction: 0xff030000
    3528:	0003ce08 	andeq	ip, r3, r8, lsl #28
    352c:	0b000900 	bleq	5934 <_start-0xa6cc>
    3530:	000000f5 	strdeq	r0, [r0], -r5
    3534:	000003de 	ldrdeq	r0, [r0], -lr
    3538:	00002c0f 	andeq	r2, r0, pc, lsl #24
    353c:	10000c00 	andne	r0, r0, r0, lsl #24
    3540:	00001959 	andeq	r1, r0, r9, asr r9
    3544:	03010103 	movweq	r0, #4355	; 0x1103
    3548:	00000383 	andeq	r0, r0, r3, lsl #7
    354c:	07031011 	smladeq	r3, r1, r0, r1
    3550:	043c0901 	ldrteq	r0, [ip], #-2305	; 0xfffff6ff
    3554:	66120000 	ldrvs	r0, [r2], -r0
    3558:	0300746d 	movweq	r7, #1133	; 0x46d
    355c:	aa070108 	bge	1c3984 <__bss_end+0x1166ac>
    3560:	00000000 	andeq	r0, r0, r0
    3564:	0018ad13 	andseq	sl, r8, r3, lsl sp
    3568:	01090300 	mrseq	r0, (UNDEF: 57)
    356c:	0000aa07 	andeq	sl, r0, r7, lsl #20
    3570:	b7130100 	ldrlt	r0, [r3, -r0, lsl #2]
    3574:	03000016 	movweq	r0, #22
    3578:	9e07010a 	adflss	f0, f7, #2.0
    357c:	04000000 	streq	r0, [r0], #-0
    3580:	0018d313 	andseq	sp, r8, r3, lsl r3
    3584:	010b0300 	mrseq	r0, (UNDEF: 59)
    3588:	00009e07 	andeq	r9, r0, r7, lsl #28
    358c:	9d130800 	ldcls	8, cr0, [r3, #-0]
    3590:	03000017 	movweq	r0, #23
    3594:	cc08010c 	stfgts	f0, [r8], {12}
    3598:	0c000000 	stceq	0, cr0, [r0], {-0}
    359c:	16861000 	strne	r1, [r6], r0
    35a0:	0d030000 	stceq	0, cr0, [r3, #-0]
    35a4:	03eb0301 	mvneq	r0, #67108864	; 0x4000000
    35a8:	3c050000 	stccc	0, cr0, [r5], {-0}
    35ac:	14000004 	strne	r0, [r0], #-4
    35b0:	00480107 	subeq	r0, r8, r7, lsl #2
    35b4:	13030000 	movwne	r0, #12288	; 0x3000
    35b8:	04d60e01 	ldrbeq	r0, [r6], #3585	; 0xe01
    35bc:	14150000 	ldrne	r0, [r5], #-0
    35c0:	00000019 	andeq	r0, r0, r9, lsl r0
    35c4:	0017e015 	andseq	lr, r7, r5, lsl r0
    35c8:	d5150100 	ldrle	r0, [r5, #-256]	; 0xffffff00
    35cc:	02000017 	andeq	r0, r0, #23
    35d0:	00197a15 	andseq	r7, r9, r5, lsl sl
    35d4:	33150300 	tstcc	r5, #0, 6
    35d8:	04000018 	streq	r0, [r0], #-24	; 0xffffffe8
    35dc:	00196f15 	andseq	r6, r9, r5, lsl pc
    35e0:	38150500 	ldmdacc	r5, {r8, sl}
    35e4:	06000019 			; <UNDEFINED> instruction: 0x06000019
    35e8:	0018c415 	andseq	ip, r8, r5, lsl r4
    35ec:	47150700 	ldrmi	r0, [r5, -r0, lsl #14]
    35f0:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    35f4:	0016f215 	andseq	pc, r6, r5, lsl r2	; <UNPREDICTABLE>
    35f8:	02150900 	andseq	r0, r5, #0, 18
    35fc:	0a000018 	beq	3664 <_start-0xc99c>
    3600:	0018b315 	andseq	fp, r8, r5, lsl r3
    3604:	8c150b00 			; <UNDEFINED> instruction: 0x8c150b00
    3608:	0c000018 	stceq	0, cr0, [r0], {24}
    360c:	00171a15 	andseq	r1, r7, r5, lsl sl
    3610:	b0150d00 	andslt	r0, r5, r0, lsl #26
    3614:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
    3618:	00182115 	andseq	r2, r8, r5, lsl r1
    361c:	da150f00 	ble	547224 <__bss_end+0x499f4c>
    3620:	10000018 	andne	r0, r0, r8, lsl r0
    3624:	00173415 	andseq	r3, r7, r5, lsl r4
    3628:	6f151100 	svcvs	0x00151100
    362c:	12000016 	andne	r0, r0, #22
    3630:	0016ce15 	andseq	ip, r6, r5, lsl lr
    3634:	10001300 	andne	r1, r0, r0, lsl #6
    3638:	00001967 	andeq	r1, r0, r7, ror #18
    363c:	03012803 	movweq	r2, #6147	; 0x1803
    3640:	0000044e 	andeq	r0, r0, lr, asr #8
    3644:	001cbf07 	andseq	fp, ip, r7, lsl #30
    3648:	0e0d0400 	cfcpyseq	mvf0, mvf13
    364c:	000000aa 	andeq	r0, r0, sl, lsr #1
    3650:	48010716 	stmdami	r1, {r1, r2, r4, r8, r9, sl}
    3654:	04000000 	streq	r0, [r0], #-0
    3658:	051c0e10 	ldreq	r0, [ip, #-3600]	; 0xfffff1f0
    365c:	d4150000 	ldrle	r0, [r5], #-0
    3660:	0000001c 	andeq	r0, r0, ip, lsl r0
    3664:	001b1415 	andseq	r1, fp, r5, lsl r4
    3668:	8f150100 	svchi	0x00150100
    366c:	0200001b 	andeq	r0, r0, #27
    3670:	001cf415 	andseq	pc, ip, r5, lsl r4	; <UNPREDICTABLE>
    3674:	6a150300 	bvs	54427c <__bss_end+0x496fa4>
    3678:	0400001b 	streq	r0, [r0], #-27	; 0xffffffe5
    367c:	027a0b00 	rsbseq	r0, sl, #0, 22
    3680:	052c0000 	streq	r0, [ip, #-0]!
    3684:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    3688:	00000000 	andeq	r0, r0, r0
    368c:	1a1c1700 	bne	709294 <__bss_end+0x65bfbc>
    3690:	d1010000 	mrsle	r0, (UNDEF: 1)
    3694:	051c0f01 	ldreq	r0, [ip, #-3841]	; 0xfffff0ff
    3698:	03050000 	movweq	r0, #20480	; 0x5000
    369c:	0002d2d0 	ldrdeq	sp, [r2], -r0
    36a0:	001b6517 	andseq	r6, fp, r7, lsl r5
    36a4:	01d20100 	bicseq	r0, r2, r0, lsl #2
    36a8:	0000bb0d 	andeq	fp, r0, sp, lsl #22
    36ac:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
    36b0:	0b0002d2 	bleq	4200 <_start-0xbe00>
    36b4:	000000b6 	strheq	r0, [r0], -r6
    36b8:	00000562 	andeq	r0, r0, r2, ror #10
    36bc:	00002c0f 	andeq	r2, r0, pc, lsl #24
    36c0:	05007f00 	streq	r7, [r0, #-3840]	; 0xfffff100
    36c4:	00000552 	andeq	r0, r0, r2, asr r5
    36c8:	001b7517 	andseq	r7, fp, r7, lsl r5
    36cc:	02560100 	subseq	r0, r6, #0, 2
    36d0:	00056213 	andeq	r6, r5, r3, lsl r2
    36d4:	e0030500 	and	r0, r3, r0, lsl #10
    36d8:	180002bd 	stmdane	r0, {r0, r2, r3, r4, r5, r7, r9}
    36dc:	00001a4d 	andeq	r1, r0, sp, asr #20
    36e0:	09170c01 	ldmdbeq	r7, {r0, sl, fp}
    36e4:	000004d6 	ldrdeq	r0, [r0], -r6
    36e8:	00029fd0 	ldrdeq	r9, [r2], -r0
    36ec:	00000e94 	muleq	r0, r4, lr
    36f0:	08079c01 	stmdaeq	r7, {r0, sl, fp, ip, pc}
    36f4:	9e190000 	cdpls	0, 1, cr0, cr9, cr0, {0}
    36f8:	0100001a 	tsteq	r0, sl, lsl r0
    36fc:	070f170d 	streq	r1, [pc, -sp, lsl #14]
    3700:	03000008 	movweq	r0, #8
    3704:	1a7f8491 	bne	1fe4950 <__bss_end+0x1f37678>
    3708:	0074706f 	rsbseq	r7, r4, pc, rrx
    370c:	13170e01 	tstne	r7, #1, 28
    3710:	0000080d 	andeq	r0, r0, sp, lsl #16
    3714:	7f809103 	svcvc	0x00809103
    3718:	00193319 	andseq	r3, r9, r9, lsl r3
    371c:	170f0100 	strne	r0, [pc, -r0, lsl #2]
    3720:	00007208 	andeq	r7, r0, r8, lsl #4
    3724:	fc910300 	ldc2	3, cr0, [r1], {0}
    3728:	656c1a7e 	strbvs	r1, [ip, #-2686]!	; 0xfffff582
    372c:	1001006e 	andne	r0, r1, lr, rrx
    3730:	009e0717 	addseq	r0, lr, r7, lsl r7
    3734:	91030000 	mrsls	r0, (UNDEF: 3)
    3738:	631b7ef8 	tstvs	fp, #248, 28	; 0xf80
    373c:	01007473 	tsteq	r0, r3, ror r4
    3740:	23141713 	tstcs	r4, #4980736	; 0x4c0000
    3744:	05000008 	streq	r0, [r0, #-8]
    3748:	02bed003 	adcseq	sp, lr, #3
    374c:	1a041700 	bne	109354 <__bss_end+0x5c07c>
    3750:	14010000 	strne	r0, [r1], #-0
    3754:	08231417 	stmdaeq	r3!, {r0, r1, r2, r4, sl, ip}
    3758:	03050000 	movweq	r0, #20480	; 0x5000
    375c:	0002bec0 	andeq	fp, r2, r0, asr #29
    3760:	001a0a17 	andseq	r0, sl, r7, lsl sl
    3764:	17150100 	ldrne	r0, [r5, -r0, lsl #2]
    3768:	00044919 	andeq	r4, r4, r9, lsl r9
    376c:	b0030500 	andlt	r0, r3, r0, lsl #10
    3770:	170002be 			; <UNDEFINED> instruction: 0x170002be
    3774:	00001cdb 	ldrdeq	r1, [r0], -fp
    3778:	07171601 	ldreq	r1, [r7, -r1, lsl #12]
    377c:	000000aa 	andeq	r0, r0, sl, lsr #1
    3780:	7fbd9103 	svcvc	0x00bd9103
    3784:	001c5817 	andseq	r5, ip, r7, lsl r8
    3788:	17160100 	ldrne	r0, [r6, -r0, lsl #2]
    378c:	0000aa0e 	andeq	sl, r0, lr, lsl #20
    3790:	5b910200 	blpl	fe443f98 <_estack+0xf6423f98>
    3794:	7379731b 	cmnvc	r9, #1811939328	; 0x6c000000
    3798:	17160100 	ldrne	r0, [r6, -r0, lsl #2]
    379c:	0000aa14 	andeq	sl, r0, r4, lsl sl
    37a0:	5a910200 	bpl	fe443fa8 <_estack+0xf6423fa8>
    37a4:	00177c17 	andseq	r7, r7, r7, lsl ip
    37a8:	17160100 	ldrne	r0, [r6, -r0, lsl #2]
    37ac:	0000aa19 	andeq	sl, r0, r9, lsl sl
    37b0:	43910200 	orrsmi	r0, r1, #0, 4
    37b4:	0019b017 	andseq	fp, r9, r7, lsl r0
    37b8:	17160100 	ldrne	r0, [r6, -r0, lsl #2]
    37bc:	0000aa1f 	andeq	sl, r0, pc, lsl sl
    37c0:	42910200 	addsmi	r0, r1, #0, 4
    37c4:	6675621b 			; <UNDEFINED> instruction: 0x6675621b
    37c8:	17170100 	ldrne	r0, [r7, -r0, lsl #2]
    37cc:	0002fe08 	andeq	pc, r2, r8, lsl #28
    37d0:	ac910300 	ldcge	3, cr0, [r1], {0}
    37d4:	74701c7f 	ldrbtvc	r1, [r0], #-3199	; 0xfffff381
    37d8:	18010065 	stmdane	r1, {r0, r2, r5, r6}
    37dc:	02fe0817 	rscseq	r0, lr, #1507328	; 0x170000
    37e0:	731b0000 	tstvc	fp, #0
    37e4:	19010073 	stmdbne	r1, {r0, r1, r4, r5, r6}
    37e8:	00bb0717 	adcseq	r0, fp, r7, lsl r7
    37ec:	91030000 	mrsls	r0, (UNDEF: 3)
    37f0:	be177fbe 	mrclt	15, 0, r7, cr7, cr14, {5}
    37f4:	01000019 	tsteq	r0, r9, lsl r0
    37f8:	cc08171a 	stcgt	7, cr1, [r8], {26}
    37fc:	03000000 	movweq	r0, #0
    3800:	177fb091 			; <UNDEFINED> instruction: 0x177fb091
    3804:	00001b24 	andeq	r1, r0, r4, lsr #22
    3808:	10171a01 	andsne	r1, r7, r1, lsl #20
    380c:	000000cc 	andeq	r0, r0, ip, asr #1
    3810:	7f989103 	svcvc	0x00989103
    3814:	001c1a17 	andseq	r1, ip, r7, lsl sl
    3818:	171a0100 	ldrne	r0, [sl, -r0, lsl #2]
    381c:	0000cc18 	andeq	ip, r0, r8, lsl ip
    3820:	a4910300 	ldrge	r0, [r1], #768	; 0x300
    3824:	61701b7f 	cmnvs	r0, pc, ror fp
    3828:	1a010075 	bne	43a04 <ramdisk+0x1672c>
    382c:	00cc2017 	sbceq	r2, ip, r7, lsl r0
    3830:	91020000 	mrsls	r0, (UNDEF: 2)
    3834:	17ee1760 	strbne	r1, [lr, r0, ror #14]!
    3838:	1a010000 	bne	43840 <ramdisk+0x16568>
    383c:	00cc2517 	sbceq	r2, ip, r7, lsl r5
    3840:	91020000 	mrsls	r0, (UNDEF: 2)
    3844:	006e1b5c 	rsbeq	r1, lr, ip, asr fp
    3848:	2c171a01 			; <UNDEFINED> instruction: 0x2c171a01
    384c:	000000cc 	andeq	r0, r0, ip, asr #1
    3850:	1b649102 	blne	1927c60 <__bss_end+0x187a988>
    3854:	006e7376 	rsbeq	r7, lr, r6, ror r3
    3858:	2f171a01 	svccs	0x00171a01
    385c:	000000cc 	andeq	r0, r0, ip, asr #1
    3860:	7fa89103 	svcvc	0x00a89103
    3864:	001bf317 	andseq	pc, fp, r7, lsl r3	; <UNPREDICTABLE>
    3868:	171b0100 	ldrne	r0, [fp, -r0, lsl #2]
    386c:	0000e408 	andeq	lr, r0, r8, lsl #8
    3870:	94910300 	ldrls	r0, [r1], #768	; 0x300
    3874:	1c70177f 	ldclne	7, cr1, [r0], #-508	; 0xfffffe04
    3878:	1b010000 	blne	43880 <ramdisk+0x165a8>
    387c:	00e41017 	rsceq	r1, r4, r7, lsl r0
    3880:	91020000 	mrsls	r0, (UNDEF: 2)
    3884:	1cff176c 	ldclne	7, cr1, [pc], #432	; 3a3c <_start-0xc5c4>
    3888:	1b010000 	blne	43890 <ramdisk+0x165b8>
    388c:	00e41717 	rsceq	r1, r4, r7, lsl r7
    3890:	91020000 	mrsls	r0, (UNDEF: 2)
    3894:	19df1768 	ldmibne	pc, {r3, r5, r6, r8, r9, sl, ip}^	; <UNPREDICTABLE>
    3898:	1b010000 	blne	438a0 <ramdisk+0x165c8>
    389c:	00e41e17 	rsceq	r1, r4, r7, lsl lr
    38a0:	91030000 	mrsls	r0, (UNDEF: 3)
    38a4:	e4177fa0 	ldr	r7, [r7], #-4000	; 0xfffff060
    38a8:	0100001b 	tsteq	r0, fp, lsl r0
    38ac:	e408171c 	str	r1, [r8], #-1820	; 0xfffff8e4
    38b0:	02000000 	andeq	r0, r0, #0
    38b4:	6c1b7091 	ldcvs	0, cr7, [fp], {145}	; 0x91
    38b8:	01006162 	tsteq	r0, r2, ror #2
    38bc:	280e171c 	stmdacs	lr, {r2, r3, r4, r8, r9, sl, ip}
    38c0:	03000008 	movweq	r0, #8
    38c4:	177f8c91 			; <UNDEFINED> instruction: 0x177f8c91
    38c8:	00001a5d 	andeq	r1, r0, sp, asr sl
    38cc:	08171d01 	ldmdaeq	r7, {r0, r8, sl, fp, ip}
    38d0:	000000cc 	andeq	r0, r0, ip, asr #1
    38d4:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    38d8:	00001a90 	muleq	r0, r0, sl
    38dc:	10171d01 	andsne	r1, r7, r1, lsl #26
    38e0:	000000cc 	andeq	r0, r0, ip, asr #1
    38e4:	17549102 	ldrbne	r9, [r4, -r2, lsl #2]
    38e8:	000019c5 	andeq	r1, r0, r5, asr #19
    38ec:	18171d01 	ldmdane	r7, {r0, r8, sl, fp, ip}
    38f0:	000000cc 	andeq	r0, r0, ip, asr #1
    38f4:	17509102 	ldrbne	r9, [r0, -r2, lsl #2]
    38f8:	00001a7b 	andeq	r1, r0, fp, ror sl
    38fc:	20171d01 	andscs	r1, r7, r1, lsl #26
    3900:	000000cc 	andeq	r0, r0, ip, asr #1
    3904:	174c9102 	strbne	r9, [ip, -r2, lsl #2]
    3908:	000018ad 	andeq	r1, r0, sp, lsr #17
    390c:	07171e01 	ldreq	r1, [r7, -r1, lsl #28]
    3910:	0000009e 	muleq	r0, lr, r0
    3914:	7fb89103 	svcvc	0x00b89103
    3918:	0018d317 	andseq	sp, r8, r7, lsl r3
    391c:	171e0100 	ldrne	r0, [lr, -r0, lsl #2]
    3920:	00009e0e 	andeq	r9, r0, lr, lsl #28
    3924:	b4910300 	ldrlt	r0, [r1], #768	; 0x300
    3928:	00691b7f 	rsbeq	r1, r9, pc, ror fp
    392c:	16171e01 	ldrne	r1, [r7], -r1, lsl #28
    3930:	0000009e 	muleq	r0, lr, r0
    3934:	1b489102 	blne	1227d44 <__bss_end+0x117aa6c>
    3938:	006c6f76 	rsbeq	r6, ip, r6, ror pc
    393c:	06171f01 	ldreq	r1, [r7], -r1, lsl #30
    3940:	00000025 	andeq	r0, r0, r5, lsr #32
    3944:	1b449102 	blne	1127d54 <__bss_end+0x107aa7c>
    3948:	01007364 	tsteq	r0, r4, ror #6
    394c:	e30a1720 	movw	r1, #42784	; 0xa720
    3950:	02000004 	andeq	r0, r0, #4
    3954:	721b4191 	andsvc	r4, fp, #1073741860	; 0x40000024
    3958:	01007365 	tsteq	r0, r5, ror #6
    395c:	d60a1721 	strle	r1, [sl], -r1, lsr #14
    3960:	03000004 	movweq	r0, #4
    3964:	007f9f91 			; <UNDEFINED> instruction: 0x007f9f91
    3968:	01010406 	tsteq	r1, r6, lsl #8
    396c:	04060000 	streq	r0, [r6], #-0
    3970:	00000449 	andeq	r0, r0, r9, asr #8
    3974:	0000c70b 	andeq	ip, r0, fp, lsl #14
    3978:	00082300 	andeq	r2, r8, r0, lsl #6
    397c:	002c0f00 	eoreq	r0, ip, r0, lsl #30
    3980:	00060000 	andeq	r0, r6, r0
    3984:	00081305 	andeq	r1, r8, r5, lsl #6
    3988:	00e40b00 	rsceq	r0, r4, r0, lsl #22
    398c:	08380000 	ldmdaeq	r8!, {}	; <UNPREDICTABLE>
    3990:	2c0f0000 	stccs	0, cr0, [pc], {-0}
    3994:	01000000 	mrseq	r0, (UNDEF: 0)
    3998:	1a2b1d00 	bne	acada0 <__bss_end+0xa1dac8>
    399c:	7d010000 	stcvc	0, cr0, [r1, #-0]
    39a0:	04d61016 	ldrbeq	r1, [r6], #22
    39a4:	9b780000 	blls	1e039ac <__bss_end+0x1d566d4>
    39a8:	04580002 	ldrbeq	r0, [r8], #-2
    39ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    39b0:	0000093f 	andeq	r0, r0, pc, lsr r9
    39b4:	7672641a 			; <UNDEFINED> instruction: 0x7672641a
    39b8:	167e0100 	ldrbtne	r0, [lr], -r0, lsl #2
    39bc:	0000aa07 	andeq	sl, r0, r7, lsl #20
    39c0:	4f910200 	svcmi	0x00910200
    39c4:	001c3019 	andseq	r3, ip, r9, lsl r0
    39c8:	167f0100 	ldrbtne	r0, [pc], -r0, lsl #2
    39cc:	00093f0e 	andeq	r3, r9, lr, lsl #30
    39d0:	48910200 	ldmmi	r1, {r9}
    39d4:	7379731a 	cmnvc	r9, #1744830464	; 0x68000000
    39d8:	16800100 	strne	r0, [r0], r0, lsl #2
    39dc:	0000aa07 	andeq	sl, r0, r7, lsl #20
    39e0:	4e910200 	cdpmi	2, 9, cr0, cr1, cr0, {0}
    39e4:	6675621a 			; <UNDEFINED> instruction: 0x6675621a
    39e8:	16810100 	strne	r0, [r1], r0, lsl #2
    39ec:	0002fe08 	andeq	pc, r2, r8, lsl #28
    39f0:	44910200 	ldrmi	r0, [r1], #512	; 0x200
    39f4:	0100691b 	tsteq	r0, fp, lsl r9
    39f8:	9e071684 	cfmadd32ls	mvax4, mvfx1, mvfx7, mvfx4
    39fc:	02000000 	andeq	r0, r0, #0
    3a00:	631b7491 	tstvs	fp, #-1862270976	; 0x91000000
    3a04:	84010079 	strhi	r0, [r1], #-121	; 0xffffff87
    3a08:	009e0a16 	addseq	r0, lr, r6, lsl sl
    3a0c:	91020000 	mrsls	r0, (UNDEF: 2)
    3a10:	1c211758 	stcne	7, cr1, [r1], #-352	; 0xfffffea0
    3a14:	85010000 	strhi	r0, [r1, #-0]
    3a18:	00e40816 	rsceq	r0, r4, r6, lsl r8
    3a1c:	91020000 	mrsls	r0, (UNDEF: 2)
    3a20:	1c8f1750 	stcne	7, cr1, [pc], {80}	; 0x50
    3a24:	86010000 	strhi	r0, [r1], -r0
    3a28:	00cc0816 	sbceq	r0, ip, r6, lsl r8
    3a2c:	91020000 	mrsls	r0, (UNDEF: 2)
    3a30:	1b521760 	blne	14897b8 <__bss_end+0x13dc4e0>
    3a34:	86010000 	strhi	r0, [r1], -r0
    3a38:	00cc1216 	sbceq	r1, ip, r6, lsl r2
    3a3c:	91020000 	mrsls	r0, (UNDEF: 2)
    3a40:	1be91770 	blne	ffa49808 <_estack+0xf7a29808>
    3a44:	86010000 	strhi	r0, [r1], -r0
    3a48:	00cc1f16 	sbceq	r1, ip, r6, lsl pc
    3a4c:	91020000 	mrsls	r0, (UNDEF: 2)
    3a50:	74701b6c 	ldrbtvc	r1, [r0], #-2924	; 0xfffff494
    3a54:	87010065 	strhi	r0, [r1, -r5, rrx]
    3a58:	02fe0816 	rscseq	r0, lr, #1441792	; 0x160000
    3a5c:	91020000 	mrsls	r0, (UNDEF: 2)
    3a60:	64681b68 	strbtvs	r1, [r8], #-2920	; 0xfffff498
    3a64:	16880100 	strne	r0, [r8], r0, lsl #2
    3a68:	0000aa07 	andeq	sl, r0, r7, lsl #20
    3a6c:	57910200 	ldrpl	r0, [r1, r0, lsl #4]
    3a70:	001bfa17 	andseq	pc, fp, r7, lsl sl	; <UNPREDICTABLE>
    3a74:	16880100 	strne	r0, [r8], r0, lsl #2
    3a78:	0000aa0b 	andeq	sl, r0, fp, lsl #20
    3a7c:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
    3a80:	0063731b 	rsbeq	r7, r3, fp, lsl r3
    3a84:	11168801 	tstne	r6, r1, lsl #16
    3a88:	000000aa 	andeq	r0, r0, sl, lsr #1
    3a8c:	17569102 	ldrbne	r9, [r6, -r2, lsl #2]
    3a90:	00001ab5 			; <UNDEFINED> instruction: 0x00001ab5
    3a94:	15168801 	ldrne	r8, [r6, #-2049]	; 0xfffff7ff
    3a98:	000000aa 	andeq	r0, r0, sl, lsr #1
    3a9c:	005f9102 	subseq	r9, pc, r2, lsl #2
    3aa0:	00f00406 	rscseq	r0, r0, r6, lsl #8
    3aa4:	3b180000 	blcc	603aac <__bss_end+0x5567d4>
    3aa8:	0100001b 	tsteq	r0, fp, lsl r0
    3aac:	d6091423 	strle	r1, [r9], -r3, lsr #8
    3ab0:	6c000004 	stcvs	0, cr0, [r0], {4}
    3ab4:	0c000298 	sfmeq	f0, 4, [r0], {152}	; 0x98
    3ab8:	01000003 	tsteq	r0, r3
    3abc:	0009f59c 	muleq	r9, ip, r5
    3ac0:	1a221900 	bne	889ec8 <__bss_end+0x7dcbf0>
    3ac4:	24010000 	strcs	r0, [r1], #-0
    3ac8:	08070f14 	stmdaeq	r7, {r2, r4, r8, r9, sl, fp}
    3acc:	91030000 	mrsls	r0, (UNDEF: 3)
    3ad0:	ee197ee4 	cdp	14, 1, cr7, cr9, cr4, {7}
    3ad4:	0100001a 	tsteq	r0, sl, lsl r0
    3ad8:	070f1425 	streq	r1, [pc, -r5, lsr #8]
    3adc:	03000008 	movweq	r0, #8
    3ae0:	1b7ee091 	blne	1fbbd2c <__bss_end+0x1f0ea54>
    3ae4:	00736572 	rsbseq	r6, r3, r2, ror r5
    3ae8:	0a142801 	beq	50daf4 <__bss_end+0x46081c>
    3aec:	000004d6 	ldrdeq	r0, [r0], -r6
    3af0:	1b6f9102 	blne	1be7f00 <__bss_end+0x1b3ac28>
    3af4:	01007366 	tsteq	r0, r6, ror #6
    3af8:	7a091429 	bvc	248ba4 <__bss_end+0x19b8cc>
    3afc:	02000002 	andeq	r0, r0, #2
    3b00:	641b6091 	ldrvs	r6, [fp], #-145	; 0xffffff6f
    3b04:	01006f6a 	tsteq	r0, sl, ror #30
    3b08:	7706142a 	strvc	r1, [r6, -sl, lsr #8]
    3b0c:	03000003 	movweq	r0, #3
    3b10:	1b7fb491 	blne	1ff0d5c <__bss_end+0x1f43a84>
    3b14:	006e6a64 	rsbeq	r6, lr, r4, ror #20
    3b18:	0b142a01 	bleq	50e324 <__bss_end+0x46104c>
    3b1c:	00000377 	andeq	r0, r0, r7, ror r3
    3b20:	7f889103 	svcvc	0x00889103
    3b24:	6675621b 			; <UNDEFINED> instruction: 0x6675621b
    3b28:	142b0100 	strtne	r0, [fp], #-256	; 0xffffff00
    3b2c:	0009f507 	andeq	pc, r9, r7, lsl #10
    3b30:	e8910300 	ldm	r1, {r8, r9}
    3b34:	69641b7e 	stmdbvs	r4!, {r1, r2, r3, r4, r5, r6, r8, r9, fp, ip}^
    3b38:	2b010072 	blcs	43d08 <ramdisk+0x16a30>
    3b3c:	02fe3014 	rscseq	r3, lr, #20
    3b40:	91020000 	mrsls	r0, (UNDEF: 2)
    3b44:	1be41768 	blne	ff9098ec <_estack+0xf78e98ec>
    3b48:	2c010000 	stccs	0, cr0, [r1], {-0}
    3b4c:	00e40814 	rsceq	r0, r4, r4, lsl r8
    3b50:	91020000 	mrsls	r0, (UNDEF: 2)
    3b54:	aa0b0064 	bge	2c3cec <__bss_end+0x216a14>
    3b58:	05000000 	streq	r0, [r0, #-0]
    3b5c:	0f00000a 	svceq	0x0000000a
    3b60:	0000002c 	andeq	r0, r0, ip, lsr #32
    3b64:	6a18001f 	bvs	603be8 <__bss_end+0x556910>
    3b68:	0100001a 	tsteq	r0, sl, lsl r0
    3b6c:	d60913cf 	strle	r1, [r9], -pc, asr #7
    3b70:	ec000004 	stc	0, cr0, [r0], {4}
    3b74:	80000295 	mulhi	r0, r5, r2
    3b78:	01000002 	tsteq	r0, r2
    3b7c:	000aa19c 	muleq	sl, ip, r1
    3b80:	1a9e1900 	bne	fe789f88 <_estack+0xf6769f88>
    3b84:	d0010000 	andle	r0, r1, r0
    3b88:	08070f13 	stmdaeq	r7, {r0, r1, r4, r8, r9, sl, fp}
    3b8c:	91030000 	mrsls	r0, (UNDEF: 3)
    3b90:	721b7fa4 	andsvc	r7, fp, #164, 30	; 0x290
    3b94:	01007365 	tsteq	r0, r5, ror #6
    3b98:	d60a13d3 			; <UNDEFINED> instruction: 0xd60a13d3
    3b9c:	02000004 	andeq	r0, r0, #4
    3ba0:	661b7791 			; <UNDEFINED> instruction: 0x661b7791
    3ba4:	d4010073 	strle	r0, [r1], #-115	; 0xffffff8d
    3ba8:	027a0913 	rsbseq	r0, sl, #311296	; 0x4c000
    3bac:	91020000 	mrsls	r0, (UNDEF: 2)
    3bb0:	6a641b64 	bvs	190a948 <__bss_end+0x185d670>
    3bb4:	13d50100 	bicsne	r0, r5, #0, 2
    3bb8:	00037706 	andeq	r7, r3, r6, lsl #14
    3bbc:	b8910300 	ldmlt	r1, {r8, r9}
    3bc0:	1aba177f 	bne	fee899c4 <_estack+0xf6e699c4>
    3bc4:	d6010000 	strle	r0, [r1], -r0
    3bc8:	02800a13 	addeq	r0, r0, #77824	; 0x13000
    3bcc:	91030000 	mrsls	r0, (UNDEF: 3)
    3bd0:	641b7fa8 	ldrvs	r7, [fp], #-4008	; 0xfffff058
    3bd4:	01006c63 	tsteq	r0, r3, ror #24
    3bd8:	cc0813d7 	stcgt	3, cr1, [r8], {215}	; 0xd7
    3bdc:	02000000 	andeq	r0, r0, #0
    3be0:	701b7091 	mulsvc	fp, r1, r0
    3be4:	01006c63 	tsteq	r0, r3, ror #24
    3be8:	cc0d13d7 	stcgt	3, cr1, [sp], {215}	; 0xd7
    3bec:	02000000 	andeq	r0, r0, #0
    3bf0:	741b6891 	ldrvc	r6, [fp], #-2193	; 0xfffff76f
    3bf4:	d701006d 	strle	r0, [r1, -sp, rrx]
    3bf8:	00cc1213 	sbceq	r1, ip, r3, lsl r2
    3bfc:	91020000 	mrsls	r0, (UNDEF: 2)
    3c00:	5418006c 	ldrpl	r0, [r8], #-108	; 0xffffff94
    3c04:	0100001a 	tsteq	r0, sl, lsl r0
    3c08:	d6091371 			; <UNDEFINED> instruction: 0xd6091371
    3c0c:	1c000004 	stcne	0, cr0, [r0], {4}
    3c10:	d0000294 	mulle	r0, r4, r2
    3c14:	01000001 	tsteq	r0, r1
    3c18:	000b1d9c 	muleq	fp, ip, sp
    3c1c:	1a9e1900 	bne	fe78a024 <_estack+0xf676a024>
    3c20:	72010000 	andvc	r0, r1, #0
    3c24:	08070f13 	stmdaeq	r7, {r0, r1, r4, r8, r9, sl, fp}
    3c28:	91030000 	mrsls	r0, (UNDEF: 3)
    3c2c:	721b7f8c 	andsvc	r7, fp, #140, 30	; 0x230
    3c30:	01007365 	tsteq	r0, r5, ror #6
    3c34:	d60a1375 			; <UNDEFINED> instruction: 0xd60a1375
    3c38:	02000004 	andeq	r0, r0, #4
    3c3c:	661b7791 			; <UNDEFINED> instruction: 0x661b7791
    3c40:	76010073 			; <UNDEFINED> instruction: 0x76010073
    3c44:	027a0913 	rsbseq	r0, sl, #311296	; 0x4c000
    3c48:	91020000 	mrsls	r0, (UNDEF: 2)
    3c4c:	6a641b6c 	bvs	190aa04 <__bss_end+0x185d72c>
    3c50:	13770100 	cmnne	r7, #0, 2
    3c54:	00037706 	andeq	r7, r3, r6, lsl #14
    3c58:	40910200 	addsmi	r0, r1, r0, lsl #4
    3c5c:	6a64731b 	bvs	19208d0 <__bss_end+0x18735f8>
    3c60:	13770100 	cmnne	r7, #0, 2
    3c64:	0003770a 	andeq	r7, r3, sl, lsl #14
    3c68:	94910300 	ldrls	r0, [r1], #768	; 0x300
    3c6c:	1c3e177f 	ldcne	7, cr1, [lr], #-508	; 0xfffffe04
    3c70:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    3c74:	00cc0813 	sbceq	r0, ip, r3, lsl r8
    3c78:	91020000 	mrsls	r0, (UNDEF: 2)
    3c7c:	e6180070 			; <UNDEFINED> instruction: 0xe6180070
    3c80:	01000019 	tsteq	r0, r9, lsl r0
    3c84:	d609133f 			; <UNDEFINED> instruction: 0xd609133f
    3c88:	6c000004 	stcvs	0, cr0, [r0], {4}
    3c8c:	b0000292 	mullt	r0, r2, r2
    3c90:	01000001 	tsteq	r0, r1
    3c94:	000b779c 	muleq	fp, ip, r7
    3c98:	70661a00 	rsbvc	r1, r6, r0, lsl #20
    3c9c:	13400100 	movtne	r0, #256	; 0x100
    3ca0:	000b7707 	andeq	r7, fp, r7, lsl #14
    3ca4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    3ca8:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    3cac:	13430100 	movtne	r0, #12544	; 0x3100
    3cb0:	0004d60a 	andeq	sp, r4, sl, lsl #12
    3cb4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    3cb8:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    3cbc:	09134401 	ldmdbeq	r3, {r0, sl, lr}
    3cc0:	0000027a 	andeq	r0, r0, sl, ror r2
    3cc4:	1b6c9102 	blne	1b280d4 <__bss_end+0x1a7adfc>
    3cc8:	006c636e 	rsbeq	r6, ip, lr, ror #6
    3ccc:	08134501 	ldmdaeq	r3, {r0, r8, sl, lr}
    3cd0:	000000cc 	andeq	r0, r0, ip, asr #1
    3cd4:	00709102 	rsbseq	r9, r0, r2, lsl #2
    3cd8:	03040406 	movweq	r0, #17414	; 0x4406
    3cdc:	4e180000 	cdpmi	0, 1, cr0, cr8, cr0, {0}
    3ce0:	0100001c 	tsteq	r0, ip, lsl r0
    3ce4:	d60912df 			; <UNDEFINED> instruction: 0xd60912df
    3ce8:	e4000004 	str	r0, [r0], #-4
    3cec:	8800028f 	stmdahi	r0, {r0, r1, r2, r3, r7, r9}
    3cf0:	01000002 	tsteq	r0, r2
    3cf4:	000c479c 	muleq	ip, ip, r7
    3cf8:	1a9e1900 	bne	fe78a100 <_estack+0xf676a100>
    3cfc:	e0010000 	and	r0, r1, r0
    3d00:	08070f12 	stmdaeq	r7, {r1, r4, r8, r9, sl, fp}
    3d04:	91020000 	mrsls	r0, (UNDEF: 2)
    3d08:	1a161944 	bne	58a220 <__bss_end+0x4dcf48>
    3d0c:	e1010000 	mrs	r0, (UNDEF: 1)
    3d10:	0c470912 	mcrreq	9, 1, r0, r7, cr2	; <UNPREDICTABLE>
    3d14:	91020000 	mrsls	r0, (UNDEF: 2)
    3d18:	19fe1940 	ldmibne	lr!, {r6, r8, fp, ip}^
    3d1c:	e2010000 	and	r0, r1, #0
    3d20:	0c4d0a12 	vmoveq	s4, s5, r0, sp
    3d24:	91030000 	mrsls	r0, (UNDEF: 3)
    3d28:	721b7fbc 	andsvc	r7, fp, #188, 30	; 0x2f0
    3d2c:	01007365 	tsteq	r0, r5, ror #6
    3d30:	d60a12e5 	strle	r1, [sl], -r5, ror #5
    3d34:	02000004 	andeq	r0, r0, #4
    3d38:	661b7791 			; <UNDEFINED> instruction: 0x661b7791
    3d3c:	e6010073 			; <UNDEFINED> instruction: 0xe6010073
    3d40:	027a0912 	rsbseq	r0, sl, #294912	; 0x48000
    3d44:	91020000 	mrsls	r0, (UNDEF: 2)
    3d48:	1af7175c 	bne	ffdc9ac0 <_estack+0xf7da9ac0>
    3d4c:	e7010000 	str	r0, [r1, -r0]
    3d50:	00cc0812 	sbceq	r0, ip, r2, lsl r8
    3d54:	91020000 	mrsls	r0, (UNDEF: 2)
    3d58:	17861770 			; <UNDEFINED> instruction: 0x17861770
    3d5c:	e7010000 	str	r0, [r1, -r0]
    3d60:	00cc0f12 	sbceq	r0, ip, r2, lsl pc
    3d64:	91020000 	mrsls	r0, (UNDEF: 2)
    3d68:	1d23176c 	stcne	7, cr1, [r3, #-432]!	; 0xfffffe50
    3d6c:	e7010000 	str	r0, [r1, -r0]
    3d70:	00cc1512 	sbceq	r1, ip, r2, lsl r5
    3d74:	91020000 	mrsls	r0, (UNDEF: 2)
    3d78:	1be41760 	blne	ff909b00 <_estack+0xf78e9b00>
    3d7c:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    3d80:	00e40812 	rsceq	r0, r4, r2, lsl r8
    3d84:	91020000 	mrsls	r0, (UNDEF: 2)
    3d88:	00691b68 	rsbeq	r1, r9, r8, ror #22
    3d8c:	0712e901 	ldreq	lr, [r2, -r1, lsl #18]
    3d90:	0000009e 	muleq	r0, lr, r0
    3d94:	1b649102 	blne	19281a4 <__bss_end+0x187aecc>
    3d98:	006a626f 	rsbeq	r6, sl, pc, ror #4
    3d9c:	0a12ea01 	beq	4be5a8 <__bss_end+0x4112d0>
    3da0:	00000280 	andeq	r0, r0, r0, lsl #5
    3da4:	004c9102 	subeq	r9, ip, r2, lsl #2
    3da8:	00cc0406 	sbceq	r0, ip, r6, lsl #8
    3dac:	04060000 	streq	r0, [r6], #-0
    3db0:	0000027a 	andeq	r0, r0, sl, ror r2
    3db4:	001d2118 	andseq	r2, sp, r8, lsl r1
    3db8:	12bc0100 	adcsne	r0, ip, #0, 2
    3dbc:	0004d609 	andeq	sp, r4, r9, lsl #12
    3dc0:	028f3800 	addeq	r3, pc, #0, 16
    3dc4:	0000ac00 	andeq	sl, r0, r0, lsl #24
    3dc8:	ae9c0100 	fmlgee	f0, f4, f0
    3dcc:	1900000c 	stmdbne	r0, {r2, r3}
    3dd0:	00001a9e 	muleq	r0, lr, sl
    3dd4:	0f12bd01 	svceq	0x0012bd01
    3dd8:	00000807 	andeq	r0, r0, r7, lsl #16
    3ddc:	1a449102 	bne	11281ec <__bss_end+0x107af14>
    3de0:	006f6e66 	rsbeq	r6, pc, r6, ror #28
    3de4:	0b12be01 	bleq	4b35f0 <__bss_end+0x406318>
    3de8:	00000cae 	andeq	r0, r0, lr, lsr #25
    3dec:	1b409102 	blne	10281fc <__bss_end+0xf7af24>
    3df0:	00736572 	rsbseq	r6, r3, r2, ror r5
    3df4:	0a12c101 	beq	4b4200 <__bss_end+0x406f28>
    3df8:	000004d6 	ldrdeq	r0, [r0], -r6
    3dfc:	1b779102 	blne	1de820c <__bss_end+0x1d3af34>
    3e00:	01006a64 	tsteq	r0, r4, ror #20
    3e04:	770612c2 	strvc	r1, [r6, -r2, asr #5]
    3e08:	02000003 	andeq	r0, r0, #3
    3e0c:	06004891 			; <UNDEFINED> instruction: 0x06004891
    3e10:	0003de04 	andeq	sp, r3, r4, lsl #28
    3e14:	1bff1800 	blne	fffc9e1c <_estack+0xf7fa9e1c>
    3e18:	64010000 	strvs	r0, [r1], #-0
    3e1c:	04d60912 	ldrbeq	r0, [r6], #2322	; 0x912
    3e20:	8e600000 	cdphi	0, 6, cr0, cr0, cr0, {0}
    3e24:	00d80002 	sbcseq	r0, r8, r2
    3e28:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e2c:	00000d0e 	andeq	r0, r0, lr, lsl #26
    3e30:	0070641a 	rsbseq	r6, r0, sl, lsl r4
    3e34:	07126501 	ldreq	r6, [r2, -r1, lsl #10]
    3e38:	00000d0e 	andeq	r0, r0, lr, lsl #26
    3e3c:	1a6c9102 	bne	1b2824c <__bss_end+0x1a7af74>
    3e40:	006f6e66 	rsbeq	r6, pc, r6, ror #28
    3e44:	0b126601 	bleq	49d650 <__bss_end+0x3f0378>
    3e48:	00000cae 	andeq	r0, r0, lr, lsr #25
    3e4c:	1b689102 	blne	1a2825c <__bss_end+0x197af84>
    3e50:	00736572 	rsbseq	r6, r3, r2, ror r5
    3e54:	0a126901 	beq	49e260 <__bss_end+0x3f0f88>
    3e58:	000004d6 	ldrdeq	r0, [r0], -r6
    3e5c:	1b779102 	blne	1de826c <__bss_end+0x1d3af94>
    3e60:	01007366 	tsteq	r0, r6, ror #6
    3e64:	7a09126a 	bvc	248814 <__bss_end+0x19b53c>
    3e68:	02000002 	andeq	r0, r0, #2
    3e6c:	06007091 			; <UNDEFINED> instruction: 0x06007091
    3e70:	00037704 	andeq	r7, r3, r4, lsl #14
    3e74:	1ce11800 	stclne	8, cr1, [r1]
    3e78:	46010000 	strmi	r0, [r1], -r0
    3e7c:	04d60912 	ldrbeq	r0, [r6], #2322	; 0x912
    3e80:	8e0c0000 	cdphi	0, 0, cr0, cr12, cr0, {0}
    3e84:	00540002 	subseq	r0, r4, r2
    3e88:	9c010000 	stcls	0, cr0, [r1], {-0}
    3e8c:	00000d5e 	andeq	r0, r0, lr, asr sp
    3e90:	0070641a 	rsbseq	r6, r0, sl, lsl r4
    3e94:	07124701 	ldreq	r4, [r2, -r1, lsl #14]
    3e98:	00000d0e 	andeq	r0, r0, lr, lsl #26
    3e9c:	1b6c9102 	blne	1b282ac <__bss_end+0x1a7afd4>
    3ea0:	00736572 	rsbseq	r6, r3, r2, ror r5
    3ea4:	0a124a01 	beq	4966b0 <__bss_end+0x3e93d8>
    3ea8:	000004d6 	ldrdeq	r0, [r0], -r6
    3eac:	1b779102 	blne	1de82bc <__bss_end+0x1d3afe4>
    3eb0:	01007366 	tsteq	r0, r6, ror #6
    3eb4:	7a09124b 	bvc	2487e8 <__bss_end+0x19b510>
    3eb8:	02000002 	andeq	r0, r0, #2
    3ebc:	18007091 	stmdane	r0, {r0, r4, r7, ip, sp, lr}
    3ec0:	00001afd 	strdeq	r1, [r0], -sp
    3ec4:	09120401 	ldmdbeq	r2, {r0, sl}
    3ec8:	000004d6 	ldrdeq	r0, [r0], -r6
    3ecc:	00028cc8 	andeq	r8, r2, r8, asr #25
    3ed0:	00000144 	andeq	r0, r0, r4, asr #2
    3ed4:	0db89c01 	ldceq	12, cr9, [r8, #4]!
    3ed8:	641a0000 	ldrvs	r0, [sl], #-0
    3edc:	05010070 	streq	r0, [r1, #-112]	; 0xffffff90
    3ee0:	0d0e0712 	stceq	7, cr0, [lr, #-72]	; 0xffffffb8
    3ee4:	91020000 	mrsls	r0, (UNDEF: 2)
    3ee8:	1a9e196c 	bne	fe78a4a0 <_estack+0xf676a4a0>
    3eec:	06010000 	streq	r0, [r1], -r0
    3ef0:	08070f12 	stmdaeq	r7, {r1, r4, r8, r9, sl, fp}
    3ef4:	91020000 	mrsls	r0, (UNDEF: 2)
    3ef8:	65721b68 	ldrbvs	r1, [r2, #-2920]!	; 0xfffff498
    3efc:	09010073 	stmdbeq	r1, {r0, r1, r4, r5, r6}
    3f00:	04d60a12 	ldrbeq	r0, [r6], #2578	; 0xa12
    3f04:	91020000 	mrsls	r0, (UNDEF: 2)
    3f08:	73661b77 	cmnvc	r6, #121856	; 0x1dc00
    3f0c:	120a0100 	andne	r0, sl, #0, 2
    3f10:	00027a09 	andeq	r7, r2, r9, lsl #20
    3f14:	70910200 	addsvc	r0, r1, r0, lsl #4
    3f18:	1add1800 	bne	ff749f20 <_estack+0xf7729f20>
    3f1c:	60010000 	andvs	r0, r1, r0
    3f20:	04d60911 	ldrbeq	r0, [r6], #2321	; 0x911
    3f24:	88f80000 	ldmhi	r8!, {}^	; <UNPREDICTABLE>
    3f28:	03d00002 	bicseq	r0, r0, #2
    3f2c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3f30:	00000e52 	andeq	r0, r0, r2, asr lr
    3f34:	0070661a 	rsbseq	r6, r0, sl, lsl r6
    3f38:	07116101 	ldreq	r6, [r1, -r1, lsl #2]
    3f3c:	00000b77 	andeq	r0, r0, r7, ror fp
    3f40:	1a549102 	bne	1528350 <__bss_end+0x147b078>
    3f44:	0073666f 	rsbseq	r6, r3, pc, ror #12
    3f48:	0a116201 	beq	45c754 <__bss_end+0x3af47c>
    3f4c:	000000d8 	ldrdeq	r0, [r0], -r8
    3f50:	1b509102 	blne	1428360 <__bss_end+0x137b088>
    3f54:	00736572 	rsbseq	r6, r3, r2, ror r5
    3f58:	0a116501 	beq	45d364 <__bss_end+0x3b008c>
    3f5c:	000004d6 	ldrdeq	r0, [r0], -r6
    3f60:	1b6f9102 	blne	1be8370 <__bss_end+0x1b3b098>
    3f64:	01007366 	tsteq	r0, r6, ror #6
    3f68:	7a091166 	bvc	248508 <__bss_end+0x19b230>
    3f6c:	02000002 	andeq	r0, r0, #2
    3f70:	86175891 			; <UNDEFINED> instruction: 0x86175891
    3f74:	01000017 	tsteq	r0, r7, lsl r0
    3f78:	cc081167 	stfgts	f1, [r8], {103}	; 0x67
    3f7c:	02000000 	andeq	r0, r0, #0
    3f80:	621b6891 	andsvs	r6, fp, #9502720	; 0x910000
    3f84:	01007363 	tsteq	r0, r3, ror #6
    3f88:	cc0e1167 	stfgts	f1, [lr], {103}	; 0x67
    3f8c:	02000000 	andeq	r0, r0, #0
    3f90:	ee175c91 	mrc	12, 0, r5, cr7, cr1, {4}
    3f94:	01000017 	tsteq	r0, r7, lsl r0
    3f98:	e4081168 	str	r1, [r8], #-360	; 0xfffffe98
    3f9c:	02000000 	andeq	r0, r0, #0
    3fa0:	af176491 	svcge	0x00176491
    3fa4:	0100001a 	tsteq	r0, sl, lsl r0
    3fa8:	d80a1169 	stmdale	sl, {r0, r3, r5, r6, r8, ip}
    3fac:	02000000 	andeq	r0, r0, #0
    3fb0:	18006091 	stmdane	r0, {r0, r4, r7, sp, lr}
    3fb4:	000019cc 	andeq	r1, r0, ip, asr #19
    3fb8:	09108701 	ldmdbeq	r0, {r0, r8, r9, sl, pc}
    3fbc:	000004d6 	ldrdeq	r0, [r0], -r6
    3fc0:	00028888 	andeq	r8, r2, r8, lsl #17
    3fc4:	00000070 	andeq	r0, r0, r0, ror r0
    3fc8:	0e9c9c01 	cdpeq	12, 9, cr9, cr12, cr1, {0}
    3fcc:	661a0000 	ldrvs	r0, [sl], -r0
    3fd0:	88010070 	stmdahi	r1, {r4, r5, r6}
    3fd4:	0b770710 	bleq	1dc5c1c <__bss_end+0x1d18944>
    3fd8:	91020000 	mrsls	r0, (UNDEF: 2)
    3fdc:	65721b6c 	ldrbvs	r1, [r2, #-2924]!	; 0xfffff494
    3fe0:	8b010073 	blhi	441b4 <ramdisk+0x16edc>
    3fe4:	04d60a10 	ldrbeq	r0, [r6], #2576	; 0xa10
    3fe8:	91020000 	mrsls	r0, (UNDEF: 2)
    3fec:	73661b77 	cmnvc	r6, #121856	; 0x1dc00
    3ff0:	108c0100 	addne	r0, ip, r0, lsl #2
    3ff4:	00027a09 	andeq	r7, r2, r9, lsl #20
    3ff8:	70910200 	addsvc	r0, r1, r0, lsl #4
    3ffc:	1c691800 	stclne	8, cr1, [r9], #-0
    4000:	36010000 	strcc	r0, [r1], -r0
    4004:	04d60910 	ldrbeq	r0, [r6], #2320	; 0x910
    4008:	87300000 	ldrhi	r0, [r0, -r0]!
    400c:	01580002 	cmpeq	r8, r2
    4010:	9c010000 	stcls	0, cr0, [r1], {-0}
    4014:	00000f05 	andeq	r0, r0, r5, lsl #30
    4018:	0070661a 	rsbseq	r6, r0, sl, lsl r6
    401c:	07103701 	ldreq	r3, [r0, -r1, lsl #14]
    4020:	00000b77 	andeq	r0, r0, r7, ror fp
    4024:	1b649102 	blne	1928434 <__bss_end+0x187b15c>
    4028:	00736572 	rsbseq	r6, r3, r2, ror r5
    402c:	0a103a01 	beq	412838 <__bss_end+0x365560>
    4030:	000004d6 	ldrdeq	r0, [r0], -r6
    4034:	1b779102 	blne	1de8444 <__bss_end+0x1d3b16c>
    4038:	01007366 	tsteq	r0, r6, ror #6
    403c:	7a09103b 	bvc	248130 <__bss_end+0x19ae58>
    4040:	02000002 	andeq	r0, r0, #2
    4044:	741b6891 	ldrvc	r6, [fp], #-2193	; 0xfffff76f
    4048:	3c01006d 	stccc	0, cr0, [r1], {109}	; 0x6d
    404c:	00cc0810 	sbceq	r0, ip, r0, lsl r8
    4050:	91020000 	mrsls	r0, (UNDEF: 2)
    4054:	69641b70 	stmdbvs	r4!, {r4, r5, r6, r8, r9, fp, ip}^
    4058:	3d010072 	stccc	0, cr0, [r1, #-456]	; 0xfffffe38
    405c:	02fe0810 	rscseq	r0, lr, #16, 16	; 0x100000
    4060:	91020000 	mrsls	r0, (UNDEF: 2)
    4064:	4a18006c 	bmi	60421c <__bss_end+0x556f44>
    4068:	0100001b 	tsteq	r0, fp, lsl r0
    406c:	d6090fbd 			; <UNDEFINED> instruction: 0xd6090fbd
    4070:	2c000004 	stccs	0, cr0, [r0], {4}
    4074:	04000282 	streq	r0, [r0], #-642	; 0xfffffd7e
    4078:	01000005 	tsteq	r0, r5
    407c:	000fdd9c 	muleq	pc, ip, sp	; <UNPREDICTABLE>
    4080:	70661a00 	rsbvc	r1, r6, r0, lsl #20
    4084:	0fbe0100 	svceq	0x00be0100
    4088:	000b7707 	andeq	r7, fp, r7, lsl #14
    408c:	54910200 	ldrpl	r0, [r1], #512	; 0x200
    4090:	001c7719 	andseq	r7, ip, r9, lsl r7
    4094:	0fbf0100 	svceq	0x00bf0100
    4098:	000fdd0e 	andeq	sp, pc, lr, lsl #26
    409c:	50910200 	addspl	r0, r1, r0, lsl #4
    40a0:	7774621a 			; <UNDEFINED> instruction: 0x7774621a
    40a4:	0fc00100 	svceq	0x00c00100
    40a8:	00009e07 	andeq	r9, r0, r7, lsl #28
    40ac:	4c910200 	lfmmi	f0, 4, [r1], {0}
    40b0:	0077621a 	rsbseq	r6, r7, sl, lsl r2
    40b4:	080fc101 	stmdaeq	pc, {r0, r8, lr, pc}	; <UNPREDICTABLE>
    40b8:	00000fe4 	andeq	r0, r0, r4, ror #31
    40bc:	1b489102 	blne	12284cc <__bss_end+0x117b1f4>
    40c0:	00736572 	rsbseq	r6, r3, r2, ror r5
    40c4:	0a0fc401 	beq	3f50d0 <__bss_end+0x347df8>
    40c8:	000004d6 	ldrdeq	r0, [r0], -r6
    40cc:	1b779102 	blne	1de84dc <__bss_end+0x1d3b204>
    40d0:	01007366 	tsteq	r0, r6, ror #6
    40d4:	7a090fc5 	bvc	247ff0 <__bss_end+0x19ad18>
    40d8:	02000002 	andeq	r0, r0, #2
    40dc:	86175891 			; <UNDEFINED> instruction: 0x86175891
    40e0:	01000017 	tsteq	r0, r7, lsl r0
    40e4:	cc080fc6 	stcgt	15, cr0, [r8], {198}	; 0xc6
    40e8:	02000000 	andeq	r0, r0, #0
    40ec:	e4177091 	ldr	r7, [r7], #-145	; 0xffffff6f
    40f0:	0100001b 	tsteq	r0, fp, lsl r0
    40f4:	e4080fc7 	str	r0, [r8], #-4039	; 0xfffff039
    40f8:	02000000 	andeq	r0, r0, #0
    40fc:	44175c91 	ldrmi	r5, [r7], #-3217	; 0xfffff36f
    4100:	0100001c 	tsteq	r0, ip, lsl r0
    4104:	9e070fc8 	cdpls	15, 0, cr0, cr7, cr8, {6}
    4108:	02000000 	andeq	r0, r0, #0
    410c:	631b6c91 	tstvs	fp, #37120	; 0x9100
    4110:	c8010063 	stmdagt	r1, {r0, r1, r5, r6}
    4114:	009e0d0f 	addseq	r0, lr, pc, lsl #26
    4118:	91020000 	mrsls	r0, (UNDEF: 2)
    411c:	1b1e1768 	blne	789ec4 <__bss_end+0x6dcbec>
    4120:	c8010000 	stmdagt	r1, {}	; <UNPREDICTABLE>
    4124:	009e110f 	addseq	r1, lr, pc, lsl #2
    4128:	91020000 	mrsls	r0, (UNDEF: 2)
    412c:	19d41760 	ldmibne	r4, {r5, r6, r8, r9, sl, ip}^
    4130:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
    4134:	0fea0e0f 	svceq	0x00ea0e0f
    4138:	91020000 	mrsls	r0, (UNDEF: 2)
    413c:	04060064 	streq	r0, [r6], #-100	; 0xffffff9c
    4140:	00000fe3 	andeq	r0, r0, r3, ror #31
    4144:	9e04061e 	mcrls	6, 0, r0, cr4, cr14, {0}
    4148:	06000000 	streq	r0, [r0], -r0
    414c:	0000b604 	andeq	fp, r0, r4, lsl #12
    4150:	1b071800 	blne	1ca158 <__bss_end+0x11ce80>
    4154:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    4158:	04d6090f 	ldrbeq	r0, [r6], #2319	; 0x90f
    415c:	7e500000 	cdpvc	0, 5, cr0, cr0, cr0, {0}
    4160:	03dc0002 	bicseq	r0, ip, #2
    4164:	9c010000 	stcls	0, cr0, [r1], {-0}
    4168:	000010d8 	ldrdeq	r1, [r0], -r8
    416c:	0070661a 	rsbseq	r6, r0, sl, lsl r6
    4170:	070f5a01 	streq	r5, [pc, -r1, lsl #20]
    4174:	00000b77 	andeq	r0, r0, r7, ror fp
    4178:	194c9102 	stmdbne	ip, {r1, r8, ip, pc}^
    417c:	00001c77 	andeq	r1, r0, r7, ror ip
    4180:	080f5b01 	stmdaeq	pc, {r0, r8, r9, fp, ip, lr}	; <UNPREDICTABLE>
    4184:	00000072 	andeq	r0, r0, r2, ror r0
    4188:	1a489102 	bne	1228598 <__bss_end+0x117b2c0>
    418c:	00727462 	rsbseq	r7, r2, r2, ror #8
    4190:	070f5c01 	streq	r5, [pc, -r1, lsl #24]
    4194:	0000009e 	muleq	r0, lr, r0
    4198:	1a449102 	bne	11285a8 <__bss_end+0x107b2d0>
    419c:	01007262 	tsteq	r0, r2, ror #4
    41a0:	e4080f5d 	str	r0, [r8], #-3933	; 0xfffff0a3
    41a4:	0200000f 	andeq	r0, r0, #15
    41a8:	721b4091 	andsvc	r4, fp, #145	; 0x91
    41ac:	01007365 	tsteq	r0, r5, ror #6
    41b0:	d60a0f60 	strle	r0, [sl], -r0, ror #30
    41b4:	02000004 	andeq	r0, r0, #4
    41b8:	661b7791 			; <UNDEFINED> instruction: 0x661b7791
    41bc:	61010073 	tstvs	r1, r3, ror r0
    41c0:	027a090f 	rsbseq	r0, sl, #245760	; 0x3c000
    41c4:	91020000 	mrsls	r0, (UNDEF: 2)
    41c8:	17861754 			; <UNDEFINED> instruction: 0x17861754
    41cc:	62010000 	andvs	r0, r1, #0
    41d0:	00cc080f 	sbceq	r0, ip, pc, lsl #16
    41d4:	91020000 	mrsls	r0, (UNDEF: 2)
    41d8:	1be41770 	blne	ff909fa0 <_estack+0xf78e9fa0>
    41dc:	63010000 	movwvs	r0, #4096	; 0x1000
    41e0:	00e4080f 	rsceq	r0, r4, pc, lsl #16
    41e4:	91020000 	mrsls	r0, (UNDEF: 2)
    41e8:	1c091758 	stcne	7, cr1, [r9], {88}	; 0x58
    41ec:	64010000 	strvs	r0, [r1], #-0
    41f0:	00d80a0f 	sbcseq	r0, r8, pc, lsl #20
    41f4:	91020000 	mrsls	r0, (UNDEF: 2)
    41f8:	1c981760 	ldcne	7, cr1, [r8], {96}	; 0x60
    41fc:	65010000 	strvs	r0, [r1, #-0]
    4200:	009e070f 	addseq	r0, lr, pc, lsl #14
    4204:	91020000 	mrsls	r0, (UNDEF: 2)
    4208:	63631b6c 	cmnvs	r3, #108, 22	; 0x1b000
    420c:	0f650100 	svceq	0x00650100
    4210:	00009e0d 	andeq	r9, r0, sp, lsl #28
    4214:	68910200 	ldmvs	r1, {r9}
    4218:	001b1e17 	andseq	r1, fp, r7, lsl lr
    421c:	0f650100 	svceq	0x00650100
    4220:	00009e11 	andeq	r9, r0, r1, lsl lr
    4224:	5c910200 	lfmpl	f0, 4, [r1], {0}
    4228:	001c7617 	andseq	r7, ip, r7, lsl r6
    422c:	0f660100 	svceq	0x00660100
    4230:	0002fe08 	andeq	pc, r2, r8, lsl #28
    4234:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4238:	1a891800 	bne	fe24a240 <_estack+0xf622a240>
    423c:	94010000 	strls	r0, [r1], #-0
    4240:	04d6090e 	ldrbeq	r0, [r6], #2318	; 0x90e
    4244:	79880000 	stmibvc	r8, {}	; <UNPREDICTABLE>
    4248:	04c80002 	strbeq	r0, [r8], #2
    424c:	9c010000 	stcls	0, cr0, [r1], {-0}
    4250:	000011b3 			; <UNDEFINED> instruction: 0x000011b3
    4254:	0070661a 	rsbseq	r6, r0, sl, lsl r6
    4258:	070e9501 	streq	r9, [lr, -r1, lsl #10]
    425c:	00000b77 	andeq	r0, r0, r7, ror fp
    4260:	7fa49103 	svcvc	0x00a49103
    4264:	001a9e19 	andseq	r9, sl, r9, lsl lr
    4268:	0e960100 	fmleqs	f0, f6, f0
    426c:	0008070f 	andeq	r0, r8, pc, lsl #14
    4270:	a0910300 	addsge	r0, r1, r0, lsl #6
    4274:	19da197f 	ldmibne	sl, {r0, r1, r2, r3, r4, r5, r6, r8, fp, ip}^
    4278:	97010000 	strls	r0, [r1, -r0]
    427c:	00aa070e 	adceq	r0, sl, lr, lsl #14
    4280:	91030000 	mrsls	r0, (UNDEF: 3)
    4284:	721b7f9f 	andsvc	r7, fp, #636	; 0x27c
    4288:	01007365 	tsteq	r0, r5, ror #6
    428c:	d60a0e9a 			; <UNDEFINED> instruction: 0xd60a0e9a
    4290:	02000004 	andeq	r0, r0, #4
    4294:	641b7791 	ldrvs	r7, [fp], #-1937	; 0xfffff86f
    4298:	9b01006a 	blls	44448 <ramdisk+0x17170>
    429c:	0377060e 	cmneq	r7, #14680064	; 0xe00000
    42a0:	91030000 	mrsls	r0, (UNDEF: 3)
    42a4:	661b7fb0 			; <UNDEFINED> instruction: 0x661b7fb0
    42a8:	9c010073 	stcls	0, cr0, [r1], {115}	; 0x73
    42ac:	027a090e 	rsbseq	r0, sl, #229376	; 0x38000
    42b0:	91030000 	mrsls	r0, (UNDEF: 3)
    42b4:	631b7fac 	tstvs	fp, #172, 30	; 0x2b0
    42b8:	9e01006c 	cdpls	0, 0, cr0, cr1, cr12, {3}
    42bc:	00cc080e 	sbceq	r0, ip, lr, lsl #16
    42c0:	91020000 	mrsls	r0, (UNDEF: 2)
    42c4:	63621b64 	cmnvs	r2, #100, 22	; 0x19000
    42c8:	9e010073 	mcrls	0, 0, r0, cr1, cr3, {3}
    42cc:	00cc0c0e 	sbceq	r0, ip, lr, lsl #24
    42d0:	91020000 	mrsls	r0, (UNDEF: 2)
    42d4:	1786175c 			; <UNDEFINED> instruction: 0x1786175c
    42d8:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    42dc:	00cc110e 	sbceq	r1, ip, lr, lsl #2
    42e0:	91020000 	mrsls	r0, (UNDEF: 2)
    42e4:	6d741b70 	vldmdbvs	r4!, {d17-<overflow reg d72>}
    42e8:	0e9e0100 	fmleqe	f0, f6, f0
    42ec:	0000cc17 	andeq	ip, r0, r7, lsl ip
    42f0:	68910200 	ldmvs	r1, {r9}
    42f4:	0063731b 	rsbeq	r7, r3, fp, lsl r3
    42f8:	080e9f01 	stmdaeq	lr, {r0, r8, r9, sl, fp, ip, pc}
    42fc:	000000e4 	andeq	r0, r0, r4, ror #1
    4300:	1b609102 	blne	1828710 <__bss_end+0x177b438>
    4304:	0073666f 	rsbseq	r6, r3, pc, ror #12
    4308:	0a0ea001 	beq	3ac314 <__bss_end+0x2ff03c>
    430c:	000000d8 	ldrdeq	r0, [r0], -r8
    4310:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    4314:	001c2818 	andseq	r2, ip, r8, lsl r8
    4318:	0e580100 	rdfeqe	f0, f0, f0
    431c:	0004d609 	andeq	sp, r4, r9, lsl #12
    4320:	02788c00 	rsbseq	r8, r8, #0, 24
    4324:	0000fc00 	andeq	pc, r0, r0, lsl #24
    4328:	3d9c0100 	ldfccs	f0, [ip]
    432c:	1a000012 	bne	437c <_start-0xbc84>
    4330:	01007366 	tsteq	r0, r6, ror #6
    4334:	7a090e59 	bvc	247ca0 <__bss_end+0x19a9c8>
    4338:	02000002 	andeq	r0, r0, #2
    433c:	9e196491 	cfcmpsls	r6, mvf9, mvf1
    4340:	0100001a 	tsteq	r0, sl, lsl r0
    4344:	070f0e5a 	smlsdeq	pc, sl, lr, r0	; <UNPREDICTABLE>
    4348:	02000008 	andeq	r0, r0, #8
    434c:	6f1a6091 	svcvs	0x001a6091
    4350:	01007470 	tsteq	r0, r0, ror r4
    4354:	aa070e5b 	bge	1c7cc8 <__bss_end+0x11a9f0>
    4358:	02000000 	andeq	r0, r0, #0
    435c:	631b5f91 	tstvs	fp, #580	; 0x244
    4360:	01007366 	tsteq	r0, r6, ror #6
    4364:	7a090e5e 	bvc	247ce4 <__bss_end+0x19aa0c>
    4368:	02000002 	andeq	r0, r0, #2
    436c:	761b7091 			; <UNDEFINED> instruction: 0x761b7091
    4370:	01006c6f 	tsteq	r0, pc, ror #24
    4374:	25060e5f 	strcs	r0, [r6, #-3679]	; 0xfffff1a1
    4378:	02000000 	andeq	r0, r0, #0
    437c:	721b7491 	andsvc	r7, fp, #-1862270976	; 0x91000000
    4380:	01007365 	tsteq	r0, r5, ror #6
    4384:	d60a0e60 	strle	r0, [sl], -r0, ror #28
    4388:	02000004 	andeq	r0, r0, #4
    438c:	721b6f91 	andsvc	r6, fp, #580	; 0x244
    4390:	61010070 	tstvs	r1, r0, ror r0
    4394:	08070f0e 	stmdaeq	r7, {r1, r2, r3, r8, r9, sl, fp}
    4398:	91020000 	mrsls	r0, (UNDEF: 2)
    439c:	411d0068 	tstmi	sp, r8, rrx
    43a0:	0100001d 	tsteq	r0, sp, lsl r0
    43a4:	d6100e2c 	ldrle	r0, [r0], -ip, lsr #28
    43a8:	c4000004 	strgt	r0, [r0], #-4
    43ac:	c8000277 	stmdagt	r0, {r0, r1, r2, r4, r5, r6, r9}
    43b0:	01000000 	mrseq	r0, (UNDEF: 0)
    43b4:	0012899c 	mulseq	r2, ip, r9
    43b8:	626f1a00 	rsbvs	r1, pc, #0, 20
    43bc:	2d01006a 	stccs	0, cr0, [r1, #-424]	; 0xfffffe58
    43c0:	12890b0e 	addne	r0, r9, #14336	; 0x3800
    43c4:	91020000 	mrsls	r0, (UNDEF: 2)
    43c8:	66721a6c 	ldrbtvs	r1, [r2], -ip, ror #20
    43cc:	2e010073 	mcrcs	0, 0, r0, cr1, cr3, {3}
    43d0:	0c4d0a0e 	mcrreq	10, 0, r0, sp, cr14
    43d4:	91020000 	mrsls	r0, (UNDEF: 2)
    43d8:	65721b68 	ldrbvs	r1, [r2, #-2920]!	; 0xfffff498
    43dc:	31010073 	tstcc	r1, r3, ror r0
    43e0:	04d60a0e 	ldrbeq	r0, [r6], #2574	; 0xa0e
    43e4:	91020000 	mrsls	r0, (UNDEF: 2)
    43e8:	04060077 	streq	r0, [r6], #-119	; 0xffffff89
    43ec:	00000280 	andeq	r0, r0, r0, lsl #5
    43f0:	0019f11d 	andseq	pc, r9, sp, lsl r1	; <UNPREDICTABLE>
    43f4:	0d490100 	stfeqe	f0, [r9, #-0]
    43f8:	0004d610 	andeq	sp, r4, r0, lsl r6
    43fc:	0270a400 	rsbseq	sl, r0, #0, 8
    4400:	00072000 	andeq	r2, r7, r0
    4404:	8b9c0100 	blhi	fe70480c <_estack+0xf66e480c>
    4408:	19000013 	stmdbne	r0, {r0, r1, r4}
    440c:	00001a9e 	muleq	r0, lr, sl
    4410:	100d4a01 	andne	r4, sp, r1, lsl #20
    4414:	0000138b 	andeq	r1, r0, fp, lsl #7
    4418:	1a449102 	bne	1128828 <__bss_end+0x107b550>
    441c:	00736672 	rsbseq	r6, r3, r2, ror r6
    4420:	0a0d4b01 	beq	35702c <__bss_end+0x2a9d54>
    4424:	00000c4d 	andeq	r0, r0, sp, asr #24
    4428:	19409102 	stmdbne	r0, {r1, r8, ip, pc}^
    442c:	000019da 	ldrdeq	r1, [r0], -sl
    4430:	070d4c01 	streq	r4, [sp, -r1, lsl #24]
    4434:	000000aa 	andeq	r0, r0, sl, lsr #1
    4438:	7fbf9103 	svcvc	0x00bf9103
    443c:	6c6f761b 	stclvs	6, cr7, [pc], #-108	; 43d8 <_start-0xbc28>
    4440:	0d4f0100 	stfeqe	f0, [pc, #-0]	; 4448 <_start-0xbbb8>
    4444:	00002506 	andeq	r2, r0, r6, lsl #10
    4448:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    444c:	0073661b 	rsbseq	r6, r3, fp, lsl r6
    4450:	090d5001 	stmdbeq	sp, {r0, ip, lr}
    4454:	0000027a 	andeq	r0, r0, sl, ror r2
    4458:	17609102 	strbne	r9, [r0, -r2, lsl #2]!
    445c:	00001d23 	andeq	r1, r0, r3, lsr #26
    4460:	0a0d5101 	beq	35886c <__bss_end+0x2ab594>
    4464:	000004e3 	andeq	r0, r0, r3, ror #9
    4468:	175f9102 	ldrbne	r9, [pc, -r2, lsl #2]
    446c:	00001c7c 	andeq	r1, r0, ip, ror ip
    4470:	080d5201 	stmdaeq	sp, {r0, r9, ip, lr}
    4474:	000000e4 	andeq	r0, r0, r4, ror #1
    4478:	17589102 	ldrbne	r9, [r8, -r2, lsl #2]
    447c:	00001b0e 	andeq	r1, r0, lr, lsl #22
    4480:	080d5301 	stmdaeq	sp, {r0, r8, r9, ip, lr}
    4484:	000000cc 	andeq	r0, r0, ip, asr #1
    4488:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
    448c:	00001d12 	andeq	r1, r0, r2, lsl sp
    4490:	0f0d5301 	svceq	0x000d5301
    4494:	000000cc 	andeq	r0, r0, ip, asr #1
    4498:	17509102 	ldrbne	r9, [r0, -r2, lsl #2]
    449c:	00001b34 	andeq	r1, r0, r4, lsr fp
    44a0:	170d5301 	strne	r5, [sp, -r1, lsl #6]
    44a4:	000000cc 	andeq	r0, r0, ip, asr #1
    44a8:	17709102 	ldrbne	r9, [r0, -r2, lsl #2]!
    44ac:	00001a16 	andeq	r1, r0, r6, lsl sl
    44b0:	1f0d5301 	svcne	0x000d5301
    44b4:	000000cc 	andeq	r0, r0, ip, asr #1
    44b8:	174c9102 	strbne	r9, [ip, -r2, lsl #2]
    44bc:	00001b5e 	andeq	r1, r0, lr, asr fp
    44c0:	260d5301 	strcs	r5, [sp], -r1, lsl #6
    44c4:	000000cc 	andeq	r0, r0, ip, asr #1
    44c8:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    44cc:	00001d05 	andeq	r1, r0, r5, lsl #26
    44d0:	070d5401 	streq	r5, [sp, -r1, lsl #8]
    44d4:	000000bb 	strheq	r0, [r0], -fp
    44d8:	1b569102 	blne	15a88e8 <__bss_end+0x14fb610>
    44dc:	00746d66 	rsbseq	r6, r4, r6, ror #26
    44e0:	070d5501 	streq	r5, [sp, -r1, lsl #10]
    44e4:	0000009e 	muleq	r0, lr, r0
    44e8:	00689102 	rsbeq	r9, r8, r2, lsl #2
    44ec:	08070406 	stmdaeq	r7, {r1, r2, sl}
    44f0:	831d0000 	tsthi	sp, #0
    44f4:	0100001b 	tsteq	r0, fp, lsl r0
    44f8:	9e0d0d13 	mcrls	13, 0, r0, cr13, cr3, {0}
    44fc:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
    4500:	5c00026f 	sfmpl	f0, 4, [r0], {111}	; 0x6f
    4504:	01000001 	tsteq	r0, r1
    4508:	0013fa9c 	mulseq	r3, ip, sl
    450c:	73661a00 	cmnvc	r6, #0, 20
    4510:	0d140100 	ldfeqs	f0, [r4, #-0]
    4514:	00027a09 	andeq	r7, r2, r9, lsl #20
    4518:	5c910200 	lfmpl	f0, 4, [r1], {0}
    451c:	0019b119 	andseq	fp, r9, r9, lsl r1
    4520:	0d150100 	ldfeqs	f0, [r5, #-0]
    4524:	00009e07 	andeq	r9, r0, r7, lsl #28
    4528:	58910200 	ldmpl	r1, {r9}
    452c:	746d661b 	strbtvc	r6, [sp], #-1563	; 0xfffff9e5
    4530:	0d180100 	ldfeqs	f0, [r8, #-0]
    4534:	00009e07 	andeq	r9, r0, r7, lsl #28
    4538:	70910200 	addsvc	r0, r1, r0, lsl #4
    453c:	0100691b 	tsteq	r0, fp, lsl r9
    4540:	9e0c0d18 	mcrls	13, 0, r0, cr12, cr8, {0}
    4544:	02000000 	andeq	r0, r0, #0
    4548:	3c177491 	cfldrscc	mvf7, [r7], {145}	; 0x91
    454c:	0100001a 	tsteq	r0, sl, lsl r0
    4550:	fa080d19 	blx	2079bc <__bss_end+0x15a6e4>
    4554:	02000013 	andeq	r0, r0, #19
    4558:	0b006091 	bleq	1c7a4 <__module_entries_end+0xc700>
    455c:	000000cc 	andeq	r0, r0, ip, asr #1
    4560:	0000140a 	andeq	r1, r0, sl, lsl #8
    4564:	00002c0f 	andeq	r2, r0, pc, lsl #24
    4568:	1d000300 	stcne	3, cr0, [r0, #-0]
    456c:	00001ad4 	ldrdeq	r1, [r0], -r4
    4570:	0d0ceb01 	vstreq	d14, [ip, #-4]
    4574:	0000009e 	muleq	r0, lr, r0
    4578:	00026d04 	andeq	r6, r2, r4, lsl #26
    457c:	00000244 	andeq	r0, r0, r4, asr #4
    4580:	14719c01 	ldrbtne	r9, [r1], #-3073	; 0xfffff3ff
    4584:	661a0000 	ldrvs	r0, [sl], -r0
    4588:	ec010073 	stc	0, cr0, [r1], {115}	; 0x73
    458c:	027a090c 	rsbseq	r0, sl, #12, 18	; 0x30000
    4590:	91020000 	mrsls	r0, (UNDEF: 2)
    4594:	1be4196c 	blne	ff90ab4c <_estack+0xf78eab4c>
    4598:	ed010000 	stc	0, cr0, [r1, #-0]
    459c:	00e4080c 	rsceq	r0, r4, ip, lsl #16
    45a0:	91020000 	mrsls	r0, (UNDEF: 2)
    45a4:	00771b68 	rsbseq	r1, r7, r8, ror #22
    45a8:	070cf001 	streq	pc, [ip, -r1]
    45ac:	000000bb 	strheq	r0, [r0], -fp
    45b0:	17729102 	ldrbne	r9, [r2, -r2, lsl #2]!
    45b4:	00001c49 	andeq	r1, r0, r9, asr #24
    45b8:	0a0cf001 	beq	3405c4 <__bss_end+0x2932ec>
    45bc:	000000bb 	strheq	r0, [r0], -fp
    45c0:	1b769102 	blne	1da89d0 <__bss_end+0x1cfb6f8>
    45c4:	f1010062 	setend	le
    45c8:	00aa070c 	adceq	r0, sl, ip, lsl #14
    45cc:	91020000 	mrsls	r0, (UNDEF: 2)
    45d0:	c71f0075 			; <UNDEFINED> instruction: 0xc71f0075
    45d4:	0100001c 	tsteq	r0, ip, lsl r0
    45d8:	250c0c58 	strcs	r0, [ip, #-3160]	; 0xfffff3a8
    45dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    45e0:	f800026c 			; <UNDEFINED> instruction: 0xf800026c
    45e4:	01000000 	mrseq	r0, (UNDEF: 0)
    45e8:	0014d99c 	mulseq	r4, ip, r9
    45ec:	1a9e1900 	bne	fe78a9f4 <_estack+0xf676a9f4>
    45f0:	59010000 	stmdbpl	r1, {}	; <UNPREDICTABLE>
    45f4:	138b100c 	orrne	r1, fp, #12
    45f8:	91020000 	mrsls	r0, (UNDEF: 2)
    45fc:	70741b64 	rsbsvc	r1, r4, r4, ror #22
    4600:	0c5c0100 	ldfeqe	f0, [ip], {-0}
    4604:	0008070f 	andeq	r0, r8, pc, lsl #14
    4608:	6c910200 	lfmvs	f0, 4, [r1], {0}
    460c:	0074741b 	rsbseq	r7, r4, fp, lsl r4
    4610:	0f0c5d01 	svceq	0x000c5d01
    4614:	00000807 	andeq	r0, r0, r7, lsl #16
    4618:	1b749102 	blne	1d28a28 <__bss_end+0x1c7b750>
    461c:	00726863 	rsbseq	r6, r2, r3, ror #16
    4620:	080c5e01 	stmdaeq	ip, {r0, r9, sl, fp, ip, lr}
    4624:	000000f5 	strdeq	r0, [r0], -r5
    4628:	1b6b9102 	blne	1ae8a38 <__bss_end+0x1a3b760>
    462c:	5f010069 	svcpl	0x00010069
    4630:	0025060c 	eoreq	r0, r5, ip, lsl #12
    4634:	91020000 	mrsls	r0, (UNDEF: 2)
    4638:	971d0070 			; <UNDEFINED> instruction: 0x971d0070
    463c:	0100001a 	tsteq	r0, sl, lsl r0
    4640:	d6100c01 	ldrle	r0, [r0], -r1, lsl #24
    4644:	7c000004 	stcvc	0, cr0, [r0], {4}
    4648:	9000026a 	andls	r0, r0, sl, ror #4
    464c:	01000001 	tsteq	r0, r1
    4650:	0015429c 	mulseq	r5, ip, r2
    4654:	70641a00 	rsbvc	r1, r4, r0, lsl #20
    4658:	0c020100 	stfeqs	f0, [r2], {-0}
    465c:	000d0e07 	andeq	r0, sp, r7, lsl #28
    4660:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4664:	001a9e19 	andseq	r9, sl, r9, lsl lr
    4668:	0c030100 	stfeqs	f0, [r3], {-0}
    466c:	0008070f 	andeq	r0, r8, pc, lsl #14
    4670:	60910200 	addsvs	r0, r1, r0, lsl #4
    4674:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    4678:	0c060100 	stfeqs	f0, [r6], {-0}
    467c:	0004d60a 	andeq	sp, r4, sl, lsl #12
    4680:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    4684:	00736e1b 	rsbseq	r6, r3, fp, lsl lr
    4688:	070c0701 	streq	r0, [ip, -r1, lsl #14]
    468c:	000000aa 	andeq	r0, r0, sl, lsr #1
    4690:	1b6f9102 	blne	1be8aa0 <__bss_end+0x1b3b7c8>
    4694:	01007366 	tsteq	r0, r6, ror #6
    4698:	7a090c08 	bvc	2476c0 <__bss_end+0x19a3e8>
    469c:	02000002 	andeq	r0, r0, #2
    46a0:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    46a4:	00001c5d 	andeq	r1, r0, sp, asr ip
    46a8:	100b3501 	andne	r3, fp, r1, lsl #10
    46ac:	000004d6 	ldrdeq	r0, [r0], -r6
    46b0:	0002678c 	andeq	r6, r2, ip, lsl #15
    46b4:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    46b8:	15e39c01 	strbne	r9, [r3, #3073]!	; 0xc01
    46bc:	641a0000 	ldrvs	r0, [sl], #-0
    46c0:	36010070 			; <UNDEFINED> instruction: 0x36010070
    46c4:	0d0e070b 	stceq	7, cr0, [lr, #-44]	; 0xffffffd4
    46c8:	91020000 	mrsls	r0, (UNDEF: 2)
    46cc:	1a9e1954 	bne	fe78ac24 <_estack+0xf676ac24>
    46d0:	37010000 	strcc	r0, [r1, -r0]
    46d4:	138b100b 	orrne	r1, fp, #11
    46d8:	91020000 	mrsls	r0, (UNDEF: 2)
    46dc:	00631b50 	rsbeq	r1, r3, r0, asr fp
    46e0:	070bba01 	streq	fp, [fp, -r1, lsl #20]
    46e4:	000000aa 	andeq	r0, r0, sl, lsr #1
    46e8:	1b779102 	blne	1de8af8 <__bss_end+0x1d3b820>
    46ec:	ba010064 	blt	44884 <ramdisk+0x175ac>
    46f0:	00aa0a0b 	adceq	r0, sl, fp, lsl #20
    46f4:	91020000 	mrsls	r0, (UNDEF: 2)
    46f8:	66731b5f 			; <UNDEFINED> instruction: 0x66731b5f
    46fc:	bb01006e 	bllt	448bc <ramdisk+0x175e4>
    4700:	02fe080b 	rscseq	r0, lr, #720896	; 0xb0000
    4704:	91020000 	mrsls	r0, (UNDEF: 2)
    4708:	696e1b60 	stmdbvs	lr!, {r5, r6, r8, r9, fp, ip}^
    470c:	0bbc0100 	bleq	fef04b14 <_estack+0xf6ee4b14>
    4710:	00009e07 	andeq	r9, r0, r7, lsl #28
    4714:	70910200 	addsvc	r0, r1, r0, lsl #4
    4718:	0069731b 	rsbeq	r7, r9, fp, lsl r3
    471c:	0b0bbc01 	bleq	2f3728 <__bss_end+0x246450>
    4720:	0000009e 	muleq	r0, lr, r0
    4724:	1b6c9102 	blne	1b28b34 <__bss_end+0x1a7b85c>
    4728:	bc010069 	stclt	0, cr0, [r1], {105}	; 0x69
    472c:	009e0f0b 	addseq	r0, lr, fp, lsl #30
    4730:	91020000 	mrsls	r0, (UNDEF: 2)
    4734:	00701b68 	rsbseq	r1, r0, r8, ror #22
    4738:	0e0bbd01 	cdpeq	13, 0, cr11, cr11, cr1, {0}
    473c:	00000080 	andeq	r0, r0, r0, lsl #1
    4740:	00649102 	rsbeq	r9, r4, r2, lsl #2
    4744:	001abf20 	andseq	fp, sl, r0, lsr #30
    4748:	0a4f0100 	beq	13c4b50 <__bss_end+0x1317878>
    474c:	0266040d 	rsbeq	r0, r6, #218103808	; 0xd000000
    4750:	00018800 	andeq	r8, r1, r0, lsl #16
    4754:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
    4758:	1a000016 	bne	47b8 <_start-0xb848>
    475c:	01007064 	tsteq	r0, r4, rrx
    4760:	0e070a50 			; <UNDEFINED> instruction: 0x0e070a50
    4764:	0200000d 	andeq	r0, r0, #13
    4768:	661a6491 			; <UNDEFINED> instruction: 0x661a6491
    476c:	01006f6e 	tsteq	r0, lr, ror #30
    4770:	ae0b0a51 			; <UNDEFINED> instruction: 0xae0b0a51
    4774:	0200000c 	andeq	r0, r0, #12
    4778:	731b6091 	tstvc	fp, #145	; 0x91
    477c:	54010069 	strpl	r0, [r1], #-105	; 0xffffff97
    4780:	009e070a 	addseq	r0, lr, sl, lsl #14
    4784:	91020000 	mrsls	r0, (UNDEF: 2)
    4788:	69641b74 	stmdbvs	r4!, {r2, r4, r5, r6, r8, r9, fp, ip}^
    478c:	0a540100 	beq	1504b94 <__bss_end+0x14578bc>
    4790:	00009e0b 	andeq	r9, r0, fp, lsl #28
    4794:	70910200 	addsvc	r0, r1, r0, lsl #4
    4798:	0100631b 	tsteq	r0, fp, lsl r3
    479c:	f5080a5b 			; <UNDEFINED> instruction: 0xf5080a5b
    47a0:	02000000 	andeq	r0, r0, #0
    47a4:	1d006f91 	stcne	15, cr6, [r0, #-580]	; 0xfffffdbc
    47a8:	00001998 	muleq	r0, r8, r9
    47ac:	100a2101 	andne	r2, sl, r1, lsl #2
    47b0:	000004d6 	ldrdeq	r0, [r0], -r6
    47b4:	00026594 	muleq	r2, r4, r5
    47b8:	00000070 	andeq	r0, r0, r0, ror r0
    47bc:	16909c01 	ldrne	r9, [r0], r1, lsl #24
    47c0:	641a0000 	ldrvs	r0, [sl], #-0
    47c4:	22010070 	andcs	r0, r1, #112	; 0x70
    47c8:	0d0e070a 	stceq	7, cr0, [lr, #-40]	; 0xffffffd8
    47cc:	91020000 	mrsls	r0, (UNDEF: 2)
    47d0:	65721b6c 	ldrbvs	r1, [r2, #-2924]!	; 0xfffff494
    47d4:	25010073 	strcs	r0, [r1, #-115]	; 0xffffff8d
    47d8:	04d60a0a 	ldrbeq	r0, [r6], #2570	; 0xa0a
    47dc:	91020000 	mrsls	r0, (UNDEF: 2)
    47e0:	73661b73 	cmnvc	r6, #117760	; 0x1cc00
    47e4:	0a260100 	beq	984bec <__bss_end+0x8d7914>
    47e8:	00027a09 	andeq	r7, r2, r9, lsl #20
    47ec:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    47f0:	1d281d00 	stcne	13, cr1, [r8, #-0]
    47f4:	b7010000 	strlt	r0, [r1, -r0]
    47f8:	04d61009 	ldrbeq	r1, [r6], #9
    47fc:	64e00000 	strbtvs	r0, [r0], #0
    4800:	00b40002 	adcseq	r0, r4, r2
    4804:	9c010000 	stcls	0, cr0, [r1], {-0}
    4808:	000016da 	ldrdeq	r1, [r0], -sl
    480c:	0070641a 	rsbseq	r6, r0, sl, lsl r4
    4810:	0709b801 	streq	fp, [r9, -r1, lsl #16]
    4814:	00000d0e 	andeq	r0, r0, lr, lsl #26
    4818:	1b6c9102 	blne	1b28c28 <__bss_end+0x1a7b950>
    481c:	00736572 	rsbseq	r6, r3, r2, ror r5
    4820:	0a09bb01 	beq	27342c <__bss_end+0x1c6154>
    4824:	000004d6 	ldrdeq	r0, [r0], -r6
    4828:	1b779102 	blne	1de8c38 <__bss_end+0x1d3b960>
    482c:	01007366 	tsteq	r0, r6, ror #6
    4830:	7a0909bc 	bvc	246f28 <__bss_end+0x199c50>
    4834:	02000002 	andeq	r0, r0, #2
    4838:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    483c:	0000198f 	andeq	r1, r0, pc, lsl #19
    4840:	10096501 	andne	r6, r9, r1, lsl #10
    4844:	000004d6 	ldrdeq	r0, [r0], -r6
    4848:	000263a8 	andeq	r6, r2, r8, lsr #7
    484c:	00000138 	andeq	r0, r0, r8, lsr r1
    4850:	17329c01 	ldrne	r9, [r2, -r1, lsl #24]!
    4854:	641a0000 	ldrvs	r0, [sl], #-0
    4858:	66010070 			; <UNDEFINED> instruction: 0x66010070
    485c:	0d0e0709 	stceq	7, cr0, [lr, #-36]	; 0xffffffdc
    4860:	91020000 	mrsls	r0, (UNDEF: 2)
    4864:	65721b64 	ldrbvs	r1, [r2, #-2916]!	; 0xfffff49c
    4868:	69010073 	stmdbvs	r1, {r0, r1, r4, r5, r6}
    486c:	04d60a09 	ldrbeq	r0, [r6], #2569	; 0xa09
    4870:	91020000 	mrsls	r0, (UNDEF: 2)
    4874:	73661b77 	cmnvc	r6, #121856	; 0x1dc00
    4878:	096a0100 	stmdbeq	sl!, {r8}^
    487c:	00027a09 	andeq	r7, r2, r9, lsl #20
    4880:	70910200 	addsvc	r0, r1, r0, lsl #4
    4884:	0100631b 	tsteq	r0, fp, lsl r3
    4888:	aa07096b 	bge	1c6e3c <__bss_end+0x119b64>
    488c:	02000000 	andeq	r0, r0, #0
    4890:	1d006f91 	stcne	15, cr6, [r0, #-580]	; 0xfffffdbc
    4894:	00001b2b 	andeq	r1, r0, fp, lsr #22
    4898:	10091701 	andne	r1, r9, r1, lsl #14
    489c:	000004d6 	ldrdeq	r0, [r0], -r6
    48a0:	0002624c 	andeq	r6, r2, ip, asr #4
    48a4:	0000015c 	andeq	r0, r0, ip, asr r1
    48a8:	17aa9c01 	strne	r9, [sl, r1, lsl #24]!
    48ac:	641a0000 	ldrvs	r0, [sl], #-0
    48b0:	18010070 	stmdane	r1, {r4, r5, r6}
    48b4:	0d0e0709 	stceq	7, cr0, [lr, #-36]	; 0xffffffdc
    48b8:	91020000 	mrsls	r0, (UNDEF: 2)
    48bc:	6f761a64 	svcvs	0x00761a64
    48c0:	1901006c 	stmdbne	r1, {r2, r3, r5, r6}
    48c4:	00250609 	eoreq	r0, r5, r9, lsl #12
    48c8:	91020000 	mrsls	r0, (UNDEF: 2)
    48cc:	65721b60 	ldrbvs	r1, [r2, #-2912]!	; 0xfffff4a0
    48d0:	1c010073 	stcne	0, cr0, [r1], {115}	; 0x73
    48d4:	04d60a09 	ldrbeq	r0, [r6], #2569	; 0xa09
    48d8:	91020000 	mrsls	r0, (UNDEF: 2)
    48dc:	73661b77 	cmnvc	r6, #121856	; 0x1dc00
    48e0:	091d0100 	ldmdbeq	sp, {r8}
    48e4:	00027a09 	andeq	r7, r2, r9, lsl #20
    48e8:	70910200 	addsvc	r0, r1, r0, lsl #4
    48ec:	00179817 	andseq	r9, r7, r7, lsl r8
    48f0:	091e0100 	ldmdbeq	lr, {r8}
    48f4:	0000aa07 	andeq	sl, r0, r7, lsl #20
    48f8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
    48fc:	0100621b 	tsteq	r0, fp, lsl r2
    4900:	aa0d091e 	bge	346d80 <__bss_end+0x299aa8>
    4904:	02000000 	andeq	r0, r0, #0
    4908:	20006f91 	mulcs	r0, r1, pc	; <UNPREDICTABLE>
    490c:	00001a72 	andeq	r1, r0, r2, ror sl
    4910:	0d075b01 	vstreq	d5, [r7, #-4]
    4914:	000261dc 	ldrdeq	r6, [r2], -ip
    4918:	00000070 	andeq	r0, r0, r0, ror r0
    491c:	17f09c01 	ldrbne	r9, [r0, r1, lsl #24]!
    4920:	661a0000 	ldrvs	r0, [sl], -r0
    4924:	5c010073 	stcpl	0, cr0, [r1], {115}	; 0x73
    4928:	027a0907 	rsbseq	r0, sl, #114688	; 0x1c000
    492c:	91020000 	mrsls	r0, (UNDEF: 2)
    4930:	69641a74 	stmdbvs	r4!, {r2, r4, r5, r6, r9, fp, ip}^
    4934:	5d010072 	stcpl	0, cr0, [r1, #-456]	; 0xfffffe38
    4938:	02fe0807 	rscseq	r0, lr, #458752	; 0x70000
    493c:	91020000 	mrsls	r0, (UNDEF: 2)
    4940:	6c631a70 			; <UNDEFINED> instruction: 0x6c631a70
    4944:	075e0100 	ldrbeq	r0, [lr, -r0, lsl #2]
    4948:	0000cc08 	andeq	ip, r0, r8, lsl #24
    494c:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4950:	1cae1d00 	stcne	13, cr1, [lr]
    4954:	4a010000 	bmi	4495c <ramdisk+0x17684>
    4958:	00cc0e07 	sbceq	r0, ip, r7, lsl #28
    495c:	616c0000 	cmnvs	ip, r0
    4960:	00700002 	rsbseq	r0, r0, r2
    4964:	9c010000 	stcls	0, cr0, [r1], {-0}
    4968:	0000183a 	andeq	r1, r0, sl, lsr r8
    496c:	0073661a 	rsbseq	r6, r3, sl, lsl r6
    4970:	09074b01 	stmdbeq	r7, {r0, r8, r9, fp, lr}
    4974:	0000027a 	andeq	r0, r0, sl, ror r2
    4978:	1a6c9102 	bne	1b28d88 <__bss_end+0x1a7bab0>
    497c:	00726964 	rsbseq	r6, r2, r4, ror #18
    4980:	0e074c01 	cdpeq	12, 0, cr4, cr7, cr1, {0}
    4984:	00000fea 	andeq	r0, r0, sl, ror #31
    4988:	1b689102 	blne	1a28d98 <__bss_end+0x197bac0>
    498c:	01006c63 	tsteq	r0, r3, ror #24
    4990:	cc08074f 	stcgt	7, cr0, [r8], {79}	; 0x4f
    4994:	02000000 	andeq	r0, r0, #0
    4998:	1d007491 	cfstrsne	mvf7, [r0, #-580]	; 0xfffffdbc
    499c:	00001c10 	andeq	r1, r0, r0, lsl ip
    49a0:	10072001 	andne	r2, r7, r1
    49a4:	000004d6 	ldrdeq	r0, [r0], -r6
    49a8:	00026060 	andeq	r6, r2, r0, rrx
    49ac:	0000010c 	andeq	r0, r0, ip, lsl #2
    49b0:	18a29c01 	stmiane	r2!, {r0, sl, fp, ip, pc}
    49b4:	641a0000 	ldrvs	r0, [sl], #-0
    49b8:	21010070 	tstcs	r1, r0, ror r0
    49bc:	0d0e0707 	stceq	7, cr0, [lr, #-28]	; 0xffffffe4
    49c0:	91020000 	mrsls	r0, (UNDEF: 2)
    49c4:	1a641964 	bne	190af5c <__bss_end+0x185dc84>
    49c8:	22010000 	andcs	r0, r1, #0
    49cc:	009e0707 	addseq	r0, lr, r7, lsl #14
    49d0:	91020000 	mrsls	r0, (UNDEF: 2)
    49d4:	65721b60 	ldrbvs	r1, [r2, #-2912]!	; 0xfffff4a0
    49d8:	25010073 	strcs	r0, [r1, #-115]	; 0xffffff8d
    49dc:	04d60a07 	ldrbeq	r0, [r6], #2567	; 0xa07
    49e0:	91020000 	mrsls	r0, (UNDEF: 2)
    49e4:	006e1b77 	rsbeq	r1, lr, r7, ror fp
    49e8:	07072601 	streq	r2, [r7, -r1, lsl #12]
    49ec:	0000009e 	muleq	r0, lr, r0
    49f0:	1b709102 	blne	1c28e00 <__bss_end+0x1b7bb28>
    49f4:	01007366 	tsteq	r0, r6, ror #6
    49f8:	7a090727 	bvc	24669c <__bss_end+0x1993c4>
    49fc:	02000002 	andeq	r0, r0, #2
    4a00:	1d006c91 	stcne	12, cr6, [r0, #-580]	; 0xfffffdbc
    4a04:	00001c35 	andeq	r1, r0, r5, lsr ip
    4a08:	1006e301 	andne	lr, r6, r1, lsl #6
    4a0c:	000004d6 	ldrdeq	r0, [r0], -r6
    4a10:	00025e2c 	andeq	r5, r2, ip, lsr #28
    4a14:	00000234 	andeq	r0, r0, r4, lsr r2
    4a18:	190c9c01 	stmdbne	ip, {r0, sl, fp, ip, pc}
    4a1c:	641a0000 	ldrvs	r0, [sl], #-0
    4a20:	e4010070 	str	r0, [r1], #-112	; 0xffffff90
    4a24:	0d0e0706 	stceq	7, cr0, [lr, #-24]	; 0xffffffe8
    4a28:	91020000 	mrsls	r0, (UNDEF: 2)
    4a2c:	1d0a1964 	vstrne.16	s2, [sl, #-200]	; 0xffffff38	; <UNPREDICTABLE>
    4a30:	e5010000 	str	r0, [r1, #-0]
    4a34:	00250606 	eoreq	r0, r5, r6, lsl #12
    4a38:	91020000 	mrsls	r0, (UNDEF: 2)
    4a3c:	666f1b60 	strbtvs	r1, [pc], -r0, ror #22
    4a40:	e8010073 	stmda	r1, {r0, r1, r4, r5, r6}
    4a44:	00cc0806 	sbceq	r0, ip, r6, lsl #16
    4a48:	91020000 	mrsls	r0, (UNDEF: 2)
    4a4c:	1786176c 	strne	r1, [r6, ip, ror #14]
    4a50:	e8010000 	stmda	r1, {}	; <UNPREDICTABLE>
    4a54:	00cc0d06 	sbceq	r0, ip, r6, lsl #26
    4a58:	91020000 	mrsls	r0, (UNDEF: 2)
    4a5c:	73661b74 	cmnvc	r6, #116, 22	; 0x1d000
    4a60:	06e90100 	strbteq	r0, [r9], r0, lsl #2
    4a64:	00027a09 	andeq	r7, r2, r9, lsl #20
    4a68:	70910200 	addsvc	r0, r1, r0, lsl #4
    4a6c:	1cb71d00 	ldcne	13, cr1, [r7]
    4a70:	b3010000 	movwlt	r0, #4096	; 0x1000
    4a74:	04d61006 	ldrbeq	r1, [r6], #6
    4a78:	5c5c0000 	mrapl	r0, ip, acc0
    4a7c:	01d00002 	bicseq	r0, r0, r2
    4a80:	9c010000 	stcls	0, cr0, [r1], {-0}
    4a84:	00001976 	andeq	r1, r0, r6, ror r9
    4a88:	0070641a 	rsbseq	r6, r0, sl, lsl r4
    4a8c:	0706b401 	streq	fp, [r6, -r1, lsl #8]
    4a90:	00000d0e 	andeq	r0, r0, lr, lsl #26
    4a94:	1a649102 	bne	1928ea4 <__bss_end+0x187bbcc>
    4a98:	0073666f 	rsbseq	r6, r3, pc, ror #12
    4a9c:	0806b501 	stmdaeq	r6, {r0, r8, sl, ip, sp, pc}
    4aa0:	000000cc 	andeq	r0, r0, ip, asr #1
    4aa4:	1b609102 	blne	1828eb4 <__bss_end+0x177bbdc>
    4aa8:	007a7363 	rsbseq	r7, sl, r3, ror #6
    4aac:	0806b801 	stmdaeq	r6, {r0, fp, ip, sp, pc}
    4ab0:	000000cc 	andeq	r0, r0, ip, asr #1
    4ab4:	176c9102 	strbne	r9, [ip, -r2, lsl #2]!
    4ab8:	00001786 	andeq	r1, r0, r6, lsl #15
    4abc:	0d06b801 	stceq	8, cr11, [r6, #-4]
    4ac0:	000000cc 	andeq	r0, r0, ip, asr #1
    4ac4:	1b749102 	blne	1d28ed4 <__bss_end+0x1c7bbfc>
    4ac8:	01007366 	tsteq	r0, r6, ror #6
    4acc:	7a0906b9 	bvc	2465b8 <__bss_end+0x1992e0>
    4ad0:	02000002 	andeq	r0, r0, #2
    4ad4:	1d007091 	stcne	0, cr7, [r0, #-580]	; 0xfffffdbc
    4ad8:	00001a43 	andeq	r1, r0, r3, asr #20
    4adc:	10068c01 	andne	r8, r6, r1, lsl #24
    4ae0:	000004d6 	ldrdeq	r0, [r0], -r6
    4ae4:	00025b58 	andeq	r5, r2, r8, asr fp
    4ae8:	00000104 	andeq	r0, r0, r4, lsl #2
    4aec:	19ef9c01 	stmibne	pc!, {r0, sl, fp, ip, pc}^	; <UNPREDICTABLE>
    4af0:	661a0000 	ldrvs	r0, [sl], -r0
    4af4:	8d010073 	stchi	0, cr0, [r1, #-460]	; 0xfffffe34
    4af8:	027a0906 	rsbseq	r0, sl, #98304	; 0x18000
    4afc:	91020000 	mrsls	r0, (UNDEF: 2)
    4b00:	17861964 	strne	r1, [r6, r4, ror #18]
    4b04:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    4b08:	00cc0806 	sbceq	r0, ip, r6, lsl #16
    4b0c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b10:	1be41760 	blne	ff90a898 <_estack+0xf78ea898>
    4b14:	91010000 	mrsls	r0, (UNDEF: 1)
    4b18:	00e40806 	rsceq	r0, r4, r6, lsl #16
    4b1c:	91020000 	mrsls	r0, (UNDEF: 2)
    4b20:	006e1b70 	rsbeq	r1, lr, r0, ror fp
    4b24:	07069201 	streq	r9, [r6, -r1, lsl #4]
    4b28:	0000009e 	muleq	r0, lr, r0
    4b2c:	1b749102 	blne	1d28f3c <__bss_end+0x1c7bc64>
    4b30:	00627a73 	rsbeq	r7, r2, r3, ror sl
    4b34:	0a069201 	beq	1a9340 <__bss_end+0xfc068>
    4b38:	0000009e 	muleq	r0, lr, r0
    4b3c:	17689102 	strbne	r9, [r8, -r2, lsl #2]!
    4b40:	00001a11 	andeq	r1, r0, r1, lsl sl
    4b44:	08069301 	stmdaeq	r6, {r0, r8, r9, ip, pc}
    4b48:	000002fe 	strdeq	r0, [r0], -lr
    4b4c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
    4b50:	001c821d 	andseq	r8, ip, sp, lsl r2
    4b54:	06040100 	streq	r0, [r4], -r0, lsl #2
    4b58:	0000cc0e 	andeq	ip, r0, lr, lsl #24
    4b5c:	02583400 	subseq	r3, r8, #0, 8
    4b60:	00032400 	andeq	r2, r3, r0, lsl #8
    4b64:	799c0100 	ldmibvc	ip, {r8}
    4b68:	1a00001a 	bne	4bd8 <_start-0xb428>
    4b6c:	006a626f 	rsbeq	r6, sl, pc, ror #4
    4b70:	0b060501 	bleq	185f7c <__bss_end+0xd8ca4>
    4b74:	00001289 	andeq	r1, r0, r9, lsl #5
    4b78:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
    4b7c:	00001786 	andeq	r1, r0, r6, lsl #15
    4b80:	08060601 	stmdaeq	r6, {r0, r9, sl}
    4b84:	000000cc 	andeq	r0, r0, ip, asr #1
    4b88:	1b589102 	blne	1628f98 <__bss_end+0x157bcc0>
    4b8c:	01007363 	tsteq	r0, r3, ror #6
    4b90:	cc080609 	stcgt	6, cr0, [r8], {9}
    4b94:	02000000 	andeq	r0, r0, #0
    4b98:	6e1b6491 	cfcmpsvs	r6, mvf11, mvf1
    4b9c:	01006c63 	tsteq	r0, r3, ror #24
    4ba0:	cc0c0609 	stcgt	6, cr0, [ip], {9}
    4ba4:	02000000 	andeq	r0, r0, #0
    4ba8:	731b7491 	tstvc	fp, #-1862270976	; 0x91000000
    4bac:	01006c63 	tsteq	r0, r3, ror #24
    4bb0:	cc110609 	ldcgt	6, cr0, [r1], {9}
    4bb4:	02000000 	andeq	r0, r0, #0
    4bb8:	721b7091 	andsvc	r7, fp, #145	; 0x91
    4bbc:	01007365 	tsteq	r0, r5, ror #6
    4bc0:	d60a060a 	strle	r0, [sl], -sl, lsl #12
    4bc4:	02000004 	andeq	r0, r0, #4
    4bc8:	661b6f91 	sadd8vs	r6, fp, r1
    4bcc:	0b010073 	bleq	44da0 <ramdisk+0x17ac8>
    4bd0:	027a0906 	rsbseq	r0, sl, #98304	; 0x18000
    4bd4:	91020000 	mrsls	r0, (UNDEF: 2)
    4bd8:	a31d0068 	tstge	sp, #104	; 0x68
    4bdc:	01000019 	tsteq	r0, r9, lsl r0
    4be0:	d61005a5 	ldrle	r0, [r0], -r5, lsr #11
    4be4:	bc000004 	stclt	0, cr0, [r0], {4}
    4be8:	78000256 	stmdavc	r0, {r1, r2, r4, r6, r9}
    4bec:	01000001 	tsteq	r0, r1
    4bf0:	001af49c 	mulseq	sl, ip, r4
    4bf4:	626f1a00 	rsbvs	r1, pc, #0, 20
    4bf8:	a601006a 	strge	r0, [r1], -sl, rrx
    4bfc:	12890b05 	addne	r0, r9, #5120	; 0x1400
    4c00:	91020000 	mrsls	r0, (UNDEF: 2)
    4c04:	17861964 	strne	r1, [r6, r4, ror #18]
    4c08:	a7010000 	strge	r0, [r1, -r0]
    4c0c:	00cc0805 	sbceq	r0, ip, r5, lsl #16
    4c10:	91020000 	mrsls	r0, (UNDEF: 2)
    4c14:	1b441960 	blne	110b19c <__bss_end+0x105dec4>
    4c18:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    4c1c:	00cc0805 	sbceq	r0, ip, r5, lsl #16
    4c20:	91020000 	mrsls	r0, (UNDEF: 2)
    4c24:	65721b5c 	ldrbvs	r1, [r2, #-2908]!	; 0xfffff4a4
    4c28:	ab010073 	blge	44dfc <ramdisk+0x17b24>
    4c2c:	04d60a05 	ldrbeq	r0, [r6], #2565	; 0xa05
    4c30:	91020000 	mrsls	r0, (UNDEF: 2)
    4c34:	786e1b77 	stmdavc	lr!, {r0, r1, r2, r4, r5, r6, r8, r9, fp, ip}^
    4c38:	ac010074 	stcge	0, cr0, [r1], {116}	; 0x74
    4c3c:	00cc0805 	sbceq	r0, ip, r5, lsl #16
    4c40:	91020000 	mrsls	r0, (UNDEF: 2)
    4c44:	73661b6c 	cmnvc	r6, #108, 22	; 0x1b000
    4c48:	05ad0100 	streq	r0, [sp, #256]!	; 0x100
    4c4c:	00027a09 	andeq	r7, r2, r9, lsl #20
    4c50:	70910200 	addsvc	r0, r1, r0, lsl #4
    4c54:	1acc1d00 	bne	ff30c05c <_estack+0xf72ec05c>
    4c58:	e7010000 	str	r0, [r1, -r0]
    4c5c:	04d61004 	ldrbeq	r1, [r6], #4
    4c60:	53740000 	cmnpl	r4, #0
    4c64:	03480002 	movteq	r0, #32770	; 0x8002
    4c68:	9c010000 	stcls	0, cr0, [r1], {-0}
    4c6c:	00001b6c 	andeq	r1, r0, ip, ror #22
    4c70:	0073661a 	rsbseq	r6, r3, sl, lsl r6
    4c74:	0904e801 	stmdbeq	r4, {r0, fp, sp, lr, pc}
    4c78:	0000027a 	andeq	r0, r0, sl, ror r2
    4c7c:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
    4c80:	00001786 	andeq	r1, r0, r6, lsl #15
    4c84:	0804e901 	stmdaeq	r4, {r0, r8, fp, sp, lr, pc}
    4c88:	000000cc 	andeq	r0, r0, ip, asr #1
    4c8c:	1a589102 	bne	162909c <__bss_end+0x157bdc4>
    4c90:	006c6176 	rsbeq	r6, ip, r6, ror r1
    4c94:	0804ea01 	stmdaeq	r4, {r0, r9, fp, sp, lr, pc}
    4c98:	000000cc 	andeq	r0, r0, ip, asr #1
    4c9c:	1b549102 	blne	15290ac <__bss_end+0x147bdd4>
    4ca0:	01006362 	tsteq	r0, r2, ror #6
    4ca4:	9e0704ed 	cdpls	4, 0, cr0, cr7, cr13, {7}
    4ca8:	02000000 	andeq	r0, r0, #0
    4cac:	701b6891 	mulsvc	fp, r1, r8
    4cb0:	04ee0100 	strbteq	r0, [lr], #256	; 0x100
    4cb4:	0002fe08 	andeq	pc, r2, r8, lsl #28
    4cb8:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4cbc:	7365721b 	cmnvc	r5, #-1342177279	; 0xb0000001
    4cc0:	04ef0100 	strbteq	r0, [pc], #256	; 4cc8 <_start-0xb338>
    4cc4:	0004d60a 	andeq	sp, r4, sl, lsl #12
    4cc8:	6f910200 	svcvs	0x00910200
    4ccc:	1a811d00 	bne	fe04c0d4 <_estack+0xf602c0d4>
    4cd0:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
    4cd4:	00cc0e04 	sbceq	r0, ip, r4, lsl #28
    4cd8:	510c0000 	mrspl	r0, (UNDEF: 12)
    4cdc:	02680002 	rsbeq	r0, r8, #2
    4ce0:	9c010000 	stcls	0, cr0, [r1], {-0}
    4ce4:	00001be5 	andeq	r1, r0, r5, ror #23
    4ce8:	6a626f1a 	bvs	18a0958 <__bss_end+0x17f3680>
    4cec:	049a0100 	ldreq	r0, [sl], #256	; 0x100
    4cf0:	0012890b 	andseq	r8, r2, fp, lsl #18
    4cf4:	64910200 	ldrvs	r0, [r1], #512	; 0x200
    4cf8:	00178619 	andseq	r8, r7, r9, lsl r6
    4cfc:	049b0100 	ldreq	r0, [fp], #256	; 0x100
    4d00:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4d04:	60910200 	addsvs	r0, r1, r0, lsl #4
    4d08:	0063771b 	rsbeq	r7, r3, fp, lsl r7
    4d0c:	07049e01 	streq	r9, [r4, -r1, lsl #28]
    4d10:	0000009e 	muleq	r0, lr, r0
    4d14:	1b689102 	blne	1a29124 <__bss_end+0x197be4c>
    4d18:	01006362 	tsteq	r0, r2, ror #6
    4d1c:	9e0b049e 	mcrls	4, 0, r0, cr11, cr14, {4}
    4d20:	02000000 	andeq	r0, r0, #0
    4d24:	761b6c91 			; <UNDEFINED> instruction: 0x761b6c91
    4d28:	01006c61 	tsteq	r0, r1, ror #24
    4d2c:	cc08049f 	cfstrsgt	mvf0, [r8], {159}	; 0x9f
    4d30:	02000000 	andeq	r0, r0, #0
    4d34:	661b7491 			; <UNDEFINED> instruction: 0x661b7491
    4d38:	a0010073 	andge	r0, r1, r3, ror r0
    4d3c:	027a0904 	rsbseq	r0, sl, #4, 18	; 0x10000
    4d40:	91020000 	mrsls	r0, (UNDEF: 2)
    4d44:	df1f0070 	svcle	0x001f0070
    4d48:	0100001b 	tsteq	r0, fp, lsl r0
    4d4c:	e40e0488 	str	r0, [lr], #-1160	; 0xfffffb78
    4d50:	9c000000 	stcls	0, cr0, [r0], {-0}
    4d54:	70000250 	andvc	r0, r0, r0, asr r2
    4d58:	01000000 	mrseq	r0, (UNDEF: 0)
    4d5c:	001c209c 	mulseq	ip, ip, r0
    4d60:	73661a00 	cmnvc	r6, #0, 20
    4d64:	04890100 	streq	r0, [r9], #256	; 0x100
    4d68:	00027a09 	andeq	r7, r2, r9, lsl #20
    4d6c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4d70:	00178619 	andseq	r8, r7, r9, lsl r6
    4d74:	048a0100 	streq	r0, [sl], #256	; 0x100
    4d78:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4d7c:	70910200 	addsvc	r0, r1, r0, lsl #4
    4d80:	1ca61d00 	stcne	13, cr1, [r6]
    4d84:	57010000 	strpl	r0, [r1, -r0]
    4d88:	04d61004 	ldrbeq	r1, [r6], #4
    4d8c:	4f280000 	svcmi	0x00280000
    4d90:	01740002 	cmneq	r4, r2
    4d94:	9c010000 	stcls	0, cr0, [r1], {-0}
    4d98:	00001c5b 	andeq	r1, r0, fp, asr ip
    4d9c:	0073661a 	rsbseq	r6, r3, sl, lsl r6
    4da0:	09045801 	stmdbeq	r4, {r0, fp, ip, lr}
    4da4:	0000027a 	andeq	r0, r0, sl, ror r2
    4da8:	1b6c9102 	blne	1b291b8 <__bss_end+0x1a7bee0>
    4dac:	00736572 	rsbseq	r6, r3, r2, ror r5
    4db0:	0a045b01 	beq	11b9bc <__bss_end+0x6e6e4>
    4db4:	000004d6 	ldrdeq	r0, [r0], -r6
    4db8:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4dbc:	001aa31d 	andseq	sl, sl, sp, lsl r3
    4dc0:	04380100 	ldrteq	r0, [r8], #-256	; 0xffffff00
    4dc4:	0004d610 	andeq	sp, r4, r0, lsl r6
    4dc8:	024e8800 	subeq	r8, lr, #0, 16
    4dcc:	0000a000 	andeq	sl, r0, r0
    4dd0:	a69c0100 	ldrge	r0, [ip], r0, lsl #2
    4dd4:	1a00001c 	bne	4e4c <_start-0xb1b4>
    4dd8:	01007366 	tsteq	r0, r6, ror #6
    4ddc:	7a090439 	bvc	245ec8 <__bss_end+0x198bf0>
    4de0:	02000002 	andeq	r0, r0, #2
    4de4:	e4196c91 	ldr	r6, [r9], #-3217	; 0xfffff36f
    4de8:	0100001b 	tsteq	r0, fp, lsl r0
    4dec:	e408043a 	str	r0, [r8], #-1082	; 0xfffffbc6
    4df0:	02000000 	andeq	r0, r0, #0
    4df4:	721b6891 	andsvc	r6, fp, #9502720	; 0x910000
    4df8:	01007365 	tsteq	r0, r5, ror #6
    4dfc:	d60a043d 			; <UNDEFINED> instruction: 0xd60a043d
    4e00:	02000004 	andeq	r0, r0, #4
    4e04:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
    4e08:	00001d35 	andeq	r1, r0, r5, lsr sp
    4e0c:	10042201 	andne	r2, r4, r1, lsl #4
    4e10:	000004d6 	ldrdeq	r0, [r0], -r6
    4e14:	00024dac 	andeq	r4, r2, ip, lsr #27
    4e18:	000000dc 	ldrdeq	r0, [r0], -ip
    4e1c:	1ce19c01 	stclne	12, cr9, [r1], #4
    4e20:	661a0000 	ldrvs	r0, [sl], -r0
    4e24:	23010073 	movwcs	r0, #4211	; 0x1073
    4e28:	027a0904 	rsbseq	r0, sl, #4, 18	; 0x10000
    4e2c:	91020000 	mrsls	r0, (UNDEF: 2)
    4e30:	65721b6c 	ldrbvs	r1, [r2, #-2924]!	; 0xfffff494
    4e34:	26010073 			; <UNDEFINED> instruction: 0x26010073
    4e38:	04d60a04 	ldrbeq	r0, [r6], #2564	; 0xa04
    4e3c:	91020000 	mrsls	r0, (UNDEF: 2)
    4e40:	ec1f0077 	ldc	0, cr0, [pc], {119}	; 0x77
    4e44:	0100001c 	tsteq	r0, ip, lsl r0
    4e48:	250c02ca 	strcs	r0, [ip, #-714]	; 0xfffffd36
    4e4c:	70000000 	andvc	r0, r0, r0
    4e50:	3c00024d 	sfmcc	f0, 4, [r0], {77}	; 0x4d
    4e54:	01000000 	mrseq	r0, (UNDEF: 0)
    4e58:	001d0b9c 	mulseq	sp, ip, fp
    4e5c:	00631a00 	rsbeq	r1, r3, r0, lsl #20
    4e60:	1a02ca01 	bne	b766c <__bss_end+0xa394>
    4e64:	000000aa 	andeq	r0, r0, sl, lsr #1
    4e68:	00779102 	rsbseq	r9, r7, r2, lsl #2
    4e6c:	001d191f 	andseq	r1, sp, pc, lsl r9
    4e70:	02b60100 	adcseq	r0, r6, #0, 2
    4e74:	0000250c 	andeq	r2, r0, ip, lsl #10
    4e78:	024d3400 	subeq	r3, sp, #0, 8
    4e7c:	00003c00 	andeq	r3, r0, r0, lsl #24
    4e80:	359c0100 	ldrcc	r0, [ip, #256]	; 0x100
    4e84:	1a00001d 	bne	4f00 <_start-0xb100>
    4e88:	b6010063 	strlt	r0, [r1], -r3, rrx
    4e8c:	00aa1a02 	adceq	r1, sl, r2, lsl #20
    4e90:	91020000 	mrsls	r0, (UNDEF: 2)
    4e94:	9d210077 	stcls	0, cr0, [r1, #-476]!	; 0xfffffe24
    4e98:	0100001c 	tsteq	r0, ip, lsl r0
    4e9c:	8c0d0298 	sfmhi	f0, 4, [sp], {152}	; 0x98
    4ea0:	a800024c 	stmdage	r0, {r2, r3, r6, r9}
    4ea4:	01000000 	mrseq	r0, (UNDEF: 0)
    4ea8:	001d6d9c 	mulseq	sp, ip, sp
    4eac:	74701a00 	ldrbtvc	r1, [r0], #-2560	; 0xfffff600
    4eb0:	98010072 	stmdals	r1, {r1, r4, r5, r6}
    4eb4:	02fe1d02 	rscseq	r1, lr, #2, 26	; 0x80
    4eb8:	91020000 	mrsls	r0, (UNDEF: 2)
    4ebc:	61761a74 	cmnvs	r6, r4, ror sl
    4ec0:	9801006c 	stmdals	r1, {r2, r3, r5, r6}
    4ec4:	00cc2802 	sbceq	r2, ip, r2, lsl #16
    4ec8:	91020000 	mrsls	r0, (UNDEF: 2)
    4ecc:	b6210070 			; <UNDEFINED> instruction: 0xb6210070
    4ed0:	01000019 	tsteq	r0, r9, lsl r0
    4ed4:	280d0292 	stmdacs	sp, {r1, r4, r7, r9}
    4ed8:	6400024c 	strvs	r0, [r0], #-588	; 0xfffffdb4
    4edc:	01000000 	mrseq	r0, (UNDEF: 0)
    4ee0:	001da59c 	mulseq	sp, ip, r5
    4ee4:	74701a00 	ldrbtvc	r1, [r0], #-2560	; 0xfffff600
    4ee8:	92010072 	andls	r0, r1, #114	; 0x72
    4eec:	02fe1c02 	rscseq	r1, lr, #512	; 0x200
    4ef0:	91020000 	mrsls	r0, (UNDEF: 2)
    4ef4:	61761a74 	cmnvs	r6, r4, ror sl
    4ef8:	9201006c 	andls	r0, r1, #108	; 0x6c
    4efc:	00bb2602 	adcseq	r2, fp, r2, lsl #12
    4f00:	91020000 	mrsls	r0, (UNDEF: 2)
    4f04:	e51f0072 	ldr	r0, [pc, #-114]	; 4e9a <_start-0xb166>
    4f08:	0100001a 	tsteq	r0, sl, lsl r0
    4f0c:	cc0e0275 	sfmgt	f0, 4, [lr], {117}	; 0x75
    4f10:	a4000000 	strge	r0, [r0], #-0
    4f14:	8400024b 	strhi	r0, [r0], #-587	; 0xfffffdb5
    4f18:	01000000 	mrseq	r0, (UNDEF: 0)
    4f1c:	001de09c 	mulseq	sp, ip, r0
    4f20:	74701a00 	ldrbtvc	r1, [r0], #-2560	; 0xfffff600
    4f24:	75010072 	strvc	r0, [r1, #-114]	; 0xffffff8e
    4f28:	0fea2402 	svceq	0x00ea2402
    4f2c:	91020000 	mrsls	r0, (UNDEF: 2)
    4f30:	76721b6c 	ldrbtvc	r1, [r2], -ip, ror #22
    4f34:	02770100 	rsbseq	r0, r7, #0, 2
    4f38:	0000cc08 	andeq	ip, r0, r8, lsl #24
    4f3c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
    4f40:	1b7b2200 	blne	1ecd748 <__bss_end+0x1e20470>
    4f44:	6c010000 	stcvs	0, cr0, [r1], {-0}
    4f48:	00bb0d02 	adcseq	r0, fp, r2, lsl #26
    4f4c:	4b4c0000 	blmi	1304f54 <__bss_end+0x1257c7c>
    4f50:	00580002 	subseq	r0, r8, r2
    4f54:	9c010000 	stcls	0, cr0, [r1], {-0}
    4f58:	7274701a 	rsbsvc	r7, r4, #26
    4f5c:	026c0100 	rsbeq	r0, ip, #0, 2
    4f60:	000fea22 	andeq	lr, pc, r2, lsr #20
    4f64:	6c910200 	lfmvs	f0, 4, [r1], {0}
    4f68:	0076721b 	rsbseq	r7, r6, fp, lsl r2
    4f6c:	07026e01 	streq	r6, [r2, -r1, lsl #28]
    4f70:	000000bb 	strheq	r0, [r0], -fp
    4f74:	00769102 	rsbseq	r9, r6, r2, lsl #2
    4f78:	0002ae00 	andeq	sl, r2, r0, lsl #28
    4f7c:	4b000400 	blmi	5f84 <_start-0xa07c>
    4f80:	04000010 	streq	r0, [r0], #-16
    4f84:	00003701 	andeq	r3, r0, r1, lsl #14
    4f88:	1d7f0c00 	ldclne	12, cr0, [pc, #-0]	; 4f90 <_start-0xb070>
    4f8c:	00ae0000 	adceq	r0, lr, r0
    4f90:	ae640000 	cdpge	0, 6, cr0, cr4, cr0, {0}
    4f94:	02fc0002 	rscseq	r0, ip, #2
    4f98:	41ff0000 	mvnsmi	r0, r0
    4f9c:	01020000 	mrseq	r0, (UNDEF: 2)
    4fa0:	00066806 	andeq	r6, r6, r6, lsl #16
    4fa4:	05020200 	streq	r0, [r2, #-512]	; 0xfffffe00
    4fa8:	00000731 	andeq	r0, r0, r1, lsr r7
    4fac:	80050402 	andhi	r0, r5, r2, lsl #8
    4fb0:	02000001 	andeq	r0, r0, #1
    4fb4:	017b0508 	cmneq	fp, r8, lsl #10
    4fb8:	01020000 	mrseq	r0, (UNDEF: 2)
    4fbc:	00066608 	andeq	r6, r6, r8, lsl #12
    4fc0:	172b0300 	strne	r0, [fp, -r0, lsl #6]!
    4fc4:	31020000 	mrscc	r0, (UNDEF: 2)
    4fc8:	00005419 	andeq	r5, r0, r9, lsl r4
    4fcc:	07020200 	streq	r0, [r2, -r0, lsl #4]
    4fd0:	0000009b 	muleq	r0, fp, r0
    4fd4:	0018ea03 	andseq	lr, r8, r3, lsl #20
    4fd8:	19340200 	ldmdbne	r4!, {r9}
    4fdc:	00000067 	andeq	r0, r0, r7, rrx
    4fe0:	54070402 	strpl	r0, [r7], #-1026	; 0xfffffbfe
    4fe4:	02000006 	andeq	r0, r0, #6
    4fe8:	064f0708 	strbeq	r0, [pc], -r8, lsl #14
    4fec:	04040000 	streq	r0, [r4], #-0
    4ff0:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    4ff4:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4ff8:	00000659 	andeq	r0, r0, r9, asr r6
    4ffc:	0017a503 	andseq	sl, r7, r3, lsl #10
    5000:	16320300 	ldrtne	r0, [r2], -r0, lsl #6
    5004:	0000007c 	andeq	r0, r0, ip, ror r0
    5008:	00178b03 	andseq	r8, r7, r3, lsl #22
    500c:	17330300 	ldrne	r0, [r3, -r0, lsl #6]!
    5010:	00000041 	andeq	r0, r0, r1, asr #32
    5014:	00008f05 	andeq	r8, r0, r5, lsl #30
    5018:	17590300 	ldrbne	r0, [r9, -r0, lsl #6]
    501c:	34030000 	strcc	r0, [r3], #-0
    5020:	00004813 	andeq	r4, r0, r3, lsl r8
    5024:	17580300 	ldrbne	r0, [r8, -r0, lsl #6]
    5028:	35030000 	strcc	r0, [r3, #-0]
    502c:	00005b13 	andeq	r5, r0, r3, lsl fp
    5030:	19610300 	stmdbne	r1!, {r8, r9}^
    5034:	54030000 	strpl	r0, [r3], #-0
    5038:	0000ac0f 	andeq	sl, r0, pc, lsl #24
    503c:	08010200 	stmdaeq	r1, {r9}
    5040:	0000066f 	andeq	r0, r0, pc, ror #12
    5044:	008f0406 	addeq	r0, pc, r6, lsl #8
    5048:	bf030000 	svclt	0x00030000
    504c:	0400001c 	streq	r0, [r0], #-28	; 0xffffffe4
    5050:	008f0e0d 	addeq	r0, pc, sp, lsl #28
    5054:	07070000 	streq	r0, [r7, -r0]
    5058:	00004101 	andeq	r4, r0, r1, lsl #2
    505c:	0e100400 	cfmulseq	mvf0, mvf0, mvf0
    5060:	0000010a 	andeq	r0, r0, sl, lsl #2
    5064:	001cd408 	andseq	sp, ip, r8, lsl #8
    5068:	14080000 	strne	r0, [r8], #-0
    506c:	0100001b 	tsteq	r0, fp, lsl r0
    5070:	001b8f08 	andseq	r8, fp, r8, lsl #30
    5074:	f4080200 	vst1.8	{d0-d3}, [r8], r0
    5078:	0300001c 	movweq	r0, #28
    507c:	001b6a08 	andseq	r6, fp, r8, lsl #20
    5080:	03000400 	movweq	r0, #1024	; 0x400
    5084:	00001dd0 	ldrdeq	r1, [r0], -r0
    5088:	dd031604 	stcle	6, cr1, [r3, #-16]
    508c:	02000000 	andeq	r0, r0, #0
    5090:	01a90408 			; <UNDEFINED> instruction: 0x01a90408
    5094:	04090000 	streq	r0, [r9], #-0
    5098:	00008f0a 	andeq	r8, r0, sl, lsl #30
    509c:	00013200 	andeq	r3, r1, r0, lsl #4
    50a0:	007c0b00 	rsbseq	r0, ip, r0, lsl #22
    50a4:	ffff0000 			; <UNDEFINED> instruction: 0xffff0000
    50a8:	0c000007 	stceq	0, cr0, [r0], {7}
    50ac:	00001d6c 	andeq	r1, r0, ip, ror #26
    50b0:	1f0d1a01 	svcne	0x000d1a01
    50b4:	05000001 	streq	r0, [r0, #-1]
    50b8:	02d2d803 	sbcseq	sp, r2, #196608	; 0x30000
    50bc:	1d5c0c00 	ldclne	12, cr0, [ip, #-0]
    50c0:	1b010000 	blne	450c8 <ramdisk+0x17df0>
    50c4:	0000d110 	andeq	sp, r0, r0, lsl r1
    50c8:	ec030500 	cfstr32	mvfx0, [r3], {-0}
    50cc:	0d0002be 	sfmeq	f0, 4, [r0, #-760]	; 0xfffffd08
    50d0:	00001d61 	andeq	r1, r0, r1, ror #26
    50d4:	0a095c01 	beq	25c0e0 <__bss_end+0x1aee08>
    50d8:	70000001 	andvc	r0, r0, r1
    50dc:	f00002b0 			; <UNDEFINED> instruction: 0xf00002b0
    50e0:	01000000 	mrseq	r0, (UNDEF: 0)
    50e4:	0001ad9c 	muleq	r1, ip, sp
    50e8:	177c0e00 	ldrbne	r0, [ip, -r0, lsl #28]!
    50ec:	5c010000 	stcpl	0, cr0, [r1], {-0}
    50f0:	00008f19 	andeq	r8, r0, r9, lsl pc
    50f4:	6f910200 	svcvs	0x00910200
    50f8:	646d630f 	strbtvs	r6, [sp], #-783	; 0xfffffcf1
    50fc:	245c0100 	ldrbcs	r0, [ip], #-256	; 0xffffff00
    5100:	0000008f 	andeq	r0, r0, pc, lsl #1
    5104:	0e6e9102 	lgneqe	f1, f2
    5108:	00001c77 	andeq	r1, r0, r7, ror ip
    510c:	1d2f5c01 	stcne	12, cr5, [pc, #-4]!	; 5110 <_start-0xaef0>
    5110:	02000001 	andeq	r0, r0, #1
    5114:	72106891 	andsvc	r6, r0, #9502720	; 0x910000
    5118:	01007365 	tsteq	r0, r5, ror #6
    511c:	010a0d5d 	tsteq	sl, sp, asr sp
    5120:	91020000 	mrsls	r0, (UNDEF: 2)
    5124:	74110077 	ldrvc	r0, [r1], #-119	; 0xffffff89
    5128:	0100001d 	tsteq	r0, sp, lsl r0
    512c:	010a094b 	tsteq	sl, fp, asr #18
    5130:	afbc0000 	svcge	0x00bc0000
    5134:	00b40002 	adcseq	r0, r4, r2
    5138:	9c010000 	stcls	0, cr0, [r1], {-0}
    513c:	00000204 	andeq	r0, r0, r4, lsl #4
    5140:	00177c0e 	andseq	r7, r7, lr, lsl #24
    5144:	194b0100 	stmdbne	fp, {r8}^
    5148:	0000008f 	andeq	r0, r0, pc, lsl #1
    514c:	0e779102 	expeqs	f1, f2
    5150:	00001c77 	andeq	r1, r0, r7, ror ip
    5154:	042b4b01 	strteq	r4, [fp], #-2817	; 0xfffff4ff
    5158:	02000002 	andeq	r0, r0, #2
    515c:	c90e7091 	stmdbgt	lr, {r0, r4, r7, ip, sp, lr}
    5160:	0100001d 	tsteq	r0, sp, lsl r0
    5164:	00b8374b 	adcseq	r3, r8, fp, asr #14
    5168:	91020000 	mrsls	r0, (UNDEF: 2)
    516c:	1d4a0e6c 	stclne	14, cr0, [sl, #-432]	; 0xfffffe50
    5170:	4b010000 	blmi	45178 <ramdisk+0x17ea0>
    5174:	00008344 	andeq	r8, r0, r4, asr #6
    5178:	68910200 	ldmvs	r1, {r9}
    517c:	9b040600 	blls	106984 <__bss_end+0x596ac>
    5180:	11000000 	mrsne	r0, (UNDEF: 0)
    5184:	00001dd8 	ldrdeq	r1, [r0], -r8
    5188:	0a093a01 	beq	253994 <__bss_end+0x1a66bc>
    518c:	08000001 	stmdaeq	r0, {r0}
    5190:	b40002af 	strlt	r0, [r0], #-687	; 0xfffffd51
    5194:	01000000 	mrseq	r0, (UNDEF: 0)
    5198:	0002619c 	muleq	r2, ip, r1
    519c:	177c0e00 	ldrbne	r0, [ip, -r0, lsl #28]!
    51a0:	3a010000 	bcc	451a8 <ramdisk+0x17ed0>
    51a4:	00008f18 	andeq	r8, r0, r8, lsl pc
    51a8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
    51ac:	001c770e 	andseq	r7, ip, lr, lsl #14
    51b0:	243a0100 	ldrtcs	r0, [sl], #-256	; 0xffffff00
    51b4:	000000cb 	andeq	r0, r0, fp, asr #1
    51b8:	0e709102 	expeqs	f1, f2
    51bc:	00001dc9 	andeq	r1, r0, r9, asr #27
    51c0:	b8303a01 	ldmdalt	r0!, {r0, r9, fp, ip, sp}
    51c4:	02000000 	andeq	r0, r0, #0
    51c8:	4a0e6c91 	bmi	3a0414 <__bss_end+0x2f313c>
    51cc:	0100001d 	tsteq	r0, sp, lsl r0
    51d0:	00833d3a 	addeq	r3, r3, sl, lsr sp
    51d4:	91020000 	mrsls	r0, (UNDEF: 2)
    51d8:	6c110068 	ldcvs	0, cr0, [r1], {104}	; 0x68
    51dc:	01000017 	tsteq	r0, r7, lsl r0
    51e0:	00d1092a 	sbcseq	r0, r1, sl, lsr #18
    51e4:	aea80000 	cdpge	0, 10, cr0, cr8, cr0, {0}
    51e8:	00600002 	rsbeq	r0, r0, r2
    51ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    51f0:	0000028b 	andeq	r0, r0, fp, lsl #5
    51f4:	00177c0e 	andseq	r7, r7, lr, lsl #24
    51f8:	1e2a0100 	sufnee	f0, f2, f0
    51fc:	0000008f 	andeq	r0, r0, pc, lsl #1
    5200:	00779102 	rsbseq	r9, r7, r2, lsl #2
    5204:	001d5012 	andseq	r5, sp, r2, lsl r0
    5208:	09210100 	stmdbeq	r1!, {r8}
    520c:	000000d1 	ldrdeq	r0, [r0], -r1
    5210:	0002ae64 	andeq	sl, r2, r4, ror #28
    5214:	00000044 	andeq	r0, r0, r4, asr #32
    5218:	7c0e9c01 	stcvc	12, cr9, [lr], {1}
    521c:	01000017 	tsteq	r0, r7, lsl r0
    5220:	008f1a21 	addeq	r1, pc, r1, lsr #20
    5224:	91020000 	mrsls	r0, (UNDEF: 2)
    5228:	a4000077 	strge	r0, [r0], #-119	; 0xffffff89
    522c:	04000000 	streq	r0, [r0], #-0
    5230:	00116500 	andseq	r6, r1, r0, lsl #10
    5234:	37010400 	strcc	r0, [r1, -r0, lsl #8]
    5238:	0c000000 	stceq	0, cr0, [r0], {-0}
    523c:	00001dee 	andeq	r1, r0, lr, ror #27
    5240:	000000ae 	andeq	r0, r0, lr, lsr #1
    5244:	0002b160 	andeq	fp, r2, r0, ror #2
    5248:	00000020 	andeq	r0, r0, r0, lsr #32
    524c:	000043ae 	andeq	r4, r0, lr, lsr #7
    5250:	68060102 	stmdavs	r6, {r1, r8}
    5254:	02000006 	andeq	r0, r0, #6
    5258:	07310502 	ldreq	r0, [r1, -r2, lsl #10]!
    525c:	04020000 	streq	r0, [r2], #-0
    5260:	00018005 	andeq	r8, r1, r5
    5264:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5268:	0000017b 	andeq	r0, r0, fp, ror r1
    526c:	66080102 	strvs	r0, [r8], -r2, lsl #2
    5270:	02000006 	andeq	r0, r0, #6
    5274:	009b0702 	addseq	r0, fp, r2, lsl #14
    5278:	ea030000 	b	c5280 <__bss_end+0x17fa8>
    527c:	02000018 	andeq	r0, r0, #24
    5280:	005b1934 	subseq	r1, fp, r4, lsr r9
    5284:	04020000 	streq	r0, [r2], #-0
    5288:	00065407 	andeq	r5, r6, r7, lsl #8
    528c:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5290:	0000064f 	andeq	r0, r0, pc, asr #12
    5294:	69050404 	stmdbvs	r5, {r2, sl}
    5298:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    529c:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
    52a0:	58030000 	stmdapl	r3, {}	; <UNPREDICTABLE>
    52a4:	03000017 	movweq	r0, #23
    52a8:	004f1335 	subeq	r1, pc, r5, lsr r3	; <UNPREDICTABLE>
    52ac:	01020000 	mrseq	r0, (UNDEF: 2)
    52b0:	00066f08 	andeq	r6, r6, r8, lsl #30
    52b4:	04080200 	streq	r0, [r8], #-512	; 0xfffffe00
    52b8:	000001a9 	andeq	r0, r0, r9, lsr #3
    52bc:	001de205 	andseq	lr, sp, r5, lsl #4
    52c0:	07080100 	streq	r0, [r8, -r0, lsl #2]
    52c4:	00000077 	andeq	r0, r0, r7, ror r0
    52c8:	0002b160 	andeq	fp, r2, r0, ror #2
    52cc:	00000020 	andeq	r0, r0, r0, lsr #32
    52d0:	67009c01 	strvs	r9, [r0, -r1, lsl #24]
    52d4:	04000000 	streq	r0, [r0], #-0
    52d8:	0011ba00 	andseq	fp, r1, r0, lsl #20
    52dc:	37010400 	strcc	r0, [r1, -r0, lsl #8]
    52e0:	0c000000 	stceq	0, cr0, [r0], {-0}
    52e4:	00001e3a 	andeq	r1, r0, sl, lsr lr
    52e8:	000000ae 	andeq	r0, r0, lr, lsr #1
    52ec:	0000446d 	andeq	r4, r0, sp, ror #8
    52f0:	68060102 	stmdavs	r6, {r1, r8}
    52f4:	02000006 	andeq	r0, r0, #6
    52f8:	07310502 	ldreq	r0, [r1, -r2, lsl #10]!
    52fc:	04020000 	streq	r0, [r2], #-0
    5300:	00018005 	andeq	r8, r1, r5
    5304:	05080200 	streq	r0, [r8, #-512]	; 0xfffffe00
    5308:	0000017b 	andeq	r0, r0, fp, ror r1
    530c:	66080102 	strvs	r0, [r8], -r2, lsl #2
    5310:	02000006 	andeq	r0, r0, #6
    5314:	009b0702 	addseq	r0, fp, r2, lsl #14
    5318:	04020000 	streq	r0, [r2], #-0
    531c:	00065407 	andeq	r5, r6, r7, lsl #8
    5320:	07080200 	streq	r0, [r8, -r0, lsl #4]
    5324:	0000064f 	andeq	r0, r0, pc, asr #12
    5328:	69050403 	stmdbvs	r5, {r0, r1, sl}
    532c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
    5330:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
    5334:	01020000 	mrseq	r0, (UNDEF: 2)
    5338:	00066f08 	andeq	r6, r6, r8, lsl #30
    533c:	00220000 	eoreq	r0, r2, r0
    5340:	00020000 	andeq	r0, r2, r0
    5344:	000011e0 	andeq	r1, r0, r0, ror #3
    5348:	448a0104 	strmi	r0, [sl], #260	; 0x104
    534c:	b1800000 	orrlt	r0, r0, r0
    5350:	b2940002 	addslt	r0, r4, #2
    5354:	1e870002 	cdpne	0, 8, cr0, cr7, cr2, {0}
    5358:	1eae0000 	cdpne	0, 10, cr0, cr14, cr0, {0}
    535c:	1f080000 	svcne	0x00080000
    5360:	80010000 	andhi	r0, r1, r0
    5364:	00000022 	andeq	r0, r0, r2, lsr #32
    5368:	11f40002 	mvnsne	r0, r2
    536c:	01040000 	mrseq	r0, (UNDEF: 4)
    5370:	000044fe 	strdeq	r4, [r0], -lr
    5374:	0002b294 	muleq	r2, r4, r2
    5378:	0002b298 	muleq	r2, r8, r2
    537c:	00001e87 	andeq	r1, r0, r7, lsl #29
    5380:	00001eae 	andeq	r1, r0, lr, lsr #29
    5384:	00001f08 	andeq	r1, r0, r8, lsl #30
    5388:	01348001 	teqeq	r4, r1
    538c:	00040000 	andeq	r0, r4, r0
    5390:	00001208 	andeq	r1, r0, r8, lsl #4
    5394:	1f8f0104 	svcne	0x008f0104
    5398:	640c0000 	strvs	r0, [ip], #-0
    539c:	1b00001f 	blne	5420 <_start-0xabe0>
    53a0:	9800001f 	stmdals	r0, {r0, r1, r2, r3, r4}
    53a4:	ac0002b2 	sfmge	f0, 4, [r0], {178}	; 0xb2
    53a8:	55000000 	strpl	r0, [r0, #-0]
    53ac:	02000045 	andeq	r0, r0, #69	; 0x45
    53b0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    53b4:	b1030074 	tstlt	r3, r4, ror r0
    53b8:	02000007 	andeq	r0, r0, #7
    53bc:	003817d1 	ldrsbteq	r1, [r8], -r1
    53c0:	04040000 	streq	r0, [r4], #-0
    53c4:	00065907 	andeq	r5, r6, r7, lsl #18
    53c8:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    53cc:	0000017b 	andeq	r0, r0, fp, ror r1
    53d0:	a9040804 	stmdbge	r4, {r2, fp}
    53d4:	04000001 	streq	r0, [r0], #-1
    53d8:	06680601 	strbteq	r0, [r8], -r1, lsl #12
    53dc:	01040000 	mrseq	r0, (UNDEF: 4)
    53e0:	00066608 	andeq	r6, r6, r8, lsl #12
    53e4:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    53e8:	00000731 	andeq	r0, r0, r1, lsr r7
    53ec:	9b070204 	blls	1c5c04 <__bss_end+0x11892c>
    53f0:	04000000 	streq	r0, [r0], #-0
    53f4:	01800504 	orreq	r0, r0, r4, lsl #10
    53f8:	04040000 	streq	r0, [r4], #-0
    53fc:	00065407 	andeq	r5, r6, r7, lsl #8
    5400:	07080400 	streq	r0, [r8, -r0, lsl #8]
    5404:	0000064f 	andeq	r0, r0, pc, asr #12
    5408:	00540405 	subseq	r0, r4, r5, lsl #8
    540c:	01040000 	mrseq	r0, (UNDEF: 4)
    5410:	00066f08 	andeq	r6, r6, r8, lsl #30
    5414:	1f140600 	svcne	0x00140600
    5418:	1e030000 	cdpne	0, 0, cr0, cr3, cr0, {0}
    541c:	00002507 	andeq	r2, r0, r7, lsl #10
    5420:	02b29800 	adcseq	r9, r2, #0, 16
    5424:	0000ac00 	andeq	sl, r0, r0, lsl #24
    5428:	2a9c0100 	bcs	fe705830 <_estack+0xf66e5830>
    542c:	07000001 	streq	r0, [r0, -r1]
    5430:	0100316d 	tsteq	r0, sp, ror #2
    5434:	012a152e 			; <UNDEFINED> instruction: 0x012a152e
    5438:	00040000 	andeq	r0, r4, r0
    543c:	00000000 	andeq	r0, r0, r0
    5440:	6d070000 	stcvs	0, cr0, [r7, #-0]
    5444:	2f010032 	svccs	0x00010032
    5448:	00012a0e 	andeq	r2, r1, lr, lsl #20
    544c:	00002900 	andeq	r2, r0, r0, lsl #18
    5450:	00002500 	andeq	r2, r0, r0, lsl #10
    5454:	006e0700 	rsbeq	r0, lr, r0, lsl #14
    5458:	2c093001 	stccs	0, cr3, [r9], {1}
    545c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    5460:	4a000000 	bmi	5468 <_start-0xab98>
    5464:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5468:	01003173 	tsteq	r0, r3, ror r1
    546c:	007e1241 	rsbseq	r1, lr, r1, asr #4
    5470:	00f00000 	rscseq	r0, r0, r0
    5474:	00e40000 	rsceq	r0, r4, r0
    5478:	73080000 	movwvc	r0, #32768	; 0x8000
    547c:	42010032 	andmi	r0, r1, #50	; 0x32
    5480:	00007e12 	andeq	r7, r0, r2, lsl lr
    5484:	00014900 	andeq	r4, r1, r0, lsl #18
    5488:	00014100 	andeq	r4, r1, r0, lsl #2
    548c:	31610800 	cmncc	r1, r0, lsl #16
    5490:	12430100 	subne	r0, r3, #0, 2
    5494:	00000131 	andeq	r0, r0, r1, lsr r1
    5498:	0000017f 	andeq	r0, r0, pc, ror r1
    549c:	0000017d 	andeq	r0, r0, sp, ror r1
    54a0:	00326108 	eorseq	r6, r2, r8, lsl #2
    54a4:	31124401 	tstcc	r2, r1, lsl #8
    54a8:	98000001 	stmdals	r0, {r0}
    54ac:	92000001 	andls	r0, r0, #1
    54b0:	00000001 	andeq	r0, r0, r1
    54b4:	01300405 	teqeq	r0, r5, lsl #8
    54b8:	05090000 	streq	r0, [r9, #-0]
    54bc:	00007004 	andeq	r7, r0, r4
    54c0:	01580000 	cmpeq	r8, r0
    54c4:	00040000 	andeq	r0, r4, r0
    54c8:	00001295 	muleq	r0, r5, r2
    54cc:	1f8f0104 	svcne	0x008f0104
    54d0:	fe0c0000 	cdp2	0, 0, cr0, cr12, cr0, {0}
    54d4:	5f00001f 	svcpl	0x0000001f
    54d8:	44000020 	strmi	r0, [r0], #-32	; 0xffffffe0
    54dc:	200002b3 			; <UNDEFINED> instruction: 0x200002b3
    54e0:	c6000001 	strgt	r0, [r0], -r1
    54e4:	02000046 	andeq	r0, r0, #70	; 0x46
    54e8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    54ec:	b1030074 	tstlt	r3, r4, ror r0
    54f0:	02000007 	andeq	r0, r0, #7
    54f4:	003817d1 	ldrsbteq	r1, [r8], -r1
    54f8:	04040000 	streq	r0, [r4], #-0
    54fc:	00065907 	andeq	r5, r6, r7, lsl #18
    5500:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    5504:	0000017b 	andeq	r0, r0, fp, ror r1
    5508:	a9040804 	stmdbge	r4, {r2, fp}
    550c:	04000001 	streq	r0, [r0], #-1
    5510:	06680601 	strbteq	r0, [r8], -r1, lsl #12
    5514:	01040000 	mrseq	r0, (UNDEF: 4)
    5518:	00066608 	andeq	r6, r6, r8, lsl #12
    551c:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    5520:	00000731 	andeq	r0, r0, r1, lsr r7
    5524:	9b070204 	blls	1c5d3c <__bss_end+0x118a64>
    5528:	04000000 	streq	r0, [r0], #-0
    552c:	01800504 	orreq	r0, r0, r4, lsl #10
    5530:	69050000 	stmdbvs	r5, {}	; <UNPREDICTABLE>
    5534:	04000000 	streq	r0, [r0], #-0
    5538:	06540704 	ldrbeq	r0, [r4], -r4, lsl #14
    553c:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
    5540:	00064f07 	andeq	r4, r6, r7, lsl #30
    5544:	07040600 	streq	r0, [r4, -r0, lsl #12]
    5548:	00000083 	andeq	r0, r0, r3, lsl #1
    554c:	00900408 	addseq	r0, r0, r8, lsl #8
    5550:	01040000 	mrseq	r0, (UNDEF: 4)
    5554:	00066f08 	andeq	r6, r6, r8, lsl #30
    5558:	00900500 	addseq	r0, r0, r0, lsl #10
    555c:	04080000 	streq	r0, [r8], #-0
    5560:	00000097 	muleq	r0, r7, r0
    5564:	00ad0408 	adceq	r0, sp, r8, lsl #8
    5568:	a2070000 	andge	r0, r7, #0
    556c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    5570:	0020530a 	eoreq	r5, r0, sl, lsl #6
    5574:	091f0300 	ldmdbeq	pc, {r8, r9}	; <UNPREDICTABLE>
    5578:	00000083 	andeq	r0, r0, r3, lsl #1
    557c:	0002b344 	andeq	fp, r2, r4, asr #6
    5580:	00000120 	andeq	r0, r0, r0, lsr #2
    5584:	014f9c01 	cmpeq	pc, r1, lsl #24
    5588:	360b0000 	strcc	r0, [fp], -r0
    558c:	01000020 	tsteq	r0, r0, lsr #32
    5590:	00851a31 	addeq	r1, r5, r1, lsr sl
    5594:	50010000 	andpl	r0, r1, r0
    5598:	001ff90c 	andseq	pc, pc, ip, lsl #18
    559c:	19320100 	ldmdbne	r2!, {r8}
    55a0:	000000a8 	andeq	r0, r0, r8, lsr #1
    55a4:	000001cb 	andeq	r0, r0, fp, asr #3
    55a8:	000001c1 	andeq	r0, r0, r1, asr #3
    55ac:	00205a0c 	eoreq	r5, r0, ip, lsl #20
    55b0:	09330100 	ldmdbeq	r3!, {r8}
    55b4:	0000002c 	andeq	r0, r0, ip, lsr #32
    55b8:	00000222 	andeq	r0, r0, r2, lsr #4
    55bc:	00000210 	andeq	r0, r0, r0, lsl r2
    55c0:	7473640d 	ldrbtvc	r6, [r3], #-1037	; 0xfffffbf3
    55c4:	09420100 	stmdbeq	r2, {r8}^
    55c8:	0000008a 	andeq	r0, r0, sl, lsl #1
    55cc:	0000029b 	muleq	r0, fp, r2
    55d0:	00000291 	muleq	r0, r1, r2
    55d4:	6372730d 	cmnvs	r2, #872415232	; 0x34000000
    55d8:	0f430100 	svceq	0x00430100
    55dc:	0000009c 	muleq	r0, ip, r0
    55e0:	000002e8 	andeq	r0, r0, r8, ror #5
    55e4:	000002da 	ldrdeq	r0, [r0], -sl
    55e8:	00203b0e 	eoreq	r3, r0, lr, lsl #22
    55ec:	09440100 	stmdbeq	r4, {r8}^
    55f0:	0000014f 	andeq	r0, r0, pc, asr #2
    55f4:	00000346 	andeq	r0, r0, r6, asr #6
    55f8:	00000344 	andeq	r0, r0, r4, asr #6
    55fc:	0020470e 	eoreq	r4, r0, lr, lsl #14
    5600:	0f450100 	svceq	0x00450100
    5604:	00000155 	andeq	r0, r0, r5, asr r1
    5608:	0000036b 	andeq	r0, r0, fp, ror #6
    560c:	00000359 	andeq	r0, r0, r9, asr r3
    5610:	69040800 	stmdbvs	r4, {fp}
    5614:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    5618:	00007004 	andeq	r7, r0, r4
    561c:	01390000 	teqeq	r9, r0
    5620:	00040000 	andeq	r0, r4, r0
    5624:	0000135c 	andeq	r1, r0, ip, asr r3
    5628:	1f8f0104 	svcne	0x008f0104
    562c:	ba0c0000 	blt	305634 <__bss_end+0x25835c>
    5630:	1b000020 	blne	56b8 <_start-0xa948>
    5634:	6400001f 	strvs	r0, [r0], #-31	; 0xffffffe1
    5638:	1c0002b4 	sfmne	f0, 4, [r0], {180}	; 0xb4
    563c:	80000001 	andhi	r0, r0, r1
    5640:	02000048 	andeq	r0, r0, #72	; 0x48
    5644:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    5648:	b1030074 	tstlt	r3, r4, ror r0
    564c:	02000007 	andeq	r0, r0, #7
    5650:	003817d1 	ldrsbteq	r1, [r8], -r1
    5654:	04040000 	streq	r0, [r4], #-0
    5658:	00065907 	andeq	r5, r6, r7, lsl #18
    565c:	05080400 	streq	r0, [r8, #-1024]	; 0xfffffc00
    5660:	0000017b 	andeq	r0, r0, fp, ror r1
    5664:	a9040804 	stmdbge	r4, {r2, fp}
    5668:	04000001 	streq	r0, [r0], #-1
    566c:	06680601 	strbteq	r0, [r8], -r1, lsl #12
    5670:	01040000 	mrseq	r0, (UNDEF: 4)
    5674:	00066608 	andeq	r6, r6, r8, lsl #12
    5678:	05020400 	streq	r0, [r2, #-1024]	; 0xfffffc00
    567c:	00000731 	andeq	r0, r0, r1, lsr r7
    5680:	9b070204 	blls	1c5e98 <__bss_end+0x118bc0>
    5684:	04000000 	streq	r0, [r0], #-0
    5688:	01800504 	orreq	r0, r0, r4, lsl #10
    568c:	04040000 	streq	r0, [r4], #-0
    5690:	00065407 	andeq	r5, r6, r7, lsl #8
    5694:	07080400 	streq	r0, [r8, -r0, lsl #8]
    5698:	0000064f 	andeq	r0, r0, pc, asr #12
    569c:	04060405 	streq	r0, [r6], #-1029	; 0xfffffbfb
    56a0:	00000086 	andeq	r0, r0, r6, lsl #1
    56a4:	6f080104 	svcvs	0x00080104
    56a8:	07000006 	streq	r0, [r0, -r6]
    56ac:	000020e5 	andeq	r2, r0, r5, ror #1
    56b0:	7e092103 	adfvce	f2, f1, f3
    56b4:	64000000 	strvs	r0, [r0], #-0
    56b8:	1c0002b4 	sfmne	f0, 4, [r0], {180}	; 0xb4
    56bc:	01000001 	tsteq	r0, r1
    56c0:	0001369c 	muleq	r1, ip, r6
    56c4:	006d0800 	rsbeq	r0, sp, r0, lsl #16
    56c8:	7e0f2601 	cfmadd32vc	mvax0, mvfx2, mvfx15, mvfx1
    56cc:	01000000 	mrseq	r0, (UNDEF: 0)
    56d0:	00630950 	rsbeq	r0, r3, r0, asr r9
    56d4:	25062701 	strcs	r2, [r6, #-1793]	; 0xfffff8ff
    56d8:	ec000000 	stc	0, cr0, [r0], {-0}
    56dc:	e2000003 	and	r0, r0, #3
    56e0:	09000003 	stmdbeq	r0, {r0, r1}
    56e4:	2801006e 	stmdacs	r1, {r1, r2, r3, r5, r6}
    56e8:	00002c09 	andeq	r2, r0, r9, lsl #24
    56ec:	00044300 	andeq	r4, r4, r0, lsl #6
    56f0:	00043100 	andeq	r3, r4, r0, lsl #2
    56f4:	00730a00 	rsbseq	r0, r3, r0, lsl #20
    56f8:	80092a01 	andhi	r2, r9, r1, lsl #20
    56fc:	ca000000 	bgt	5704 <_start-0xa8fc>
    5700:	b4000004 	strlt	r0, [r0], #-4
    5704:	0a000004 	beq	571c <_start-0xa8e4>
    5708:	2d010069 	stccs	0, cr0, [r1, #-420]	; 0xfffffe5c
    570c:	00003810 	andeq	r3, r0, r0, lsl r8
    5710:	00055700 	andeq	r5, r5, r0, lsl #14
    5714:	00055100 	andeq	r5, r5, r0, lsl #2
    5718:	191a0b00 	ldmdbne	sl, {r8, r9, fp}
    571c:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    5720:	00007011 	andeq	r7, r0, r1, lsl r0
    5724:	00058e00 	andeq	r8, r5, r0, lsl #28
    5728:	00058600 	andeq	r8, r5, r0, lsl #12
    572c:	20ad0b00 	adccs	r0, sp, r0, lsl #22
    5730:	2f010000 	svccs	0x00010000
    5734:	00013612 	andeq	r3, r1, r2, lsl r6
    5738:	0005fb00 	andeq	pc, r5, r0, lsl #22
    573c:	0005e300 	andeq	lr, r5, r0, lsl #6
    5740:	00640a00 	rsbeq	r0, r4, r0, lsl #20
    5744:	38103001 	ldmdacc	r0, {r0, ip, sp}
    5748:	9b000000 	blls	5750 <_start-0xa8b0>
    574c:	91000006 	tstls	r0, r6
    5750:	00000006 	andeq	r0, r0, r6
    5754:	00700406 	rsbseq	r0, r0, r6, lsl #8
    5758:	36000000 	strcc	r0, [r0], -r0
    575c:	04000001 	streq	r0, [r0], #-1
    5760:	00141000 	andseq	r1, r4, r0
    5764:	8f010400 	svchi	0x00010400
    5768:	0c00001f 	stceq	0, cr0, [r0], {31}
    576c:	000020f3 	strdeq	r2, [r0], -r3
    5770:	00001f1b 	andeq	r1, r0, fp, lsl pc
    5774:	0002b580 	andeq	fp, r2, r0, lsl #11
    5778:	00000150 	andeq	r0, r0, r0, asr r1
    577c:	00004a55 	andeq	r4, r0, r5, asr sl
    5780:	69050402 	stmdbvs	r5, {r1, sl}
    5784:	0300746e 	movweq	r7, #1134	; 0x46e
    5788:	06590704 	ldrbeq	r0, [r9], -r4, lsl #14
    578c:	08030000 	stmdaeq	r3, {}	; <UNPREDICTABLE>
    5790:	00017b05 	andeq	r7, r1, r5, lsl #22
    5794:	04080300 	streq	r0, [r8], #-768	; 0xfffffd00
    5798:	000001a9 	andeq	r0, r0, r9, lsr #3
    579c:	68060103 	stmdavs	r6, {r0, r1, r8}
    57a0:	03000006 	movweq	r0, #6
    57a4:	06660801 	strbteq	r0, [r6], -r1, lsl #16
    57a8:	48040000 	stmdami	r4, {}	; <UNPREDICTABLE>
    57ac:	03000000 	movweq	r0, #0
    57b0:	07310502 	ldreq	r0, [r1, -r2, lsl #10]!
    57b4:	02030000 	andeq	r0, r3, #0
    57b8:	00009b07 	andeq	r9, r0, r7, lsl #22
    57bc:	05040300 	streq	r0, [r4, #-768]	; 0xfffffd00
    57c0:	00000180 	andeq	r0, r0, r0, lsl #3
    57c4:	54070403 	strpl	r0, [r7], #-1027	; 0xfffffbfd
    57c8:	03000006 	movweq	r0, #6
    57cc:	064f0708 	strbeq	r0, [pc], -r8, lsl #14
    57d0:	04050000 	streq	r0, [r5], #-0
    57d4:	0000007d 	andeq	r0, r0, sp, ror r0
    57d8:	6f080103 	svcvs	0x00080103
    57dc:	04000006 	streq	r0, [r0], #-6
    57e0:	0000007d 	andeq	r0, r0, sp, ror r0
    57e4:	00840405 	addeq	r0, r4, r5, lsl #8
    57e8:	ec060000 	stc	0, cr0, [r6], {-0}
    57ec:	02000020 	andeq	r0, r0, #32
    57f0:	00770823 	rsbseq	r0, r7, r3, lsr #16
    57f4:	b5800000 	strlt	r0, [r0]
    57f8:	01500002 	cmpeq	r0, r2
    57fc:	9c010000 	stcls	0, cr0, [r1], {-0}
    5800:	0000012d 	andeq	r0, r0, sp, lsr #2
    5804:	00317307 	eorseq	r7, r1, r7, lsl #6
    5808:	89153701 	ldmdbhi	r5, {r0, r8, r9, sl, ip, sp}
    580c:	fd000000 	stc2	0, cr0, [r0, #-0]
    5810:	f5000006 			; <UNDEFINED> instruction: 0xf5000006
    5814:	07000006 	streq	r0, [r0, -r6]
    5818:	38010069 	stmdacc	r1, {r0, r3, r5, r6}
    581c:	00002506 	andeq	r2, r0, r6, lsl #10
    5820:	00073b00 	andeq	r3, r7, r0, lsl #22
    5824:	00073700 	andeq	r3, r7, r0, lsl #14
    5828:	00730800 	rsbseq	r0, r3, r0, lsl #16
    582c:	2d183a01 	vldrcs	s6, [r8, #-4]
    5830:	70000001 	andvc	r0, r0, r1
    5834:	5c000007 	stcpl	0, cr0, [r0], {7}
    5838:	08000007 	stmdaeq	r0, {r0, r1, r2}
    583c:	3b010063 	blcc	459d0 <ramdisk+0x186f8>
    5840:	00004811 	andeq	r4, r0, r1, lsl r8
    5844:	0007f000 	andeq	pc, r7, r0
    5848:	0007ee00 	andeq	lr, r7, r0, lsl #28
    584c:	115e0900 	cmpne	lr, r0, lsl #18
    5850:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    5854:	00006911 	andeq	r6, r0, r1, lsl r9
    5858:	00080e00 	andeq	r0, r8, r0, lsl #28
    585c:	00080600 	andeq	r0, r8, r0, lsl #12
    5860:	006a0800 	rsbeq	r0, sl, r0, lsl #16
    5864:	69163e01 	ldmdbvs	r6, {r0, r9, sl, fp, ip, sp}
    5868:	5b000000 	blpl	5870 <_start-0xa790>
    586c:	53000008 	movwpl	r0, #8
    5870:	09000008 	stmdbeq	r0, {r3}
    5874:	000020ad 	andeq	r2, r0, sp, lsr #1
    5878:	33123f01 	tstcc	r2, #1, 30
    587c:	a1000001 	tstge	r0, r1
    5880:	95000008 	strls	r0, [r0, #-8]
    5884:	00000008 	andeq	r0, r0, r8
    5888:	004f0405 	subeq	r0, pc, r5, lsl #8
    588c:	04050000 	streq	r0, [r5], #-0
    5890:	00000069 	andeq	r0, r0, r9, rrx
    5894:	0000b800 	andeq	fp, r0, r0, lsl #16
    5898:	a4000400 	strge	r0, [r0], #-1024	; 0xfffffc00
    589c:	04000014 	streq	r0, [r0], #-20	; 0xffffffec
    58a0:	001f8f01 	andseq	r8, pc, r1, lsl #30
    58a4:	21250c00 			; <UNDEFINED> instruction: 0x21250c00
    58a8:	205f0000 	subscs	r0, pc, r0
	...
    58b4:	4c130000 	ldcmi	0, cr0, [r3], {-0}
    58b8:	04020000 	streq	r0, [r2], #-0
    58bc:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    58c0:	07b10300 	ldreq	r0, [r1, r0, lsl #6]!
    58c4:	d1020000 	mrsle	r0, (UNDEF: 2)
    58c8:	00003817 	andeq	r3, r0, r7, lsl r8
    58cc:	07040400 	streq	r0, [r4, -r0, lsl #8]
    58d0:	00000659 	andeq	r0, r0, r9, asr r6
    58d4:	7b050804 	blvc	1478ec <__bss_end+0x9a614>
    58d8:	04000001 	streq	r0, [r0], #-1
    58dc:	01a90408 			; <UNDEFINED> instruction: 0x01a90408
    58e0:	01040000 	mrseq	r0, (UNDEF: 4)
    58e4:	00066806 	andeq	r6, r6, r6, lsl #16
    58e8:	08010400 	stmdaeq	r1, {sl}
    58ec:	00000666 	andeq	r0, r0, r6, ror #12
    58f0:	31050204 	tstcc	r5, r4, lsl #4
    58f4:	04000007 	streq	r0, [r0], #-7
    58f8:	009b0702 	addseq	r0, fp, r2, lsl #14
    58fc:	04040000 	streq	r0, [r4], #-0
    5900:	00018005 	andeq	r8, r1, r5
    5904:	07040400 	streq	r0, [r4, -r0, lsl #8]
    5908:	00000654 	andeq	r0, r0, r4, asr r6
    590c:	4f070804 	svcmi	0x00070804
    5910:	04000006 	streq	r0, [r0], #-6
    5914:	066f0801 	strbteq	r0, [pc], -r1, lsl #16
    5918:	7e050000 	cdpvc	0, 0, cr0, cr5, cr0, {0}
    591c:	06000000 	streq	r0, [r0], -r0
    5920:	00008504 	andeq	r8, r0, r4, lsl #10
    5924:	211e0700 	tstcs	lr, r0, lsl #14
    5928:	29030000 	stmdbcs	r3, {}	; <UNPREDICTABLE>
    592c:	00002c09 	andeq	r2, r0, r9, lsl #24
    5930:	02b6d000 	adcseq	sp, r6, #0
    5934:	00006000 	andeq	r6, r0, r0
    5938:	089c0100 	ldmeq	ip, {r8}
    593c:	00727473 	rsbseq	r7, r2, r3, ror r4
    5940:	8a153701 	bhi	55354c <__bss_end+0x4a6274>
    5944:	f3000000 	vhadd.u8	d0, d0, d0
    5948:	ef000008 	svc	0x00000008
    594c:	00000008 	andeq	r0, r0, r8
    5950:	00014f00 	andeq	r4, r1, r0, lsl #30
    5954:	1d000400 	cfstrsne	mvf0, [r0, #-0]
    5958:	04000015 	streq	r0, [r0], #-21	; 0xffffffeb
    595c:	001f8f01 	andseq	r8, pc, r1, lsl #30
    5960:	21650c00 	cmncs	r5, r0, lsl #24
    5964:	1f1b0000 	svcne	0x001b0000
    5968:	b7300000 	ldrlt	r0, [r0, -r0]!
    596c:	00cc0002 	sbceq	r0, ip, r2
    5970:	4cfe0000 	ldclmi	0, cr0, [lr]
    5974:	04020000 	streq	r0, [r2], #-0
    5978:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
    597c:	07b10300 	ldreq	r0, [r1, r0, lsl #6]!
    5980:	d1020000 	mrsle	r0, (UNDEF: 2)
    5984:	00003817 	andeq	r3, r0, r7, lsl r8
    5988:	07040400 	streq	r0, [r4, -r0, lsl #8]
    598c:	00000659 	andeq	r0, r0, r9, asr r6
    5990:	7b050804 	blvc	1479a8 <__bss_end+0x9a6d0>
    5994:	04000001 	streq	r0, [r0], #-1
    5998:	01a90408 			; <UNDEFINED> instruction: 0x01a90408
    599c:	01040000 	mrseq	r0, (UNDEF: 4)
    59a0:	00066806 	andeq	r6, r6, r6, lsl #16
    59a4:	08010400 	stmdaeq	r1, {sl}
    59a8:	00000666 	andeq	r0, r0, r6, ror #12
    59ac:	31050204 	tstcc	r5, r4, lsl #4
    59b0:	04000007 	streq	r0, [r0], #-7
    59b4:	009b0702 	addseq	r0, fp, r2, lsl #14
    59b8:	04040000 	streq	r0, [r4], #-0
    59bc:	00018005 	andeq	r8, r1, r5
    59c0:	00690500 	rsbeq	r0, r9, r0, lsl #10
    59c4:	04040000 	streq	r0, [r4], #-0
    59c8:	00065407 	andeq	r5, r6, r7, lsl #8
    59cc:	07080400 	streq	r0, [r8, -r0, lsl #8]
    59d0:	0000064f 	andeq	r0, r0, pc, asr #12
    59d4:	008e0406 	addeq	r0, lr, r6, lsl #8
    59d8:	83070000 	movwhi	r0, #28672	; 0x7000
    59dc:	04000000 	streq	r0, [r0], #-0
    59e0:	066f0801 	strbteq	r0, [pc], -r1, lsl #16
    59e4:	8e050000 	cdphi	0, 0, cr0, cr5, cr0, {0}
    59e8:	06000000 	streq	r0, [r0], -r0
    59ec:	00009504 	andeq	r9, r0, r4, lsl #10
    59f0:	009a0700 	addseq	r0, sl, r0, lsl #14
    59f4:	5d080000 	stcpl	0, cr0, [r8, #-0]
    59f8:	03000021 	movweq	r0, #33	; 0x21
    59fc:	0083082c 	addeq	r0, r3, ip, lsr #16
    5a00:	b7300000 	ldrlt	r0, [r0, -r0]!
    5a04:	00cc0002 	sbceq	r0, ip, r2
    5a08:	9c010000 	stcls	0, cr0, [r1], {-0}
    5a0c:	00000146 	andeq	r0, r0, r6, asr #2
    5a10:	00203609 	eoreq	r3, r0, r9, lsl #12
    5a14:	1b3e0100 	blne	f85e1c <__bss_end+0xed8b44>
    5a18:	00000089 	andeq	r0, r0, r9, lsl #1
    5a1c:	f90a5001 			; <UNDEFINED> instruction: 0xf90a5001
    5a20:	0100001f 	tsteq	r0, pc, lsl r0
    5a24:	00a0193f 	adceq	r1, r0, pc, lsr r9
    5a28:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
    5a2c:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    5a30:	4a0a0000 	bmi	285a38 <__bss_end+0x1d8760>
    5a34:	0100001d 	tsteq	r0, sp, lsl r0
    5a38:	002c0940 	eoreq	r0, ip, r0, asr #18
    5a3c:	09620000 	stmdbeq	r2!, {}^	; <UNPREDICTABLE>
    5a40:	09560000 	ldmdbeq	r6, {}^	; <UNPREDICTABLE>
    5a44:	640b0000 	strvs	r0, [fp], #-0
    5a48:	01007473 	tsteq	r0, r3, ror r4
    5a4c:	00830953 	addeq	r0, r3, r3, asr r9
    5a50:	09be0000 	ldmibeq	lr!, {}	; <UNPREDICTABLE>
    5a54:	09ae0000 	stmibeq	lr!, {}	; <UNPREDICTABLE>
    5a58:	730b0000 	movwvc	r0, #45056	; 0xb000
    5a5c:	01006372 	tsteq	r0, r2, ror r3
    5a60:	009a0f54 	addseq	r0, sl, r4, asr pc
    5a64:	0a2a0000 	beq	a85a6c <__bss_end+0x9d8794>
    5a68:	0a200000 	beq	805a70 <__bss_end+0x758798>
    5a6c:	3b0c0000 	blcc	305a74 <__bss_end+0x25879c>
    5a70:	01000020 	tsteq	r0, r0, lsr #32
    5a74:	01460955 	cmpeq	r6, r5, asr r9
    5a78:	0a6f0000 	beq	1bc5a80 <__bss_end+0x1b187a8>
    5a7c:	0a690000 	beq	1a45a84 <__bss_end+0x19987ac>
    5a80:	470c0000 	strmi	r0, [ip, -r0]
    5a84:	01000020 	tsteq	r0, r0, lsr #32
    5a88:	014c0f56 	cmpeq	ip, r6, asr pc
    5a8c:	0aa00000 	beq	fe805a94 <_estack+0xf67e5a94>
    5a90:	0a9a0000 	beq	fe685a98 <_estack+0xf6665a98>
    5a94:	06000000 	streq	r0, [r0], -r0
    5a98:	00006904 	andeq	r6, r0, r4, lsl #18
    5a9c:	70040600 	andvc	r0, r4, r0, lsl #12
    5aa0:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
       4:	030b130e 	movweq	r1, #45838	; 0xb30e
       8:	110e1b0e 	tstne	lr, lr, lsl #22
       c:	10061201 	andne	r1, r6, r1, lsl #4
      10:	02000017 	andeq	r0, r0, #23
      14:	0b0b0024 	bleq	2c00ac <__bss_end+0x212dd4>
      18:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
      1c:	24030000 	strcs	r0, [r3], #-0
      20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
      24:	000e030b 	andeq	r0, lr, fp, lsl #6
      28:	00160400 	andseq	r0, r6, r0, lsl #8
      2c:	0b3a0e03 	bleq	e83840 <__bss_end+0xdd6568>
      30:	0b390b3b 	bleq	e42d24 <__bss_end+0xd95a4c>
      34:	00001349 	andeq	r1, r0, r9, asr #6
      38:	0b000f05 	bleq	3c54 <_start-0xc3ac>
      3c:	0013490b 	andseq	r4, r3, fp, lsl #18
      40:	01150600 	tsteq	r5, r0, lsl #12
      44:	13011927 	movwne	r1, #6439	; 0x1927
      48:	05070000 	streq	r0, [r7, #-0]
      4c:	00134900 	andseq	r4, r3, r0, lsl #18
      50:	000f0800 	andeq	r0, pc, r0, lsl #16
      54:	00000b0b 	andeq	r0, r0, fp, lsl #22
      58:	03011309 	movweq	r1, #4873	; 0x1309
      5c:	3a0b0b0e 	bcc	2c2c9c <__bss_end+0x2159c4>
      60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      64:	0013010b 	andseq	r0, r3, fp, lsl #2
      68:	000d0a00 	andeq	r0, sp, r0, lsl #20
      6c:	0b3a0803 	bleq	e82080 <__bss_end+0xdd4da8>
      70:	0b390b3b 	bleq	e42d64 <__bss_end+0xd95a8c>
      74:	0b381349 	bleq	e04da0 <__bss_end+0xd57ac8>
      78:	350b0000 	strcc	r0, [fp, #-0]
      7c:	00134900 	andseq	r4, r3, r0, lsl #18
      80:	00340c00 	eorseq	r0, r4, r0, lsl #24
      84:	0b3a0e03 	bleq	e83898 <__bss_end+0xdd65c0>
      88:	0b390b3b 	bleq	e42d7c <__bss_end+0xd95aa4>
      8c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
      90:	260d0000 	strcs	r0, [sp], -r0
      94:	00134900 	andseq	r4, r3, r0, lsl #18
      98:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
      9c:	0b3a0e03 	bleq	e838b0 <__bss_end+0xdd65d8>
      a0:	0b390b3b 	bleq	e42d94 <__bss_end+0xd95abc>
      a4:	01111927 	tsteq	r1, r7, lsr #18
      a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      ac:	01194296 			; <UNDEFINED> instruction: 0x01194296
      b0:	0f000013 	svceq	0x00000013
      b4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
      b8:	0b3a0e03 	bleq	e838cc <__bss_end+0xdd65f4>
      bc:	0b390b3b 	bleq	e42db0 <__bss_end+0xd95ad8>
      c0:	01111927 	tsteq	r1, r7, lsr #18
      c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
      c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
      cc:	10000013 	andne	r0, r0, r3, lsl r0
      d0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
      d4:	0b3b0b3a 	bleq	ec2dc4 <__bss_end+0xe15aec>
      d8:	13490b39 	movtne	r0, #39737	; 0x9b39
      dc:	00001802 	andeq	r1, r0, r2, lsl #16
      e0:	3f002e11 	svccc	0x00002e11
      e4:	3a0e0319 	bcc	380d50 <__bss_end+0x2d3a78>
      e8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      ec:	1119270b 	tstne	r9, fp, lsl #14
      f0:	40061201 	andmi	r1, r6, r1, lsl #4
      f4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
      f8:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
      fc:	03193f00 	tsteq	r9, #0, 30
     100:	3b0b3a0e 	blcc	2ce940 <__bss_end+0x221668>
     104:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     108:	11134919 	tstne	r3, r9, lsl r9
     10c:	40061201 	andmi	r1, r6, r1, lsl #4
     110:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     114:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     118:	03193f01 	tsteq	r9, #1, 30
     11c:	3b0b3a0e 	blcc	2ce95c <__bss_end+0x221684>
     120:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     124:	11134919 	tstne	r3, r9, lsl r9
     128:	40061201 	andmi	r1, r6, r1, lsl #4
     12c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     130:	01000000 	mrseq	r0, (UNDEF: 0)
     134:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     138:	0e030b13 	vmoveq.32	d3[0], r0
     13c:	01110e1b 	tsteq	r1, fp, lsl lr
     140:	17100612 			; <UNDEFINED> instruction: 0x17100612
     144:	24020000 	strcs	r0, [r2], #-0
     148:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     14c:	0008030b 	andeq	r0, r8, fp, lsl #6
     150:	00240300 	eoreq	r0, r4, r0, lsl #6
     154:	0b3e0b0b 	bleq	f82d88 <__bss_end+0xed5ab0>
     158:	00000e03 	andeq	r0, r0, r3, lsl #28
     15c:	49003504 	stmdbmi	r0, {r2, r8, sl, ip, sp}
     160:	05000013 	streq	r0, [r0, #-19]	; 0xffffffed
     164:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     168:	0b3b0b3a 	bleq	ec2e58 <__bss_end+0xe15b80>
     16c:	13490b39 	movtne	r0, #39737	; 0x9b39
     170:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     174:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     178:	03193f00 	tsteq	r9, #0, 30
     17c:	3b0b3a0e 	blcc	2ce9bc <__bss_end+0x2216e4>
     180:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     184:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     188:	97184006 	ldrls	r4, [r8, -r6]
     18c:	00001942 	andeq	r1, r0, r2, asr #18
     190:	3f012e07 	svccc	0x00012e07
     194:	3a0e0319 	bcc	380e00 <__bss_end+0x2d3b28>
     198:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     19c:	1119270b 	tstne	r9, fp, lsl #14
     1a0:	40061201 	andmi	r1, r6, r1, lsl #4
     1a4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     1a8:	00001301 	andeq	r1, r0, r1, lsl #6
     1ac:	11010b08 	tstne	r1, r8, lsl #22
     1b0:	01061201 	tsteq	r6, r1, lsl #4
     1b4:	09000013 	stmdbeq	r0, {r0, r1, r4}
     1b8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     1bc:	0b3b0b3a 	bleq	ec2eac <__bss_end+0xe15bd4>
     1c0:	13490b39 	movtne	r0, #39737	; 0x9b39
     1c4:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     1c8:	0b0a0000 	bleq	2801d0 <__bss_end+0x1d2ef8>
     1cc:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1d0:	0b000006 	bleq	1f0 <_start-0xfe10>
     1d4:	0b0b000f 	bleq	2c0218 <__bss_end+0x212f40>
     1d8:	00001349 	andeq	r1, r0, r9, asr #6
     1dc:	0000350c 	andeq	r3, r0, ip, lsl #10
     1e0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
     1e4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     1e8:	0b3b0b3a 	bleq	ec2ed8 <__bss_end+0xe15c00>
     1ec:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     1f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     1f4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     1f8:	00130119 	andseq	r0, r3, r9, lsl r1
     1fc:	012e0e00 			; <UNDEFINED> instruction: 0x012e0e00
     200:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     204:	0b3b0b3a 	bleq	ec2ef4 <__bss_end+0xe15c1c>
     208:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     20c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     210:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     214:	00000019 	andeq	r0, r0, r9, lsl r0
     218:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     21c:	030b130e 	movweq	r1, #45838	; 0xb30e
     220:	110e1b0e 	tstne	lr, lr, lsl #22
     224:	10061201 	andne	r1, r6, r1, lsl #4
     228:	02000017 	andeq	r0, r0, #23
     22c:	0b0b0024 	bleq	2c02c4 <__bss_end+0x212fec>
     230:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     234:	24030000 	strcs	r0, [r3], #-0
     238:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     23c:	000e030b 	andeq	r0, lr, fp, lsl #6
     240:	000f0400 	andeq	r0, pc, r0, lsl #8
     244:	00000b0b 	andeq	r0, r0, fp, lsl #22
     248:	03001605 	movweq	r1, #1541	; 0x605
     24c:	3b0b3a0e 	blcc	2cea8c <__bss_end+0x2217b4>
     250:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     254:	06000013 			; <UNDEFINED> instruction: 0x06000013
     258:	13490035 	movtne	r0, #36917	; 0x9035
     25c:	13070000 	movwne	r0, #28672	; 0x7000
     260:	0b0e0301 	bleq	380e6c <__bss_end+0x2d3b94>
     264:	3b0b3a0b 	blcc	2cea98 <__bss_end+0x2217c0>
     268:	010b390b 	tsteq	fp, fp, lsl #18
     26c:	08000013 	stmdaeq	r0, {r0, r1, r4}
     270:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     274:	0b3b0b3a 	bleq	ec2f64 <__bss_end+0xe15c8c>
     278:	13490b39 	movtne	r0, #39737	; 0x9b39
     27c:	00000b38 	andeq	r0, r0, r8, lsr fp
     280:	0b000f09 	bleq	3eac <_start-0xc154>
     284:	0013490b 	andseq	r4, r3, fp, lsl #18
     288:	00260a00 	eoreq	r0, r6, r0, lsl #20
     28c:	00001349 	andeq	r1, r0, r9, asr #6
     290:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
     294:	00130119 	andseq	r0, r3, r9, lsl r1
     298:	00050c00 	andeq	r0, r5, r0, lsl #24
     29c:	00001349 	andeq	r1, r0, r9, asr #6
     2a0:	4901010d 	stmdbmi	r1, {r0, r2, r3, r8}
     2a4:	00130113 	andseq	r0, r3, r3, lsl r1
     2a8:	00210e00 	eoreq	r0, r1, r0, lsl #28
     2ac:	0b2f1349 	bleq	bc4fd8 <__bss_end+0xb17d00>
     2b0:	340f0000 	strcc	r0, [pc], #-0	; 2b8 <_start-0xfd48>
     2b4:	3a0e0300 	bcc	380ebc <__bss_end+0x2d3be4>
     2b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2bc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     2c0:	10000018 	andne	r0, r0, r8, lsl r0
     2c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2c8:	0b3b0b3a 	bleq	ec2fb8 <__bss_end+0xe15ce0>
     2cc:	13490b39 	movtne	r0, #39737	; 0x9b39
     2d0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     2d4:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     2d8:	03193f01 	tsteq	r9, #1, 30
     2dc:	3b0b3a0e 	blcc	2ceb1c <__bss_end+0x221844>
     2e0:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     2e4:	11134919 	tstne	r3, r9, lsl r9
     2e8:	40061201 	andmi	r1, r6, r1, lsl #4
     2ec:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     2f0:	00001301 	andeq	r1, r0, r1, lsl #6
     2f4:	03000512 	movweq	r0, #1298	; 0x512
     2f8:	3b0b3a0e 	blcc	2ceb38 <__bss_end+0x221860>
     2fc:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     300:	00180213 	andseq	r0, r8, r3, lsl r2
     304:	00341300 	eorseq	r1, r4, r0, lsl #6
     308:	0b3a0e03 	bleq	e83b1c <__bss_end+0xdd6844>
     30c:	0b39053b 	bleq	e41800 <__bss_end+0xd94528>
     310:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     314:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     318:	3a0e0301 	bcc	380f24 <__bss_end+0x2d3c4c>
     31c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     320:	1119270b 	tstne	r9, fp, lsl #14
     324:	40061201 	andmi	r1, r6, r1, lsl #4
     328:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     32c:	00001301 	andeq	r1, r0, r1, lsl #6
     330:	3f012e15 	svccc	0x00012e15
     334:	3a0e0319 	bcc	380fa0 <__bss_end+0x2d3cc8>
     338:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     33c:	1119270b 	tstne	r9, fp, lsl #14
     340:	40061201 	andmi	r1, r6, r1, lsl #4
     344:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     348:	00001301 	andeq	r1, r0, r1, lsl #6
     34c:	11010b16 	tstne	r1, r6, lsl fp
     350:	00061201 	andeq	r1, r6, r1, lsl #4
     354:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
     358:	0b3a0e03 	bleq	e83b6c <__bss_end+0xdd6894>
     35c:	0b390b3b 	bleq	e43050 <__bss_end+0xd95d78>
     360:	01111927 	tsteq	r1, r7, lsr #18
     364:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     368:	01194296 			; <UNDEFINED> instruction: 0x01194296
     36c:	18000013 	stmdane	r0, {r0, r1, r4}
     370:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     374:	0b3a0e03 	bleq	e83b88 <__bss_end+0xdd68b0>
     378:	0b390b3b 	bleq	e4306c <__bss_end+0xd95d94>
     37c:	01111927 	tsteq	r1, r7, lsr #18
     380:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     384:	01194296 			; <UNDEFINED> instruction: 0x01194296
     388:	19000013 	stmdbne	r0, {r0, r1, r4}
     38c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     390:	0b3b0b3a 	bleq	ec3080 <__bss_end+0xe15da8>
     394:	13490b39 	movtne	r0, #39737	; 0x9b39
     398:	00001802 	andeq	r1, r0, r2, lsl #16
     39c:	3f012e1a 	svccc	0x00012e1a
     3a0:	3a0e0319 	bcc	38100c <__bss_end+0x2d3d34>
     3a4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     3a8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     3ac:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     3b0:	96184006 	ldrls	r4, [r8], -r6
     3b4:	00001942 	andeq	r1, r0, r2, asr #18
     3b8:	01110100 	tsteq	r1, r0, lsl #2
     3bc:	0b130e25 	bleq	4c3c58 <__bss_end+0x416980>
     3c0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     3c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     3c8:	00001710 	andeq	r1, r0, r0, lsl r7
     3cc:	0b002402 	bleq	93dc <_start-0x6c24>
     3d0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     3d4:	0300000e 	movweq	r0, #14
     3d8:	0b0b0024 	bleq	2c0470 <__bss_end+0x213198>
     3dc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     3e0:	35040000 	strcc	r0, [r4, #-0]
     3e4:	00134900 	andseq	r4, r3, r0, lsl #18
     3e8:	000f0500 	andeq	r0, pc, r0, lsl #10
     3ec:	00000b0b 	andeq	r0, r0, fp, lsl #22
     3f0:	03001606 	movweq	r1, #1542	; 0x606
     3f4:	3b0b3a0e 	blcc	2cec34 <__bss_end+0x22195c>
     3f8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     3fc:	07000013 	smladeq	r0, r3, r0, r0
     400:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
     404:	0b3a0b0b 	bleq	e83038 <__bss_end+0xdd5d60>
     408:	0b390b3b 	bleq	e430fc <__bss_end+0xd95e24>
     40c:	00001301 	andeq	r1, r0, r1, lsl #6
     410:	03000d08 	movweq	r0, #3336	; 0xd08
     414:	3b0b3a0e 	blcc	2cec54 <__bss_end+0x22197c>
     418:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     41c:	000b3813 	andeq	r3, fp, r3, lsl r8
     420:	000f0900 	andeq	r0, pc, r0, lsl #18
     424:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     428:	2e0a0000 	cdpcs	0, 0, cr0, cr10, cr0, {0}
     42c:	03193f01 	tsteq	r9, #1, 30
     430:	3b0b3a0e 	blcc	2cec70 <__bss_end+0x221998>
     434:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     438:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     43c:	97184006 	ldrls	r4, [r8, -r6]
     440:	13011942 	movwne	r1, #6466	; 0x1942
     444:	050b0000 	streq	r0, [fp, #-0]
     448:	3a0e0300 	bcc	381050 <__bss_end+0x2d3d78>
     44c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     450:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     454:	0c000018 	stceq	0, cr0, [r0], {24}
     458:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     45c:	0b3b0b3a 	bleq	ec314c <__bss_end+0xe15e74>
     460:	13490b39 	movtne	r0, #39737	; 0x9b39
     464:	00001802 	andeq	r1, r0, r2, lsl #16
     468:	3f012e0d 	svccc	0x00012e0d
     46c:	3a0e0319 	bcc	3810d8 <__bss_end+0x2d3e00>
     470:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     474:	1119270b 	tstne	r9, fp, lsl #14
     478:	40061201 	andmi	r1, r6, r1, lsl #4
     47c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     480:	01000000 	mrseq	r0, (UNDEF: 0)
     484:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     488:	0e030b13 	vmoveq.32	d3[0], r0
     48c:	01110e1b 	tsteq	r1, fp, lsl lr
     490:	17100612 			; <UNDEFINED> instruction: 0x17100612
     494:	16020000 	strne	r0, [r2], -r0
     498:	3a0e0300 	bcc	3810a0 <__bss_end+0x2d3dc8>
     49c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     4a0:	0013490b 	andseq	r4, r3, fp, lsl #18
     4a4:	00240300 	eoreq	r0, r4, r0, lsl #6
     4a8:	0b3e0b0b 	bleq	f830dc <__bss_end+0xed5e04>
     4ac:	00000e03 	andeq	r0, r0, r3, lsl #28
     4b0:	0b002404 	bleq	94c8 <_start-0x6b38>
     4b4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     4b8:	05000008 	streq	r0, [r0, #-8]
     4bc:	13490035 	movtne	r0, #36917	; 0x9035
     4c0:	0f060000 	svceq	0x00060000
     4c4:	000b0b00 	andeq	r0, fp, r0, lsl #22
     4c8:	00260700 	eoreq	r0, r6, r0, lsl #14
     4cc:	00001349 	andeq	r1, r0, r9, asr #6
     4d0:	0b000f08 	bleq	40f8 <_start-0xbf08>
     4d4:	0013490b 	andseq	r4, r3, fp, lsl #18
     4d8:	00260900 	eoreq	r0, r6, r0, lsl #18
     4dc:	130a0000 	movwne	r0, #40960	; 0xa000
     4e0:	0b0e0301 	bleq	3810ec <__bss_end+0x2d3e14>
     4e4:	3b0b3a0b 	blcc	2ced18 <__bss_end+0x221a40>
     4e8:	010b390b 	tsteq	fp, fp, lsl #18
     4ec:	0b000013 	bleq	540 <_start-0xfac0>
     4f0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     4f4:	0b3b0b3a 	bleq	ec31e4 <__bss_end+0xe15f0c>
     4f8:	13490b39 	movtne	r0, #39737	; 0x9b39
     4fc:	00000b38 	andeq	r0, r0, r8, lsr fp
     500:	3f012e0c 	svccc	0x00012e0c
     504:	3a0e0319 	bcc	381170 <__bss_end+0x2d3e98>
     508:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     50c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     510:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     514:	97184006 	ldrls	r4, [r8, -r6]
     518:	13011942 	movwne	r1, #6466	; 0x1942
     51c:	050d0000 	streq	r0, [sp, #-0]
     520:	3a0e0300 	bcc	381128 <__bss_end+0x2d3e50>
     524:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     528:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     52c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     530:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     534:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     538:	13490b39 	movtne	r0, #39737	; 0x9b39
     53c:	00001802 	andeq	r1, r0, r2, lsl #16
     540:	03012e0f 	movweq	r2, #7695	; 0x1e0f
     544:	3b0b3a0e 	blcc	2ced84 <__bss_end+0x221aac>
     548:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     54c:	11134919 	tstne	r3, r9, lsl r9
     550:	40061201 	andmi	r1, r6, r1, lsl #4
     554:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     558:	00001301 	andeq	r1, r0, r1, lsl #6
     55c:	03012e10 	movweq	r2, #7696	; 0x1e10
     560:	3b0b3a0e 	blcc	2ceda0 <__bss_end+0x221ac8>
     564:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     568:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     56c:	96184006 	ldrls	r4, [r8], -r6
     570:	13011942 	movwne	r1, #6466	; 0x1942
     574:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     578:	03193f01 	tsteq	r9, #1, 30
     57c:	3b0b3a0e 	blcc	2cedbc <__bss_end+0x221ae4>
     580:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     584:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     588:	96184006 	ldrls	r4, [r8], -r6
     58c:	13011942 	movwne	r1, #6466	; 0x1942
     590:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     594:	03193f01 	tsteq	r9, #1, 30
     598:	3b0b3a0e 	blcc	2cedd8 <__bss_end+0x221b00>
     59c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     5a0:	11134919 	tstne	r3, r9, lsl r9
     5a4:	40061201 	andmi	r1, r6, r1, lsl #4
     5a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     5ac:	00001301 	andeq	r1, r0, r1, lsl #6
     5b0:	3f012e13 	svccc	0x00012e13
     5b4:	3a0e0319 	bcc	381220 <__bss_end+0x2d3f48>
     5b8:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     5bc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     5c0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     5c4:	96184006 	ldrls	r4, [r8], -r6
     5c8:	00001942 	andeq	r1, r0, r2, asr #18
     5cc:	01110100 	tsteq	r1, r0, lsl #2
     5d0:	0b130e25 	bleq	4c3e6c <__bss_end+0x416b94>
     5d4:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     5d8:	06120111 			; <UNDEFINED> instruction: 0x06120111
     5dc:	00001710 	andeq	r1, r0, r0, lsl r7
     5e0:	0b002402 	bleq	95f0 <_start-0x6a10>
     5e4:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5e8:	0300000e 	movweq	r0, #14
     5ec:	13490026 	movtne	r0, #36902	; 0x9026
     5f0:	35040000 	strcc	r0, [r4, #-0]
     5f4:	00134900 	andseq	r4, r3, r0, lsl #18
     5f8:	00240500 	eoreq	r0, r4, r0, lsl #10
     5fc:	0b3e0b0b 	bleq	f83230 <__bss_end+0xed5f58>
     600:	00000803 	andeq	r0, r0, r3, lsl #16
     604:	03001606 	movweq	r1, #1542	; 0x606
     608:	3b0b3a0e 	blcc	2cee48 <__bss_end+0x221b70>
     60c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     610:	07000013 	smladeq	r0, r3, r0, r0
     614:	0b0b000f 	bleq	2c0658 <__bss_end+0x213380>
     618:	0f080000 	svceq	0x00080000
     61c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     620:	09000013 	stmdbeq	r0, {r0, r1, r4}
     624:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     628:	00001301 	andeq	r1, r0, r1, lsl #6
     62c:	4900050a 	stmdbmi	r0, {r1, r3, r8, sl}
     630:	0b000013 	bleq	684 <_start-0xf97c>
     634:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     638:	13011349 	movwne	r1, #4937	; 0x1349
     63c:	130c0000 	movwne	r0, #49152	; 0xc000
     640:	0b0e0301 	bleq	38124c <__bss_end+0x2d3f74>
     644:	3b0b3a0b 	blcc	2cee78 <__bss_end+0x221ba0>
     648:	010b390b 	tsteq	fp, fp, lsl #18
     64c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     650:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     654:	0b3b0b3a 	bleq	ec3344 <__bss_end+0xe1606c>
     658:	13490b39 	movtne	r0, #39737	; 0x9b39
     65c:	00000b38 	andeq	r0, r0, r8, lsr fp
     660:	4901010e 	stmdbmi	r1, {r1, r2, r3, r8}
     664:	00130113 	andseq	r0, r3, r3, lsl r1
     668:	00210f00 	eoreq	r0, r1, r0, lsl #30
     66c:	0b2f1349 	bleq	bc5398 <__bss_end+0xb180c0>
     670:	34100000 	ldrcc	r0, [r0], #-0
     674:	3a0e0300 	bcc	38127c <__bss_end+0x2d3fa4>
     678:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     67c:	3f13490b 	svccc	0x0013490b
     680:	00180219 	andseq	r0, r8, r9, lsl r2
     684:	00341100 	eorseq	r1, r4, r0, lsl #2
     688:	0b3a0e03 	bleq	e83e9c <__bss_end+0xdd6bc4>
     68c:	0b390b3b 	bleq	e43380 <__bss_end+0xd960a8>
     690:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     694:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
     698:	3a0e0301 	bcc	3812a4 <__bss_end+0x2d3fcc>
     69c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     6a0:	1119270b 	tstne	r9, fp, lsl #14
     6a4:	40061201 	andmi	r1, r6, r1, lsl #4
     6a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     6ac:	00001301 	andeq	r1, r0, r1, lsl #6
     6b0:	03000513 	movweq	r0, #1299	; 0x513
     6b4:	3b0b3a0e 	blcc	2ceef4 <__bss_end+0x221c1c>
     6b8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     6bc:	00180213 	andseq	r0, r8, r3, lsl r2
     6c0:	012e1400 			; <UNDEFINED> instruction: 0x012e1400
     6c4:	0b3a0e03 	bleq	e83ed8 <__bss_end+0xdd6c00>
     6c8:	0b39053b 	bleq	e41bbc <__bss_end+0xd948e4>
     6cc:	13491927 	movtne	r1, #39207	; 0x9927
     6d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6d4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     6d8:	00130119 	andseq	r0, r3, r9, lsl r1
     6dc:	00341500 	eorseq	r1, r4, r0, lsl #10
     6e0:	0b3a0e03 	bleq	e83ef4 <__bss_end+0xdd6c1c>
     6e4:	0b39053b 	bleq	e41bd8 <__bss_end+0xd94900>
     6e8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     6ec:	0b160000 	bleq	5806f4 <__bss_end+0x4d341c>
     6f0:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     6f4:	17000006 	strne	r0, [r0, -r6]
     6f8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     6fc:	0b3a0e03 	bleq	e83f10 <__bss_end+0xdd6c38>
     700:	0b39053b 	bleq	e41bf4 <__bss_end+0xd9491c>
     704:	01111927 	tsteq	r1, r7, lsr #18
     708:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     70c:	00194297 	mulseq	r9, r7, r2
     710:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
     714:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     718:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     71c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     720:	01111349 	tsteq	r1, r9, asr #6
     724:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     728:	01194296 			; <UNDEFINED> instruction: 0x01194296
     72c:	19000013 	stmdbne	r0, {r0, r1, r4}
     730:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     734:	0b3a0e03 	bleq	e83f48 <__bss_end+0xdd6c70>
     738:	0b39053b 	bleq	e41c2c <__bss_end+0xd94954>
     73c:	01111927 	tsteq	r1, r7, lsr #18
     740:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     744:	01194297 			; <UNDEFINED> instruction: 0x01194297
     748:	1a000013 	bne	79c <_start-0xf864>
     74c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     750:	0b3a0e03 	bleq	e83f64 <__bss_end+0xdd6c8c>
     754:	0b39053b 	bleq	e41c48 <__bss_end+0xd94970>
     758:	01111927 	tsteq	r1, r7, lsr #18
     75c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     760:	01194296 			; <UNDEFINED> instruction: 0x01194296
     764:	1b000013 	blne	7b8 <_start-0xf848>
     768:	0111010b 	tsteq	r1, fp, lsl #2
     76c:	13010612 	movwne	r0, #5650	; 0x1612
     770:	2e1c0000 	cdpcs	0, 1, cr0, cr12, cr0, {0}
     774:	03193f00 	tsteq	r9, #0, 30
     778:	3b0b3a0e 	blcc	2cefb8 <__bss_end+0x221ce0>
     77c:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     780:	11134919 	tstne	r3, r9, lsl r9
     784:	40061201 	andmi	r1, r6, r1, lsl #4
     788:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     78c:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
     790:	03193f01 	tsteq	r9, #1, 30
     794:	3b0b3a0e 	blcc	2cefd4 <__bss_end+0x221cfc>
     798:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     79c:	11134919 	tstne	r3, r9, lsl r9
     7a0:	40061201 	andmi	r1, r6, r1, lsl #4
     7a4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     7a8:	00001301 	andeq	r1, r0, r1, lsl #6
     7ac:	3f002e1e 	svccc	0x00002e1e
     7b0:	3a0e0319 	bcc	38141c <__bss_end+0x2d4144>
     7b4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7b8:	1119270b 	tstne	r9, fp, lsl #14
     7bc:	40061201 	andmi	r1, r6, r1, lsl #4
     7c0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     7c4:	051f0000 	ldreq	r0, [pc, #-0]	; 7cc <_start-0xf834>
     7c8:	3a0e0300 	bcc	3813d0 <__bss_end+0x2d40f8>
     7cc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     7d0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     7d4:	00000018 	andeq	r0, r0, r8, lsl r0
     7d8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     7dc:	030b130e 	movweq	r1, #45838	; 0xb30e
     7e0:	110e1b0e 	tstne	lr, lr, lsl #22
     7e4:	10061201 	andne	r1, r6, r1, lsl #4
     7e8:	02000017 	andeq	r0, r0, #23
     7ec:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     7f0:	0b3b0b3a 	bleq	ec34e0 <__bss_end+0xe16208>
     7f4:	13490b39 	movtne	r0, #39737	; 0x9b39
     7f8:	0f030000 	svceq	0x00030000
     7fc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     800:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
     804:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     808:	00001301 	andeq	r1, r0, r1, lsl #6
     80c:	49000505 	stmdbmi	r0, {r0, r2, r8, sl}
     810:	06000013 			; <UNDEFINED> instruction: 0x06000013
     814:	0b0b0024 	bleq	2c08ac <__bss_end+0x2135d4>
     818:	0e030b3e 	vmoveq.16	d3[0], r0
     81c:	26070000 	strcs	r0, [r7], -r0
     820:	00134900 	andseq	r4, r3, r0, lsl #18
     824:	000f0800 	andeq	r0, pc, r0, lsl #16
     828:	00000b0b 	andeq	r0, r0, fp, lsl #22
     82c:	0b011309 	bleq	45458 <ramdisk+0x18180>
     830:	3b0b3a0b 	blcc	2cf064 <__bss_end+0x221d8c>
     834:	010b390b 	tsteq	fp, fp, lsl #18
     838:	0a000013 	beq	88c <_start-0xf774>
     83c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     840:	0b3b0b3a 	bleq	ec3530 <__bss_end+0xe16258>
     844:	13490b39 	movtne	r0, #39737	; 0x9b39
     848:	00000b38 	andeq	r0, r0, r8, lsr fp
     84c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
     850:	00130113 	andseq	r0, r3, r3, lsl r1
     854:	00210c00 	eoreq	r0, r1, r0, lsl #24
     858:	0b2f1349 	bleq	bc5584 <__bss_end+0xb182ac>
     85c:	340d0000 	strcc	r0, [sp], #-0
     860:	3a0e0300 	bcc	381468 <__bss_end+0x2d4190>
     864:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     868:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     86c:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     870:	13490035 	movtne	r0, #36917	; 0x9035
     874:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
     878:	03193f01 	tsteq	r9, #1, 30
     87c:	3b0b3a0e 	blcc	2cf0bc <__bss_end+0x221de4>
     880:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     884:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     888:	97184006 	ldrls	r4, [r8, -r6]
     88c:	13011942 	movwne	r1, #6466	; 0x1942
     890:	05100000 	ldreq	r0, [r0, #-0]
     894:	3a080300 	bcc	20149c <__bss_end+0x1541c4>
     898:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     89c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     8a0:	11000018 	tstne	r0, r8, lsl r0
     8a4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     8a8:	0b3a0e03 	bleq	e840bc <__bss_end+0xdd6de4>
     8ac:	0b390b3b 	bleq	e435a0 <__bss_end+0xd962c8>
     8b0:	01111927 	tsteq	r1, r7, lsr #18
     8b4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     8b8:	01194296 			; <UNDEFINED> instruction: 0x01194296
     8bc:	12000013 	andne	r0, r0, #19
     8c0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     8c4:	0b3b0b3a 	bleq	ec35b4 <__bss_end+0xe162dc>
     8c8:	13490b39 	movtne	r0, #39737	; 0x9b39
     8cc:	00001802 	andeq	r1, r0, r2, lsl #16
     8d0:	3f002e13 	svccc	0x00002e13
     8d4:	3a0e0319 	bcc	381540 <__bss_end+0x2d4268>
     8d8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8dc:	1119270b 	tstne	r9, fp, lsl #14
     8e0:	40061201 	andmi	r1, r6, r1, lsl #4
     8e4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8e8:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     8ec:	3a0e0301 	bcc	3814f8 <__bss_end+0x2d4220>
     8f0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8f4:	1119270b 	tstne	r9, fp, lsl #14
     8f8:	40061201 	andmi	r1, r6, r1, lsl #4
     8fc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     900:	0b150000 	bleq	540908 <__bss_end+0x493630>
     904:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     908:	16000006 	strne	r0, [r0], -r6
     90c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     910:	0b3b0b3a 	bleq	ec3600 <__bss_end+0xe16328>
     914:	13490b39 	movtne	r0, #39737	; 0x9b39
     918:	00001802 	andeq	r1, r0, r2, lsl #16
     91c:	01110100 	tsteq	r1, r0, lsl #2
     920:	0b130e25 	bleq	4c41bc <__bss_end+0x416ee4>
     924:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     928:	06120111 			; <UNDEFINED> instruction: 0x06120111
     92c:	00001710 	andeq	r1, r0, r0, lsl r7
     930:	03010402 	movweq	r0, #5122	; 0x1402
     934:	0b0b3e0e 	bleq	2d0174 <__bss_end+0x222e9c>
     938:	3a13490b 	bcc	4d2d6c <__bss_end+0x425a94>
     93c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     940:	0013010b 	andseq	r0, r3, fp, lsl #2
     944:	00280300 	eoreq	r0, r8, r0, lsl #6
     948:	0b1c0e03 	bleq	70415c <__bss_end+0x656e84>
     94c:	24040000 	strcs	r0, [r4], #-0
     950:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     954:	000e030b 	andeq	r0, lr, fp, lsl #6
     958:	01130500 	tsteq	r3, r0, lsl #10
     95c:	0b3a0b0b 	bleq	e83590 <__bss_end+0xdd62b8>
     960:	0b390b3b 	bleq	e43654 <__bss_end+0xd9637c>
     964:	00001301 	andeq	r1, r0, r1, lsl #6
     968:	03000d06 	movweq	r0, #3334	; 0xd06
     96c:	3b0b3a0e 	blcc	2cf1ac <__bss_end+0x221ed4>
     970:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     974:	000b3813 	andeq	r3, fp, r3, lsl r8
     978:	01010700 	tsteq	r1, r0, lsl #14
     97c:	13011349 	movwne	r1, #4937	; 0x1349
     980:	21080000 	mrscs	r0, (UNDEF: 8)
     984:	2f134900 	svccs	0x00134900
     988:	0900000b 	stmdbeq	r0, {r0, r1, r3}
     98c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     990:	0b3b0b3a 	bleq	ec3680 <__bss_end+0xe163a8>
     994:	13490b39 	movtne	r0, #39737	; 0x9b39
     998:	350a0000 	strcc	r0, [sl, #-0]
     99c:	00134900 	andseq	r4, r3, r0, lsl #18
     9a0:	00340b00 	eorseq	r0, r4, r0, lsl #22
     9a4:	0b3a0e03 	bleq	e841b8 <__bss_end+0xdd6ee0>
     9a8:	0b390b3b 	bleq	e4369c <__bss_end+0xd963c4>
     9ac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     9b0:	00001802 	andeq	r1, r0, r2, lsl #16
     9b4:	0b000f0c 	bleq	45ec <_start-0xba14>
     9b8:	0013490b 	andseq	r4, r3, fp, lsl #18
     9bc:	00260d00 	eoreq	r0, r6, r0, lsl #26
     9c0:	00001349 	andeq	r1, r0, r9, asr #6
     9c4:	3f012e0e 	svccc	0x00012e0e
     9c8:	3a0e0319 	bcc	381634 <__bss_end+0x2d435c>
     9cc:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     9d0:	1119270b 	tstne	r9, fp, lsl #14
     9d4:	40061201 	andmi	r1, r6, r1, lsl #4
     9d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     9dc:	00001301 	andeq	r1, r0, r1, lsl #6
     9e0:	0300050f 	movweq	r0, #1295	; 0x50f
     9e4:	3b0b3a0e 	blcc	2cf224 <__bss_end+0x221f4c>
     9e8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     9ec:	00180213 	andseq	r0, r8, r3, lsl r2
     9f0:	00341000 	eorseq	r1, r4, r0
     9f4:	0b3a0e03 	bleq	e84208 <__bss_end+0xdd6f30>
     9f8:	0b390b3b 	bleq	e436ec <__bss_end+0xd96414>
     9fc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     a00:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     a04:	03193f01 	tsteq	r9, #1, 30
     a08:	3b0b3a0e 	blcc	2cf248 <__bss_end+0x221f70>
     a0c:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
     a10:	11134919 	tstne	r3, r9, lsl r9
     a14:	40061201 	andmi	r1, r6, r1, lsl #4
     a18:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a1c:	00001301 	andeq	r1, r0, r1, lsl #6
     a20:	0b002412 	bleq	9a70 <_start-0x6590>
     a24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     a28:	13000008 	movwne	r0, #8
     a2c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     a30:	0b3a0e03 	bleq	e84244 <__bss_end+0xdd6f6c>
     a34:	0b390b3b 	bleq	e43728 <__bss_end+0xd96450>
     a38:	01111927 	tsteq	r1, r7, lsr #18
     a3c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     a40:	01194296 			; <UNDEFINED> instruction: 0x01194296
     a44:	14000013 	strne	r0, [r0], #-19	; 0xffffffed
     a48:	08030005 	stmdaeq	r3, {r0, r2}
     a4c:	0b3b0b3a 	bleq	ec373c <__bss_end+0xe16464>
     a50:	13490b39 	movtne	r0, #39737	; 0x9b39
     a54:	00001802 	andeq	r1, r0, r2, lsl #16
     a58:	3f012e15 	svccc	0x00012e15
     a5c:	3a0e0319 	bcc	3816c8 <__bss_end+0x2d43f0>
     a60:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a64:	1119270b 	tstne	r9, fp, lsl #14
     a68:	40061201 	andmi	r1, r6, r1, lsl #4
     a6c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a70:	34160000 	ldrcc	r0, [r6], #-0
     a74:	3a080300 	bcc	20167c <__bss_end+0x1543a4>
     a78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     a7c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     a80:	00000018 	andeq	r0, r0, r8, lsl r0
     a84:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
     a88:	030b130e 	movweq	r1, #45838	; 0xb30e
     a8c:	110e1b0e 	tstne	lr, lr, lsl #22
     a90:	10061201 	andne	r1, r6, r1, lsl #4
     a94:	02000017 	andeq	r0, r0, #23
     a98:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     a9c:	0b3b0b3a 	bleq	ec378c <__bss_end+0xe164b4>
     aa0:	13490b39 	movtne	r0, #39737	; 0x9b39
     aa4:	26030000 	strcs	r0, [r3], -r0
     aa8:	00134900 	andseq	r4, r3, r0, lsl #18
     aac:	00240400 	eoreq	r0, r4, r0, lsl #8
     ab0:	0b3e0b0b 	bleq	f836e4 <__bss_end+0xed640c>
     ab4:	00000e03 	andeq	r0, r0, r3, lsl #28
     ab8:	0b002405 	bleq	9ad4 <_start-0x652c>
     abc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ac0:	06000008 	streq	r0, [r0], -r8
     ac4:	0b0b000f 	bleq	2c0b08 <__bss_end+0x213830>
     ac8:	0f070000 	svceq	0x00070000
     acc:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     ad0:	08000013 	stmdaeq	r0, {r0, r1, r4}
     ad4:	0e030117 	mcreq	1, 0, r0, cr3, cr7, {0}
     ad8:	0b3a050b 	bleq	e81f0c <__bss_end+0xdd4c34>
     adc:	0b390b3b 	bleq	e437d0 <__bss_end+0xd964f8>
     ae0:	00001301 	andeq	r1, r0, r1, lsl #6
     ae4:	03000d09 	movweq	r0, #3337	; 0xd09
     ae8:	3b0b3a0e 	blcc	2cf328 <__bss_end+0x222050>
     aec:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     af0:	0a000013 	beq	b44 <_start-0xf4bc>
     af4:	13490035 	movtne	r0, #36917	; 0x9035
     af8:	010b0000 	mrseq	r0, (UNDEF: 11)
     afc:	01134901 	tsteq	r3, r1, lsl #18
     b00:	0c000013 	stceq	0, cr0, [r0], {19}
     b04:	13490021 	movtne	r0, #36897	; 0x9021
     b08:	0000052f 	andeq	r0, r0, pc, lsr #10
     b0c:	0300340d 	movweq	r3, #1037	; 0x40d
     b10:	3b0b3a0e 	blcc	2cf350 <__bss_end+0x222078>
     b14:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     b18:	00180213 	andseq	r0, r8, r3, lsl r2
     b1c:	01130e00 	tsteq	r3, r0, lsl #28
     b20:	0b0b0e03 	bleq	2c4334 <__bss_end+0x21705c>
     b24:	0b3b0b3a 	bleq	ec3814 <__bss_end+0xe1653c>
     b28:	13010b39 	movwne	r0, #6969	; 0x1b39
     b2c:	0d0f0000 	stceq	0, cr0, [pc, #-0]	; b34 <_start-0xf4cc>
     b30:	3a0e0300 	bcc	381738 <__bss_end+0x2d4460>
     b34:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b38:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     b3c:	1000000b 	andne	r0, r0, fp
     b40:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b44:	0b3b0b3a 	bleq	ec3834 <__bss_end+0xe1655c>
     b48:	13490b39 	movtne	r0, #39737	; 0x9b39
     b4c:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     b50:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
     b54:	3a0e0301 	bcc	381760 <__bss_end+0x2d4488>
     b58:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b5c:	1119270b 	tstne	r9, fp, lsl #14
     b60:	40061201 	andmi	r1, r6, r1, lsl #4
     b64:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b68:	00001301 	andeq	r1, r0, r1, lsl #6
     b6c:	03000512 	movweq	r0, #1298	; 0x512
     b70:	3b0b3a0e 	blcc	2cf3b0 <__bss_end+0x2220d8>
     b74:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     b78:	00180213 	andseq	r0, r8, r3, lsl r2
     b7c:	00341300 	eorseq	r1, r4, r0, lsl #6
     b80:	0b3a0e03 	bleq	e84394 <__bss_end+0xdd70bc>
     b84:	0b39053b 	bleq	e42078 <__bss_end+0xd94da0>
     b88:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     b8c:	34140000 	ldrcc	r0, [r4], #-0
     b90:	3a080300 	bcc	201798 <__bss_end+0x1544c0>
     b94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     b9c:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
     ba0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     ba4:	0b3a0e03 	bleq	e843b8 <__bss_end+0xdd70e0>
     ba8:	0b39053b 	bleq	e4209c <__bss_end+0xd94dc4>
     bac:	01111927 	tsteq	r1, r7, lsr #18
     bb0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     bb4:	00194297 	mulseq	r9, r7, r2
     bb8:	002e1600 	eoreq	r1, lr, r0, lsl #12
     bbc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     bc0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     bc4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     bc8:	01111349 	tsteq	r1, r9, asr #6
     bcc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     bd0:	00194297 	mulseq	r9, r7, r2
     bd4:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
     bd8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
     bdc:	0b3b0b3a 	bleq	ec38cc <__bss_end+0xe165f4>
     be0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     be4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     be8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     bec:	00130119 	andseq	r0, r3, r9, lsl r1
     bf0:	00051800 	andeq	r1, r5, r0, lsl #16
     bf4:	0b3a0803 	bleq	e82c08 <__bss_end+0xdd5930>
     bf8:	0b390b3b 	bleq	e438ec <__bss_end+0xd96614>
     bfc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     c00:	34190000 	ldrcc	r0, [r9], #-0
     c04:	3a080300 	bcc	20180c <__bss_end+0x154534>
     c08:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c0c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     c10:	1a000018 	bne	c78 <_start-0xf388>
     c14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     c18:	0b3a0e03 	bleq	e8442c <__bss_end+0xdd7154>
     c1c:	0b390b3b 	bleq	e43910 <__bss_end+0xd96638>
     c20:	13491927 	movtne	r1, #39207	; 0x9927
     c24:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c28:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     c2c:	1b000019 	blne	c98 <_start-0xf368>
     c30:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c34:	0b3b0b3a 	bleq	ec3924 <__bss_end+0xe1664c>
     c38:	13490b39 	movtne	r0, #39737	; 0x9b39
     c3c:	00001802 	andeq	r1, r0, r2, lsl #16
     c40:	01110100 	tsteq	r1, r0, lsl #2
     c44:	0b130e25 	bleq	4c44e0 <__bss_end+0x417208>
     c48:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     c4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c50:	00001710 	andeq	r1, r0, r0, lsl r7
     c54:	0b002402 	bleq	9c64 <_start-0x639c>
     c58:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     c5c:	03000008 	movweq	r0, #8
     c60:	0b0b0024 	bleq	2c0cf8 <__bss_end+0x213a20>
     c64:	0e030b3e 	vmoveq.16	d3[0], r0
     c68:	0f040000 	svceq	0x00040000
     c6c:	000b0b00 	andeq	r0, fp, r0, lsl #22
     c70:	00260500 	eoreq	r0, r6, r0, lsl #10
     c74:	00001349 	andeq	r1, r0, r9, asr #6
     c78:	0b000f06 	bleq	4898 <_start-0xb768>
     c7c:	0013490b 	andseq	r4, r3, fp, lsl #18
     c80:	00160700 	andseq	r0, r6, r0, lsl #14
     c84:	0b3a0e03 	bleq	e84498 <__bss_end+0xdd71c0>
     c88:	0b390b3b 	bleq	e4397c <__bss_end+0xd966a4>
     c8c:	00001349 	andeq	r1, r0, r9, asr #6
     c90:	0b011308 	bleq	458b8 <ramdisk+0x185e0>
     c94:	3b0b3a05 	blcc	2cf4b0 <__bss_end+0x2221d8>
     c98:	010b390b 	tsteq	fp, fp, lsl #18
     c9c:	09000013 	stmdbeq	r0, {r0, r1, r4}
     ca0:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     ca4:	0b3b0b3a 	bleq	ec3994 <__bss_end+0xe166bc>
     ca8:	13490b39 	movtne	r0, #39737	; 0x9b39
     cac:	00000b38 	andeq	r0, r0, r8, lsr fp
     cb0:	03000d0a 	movweq	r0, #3338	; 0xd0a
     cb4:	3b0b3a08 	blcc	2cf4dc <__bss_end+0x222204>
     cb8:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     cbc:	000b3813 	andeq	r3, fp, r3, lsl r8
     cc0:	01010b00 	tsteq	r1, r0, lsl #22
     cc4:	13011349 	movwne	r1, #4937	; 0x1349
     cc8:	210c0000 	mrscs	r0, (UNDEF: 12)
     ccc:	2f134900 	svccs	0x00134900
     cd0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
     cd4:	0b0b0113 	bleq	2c1128 <__bss_end+0x213e50>
     cd8:	0b3b0b3a 	bleq	ec39c8 <__bss_end+0xe166f0>
     cdc:	13010b39 	movwne	r0, #6969	; 0x1b39
     ce0:	160e0000 	strne	r0, [lr], -r0
     ce4:	3a080300 	bcc	2018ec <__bss_end+0x154614>
     ce8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     cec:	0013490b 	andseq	r4, r3, fp, lsl #18
     cf0:	00210f00 	eoreq	r0, r1, r0, lsl #30
     cf4:	0b2f1349 	bleq	bc5a20 <__bss_end+0xb18748>
     cf8:	16100000 	ldrne	r0, [r0], -r0
     cfc:	3a0e0300 	bcc	381904 <__bss_end+0x2d462c>
     d00:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d04:	0013490b 	andseq	r4, r3, fp, lsl #18
     d08:	01131100 	tsteq	r3, r0, lsl #2
     d0c:	0b3a0b0b 	bleq	e83940 <__bss_end+0xdd6668>
     d10:	0b39053b 	bleq	e42204 <__bss_end+0xd94f2c>
     d14:	00001301 	andeq	r1, r0, r1, lsl #6
     d18:	03000d12 	movweq	r0, #3346	; 0xd12
     d1c:	3b0b3a08 	blcc	2cf544 <__bss_end+0x22226c>
     d20:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     d24:	000b3813 	andeq	r3, fp, r3, lsl r8
     d28:	000d1300 	andeq	r1, sp, r0, lsl #6
     d2c:	0b3a0e03 	bleq	e84540 <__bss_end+0xdd7268>
     d30:	0b39053b 	bleq	e42224 <__bss_end+0xd94f4c>
     d34:	0b381349 	bleq	e05a60 <__bss_end+0xd58788>
     d38:	04140000 	ldreq	r0, [r4], #-0
     d3c:	0b0b3e01 	bleq	2d0548 <__bss_end+0x223270>
     d40:	3a13490b 	bcc	4d3174 <__bss_end+0x425e9c>
     d44:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d48:	0013010b 	andseq	r0, r3, fp, lsl #2
     d4c:	00281500 	eoreq	r1, r8, r0, lsl #10
     d50:	0b1c0e03 	bleq	704564 <__bss_end+0x65728c>
     d54:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
     d58:	03193f00 	tsteq	r9, #0, 30
     d5c:	3b0b3a0e 	blcc	2cf59c <__bss_end+0x2222c4>
     d60:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     d64:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     d68:	96184006 	ldrls	r4, [r8], -r6
     d6c:	00001942 	andeq	r1, r0, r2, asr #18
     d70:	3f012e17 	svccc	0x00012e17
     d74:	3a0e0319 	bcc	3819e0 <__bss_end+0x2d4708>
     d78:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     d7c:	1119270b 	tstne	r9, fp, lsl #14
     d80:	40061201 	andmi	r1, r6, r1, lsl #4
     d84:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     d88:	00001301 	andeq	r1, r0, r1, lsl #6
     d8c:	03000518 	movweq	r0, #1304	; 0x518
     d90:	3b0b3a0e 	blcc	2cf5d0 <__bss_end+0x2222f8>
     d94:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     d98:	00180213 	andseq	r0, r8, r3, lsl r2
     d9c:	00341900 	eorseq	r1, r4, r0, lsl #18
     da0:	0b3a0803 	bleq	e82db4 <__bss_end+0xdd5adc>
     da4:	0b390b3b 	bleq	e43a98 <__bss_end+0xd967c0>
     da8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     dac:	341a0000 	ldrcc	r0, [sl], #-0
     db0:	3a0e0300 	bcc	3819b8 <__bss_end+0x2d46e0>
     db4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     db8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     dbc:	1b000018 	blne	e24 <_start-0xf1dc>
     dc0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     dc4:	0b3a0e03 	bleq	e845d8 <__bss_end+0xdd7300>
     dc8:	0b390b3b 	bleq	e43abc <__bss_end+0xd967e4>
     dcc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
     dd0:	00001301 	andeq	r1, r0, r1, lsl #6
     dd4:	0000181c 	andeq	r1, r0, ip, lsl r8
     dd8:	010b1d00 	tsteq	fp, r0, lsl #26
     ddc:	06120111 			; <UNDEFINED> instruction: 0x06120111
     de0:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
     de4:	03193f00 	tsteq	r9, #0, 30
     de8:	3b0b3a0e 	blcc	2cf628 <__bss_end+0x222350>
     dec:	110b390b 	tstne	fp, fp, lsl #18
     df0:	40061201 	andmi	r1, r6, r1, lsl #4
     df4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     df8:	051f0000 	ldreq	r0, [pc, #-0]	; e00 <_start-0xf200>
     dfc:	3a080300 	bcc	201a04 <__bss_end+0x15472c>
     e00:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e04:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e08:	20000018 	andcs	r0, r0, r8, lsl r0
     e0c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     e10:	0b3a0e03 	bleq	e84624 <__bss_end+0xdd734c>
     e14:	0b390b3b 	bleq	e43b08 <__bss_end+0xd96830>
     e18:	01111927 	tsteq	r1, r7, lsr #18
     e1c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     e20:	00194297 	mulseq	r9, r7, r2
     e24:	11010000 	mrsne	r0, (UNDEF: 1)
     e28:	130e2501 	movwne	r2, #58625	; 0xe501
     e2c:	1b0e030b 	blne	381a60 <__bss_end+0x2d4788>
     e30:	1201110e 	andne	r1, r1, #-2147483645	; 0x80000003
     e34:	00171006 	andseq	r1, r7, r6
     e38:	00240200 	eoreq	r0, r4, r0, lsl #4
     e3c:	0b3e0b0b 	bleq	f83a70 <__bss_end+0xed6798>
     e40:	00000803 	andeq	r0, r0, r3, lsl #16
     e44:	0b002403 	bleq	9e58 <_start-0x61a8>
     e48:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e4c:	0400000e 	streq	r0, [r0], #-14
     e50:	0b0b000f 	bleq	2c0e94 <__bss_end+0x213bbc>
     e54:	26050000 	strcs	r0, [r5], -r0
     e58:	00134900 	andseq	r4, r3, r0, lsl #18
     e5c:	000f0600 	andeq	r0, pc, r0, lsl #12
     e60:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     e64:	16070000 	strne	r0, [r7], -r0
     e68:	3a0e0300 	bcc	381a70 <__bss_end+0x2d4798>
     e6c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e70:	0013490b 	andseq	r4, r3, fp, lsl #18
     e74:	01130800 	tsteq	r3, r0, lsl #16
     e78:	0b3a050b 	bleq	e822ac <__bss_end+0xdd4fd4>
     e7c:	0b390b3b 	bleq	e43b70 <__bss_end+0xd96898>
     e80:	00001301 	andeq	r1, r0, r1, lsl #6
     e84:	03000d09 	movweq	r0, #3337	; 0xd09
     e88:	3b0b3a0e 	blcc	2cf6c8 <__bss_end+0x2223f0>
     e8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
     e90:	000b3813 	andeq	r3, fp, r3, lsl r8
     e94:	000d0a00 	andeq	r0, sp, r0, lsl #20
     e98:	0b3a0803 	bleq	e82eac <__bss_end+0xdd5bd4>
     e9c:	0b390b3b 	bleq	e43b90 <__bss_end+0xd968b8>
     ea0:	0b381349 	bleq	e05bcc <__bss_end+0xd588f4>
     ea4:	010b0000 	mrseq	r0, (UNDEF: 11)
     ea8:	01134901 	tsteq	r3, r1, lsl #18
     eac:	0c000013 	stceq	0, cr0, [r0], {19}
     eb0:	13490021 	movtne	r0, #36897	; 0x9021
     eb4:	0000052f 	andeq	r0, r0, pc, lsr #10
     eb8:	0b01130d 	bleq	45af4 <ramdisk+0x1881c>
     ebc:	3b0b3a0b 	blcc	2cf6f0 <__bss_end+0x222418>
     ec0:	010b390b 	tsteq	fp, fp, lsl #18
     ec4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
     ec8:	08030016 	stmdaeq	r3, {r1, r2, r4}
     ecc:	0b3b0b3a 	bleq	ec3bbc <__bss_end+0xe168e4>
     ed0:	13490b39 	movtne	r0, #39737	; 0x9b39
     ed4:	210f0000 	mrscs	r0, CPSR
     ed8:	2f134900 	svccs	0x00134900
     edc:	1000000b 	andne	r0, r0, fp
     ee0:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     ee4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     ee8:	13490b39 	movtne	r0, #39737	; 0x9b39
     eec:	13110000 	tstne	r1, #0
     ef0:	3a0b0b01 	bcc	2c3afc <__bss_end+0x216824>
     ef4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ef8:	0013010b 	andseq	r0, r3, fp, lsl #2
     efc:	000d1200 	andeq	r1, sp, r0, lsl #4
     f00:	0b3a0803 	bleq	e82f14 <__bss_end+0xdd5c3c>
     f04:	0b39053b 	bleq	e423f8 <__bss_end+0xd95120>
     f08:	0b381349 	bleq	e05c34 <__bss_end+0xd5895c>
     f0c:	0d130000 	ldceq	0, cr0, [r3, #-0]
     f10:	3a0e0300 	bcc	381b18 <__bss_end+0x2d4840>
     f14:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f18:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     f1c:	1400000b 	strne	r0, [r0], #-11
     f20:	0b3e0104 	bleq	f81338 <__bss_end+0xed4060>
     f24:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     f28:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     f2c:	13010b39 	movwne	r0, #6969	; 0x1b39
     f30:	28150000 	ldmdacs	r5, {}	; <UNPREDICTABLE>
     f34:	1c0e0300 	stcne	3, cr0, [lr], {-0}
     f38:	1600000b 	strne	r0, [r0], -fp
     f3c:	0b3e0104 	bleq	f81354 <__bss_end+0xed407c>
     f40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     f44:	0b3b0b3a 	bleq	ec3c34 <__bss_end+0xe1695c>
     f48:	13010b39 	movwne	r0, #6969	; 0x1b39
     f4c:	34170000 	ldrcc	r0, [r7], #-0
     f50:	3a0e0300 	bcc	381b58 <__bss_end+0x2d4880>
     f54:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f58:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f5c:	18000018 	stmdane	r0, {r3, r4}
     f60:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     f64:	0b3a0e03 	bleq	e84778 <__bss_end+0xdd74a0>
     f68:	0b39053b 	bleq	e4245c <__bss_end+0xd95184>
     f6c:	13491927 	movtne	r1, #39207	; 0x9927
     f70:	06120111 			; <UNDEFINED> instruction: 0x06120111
     f74:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
     f78:	00130119 	andseq	r0, r3, r9, lsl r1
     f7c:	00051900 	andeq	r1, r5, r0, lsl #18
     f80:	0b3a0e03 	bleq	e84794 <__bss_end+0xdd74bc>
     f84:	0b39053b 	bleq	e42478 <__bss_end+0xd951a0>
     f88:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     f8c:	051a0000 	ldreq	r0, [sl, #-0]
     f90:	3a080300 	bcc	201b98 <__bss_end+0x1548c0>
     f94:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     f98:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     f9c:	1b000018 	blne	1004 <_start-0xeffc>
     fa0:	08030034 	stmdaeq	r3, {r2, r4, r5}
     fa4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fa8:	13490b39 	movtne	r0, #39737	; 0x9b39
     fac:	00001802 	andeq	r1, r0, r2, lsl #16
     fb0:	0300341c 	movweq	r3, #1052	; 0x41c
     fb4:	3b0b3a08 	blcc	2cf7dc <__bss_end+0x222504>
     fb8:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
     fbc:	1d000013 	stcne	0, cr0, [r0, #-76]	; 0xffffffb4
     fc0:	0e03012e 	adfeqsp	f0, f3, #0.5
     fc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
     fc8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
     fcc:	01111349 	tsteq	r1, r9, asr #6
     fd0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     fd4:	01194296 			; <UNDEFINED> instruction: 0x01194296
     fd8:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     fdc:	00000026 	andeq	r0, r0, r6, lsr #32
     fe0:	03012e1f 	movweq	r2, #7711	; 0x1e1f
     fe4:	3b0b3a0e 	blcc	2cf824 <__bss_end+0x22254c>
     fe8:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
     fec:	11134919 	tstne	r3, r9, lsl r9
     ff0:	40061201 	andmi	r1, r6, r1, lsl #4
     ff4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ff8:	00001301 	andeq	r1, r0, r1, lsl #6
     ffc:	03012e20 	movweq	r2, #7712	; 0x1e20
    1000:	3b0b3a0e 	blcc	2cf840 <__bss_end+0x222568>
    1004:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    1008:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
    100c:	96184006 	ldrls	r4, [r8], -r6
    1010:	13011942 	movwne	r1, #6466	; 0x1942
    1014:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
    1018:	3a0e0301 	bcc	381c24 <__bss_end+0x2d494c>
    101c:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1020:	1119270b 	tstne	r9, fp, lsl #14
    1024:	40061201 	andmi	r1, r6, r1, lsl #4
    1028:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    102c:	00001301 	andeq	r1, r0, r1, lsl #6
    1030:	03012e22 	movweq	r2, #7714	; 0x1e22
    1034:	3b0b3a0e 	blcc	2cf874 <__bss_end+0x22259c>
    1038:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
    103c:	11134919 	tstne	r3, r9, lsl r9
    1040:	40061201 	andmi	r1, r6, r1, lsl #4
    1044:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1048:	01000000 	mrseq	r0, (UNDEF: 0)
    104c:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
    1050:	0e030b13 	vmoveq.32	d3[0], r0
    1054:	01110e1b 	tsteq	r1, fp, lsl lr
    1058:	17100612 			; <UNDEFINED> instruction: 0x17100612
    105c:	24020000 	strcs	r0, [r2], #-0
    1060:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1064:	000e030b 	andeq	r0, lr, fp, lsl #6
    1068:	00160300 	andseq	r0, r6, r0, lsl #6
    106c:	0b3a0e03 	bleq	e84880 <__bss_end+0xdd75a8>
    1070:	0b390b3b 	bleq	e43d64 <__bss_end+0xd96a8c>
    1074:	00001349 	andeq	r1, r0, r9, asr #6
    1078:	0b002404 	bleq	a090 <_start-0x5f70>
    107c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1080:	05000008 	streq	r0, [r0, #-8]
    1084:	13490026 	movtne	r0, #36902	; 0x9026
    1088:	0f060000 	svceq	0x00060000
    108c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1090:	07000013 	smladeq	r0, r3, r0, r0
    1094:	0b3e0104 	bleq	f814ac <__bss_end+0xed41d4>
    1098:	13490b0b 	movtne	r0, #39691	; 0x9b0b
    109c:	0b3b0b3a 	bleq	ec3d8c <__bss_end+0xe16ab4>
    10a0:	13010b39 	movwne	r0, #6969	; 0x1b39
    10a4:	28080000 	stmdacs	r8, {}	; <UNPREDICTABLE>
    10a8:	1c0e0300 	stcne	3, cr0, [lr], {-0}
    10ac:	0900000b 	stmdbeq	r0, {r0, r1, r3}
    10b0:	0b0b000f 	bleq	2c10f4 <__bss_end+0x213e1c>
    10b4:	010a0000 	mrseq	r0, (UNDEF: 10)
    10b8:	01134901 	tsteq	r3, r1, lsl #18
    10bc:	0b000013 	bleq	1110 <_start-0xeef0>
    10c0:	13490021 	movtne	r0, #36897	; 0x9021
    10c4:	0000062f 	andeq	r0, r0, pc, lsr #12
    10c8:	0300340c 	movweq	r3, #1036	; 0x40c
    10cc:	3b0b3a0e 	blcc	2cf90c <__bss_end+0x222634>
    10d0:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    10d4:	00180213 	andseq	r0, r8, r3, lsl r2
    10d8:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
    10dc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    10e0:	0b3b0b3a 	bleq	ec3dd0 <__bss_end+0xe16af8>
    10e4:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    10e8:	01111349 	tsteq	r1, r9, asr #6
    10ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    10f4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
    10f8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    10fc:	0b3b0b3a 	bleq	ec3dec <__bss_end+0xe16b14>
    1100:	13490b39 	movtne	r0, #39737	; 0x9b39
    1104:	00001802 	andeq	r1, r0, r2, lsl #16
    1108:	0300050f 	movweq	r0, #1295	; 0x50f
    110c:	3b0b3a08 	blcc	2cf934 <__bss_end+0x22265c>
    1110:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1114:	00180213 	andseq	r0, r8, r3, lsl r2
    1118:	00341000 	eorseq	r1, r4, r0
    111c:	0b3a0803 	bleq	e83130 <__bss_end+0xdd5e58>
    1120:	0b390b3b 	bleq	e43e14 <__bss_end+0xd96b3c>
    1124:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
    1128:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
    112c:	03193f01 	tsteq	r9, #1, 30
    1130:	3b0b3a0e 	blcc	2cf970 <__bss_end+0x222698>
    1134:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
    1138:	11134919 	tstne	r3, r9, lsl r9
    113c:	40061201 	andmi	r1, r6, r1, lsl #4
    1140:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1144:	00001301 	andeq	r1, r0, r1, lsl #6
    1148:	3f012e12 	svccc	0x00012e12
    114c:	3a0e0319 	bcc	381db8 <__bss_end+0x2d4ae0>
    1150:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1154:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1158:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    115c:	97184006 	ldrls	r4, [r8, -r6]
    1160:	00001942 	andeq	r1, r0, r2, asr #18
    1164:	01110100 	tsteq	r1, r0, lsl #2
    1168:	0b130e25 	bleq	4c4a04 <__bss_end+0x41772c>
    116c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1170:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1174:	00001710 	andeq	r1, r0, r0, lsl r7
    1178:	0b002402 	bleq	a188 <_start-0x5e78>
    117c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1180:	0300000e 	movweq	r0, #14
    1184:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1188:	0b3b0b3a 	bleq	ec3e78 <__bss_end+0xe16ba0>
    118c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1190:	24040000 	strcs	r0, [r4], #-0
    1194:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1198:	0008030b 	andeq	r0, r8, fp, lsl #6
    119c:	002e0500 	eoreq	r0, lr, r0, lsl #10
    11a0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    11a4:	0b3b0b3a 	bleq	ec3e94 <__bss_end+0xe16bbc>
    11a8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    11ac:	01111349 	tsteq	r1, r9, asr #6
    11b0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    11b4:	00194297 	mulseq	r9, r7, r2
    11b8:	11010000 	mrsne	r0, (UNDEF: 1)
    11bc:	130e2501 	movwne	r2, #58625	; 0xe501
    11c0:	1b0e030b 	blne	381df4 <__bss_end+0x2d4b1c>
    11c4:	0017100e 	andseq	r1, r7, lr
    11c8:	00240200 	eoreq	r0, r4, r0, lsl #4
    11cc:	0b3e0b0b 	bleq	f83e00 <__bss_end+0xed6b28>
    11d0:	00000e03 	andeq	r0, r0, r3, lsl #28
    11d4:	0b002403 	bleq	a1e8 <_start-0x5e18>
    11d8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    11dc:	00000008 	andeq	r0, r0, r8
    11e0:	10001101 	andne	r1, r0, r1, lsl #2
    11e4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    11e8:	1b0e0301 	blne	381df4 <__bss_end+0x2d4b1c>
    11ec:	130e250e 	movwne	r2, #58638	; 0xe50e
    11f0:	00000005 	andeq	r0, r0, r5
    11f4:	10001101 	andne	r1, r0, r1, lsl #2
    11f8:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
    11fc:	1b0e0301 	blne	381e08 <__bss_end+0x2d4b30>
    1200:	130e250e 	movwne	r2, #58638	; 0xe50e
    1204:	00000005 	andeq	r0, r0, r5
    1208:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    120c:	030b130e 	movweq	r1, #45838	; 0xb30e
    1210:	110e1b0e 	tstne	lr, lr, lsl #22
    1214:	10061201 	andne	r1, r6, r1, lsl #4
    1218:	02000017 	andeq	r0, r0, #23
    121c:	0b0b0024 	bleq	2c12b4 <__bss_end+0x213fdc>
    1220:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1224:	16030000 	strne	r0, [r3], -r0
    1228:	3a0e0300 	bcc	381e30 <__bss_end+0x2d4b58>
    122c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1230:	0013490b 	andseq	r4, r3, fp, lsl #18
    1234:	00240400 	eoreq	r0, r4, r0, lsl #8
    1238:	0b3e0b0b 	bleq	f83e6c <__bss_end+0xed6b94>
    123c:	00000e03 	andeq	r0, r0, r3, lsl #28
    1240:	0b000f05 	bleq	4e5c <_start-0xb1a4>
    1244:	0013490b 	andseq	r4, r3, fp, lsl #18
    1248:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
    124c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1250:	0b3b0b3a 	bleq	ec3f40 <__bss_end+0xe16c68>
    1254:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1258:	01111349 	tsteq	r1, r9, asr #6
    125c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1260:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1264:	07000013 	smladeq	r0, r3, r0, r0
    1268:	08030005 	stmdaeq	r3, {r0, r2}
    126c:	0b3b0b3a 	bleq	ec3f5c <__bss_end+0xe16c84>
    1270:	13490b39 	movtne	r0, #39737	; 0x9b39
    1274:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1278:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    127c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1280:	0b3b0b3a 	bleq	ec3f70 <__bss_end+0xe16c98>
    1284:	13490b39 	movtne	r0, #39737	; 0x9b39
    1288:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    128c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    1290:	00000026 	andeq	r0, r0, r6, lsr #32
    1294:	01110100 	tsteq	r1, r0, lsl #2
    1298:	0b130e25 	bleq	4c4b34 <__bss_end+0x41785c>
    129c:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    12a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
    12a4:	00001710 	andeq	r1, r0, r0, lsl r7
    12a8:	0b002402 	bleq	a2b8 <_start-0x5d48>
    12ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    12b0:	03000008 	movweq	r0, #8
    12b4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    12b8:	0b3b0b3a 	bleq	ec3fa8 <__bss_end+0xe16cd0>
    12bc:	13490b39 	movtne	r0, #39737	; 0x9b39
    12c0:	24040000 	strcs	r0, [r4], #-0
    12c4:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    12c8:	000e030b 	andeq	r0, lr, fp, lsl #6
    12cc:	00260500 	eoreq	r0, r6, r0, lsl #10
    12d0:	00001349 	andeq	r1, r0, r9, asr #6
    12d4:	0b000f06 	bleq	4ef4 <_start-0xb10c>
    12d8:	0700000b 	streq	r0, [r0, -fp]
    12dc:	13490037 	movtne	r0, #36919	; 0x9037
    12e0:	0f080000 	svceq	0x00080000
    12e4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    12e8:	09000013 	stmdbeq	r0, {r0, r1, r4}
    12ec:	00000026 	andeq	r0, r0, r6, lsr #32
    12f0:	3f012e0a 	svccc	0x00012e0a
    12f4:	3a0e0319 	bcc	381f60 <__bss_end+0x2d4c88>
    12f8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12fc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1300:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1304:	97184006 	ldrls	r4, [r8, -r6]
    1308:	13011942 	movwne	r1, #6466	; 0x1942
    130c:	050b0000 	streq	r0, [fp, #-0]
    1310:	3a0e0300 	bcc	381f18 <__bss_end+0x2d4c40>
    1314:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1318:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    131c:	0c000018 	stceq	0, cr0, [r0], {24}
    1320:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1324:	0b3b0b3a 	bleq	ec4014 <__bss_end+0xe16d3c>
    1328:	13490b39 	movtne	r0, #39737	; 0x9b39
    132c:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1330:	0d000017 	stceq	0, cr0, [r0, #-92]	; 0xffffffa4
    1334:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1338:	0b3b0b3a 	bleq	ec4028 <__bss_end+0xe16d50>
    133c:	13490b39 	movtne	r0, #39737	; 0x9b39
    1340:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1344:	0e000017 	mcreq	0, 0, r0, cr0, cr7, {0}
    1348:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    134c:	0b3b0b3a 	bleq	ec403c <__bss_end+0xe16d64>
    1350:	13490b39 	movtne	r0, #39737	; 0x9b39
    1354:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1358:	00000017 	andeq	r0, r0, r7, lsl r0
    135c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1360:	030b130e 	movweq	r1, #45838	; 0xb30e
    1364:	110e1b0e 	tstne	lr, lr, lsl #22
    1368:	10061201 	andne	r1, r6, r1, lsl #4
    136c:	02000017 	andeq	r0, r0, #23
    1370:	0b0b0024 	bleq	2c1408 <__bss_end+0x214130>
    1374:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    1378:	16030000 	strne	r0, [r3], -r0
    137c:	3a0e0300 	bcc	381f84 <__bss_end+0x2d4cac>
    1380:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1384:	0013490b 	andseq	r4, r3, fp, lsl #18
    1388:	00240400 	eoreq	r0, r4, r0, lsl #8
    138c:	0b3e0b0b 	bleq	f83fc0 <__bss_end+0xed6ce8>
    1390:	00000e03 	andeq	r0, r0, r3, lsl #28
    1394:	0b000f05 	bleq	4fb0 <_start-0xb050>
    1398:	0600000b 	streq	r0, [r0], -fp
    139c:	0b0b000f 	bleq	2c13e0 <__bss_end+0x214108>
    13a0:	00001349 	andeq	r1, r0, r9, asr #6
    13a4:	3f012e07 	svccc	0x00012e07
    13a8:	3a0e0319 	bcc	382014 <__bss_end+0x2d4d3c>
    13ac:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13b0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    13b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    13b8:	97184006 	ldrls	r4, [r8, -r6]
    13bc:	13011942 	movwne	r1, #6466	; 0x1942
    13c0:	05080000 	streq	r0, [r8, #-0]
    13c4:	3a080300 	bcc	201fcc <__bss_end+0x154cf4>
    13c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    13d0:	09000018 	stmdbeq	r0, {r3, r4}
    13d4:	08030005 	stmdaeq	r3, {r0, r2}
    13d8:	0b3b0b3a 	bleq	ec40c8 <__bss_end+0xe16df0>
    13dc:	13490b39 	movtne	r0, #39737	; 0x9b39
    13e0:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    13e4:	0a000017 	beq	1448 <_start-0xebb8>
    13e8:	08030034 	stmdaeq	r3, {r2, r4, r5}
    13ec:	0b3b0b3a 	bleq	ec40dc <__bss_end+0xe16e04>
    13f0:	13490b39 	movtne	r0, #39737	; 0x9b39
    13f4:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    13f8:	0b000017 	bleq	145c <_start-0xeba4>
    13fc:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1400:	0b3b0b3a 	bleq	ec40f0 <__bss_end+0xe16e18>
    1404:	13490b39 	movtne	r0, #39737	; 0x9b39
    1408:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    140c:	00000017 	andeq	r0, r0, r7, lsl r0
    1410:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    1414:	030b130e 	movweq	r1, #45838	; 0xb30e
    1418:	110e1b0e 	tstne	lr, lr, lsl #22
    141c:	10061201 	andne	r1, r6, r1, lsl #4
    1420:	02000017 	andeq	r0, r0, #23
    1424:	0b0b0024 	bleq	2c14bc <__bss_end+0x2141e4>
    1428:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    142c:	24030000 	strcs	r0, [r3], #-0
    1430:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1434:	000e030b 	andeq	r0, lr, fp, lsl #6
    1438:	00260400 	eoreq	r0, r6, r0, lsl #8
    143c:	00001349 	andeq	r1, r0, r9, asr #6
    1440:	0b000f05 	bleq	505c <_start-0xafa4>
    1444:	0013490b 	andseq	r4, r3, fp, lsl #18
    1448:	012e0600 			; <UNDEFINED> instruction: 0x012e0600
    144c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
    1450:	0b3b0b3a 	bleq	ec4140 <__bss_end+0xe16e68>
    1454:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
    1458:	01111349 	tsteq	r1, r9, asr #6
    145c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1460:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1464:	07000013 	smladeq	r0, r3, r0, r0
    1468:	08030005 	stmdaeq	r3, {r0, r2}
    146c:	0b3b0b3a 	bleq	ec415c <__bss_end+0xe16e84>
    1470:	13490b39 	movtne	r0, #39737	; 0x9b39
    1474:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    1478:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
    147c:	08030034 	stmdaeq	r3, {r2, r4, r5}
    1480:	0b3b0b3a 	bleq	ec4170 <__bss_end+0xe16e98>
    1484:	13490b39 	movtne	r0, #39737	; 0x9b39
    1488:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    148c:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
    1490:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    1494:	0b3b0b3a 	bleq	ec4184 <__bss_end+0xe16eac>
    1498:	13490b39 	movtne	r0, #39737	; 0x9b39
    149c:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    14a0:	00000017 	andeq	r0, r0, r7, lsl r0
    14a4:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
    14a8:	030b130e 	movweq	r1, #45838	; 0xb30e
    14ac:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
    14b0:	10011117 	andne	r1, r1, r7, lsl r1
    14b4:	02000017 	andeq	r0, r0, #23
    14b8:	0b0b0024 	bleq	2c1550 <__bss_end+0x214278>
    14bc:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
    14c0:	16030000 	strne	r0, [r3], -r0
    14c4:	3a0e0300 	bcc	3820cc <__bss_end+0x2d4df4>
    14c8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14cc:	0013490b 	andseq	r4, r3, fp, lsl #18
    14d0:	00240400 	eoreq	r0, r4, r0, lsl #8
    14d4:	0b3e0b0b 	bleq	f84108 <__bss_end+0xed6e30>
    14d8:	00000e03 	andeq	r0, r0, r3, lsl #28
    14dc:	49002605 	stmdbmi	r0, {r0, r2, r9, sl, sp}
    14e0:	06000013 			; <UNDEFINED> instruction: 0x06000013
    14e4:	0b0b000f 	bleq	2c1528 <__bss_end+0x214250>
    14e8:	00001349 	andeq	r1, r0, r9, asr #6
    14ec:	3f012e07 	svccc	0x00012e07
    14f0:	3a0e0319 	bcc	38215c <__bss_end+0x2d4e84>
    14f4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    14f8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    14fc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1500:	97184006 	ldrls	r4, [r8, -r6]
    1504:	00001942 	andeq	r1, r0, r2, asr #18
    1508:	03000508 	movweq	r0, #1288	; 0x508
    150c:	3b0b3a08 	blcc	2cfd34 <__bss_end+0x222a5c>
    1510:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
    1514:	b7170213 			; <UNDEFINED> instruction: 0xb7170213
    1518:	00001742 	andeq	r1, r0, r2, asr #14
    151c:	01110100 	tsteq	r1, r0, lsl #2
    1520:	0b130e25 	bleq	4c4dbc <__bss_end+0x417ae4>
    1524:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1528:	06120111 			; <UNDEFINED> instruction: 0x06120111
    152c:	00001710 	andeq	r1, r0, r0, lsl r7
    1530:	0b002402 	bleq	a540 <_start-0x5ac0>
    1534:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1538:	03000008 	movweq	r0, #8
    153c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
    1540:	0b3b0b3a 	bleq	ec4230 <__bss_end+0xe16f58>
    1544:	13490b39 	movtne	r0, #39737	; 0x9b39
    1548:	24040000 	strcs	r0, [r4], #-0
    154c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
    1550:	000e030b 	andeq	r0, lr, fp, lsl #6
    1554:	00260500 	eoreq	r0, r6, r0, lsl #10
    1558:	00001349 	andeq	r1, r0, r9, asr #6
    155c:	0b000f06 	bleq	517c <_start-0xae84>
    1560:	0013490b 	andseq	r4, r3, fp, lsl #18
    1564:	00370700 	eorseq	r0, r7, r0, lsl #14
    1568:	00001349 	andeq	r1, r0, r9, asr #6
    156c:	3f012e08 	svccc	0x00012e08
    1570:	3a0e0319 	bcc	3821dc <__bss_end+0x2d4f04>
    1574:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1578:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    157c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1580:	97184006 	ldrls	r4, [r8, -r6]
    1584:	13011942 	movwne	r1, #6466	; 0x1942
    1588:	05090000 	streq	r0, [r9, #-0]
    158c:	3a0e0300 	bcc	382194 <__bss_end+0x2d4ebc>
    1590:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1594:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1598:	0a000018 	beq	1600 <_start-0xea00>
    159c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    15a0:	0b3b0b3a 	bleq	ec4290 <__bss_end+0xe16fb8>
    15a4:	13490b39 	movtne	r0, #39737	; 0x9b39
    15a8:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    15ac:	0b000017 	bleq	1610 <_start-0xe9f0>
    15b0:	08030034 	stmdaeq	r3, {r2, r4, r5}
    15b4:	0b3b0b3a 	bleq	ec42a4 <__bss_end+0xe16fcc>
    15b8:	13490b39 	movtne	r0, #39737	; 0x9b39
    15bc:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    15c0:	0c000017 	stceq	0, cr0, [r0], {23}
    15c4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    15c8:	0b3b0b3a 	bleq	ec42b8 <__bss_end+0xe16fe0>
    15cc:	13490b39 	movtne	r0, #39737	; 0x9b39
    15d0:	42b71702 	adcsmi	r1, r7, #524288	; 0x80000
    15d4:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00020000 	andeq	r0, r2, r0
  14:	00000344 	andeq	r0, r0, r4, asr #6
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02160002 	andseq	r0, r6, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	00020344 	andeq	r0, r2, r4, asr #6
  34:	000002a4 	andeq	r0, r0, r4, lsr #5
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	03b20002 			; <UNDEFINED> instruction: 0x03b20002
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	000205f0 	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
  54:	00000764 	andeq	r0, r0, r4, ror #14
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	08610002 	stmdaeq	r1!, {r1}^
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	00020d54 	andeq	r0, r2, r4, asr sp
  74:	0000029c 	muleq	r0, ip, r2
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	0b060002 	bleq	180094 <__bss_end+0xd2dbc>
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	00020ff0 	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
  94:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	128e0002 	addne	r0, lr, #2
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	00021ba0 	andeq	r1, r2, r0, lsr #23
  b4:	00001924 	andeq	r1, r0, r4, lsr #18
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	20640002 	rsbcs	r0, r4, r2
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	000234c4 	andeq	r3, r2, r4, asr #9
  d4:	000003a4 	andeq	r0, r0, r4, lsr #7
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	233f0002 	teqcs	pc, #2
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	00023868 	andeq	r3, r2, r8, ror #16
  f4:	000005d8 	ldrdeq	r0, [r0], -r8
	...
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	27770002 	ldrbcs	r0, [r7, -r2]!
 108:	00040000 	andeq	r0, r4, r0
 10c:	00000000 	andeq	r0, r0, r0
 110:	00023e40 	andeq	r3, r2, r0, asr #28
 114:	000004ac 	andeq	r0, r0, ip, lsr #9
	...
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	2a600002 	bcs	1800134 <__bss_end+0x1752e5c>
 128:	00040000 	andeq	r0, r4, r0
 12c:	00000000 	andeq	r0, r0, r0
 130:	00024304 	andeq	r4, r2, r4, lsl #6
 134:	00000848 	andeq	r0, r0, r8, asr #16
	...
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	31610002 	cmncc	r1, r2
 148:	00040000 	andeq	r0, r4, r0
 14c:	00000000 	andeq	r0, r0, r0
 150:	00024b4c 	andeq	r4, r2, ip, asr #22
 154:	00006318 	andeq	r6, r0, r8, lsl r3
	...
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	4f790002 	svcmi	0x00790002
 168:	00040000 	andeq	r0, r4, r0
 16c:	00000000 	andeq	r0, r0, r0
 170:	0002ae64 	andeq	sl, r2, r4, ror #28
 174:	000002fc 	strdeq	r0, [r0], -ip
	...
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	522b0002 	eorpl	r0, fp, #2
 188:	00040000 	andeq	r0, r4, r0
 18c:	00000000 	andeq	r0, r0, r0
 190:	0002b160 	andeq	fp, r2, r0, ror #2
 194:	00000020 	andeq	r0, r0, r0, lsr #32
	...
 1a0:	00000014 	andeq	r0, r0, r4, lsl r0
 1a4:	52d30002 	sbcspl	r0, r3, #2
 1a8:	00040000 	andeq	r0, r4, r0
	...
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	533e0002 	teqpl	lr, #2
 1c0:	00040000 	andeq	r0, r4, r0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	0002b180 	andeq	fp, r2, r0, lsl #3
 1cc:	00000114 	andeq	r0, r0, r4, lsl r1
	...
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	53640002 	cmnpl	r4, #2
 1e0:	00040000 	andeq	r0, r4, r0
 1e4:	00000000 	andeq	r0, r0, r0
 1e8:	0002b294 	muleq	r2, r4, r2
 1ec:	00000004 	andeq	r0, r0, r4
	...
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	538a0002 	orrpl	r0, sl, #2
 200:	00040000 	andeq	r0, r4, r0
 204:	00000000 	andeq	r0, r0, r0
 208:	0002b298 	muleq	r2, r8, r2
 20c:	000000ac 	andeq	r0, r0, ip, lsr #1
	...
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	54c20002 	strbpl	r0, [r2], #2
 220:	00040000 	andeq	r0, r4, r0
 224:	00000000 	andeq	r0, r0, r0
 228:	0002b344 	andeq	fp, r2, r4, asr #6
 22c:	00000120 	andeq	r0, r0, r0, lsr #2
	...
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	561e0002 	ldrpl	r0, [lr], -r2
 240:	00040000 	andeq	r0, r4, r0
 244:	00000000 	andeq	r0, r0, r0
 248:	0002b464 	andeq	fp, r2, r4, ror #8
 24c:	0000011c 	andeq	r0, r0, ip, lsl r1
	...
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	575b0002 	ldrbpl	r0, [fp, -r2]
 260:	00040000 	andeq	r0, r4, r0
 264:	00000000 	andeq	r0, r0, r0
 268:	0002b580 	andeq	fp, r2, r0, lsl #11
 26c:	00000150 	andeq	r0, r0, r0, asr r1
	...
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	58950002 	ldmpl	r5, {r1}
 280:	00040000 	andeq	r0, r4, r0
 284:	00000000 	andeq	r0, r0, r0
 288:	0002b6d0 	ldrdeq	fp, [r2], -r0
 28c:	00000060 	andeq	r0, r0, r0, rrx
	...
 298:	0000001c 	andeq	r0, r0, ip, lsl r0
 29c:	59510002 	ldmdbpl	r1, {r1}^
 2a0:	00040000 	andeq	r0, r4, r0
 2a4:	00000000 	andeq	r0, r0, r0
 2a8:	0002b730 	andeq	fp, r2, r0, lsr r7
 2ac:	000000cc 	andeq	r0, r0, ip, asr #1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	000001dc 	ldrdeq	r0, [r0], -ip
       4:	00e30003 	rsceq	r0, r3, r3
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
      18:	2f010000 	svccs	0x00010000
      1c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
      20:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
      24:	2f796361 	svccs	0x00796361
      28:	61786548 	cmnvs	r8, r8, asr #10
      2c:	2f686372 	svccs	0x00686372
      30:	2f637273 	svccs	0x00637273
      34:	70736152 	rsbsvc	r6, r3, r2, asr r1
      38:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      3c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
      40:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      44:	534f5452 	movtpl	r5, #62546	; 0xf452
      48:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
      4c:	462f5346 	strtmi	r5, [pc], -r6, asr #6
      50:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      54:	2f534f54 	svccs	0x00534f54
      58:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
      5c:	702f6563 	eorvc	r6, pc, r3, ror #10
      60:	6174726f 	cmnvs	r4, pc, ror #4
      64:	2f656c62 	svccs	0x00656c62
      68:	2f434347 	svccs	0x00434347
      6c:	70736152 	rsbsvc	r6, r3, r2, asr r1
      70:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
      74:	00695079 	rsbeq	r5, r9, r9, ror r0
      78:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffc4 <_estack+0xf7fdffc4>
      7c:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
      80:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
      84:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
      88:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
      8c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
      90:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
      94:	72656270 	rsbvc	r6, r5, #112, 4
      98:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
      9c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
      a0:	4f545265 	svcmi	0x00545265
      a4:	61462d53 	cmpvs	r6, r3, asr sp
      a8:	2f534674 	svccs	0x00534674
      ac:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
      b0:	534f5452 	movtpl	r5, #62546	; 0xf452
      b4:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffd8d <_estack+0xf7fdfd8d>
      b8:	2f656372 	svccs	0x00656372
      bc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
      c0:	00656475 	rsbeq	r6, r5, r5, ror r4
      c4:	726f7000 	rsbvc	r7, pc, #0
      c8:	00632e74 	rsbeq	r2, r3, r4, ror lr
      cc:	70000001 	andvc	r0, r0, r1
      d0:	646a6f72 	strbtvs	r6, [sl], #-3954	; 0xfffff08e
      d4:	2e736665 	cdpcs	6, 7, cr6, cr3, cr5, {3}
      d8:	00020068 	andeq	r0, r2, r8, rrx
      dc:	726f7000 	rsbvc	r7, pc, #0
      e0:	63616d74 	cmnvs	r1, #116, 26	; 0x1d00
      e4:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
      e8:	00000100 	andeq	r0, r0, r0, lsl #2
      ec:	00010500 	andeq	r0, r1, r0, lsl #10
      f0:	00000205 	andeq	r0, r0, r5, lsl #4
      f4:	f7030002 			; <UNDEFINED> instruction: 0xf7030002
      f8:	10050100 	andne	r0, r5, r0, lsl #2
      fc:	4e0e05bd 	mcrmi	5, 0, r0, cr14, cr13, {5}
     100:	056e1205 	strbeq	r1, [lr, #-517]!	; 0xfffffdfb
     104:	10052e2c 	andne	r2, r5, ip, lsr #28
     108:	4b0e052e 	blmi	3815c8 <__bss_end+0x2d42f0>
     10c:	05681005 	strbeq	r1, [r8, #-5]!
     110:	1205670e 	andne	r6, r5, #3670016	; 0x380000
     114:	2e100567 	cfmsc32cs	mvfx0, mvfx0, mvfx7
     118:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
     11c:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     120:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     124:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     128:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     12c:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     130:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     134:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     138:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     13c:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     140:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     144:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     148:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     14c:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     150:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     154:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     158:	0e056710 	mcreq	7, 0, r6, cr5, cr0, {0}
     15c:	67100567 	ldrvs	r0, [r0, -r7, ror #10]
     160:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
     164:	10056a12 	andne	r6, r5, r2, lsl sl
     168:	4b0e052e 	blmi	381628 <__bss_end+0x2d4350>
     16c:	056a1005 	strbeq	r1, [sl, #-5]!
     170:	21056808 	tstcs	r5, r8, lsl #16
     174:	2e04052e 	cfsh32cs	mvfx0, mvfx4, #30
     178:	054d1105 	strbeq	r1, [sp, #-261]	; 0xfffffefb
     17c:	1005a10e 	andne	sl, r5, lr, lsl #2
     180:	6809056c 	stmdavs	r9, {r2, r3, r5, r6, r8, sl}
     184:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     188:	02051622 	andeq	r1, r5, #35651584	; 0x2200000
     18c:	0905314d 	stmdbeq	r5, {r0, r2, r3, r6, r8, ip, sp}
     190:	2f010531 	svccs	0x00010531
     194:	0a034d4e 	beq	d36d4 <__bss_end+0x263fc>
     198:	9f020582 	svcls	0x00020582
     19c:	31070531 	tstcc	r7, r1, lsr r5
     1a0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1a4:	05884b01 	streq	r4, [r8, #2817]	; 0xb01
     1a8:	02056b11 	andeq	r6, r5, #17408	; 0x4400
     1ac:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
     1b0:	0d053007 	stceq	0, cr3, [r5, #-28]	; 0xffffffe4
     1b4:	4b07052e 	blmi	1c1674 <__bss_end+0x11439c>
     1b8:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1bc:	0d054b07 	vstreq	d4, [r5, #-28]	; 0xffffffe4
     1c0:	4b07052e 	blmi	1c1680 <__bss_end+0x1143a8>
     1c4:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1c8:	0d054b07 	vstreq	d4, [r5, #-28]	; 0xffffffe4
     1cc:	4b07052e 	blmi	1c168c <__bss_end+0x1143b4>
     1d0:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
     1d4:	4c844c02 	stcmi	12, cr4, [r4], {2}
     1d8:	022f0105 	eoreq	r0, pc, #1073741825	; 0x40000001
     1dc:	0101000e 	tsteq	r1, lr
     1e0:	000000e9 	andeq	r0, r0, r9, ror #1
     1e4:	007d0003 	rsbseq	r0, sp, r3
     1e8:	01020000 	mrseq	r0, (UNDEF: 2)
     1ec:	000d0efb 	strdeq	r0, [sp], -fp
     1f0:	01010101 	tsteq	r1, r1, lsl #2
     1f4:	01000000 	mrseq	r0, (UNDEF: 0)
     1f8:	2f010000 	svccs	0x00010000
     1fc:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     200:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
     204:	2f796361 	svccs	0x00796361
     208:	61786548 	cmnvs	r8, r8, asr #10
     20c:	2f686372 	svccs	0x00686372
     210:	2f637273 	svccs	0x00637273
     214:	70736152 	rsbsvc	r6, r3, r2, asr r1
     218:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     21c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     220:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     224:	534f5452 	movtpl	r5, #62546	; 0xf452
     228:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
     22c:	462f5346 	strtmi	r5, [pc], -r6, asr #6
     230:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     234:	2f534f54 	svccs	0x00534f54
     238:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     23c:	702f6563 	eorvc	r6, pc, r3, ror #10
     240:	6174726f 	cmnvs	r4, pc, ror #4
     244:	2f656c62 	svccs	0x00656c62
     248:	2f434347 	svccs	0x00434347
     24c:	70736152 	rsbsvc	r6, r3, r2, asr r1
     250:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     254:	00695079 	rsbeq	r5, r9, r9, ror r0
     258:	726f7000 	rsbvc	r7, pc, #0
     25c:	72736974 	rsbsvc	r6, r3, #116, 18	; 0x1d0000
     260:	0100632e 	tsteq	r0, lr, lsr #6
     264:	05000000 	streq	r0, [r0, #-0]
     268:	02050001 	andeq	r0, r5, #1
     26c:	00020344 	andeq	r0, r2, r4, asr #6
     270:	0100f503 	tsteq	r0, r3, lsl #10	; <UNPREDICTABLE>
     274:	05520c05 	ldrbeq	r0, [r2, #-3077]	; 0xfffff3fb
     278:	2f2fa002 	svccs	0x002fa002
     27c:	13240234 			; <UNDEFINED> instruction: 0x13240234
     280:	036c0105 	cmneq	ip, #1073741825	; 0x40000001
     284:	0205d60e 	andeq	sp, r5, #14680064	; 0xe00000
     288:	2c023116 	stfcss	f3, [r2], {22}
     28c:	01053115 	tsteq	r5, r5, lsl r1
     290:	05132402 	ldreq	r2, [r3, #-1026]	; 0xfffffbfe
     294:	6616031c 			; <UNDEFINED> instruction: 0x6616031c
     298:	02130205 	andseq	r0, r3, #1342177280	; 0x50000000
     29c:	052f132c 	streq	r1, [pc, #-812]!	; ffffff78 <_estack+0xf7fdff78>
     2a0:	13240201 			; <UNDEFINED> instruction: 0x13240201
     2a4:	05662a03 	strbeq	r2, [r6, #-2563]!	; 0xfffff5fd
     2a8:	13054c02 	movwne	r4, #23554	; 0x5c02
     2ac:	059e0a03 	ldreq	r0, [lr, #2563]	; 0xa03
     2b0:	05a19f01 	streq	r9, [r1, #3841]!	; 0xf01
     2b4:	04054b18 	streq	r4, [r5], #-2840	; 0xfffff4e8
     2b8:	4d14054a 	cfldr32mi	mvfx0, [r4, #-296]	; 0xfffffed8
     2bc:	05a21905 	streq	r1, [r2, #2309]!	; 0x905
     2c0:	04054a05 	streq	r4, [r5], #-2565	; 0xfffff5fb
     2c4:	a601054d 	strge	r0, [r1], -sp, asr #10
     2c8:	01000e02 	tsteq	r0, r2, lsl #28
     2cc:	0002fe01 	andeq	pc, r2, r1, lsl #28
     2d0:	35000300 	strcc	r0, [r0, #-768]	; 0xfffffd00
     2d4:	02000001 	andeq	r0, r0, #1
     2d8:	0d0efb01 	vstreq	d15, [lr, #-4]
     2dc:	01010100 	mrseq	r0, (UNDEF: 17)
     2e0:	00000001 	andeq	r0, r0, r1
     2e4:	01000001 	tsteq	r0, r1
     2e8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 234 <_start-0xfdcc>
     2ec:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     2f0:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     2f4:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     2f8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     2fc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     300:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     304:	72656270 	rsbvc	r6, r5, #112, 4
     308:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     30c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     310:	4f545265 	svcmi	0x00545265
     314:	61462d53 	cmpvs	r6, r3, asr sp
     318:	2f534674 	svccs	0x00534674
     31c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     320:	534f5452 	movtpl	r5, #62546	; 0xf452
     324:	756f532f 	strbvc	r5, [pc, #-815]!	; fffffffd <_estack+0xf7fdfffd>
     328:	00656372 	rsbeq	r6, r5, r2, ror r3
     32c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 278 <_start-0xfd88>
     330:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     334:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     338:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     33c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     340:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     344:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     348:	72656270 	rsbvc	r6, r5, #112, 4
     34c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     350:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     354:	4f545265 	svcmi	0x00545265
     358:	61462d53 	cmpvs	r6, r3, asr sp
     35c:	2f534674 	svccs	0x00534674
     360:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     364:	534f5452 	movtpl	r5, #62546	; 0xf452
     368:	756f532f 	strbvc	r5, [pc, #-815]!	; 41 <_start-0xffbf>
     36c:	2f656372 	svccs	0x00656372
     370:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     374:	00656475 	rsbeq	r6, r5, r5, ror r4
     378:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 2c4 <_start-0xfd3c>
     37c:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     380:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     384:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     388:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     38c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     390:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     394:	72656270 	rsbvc	r6, r5, #112, 4
     398:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     39c:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     3a0:	4f545265 	svcmi	0x00545265
     3a4:	61462d53 	cmpvs	r6, r3, asr sp
     3a8:	2f534674 	svccs	0x00534674
     3ac:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     3b0:	534f5452 	movtpl	r5, #62546	; 0xf452
     3b4:	756f532f 	strbvc	r5, [pc, #-815]!	; 8d <_start-0xff73>
     3b8:	2f656372 	svccs	0x00656372
     3bc:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     3c0:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     3c4:	4343472f 	movtmi	r4, #14127	; 0x372f
     3c8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     3cc:	72656270 	rsbvc	r6, r5, #112, 4
     3d0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     3d4:	72630000 	rsbvc	r0, r3, #0
     3d8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     3dc:	632e656e 			; <UNDEFINED> instruction: 0x632e656e
     3e0:	00000100 	andeq	r0, r0, r0, lsl #2
     3e4:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     3e8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     3ec:	6f700000 	svcvs	0x00700000
     3f0:	616d7472 	smcvs	55106	; 0xd742
     3f4:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
     3f8:	00030068 	andeq	r0, r3, r8, rrx
     3fc:	6f726300 	svcvs	0x00726300
     400:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     404:	00682e65 	rsbeq	r2, r8, r5, ror #28
     408:	00000002 	andeq	r0, r0, r2
     40c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     410:	0205f002 	andeq	pc, r5, #2
     414:	018a0300 	orreq	r0, sl, r0, lsl #6
     418:	bf1e0501 	svclt	0x001e0501
     41c:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
     420:	05056a1a 	streq	r6, [r5, #-2586]	; 0xfffff5e6
     424:	4c17054a 	cfldr32mi	mvfx0, [r7], {74}	; 0x4a
     428:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
     42c:	0f053205 	svceq	0x00053205
     430:	4e180568 	cfmsc32mi	mvfx0, mvfx8, mvfx8
     434:	05671b05 	strbeq	r1, [r7, #-2821]!	; 0xfffff4fb
     438:	24056718 	strcs	r6, [r5], #-1816	; 0xfffff8e8
     43c:	69030567 	stmdbvs	r3, {r0, r1, r2, r5, r6, r8, sl}
     440:	69678783 	stmdbvs	r7!, {r0, r1, r7, r8, r9, sl, pc}^
     444:	04020086 	streq	r0, [r2], #-134	; 0xffffff7a
     448:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     44c:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     450:	02000b05 	andeq	r0, r0, #5120	; 0x1400
     454:	08060304 	stmdaeq	r6, {r2, r8, r9}
     458:	09056a92 	stmdbeq	r5, {r1, r4, r7, r9, fp, sp, lr}
     45c:	2f01054d 	svccs	0x0001054d
     460:	a32405be 			; <UNDEFINED> instruction: 0xa32405be
     464:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
     468:	02056b34 	andeq	r6, r5, #52, 22	; 0xd000
     46c:	1205694a 	andne	r6, r5, #1212416	; 0x128000
     470:	4a040584 	bmi	101a88 <__bss_end+0x547b0>
     474:	056a0305 	strbeq	r0, [sl, #-773]!	; 0xfffffcfb
     478:	03054a61 	movweq	r4, #23137	; 0x5a61
     47c:	5905a44a 	stmdbpl	r5, {r1, r3, r6, sl, sp, pc}
     480:	4a03054a 	bmi	c19b0 <__bss_end+0x146d8>
     484:	05850405 	streq	r0, [r5, #1029]	; 0x405
     488:	03056a32 	movweq	r6, #23090	; 0x5a32
     48c:	8401054a 	strhi	r0, [r1], #-1354	; 0xfffffab6
     490:	6a0705da 	bvs	1c1c00 <__bss_end+0x114928>
     494:	05330305 	ldreq	r0, [r3, #-773]!	; 0xfffffcfb
     498:	1405a024 	strne	sl, [r5], #-36	; 0xffffffdc
     49c:	4b04054a 	blmi	1019cc <__bss_end+0x546f4>
     4a0:	a0840305 	addge	r0, r4, r5, lsl #6
     4a4:	04020083 	streq	r0, [r2], #-131	; 0xffffff7d
     4a8:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     4ac:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     4b0:	03060905 	movweq	r0, #26885	; 0x6905
     4b4:	05900873 	ldreq	r0, [r0, #2163]	; 0x873
     4b8:	01054a07 	tsteq	r5, r7, lsl #20
     4bc:	da4a0f03 	ble	12840d0 <__bss_end+0x11d6df8>
     4c0:	05691105 	strbeq	r1, [r9, #-261]!	; 0xfffffefb
     4c4:	0f054a25 	svceq	0x00054a25
     4c8:	4b070566 	blmi	1c1a68 <__bss_end+0x114790>
     4cc:	05301605 	ldreq	r1, [r0, #-1541]!	; 0xfffff9fb
     4d0:	1b059f0f 	blne	168114 <__bss_end+0xbae3c>
     4d4:	4a0505a1 	bmi	141b60 <__bss_end+0x94888>
     4d8:	05500b05 	ldrbeq	r0, [r0, #-2821]	; 0xfffff4fb
     4dc:	2305671b 	movwcs	r6, #22299	; 0x571b
     4e0:	6a080583 	bvs	201af4 <__bss_end+0x15481c>
     4e4:	05301b05 	ldreq	r1, [r0, #-2821]!	; 0xfffff4fb
     4e8:	1e05660b 	cfmadd32ne	mvax0, mvfx6, mvfx5, mvfx11
     4ec:	4a1c054c 	bmi	701a24 <__bss_end+0x65474c>
     4f0:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     4f4:	04054d05 	streq	r4, [r5], #-3333	; 0xfffff2fb
     4f8:	a5050531 	strge	r0, [r5, #-1329]	; 0xfffffacf
     4fc:	05851f05 	streq	r1, [r5, #3845]	; 0xf05
     500:	06054a07 	streq	r4, [r5], -r7, lsl #20
     504:	8504054c 	strhi	r0, [r4, #-1356]	; 0xfffffab4
     508:	040200a0 	streq	r0, [r2], #-160	; 0xffffff60
     50c:	00ba0601 	adcseq	r0, sl, r1, lsl #12
     510:	82030402 	andhi	r0, r3, #33554432	; 0x2000000
     514:	03060a05 	movweq	r0, #27141	; 0x6a05
     518:	05900865 	ldreq	r0, [r0, #2149]	; 0x865
     51c:	09056608 	stmdbeq	r5, {r3, r9, sl, sp, lr}
     520:	054a6e03 	strbeq	r6, [sl, #-3587]	; 0xfffff1fd
     524:	11054a07 	tstne	r5, r7, lsl #20
     528:	054a3103 	strbeq	r3, [sl, #-259]	; 0xfffffefd
     52c:	40088301 	andmi	r8, r8, r1, lsl #6
     530:	31680205 	cmncc	r8, r5, lsl #4
     534:	05310705 	ldreq	r0, [r1, #-1797]!	; 0xfffff8fb
     538:	05053023 	streq	r3, [r5, #-35]	; 0xffffffdd
     53c:	4f03054a 	svcmi	0x0003054a
     540:	79030905 	stmdbvc	r3, {r0, r2, r8, fp}
     544:	0807059e 	stmdaeq	r7, {r1, r2, r3, r4, r7, r8, sl}
     548:	03020520 	movweq	r0, #9504	; 0x2520
     54c:	02004a0c 	andeq	r4, r0, #12, 20	; 0xc000
     550:	02060104 	andeq	r0, r6, #4, 2
     554:	02001228 	andeq	r1, r0, #40, 4	; 0x80000002
     558:	059e0304 	ldreq	r0, [lr, #772]	; 0x304
     55c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
     560:	05a10603 	streq	r0, [r1, #1539]!	; 0x603
     564:	04020055 	streq	r0, [r2], #-85	; 0xffffffab
     568:	16059e03 	strne	r9, [r5], -r3, lsl #28
     56c:	03040200 	movweq	r0, #16896	; 0x4200
     570:	0002054a 	andeq	r0, r2, sl, asr #10
     574:	68030402 	stmdavs	r3, {r1, sl}
     578:	74030405 	strvc	r0, [r3], #-1029	; 0xfffffbfb
     57c:	0301052e 	movweq	r0, #5422	; 0x152e
     580:	05a22e0d 	streq	r2, [r2, #3597]!	; 0xe0d
     584:	02056912 	andeq	r6, r5, #294912	; 0x48000
     588:	0003054a 	andeq	r0, r3, sl, asr #10
     58c:	30030402 	andcc	r0, r3, r2, lsl #8
     590:	02004f05 	andeq	r4, r0, #5, 30
     594:	1e080304 	cdpne	3, 0, cr0, cr8, cr4, {0}
     598:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
     59c:	6b660104 	blvs	19809b4 <__bss_end+0x18d36dc>
     5a0:	19054b4b 	stmdbne	r5, {r0, r1, r3, r6, r8, r9, fp, lr}
     5a4:	6721054e 	strvs	r0, [r1, -lr, asr #10]!
     5a8:	08670105 	stmdaeq	r7!, {r0, r2, r8}^
     5ac:	89220524 	stmdbhi	r2!, {r2, r5, r8, sl}
     5b0:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     5b4:	05834b02 	streq	r4, [r3, #2818]	; 0xb02
     5b8:	3705a015 	smladcc	r5, r5, r0, sl
     5bc:	6604054a 	strvs	r0, [r4], -sl, asr #10
     5c0:	6a4c0b05 	bvs	13031dc <__bss_end+0x1255f04>
     5c4:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
     5c8:	0a022f01 	beq	8c1d4 <ramdisk+0x5eefc>
     5cc:	ff010100 			; <UNDEFINED> instruction: 0xff010100
     5d0:	03000001 	movweq	r0, #1
     5d4:	00012300 	andeq	r2, r1, r0, lsl #6
     5d8:	fb010200 	blx	40de2 <ramdisk+0x13b0a>
     5dc:	01000d0e 	tsteq	r0, lr, lsl #26
     5e0:	00010101 	andeq	r0, r1, r1, lsl #2
     5e4:	00010000 	andeq	r0, r1, r0
     5e8:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     5ec:	2f656d6f 	svccs	0x00656d6f
     5f0:	616e756c 	cmnvs	lr, ip, ror #10
     5f4:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
     5f8:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
     5fc:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
     600:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
     604:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     608:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     60c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     610:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     614:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     618:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
     61c:	72462f53 	subvc	r2, r6, #332	; 0x14c
     620:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     624:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     628:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     62c:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     630:	2f656d6f 	svccs	0x00656d6f
     634:	616e756c 	cmnvs	lr, ip, ror #10
     638:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
     63c:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
     640:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
     644:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
     648:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     64c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     650:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     654:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     658:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     65c:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
     660:	72462f53 	subvc	r2, r6, #332	; 0x14c
     664:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     668:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     66c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     670:	6e692f65 	cdpvs	15, 6, cr2, cr9, cr5, {3}
     674:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
     678:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
     67c:	2f656d6f 	svccs	0x00656d6f
     680:	616e756c 	cmnvs	lr, ip, ror #10
     684:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
     688:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
     68c:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
     690:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
     694:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     698:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     69c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     6a0:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     6a4:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     6a8:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
     6ac:	72462f53 	subvc	r2, r6, #332	; 0x14c
     6b0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     6b4:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     6b8:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     6bc:	6f702f65 	svcvs	0x00702f65
     6c0:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     6c4:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     6c8:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     6cc:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     6d0:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     6d4:	00006950 	andeq	r6, r0, r0, asr r9
     6d8:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     6dc:	0100632e 	tsteq	r0, lr, lsr #6
     6e0:	696c0000 	stmdbvs	ip!, {}^	; <UNPREDICTABLE>
     6e4:	682e7473 	stmdavs	lr!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
     6e8:	00000200 	andeq	r0, r0, r0, lsl #4
     6ec:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     6f0:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     6f4:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     6f8:	00000003 	andeq	r0, r0, r3
     6fc:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     700:	020d5402 	andeq	r5, sp, #33554432	; 0x2000000
     704:	00cc0300 	sbceq	r0, ip, r0, lsl #6
     708:	86240501 	strthi	r0, [r4], -r1, lsl #10
     70c:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
     710:	2c054e1e 	stccs	14, cr4, [r5], {30}
     714:	4a1a056a 	bmi	681cc4 <__bss_end+0x5d49ec>
     718:	054b3005 	strbeq	r3, [fp, #-5]
     71c:	1a054a1e 	bne	152f9c <__bss_end+0xa5cc4>
     720:	6701054c 	strvs	r0, [r1, -ip, asr #10]
     724:	84160586 	ldrhi	r0, [r6], #-1414	; 0xfffffa7a
     728:	86670105 	strbthi	r0, [r7], -r5, lsl #2
     72c:	05a50a05 	streq	r0, [r5, #2565]!	; 0xa05
     730:	18056821 	stmdane	r5, {r0, r5, fp, sp, lr}
     734:	4b24054a 	blmi	901c64 <__bss_end+0x85498c>
     738:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
     73c:	1e054b09 	vmlane.f64	d4, d5, d9
     740:	4b12054a 	blmi	481c70 <__bss_end+0x3d4998>
     744:	691d0567 	ldmdbvs	sp, {r0, r1, r2, r5, r6, r8, sl}
     748:	05680a05 	strbeq	r0, [r8, #-2565]!	; 0xfffff5fb
     74c:	01054a1d 	tsteq	r5, sp, lsl sl
     750:	14058667 	strne	r8, [r5], #-1639	; 0xfffff999
     754:	030405a3 	movweq	r0, #17827	; 0x45a3
     758:	0e056609 	cfmadd32eq	mvax0, mvfx6, mvfx5, mvfx9
     75c:	03130568 	tsteq	r3, #104, 10	; 0x1a000000
     760:	03058214 	movweq	r8, #21012	; 0x5214
     764:	007c0566 	rsbseq	r0, ip, r6, ror #10
     768:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
     76c:	02004605 	andeq	r4, r0, #5242880	; 0x500000
     770:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
     774:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
     778:	03054a01 	movweq	r4, #23041	; 0x5a01
     77c:	01040200 	mrseq	r0, R12_usr
     780:	6d24052e 	cfstr32vs	mvfx0, [r4, #-184]!	; 0xffffff48
     784:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
     788:	24054b0f 	strcs	r4, [r5], #-2831	; 0xfffff4f1
     78c:	4b1c054a 	blmi	701cbc <__bss_end+0x6549e4>
     790:	05671505 	strbeq	r1, [r7, #-1285]!	; 0xfffffafb
     794:	0a056a1d 	beq	15b010 <__bss_end+0xadd38>
     798:	4a1d0568 	bmi	741d40 <__bss_end+0x694a68>
     79c:	86670105 	strbthi	r0, [r7], -r5, lsl #2
     7a0:	05851005 	streq	r1, [r5, #5]
     7a4:	25054a35 	strcs	r4, [r5, #-2613]	; 0xfffff5cb
     7a8:	2f10054a 	svccs	0x0010054a
     7ac:	054a3505 	strbeq	r3, [sl, #-1285]	; 0xfffffafb
     7b0:	09054a25 	stmdbeq	r5, {r0, r2, r5, r9, fp, lr}
     7b4:	690c0532 	stmdbvs	ip, {r1, r4, r5, r8, sl}
     7b8:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
     7bc:	13056823 	movwne	r6, #22563	; 0x5823
     7c0:	4d1e054a 	cfldr32mi	mvfx0, [lr, #-296]	; 0xfffffed8
     7c4:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
     7c8:	01054a1d 	tsteq	r5, sp, lsl sl
     7cc:	00080267 	andeq	r0, r8, r7, ror #4
     7d0:	05410101 	strbeq	r0, [r1, #-257]	; 0xfffffeff
     7d4:	00030000 	andeq	r0, r3, r0
     7d8:	00000164 	andeq	r0, r0, r4, ror #2
     7dc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     7e0:	0101000d 	tsteq	r1, sp
     7e4:	00000101 	andeq	r0, r0, r1, lsl #2
     7e8:	00000100 	andeq	r0, r0, r0, lsl #2
     7ec:	6f682f01 	svcvs	0x00682f01
     7f0:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 644 <_start-0xf9bc>
     7f4:	63616e75 	cmnvs	r1, #1872	; 0x750
     7f8:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
     7fc:	63726178 	cmnvs	r2, #120, 2
     800:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
     804:	61522f63 	cmpvs	r2, r3, ror #30
     808:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     80c:	50797272 	rsbspl	r7, r9, r2, ror r2
     810:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     814:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     818:	462d534f 	strtmi	r5, [sp], -pc, asr #6
     81c:	53467461 	movtpl	r7, #25697	; 0x6461
     820:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     824:	4f545265 	svcmi	0x00545265
     828:	6f532f53 	svcvs	0x00532f53
     82c:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     830:	73752f00 	cmnvc	r5, #0, 30
     834:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
     838:	63672f62 	cmnvs	r7, #392	; 0x188
     83c:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
     840:	6f6e2d6d 	svcvs	0x006e2d6d
     844:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
     848:	2f696261 	svccs	0x00696261
     84c:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
     850:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
     854:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
     858:	2f006564 	svccs	0x00006564
     85c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     860:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
     864:	2f796361 	svccs	0x00796361
     868:	61786548 	cmnvs	r8, r8, asr #10
     86c:	2f686372 	svccs	0x00686372
     870:	2f637273 	svccs	0x00637273
     874:	70736152 	rsbsvc	r6, r3, r2, asr r1
     878:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     87c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     880:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     884:	534f5452 	movtpl	r5, #62546	; 0xf452
     888:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
     88c:	462f5346 	strtmi	r5, [pc], -r6, asr #6
     890:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     894:	2f534f54 	svccs	0x00534f54
     898:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     89c:	702f6563 	eorvc	r6, pc, r3, ror #10
     8a0:	6174726f 	cmnvs	r4, pc, ror #4
     8a4:	2f656c62 	svccs	0x00656c62
     8a8:	2f434347 	svccs	0x00434347
     8ac:	70736152 	rsbsvc	r6, r3, r2, asr r1
     8b0:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     8b4:	00695079 	rsbeq	r5, r9, r9, ror r0
     8b8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 804 <_start-0xf7fc>
     8bc:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     8c0:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     8c4:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     8c8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     8cc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     8d0:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     8d4:	72656270 	rsbvc	r6, r5, #112, 4
     8d8:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     8dc:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     8e0:	4f545265 	svcmi	0x00545265
     8e4:	61462d53 	cmpvs	r6, r3, asr sp
     8e8:	2f534674 	svccs	0x00534674
     8ec:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     8f0:	534f5452 	movtpl	r5, #62546	; 0xf452
     8f4:	756f532f 	strbvc	r5, [pc, #-815]!	; 5cd <_start-0xfa33>
     8f8:	2f656372 	svccs	0x00656372
     8fc:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     900:	00656475 	rsbeq	r6, r5, r5, ror r4
     904:	65757100 	ldrbvs	r7, [r5, #-256]!	; 0xffffff00
     908:	632e6575 			; <UNDEFINED> instruction: 0x632e6575
     90c:	00000100 	andeq	r0, r0, r0, lsl #2
     910:	64647473 	strbtvs	r7, [r4], #-1139	; 0xfffffb8d
     914:	682e6665 	stmdavs	lr!, {r0, r2, r5, r6, r9, sl, sp, lr}
     918:	00000200 	andeq	r0, r0, r0, lsl #4
     91c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     920:	7263616d 	rsbvc	r6, r3, #1073741851	; 0x4000001b
     924:	00682e6f 	rsbeq	r2, r8, pc, ror #28
     928:	6c000003 	stcvs	0, cr0, [r0], {3}
     92c:	2e747369 	cdpcs	3, 7, cr7, cr4, cr9, {3}
     930:	00040068 	andeq	r0, r4, r8, rrx
     934:	73617400 	cmnvc	r1, #0, 8
     938:	00682e6b 	rsbeq	r2, r8, fp, ror #28
     93c:	00000004 	andeq	r0, r0, r4
     940:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
     944:	020ff002 	andeq	pc, pc, #2
     948:	02970300 	addseq	r0, r7, #0, 6
     94c:	a1020501 	tstge	r2, r1, lsl #10
     950:	05301c05 	ldreq	r1, [r0, #-3077]!	; 0xfffff3fb
     954:	44054a30 	strmi	r4, [r5], #-2608	; 0xfffff5d0
     958:	4a3b054a 	bmi	ec1e88 <__bss_end+0xe14bb0>
     95c:	052e2505 	streq	r2, [lr, #-1285]!	; 0xfffffafb
     960:	1e052e13 	mcrne	14, 0, r2, cr5, cr3, {0}
     964:	671f054b 	ldrvs	r0, [pc, -fp, asr #10]
     968:	054a1605 	strbeq	r1, [sl, #-1541]	; 0xfffff9fb
     96c:	36054b20 	strcc	r4, [r5], -r0, lsr #22
     970:	4a41054a 	bmi	1041ea0 <__bss_end+0xf94bc8>
     974:	052e6c05 	streq	r6, [lr, #-3077]!	; 0xfffff3fb
     978:	29054a63 	stmdbcs	r5, {r0, r1, r5, r6, r9, fp, lr}
     97c:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
     980:	674b1405 	strbvs	r1, [fp, -r5, lsl #8]
     984:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     988:	06056d08 	streq	r6, [r5], -r8, lsl #26
     98c:	4c23054a 	cfstr32mi	mvfx0, [r3], #-296	; 0xfffffed8
     990:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
     994:	06056607 	streq	r6, [r5], -r7, lsl #12
     998:	5104054c 	tstpl	r4, ip, asr #10
     99c:	85020583 	strhi	r0, [r2, #-1411]	; 0xfffffa7d
     9a0:	05320905 	ldreq	r0, [r2, #-2309]!	; 0xfffff6fb
     9a4:	056a2f01 	strbeq	r2, [sl, #-3841]!	; 0xfffff0ff
     9a8:	0405d90e 	streq	sp, [r5], #-2318	; 0xfffff6f2
     9ac:	681d0551 	ldmdavs	sp, {r0, r4, r6, r8, sl}
     9b0:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
     9b4:	16056a33 			; <UNDEFINED> instruction: 0x16056a33
     9b8:	4c2b0566 	cfstr32mi	mvfx0, [fp], #-408	; 0xfffffe68
     9bc:	05661705 	strbeq	r1, [r6, #-1797]!	; 0xfffff8fb
     9c0:	06054b12 			; <UNDEFINED> instruction: 0x06054b12
     9c4:	4e1a054a 	cfmac32mi	mvfx0, mvfx10, mvfx10
     9c8:	05671c05 	strbeq	r1, [r7, #-3077]!	; 0xfffff3fb
     9cc:	0d056705 	stceq	7, cr6, [r5, #-20]	; 0xffffffec
     9d0:	6b05056e 	blvs	141f90 <__bss_end+0x94cb8>
     9d4:	05510905 	ldrbeq	r0, [r1, #-2309]	; 0xfffff6fb
     9d8:	d0032f01 	andle	r2, r3, r1, lsl #30
     9dc:	16056601 	strne	r6, [r5], -r1, lsl #12
     9e0:	030305d7 	movweq	r0, #13783	; 0x35d7
     9e4:	0f054a0b 	svceq	0x00054a0b
     9e8:	4a2c0532 	bmi	b01eb8 <__bss_end+0xa54be0>
     9ec:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     9f0:	09054d05 	stmdbeq	r5, {r0, r2, r8, sl, fp, lr}
     9f4:	4a070586 	bmi	1c2014 <__bss_end+0x114d3c>
     9f8:	054c2405 	strbeq	r2, [ip, #-1029]	; 0xfffffbfb
     9fc:	08054a0a 	stmdaeq	r5, {r1, r3, r9, fp, lr}
     a00:	50070566 	andpl	r0, r7, r6, ror #10
     a04:	05320505 	ldreq	r0, [r2, #-1285]!	; 0xfffffafb
     a08:	1605320c 	strne	r3, [r5], -ip, lsl #4
     a0c:	2e07054e 	cfsh32cs	mvfx0, mvfx7, #46
     a10:	054e0605 	strbeq	r0, [lr, #-1541]	; 0xfffff9fb
     a14:	0c05330d 	stceq	3, cr3, [r5], {13}
     a18:	6a06054c 	bvs	181f50 <__bss_end+0xd4c78>
     a1c:	05671405 	strbeq	r1, [r7, #-1029]!	; 0xfffffbfb
     a20:	2f334e03 	svccs	0x00334e03
     a24:	01040200 	mrseq	r0, R12_usr
     a28:	02009e06 	andeq	r9, r0, #6, 28	; 0x60
     a2c:	00660304 	rsbeq	r0, r6, r4, lsl #6
     a30:	82040402 	andhi	r0, r4, #33554432	; 0x2000000
     a34:	06040200 	streq	r0, [r4], -r0, lsl #4
     a38:	00070566 	andeq	r0, r7, r6, ror #10
     a3c:	06060402 	streq	r0, [r6], -r2, lsl #8
     a40:	00050531 	andeq	r0, r5, r1, lsr r5
     a44:	ba060402 	blt	181a54 <__bss_end+0xd477c>
     a48:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
     a4c:	1c056606 	stcne	6, cr6, [r5], {6}
     a50:	4a05054d 	bmi	141f8c <__bss_end+0x94cb4>
     a54:	51090589 	smlabbpl	r9, r9, r5, r0
     a58:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     a5c:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
     a60:	4b0e0550 	blmi	381fa8 <__bss_end+0x2d4cd0>
     a64:	05500405 	ldrbeq	r0, [r0, #-1029]	; 0xfffffbfb
     a68:	0b054b0d 	bleq	1536a4 <__bss_end+0xa63cc>
     a6c:	00010533 	andeq	r0, r1, r3, lsr r5
     a70:	31030402 	tstcc	r3, r2, lsl #8
     a74:	6601d203 	strvs	sp, [r1], -r3, lsl #4
     a78:	0c031905 			; <UNDEFINED> instruction: 0x0c031905
     a7c:	4c0e05d6 	cfstr32mi	mvfx0, [lr], {214}	; 0xd6
     a80:	054a2b05 	strbeq	r2, [sl, #-2821]	; 0xfffff4fb
     a84:	04054a05 	streq	r4, [r5], #-2565	; 0xfffff5fb
     a88:	860f054e 	strhi	r0, [pc], -lr, asr #10
     a8c:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     a90:	07054c09 	streq	r4, [r5, -r9, lsl #24]
     a94:	4c24054a 	cfstr32mi	mvfx0, [r4], #-296	; 0xfffffed8
     a98:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
     a9c:	09056608 	stmdbeq	r5, {r3, r9, sl, sp, lr}
     aa0:	6823054e 	stmdavs	r3!, {r1, r2, r3, r6, r8, sl}
     aa4:	09031005 	stmdbeq	r3, {r0, r2, ip}
     aa8:	4a050582 	bmi	1420b8 <__bss_end+0x94de0>
     aac:	6b690c05 	blvs	1a43ac8 <__bss_end+0x19967f0>
     ab0:	054f0905 	strbeq	r0, [pc, #-2309]	; 1b3 <_start-0xfe4d>
     ab4:	056a2f01 	strbeq	r2, [sl, #-3841]!	; 0xfffff0ff
     ab8:	0305d716 	movweq	sp, #22294	; 0x5716
     abc:	054a0d03 	strbeq	r0, [sl, #-3331]	; 0xfffff2fd
     ac0:	0605320f 	streq	r3, [r5], -pc, lsl #4
     ac4:	4d1c054a 	cfldr32mi	mvfx0, [ip, #-296]	; 0xfffffed8
     ac8:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     acc:	11056807 	tstne	r5, r7, lsl #16
     ad0:	4a06056b 	bmi	182084 <__bss_end+0xd4dac>
     ad4:	0d030a05 	vstreq	s0, [r3, #-20]	; 0xffffffec
     ad8:	4a080566 	bmi	202078 <__bss_end+0x154da0>
     adc:	054c2505 	strbeq	r2, [ip, #-1285]	; 0xfffffafb
     ae0:	09054a0b 	stmdbeq	r5, {r0, r1, r3, r9, fp, lr}
     ae4:	4c080566 	cfstr32mi	mvfx0, [r8], {102}	; 0x66
     ae8:	0a031a05 	beq	c7304 <__bss_end+0x1a02c>
     aec:	6a0a054a 	bvs	28201c <__bss_end+0x1d4d44>
     af0:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
     af4:	0b054e25 	bleq	154390 <__bss_end+0xa70b8>
     af8:	6609054a 	strvs	r0, [r9], -sl, asr #10
     afc:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
     b00:	0c053305 	stceq	3, cr3, [r5], {5}
     b04:	4e16052f 	cfmul64mi	mvdx0, mvdx6, mvdx15
     b08:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
     b0c:	0d054e06 	stceq	14, cr4, [r5, #-24]	; 0xffffffe8
     b10:	4c0c0530 	cfstr32mi	mvfx0, [ip], {48}	; 0x30
     b14:	056a0605 	strbeq	r0, [sl, #-1541]!	; 0xfffff9fb
     b18:	03056714 	movweq	r6, #22292	; 0x5714
     b1c:	002f334e 	eoreq	r3, pc, lr, asr #6
     b20:	06010402 	streq	r0, [r1], -r2, lsl #8
     b24:	0402009e 	streq	r0, [r2], #-158	; 0xffffff62
     b28:	02006603 	andeq	r6, r0, #3145728	; 0x300000
     b2c:	00820404 	addeq	r0, r2, r4, lsl #8
     b30:	66060402 	strvs	r0, [r6], -r2, lsl #8
     b34:	02000705 	andeq	r0, r0, #1310720	; 0x140000
     b38:	31060604 	tstcc	r6, r4, lsl #12
     b3c:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
     b40:	05ba0604 	ldreq	r0, [sl, #1540]!	; 0x604
     b44:	06054c08 	streq	r4, [r5], -r8, lsl #24
     b48:	031c0566 	tsteq	ip, #427819008	; 0x19800000
     b4c:	05054a11 	streq	r4, [r5, #-2577]	; 0xfffff5ef
     b50:	0905834a 	stmdbeq	r5, {r1, r3, r6, r8, r9, pc}
     b54:	4a07054b 	bmi	1c2088 <__bss_end+0x114db0>
     b58:	054c0605 	strbeq	r0, [ip, #-1541]	; 0xfffff9fb
     b5c:	0e055005 	cdpeq	0, 0, cr5, cr5, cr5, {0}
     b60:	4f04054b 	svcmi	0x0004054b
     b64:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
     b68:	0105300b 	tsteq	r5, fp
     b6c:	03040200 	movweq	r0, #16896	; 0x4200
     b70:	19056a31 	stmdbne	r5, {r0, r4, r5, r9, fp, sp, lr}
     b74:	4d0e05c1 	cfstr32mi	mvfx0, [lr, #-772]	; 0xfffffcfc
     b78:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     b7c:	0f054e04 	svceq	0x00054e04
     b80:	4a040567 	bmi	102124 <__bss_end+0x54e4c>
     b84:	056b0f05 	strbeq	r0, [fp, #-3845]!	; 0xfffff0fb
     b88:	09054a06 	stmdbeq	r5, {r1, r2, r9, fp, lr}
     b8c:	4a07054c 	bmi	1c20c4 <__bss_end+0x114dec>
     b90:	054c2405 	strbeq	r2, [ip, #-1029]	; 0xfffffbfb
     b94:	08054a0a 	stmdaeq	r5, {r1, r3, r9, fp, lr}
     b98:	4e090566 	cfsh32mi	mvfx0, mvfx9, #54
     b9c:	05682305 	strbeq	r2, [r8, #-773]!	; 0xfffffcfb
     ba0:	82090310 	andhi	r0, r9, #16, 6	; 0x40000000
     ba4:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     ba8:	056a690c 	strbeq	r6, [sl, #-2316]!	; 0xfffff6f4
     bac:	01055009 	tsteq	r5, r9
     bb0:	02056a2f 	andeq	r6, r5, #192512	; 0x2f000
     bb4:	2f0c0587 	svccs	0x000c0587
     bb8:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
     bbc:	01053009 	tsteq	r5, r9
     bc0:	0b056a2f 	bleq	15b484 <__bss_end+0xae1ac>
     bc4:	68090587 	stmdavs	r9, {r0, r1, r2, r7, r8, sl}
     bc8:	862f0105 	strthi	r0, [pc], -r5, lsl #2
     bcc:	05871405 	streq	r1, [r7, #1029]	; 0x405
     bd0:	054b4a02 	strbeq	r4, [fp, #-2562]	; 0xfffff5fe
     bd4:	22034b01 	andcs	r4, r3, #1024	; 0x400
     bd8:	bb0d0566 	bllt	342178 <__bss_end+0x294ea0>
     bdc:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
     be0:	4a0d0309 	bmi	34180c <__bss_end+0x294534>
     be4:	05681d05 	strbeq	r1, [r8, #-3333]!	; 0xfffff2fb
     be8:	03054a4d 	movweq	r4, #23117	; 0x5a4d
     bec:	6716054a 	ldrvs	r0, [r6, -sl, asr #10]
     bf0:	054a2005 	strbeq	r2, [sl, #-5]
     bf4:	0e054a16 			; <UNDEFINED> instruction: 0x0e054a16
     bf8:	4a240567 	bmi	90219c <__bss_end+0x854ec4>
     bfc:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     c00:	17054c20 	strne	r4, [r5, -r0, lsr #24]
     c04:	6b1d054a 	blvs	742134 <__bss_end+0x694e5c>
     c08:	054a4e05 	strbeq	r4, [sl, #-3589]	; 0xfffff1fb
     c0c:	17054a03 	strne	r4, [r5, -r3, lsl #20]
     c10:	4a210567 	bmi	8421b4 <__bss_end+0x794edc>
     c14:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     c18:	2405830e 	strcs	r8, [r5], #-782	; 0xfffffcf2
     c1c:	4a05054a 	bmi	14214c <__bss_end+0x94e74>
     c20:	054c2305 	strbeq	r2, [ip, #-773]	; 0xfffffcfb
     c24:	2c054a35 			; <UNDEFINED> instruction: 0x2c054a35
     c28:	4a18054a 	bmi	602158 <__bss_end+0x554e80>
     c2c:	054e0d05 	strbeq	r0, [lr, #-3333]	; 0xfffff2fb
     c30:	01054a02 	tsteq	r5, r2, lsl #20
     c34:	0d056a67 	vstreq	s12, [r5, #-412]	; 0xfffffe64
     c38:	4a04059f 	bmi	1022bc <__bss_end+0x54fe4>
     c3c:	054c1705 	strbeq	r1, [ip, #-1797]	; 0xfffff8fb
     c40:	17054a21 	strne	r4, [r5, -r1, lsr #20]
     c44:	670e054a 	strvs	r0, [lr, -sl, asr #10]
     c48:	054a2505 	strbeq	r2, [sl, #-1285]	; 0xfffffafb
     c4c:	21054a05 	tstcs	r5, r5, lsl #20
     c50:	4a18054c 	bmi	602188 <__bss_end+0x554eb0>
     c54:	054c3205 	strbeq	r3, [ip, #-517]	; 0xfffffdfb
     c58:	03054a54 	movweq	r4, #23124	; 0x5a54
     c5c:	6801054a 	stmdavs	r1, {r1, r3, r6, r8, sl}
     c60:	8902056a 	stmdbhi	r2, {r1, r3, r5, r6, r8, sl}
     c64:	32310805 	eorscc	r0, r1, #327680	; 0x50000
     c68:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
     c6c:	09054e23 	stmdbeq	r5, {r0, r1, r5, r9, sl, fp, lr}
     c70:	6607054a 	strvs	r0, [r7], -sl, asr #10
     c74:	054e0605 	strbeq	r0, [lr, #-1541]	; 0xfffff9fb
     c78:	05053110 	streq	r3, [r5, #-272]	; 0xfffffef0
     c7c:	0311054a 	tsteq	r1, #310378496	; 0x12800000
     c80:	08056671 	stmdaeq	r5, {r0, r4, r5, r6, r9, sl, sp, lr}
     c84:	0305054a 	movweq	r0, #21834	; 0x554a
     c88:	14056613 	strne	r6, [r5], #-1555	; 0xfffff9ed
     c8c:	68020532 	stmdavs	r2, {r1, r4, r5, r8, sl}
     c90:	30080531 	andcc	r0, r8, r1, lsr r5
     c94:	4a060530 	bmi	18215c <__bss_end+0xd4e84>
     c98:	054c2305 	strbeq	r2, [ip, #-773]	; 0xfffffcfb
     c9c:	07054a09 	streq	r4, [r5, -r9, lsl #20]
     ca0:	4c060566 	cfstr32mi	mvfx0, [r6], {102}	; 0x66
     ca4:	05311005 	ldreq	r1, [r1, #-5]!
     ca8:	11054a05 	tstne	r5, r5, lsl #20
     cac:	05667703 	strbeq	r7, [r6, #-1795]!	; 0xfffff8fd
     cb0:	05054a08 	streq	r4, [r5, #-2568]	; 0xfffff5f8
     cb4:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
     cb8:	02053214 	andeq	r3, r5, #20, 4	; 0x40000001
     cbc:	2f010568 	svccs	0x00010568
     cc0:	8502056a 	strhi	r0, [r2, #-1386]	; 0xfffffa96
     cc4:	052f1605 	streq	r1, [pc, #-1541]!	; 6c7 <_start-0xf939>
     cc8:	0b054a2a 	bleq	153578 <__bss_end+0xa62a0>
     ccc:	2f020582 	svccs	0x00020582
     cd0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     cd4:	056a2f01 	strbeq	r2, [sl, #-3841]!	; 0xfffff0ff
     cd8:	29058615 	stmdbcs	r5, {r0, r2, r4, r9, sl, pc}
     cdc:	820a054a 	andhi	r0, sl, #310378496	; 0x12800000
     ce0:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     ce4:	05862f01 	streq	r2, [r6, #3841]	; 0xf01
     ce8:	16058502 	strne	r8, [r5], -r2, lsl #10
     cec:	4a34052f 	bmi	d021b0 <__bss_end+0xc54ed8>
     cf0:	054a2a05 	strbeq	r2, [sl, #-2565]	; 0xfffff5fb
     cf4:	0205820b 	andeq	r8, r5, #-1342177280	; 0xb0000000
     cf8:	3009052f 	andcc	r0, r9, pc, lsr #10
     cfc:	6a2f0105 	bvs	bc1118 <__bss_end+0xb13e40>
     d00:	05861505 	streq	r1, [r6, #1285]	; 0x505
     d04:	29054a33 	stmdbcs	r5, {r0, r1, r4, r5, r9, fp, lr}
     d08:	820a054a 	andhi	r0, sl, #310378496	; 0x12800000
     d0c:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
     d10:	08022f01 	stmdaeq	r2, {r0, r8, r9, sl, fp, sp}
     d14:	9e010100 	adflss	f0, f1, f0
     d18:	03000008 	movweq	r0, #8
     d1c:	00018000 	andeq	r8, r1, r0
     d20:	fb010200 	blx	4152a <ramdisk+0x14252>
     d24:	01000d0e 	tsteq	r0, lr, lsl #26
     d28:	00010101 	andeq	r0, r1, r1, lsl #2
     d2c:	00010000 	andeq	r0, r1, r0
     d30:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
     d34:	2f656d6f 	svccs	0x00656d6f
     d38:	616e756c 	cmnvs	lr, ip, ror #10
     d3c:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
     d40:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
     d44:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
     d48:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
     d4c:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     d50:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     d54:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     d58:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     d5c:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     d60:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
     d64:	72462f53 	subvc	r2, r6, #332	; 0x14c
     d68:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     d6c:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     d70:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     d74:	752f0065 	strvc	r0, [pc, #-101]!	; d17 <_start-0xf2e9>
     d78:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; bb4 <_start-0xf44c>
     d7c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
     d80:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
     d84:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
     d88:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
     d8c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
     d90:	2e30312f 	rsfcssp	f3, f0, #10.0
     d94:	2f312e33 	svccs	0x00312e33
     d98:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     d9c:	00656475 	rsbeq	r6, r5, r5, ror r4
     da0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; cec <_start-0xf314>
     da4:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     da8:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     dac:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     db0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     db4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     db8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     dbc:	72656270 	rsbvc	r6, r5, #112, 4
     dc0:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     dc4:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     dc8:	4f545265 	svcmi	0x00545265
     dcc:	61462d53 	cmpvs	r6, r3, asr sp
     dd0:	2f534674 	svccs	0x00534674
     dd4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     dd8:	534f5452 	movtpl	r5, #62546	; 0xf452
     ddc:	756f532f 	strbvc	r5, [pc, #-815]!	; ab5 <_start-0xf54b>
     de0:	2f656372 	svccs	0x00656372
     de4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
     de8:	00656475 	rsbeq	r6, r5, r5, ror r4
     dec:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; d38 <_start-0xf2c8>
     df0:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     df4:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     df8:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     dfc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     e00:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     e04:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     e08:	72656270 	rsbvc	r6, r5, #112, 4
     e0c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     e10:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     e14:	4f545265 	svcmi	0x00545265
     e18:	61462d53 	cmpvs	r6, r3, asr sp
     e1c:	2f534674 	svccs	0x00534674
     e20:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     e24:	534f5452 	movtpl	r5, #62546	; 0xf452
     e28:	756f532f 	strbvc	r5, [pc, #-815]!	; b01 <_start-0xf4ff>
     e2c:	2f656372 	svccs	0x00656372
     e30:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
     e34:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     e38:	4343472f 	movtmi	r4, #14127	; 0x372f
     e3c:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     e40:	72656270 	rsbvc	r6, r5, #112, 4
     e44:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     e48:	61740000 	cmnvs	r4, r0
     e4c:	2e736b73 	vmovcs.s8	r6, d3[7]
     e50:	00010063 	andeq	r0, r1, r3, rrx
     e54:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
     e58:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
     e5c:	00020068 	andeq	r0, r2, r8, rrx
     e60:	6f727000 	svcvs	0x00727000
     e64:	6665646a 	strbtvs	r6, [r5], -sl, ror #8
     e68:	00682e73 	rsbeq	r2, r8, r3, ror lr
     e6c:	70000003 	andvc	r0, r0, r3
     e70:	6d74726f 	lfmvs	f7, 2, [r4, #-444]!	; 0xfffffe44
     e74:	6f726361 	svcvs	0x00726361
     e78:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
     e7c:	72460000 	subvc	r0, r6, #0
     e80:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     e84:	682e534f 	stmdavs	lr!, {r0, r1, r2, r3, r6, r8, r9, ip, lr}
     e88:	00000300 	andeq	r0, r0, r0, lsl #6
     e8c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     e90:	0300682e 	movweq	r6, #2094	; 0x82e
     e94:	61740000 	cmnvs	r4, r0
     e98:	682e6b73 	stmdavs	lr!, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     e9c:	00000300 	andeq	r0, r0, r0, lsl #6
     ea0:	00010500 	andeq	r0, r1, r0, lsl #10
     ea4:	1ba00205 	blne	fe8016c0 <_estack+0xf67e16c0>
     ea8:	9b030002 	blls	c0eb8 <__bss_end+0x13be0>
     eac:	0d050103 	stfeqs	f0, [r5, #-12]
     eb0:	05f20903 	ldrbeq	r0, [r2, #2307]!	; 0x903
     eb4:	1b05a004 	blne	168ecc <__bss_end+0xbbbf4>
     eb8:	05661803 	strbeq	r1, [r6, #-2051]!	; 0xfffff7fd
     ebc:	11054a25 	tstne	r5, r5, lsr #20
     ec0:	4b2c0566 	blmi	b02460 <__bss_end+0xa55188>
     ec4:	052e5505 	streq	r5, [lr, #-1285]!	; 0xfffffafb
     ec8:	03052e11 	movweq	r2, #24081	; 0x5e11
     ecc:	052e1403 	streq	r1, [lr, #-1027]!	; 0xfffffbfd
     ed0:	d60c031d 			; <UNDEFINED> instruction: 0xd60c031d
     ed4:	059e1b05 	ldreq	r1, [lr, #2821]	; 0xb05
     ed8:	13055105 	movwne	r5, #20741	; 0x5105
     edc:	6b03056b 	blvs	c2490 <__bss_end+0x151b8>
     ee0:	05301a05 	ldreq	r1, [r0, #-2565]!	; 0xfffff5fb
     ee4:	06059f15 			; <UNDEFINED> instruction: 0x06059f15
     ee8:	4e12054a 	cfmac32mi	mvfx0, mvfx2, mvfx10
     eec:	05682005 	strbeq	r2, [r8, #-5]!
     ef0:	06054a07 	streq	r4, [r5], -r7, lsl #20
     ef4:	521b054f 	andspl	r0, fp, #331350016	; 0x13c00000
     ef8:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
     efc:	08054c16 	stmdaeq	r5, {r1, r2, r4, sl, fp, lr}
     f00:	68140566 	ldmdavs	r4, {r1, r2, r5, r6, r8, sl}
     f04:	056d1005 	strbeq	r1, [sp, #-5]!
     f08:	06054a1d 			; <UNDEFINED> instruction: 0x06054a1d
     f0c:	4c21054a 	cfstr32mi	mvfx0, [r1], #-296	; 0xfffffed8
     f10:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
     f14:	4a090310 	bmi	241b5c <__bss_end+0x194884>
     f18:	00a00405 	adceq	r0, r0, r5, lsl #8
     f1c:	06010402 	streq	r0, [r1], -r2, lsl #8
     f20:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
     f24:	0c058203 	sfmeq	f0, 1, [r5], {3}
     f28:	03040200 	movweq	r0, #16896	; 0x4200
     f2c:	05920806 	ldreq	r0, [r2, #2054]	; 0x806
     f30:	04020003 	streq	r0, [r2], #-3
     f34:	0b054e03 	bleq	154748 <__bss_end+0xa7470>
     f38:	4e04054e 	cfsh32mi	mvfx0, mvfx4, #46
     f3c:	05681905 	strbeq	r1, [r8, #-2309]!	; 0xfffff6fb
     f40:	14054a05 	strne	r4, [r5], #-2565	; 0xfffff5fb
     f44:	6606054e 	strvs	r0, [r6], -lr, asr #10
     f48:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
     f4c:	01053309 	tsteq	r5, r9, lsl #6
     f50:	0802052f 	stmdaeq	r2, {r0, r1, r2, r3, r5, r8, sl}
     f54:	85030542 	strhi	r0, [r3, #-1346]	; 0xfffffabe
     f58:	05321705 	ldreq	r1, [r2, #-1797]!	; 0xfffff8fb
     f5c:	14054a06 	strne	r4, [r5], #-2566	; 0xfffff5fa
     f60:	4e0c0568 	cfsh32mi	mvfx0, mvfx12, #56
     f64:	01040200 	mrseq	r0, R12_usr
     f68:	02006606 	andeq	r6, r0, #6291456	; 0x600000
     f6c:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
     f70:	0402000a 	streq	r0, [r2], #-10
     f74:	052e0604 	streq	r0, [lr, #-1540]!	; 0xfffff9fc
     f78:	04020004 	streq	r0, [r2], #-4
     f7c:	1d053404 	cfstrsne	mvf3, [r5, #-16]
     f80:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
     f84:	00060585 	andeq	r0, r6, r5, lsl #11
     f88:	4a040402 	bmi	101f98 <__bss_end+0x54cc0>
     f8c:	054c0505 	strbeq	r0, [ip, #-1285]	; 0xfffffafb
     f90:	05a38504 	streq	r8, [r3, #1284]!	; 0x504
     f94:	0305a210 	movweq	sl, #21008	; 0x5210
     f98:	311905a2 	tstcc	r9, r2, lsr #11
     f9c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
     fa0:	05054c06 	streq	r4, [r5, #-3078]	; 0xfffff3fa
     fa4:	31020568 	tstcc	r2, r8, ror #10
     fa8:	05f21003 	ldrbeq	r1, [r2, #3]!
     fac:	0305a021 	movweq	sl, #20513	; 0x5021
     fb0:	3112054f 	tstcc	r2, pc, asr #10
     fb4:	054a1005 	strbeq	r1, [sl, #-5]
     fb8:	13056815 	movwne	r6, #22549	; 0x5815
     fbc:	4a06054a 	bmi	1824ec <__bss_end+0xd5214>
     fc0:	05511905 	ldrbeq	r1, [r1, #-2309]	; 0xfffff6fb
     fc4:	40054a07 	andmi	r4, r5, r7, lsl #20
     fc8:	01040200 	mrseq	r0, R12_usr
     fcc:	002f0566 	eoreq	r0, pc, r6, ror #10
     fd0:	4a010402 	bmi	41fe0 <ramdisk+0x14d08>
     fd4:	05681305 	strbeq	r1, [r8, #-773]!	; 0xfffffcfb
     fd8:	07056e19 	smladeq	r5, r9, lr, r6
     fdc:	0040054a 	subeq	r0, r0, sl, asr #10
     fe0:	66010402 	strvs	r0, [r1], -r2, lsl #8
     fe4:	02002f05 	andeq	r2, r0, #5, 30
     fe8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
     fec:	18056813 	stmdane	r5, {r0, r1, r4, fp, sp, lr}
     ff0:	6806054f 	stmdavs	r6, {r0, r1, r2, r3, r6, r8, sl}
     ff4:	056d3105 	strbeq	r3, [sp, #-261]!	; 0xfffffefb
     ff8:	05674a05 	strbeq	r4, [r7, #-2565]!	; 0xfffff5fb
     ffc:	05054d15 	streq	r4, [r5, #-3349]	; 0xfffff2eb
    1000:	6804054e 	stmdavs	r4, {r1, r2, r3, r6, r8, sl}
    1004:	a6300205 	ldrtge	r0, [r0], -r5, lsl #4
    1008:	05841705 	streq	r1, [r4, #1797]	; 0x705
    100c:	04054d05 	streq	r4, [r5], #-3333	; 0xfffff2fb
    1010:	031e0568 	tsteq	lr, #104, 10	; 0x1a000000
    1014:	11052e0e 	tstne	r5, lr, lsl #28
    1018:	6b31054a 	blvs	c42548 <__bss_end+0xb95270>
    101c:	674a0505 	strbvs	r0, [sl, -r5, lsl #10]
    1020:	054c1605 	strbeq	r1, [ip, #-1541]	; 0xfffff9fb
    1024:	04054f05 	streq	r4, [r5], #-3845	; 0xfffff0fb
    1028:	30020568 	andcc	r0, r2, r8, ror #10
    102c:	860305a6 	strhi	r0, [r3], -r6, lsr #11
    1030:	00320c05 	eorseq	r0, r2, r5, lsl #24
    1034:	06010402 	streq	r0, [r1], -r2, lsl #8
    1038:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    103c:	0a056602 	beq	15a84c <__bss_end+0xad574>
    1040:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1044:	0d052e06 	stceq	14, cr2, [r5, #-24]	; 0xffffffe8
    1048:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    104c:	0003052f 	andeq	r0, r3, pc, lsr #10
    1050:	68040402 	stmdavs	r4, {r1, sl}
    1054:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    1058:	05300404 	ldreq	r0, [r0, #-1028]!	; 0xfffffbfc
    105c:	04020002 	streq	r0, [r2], #-2
    1060:	058a2f04 	streq	r2, [sl, #3844]	; 0xf04
    1064:	0505a110 	streq	sl, [r5, #-272]	; 0xfffffef0
    1068:	6812054f 	ldmdavs	r2, {r0, r1, r2, r3, r6, r8, sl}
    106c:	054d0305 	strbeq	r0, [sp, #-773]	; 0xfffffcfb
    1070:	0605300f 	streq	r3, [r5], -pc
    1074:	680c054a 	stmdavs	ip, {r1, r3, r6, r8, sl}
    1078:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
    107c:	00660601 	rsbeq	r0, r6, r1, lsl #12
    1080:	66020402 	strvs	r0, [r2], -r2, lsl #8
    1084:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    1088:	2e060404 	cdpcs	4, 0, cr0, cr6, cr4, {0}
    108c:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    1090:	0a030404 	beq	c20a8 <__bss_end+0x14dd0>
    1094:	0006052e 	andeq	r0, r6, lr, lsr #10
    1098:	6a040402 	bvs	1020a8 <__bss_end+0x54dd0>
    109c:	05860705 	streq	r0, [r6, #1797]	; 0x705
    10a0:	16058408 	strne	r8, [r5], -r8, lsl #8
    10a4:	690c056c 	stmdbvs	ip, {r2, r3, r5, r6, r8, sl}
    10a8:	056a1505 	strbeq	r1, [sl, #-1285]!	; 0xfffffafb
    10ac:	4a130318 	bmi	4c1d14 <__bss_end+0x414a3c>
    10b0:	056a0505 	strbeq	r0, [sl, #-1285]!	; 0xfffffafb
    10b4:	07058809 	streq	r8, [r5, -r9, lsl #16]
    10b8:	06052008 	streq	r2, [r5], -r8
    10bc:	0200834f 	andeq	r8, r0, #1006632961	; 0x3c000001
    10c0:	ba060104 	blt	1814d8 <__bss_end+0xd4200>
    10c4:	03040200 	movweq	r0, #16896	; 0x4200
    10c8:	06070582 	streq	r0, [r7], -r2, lsl #11
    10cc:	06059308 	streq	r9, [r5], -r8, lsl #6
    10d0:	32030568 	andcc	r0, r3, #104, 10	; 0x1a000000
    10d4:	c22f0205 	eorgt	r0, pc, #1342177280	; 0x50000000
    10d8:	05850305 	streq	r0, [r5, #773]	; 0x305
    10dc:	06053218 			; <UNDEFINED> instruction: 0x06053218
    10e0:	6815054a 	ldmdavs	r5, {r1, r3, r6, r8, sl}
    10e4:	004e0c05 	subeq	r0, lr, r5, lsl #24
    10e8:	06010402 	streq	r0, [r1], -r2, lsl #8
    10ec:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    10f0:	0a056602 	beq	15a900 <__bss_end+0xad628>
    10f4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    10f8:	04052e06 	streq	r2, [r5], #-3590	; 0xfffff1fa
    10fc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1100:	001d0533 	andseq	r0, sp, r3, lsr r5
    1104:	85040402 	strhi	r0, [r4, #-1026]	; 0xfffffbfe
    1108:	02000605 	andeq	r0, r0, #5242880	; 0x500000
    110c:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
    1110:	04054c05 	streq	r4, [r5], #-3077	; 0xfffff3fb
    1114:	a0030585 	andge	r0, r3, r5, lsl #11
    1118:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
    111c:	0605681a 			; <UNDEFINED> instruction: 0x0605681a
    1120:	4d05054a 	cfstr32mi	mvfx0, [r5, #-296]	; 0xfffffed8
    1124:	15030205 	strne	r0, [r3, #-517]	; 0xfffffdfb
    1128:	0309052e 	movweq	r0, #38190	; 0x952e
    112c:	38052e72 	stmdacc	r5, {r1, r4, r5, r6, r9, sl, fp, sp}
    1130:	4a07054a 	bmi	1c2660 <__bss_end+0x115388>
    1134:	05501305 	ldrbeq	r1, [r0, #-773]	; 0xfffffcfb
    1138:	06056e02 	streq	r6, [r5], -r2, lsl #28
    113c:	3202052a 	andcc	r0, r2, #176160768	; 0xa800000
    1140:	831005de 	tsthi	r0, #931135488	; 0x37800000
    1144:	054b1705 	strbeq	r1, [fp, #-1797]	; 0xfffff8fb
    1148:	05055107 	streq	r5, [r5, #-263]	; 0xfffffef9
    114c:	6908054a 	stmdbvs	r8, {r1, r3, r6, r8, sl}
    1150:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    1154:	07056c09 	streq	r6, [r5, -r9, lsl #24]
    1158:	4c0e054a 	cfstr32mi	mvfx0, [lr], {74}	; 0x4a
    115c:	054f0a05 	strbeq	r0, [pc, #-2565]	; 75f <_start-0xf8a1>
    1160:	05c22f02 	strbeq	r2, [r2, #3842]	; 0xf02
    1164:	05058a09 	streq	r8, [r5, #-2569]	; 0xfffff5f7
    1168:	0024054e 	eoreq	r0, r4, lr, asr #10
    116c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1170:	02001905 	andeq	r1, r0, #81920	; 0x14000
    1174:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1178:	09056804 	stmdbeq	r5, {r2, fp, sp, lr}
    117c:	66070530 			; <UNDEFINED> instruction: 0x66070530
    1180:	83500605 	cmphi	r0, #5242880	; 0x500000
    1184:	01040200 	mrseq	r0, R12_usr
    1188:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
    118c:	05820304 	streq	r0, [r2, #772]	; 0x304
    1190:	0402000f 	streq	r0, [r2], #-15
    1194:	93080603 	movwls	r0, #34307	; 0x8603
    1198:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    119c:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    11a0:	04020008 	streq	r0, [r2], #-8
    11a4:	07056603 	streq	r6, [r5, -r3, lsl #12]
    11a8:	3204054e 	andcc	r0, r4, #327155712	; 0x13800000
    11ac:	03300205 	teqeq	r0, #1342177280	; 0x50000000
    11b0:	1005ba09 	andne	fp, r5, r9, lsl #20
    11b4:	50090583 	andpl	r0, r9, r3, lsl #11
    11b8:	054c1a05 	strbeq	r1, [ip, #-2565]	; 0xfffff5fb
    11bc:	06054c08 	streq	r4, [r5], -r8, lsl #24
    11c0:	4e1e0566 	cfmsc32mi	mvfx0, mvfx14, mvfx6
    11c4:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    11c8:	3a054c1e 	bcc	154248 <__bss_end+0xa6f70>
    11cc:	662b054a 	strtvs	r0, [fp], -sl, asr #10
    11d0:	05821505 	streq	r1, [r2, #1285]	; 0x505
    11d4:	00832f06 	addeq	r2, r3, r6, lsl #30
    11d8:	06010402 	streq	r0, [r1], -r2, lsl #8
    11dc:	040200ba 	streq	r0, [r2], #-186	; 0xffffff46
    11e0:	08068203 	stmdaeq	r6, {r0, r1, r9, pc}
    11e4:	a40a05b3 	strge	r0, [sl], #-1459	; 0xfffffa4d
    11e8:	052f0205 	streq	r0, [pc, #-517]!	; feb <_start-0xf015>
    11ec:	f20d0301 	vcgt.s8	d0, d13, d1
    11f0:	0d030d05 	stceq	13, cr0, [r3, #-20]	; 0xffffffec
    11f4:	03040566 	movweq	r0, #17766	; 0x4566
    11f8:	05ac080d 	streq	r0, [ip, #2061]!	; 0x80d
    11fc:	660a0303 	strvs	r0, [sl], -r3, lsl #6
    1200:	05a01505 	streq	r1, [r0, #1285]!	; 0x505
    1204:	0705670e 	streq	r6, [r5, -lr, lsl #14]
    1208:	05660903 	strbeq	r0, [r6, #-2307]!	; 0xfffff6fd
    120c:	2e0d0301 	cdpcs	3, 0, cr0, cr13, cr1, {0}
    1210:	4e0205da 	mcrmi	5, 0, r0, cr2, cr10, {6}
    1214:	059f1405 	ldreq	r1, [pc, #1029]	; 1621 <_start-0xe9df>
    1218:	01056702 	tsteq	r5, r2, lsl #14
    121c:	02056a2f 	andeq	r6, r5, #192512	; 0x2f000
    1220:	9f01054d 	svcls	0x0001054d
    1224:	681605a2 	ldmdavs	r6, {r1, r5, r7, r8, sl}
    1228:	0b030205 	bleq	c1a44 <__bss_end+0x1476c>
    122c:	3003054a 	andcc	r0, r3, sl, asr #10
    1230:	05a01c05 	streq	r1, [r0, #3077]!	; 0xc05
    1234:	1f054a05 	svcne	0x00054a05
    1238:	4a06054c 	bmi	182770 <__bss_end+0xd5498>
    123c:	054c1305 	strbeq	r1, [ip, #-773]	; 0xfffffcfb
    1240:	1b054e0a 	blne	154a70 <__bss_end+0xa7798>
    1244:	4a0c0530 	bmi	30270c <__bss_end+0x255434>
    1248:	672f0605 	strvs	r0, [pc, -r5, lsl #12]!
    124c:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
    1250:	009e0601 	addseq	r0, lr, r1, lsl #12
    1254:	66030402 	strvs	r0, [r3], -r2, lsl #8
    1258:	02000f05 	andeq	r0, r0, #5, 30
    125c:	08060304 	stmdaeq	r6, {r2, r8, r9}
    1260:	002b055c 	eoreq	r0, fp, ip, asr r5
    1264:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
    1268:	02000805 	andeq	r0, r0, #327680	; 0x50000
    126c:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    1270:	0c054c16 	stceq	12, cr4, [r5], {22}
    1274:	054a7503 	strbeq	r7, [sl, #-1283]	; 0xfffffafd
    1278:	17054a0a 	strne	r4, [r5, -sl, lsl #20]
    127c:	054a1203 	strbeq	r1, [sl, #-515]	; 0xfffffdfd
    1280:	0b054a07 	bleq	153aa4 <__bss_end+0xa67cc>
    1284:	3007054c 	andcc	r0, r7, ip, asr #10
    1288:	9b1b052f 	blls	6c274c <__bss_end+0x615474>
    128c:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    1290:	4a0b0316 	bmi	2c1ef0 <__bss_end+0x214c18>
    1294:	054f0705 	strbeq	r0, [pc, #-1797]	; b97 <_start-0xf469>
    1298:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    129c:	26056601 	strcs	r6, [r5], -r1, lsl #12
    12a0:	01040200 	mrseq	r0, R12_usr
    12a4:	4c16054a 	cfldr32mi	mvfx0, [r6], {74}	; 0x4a
    12a8:	054b1305 	strbeq	r1, [fp, #-773]	; 0xfffffcfb
    12ac:	02056706 	andeq	r6, r5, #1572864	; 0x180000
    12b0:	30090533 	andcc	r0, r9, r3, lsr r5
    12b4:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    12b8:	0558080e 	ldrbeq	r0, [r8, #-2062]	; 0xfffff7f2
    12bc:	0a056a02 	beq	15bacc <__bss_end+0xae7f4>
    12c0:	68020530 	stmdavs	r2, {r4, r5, r8, sl}
    12c4:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
    12c8:	05862f01 	streq	r2, [r6, #3841]	; 0xf01
    12cc:	0a056a19 	beq	15bb38 <__bss_end+0xae860>
    12d0:	6909054b 	stmdbvs	r9, {r0, r1, r3, r6, r8, sl}
    12d4:	a22f0105 	eorge	r0, pc, #1073741825	; 0x40000001
    12d8:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    12dc:	ae034b01 	vmlage.f64	d4, d3, d1
    12e0:	1b059e01 	blne	168aec <__bss_end+0xbb814>
    12e4:	4a04056c 	bmi	10289c <__bss_end+0x555c4>
    12e8:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    12ec:	05059f12 	streq	r9, [r5, #-3858]	; 0xfffff0ee
    12f0:	030b054a 	movweq	r0, #46410	; 0xb54a
    12f4:	16054a09 	strne	r4, [r5], -r9, lsl #20
    12f8:	831e0567 	tsthi	lr, #432013312	; 0x19c00000
    12fc:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
    1300:	0605a008 	streq	sl, [r5], -r8
    1304:	511a0566 	tstpl	sl, r6, ror #10
    1308:	660b058a 	strvs	r0, [fp], -sl, lsl #11
    130c:	054b1c05 	strbeq	r1, [fp, #-3077]	; 0xfffff3fb
    1310:	03054a1a 	movweq	r4, #23066	; 0x5a1a
    1314:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
    1318:	00ba060c 	adcseq	r0, sl, ip, lsl #12
    131c:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    1320:	03040200 	movweq	r0, #16896	; 0x4200
    1324:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
    1328:	00900804 	addseq	r0, r0, r4, lsl #16
    132c:	82050402 	andhi	r0, r5, #33554432	; 0x2000000
    1330:	06040200 	streq	r0, [r4], -r0, lsl #4
    1334:	040200f2 	streq	r0, [r2], #-242	; 0xffffff0e
    1338:	02008208 	andeq	r8, r0, #8, 4	; 0x80000000
    133c:	00ba0904 	adcseq	r0, sl, r4, lsl #18
    1340:	820b0402 	andhi	r0, fp, #33554432	; 0x2000000
    1344:	05b00806 	ldreq	r0, [r0, #2054]!	; 0x806
    1348:	9e170301 	cdpls	3, 1, cr0, cr7, cr1, {0}
    134c:	96080205 	strls	r0, [r8], -r5, lsl #4
    1350:	05a20505 	streq	r0, [r2, #1285]!	; 0x505
    1354:	05866809 	streq	r6, [r6, #2057]	; 0x809
    1358:	14054f03 	strne	r4, [r5], #-3843	; 0xfffff0fd
    135c:	6703052f 	strvs	r0, [r3, -pc, lsr #10]
    1360:	8a2f0205 	bhi	bc1b7c <__bss_end+0xb148a4>
    1364:	05870505 	streq	r0, [r7, #1285]	; 0x505
    1368:	05866809 	streq	r6, [r6, #2057]	; 0x809
    136c:	0c054f03 	stceq	15, cr4, [r5], {3}
    1370:	6703052f 	strvs	r0, [r3, -pc, lsr #10]
    1374:	05300a05 	ldreq	r0, [r0, #-2565]!	; 0xfffff5fb
    1378:	058a2f02 	streq	r2, [sl, #3842]	; 0xf02
    137c:	0905a305 	stmdbeq	r5, {r0, r2, r8, r9, sp, pc}
    1380:	0b058668 	bleq	162d28 <__bss_end+0xb5a50>
    1384:	4a05054d 	bmi	1428c0 <__bss_end+0x955e8>
    1388:	054c1205 	strbeq	r1, [ip, #-517]	; 0xfffffdfb
    138c:	0c054a0e 			; <UNDEFINED> instruction: 0x0c054a0e
    1390:	4d0a0586 	cfstr32mi	mvfx0, [sl, #-536]	; 0xfffffde8
    1394:	052f0205 	streq	r0, [pc, #-517]!	; 1197 <_start-0xee69>
    1398:	1b058801 	blne	1633a4 <__bss_end+0xb60cc>
    139c:	4a040567 	bmi	102940 <__bss_end+0x55668>
    13a0:	054e1005 	strbeq	r1, [lr, #-5]
    13a4:	66330301 	ldrtvs	r0, [r3], -r1, lsl #6
    13a8:	6e030405 	cdpvs	4, 0, cr0, cr3, cr5, {0}
    13ac:	9b0a052e 	blls	28286c <__bss_end+0x1d5594>
    13b0:	20080805 	andcs	r0, r8, r5, lsl #16
    13b4:	0d030305 	stceq	3, cr0, [r3, #-20]	; 0xffffffec
    13b8:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    13bc:	28020601 	stmdacs	r2, {r0, r9, sl}
    13c0:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
    13c4:	01059e03 	tsteq	r5, r3, lsl #28
    13c8:	2408a606 	strcs	sl, [r8], #-1542	; 0xfffff9fa
    13cc:	0b034705 	bleq	d2fe8 <__bss_end+0x25d10>
    13d0:	4a02059e 	bmi	82a50 <ramdisk+0x55778>
    13d4:	05872e05 	streq	r2, [r7, #3589]	; 0xe05
    13d8:	05054a02 	streq	r4, [r5, #-2562]	; 0xfffff5fe
    13dc:	6b54056b 	blvs	1502990 <__bss_end+0x14556b8>
    13e0:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
    13e4:	82120301 	andshi	r0, r2, #67108864	; 0x4000000
    13e8:	74031d05 	strvc	r1, [r3], #-3333	; 0xfffff2fb
    13ec:	4a10052e 	bmi	4028ac <__bss_end+0x3555d4>
    13f0:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    13f4:	4a0b0301 	bmi	2c2000 <__bss_end+0x214d28>
    13f8:	05ba2603 	ldreq	r2, [sl, #1539]!	; 0x603
    13fc:	82110320 	andshi	r0, r1, #32, 6	; 0x80000000
    1400:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
    1404:	1b054c02 	blne	154414 <__bss_end+0xa713c>
    1408:	4a040584 	bmi	102a20 <__bss_end+0x55748>
    140c:	834c0305 	movthi	r0, #49925	; 0xc305
    1410:	01040200 	mrseq	r0, R12_usr
    1414:	0200ba06 	andeq	fp, r0, #24576	; 0x6000
    1418:	06820304 	streq	r0, [r2], r4, lsl #6
    141c:	1405b208 	strne	fp, [r5], #-520	; 0xfffffdf8
    1420:	4a3005a1 	bmi	c02aac <__bss_end+0xb557d4>
    1424:	05660405 	strbeq	r0, [r6, #-1029]!	; 0xfffffbfb
    1428:	056a500b 	strbeq	r5, [sl, #-11]!
    142c:	01054d09 	tsteq	r5, r9, lsl #26
    1430:	1c05f62f 	stcne	6, cr15, [r5], {47}	; 0x2f
    1434:	831d0584 	tsthi	sp, #132, 10	; 0x21000000
    1438:	be830105 	rmflts	f0, f3, f5
    143c:	05a40205 	streq	r0, [r4, #517]!	; 0x205
    1440:	06053408 	streq	r3, [r5], -r8, lsl #8
    1444:	4c0d054a 	cfstr32mi	mvfx0, [sp], {74}	; 0x4a
    1448:	056b2505 	strbeq	r2, [fp, #-1285]!	; 0xfffffafb
    144c:	05054a19 	streq	r4, [r5, #-2585]	; 0xfffff5e7
    1450:	0076054a 	rsbseq	r0, r6, sl, asr #10
    1454:	4a010402 	bmi	42464 <ramdisk+0x1518c>
    1458:	02003d05 	andeq	r3, r0, #320	; 0x140
    145c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1460:	04020038 	streq	r0, [r2], #-56	; 0xffffffc8
    1464:	0c054a01 			; <UNDEFINED> instruction: 0x0c054a01
    1468:	68210550 	stmdavs	r1!, {r4, r6, r8, sl}
    146c:	054a5905 	strbeq	r5, [sl, #-2309]	; 0xfffff6fb
    1470:	71054a0e 	tstvc	r5, lr, lsl #20
    1474:	4a0a052e 	bmi	282934 <__bss_end+0x1d565c>
    1478:	054d1805 	strbeq	r1, [sp, #-2053]	; 0xfffff7fb
    147c:	34054a50 	strcc	r4, [r5], #-2640	; 0xfffff5b0
    1480:	2e13054a 	cfmac32cs	mvfx0, mvfx3, mvfx10
    1484:	059f0405 	ldreq	r0, [pc, #1029]	; 1891 <_start-0xe76f>
    1488:	056a4b0c 	strbeq	r4, [sl, #-2828]!	; 0xfffff4f4
    148c:	09054d02 	stmdbeq	r5, {r1, r8, sl, fp, lr}
    1490:	2f010530 	svccs	0x00010530
    1494:	4b0f05a2 	blmi	3c2b24 <__bss_end+0x31584c>
    1498:	03670105 	cmneq	r7, #1073741825	; 0x40000001
    149c:	03059e32 	movweq	r9, #24114	; 0x5e32
    14a0:	03080589 	movweq	r0, #34185	; 0x8589
    14a4:	06052e17 			; <UNDEFINED> instruction: 0x06052e17
    14a8:	4c05054a 	cfstr32mi	mvfx0, [r5], {74}	; 0x4a
    14ac:	67030305 	strvs	r0, [r3, -r5, lsl #6]
    14b0:	0301052e 	movweq	r0, #5422	; 0x152e
    14b4:	17054a3a 	smladxne	r5, sl, sl, r4
    14b8:	4a0305db 	bmi	c2c2c <__bss_end+0x15954>
    14bc:	05855905 	streq	r5, [r5, #2309]	; 0x905
    14c0:	0e056a04 	vmlaeq.f32	s12, s10, s8
    14c4:	4d140568 	cfldr32mi	mvfx0, [r4, #-416]	; 0xfffffe60
    14c8:	836d0205 	cmnhi	sp, #1342177280	; 0x50000000
    14cc:	05836986 	streq	r6, [r3, #2438]	; 0x986
    14d0:	660a0314 			; <UNDEFINED> instruction: 0x660a0314
    14d4:	14030105 	strne	r0, [r3], #-261	; 0xfffffefb
    14d8:	66170366 	ldrvs	r0, [r7], -r6, ror #6
    14dc:	05691205 	strbeq	r1, [r9, #-517]!	; 0xfffffdfb
    14e0:	03054a02 	movweq	r4, #23042	; 0x5a02
    14e4:	03040200 	movweq	r0, #16896	; 0x4200
    14e8:	00600530 	rsbeq	r0, r0, r0, lsr r5
    14ec:	08030402 	stmdaeq	r3, {r1, sl}
    14f0:	0002051e 	andeq	r0, r2, lr, lsl r5
    14f4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    14f8:	054b4b6b 	strbeq	r4, [fp, #-2923]	; 0xfffff495
    14fc:	05504e03 	ldrbeq	r4, [r0, #-3587]	; 0xfffff1fd
    1500:	1c055014 	stcne	0, cr5, [r5], {20}
    1504:	67010567 	strvs	r0, [r1, -r7, ror #10]
    1508:	16055c08 	strne	r5, [r5], -r8, lsl #24
    150c:	4a05056d 	bmi	142ac8 <__bss_end+0x957f0>
    1510:	054c0405 	strbeq	r0, [ip, #-1029]	; 0xfffffbfb
    1514:	12052f14 	andne	r2, r5, #20, 30	; 0x50
    1518:	2f0405ba 	svccs	0x000405ba
    151c:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    1520:	1b056a05 	blne	15bd3c <__bss_end+0xaea64>
    1524:	4a0c0530 	bmi	3029ec <__bss_end+0x255714>
    1528:	834b0605 	movthi	r0, #46597	; 0xb605
    152c:	a005059f 	mulge	r5, pc, r5	; <UNPREDICTABLE>
    1530:	4f010530 	svcmi	0x00010530
    1534:	840205be 	strhi	r0, [r2], #-1470	; 0xfffffa42
    1538:	05841205 	streq	r1, [r4, #517]	; 0x205
    153c:	03054a04 	movweq	r4, #23044	; 0x5a04
    1540:	4a560569 	bmi	1582aec <__bss_end+0x14d5814>
    1544:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    1548:	820f0301 	andhi	r0, pc, #67108864	; 0x4000000
    154c:	76030305 	strvc	r0, [r3], -r5, lsl #6
    1550:	4a4e052e 	bmi	1382a10 <__bss_end+0x12d5738>
    1554:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    1558:	05058713 	streq	r8, [r5, #-1811]	; 0xfffff8ed
    155c:	6819054a 	ldmdavs	r9, {r1, r3, r6, r8, sl}
    1560:	f6690105 			; <UNDEFINED> instruction: 0xf6690105
    1564:	05bf1a05 	ldreq	r1, [pc, #2565]!	; 1f71 <_start-0xe08f>
    1568:	17056804 	strne	r6, [r5, -r4, lsl #16]
    156c:	002c056b 	eoreq	r0, ip, fp, ror #10
    1570:	66010402 	strvs	r0, [r1], -r2, lsl #8
    1574:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    1578:	05ba0204 	ldreq	r0, [sl, #516]!	; 0x204
    157c:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    1580:	0f052e04 	svceq	0x00052e04
    1584:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    1588:	0005054c 	andeq	r0, r5, ip, asr #10
    158c:	4a040402 	bmi	10259c <__bss_end+0x552c4>
    1590:	054d0405 	strbeq	r0, [sp, #-1029]	; 0xfffffbfb
    1594:	14054b0d 	strne	r4, [r5], #-2829	; 0xfffff4f3
    1598:	4a3b056b 	bmi	ec2b4c <__bss_end+0xe15874>
    159c:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
    15a0:	820a0309 	andhi	r0, sl, #603979776	; 0x24000000
    15a4:	052f0105 	streq	r0, [pc, #-261]!	; 14a7 <_start-0xeb59>
    15a8:	019d0302 	orrseq	r0, sp, r2, lsl #6
    15ac:	8a030566 	bhi	c2b4c <__bss_end+0x15874>
    15b0:	4b020583 	blmi	82bc4 <ramdisk+0x558ec>
    15b4:	01000602 	tsteq	r0, r2, lsl #12
    15b8:	00018101 	andeq	r8, r1, r1, lsl #2
    15bc:	66000300 	strvs	r0, [r0], -r0, lsl #6
    15c0:	02000000 	andeq	r0, r0, #0
    15c4:	0d0efb01 	vstreq	d15, [lr, #-4]
    15c8:	01010100 	mrseq	r0, (UNDEF: 17)
    15cc:	00000001 	andeq	r0, r0, r1
    15d0:	01000001 	tsteq	r0, r1
    15d4:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1520 <_start-0xeae0>
    15d8:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
    15dc:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    15e0:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    15e4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    15e8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    15ec:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    15f0:	72656270 	rsbvc	r6, r5, #112, 4
    15f4:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    15f8:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    15fc:	4f545265 	svcmi	0x00545265
    1600:	61462d53 	cmpvs	r6, r3, asr sp
    1604:	2f534674 	svccs	0x00534674
    1608:	6f6d6544 	svcvs	0x006d6544
    160c:	6972442f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, sl, lr}^
    1610:	73726576 	cmnvc	r2, #494927872	; 0x1d800000
    1614:	72690000 	rsbvc	r0, r9, #0
    1618:	00632e71 	rsbeq	r2, r3, r1, ror lr
    161c:	69000001 	stmdbvs	r0, {r0}
    1620:	682e7172 	stmdavs	lr!, {r1, r4, r5, r6, r8, ip, sp, lr}
    1624:	00000100 	andeq	r0, r0, r0, lsl #2
    1628:	00010500 	andeq	r0, r1, r0, lsl #10
    162c:	34c40205 	strbcc	r0, [r4], #517	; 0x205
    1630:	1e030002 	cdpne	0, 0, cr0, cr3, cr2, {0}
    1634:	9f080501 	svcls	0x00080501
    1638:	05311b05 	ldreq	r1, [r1, #-2821]!	; 0xfffff4fb
    163c:	10054a19 	andne	r4, r5, r9, lsl sl
    1640:	1905312e 	stmdbne	r5, {r1, r2, r3, r5, r8, ip, sp}
    1644:	66060585 	strvs	r0, [r6], -r5, lsl #11
    1648:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
    164c:	14056604 	strne	r6, [r5], #-1540	; 0xfffff9fc
    1650:	660e05f5 			; <UNDEFINED> instruction: 0x660e05f5
    1654:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    1658:	66730308 	ldrbtvs	r0, [r3], -r8, lsl #6
    165c:	0f030105 	svceq	0x00030105
    1660:	2f05a666 	svccs	0x0005a666
    1664:	2e19054b 	cfmac32cs	mvfx0, mvfx9, mvfx11
    1668:	05311505 	ldreq	r1, [r1, #-1285]!	; 0xfffffafb
    166c:	14052e05 	strne	r2, [r5], #-3589	; 0xfffff1fb
    1670:	4a28054b 	bmi	a02ba4 <__bss_end+0x9558cc>
    1674:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    1678:	05058515 	streq	r8, [r5, #-1301]	; 0xfffffaeb
    167c:	4b14052e 	blmi	502b3c <__bss_end+0x455864>
    1680:	054a2805 	strbeq	r2, [sl, #-2053]	; 0xfffff7fb
    1684:	15054a03 	strne	r4, [r5, #-2563]	; 0xfffff5fd
    1688:	2e050585 	cfsh32cs	mvfx0, mvfx5, #-59
    168c:	054b2e05 	strbeq	r2, [fp, #-3589]	; 0xfffff1fb
    1690:	03054a25 	movweq	r4, #23077	; 0x5a25
    1694:	8301052e 	movwhi	r0, #5422	; 0x152e
    1698:	4b020585 	blmi	82cb4 <ramdisk+0x559dc>
    169c:	852f0105 	strhi	r0, [pc, #-261]!	; 159f <_start-0xea61>
    16a0:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
    16a4:	05852f01 	streq	r2, [r5, #3841]	; 0xf01
    16a8:	0305bb05 	movweq	fp, #23301	; 0x5b05
    16ac:	2f210567 	svccs	0x00210567
    16b0:	bb030583 	bllt	c2cc4 <__bss_end+0x159ec>
    16b4:	85300105 	ldrhi	r0, [r0, #-261]!	; 0xfffffefb
    16b8:	05832305 	streq	r2, [r3, #773]	; 0x305
    16bc:	05054a10 	streq	r4, [r5, #-2576]	; 0xfffff5f0
    16c0:	67080568 	strvs	r0, [r8, -r8, ror #10]
    16c4:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
    16c8:	01054b0e 	tsteq	r5, lr, lsl #22
    16cc:	05ba0a03 	ldreq	r0, [sl, #2563]!	; 0xa03
    16d0:	2e78030a 	cdpcs	3, 7, cr0, cr8, cr10, {0}
    16d4:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    16d8:	0e052e12 	mcreq	14, 0, r2, cr5, cr2, {0}
    16dc:	c001054b 	andgt	r0, r1, fp, asr #10
    16e0:	052a0a05 	streq	r0, [sl, #-2565]!	; 0xfffff5fb
    16e4:	16056708 	strne	r6, [r5], -r8, lsl #14
    16e8:	4b0e052e 	blmi	382ba8 <__bss_end+0x2d58d0>
    16ec:	bdbc0105 	ldflts	f0, [ip, #20]!
    16f0:	05832305 	streq	r2, [r3, #773]	; 0x305
    16f4:	05054a10 	streq	r4, [r5, #-2576]	; 0xfffff5f0
    16f8:	67080568 	strvs	r0, [r8, -r8, ror #10]
    16fc:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    1700:	11054b0e 	tstne	r5, lr, lsl #22
    1704:	4a0e054a 	bmi	382c34 <__bss_end+0x2d595c>
    1708:	0a030105 	beq	c1b24 <__bss_end+0x1484c>
    170c:	030a0566 	movweq	r0, #42342	; 0xa566
    1710:	08052e78 	stmdaeq	r5, {r3, r4, r5, r6, r9, sl, fp, sp}
    1714:	2e130567 	cfmsc32cs	mvfx0, mvfx3, mvfx7
    1718:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    171c:	0e054a11 			; <UNDEFINED> instruction: 0x0e054a11
    1720:	6c01054a 	cfstr32vs	mvfx0, [r1], {74}	; 0x4a
    1724:	052a0a05 	streq	r0, [sl, #-2565]!	; 0xfffff5fb
    1728:	17056708 	strne	r6, [r5, -r8, lsl #14]
    172c:	4b0e052e 	blmi	382bec <__bss_end+0x2d5914>
    1730:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
    1734:	01054a0e 	tsteq	r5, lr, lsl #20
    1738:	000c0268 	andeq	r0, ip, r8, ror #4
    173c:	01830101 	orreq	r0, r3, r1, lsl #2
    1740:	00030000 	andeq	r0, r3, r0
    1744:	00000068 	andeq	r0, r0, r8, rrx
    1748:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    174c:	0101000d 	tsteq	r1, sp
    1750:	00000101 	andeq	r0, r0, r1, lsl #2
    1754:	00000100 	andeq	r0, r0, r0, lsl #2
    1758:	6f682f01 	svcvs	0x00682f01
    175c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 15b0 <_start-0xea50>
    1760:	63616e75 	cmnvs	r1, #1872	; 0x750
    1764:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    1768:	63726178 	cmnvs	r2, #120, 2
    176c:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    1770:	61522f63 	cmpvs	r2, r3, ror #30
    1774:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1778:	50797272 	rsbspl	r7, r9, r2, ror r2
    177c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1780:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1784:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    1788:	53467461 	movtpl	r7, #25697	; 0x6461
    178c:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1790:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    1794:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    1798:	67000073 	smlsdxvs	r0, r3, r0, r0
    179c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    17a0:	00010063 	andeq	r0, r1, r3, rrx
    17a4:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
    17a8:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    17ac:	00000001 	andeq	r0, r0, r1
    17b0:	05004105 	streq	r4, [r0, #-261]	; 0xfffffefb
    17b4:	02386802 	eorseq	r6, r8, #131072	; 0x20000
    17b8:	00e80300 	rsceq	r0, r8, r0, lsl #6
    17bc:	a0160501 	andsge	r0, r6, r1, lsl #10
    17c0:	05820605 	streq	r0, [r2, #1541]	; 0x605
    17c4:	1005301b 	andne	r3, r5, fp, lsl r0
    17c8:	6814052e 	ldmdavs	r4, {r1, r2, r3, r5, r8, sl}
    17cc:	20080605 	andcs	r0, r8, r5, lsl #12
    17d0:	052f1805 	streq	r1, [pc, #-2053]!	; fd3 <_start-0xf02d>
    17d4:	0905820f 	stmdbeq	r5, {r0, r1, r2, r3, r9, pc}
    17d8:	4a06054a 	bmi	182d08 <__bss_end+0xd5a30>
    17dc:	05671305 	strbeq	r1, [r7, #-773]!	; 0xfffffcfb
    17e0:	1a054a23 	bne	154074 <__bss_end+0xa6d9c>
    17e4:	2e060582 	cfsh32cs	mvfx0, mvfx6, #-62
    17e8:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
    17ec:	01052e18 	tsteq	r5, r8, lsl lr
    17f0:	bc3f0567 	cfldr32lt	mvfx0, [pc], #-412	; 165c <_start-0xe9a4>
    17f4:	05bb0205 	ldreq	r0, [fp, #517]!	; 0x205
    17f8:	38058301 	stmdacc	r5, {r0, r8, r9, pc}
    17fc:	9f100568 	svcls	0x00100568
    1800:	05672005 	strbeq	r2, [r7, #-5]!
    1804:	10054a17 	andne	r4, r5, r7, lsl sl
    1808:	3004054a 	andcc	r0, r4, sl, asr #10
    180c:	05671705 	strbeq	r1, [r7, #-1797]!	; 0xfffff8fb
    1810:	05b00801 	ldreq	r0, [r0, #2049]!	; 0x801
    1814:	01052c17 	tsteq	r5, r7, lsl ip
    1818:	23053e08 	movwcs	r3, #24072	; 0x5e08
    181c:	831005a0 	tsthi	r0, #160, 10	; 0x28000000
    1820:	052e1e05 	streq	r1, [lr, #-3589]!	; 0xfffff1fb
    1824:	2c054a17 			; <UNDEFINED> instruction: 0x2c054a17
    1828:	4a230582 	bmi	8c2e38 <__bss_end+0x815b60>
    182c:	052e3105 	streq	r3, [lr, #-261]!	; 0xfffffefb
    1830:	05a12f01 	streq	r2, [r1, #3841]!	; 0xf01
    1834:	1005bb17 	andne	fp, r5, r7, lsl fp
    1838:	02052f66 	andeq	r2, r5, #408	; 0x198
    183c:	08170568 	ldmdaeq	r7, {r3, r5, r6, r8, sl}
    1840:	0803055a 	stmdaeq	r3, {r1, r3, r4, r6, r8, sl}
    1844:	301705ad 	andscc	r0, r7, sp, lsr #11
    1848:	3d080305 	stccc	3, cr0, [r8, #-20]	; 0xffffffec
    184c:	05301705 	ldreq	r1, [r0, #-1797]!	; 0xfffff8fb
    1850:	05ad0803 	streq	r0, [sp, #2051]!	; 0x803
    1854:	03053017 	movweq	r3, #20503	; 0x5017
    1858:	18053d08 	stmdane	r5, {r3, r8, sl, fp, ip, sp}
    185c:	08030530 	stmdaeq	r3, {r4, r5, r8, sl}
    1860:	301805ad 	andscc	r0, r8, sp, lsr #11
    1864:	3d080305 	stccc	3, cr0, [r8, #-20]	; 0xffffffec
    1868:	30010530 	andcc	r0, r1, r0, lsr r5
    186c:	bb2105a1 	bllt	842ef8 <__bss_end+0x795c20>
    1870:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    1874:	10054a15 	andne	r4, r5, r5, lsl sl
    1878:	02052f2e 	andeq	r2, r5, #46, 30	; 0xb8
    187c:	08170568 	ldmdaeq	r7, {r3, r5, r6, r8, sl}
    1880:	0803055a 	stmdaeq	r3, {r1, r3, r4, r6, r8, sl}
    1884:	301705ad 	andscc	r0, r7, sp, lsr #11
    1888:	3d080305 	stccc	3, cr0, [r8, #-20]	; 0xffffffec
    188c:	05301705 	ldreq	r1, [r0, #-1797]!	; 0xfffff8fb
    1890:	05ad0803 	streq	r0, [sp, #2051]!	; 0x803
    1894:	03053017 	movweq	r3, #20503	; 0x5017
    1898:	18053d08 	stmdane	r5, {r3, r8, sl, fp, ip, sp}
    189c:	08030530 	stmdaeq	r3, {r4, r5, r8, sl}
    18a0:	301805ad 	andscc	r0, r8, sp, lsr #11
    18a4:	3d080305 	stccc	3, cr0, [r8, #-20]	; 0xffffffec
    18a8:	30010530 	andcc	r0, r1, r0, lsr r5
    18ac:	832005a1 			; <UNDEFINED> instruction: 0x832005a1
    18b0:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    18b4:	052f4a10 	streq	r4, [pc, #-2576]!	; eac <_start-0xf154>
    18b8:	16056807 	strne	r6, [r5], -r7, lsl #16
    18bc:	8301052e 	movwhi	r0, #5422	; 0x152e
    18c0:	01000a02 	tsteq	r0, r2, lsl #20
    18c4:	00022901 	andeq	r2, r2, r1, lsl #18
    18c8:	ab000300 	blge	24d0 <_start-0xdb30>
    18cc:	02000000 	andeq	r0, r0, #0
    18d0:	0d0efb01 	vstreq	d15, [lr, #-4]
    18d4:	01010100 	mrseq	r0, (UNDEF: 17)
    18d8:	00000001 	andeq	r0, r0, r1
    18dc:	01000001 	tsteq	r0, r1
    18e0:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 182c <_start-0xe7d4>
    18e4:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
    18e8:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    18ec:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    18f0:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    18f4:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    18f8:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    18fc:	72656270 	rsbvc	r6, r5, #112, 4
    1900:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1904:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    1908:	4f545265 	svcmi	0x00545265
    190c:	61462d53 	cmpvs	r6, r3, asr sp
    1910:	2f534674 	svccs	0x00534674
    1914:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
    1918:	4f545265 	svcmi	0x00545265
    191c:	6f532f53 	svcvs	0x00532f53
    1920:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1924:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
    1928:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
    192c:	654d2f65 	strbvs	r2, [sp, #-3941]	; 0xfffff09b
    1930:	6e614d6d 	cdpvs	13, 6, cr4, cr1, cr13, {3}
    1934:	752f0067 	strvc	r0, [pc, #-103]!	; 18d5 <_start-0xe72b>
    1938:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1774 <_start-0xe88c>
    193c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1940:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    1944:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1948:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    194c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1950:	2e30312f 	rsfcssp	f3, f0, #10.0
    1954:	2f312e33 	svccs	0x00312e33
    1958:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    195c:	00656475 	rsbeq	r6, r5, r5, ror r4
    1960:	61656800 	cmnvs	r5, r0, lsl #16
    1964:	2e345f70 	mrccs	15, 1, r5, cr4, cr0, {3}
    1968:	00010063 	andeq	r0, r1, r3, rrx
    196c:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    1970:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    1974:	00020068 	andeq	r0, r2, r8, rrx
    1978:	01050000 	mrseq	r0, (UNDEF: 5)
    197c:	40020500 	andmi	r0, r2, r0, lsl #10
    1980:	0300023e 	movweq	r0, #574	; 0x23e
    1984:	05010192 	streq	r0, [r1, #-402]	; 0xfffffe6e
    1988:	02058407 	andeq	r8, r5, #117440512	; 0x7000000
    198c:	320d054c 	andcc	r0, sp, #76, 10	; 0x13000000
    1990:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    1994:	05054c04 	streq	r4, [r5, #-3076]	; 0xfffff3fc
    1998:	68100533 	ldmdavs	r0, {r0, r1, r4, r5, r8, sl}
    199c:	05a21405 	streq	r1, [r2, #1029]!	; 0x405
    19a0:	11054a06 	tstne	r5, r6, lsl #20
    19a4:	8605054d 	strhi	r0, [r5], -sp, asr #10
    19a8:	02002c05 	andeq	r2, r0, #1280	; 0x500
    19ac:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    19b0:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    19b4:	14052e01 	strne	r2, [r5], #-3585	; 0xfffff1ff
    19b8:	4b0c056a 	blmi	302f68 <__bss_end+0x255c90>
    19bc:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    19c0:	0d053015 	stceq	0, cr3, [r5, #-84]	; 0xffffffac
    19c4:	6314054b 	tstvs	r4, #314572800	; 0x12c00000
    19c8:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    19cc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
    19d0:	31056601 	tstcc	r5, r1, lsl #12
    19d4:	01040200 	mrseq	r0, R12_usr
    19d8:	5210054a 	andspl	r0, r0, #310378496	; 0x12800000
    19dc:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    19e0:	10056a42 	andne	r6, r5, r2, asr #20
    19e4:	2e0e054a 	cfsh32cs	mvfx0, mvfx14, #42
    19e8:	054e2f05 	strbeq	r2, [lr, #-3845]	; 0xfffff0fb
    19ec:	12054a26 	andne	r4, r5, #155648	; 0x26000
    19f0:	4a1f054d 	bmi	7c2f2c <__bss_end+0x715c54>
    19f4:	054a3105 	strbeq	r3, [sl, #-261]	; 0xfffffefb
    19f8:	15054a07 	strne	r4, [r5, #-2567]	; 0xfffff5f9
    19fc:	862a054f 	strthi	r0, [sl], -pc, asr #10
    1a00:	054a3705 	strbeq	r3, [sl, #-1797]	; 0xfffff8fb
    1a04:	1a054a21 	bne	154290 <__bss_end+0xa6fb8>
    1a08:	6906054b 	stmdbvs	r6, {r0, r1, r3, r6, r8, sl}
    1a0c:	054d1905 	strbeq	r1, [sp, #-2309]	; 0xfffff6fb
    1a10:	19054a23 	stmdbne	r5, {r0, r1, r5, r9, fp, lr}
    1a14:	6a02054a 	bvs	82f44 <ramdisk+0x55c6c>
    1a18:	0c030c05 	stceq	12, cr0, [r3], {5}
    1a1c:	bc09052e 	cfstr32lt	mvfx0, [r9], {46}	; 0x2e
    1a20:	da2f0105 	ble	bc1e3c <__bss_end+0xb14b64>
    1a24:	05831005 	streq	r1, [r3, #5]
    1a28:	07054d04 	streq	r4, [r5, -r4, lsl #26]
    1a2c:	a10a056a 	tstge	sl, sl, ror #10
    1a30:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    1a34:	18053121 	stmdane	r5, {r0, r5, r8, ip, sp}
    1a38:	9f04054a 	svcls	0x0004054a
    1a3c:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    1a40:	05863001 	streq	r3, [r6, #1]
    1a44:	01054b09 	tsteq	r5, r9, lsl #22
    1a48:	864ca24b 	strbhi	sl, [ip], -fp, asr #4
    1a4c:	09031905 	stmdbeq	r3, {r0, r2, r8, fp, ip}
    1a50:	67140566 	ldrvs	r0, [r4, -r6, ror #10]
    1a54:	056a1c05 	strbeq	r1, [sl, #-3077]!	; 0xfffff3fb
    1a58:	05672e0d 	strbeq	r2, [r7, #-3597]!	; 0xfffff1f3
    1a5c:	07059f08 	streq	r9, [r5, -r8, lsl #30]
    1a60:	4a140568 	bmi	503008 <__bss_end+0x455d30>
    1a64:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    1a68:	13054a19 	movwne	r4, #23065	; 0x5a19
    1a6c:	4b30054e 	blmi	c02fac <__bss_end+0xb55cd4>
    1a70:	05661f05 	strbeq	r1, [r6, #-3845]!	; 0xfffff0fb
    1a74:	16054b24 	strne	r4, [r5], -r4, lsr #22
    1a78:	bb010585 	bllt	43094 <ramdisk+0x15dbc>
    1a7c:	881205f6 	ldmdahi	r2, {r1, r2, r4, r5, r6, r7, r8, sl}
    1a80:	054a0205 	strbeq	r0, [sl, #-517]	; 0xfffffdfb
    1a84:	04020057 	streq	r0, [r2], #-87	; 0xffffffa9
    1a88:	27052e03 	strcs	r2, [r5, -r3, lsl #28]
    1a8c:	01040200 	mrseq	r0, R12_usr
    1a90:	00020566 	andeq	r0, r2, r6, ror #10
    1a94:	4a010402 	bmi	42aa4 <ramdisk+0x157cc>
    1a98:	056d0605 	strbeq	r0, [sp, #-1541]!	; 0xfffff9fb
    1a9c:	0c054b18 			; <UNDEFINED> instruction: 0x0c054b18
    1aa0:	4a04054a 	bmi	102fd0 <__bss_end+0x55cf8>
    1aa4:	05681a05 	strbeq	r1, [r8, #-2565]!	; 0xfffff5fb
    1aa8:	1a054a2c 	bne	154360 <__bss_end+0xa7088>
    1aac:	6713054a 	ldrvs	r0, [r3, -sl, asr #10]
    1ab0:	054f0605 	strbeq	r0, [pc, #-1541]	; 14b3 <_start-0xeb4d>
    1ab4:	0c054b1d 			; <UNDEFINED> instruction: 0x0c054b1d
    1ab8:	4a4d054a 	bmi	1342fe8 <__bss_end+0x1295d10>
    1abc:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
    1ac0:	23054c11 	movwcs	r4, #23569	; 0x5c11
    1ac4:	4a05054a 	bmi	142ff4 <__bss_end+0x95d1c>
    1ac8:	054d2005 	strbeq	r2, [sp, #-5]
    1acc:	3e054a2d 	vmlacc.f32	s8, s10, s27
    1ad0:	2e20054a 	cfsh64cs	mvdx0, mvdx0, #42
    1ad4:	05673105 	strbeq	r3, [r7, #-261]!	; 0xfffffefb
    1ad8:	25054a42 	strcs	r4, [r5, #-2626]	; 0xfffff5be
    1adc:	30056a2e 	andcc	r6, r5, lr, lsr #20
    1ae0:	4a2405a3 	bmi	903174 <__bss_end+0x855e9c>
    1ae4:	05510405 	ldrbeq	r0, [r1, #-1029]	; 0xfffffbfb
    1ae8:	0105841f 	tsteq	r5, pc, lsl r4
    1aec:	000c0268 	andeq	r0, ip, r8, ror #4
    1af0:	02c20101 	sbceq	r0, r2, #1073741824	; 0x40000000
    1af4:	00030000 	andeq	r0, r3, r0
    1af8:	000000d5 	ldrdeq	r0, [r0], -r5
    1afc:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1b00:	0101000d 	tsteq	r1, sp
    1b04:	00000101 	andeq	r0, r0, r1, lsl #2
    1b08:	00000100 	andeq	r0, r0, r0, lsl #2
    1b0c:	6f682f01 	svcvs	0x00682f01
    1b10:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 1964 <_start-0xe69c>
    1b14:	63616e75 	cmnvs	r1, #1872	; 0x750
    1b18:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    1b1c:	63726178 	cmnvs	r2, #120, 2
    1b20:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    1b24:	61522f63 	cmpvs	r2, r3, ror #30
    1b28:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1b2c:	50797272 	rsbspl	r7, r9, r2, ror r2
    1b30:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1b34:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1b38:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    1b3c:	53467461 	movtpl	r7, #25697	; 0x6461
    1b40:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    1b44:	752f006f 	strvc	r0, [pc, #-111]!	; 1add <_start-0xe523>
    1b48:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 1984 <_start-0xe67c>
    1b4c:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    1b50:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    1b54:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1b58:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1b5c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1b60:	2e30312f 	rsfcssp	f3, f0, #10.0
    1b64:	2f312e33 	svccs	0x00312e33
    1b68:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    1b6c:	00656475 	rsbeq	r6, r5, r5, ror r4
    1b70:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1abc <_start-0xe544>
    1b74:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
    1b78:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    1b7c:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    1b80:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1b84:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1b88:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    1b8c:	72656270 	rsbvc	r6, r5, #112, 4
    1b90:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1b94:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    1b98:	4f545265 	svcmi	0x00545265
    1b9c:	61462d53 	cmpvs	r6, r3, asr sp
    1ba0:	2f534674 	svccs	0x00534674
    1ba4:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    1ba8:	6f532f53 	svcvs	0x00532f53
    1bac:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
    1bb0:	616d0000 	cmnvs	sp, r0
    1bb4:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
    1bb8:	00000100 	andeq	r0, r0, r0, lsl #2
    1bbc:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    1bc0:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
    1bc4:	00000200 	andeq	r0, r0, r0, lsl #4
    1bc8:	682e6666 	stmdavs	lr!, {r1, r2, r5, r6, r9, sl, sp, lr}
    1bcc:	00000300 	andeq	r0, r0, r0, lsl #6
    1bd0:	00180500 	andseq	r0, r8, r0, lsl #10
    1bd4:	43040205 	movwmi	r0, #16901	; 0x4205
    1bd8:	cf030002 	svcgt	0x00030002
    1bdc:	0b050100 	bleq	141fe4 <__bss_end+0x94d0c>
    1be0:	000c059f 	muleq	ip, pc, r5	; <UNPREDICTABLE>
    1be4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    1be8:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    1bec:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1bf0:	0402000b 	streq	r0, [r2], #-11
    1bf4:	05052e01 	streq	r2, [r5, #-3585]	; 0xfffff1ff
    1bf8:	2e0e054b 	cfsh32cs	mvfx0, mvfx14, #43
    1bfc:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
    1c00:	0b05bc1f 	bleq	170c84 <__bss_end+0xc39ac>
    1c04:	2f150583 	svccs	0x00150583
    1c08:	05660905 	strbeq	r0, [r6, #-2309]!	; 0xfffff6fb
    1c0c:	0b05650c 	bleq	15b044 <__bss_end+0xadd6c>
    1c10:	4d01054a 	cfstr32mi	mvfx0, [r1, #-296]	; 0xfffffed8
    1c14:	05852205 	streq	r2, [r5, #517]	; 0x205
    1c18:	0805a009 	stmdaeq	r5, {r0, r3, sp, pc}
    1c1c:	6709054d 	strvs	r0, [r9, -sp, asr #10]
    1c20:	056c1805 	strbeq	r1, [ip, #-2053]!	; 0xfffff7fb
    1c24:	053c080e 	ldreq	r0, [ip, #-2062]!	; 0xfffff7f2
    1c28:	12056618 	andne	r6, r5, #24, 12	; 0x1800000
    1c2c:	670d054a 	strvs	r0, [sp, -sl, asr #10]
    1c30:	6c9c0b05 	fldmiaxvs	ip, {d0-d1}	;@ Deprecated
    1c34:	052f0905 	streq	r0, [pc, #-2309]!	; 1337 <_start-0xecc9>
    1c38:	051f080b 	ldreq	r0, [pc, #-2059]	; 1435 <_start-0xebcb>
    1c3c:	25056901 	strcs	r6, [r5, #-2305]	; 0xfffff6ff
    1c40:	9f050568 	svcls	0x00050568
    1c44:	0215054b 	andseq	r0, r5, #314572800	; 0x12c00000
    1c48:	09051330 	stmdbeq	r5, {r4, r5, r8, r9, ip}
    1c4c:	2f1b054a 	svccs	0x001b054a
    1c50:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c54:	09052f1a 	stmdbeq	r5, {r1, r3, r4, r8, r9, sl, fp, sp}
    1c58:	2f1c054a 	svccs	0x001c054a
    1c5c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c60:	09052f1a 	stmdbeq	r5, {r1, r3, r4, r8, r9, sl, fp, sp}
    1c64:	2f1a054a 	svccs	0x001a054a
    1c68:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c6c:	09052f1f 	stmdbeq	r5, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
    1c70:	2f19054a 	svccs	0x0019054a
    1c74:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c78:	09052f18 	stmdbeq	r5, {r3, r4, r8, r9, sl, fp, sp}
    1c7c:	2f21054a 	svccs	0x0021054a
    1c80:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c84:	09052f22 	stmdbeq	r5, {r1, r5, r8, r9, sl, fp, sp}
    1c88:	2f20054a 	svccs	0x0020054a
    1c8c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c90:	09052f1e 	stmdbeq	r5, {r1, r2, r3, r4, r8, r9, sl, fp, sp}
    1c94:	2f20054a 	svccs	0x0020054a
    1c98:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1c9c:	09052f1f 	stmdbeq	r5, {r0, r1, r2, r3, r4, r8, r9, sl, fp, sp}
    1ca0:	2f1a054a 	svccs	0x001a054a
    1ca4:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1ca8:	09052f19 	stmdbeq	r5, {r0, r3, r4, r8, r9, sl, fp, sp}
    1cac:	2f22054a 	svccs	0x0022054a
    1cb0:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1cb4:	09052f26 	stmdbeq	r5, {r1, r2, r5, r8, r9, sl, fp, sp}
    1cb8:	2f24054a 	svccs	0x0024054a
    1cbc:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    1cc0:	09052f12 	stmdbeq	r5, {r1, r4, r8, r9, sl, fp, sp}
    1cc4:	3005054a 	andcc	r0, r5, sl, asr #10
    1cc8:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
    1ccc:	14340212 	ldrtne	r0, [r4], #-530	; 0xfffffdee
    1cd0:	054d0105 	strbeq	r0, [sp, #-261]	; 0xfffffefb
    1cd4:	0905841a 	stmdbeq	r5, {r1, r3, r4, sl, pc}
    1cd8:	000a0585 	andeq	r0, sl, r5, lsl #11
    1cdc:	4c010402 	cfstrsmi	mvf0, [r1], {2}
    1ce0:	02000905 	andeq	r0, r0, #81920	; 0x14000
    1ce4:	00670104 	rsbeq	r0, r7, r4, lsl #2
    1ce8:	67010402 	strvs	r0, [r1, -r2, lsl #8]
    1cec:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    1cf0:	05480104 	strbeq	r0, [r8, #-260]	; 0xfffffefc
    1cf4:	0905341a 	stmdbeq	r5, {r1, r3, r4, sl, ip, sp}
    1cf8:	000a0585 	andeq	r0, sl, r5, lsl #11
    1cfc:	4c010402 	cfstrsmi	mvf0, [r1], {2}
    1d00:	02000905 	andeq	r0, r0, #81920	; 0x14000
    1d04:	00670104 	rsbeq	r0, r7, r4, lsl #2
    1d08:	4b010402 	blmi	42d18 <ramdisk+0x15a40>
    1d0c:	01040200 	mrseq	r0, R12_usr
    1d10:	000a0567 	andeq	r0, sl, r7, ror #10
    1d14:	47010402 	strmi	r0, [r1, -r2, lsl #8]
    1d18:	05351f05 	ldreq	r1, [r5, #-3845]!	; 0xfffff0fb
    1d1c:	9e0c0305 	cdpls	3, 0, cr0, cr12, cr5, {0}
    1d20:	4c854d4d 	stcmi	13, cr4, [r5], {77}	; 0x4d
    1d24:	05d71105 	ldrbeq	r1, [r7, #261]	; 0x105
    1d28:	05054c0b 	streq	r4, [r5, #-3083]	; 0xfffff3f5
    1d2c:	08055908 	stmdaeq	r5, {r3, r8, fp, ip, lr}
    1d30:	6709054b 	strvs	r0, [r9, -fp, asr #10]
    1d34:	05304b67 	ldreq	r4, [r0, #-2919]!	; 0xfffff499
    1d38:	0b054e05 	bleq	155554 <__bss_end+0xa827c>
    1d3c:	d808054b 	stmdale	r8, {r0, r1, r3, r6, r8, sl}
    1d40:	4b670905 	blmi	19c415c <__bss_end+0x1916e84>
    1d44:	05054b67 	streq	r4, [r5, #-2919]	; 0xfffff499
    1d48:	0b054d31 	bleq	155214 <__bss_end+0xa7f3c>
    1d4c:	d808054b 	stmdale	r8, {r0, r1, r3, r6, r8, sl}
    1d50:	4b670905 	blmi	19c416c <__bss_end+0x1916e94>
    1d54:	4b0f0569 	blmi	3c3300 <__bss_end+0x316028>
    1d58:	05bb0c05 	ldreq	r0, [fp, #3077]!	; 0xc05
    1d5c:	844b670d 	strbhi	r6, [fp], #-1805	; 0xfffff8f3
    1d60:	8515054b 	ldrhi	r0, [r5, #-1355]	; 0xfffffab5
    1d64:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
    1d68:	0522080c 	streq	r0, [r2, #-2060]!	; 0xfffff7f4
    1d6c:	844b670d 	strbhi	r6, [fp], #-1805	; 0xfffff8f3
    1d70:	0905834b 	stmdbeq	r5, {r0, r1, r3, r6, r8, r9, pc}
    1d74:	0569674d 	strbeq	r6, [r9, #-1869]!	; 0xfffff8b3
    1d78:	0c054b0f 			; <UNDEFINED> instruction: 0x0c054b0f
    1d7c:	670d05d8 			; <UNDEFINED> instruction: 0x670d05d8
    1d80:	1305844b 	movwne	r8, #21579	; 0x544b
    1d84:	d81005a0 	ldmdale	r0, {r5, r7, r8, sl}
    1d88:	4b671105 	blmi	19c61a4 <__bss_end+0x1918ecc>
    1d8c:	0d054b84 	vstreq	d4, [r5, #-528]	; 0xfffffdf0
    1d90:	00090569 	andeq	r0, r9, r9, ror #10
    1d94:	6c010402 	cfstrsvs	mvf0, [r1], {2}
    1d98:	03680105 	cmneq	r8, #1073741825	; 0x40000001
    1d9c:	01320209 	teqeq	r2, r9, lsl #4
    1da0:	2f670505 	svccs	0x00670505
    1da4:	9108684c 	tstls	r8, ip, asr #16
    1da8:	92089108 	andls	r9, r8, #8, 2
    1dac:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    1db0:	02340104 	eorseq	r0, r4, #4, 2
    1db4:	01010010 	tsteq	r1, r0, lsl r0
    1db8:	00002443 	andeq	r2, r0, r3, asr #8
    1dbc:	00a60003 	adceq	r0, r6, r3
    1dc0:	01020000 	mrseq	r0, (UNDEF: 2)
    1dc4:	000d0efb 	strdeq	r0, [sp], -fp
    1dc8:	01010101 	tsteq	r1, r1, lsl #2
    1dcc:	01000000 	mrseq	r0, (UNDEF: 0)
    1dd0:	2f010000 	svccs	0x00010000
    1dd4:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1dd8:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
    1ddc:	2f796361 	svccs	0x00796361
    1de0:	61786548 	cmnvs	r8, r8, asr #10
    1de4:	2f686372 	svccs	0x00686372
    1de8:	2f637273 	svccs	0x00637273
    1dec:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1df0:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1df4:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    1df8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1dfc:	534f5452 	movtpl	r5, #62546	; 0xf452
    1e00:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
    1e04:	462f5346 	strtmi	r5, [pc], -r6, asr #6
    1e08:	53467461 	movtpl	r7, #25697	; 0x6461
    1e0c:	756f532f 	strbvc	r5, [pc, #-815]!	; 1ae5 <_start-0xe51b>
    1e10:	00656372 	rsbeq	r6, r5, r2, ror r3
    1e14:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    1e18:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1e1c:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1e20:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    1e24:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1e28:	61652d65 	cmnvs	r5, r5, ror #26
    1e2c:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    1e30:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    1e34:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    1e38:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    1e3c:	66000065 	strvs	r0, [r0], -r5, rrx
    1e40:	00632e66 	rsbeq	r2, r3, r6, ror #28
    1e44:	73000001 	movwvc	r0, #1
    1e48:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    1e4c:	00682e74 	rsbeq	r2, r8, r4, ror lr
    1e50:	66000002 	strvs	r0, [r0], -r2
    1e54:	00682e66 	rsbeq	r2, r8, r6, ror #28
    1e58:	64000001 	strvs	r0, [r0], #-1
    1e5c:	696b7369 	stmdbvs	fp!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
    1e60:	00682e6f 	rsbeq	r2, r8, pc, ror #28
    1e64:	00000001 	andeq	r0, r0, r1
    1e68:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    1e6c:	024b4c02 	subeq	r4, fp, #512	; 0x200
    1e70:	04ec0300 	strbteq	r0, [ip], #768	; 0x300
    1e74:	850a0501 	strhi	r0, [sl, #-1281]	; 0xfffffaff
    1e78:	05660505 	strbeq	r0, [r6, #-1285]!	; 0xfffffafb
    1e7c:	0f052f0a 	svceq	0x00052f0a
    1e80:	2e14054a 	cfmac32cs	mvfx0, mvfx4, mvfx10
    1e84:	05660f05 	strbeq	r0, [r6, #-3845]!	; 0xfffff0fb
    1e88:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
    1e8c:	2f01052f 	svccs	0x0001052f
    1e90:	850a0585 	strhi	r0, [sl, #-1413]	; 0xfffffa7b
    1e94:	05660505 	strbeq	r0, [r6, #-1285]!	; 0xfffffafb
    1e98:	14052f0a 	strne	r2, [r5], #-3850	; 0xfffff0f6
    1e9c:	6605054a 	strvs	r0, [r5], -sl, asr #10
    1ea0:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    1ea4:	05054a14 	streq	r4, [r5, #-2580]	; 0xfffff5ec
    1ea8:	4b0a0566 	blmi	283448 <__bss_end+0x1d6170>
    1eac:	054a1405 	strbeq	r1, [sl, #-1029]	; 0xfffffbfb
    1eb0:	09054a05 	stmdbeq	r5, {r0, r2, r9, fp, lr}
    1eb4:	2f01054b 	svccs	0x0001054b
    1eb8:	05821503 	streq	r1, [r2, #1283]	; 0x503
    1ebc:	0b05bb06 	bleq	170adc <__bss_end+0xc3804>
    1ec0:	4a090566 	bmi	243460 <__bss_end+0x196188>
    1ec4:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
    1ec8:	0b056706 	bleq	15bae8 <__bss_end+0xae810>
    1ecc:	4a090566 	bmi	24346c <__bss_end+0x196194>
    1ed0:	852f0105 	strhi	r0, [pc, #-261]!	; 1dd3 <_start-0xe22d>
    1ed4:	059f0605 	ldreq	r0, [pc, #1541]	; 24e1 <_start-0xdb1f>
    1ed8:	0905660b 	stmdbeq	r5, {r0, r1, r3, r9, sl, sp, lr}
    1edc:	2e1a054a 	cfmac32cs	mvfx0, mvfx10, mvfx10
    1ee0:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
    1ee4:	0905660b 	stmdbeq	r5, {r0, r1, r3, r9, sl, sp, lr}
    1ee8:	2e1a054a 	cfmac32cs	mvfx0, mvfx10, mvfx10
    1eec:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
    1ef0:	0905660b 	stmdbeq	r5, {r0, r1, r3, r9, sl, sp, lr}
    1ef4:	2e1a054a 	cfmac32cs	mvfx0, mvfx10, mvfx10
    1ef8:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
    1efc:	0905660b 	stmdbeq	r5, {r0, r1, r3, r9, sl, sp, lr}
    1f00:	2f01054a 	svccs	0x0001054a
    1f04:	05821903 	streq	r1, [r2, #2307]	; 0x903
    1f08:	9e0c0305 	cdpls	3, 0, cr0, cr12, cr5, {0}
    1f0c:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    1f10:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    1f14:	01054c09 	tsteq	r5, r9, lsl #24
    1f18:	0505872f 	streq	r8, [r5, #-1839]	; 0xfffff8d1
    1f1c:	059e0e03 	ldreq	r0, [lr, #3587]	; 0xe03
    1f20:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    1f24:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    1f28:	2f01054c 	svccs	0x0001054c
    1f2c:	8202c903 	andhi	ip, r2, #49152	; 0xc000
    1f30:	05830a05 	streq	r0, [r3, #2565]	; 0xa05
    1f34:	05054d08 	streq	r4, [r5, #-3336]	; 0xfffff2f8
    1f38:	4b07054a 	blmi	1c3468 <__bss_end+0x116190>
    1f3c:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
    1f40:	06054a07 	streq	r4, [r5], -r7, lsl #20
    1f44:	4b0e059e 	blmi	3835c4 <__bss_end+0x2d62ec>
    1f48:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
    1f4c:	14054a18 	strne	r4, [r5], #-2584	; 0xfffff5e8
    1f50:	2e26054a 	cfsh64cs	mvdx0, mvdx6, #42
    1f54:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    1f58:	08054b0b 	stmdaeq	r5, {r0, r1, r3, r8, r9, fp, lr}
    1f5c:	001a054a 	andseq	r0, sl, sl, asr #10
    1f60:	4a010402 	bmi	42f70 <ramdisk+0x15c98>
    1f64:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
    1f68:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    1f6c:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
    1f70:	48054a01 	stmdami	r5, {r0, r9, fp, lr}
    1f74:	01040200 	mrseq	r0, R12_usr
    1f78:	001a054a 	andseq	r0, sl, sl, asr #10
    1f7c:	4a010402 	bmi	42f8c <ramdisk+0x15cb4>
    1f80:	05850805 	streq	r0, [r5, #2053]	; 0x805
    1f84:	01054d09 	tsteq	r5, r9, lsl #26
    1f88:	0a056e2f 	beq	15d84c <__bss_end+0xb0574>
    1f8c:	4d10059f 	cfldr32mi	mvfx0, [r0, #-636]	; 0xfffffd84
    1f90:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    1f94:	06056809 	streq	r6, [r5], -r9, lsl #16
    1f98:	67080584 	strvs	r0, [r8, -r4, lsl #11]
    1f9c:	054a1e05 	strbeq	r1, [sl, #-3589]	; 0xfffff1fb
    1fa0:	07054a08 	streq	r4, [r5, -r8, lsl #20]
    1fa4:	4b0a0582 	blmi	2835b4 <__bss_end+0x1d62dc>
    1fa8:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    1fac:	09054c10 	stmdbeq	r5, {r4, sl, fp, lr}
    1fb0:	2f010569 	svccs	0x00010569
    1fb4:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
    1fb8:	05058608 	streq	r8, [r5, #-1544]	; 0xfffff9f8
    1fbc:	67090583 	strvs	r0, [r9, -r3, lsl #11]
    1fc0:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    1fc4:	0a054b11 	beq	154c10 <__bss_end+0xa7938>
    1fc8:	4a070567 	bmi	1c356c <__bss_end+0x116294>
    1fcc:	054c0e05 	strbeq	r0, [ip, #-3589]	; 0xfffff1fb
    1fd0:	0e054a05 	vmlaeq.f32	s8, s10, s10
    1fd4:	4a050583 	bmi	1435e8 <__bss_end+0x96310>
    1fd8:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    1fdc:	0e054a05 	vmlaeq.f32	s8, s10, s10
    1fe0:	4a050583 	bmi	1435f4 <__bss_end+0x9631c>
    1fe4:	05bb0e05 	ldreq	r0, [fp, #3589]!	; 0xe05
    1fe8:	0e054a05 	vmlaeq.f32	s8, s10, s10
    1fec:	4a0505bb 	bmi	1436e0 <__bss_end+0x96408>
    1ff0:	4a1c059f 	bmi	703674 <__bss_end+0x65639c>
    1ff4:	054a3305 	strbeq	r3, [sl, #-773]	; 0xfffffcfb
    1ff8:	05054a3d 	streq	r4, [r5, #-2621]	; 0xfffff5c3
    1ffc:	4a25052e 	bmi	9434bc <__bss_end+0x8961e4>
    2000:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    2004:	4a100307 	bmi	402c28 <__bss_end+0x355950>
    2008:	05d60605 	ldrbeq	r0, [r6, #1541]	; 0x605
    200c:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    2010:	09054a01 	stmdbeq	r5, {r0, r9, fp, lr}
    2014:	2f01054d 	svccs	0x0001054d
    2018:	05ba0e03 	ldreq	r0, [sl, #3587]!	; 0xe03
    201c:	10059f07 	andne	r9, r5, r7, lsl #30
    2020:	4a1b0567 	bmi	6c35c4 <__bss_end+0x6162ec>
    2024:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    2028:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    202c:	0b056601 	bleq	15b838 <__bss_end+0xae560>
    2030:	4a21054b 	bmi	843564 <__bss_end+0x79628c>
    2034:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    2038:	16052e29 	strne	r2, [r5], -r9, lsr #28
    203c:	2f01054a 	svccs	0x0001054a
    2040:	05820d03 	streq	r0, [r2, #3331]	; 0xd03
    2044:	0505a109 	streq	sl, [r5, #-265]	; 0xfffffef7
    2048:	001c0569 	andseq	r0, ip, r9, ror #10
    204c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2050:	02000f05 	andeq	r0, r0, #5, 30
    2054:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2058:	05696707 	strbeq	r6, [r9, #-1799]!	; 0xfffff8f9
    205c:	03054c0d 	movweq	r4, #23565	; 0x5c0d
    2060:	0807054a 	stmdaeq	r7, {r1, r3, r6, r8, sl}
    2064:	4a1e0522 	bmi	7834f4 <__bss_end+0x6d621c>
    2068:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    206c:	2a05671a 	bcs	15bcdc <__bss_end+0xaea04>
    2070:	4a08054a 	bmi	2035a0 <__bss_end+0x1562c8>
    2074:	059e0705 	ldreq	r0, [lr, #1797]	; 0x705
    2078:	16054b13 			; <UNDEFINED> instruction: 0x16054b13
    207c:	4a100566 	bmi	40361c <__bss_end+0x356344>
    2080:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
    2084:	2a052f1a 	bcs	14dcf4 <__bss_end+0xa0a1c>
    2088:	4a08054a 	bmi	2035b8 <__bss_end+0x1562e0>
    208c:	059e0705 	ldreq	r0, [lr, #1797]	; 0x705
    2090:	11054b15 	tstne	r5, r5, lsl fp
    2094:	661f0566 	ldrvs	r0, [pc], -r6, ror #10
    2098:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    209c:	21056710 	tstcs	r5, r0, lsl r7
    20a0:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    20a4:	004a0601 	subeq	r0, sl, r1, lsl #12
    20a8:	66020402 	strvs	r0, [r2], -r2, lsl #8
    20ac:	02000805 	andeq	r0, r0, #327680	; 0x50000
    20b0:	66060404 	strvs	r0, [r6], -r4, lsl #8
    20b4:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
    20b8:	052f0404 	streq	r0, [pc, #-1028]!	; 1cbc <_start-0xe344>
    20bc:	2c05311a 	stfcss	f3, [r5], {26}
    20c0:	4a08054a 	bmi	2035f0 <__bss_end+0x156318>
    20c4:	059e0705 	ldreq	r0, [lr, #1797]	; 0x705
    20c8:	21054b12 	tstcs	r5, r2, lsl fp
    20cc:	4a25054a 	bmi	9435fc <__bss_end+0x896324>
    20d0:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
    20d4:	04058208 	streq	r8, [r5], #-520	; 0xfffffdf8
    20d8:	311a052f 	tstcc	sl, pc, lsr #10
    20dc:	054a2c05 	strbeq	r2, [sl, #-3077]	; 0xfffff3fb
    20e0:	07054a08 	streq	r4, [r5, -r8, lsl #20]
    20e4:	4b13059e 	blmi	4c3764 <__bss_end+0x41648c>
    20e8:	054a2205 	strbeq	r2, [sl, #-517]	; 0xfffffdfb
    20ec:	0a054a26 	beq	15498c <__bss_end+0xa76b4>
    20f0:	8208052e 	andhi	r0, r8, #192937984	; 0xb800000
    20f4:	054b0405 	strbeq	r0, [fp, #-1029]	; 0xfffffbfb
    20f8:	2e1d0308 	cdpcs	3, 1, cr0, cr13, cr8, {0}
    20fc:	54030405 	strpl	r0, [r3], #-1029	; 0xfffffbfb
    2100:	4f504c66 	svcmi	0x00504c66
    2104:	23030905 	movwcs	r0, #14597	; 0x3905
    2108:	2f01052e 	svccs	0x0001052e
    210c:	05820f03 	streq	r0, [r2, #3843]	; 0xf03
    2110:	0505bd0a 	streq	fp, [r5, #-3338]	; 0xfffff2f6
    2114:	001c054d 	andseq	r0, ip, sp, asr #10
    2118:	66010402 	strvs	r0, [r1], -r2, lsl #8
    211c:	02001005 	andeq	r1, r0, #5
    2120:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2124:	0305670d 	movweq	r6, #22285	; 0x570d
    2128:	0807054a 	stmdaeq	r7, {r1, r3, r6, r8, sl}
    212c:	4a1e0522 	bmi	7835bc <__bss_end+0x6d62e4>
    2130:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    2134:	2c05671c 	stccs	7, cr6, [r5], {28}
    2138:	4a0a054a 	bmi	283668 <__bss_end+0x1d6390>
    213c:	05bb0705 	ldreq	r0, [fp, #1797]!	; 0x705
    2140:	17056708 	strne	r6, [r5, -r8, lsl #14]
    2144:	9e06054a 	cfsh32ls	mvfx0, mvfx6, #42
    2148:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
    214c:	18054a07 	stmdane	r5, {r0, r1, r2, r9, fp, lr}
    2150:	01040200 	mrseq	r0, R12_usr
    2154:	001b054a 	andseq	r0, fp, sl, asr #10
    2158:	66010402 	strvs	r0, [r1], -r2, lsl #8
    215c:	02002605 	andeq	r2, r0, #5242880	; 0x500000
    2160:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2164:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    2168:	23054a01 	movwcs	r4, #23041	; 0x5a01
    216c:	01040200 	mrseq	r0, R12_usr
    2170:	0007052e 	andeq	r0, r7, lr, lsr #10
    2174:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2178:	02040200 	andeq	r0, r4, #0, 4
    217c:	02004a06 	andeq	r4, r0, #24576	; 0x6000
    2180:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
    2184:	0402000e 	streq	r0, [r2], #-14
    2188:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    218c:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    2190:	2c056704 	stccs	7, cr6, [r5], {4}
    2194:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2198:	000a054a 	andeq	r0, sl, sl, asr #10
    219c:	4a040402 	bmi	1031ac <__bss_end+0x55ed4>
    21a0:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    21a4:	05bb0404 	ldreq	r0, [fp, #1028]!	; 0x404
    21a8:	15056708 	strne	r6, [r5, #-1800]	; 0xfffff8f8
    21ac:	6606054a 	strvs	r0, [r6], -sl, asr #10
    21b0:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
    21b4:	21054a07 	tstcs	r5, r7, lsl #20
    21b8:	01040200 	mrseq	r0, R12_usr
    21bc:	0007054a 	andeq	r0, r7, sl, asr #10
    21c0:	4a010402 	bmi	431d0 <ramdisk+0x15ef8>
    21c4:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    21c8:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    21cc:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    21d0:	44056602 	strmi	r6, [r5], #-1538	; 0xfffff9fe
    21d4:	02040200 	andeq	r0, r4, #0, 4
    21d8:	0039054a 	eorseq	r0, r9, sl, asr #10
    21dc:	4a020402 	bmi	831ec <ramdisk+0x55f14>
    21e0:	02004a05 	andeq	r4, r0, #20480	; 0x5000
    21e4:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
    21e8:	04020036 	streq	r0, [r2], #-54	; 0xffffffca
    21ec:	07054a02 	streq	r4, [r5, -r2, lsl #20]
    21f0:	02040200 	andeq	r0, r4, #0, 4
    21f4:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
    21f8:	052e0604 	streq	r0, [lr, #-1540]!	; 0xfffff9fc
    21fc:	0402000e 	streq	r0, [r2], #-14
    2200:	054b0604 	strbeq	r0, [fp, #-1540]	; 0xfffff9fc
    2204:	04020004 	streq	r0, [r2], #-4
    2208:	1c056704 	stcne	7, cr6, [r5], {4}
    220c:	4a2e0531 	bmi	b836d8 <__bss_end+0xad6400>
    2210:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
    2214:	0c05bb07 			; <UNDEFINED> instruction: 0x0c05bb07
    2218:	4a1b0567 	bmi	6c37bc <__bss_end+0x6164e4>
    221c:	054a1f05 	strbeq	r1, [sl, #-3845]	; 0xfffff0fb
    2220:	0e054a04 	vmlaeq.f32	s8, s10, s8
    2224:	670405bb 			; <UNDEFINED> instruction: 0x670405bb
    2228:	05341c05 	ldreq	r1, [r4, #-3077]!	; 0xfffff3fb
    222c:	0a054a2e 	beq	154aec <__bss_end+0xa7814>
    2230:	bb07054a 	bllt	1c3760 <__bss_end+0x116488>
    2234:	05681005 	strbeq	r1, [r8, #-5]!
    2238:	39054a2a 	stmdbcc	r5, {r1, r3, r5, r9, fp, lr}
    223c:	4a3d054a 	bmi	f4376c <__bss_end+0xe96494>
    2240:	052e2105 	streq	r2, [lr, #-261]!	; 0xfffffefb
    2244:	09058247 	stmdbeq	r5, {r0, r1, r2, r6, r9, pc}
    2248:	4c0d052e 	cfstr32mi	mvfx0, [sp], {46}	; 0x2e
    224c:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
    2250:	04054a20 	streq	r4, [r5], #-2592	; 0xfffff5e0
    2254:	830e052e 	movwhi	r0, #58670	; 0xe52e
    2258:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    225c:	04053002 	streq	r3, [r5], #-2
    2260:	4f4a6103 	svcmi	0x004a6103
    2264:	4a0a0352 	bmi	282fb4 <__bss_end+0x1d5cdc>
    2268:	09030905 	stmdbeq	r3, {r0, r2, r8, fp}
    226c:	2f01052e 	svccs	0x0001052e
    2270:	82019203 	andhi	r9, r1, #805306368	; 0x30000000
    2274:	05bb0a05 	ldreq	r0, [fp, #2565]!	; 0xa05
    2278:	05054c09 	streq	r4, [r5, #-3081]	; 0xfffff3f7
    227c:	001c056e 	andseq	r0, ip, lr, ror #10
    2280:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2284:	02000f05 	andeq	r0, r0, #5, 30
    2288:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    228c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    2290:	05056603 	streq	r6, [r5, #-1539]	; 0xfffff9fd
    2294:	6709054d 	strvs	r0, [r9, -sp, asr #10]
    2298:	05bb0605 	ldreq	r0, [fp, #1541]!	; 0x605
    229c:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    22a0:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    22a4:	8306054f 	movwhi	r0, #25935	; 0x654f
    22a8:	00180567 	andseq	r0, r8, r7, ror #10
    22ac:	66010402 	strvs	r0, [r1], -r2, lsl #8
    22b0:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
    22b4:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    22b8:	0a056601 	beq	15bac4 <__bss_end+0xae7ec>
    22bc:	bb07054c 	bllt	1c37f4 <__bss_end+0x11651c>
    22c0:	02001d05 	andeq	r1, r0, #320	; 0x140
    22c4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    22c8:	19054c09 	stmdbne	r5, {r0, r3, sl, fp, lr}
    22cc:	4a24054a 	bmi	9037fc <__bss_end+0x856524>
    22d0:	4b2e0605 	blmi	b83aec <__bss_end+0xad6814>
    22d4:	674a1105 	strbvs	r1, [sl, -r5, lsl #2]
    22d8:	14030805 	strne	r0, [r3], #-2053	; 0xfffff7fb
    22dc:	4b1405ba 	blmi	5039cc <__bss_end+0x4566f4>
    22e0:	054a0205 	strbeq	r0, [sl, #-517]	; 0xfffffdfb
    22e4:	82620303 	rsbhi	r0, r2, #201326592	; 0xc000000
    22e8:	3a030905 	bcc	c4704 <__bss_end+0x1742c>
    22ec:	2f01052e 	svccs	0x0001052e
    22f0:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
    22f4:	0505a109 	streq	sl, [r5, #-265]	; 0xfffffef7
    22f8:	67070569 	strvs	r0, [r7, -r9, ror #10]
    22fc:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
    2300:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    2304:	10056602 	andne	r6, r5, r2, lsl #12
    2308:	02040200 	andeq	r0, r4, #0, 4
    230c:	002c054a 	eoreq	r0, ip, sl, asr #10
    2310:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2314:	05690805 	strbeq	r0, [r9, #-2053]!	; 0xfffff7fb
    2318:	16058306 	strne	r8, [r5], -r6, lsl #6
    231c:	01040200 	mrseq	r0, R12_usr
    2320:	4b060566 	blmi	1838c0 <__bss_end+0xd65e8>
    2324:	02002005 	andeq	r2, r0, #5
    2328:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    232c:	06054b0e 	streq	r4, [r5], -lr, lsl #22
    2330:	0021054a 	eoreq	r0, r1, sl, asr #10
    2334:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2338:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    233c:	05054c08 	streq	r4, [r5, #-3080]	; 0xfffff3f8
    2340:	0021054a 	eoreq	r0, r1, sl, asr #10
    2344:	4a010402 	bmi	43354 <ramdisk+0x1607c>
    2348:	1d030705 	stcne	7, cr0, [r3, #-20]	; 0xffffffec
    234c:	4b06054a 	blmi	18387c <__bss_end+0xd65a4>
    2350:	05830805 	streq	r0, [r3, #2053]	; 0x805
    2354:	07056711 	smladeq	r5, r1, r7, r6
    2358:	0021054a 	eoreq	r0, r1, sl, asr #10
    235c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2360:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    2364:	10058307 	andne	r8, r5, r7, lsl #6
    2368:	02040200 	andeq	r0, r4, #0, 4
    236c:	002c0566 	eoreq	r0, ip, r6, ror #10
    2370:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2374:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    2378:	05676708 	strbeq	r6, [r7, #-1800]!	; 0xfffff8f8
    237c:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    2380:	11056601 	tstne	r5, r1, lsl #12
    2384:	01040200 	mrseq	r0, R12_usr
    2388:	002b054a 	eoreq	r0, fp, sl, asr #10
    238c:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2390:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    2394:	08054d06 	stmdaeq	r5, {r1, r2, r8, sl, fp, lr}
    2398:	12054c67 	andne	r4, r5, #26368	; 0x6700
    239c:	4a080567 	bmi	203940 <__bss_end+0x156668>
    23a0:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
    23a4:	1c054b09 			; <UNDEFINED> instruction: 0x1c054b09
    23a8:	01040200 	mrseq	r0, R12_usr
    23ac:	4c0a0582 	cfstr32mi	mvfx0, [sl], {130}	; 0x82
    23b0:	67830805 	strvs	r0, [r3, r5, lsl #16]
    23b4:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
    23b8:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    23bc:	0402002d 	streq	r0, [r2], #-45	; 0xffffffd3
    23c0:	08056603 	stmdaeq	r5, {r0, r1, r9, sl, sp, lr}
    23c4:	001c054b 	andseq	r0, ip, fp, asr #10
    23c8:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
    23cc:	05480505 	strbeq	r0, [r8, #-1285]	; 0xfffffafb
    23d0:	06053309 	streq	r3, [r5], -r9, lsl #6
    23d4:	001405bb 			; <UNDEFINED> instruction: 0x001405bb
    23d8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    23dc:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
    23e0:	1105be05 	tstne	r5, r5, lsl #28
    23e4:	67090567 	strvs	r0, [r9, -r7, ror #10]
    23e8:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    23ec:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    23f0:	2f054a01 	svccs	0x00054a01
    23f4:	01040200 	mrseq	r0, R12_usr
    23f8:	003a054a 	eorseq	r0, sl, sl, asr #10
    23fc:	4a010402 	bmi	4340c <ramdisk+0x16134>
    2400:	02001905 	andeq	r1, r0, #81920	; 0x14000
    2404:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    2408:	11054b06 	tstne	r5, r6, lsl #22
    240c:	2b05674a 	blcs	15c13c <__bss_end+0xaee64>
    2410:	040200d9 	streq	r0, [r2], #-217	; 0xffffff27
    2414:	00660601 	rsbeq	r0, r6, r1, lsl #12
    2418:	4a020402 	bmi	83428 <ramdisk+0x56150>
    241c:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    2420:	2e060404 	cdpcs	4, 0, cr0, cr6, cr4, {0}
    2424:	05310905 	ldreq	r0, [r1, #-2309]!	; 0xfffff6fb
    2428:	2f032f01 	svccs	0x00032f01
    242c:	a4060566 	strge	r0, [r6], #-1382	; 0xfffffa9a
    2430:	05660505 	strbeq	r0, [r6, #-1285]!	; 0xfffffafb
    2434:	04020027 	streq	r0, [r2], #-39	; 0xffffffd9
    2438:	09054a01 	stmdbeq	r5, {r0, r9, fp, lr}
    243c:	830e054b 	movwhi	r0, #58699	; 0xe54b
    2440:	05670b05 	strbeq	r0, [r7, #-2821]!	; 0xfffff4fb
    2444:	08054a02 	stmdaeq	r5, {r1, r9, fp, lr}
    2448:	05820c03 	streq	r0, [r2, #3075]	; 0xc03
    244c:	0a056617 	beq	15bcb0 <__bss_end+0xae9d8>
    2450:	4a03054b 	bmi	c3984 <__bss_end+0x166ac>
    2454:	02005705 	andeq	r5, r0, #1310720	; 0x140000
    2458:	052e0404 	streq	r0, [lr, #-1028]!	; 0xfffffbfc
    245c:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    2460:	03058201 	movweq	r8, #20993	; 0x5201
    2464:	01040200 	mrseq	r0, R12_usr
    2468:	00200566 	eoreq	r0, r0, r6, ror #10
    246c:	66030402 	strvs	r0, [r3], -r2, lsl #8
    2470:	02001d05 	andeq	r1, r0, #320	; 0x140
    2474:	20080304 	andcs	r0, r8, r4, lsl #6
    2478:	054c1105 	strbeq	r1, [ip, #-261]	; 0xfffffefb
    247c:	01056622 	tsteq	r5, r2, lsr #12
    2480:	660e039f 			; <UNDEFINED> instruction: 0x660e039f
    2484:	05a00905 	streq	r0, [r0, #2309]!	; 0x905
    2488:	5d056905 	vstrpl.16	s12, [r5, #-10]	; <UNPREDICTABLE>
    248c:	01040200 	mrseq	r0, R12_usr
    2490:	00560566 	subseq	r0, r6, r6, ror #10
    2494:	4a010402 	bmi	434a4 <ramdisk+0x161cc>
    2498:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    249c:	07054c0b 	streq	r4, [r5, -fp, lsl #24]
    24a0:	67050567 	strvs	r0, [r5, -r7, ror #10]
    24a4:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    24a8:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    24ac:	04020010 	streq	r0, [r2], #-16
    24b0:	08054a01 	stmdaeq	r5, {r0, r9, fp, lr}
    24b4:	6a05054b 	bvs	1439e8 <__bss_end+0x96710>
    24b8:	05670b05 	strbeq	r0, [r7, #-2821]!	; 0xfffff4fb
    24bc:	06054a19 			; <UNDEFINED> instruction: 0x06054a19
    24c0:	002d054a 	eoreq	r0, sp, sl, asr #10
    24c4:	4a010402 	bmi	434d4 <ramdisk+0x161fc>
    24c8:	054b1005 	strbeq	r1, [fp, #-5]
    24cc:	12054a0c 	andne	r4, r5, #12, 20	; 0xc000
    24d0:	4a070569 	bmi	1c3a7c <__bss_end+0x1167a4>
    24d4:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    24d8:	07052f0b 	streq	r2, [r5, -fp, lsl #30]
    24dc:	0023059f 	mlaeq	r3, pc, r5, r0	; <UNPREDICTABLE>
    24e0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    24e4:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    24e8:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    24ec:	11056602 	tstne	r5, r2, lsl #12
    24f0:	02040200 	andeq	r0, r4, #0, 4
    24f4:	0031054a 	eorseq	r0, r1, sl, asr #10
    24f8:	66030402 	strvs	r0, [r3], -r2, lsl #8
    24fc:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    2500:	0e057e09 	cdpeq	14, 0, cr7, cr5, cr9, {0}
    2504:	820c0588 	andhi	r0, ip, #136, 10	; 0x22000000
    2508:	6708054c 	strvs	r0, [r8, -ip, asr #10]
    250c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    2510:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    2514:	0b054a01 	bleq	154d20 <__bss_end+0xa7a48>
    2518:	4a12054b 	bmi	483a4c <__bss_end+0x3d6774>
    251c:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    2520:	1b05670c 	blne	15c158 <__bss_end+0xaee80>
    2524:	6614054a 	ldrvs	r0, [r4], -sl, asr #10
    2528:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    252c:	01054c09 	tsteq	r5, r9, lsl #24
    2530:	660d032f 	strvs	r0, [sp], -pc, lsr #6
    2534:	05a00905 	streq	r0, [r0, #2309]!	; 0x905
    2538:	0605690a 	streq	r6, [r5], -sl, lsl #18
    253c:	4b05054a 	blmi	143a6c <__bss_end+0x96794>
    2540:	02006005 	andeq	r6, r0, #5
    2544:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2548:	05056708 	streq	r6, [r5, #-1800]	; 0xfffff8f8
    254c:	001c054a 	andseq	r0, ip, sl, asr #10
    2550:	4a010402 	bmi	43560 <ramdisk+0x16288>
    2554:	054c0a05 	strbeq	r0, [ip, #-2565]	; 0xfffff5fb
    2558:	054b6605 	strbeq	r6, [fp, #-1541]	; 0xfffff9fb
    255c:	09054a0b 	stmdbeq	r5, {r0, r1, r3, r9, fp, lr}
    2560:	4a060568 	bmi	183b08 <__bss_end+0xd6830>
    2564:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    2568:	07054a1a 	smladeq	r5, sl, sl, r4
    256c:	4b0e054a 	blmi	383a9c <__bss_end+0x2d67c4>
    2570:	05661a05 	strbeq	r1, [r6, #-2565]!	; 0xfffff5fb
    2574:	1b054e0d 	blne	155db0 <__bss_end+0xa8ad8>
    2578:	4a23054a 	bmi	8c3aa8 <__bss_end+0x8167d0>
    257c:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    2580:	0c052e07 	stceq	14, cr2, [r5], {7}
    2584:	d708054b 	strle	r0, [r8, -fp, asr #10]
    2588:	02001b05 	andeq	r1, r0, #5120	; 0x1400
    258c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2590:	24054b08 	strcs	r4, [r5], #-2824	; 0xfffff4f8
    2594:	01040200 	mrseq	r0, R12_usr
    2598:	4b130566 	blmi	4c3b38 <__bss_end+0x416860>
    259c:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    25a0:	10056809 	andne	r6, r5, r9, lsl #16
    25a4:	661c0567 	ldrvs	r0, [ip], -r7, ror #10
    25a8:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    25ac:	1c05d709 	stcne	7, cr13, [r5], {9}
    25b0:	01040200 	mrseq	r0, R12_usr
    25b4:	4b090566 	blmi	243b54 <__bss_end+0x19687c>
    25b8:	02001c05 	andeq	r1, r0, #1280	; 0x500
    25bc:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    25c0:	25054b09 	strcs	r4, [r5, #-2825]	; 0xfffff4f7
    25c4:	01040200 	mrseq	r0, R12_usr
    25c8:	4b0a0566 	blmi	283b68 <__bss_end+0x1d6890>
    25cc:	05820905 	streq	r0, [r2, #2309]	; 0x905
    25d0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    25d4:	0f054a01 	svceq	0x00054a01
    25d8:	67100551 			; <UNDEFINED> instruction: 0x67100551
    25dc:	05820e05 	streq	r0, [r2, #3589]	; 0xe05
    25e0:	0c054e0b 	stceq	14, cr4, [r5], {11}
    25e4:	4a1a0567 	bmi	683b88 <__bss_end+0x5d68b0>
    25e8:	05661405 	strbeq	r1, [r6, #-1029]!	; 0xfffffbfb
    25ec:	09052e0a 	stmdbeq	r5, {r1, r3, r9, sl, fp, sp}
    25f0:	2f01054c 	svccs	0x0001054c
    25f4:	05660e03 	strbeq	r0, [r6, #-3587]!	; 0xfffff1fd
    25f8:	0805a109 	stmdaeq	r5, {r0, r3, r8, sp, pc}
    25fc:	9f050569 	svcls	0x00050569
    2600:	4c0a0567 	cfstr32mi	mvfx0, [sl], {103}	; 0x67
    2604:	05d70705 	ldrbeq	r0, [r7, #1797]	; 0x705
    2608:	0f056a0a 	svceq	0x00056a0a
    260c:	2e07054a 	cfsh32cs	mvfx0, mvfx7, #42
    2610:	02002705 	andeq	r2, r0, #1310720	; 0x140000
    2614:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2618:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    261c:	22054a01 	andcs	r4, r5, #4096	; 0x1000
    2620:	01040200 	mrseq	r0, R12_usr
    2624:	4c08052e 	cfstr32mi	mvfx0, [r8], {46}	; 0x2e
    2628:	05d60505 	ldrbeq	r0, [r6, #1285]	; 0x505
    262c:	0a053007 	beq	14e650 <__bss_end+0xa1378>
    2630:	9f03054c 	svcls	0x0003054c
    2634:	75030405 	strvc	r0, [r3, #-1029]	; 0xfffffbfb
    2638:	03050582 	movweq	r0, #21890	; 0x5582
    263c:	1d052e0e 	stcne	14, cr2, [r5, #-56]	; 0xffffffc8
    2640:	01040200 	mrseq	r0, R12_usr
    2644:	4b090566 	blmi	243be4 <__bss_end+0x19690c>
    2648:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    264c:	0705660f 	streq	r6, [r5, -pc, lsl #12]
    2650:	9e0505a1 	cfsh32ls	mvfx0, mvfx5, #-47
    2654:	052f0805 	streq	r0, [pc, #-2053]!	; 1e57 <_start-0xe1a9>
    2658:	10054a05 	andne	r4, r5, r5, lsl #20
    265c:	9e2d054b 	cfsh64ls	mvdx0, mvdx13, #43
    2660:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2664:	01056909 	tsteq	r5, r9, lsl #18
    2668:	6609032f 	strvs	r0, [r9], -pc, lsr #6
    266c:	05bb0205 	ldreq	r0, [fp, #517]!	; 0x205
    2670:	0505d708 	streq	sp, [r5, #-1800]	; 0xfffff8f8
    2674:	4b03054a 	blmi	c3ba4 <__bss_end+0x168cc>
    2678:	054a2a05 	strbeq	r2, [sl, #-2565]	; 0xfffff5fb
    267c:	01054a03 	tsteq	r5, r3, lsl #20
    2680:	03b60384 			; <UNDEFINED> instruction: 0x03b60384
    2684:	9f0a0566 	svcls	0x000a0566
    2688:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    268c:	09056c08 	stmdbeq	r5, {r3, sl, fp, sp, lr}
    2690:	d706052f 	strle	r0, [r6, -pc, lsr #10]
    2694:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    2698:	06054a05 	streq	r4, [r5], -r5, lsl #20
    269c:	6708054b 	strvs	r0, [r8, -fp, asr #10]
    26a0:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
    26a4:	2e13031c 	mrccs	3, 0, r0, cr3, cr12, {0}
    26a8:	054a2105 	strbeq	r2, [sl, #-261]	; 0xfffffefb
    26ac:	11054a18 	tstne	r5, r8, lsl sl
    26b0:	0307054a 	movweq	r0, #30026	; 0x754a
    26b4:	12056615 	andne	r6, r5, #22020096	; 0x1500000
    26b8:	01040200 	mrseq	r0, R12_usr
    26bc:	001e0566 	andseq	r0, lr, r6, ror #10
    26c0:	66020402 	strvs	r0, [r2], -r2, lsl #8
    26c4:	02003f05 	andeq	r3, r0, #5, 30
    26c8:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    26cc:	04020033 	streq	r0, [r2], #-51	; 0xffffffcd
    26d0:	30054a03 	andcc	r4, r5, r3, lsl #20
    26d4:	03040200 	movweq	r0, #16896	; 0x4200
    26d8:	6b09059e 	blvs	243d58 <__bss_end+0x196a80>
    26dc:	059f0605 	ldreq	r0, [pc, #1541]	; 2ce9 <_start-0xd317>
    26e0:	664d030b 	strbvs	r0, [sp], -fp, lsl #6
    26e4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    26e8:	05056803 	streq	r6, [r5, #-2051]	; 0xfffff7fd
    26ec:	054a2c03 	strbeq	r2, [sl, #-3075]	; 0xfffff3fd
    26f0:	05054f03 	streq	r4, [r5, #-3843]	; 0xfffff0fd
    26f4:	001d0531 	andseq	r0, sp, r1, lsr r5
    26f8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    26fc:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    2700:	0d032f01 	stceq	15, cr2, [r3, #-4]
    2704:	84090566 	strhi	r0, [r9], #-1382	; 0xfffffa9a
    2708:	056c0805 	strbeq	r0, [ip, #-2053]!	; 0xfffff7fb
    270c:	1b059f05 	blne	16a328 <__bss_end+0xbd050>
    2710:	01040200 	mrseq	r0, R12_usr
    2714:	03090566 	movweq	r0, #38246	; 0x9566
    2718:	06054a1a 			; <UNDEFINED> instruction: 0x06054a1a
    271c:	670905d7 			; <UNDEFINED> instruction: 0x670905d7
    2720:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    2724:	15054b06 	strne	r4, [r5, #-2822]	; 0xfffff4fa
    2728:	01040200 	mrseq	r0, R12_usr
    272c:	00030566 	andeq	r0, r3, r6, ror #10
    2730:	4a010402 	bmi	43740 <ramdisk+0x16468>
    2734:	18031405 	stmdane	r3, {r0, r2, sl, ip}
    2738:	4a19052e 	bmi	643bf8 <__bss_end+0x596920>
    273c:	054a2405 	strbeq	r2, [sl, #-1029]	; 0xfffffbfb
    2740:	0b054a10 	bleq	154f88 <__bss_end+0xa7cb0>
    2744:	4a10054b 	bmi	403c78 <__bss_end+0x3569a0>
    2748:	054a1b05 	strbeq	r1, [sl, #-2821]	; 0xfffff4fb
    274c:	32052e06 	andcc	r2, r5, #6, 28	; 0x60
    2750:	01040200 	mrseq	r0, R12_usr
    2754:	003b054a 	eorseq	r0, fp, sl, asr #10
    2758:	4a010402 	bmi	43768 <ramdisk+0x16490>
    275c:	02002905 	andeq	r2, r0, #81920	; 0x14000
    2760:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2764:	04020025 	streq	r0, [r2], #-37	; 0xffffffdb
    2768:	09058201 	stmdbeq	r5, {r0, r9, pc}
    276c:	9f02054c 	svcls	0x0002054c
    2770:	62030305 	andvs	r0, r3, #335544320	; 0x14000000
    2774:	4a1b0382 	bmi	6c3584 <__bss_end+0x6162ac>
    2778:	05330905 	ldreq	r0, [r3, #-2309]!	; 0xfffff6fb
    277c:	0d032f01 	stceq	15, cr2, [r3, #-4]
    2780:	84090566 	strhi	r0, [r9], #-1382	; 0xfffffa9a
    2784:	c8030805 	stmdagt	r3, {r0, r2, fp}
    2788:	05056600 	streq	r6, [r5, #-1536]	; 0xfffffa00
    278c:	670905a3 	strvs	r0, [r9, -r3, lsr #11]
    2790:	05d70605 	ldrbeq	r0, [r7, #1541]	; 0x605
    2794:	0405670d 	streq	r6, [r5], #-1805	; 0xfffff8f3
    2798:	8313054a 	tsthi	r3, #310378496	; 0x12800000
    279c:	054a2105 	strbeq	r2, [sl, #-261]	; 0xfffffefb
    27a0:	0e054a04 	vmlaeq.f32	s8, s10, s8
    27a4:	6a09056a 	bvs	243d54 <__bss_end+0x196a7c>
    27a8:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    27ac:	0905660e 	stmdbeq	r5, {r1, r2, r3, r9, sl, sp, lr}
    27b0:	03080584 	movweq	r0, #34180	; 0x8584
    27b4:	05056616 	streq	r6, [r5, #-1558]	; 0xfffff9ea
    27b8:	150567d7 	strne	r6, [r5, #-2007]	; 0xfffff829
    27bc:	4b0d054a 	blmi	343cec <__bss_end+0x296a14>
    27c0:	056a0905 	strbeq	r0, [sl, #-2309]!	; 0xfffff6fb
    27c4:	0f032f01 	svceq	0x00032f01
    27c8:	03100566 	tsteq	r0, #427819008	; 0x19800000
    27cc:	08059e0c 	stmdaeq	r5, {r2, r3, r9, sl, fp, ip, pc}
    27d0:	4a050567 	bmi	143d74 <__bss_end+0x96a9c>
    27d4:	e3030a05 	movw	r0, #14853	; 0x3a05
    27d8:	05054a00 	streq	r4, [r5, #-2560]	; 0xfffff600
    27dc:	4b08054a 	blmi	203d0c <__bss_end+0x156a34>
    27e0:	052f1005 	streq	r1, [pc, #-5]!	; 27e3 <_start-0xd81d>
    27e4:	15054a18 	strne	r4, [r5, #-2584]	; 0xfffff5e8
    27e8:	2e050566 	cfsh32cs	mvfx0, mvfx5, #54
    27ec:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
    27f0:	04020003 	streq	r0, [r2], #-3
    27f4:	06056601 	streq	r6, [r5], -r1, lsl #12
    27f8:	0015052f 	andseq	r0, r5, pc, lsr #10
    27fc:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2800:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
    2804:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    2808:	21056601 	tstcs	r5, r1, lsl #12
    280c:	01040200 	mrseq	r0, R12_usr
    2810:	83100566 	tsthi	r0, #427819008	; 0x19800000
    2814:	05661405 	strbeq	r1, [r6, #-1029]!	; 0xfffffbfb
    2818:	11057d08 	tstne	r5, r8, lsl #26
    281c:	bd13056d 	cfldr32lt	mvfx0, [r3, #-436]	; 0xfffffe4c
    2820:	054a1805 	strbeq	r1, [sl, #-2053]	; 0xfffff7fb
    2824:	0f054a23 	svceq	0x00054a23
    2828:	4b1a054a 	blmi	683d58 <__bss_end+0x5d6a80>
    282c:	054a2005 	strbeq	r2, [sl, #-5]
    2830:	0d052e0f 	stceq	14, cr2, [r5, #-60]	; 0xffffffc4
    2834:	4b190566 	blmi	643dd4 <__bss_end+0x596afc>
    2838:	054a2d05 	strbeq	r2, [sl, #-3333]	; 0xfffff2fb
    283c:	0d052e0f 	stceq	14, cr2, [r5, #-60]	; 0xffffffc4
    2840:	4b190582 	blmi	643e50 <__bss_end+0x596b78>
    2844:	054a2d05 	strbeq	r2, [sl, #-3333]	; 0xfffff2fb
    2848:	0d052e0f 	stceq	14, cr2, [r5, #-60]	; 0xffffffc4
    284c:	03150582 	tsteq	r5, #545259520	; 0x20800000
    2850:	05667f8f 	strbeq	r7, [r6, #-3983]!	; 0xfffff071
    2854:	00f20301 	rscseq	r0, r2, r1, lsl #6
    2858:	00e7032e 	rsceq	r0, r7, lr, lsr #6
    285c:	0304054a 	movweq	r0, #17738	; 0x454a
    2860:	059e0187 	ldreq	r0, [lr, #391]	; 0x187
    2864:	02056611 	andeq	r6, r5, #17825792	; 0x1100000
    2868:	83090567 	movwhi	r0, #38247	; 0x9567
    286c:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    2870:	0f034a11 	svceq	0x00034a11
    2874:	660e054a 	strvs	r0, [lr], -sl, asr #10
    2878:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    287c:	05674b06 	strbeq	r4, [r7, #-2822]!	; 0xfffff4fa
    2880:	04020007 	streq	r0, [r2], #-7
    2884:	0a056601 	beq	15c090 <__bss_end+0xaedb8>
    2888:	00210567 	eoreq	r0, r1, r7, ror #10
    288c:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
    2890:	02000b05 	andeq	r0, r0, #5120	; 0x1400
    2894:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2898:	0402000a 	streq	r0, [r2], #-10
    289c:	0b058201 	bleq	1630a8 <__bss_end+0xb5dd0>
    28a0:	03040200 	movweq	r0, #16896	; 0x4200
    28a4:	bb04054a 	bllt	103dd4 <__bss_end+0x56afc>
    28a8:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
    28ac:	04020010 	streq	r0, [r2], #-16
    28b0:	07056601 	streq	r6, [r5, -r1, lsl #12]
    28b4:	00110583 	andseq	r0, r1, r3, lsl #11
    28b8:	66020402 	strvs	r0, [r2], -r2, lsl #8
    28bc:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
    28c0:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    28c4:	0e054b06 	vmlaeq.f64	d4, d5, d6
    28c8:	4b04054a 	blmi	103df8 <__bss_end+0x56b20>
    28cc:	05350905 	ldreq	r0, [r5, #-2309]!	; 0xfffff6fb
    28d0:	10052e06 	andne	r2, r5, r6, lsl #28
    28d4:	4a06054b 	bmi	183e08 <__bss_end+0xd6b30>
    28d8:	05690705 	strbeq	r0, [r9, #-1797]!	; 0xfffff8fb
    28dc:	12058206 	andne	r8, r5, #1610612736	; 0x60000000
    28e0:	660f054b 	strvs	r0, [pc], -fp, asr #10
    28e4:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    28e8:	07054b09 	streq	r4, [r5, -r9, lsl #22]
    28ec:	001f0582 	andseq	r0, pc, r2, lsl #11
    28f0:	4a020402 	bmi	83900 <ramdisk+0x56628>
    28f4:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
    28f8:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    28fc:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    2900:	09056603 	stmdbeq	r5, {r0, r1, r9, sl, sp, lr}
    2904:	6607054b 	strvs	r0, [r7], -fp, asr #10
    2908:	054a0d05 	strbeq	r0, [sl, #-3333]	; 0xfffff2fb
    290c:	07054b09 	streq	r4, [r5, -r9, lsl #22]
    2910:	4a0d0566 	bmi	343eb0 <__bss_end+0x296bd8>
    2914:	05680805 	strbeq	r0, [r8, #-2053]!	; 0xfffff7fb
    2918:	36059e07 	strcc	r9, [r5], -r7, lsl #28
    291c:	01040200 	mrseq	r0, R12_usr
    2920:	4b07054a 	blmi	1c3e50 <__bss_end+0x116b78>
    2924:	02000805 	andeq	r0, r0, #327680	; 0x50000
    2928:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    292c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    2930:	09056602 	stmdbeq	r5, {r1, r9, sl, sp, lr}
    2934:	66070567 	strvs	r0, [r7], -r7, ror #10
    2938:	054a0d05 	strbeq	r0, [sl, #-3333]	; 0xfffff2fb
    293c:	4a640305 	bmi	1903558 <__bss_end+0x1856280>
    2940:	052f0305 	streq	r0, [pc, #-773]!	; 2643 <_start-0xd9bd>
    2944:	2e1e030a 	cdpcs	3, 1, cr0, cr14, cr10, {0}
    2948:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    294c:	15054b05 	strne	r4, [r5, #-2821]	; 0xfffff4fb
    2950:	01040200 	mrseq	r0, R12_usr
    2954:	4c090566 	cfstr32mi	mvfx0, [r9], {102}	; 0x66
    2958:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    295c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    2960:	0e054a01 	vmlaeq.f32	s8, s10, s2
    2964:	001e0567 	andseq	r0, lr, r7, ror #10
    2968:	66020402 	strvs	r0, [r2], -r2, lsl #8
    296c:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    2970:	05820204 	streq	r0, [r2, #516]	; 0x204
    2974:	0402000e 	streq	r0, [r2], #-14
    2978:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    297c:	4a060404 	bmi	183994 <__bss_end+0xd66bc>
    2980:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    2984:	2e060604 	cfmadd32cs	mvax0, mvfx0, mvfx6, mvfx4
    2988:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
    298c:	054a0604 	strbeq	r0, [sl, #-1540]	; 0xfffff9fc
    2990:	04020009 	streq	r0, [r2], #-9
    2994:	01053006 	tsteq	r5, r6
    2998:	9e0d0330 	mcrls	3, 0, r0, cr13, cr0, {1}
    299c:	03a10905 			; <UNDEFINED> instruction: 0x03a10905
    29a0:	22056609 	andcs	r6, r5, #9437184	; 0x900000
    29a4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    29a8:	000a052e 	andeq	r0, sl, lr, lsr #10
    29ac:	66010402 	strvs	r0, [r1], -r2, lsl #8
    29b0:	02000905 	andeq	r0, r0, #81920	; 0x14000
    29b4:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    29b8:	0402000a 	streq	r0, [r2], #-10
    29bc:	12054a03 	andne	r4, r5, #12288	; 0x3000
    29c0:	030c0583 	movweq	r0, #50563	; 0xc583
    29c4:	05056613 	streq	r6, [r5, #-1555]	; 0xfffff9ed
    29c8:	4b12054a 	blmi	483ef8 <__bss_end+0x3d6c20>
    29cc:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    29d0:	0705be0a 	streq	fp, [r5, -sl, lsl #28]
    29d4:	670a05bb 			; <UNDEFINED> instruction: 0x670a05bb
    29d8:	67830705 	strvs	r0, [r3, r5, lsl #14]
    29dc:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    29e0:	0a056c10 	beq	15da28 <__bss_end+0xb0750>
    29e4:	0020054a 	eoreq	r0, r0, sl, asr #10
    29e8:	4a010402 	bmi	439f8 <ramdisk+0x16720>
    29ec:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    29f0:	054d0104 	strbeq	r0, [sp, #-260]	; 0xfffffefc
    29f4:	0705300b 	streq	r3, [r5, -fp]
    29f8:	4c11054a 	cfldr32mi	mvfx0, [r1], {74}	; 0x4a
    29fc:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    2a00:	09052e07 	stmdbeq	r5, {r0, r1, r2, r9, sl, fp, sp}
    2a04:	4a05054b 	bmi	143f38 <__bss_end+0x96c60>
    2a08:	0b032305 	bleq	cb624 <__bss_end+0x1e34c>
    2a0c:	4a2f052e 	bmi	bc3ecc <__bss_end+0xb16bf4>
    2a10:	054a3605 	strbeq	r3, [sl, #-1541]	; 0xfffff9fb
    2a14:	14054a16 	strne	r4, [r5], #-2582	; 0xfffff5ea
    2a18:	0308059e 	movweq	r0, #34206	; 0x859e
    2a1c:	04054a62 	streq	r4, [r5], #-2658	; 0xfffff59e
    2a20:	0305052f 	movweq	r0, #21807	; 0x552f
    2a24:	04054a0d 	streq	r4, [r5], #-2573	; 0xfffff5f3
    2a28:	0309054c 	movweq	r0, #38220	; 0x954c
    2a2c:	01052e13 	tsteq	r5, r3, lsl lr
    2a30:	660c032f 	strvs	r0, [ip], -pc, lsr #6
    2a34:	0a030a05 	beq	c5250 <__bss_end+0x17f78>
    2a38:	66050582 	strvs	r0, [r5], -r2, lsl #11
    2a3c:	0012054b 	andseq	r0, r2, fp, asr #10
    2a40:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2a44:	02000c05 	andeq	r0, r0, #1280	; 0x500
    2a48:	054c0204 	strbeq	r0, [ip, #-516]	; 0xfffffdfc
    2a4c:	04020007 	streq	r0, [r2], #-7
    2a50:	02056602 	andeq	r6, r5, #2097152	; 0x200000
    2a54:	02040200 	andeq	r0, r4, #0, 4
    2a58:	001e054b 	andseq	r0, lr, fp, asr #10
    2a5c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2a60:	67680505 	strbvs	r0, [r8, -r5, lsl #10]!
    2a64:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    2a68:	07054a06 	streq	r4, [r5, -r6, lsl #20]
    2a6c:	01040200 	mrseq	r0, R12_usr
    2a70:	001a054a 	andseq	r0, sl, sl, asr #10
    2a74:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    2a78:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
    2a7c:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    2a80:	0605670d 	streq	r6, [r5], -sp, lsl #14
    2a84:	4a0f034a 	bmi	3c37b4 <__bss_end+0x3164dc>
    2a88:	02001f05 	andeq	r1, r0, #5, 30
    2a8c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2a90:	0a054b09 	beq	1556bc <__bss_end+0xa83e4>
    2a94:	03090567 	movweq	r0, #38247	; 0x9567
    2a98:	01054a17 	tsteq	r5, r7, lsl sl
    2a9c:	00d70330 	sbcseq	r0, r7, r0, lsr r3
    2aa0:	a30c0582 	movwge	r0, #50562	; 0xc582
    2aa4:	05661d05 	strbeq	r1, [r6, #-3333]!	; 0xfffff2fb
    2aa8:	05056706 	streq	r6, [r5, #-1798]	; 0xfffff8fa
    2aac:	002d0582 	eoreq	r0, sp, r2, lsl #11
    2ab0:	4a010402 	bmi	43ac0 <ramdisk+0x167e8>
    2ab4:	054b1105 	strbeq	r1, [fp, #-261]	; 0xfffffefb
    2ab8:	04054a09 	streq	r4, [r5], #-2569	; 0xfffff5f7
    2abc:	670505be 			; <UNDEFINED> instruction: 0x670505be
    2ac0:	02001005 	andeq	r1, r0, #5
    2ac4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2ac8:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    2acc:	06056602 	streq	r6, [r5], -r2, lsl #12
    2ad0:	00210567 	eoreq	r0, r1, r7, ror #10
    2ad4:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
    2ad8:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    2adc:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2ae0:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    2ae4:	0b05ba01 	bleq	1712f0 <__bss_end+0xc4018>
    2ae8:	4d0f054b 	cfstr32mi	mvfx0, [pc, #-300]	; 29c4 <_start-0xd63c>
    2aec:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    2af0:	0a059f05 	beq	16a70c <__bss_end+0xbd434>
    2af4:	2e0f0567 	cfsh32cs	mvfx0, mvfx15, #55
    2af8:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
    2afc:	1a052e06 	bne	14e31c <__bss_end+0xa1044>
    2b00:	01040200 	mrseq	r0, R12_usr
    2b04:	002c054a 	eoreq	r0, ip, sl, asr #10
    2b08:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2b0c:	05670405 	strbeq	r0, [r7, #-1029]!	; 0xfffffbfb
    2b10:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    2b14:	19056601 	stmdbne	r5, {r0, r9, sl, sp, lr}
    2b18:	01040200 	mrseq	r0, R12_usr
    2b1c:	0014052e 	andseq	r0, r4, lr, lsr #10
    2b20:	4a010402 	bmi	43b30 <ramdisk+0x16858>
    2b24:	02000e05 	andeq	r0, r0, #5, 28	; 0x50
    2b28:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    2b2c:	07054b0f 	streq	r4, [r5, -pc, lsl #22]
    2b30:	8204054a 	andhi	r0, r4, #310378496	; 0x12800000
    2b34:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
    2b38:	04054a22 	streq	r4, [r5], #-2594	; 0xfffff5de
    2b3c:	4b0f052e 	blmi	3c3ffc <__bss_end+0x316d24>
    2b40:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    2b44:	10058204 	andne	r8, r5, r4, lsl #4
    2b48:	4a08054b 	bmi	20407c <__bss_end+0x156da4>
    2b4c:	05820405 	streq	r0, [r2, #1029]	; 0x405
    2b50:	0402003b 	streq	r0, [r2], #-59	; 0xffffffc5
    2b54:	32054a01 	andcc	r4, r5, #4096	; 0x1000
    2b58:	01040200 	mrseq	r0, R12_usr
    2b5c:	002f054a 	eoreq	r0, pc, sl, asr #10
    2b60:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
    2b64:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
    2b68:	04054a07 	streq	r4, [r5], #-2567	; 0xfffff5f9
    2b6c:	4b0c0582 	blmi	30417c <__bss_end+0x256ea4>
    2b70:	004d1c05 	subeq	r1, sp, r5, lsl #24
    2b74:	06010402 	streq	r0, [r1], -r2, lsl #8
    2b78:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
    2b7c:	01054a02 	tsteq	r5, r2, lsl #20
    2b80:	0a032f06 	beq	ce7a0 <__bss_end+0x214c8>
    2b84:	a308059e 	movwge	r0, #34206	; 0x859e
    2b88:	05830505 	streq	r0, [r3, #1285]	; 0x505
    2b8c:	0402000f 	streq	r0, [r2], #-15
    2b90:	1c056601 	stcne	6, cr6, [r5], {1}
    2b94:	03040200 	movweq	r0, #16896	; 0x4200
    2b98:	00320566 	eorseq	r0, r2, r6, ror #10
    2b9c:	66040402 	strvs	r0, [r4], -r2, lsl #8
    2ba0:	1b030905 	blne	c4fbc <__bss_end+0x17ce4>
    2ba4:	4a02054a 	bmi	840d4 <ramdisk+0x56dfc>
    2ba8:	02001805 	andeq	r1, r0, #327680	; 0x50000
    2bac:	052f0304 	streq	r0, [pc, #-772]!	; 28b0 <_start-0xd750>
    2bb0:	04020030 	streq	r0, [r2], #-48	; 0xffffffd0
    2bb4:	39054a03 	stmdbcc	r5, {r0, r1, r9, fp, lr}
    2bb8:	03040200 	movweq	r0, #16896	; 0x4200
    2bbc:	000f054a 	andeq	r0, pc, sl, asr #10
    2bc0:	4a030402 	bmi	c3bd0 <__bss_end+0x168f8>
    2bc4:	02000d05 	andeq	r0, r0, #320	; 0x140
    2bc8:	05820304 	streq	r0, [r2, #772]	; 0x304
    2bcc:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    2bd0:	02059d03 	andeq	r9, r5, #3, 26	; 0xc0
    2bd4:	01040200 	mrseq	r0, R12_usr
    2bd8:	69160566 	ldmdbvs	r6, {r1, r2, r5, r6, r8, sl}
    2bdc:	01040200 	mrseq	r0, R12_usr
    2be0:	02006606 	andeq	r6, r0, #6291456	; 0x600000
    2be4:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    2be8:	04020004 	streq	r0, [r2], #-4
    2bec:	052e0604 	streq	r0, [lr, #-1540]!	; 0xfffff9fc
    2bf0:	2d05300f 	stccs	0, cr3, [r5, #-60]	; 0xffffffc4
    2bf4:	0015059e 	mulseq	r5, lr, r5
    2bf8:	4a010402 	bmi	43c08 <ramdisk+0x16930>
    2bfc:	02002d05 	andeq	r2, r0, #320	; 0x140
    2c00:	3c080204 	sfmcc	f0, 4, [r8], {4}
    2c04:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    2c08:	052e0404 	streq	r0, [lr, #-1028]!	; 0xfffffbfc
    2c0c:	04020002 	streq	r0, [r2], #-2
    2c10:	15052f04 	strne	r2, [r5, #-3844]	; 0xfffff0fc
    2c14:	01040200 	mrseq	r0, R12_usr
    2c18:	00210566 	eoreq	r0, r1, r6, ror #10
    2c1c:	66020402 	strvs	r0, [r2], -r2, lsl #8
    2c20:	05bb0905 	ldreq	r0, [fp, #2309]!	; 0x905
    2c24:	04020001 	streq	r0, [r2], #-1
    2c28:	0e032f01 	cdpeq	15, 0, cr2, cr3, cr1, {0}
    2c2c:	03070566 	movweq	r0, #30054	; 0x7566
    2c30:	0805d60b 	stmdaeq	r5, {r0, r1, r3, r9, sl, ip, lr, pc}
    2c34:	67050567 	strvs	r0, [r5, -r7, ror #10]
    2c38:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    2c3c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2c40:	05834d05 	streq	r4, [r3, #3333]	; 0xd05
    2c44:	04020012 	streq	r0, [r2], #-18	; 0xffffffee
    2c48:	07056601 	streq	r6, [r5, -r1, lsl #12]
    2c4c:	0805684e 	stmdaeq	r5, {r1, r2, r3, r6, fp, sp, lr}
    2c50:	4a050567 	bmi	1441f4 <__bss_end+0x96f1c>
    2c54:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    2c58:	0605bb0e 	streq	fp, [r5], -lr, lsl #22
    2c5c:	4b07054a 	blmi	1c418c <__bss_end+0x116eb4>
    2c60:	02002905 	andeq	r2, r0, #81920	; 0x14000
    2c64:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2c68:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    2c6c:	0c054a01 			; <UNDEFINED> instruction: 0x0c054a01
    2c70:	4c0b054b 	cfstr32mi	mvfx0, [fp], {75}	; 0x4b
    2c74:	05510e05 	ldrbeq	r0, [r1, #-3589]	; 0xfffff1fb
    2c78:	0b056709 	bleq	15c8a4 <__bss_end+0xaf5cc>
    2c7c:	4a0505bb 	bmi	144370 <__bss_end+0x97098>
    2c80:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    2c84:	27054c05 	strcs	r4, [r5, -r5, lsl #24]
    2c88:	01040200 	mrseq	r0, R12_usr
    2c8c:	001e0566 	andseq	r0, lr, r6, ror #10
    2c90:	4a010402 	bmi	43ca0 <ramdisk+0x169c8>
    2c94:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    2c98:	05055208 	streq	r5, [r5, #-520]	; 0xfffffdf8
    2c9c:	00170583 	andseq	r0, r7, r3, lsl #11
    2ca0:	66010402 	strvs	r0, [r1], -r2, lsl #8
    2ca4:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
    2ca8:	04020017 	streq	r0, [r2], #-23	; 0xffffffe9
    2cac:	08056601 	stmdaeq	r5, {r0, r9, sl, sp, lr}
    2cb0:	030f054b 	movweq	r0, #62795	; 0xf54b
    2cb4:	056600c5 	strbeq	r0, [r6, #-197]!	; 0xffffff3b
    2cb8:	06054a07 	streq	r4, [r5], -r7, lsl #20
    2cbc:	003b0582 	eorseq	r0, fp, r2, lsl #11
    2cc0:	4a010402 	bmi	43cd0 <ramdisk+0x169f8>
    2cc4:	054c1405 	strbeq	r1, [ip, #-1029]	; 0xfffffbfb
    2cc8:	0a054a0c 	beq	155500 <__bss_end+0xa8228>
    2ccc:	2f060582 	svccs	0x00060582
    2cd0:	02002605 	andeq	r2, r0, #5242880	; 0x500000
    2cd4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2cd8:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    2cdc:	0d054a01 	vstreq	s8, [r5, #-4]
    2ce0:	68170583 	ldmdavs	r7, {r0, r1, r7, r8, sl}
    2ce4:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
    2ce8:	06054b09 	streq	r4, [r5], -r9, lsl #22
    2cec:	001c054a 	andseq	r0, ip, sl, asr #10
    2cf0:	4a010402 	bmi	43d00 <ramdisk+0x16a28>
    2cf4:	02001705 	andeq	r1, r0, #1310720	; 0x140000
    2cf8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2cfc:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    2d00:	0f054a02 	svceq	0x00054a02
    2d04:	660a054b 	strvs	r0, [sl], -fp, asr #10
    2d08:	05681605 	strbeq	r1, [r8, #-1541]!	; 0xfffff9fb
    2d0c:	0905660d 	stmdbeq	r5, {r0, r2, r3, r9, sl, sp, lr}
    2d10:	4a06054b 	bmi	184244 <__bss_end+0xd6f6c>
    2d14:	02001c05 	andeq	r1, r0, #1280	; 0x500
    2d18:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    2d1c:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    2d20:	31056602 	tstcc	r5, r2, lsl #12
    2d24:	02040200 	andeq	r0, r4, #0, 4
    2d28:	0024054a 	eoreq	r0, r4, sl, asr #10
    2d2c:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    2d30:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    2d34:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
    2d38:	0402003f 	streq	r0, [r2], #-63	; 0xffffffc1
    2d3c:	1b054a03 	blne	155550 <__bss_end+0xa8278>
    2d40:	4a13054c 	bmi	4c4278 <__bss_end+0x416fa0>
    2d44:	059e1105 	ldreq	r1, [lr, #261]	; 0x105
    2d48:	07054b09 	streq	r4, [r5, -r9, lsl #22]
    2d4c:	4a06054a 	bmi	18427c <__bss_end+0xd6fa4>
    2d50:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
    2d54:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2d58:	0b054c13 	bleq	155dac <__bss_end+0xa8ad4>
    2d5c:	8209054a 	andhi	r0, r9, #310378496	; 0x12800000
    2d60:	052f0605 	streq	r0, [pc, #-1541]!	; 2763 <_start-0xd89d>
    2d64:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    2d68:	1b056601 	blne	15c574 <__bss_end+0xaf29c>
    2d6c:	01040200 	mrseq	r0, R12_usr
    2d70:	8412054a 	ldrhi	r0, [r2], #-1354	; 0xfffffab6
    2d74:	054a0a05 	strbeq	r0, [sl, #-2565]	; 0xfffff5fb
    2d78:	19059f06 	stmdbne	r5, {r1, r2, r8, r9, sl, fp, ip, pc}
    2d7c:	01040200 	mrseq	r0, R12_usr
    2d80:	4d110566 	cfldr32mi	mvfx0, [r1, #-408]	; 0xfffffe68
    2d84:	05661e05 	strbeq	r1, [r6, #-3589]!	; 0xfffff1fb
    2d88:	0a054a2a 	beq	155638 <__bss_end+0xa8360>
    2d8c:	4b06054a 	blmi	1842bc <__bss_end+0xd6fe4>
    2d90:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
    2d94:	05820104 	streq	r0, [r2, #260]	; 0x104
    2d98:	20054b12 	andcs	r4, r5, r2, lsl fp
    2d9c:	4a090566 	bmi	24433c <__bss_end+0x197064>
    2da0:	059f0605 	ldreq	r0, [pc, #1541]	; 33ad <_start-0xcc53>
    2da4:	0402001a 	streq	r0, [r2], #-26	; 0xffffffe6
    2da8:	07056601 	streq	r6, [r5, -r1, lsl #12]
    2dac:	4b06054b 	blmi	1842e0 <__bss_end+0xd7008>
    2db0:	02001f05 	andeq	r1, r0, #5, 30
    2db4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2db8:	1f054b06 	svcne	0x00054b06
    2dbc:	01040200 	mrseq	r0, R12_usr
    2dc0:	4b060582 	blmi	1843d0 <__bss_end+0xd70f8>
    2dc4:	02001f05 	andeq	r1, r0, #5, 30
    2dc8:	05820104 	streq	r0, [r2, #260]	; 0x104
    2dcc:	18054b06 	stmdane	r5, {r1, r2, r8, r9, fp, lr}
    2dd0:	01040200 	mrseq	r0, R12_usr
    2dd4:	10054d66 	andne	r4, r5, r6, ror #26
    2dd8:	4b0f054a 	blmi	3c4308 <__bss_end+0x317030>
    2ddc:	05671705 	strbeq	r1, [r7, #-1797]!	; 0xfffff8fb
    2de0:	1805660f 	stmdane	r5, {r0, r1, r2, r3, r9, sl, sp, lr}
    2de4:	6610054b 	ldrvs	r0, [r0], -fp, asr #10
    2de8:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
    2dec:	08056710 	stmdaeq	r5, {r4, r8, r9, sl, sp, lr}
    2df0:	8207054a 	andhi	r0, r7, #310378496	; 0x12800000
    2df4:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
    2df8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    2dfc:	07054b0a 	streq	r4, [r5, -sl, lsl #22]
    2e00:	0023054a 	eoreq	r0, r3, sl, asr #10
    2e04:	4a010402 	bmi	43e14 <ramdisk+0x16b3c>
    2e08:	054b1b05 	strbeq	r1, [fp, #-2821]	; 0xfffff4fb
    2e0c:	10054a12 	andne	r4, r5, r2, lsl sl
    2e10:	4b0f0582 	blmi	3c4420 <__bss_end+0x317148>
    2e14:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    2e18:	0705680a 	streq	r6, [r5, -sl, lsl #16]
    2e1c:	0023054a 	eoreq	r0, r3, sl, asr #10
    2e20:	4a010402 	bmi	43e30 <ramdisk+0x16b58>
    2e24:	054b1405 	strbeq	r1, [fp, #-1029]	; 0xfffffbfb
    2e28:	10054a1e 	andne	r4, r5, lr, lsl sl
    2e2c:	4c16054a 	cfldr32mi	mvfx0, [r6], {74}	; 0x4a
    2e30:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    2e34:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2e38:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    2e3c:	1a054a01 	bne	155648 <__bss_end+0xa8370>
    2e40:	02040200 	andeq	r0, r4, #0, 4
    2e44:	0025054a 	eoreq	r0, r5, sl, asr #10
    2e48:	4a020402 	bmi	83e58 <ramdisk+0x56b80>
    2e4c:	02002905 	andeq	r2, r0, #81920	; 0x14000
    2e50:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    2e54:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
    2e58:	3d052e02 	stccc	14, cr2, [r5, #-8]
    2e5c:	02040200 	andeq	r0, r4, #0, 4
    2e60:	0016054a 	andseq	r0, r6, sl, asr #10
    2e64:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    2e68:	052d0b05 	streq	r0, [sp, #-2821]!	; 0xfffff4fb
    2e6c:	1b053109 	blne	14f298 <__bss_end+0xa1fc0>
    2e70:	662b054a 	strtvs	r0, [fp], -sl, asr #10
    2e74:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    2e78:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    2e7c:	21054a01 	tstcs	r5, r1, lsl #20
    2e80:	6615054e 	ldrvs	r0, [r5], -lr, asr #10
    2e84:	054a1105 	strbeq	r1, [sl, #-261]	; 0xfffffefb
    2e88:	06054b10 			; <UNDEFINED> instruction: 0x06054b10
    2e8c:	670f0567 	strvs	r0, [pc, -r7, ror #10]
    2e90:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    2e94:	07058204 	streq	r8, [r5, -r4, lsl #4]
    2e98:	ba04054b 	blt	1043cc <__bss_end+0x570f4>
    2e9c:	054c1105 	strbeq	r1, [ip, #-261]	; 0xfffffefb
    2ea0:	0b056714 	bleq	15caf8 <__bss_end+0xaf820>
    2ea4:	6607054a 	strvs	r0, [r7], -sl, asr #10
    2ea8:	05671105 	strbeq	r1, [r7, #-261]!	; 0xfffffefb
    2eac:	05054a08 	streq	r4, [r5, #-2568]	; 0xfffff5f8
    2eb0:	67110582 	ldrvs	r0, [r1, -r2, lsl #11]
    2eb4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    2eb8:	1e059e05 	cdpne	14, 0, cr9, cr5, cr5, {0}
    2ebc:	4a150569 	bmi	544468 <__bss_end+0x497190>
    2ec0:	05821305 	streq	r1, [r2, #773]	; 0x305
    2ec4:	15054d1e 	strne	r4, [r5, #-3358]	; 0xfffff2e2
    2ec8:	8213054a 	andshi	r0, r3, #310378496	; 0x12800000
    2ecc:	05511005 	ldrbeq	r1, [r1, #-5]
    2ed0:	0b054a0e 	bleq	155710 <__bss_end+0xa8438>
    2ed4:	8209054b 	andhi	r0, r9, #314572800	; 0x12c00000
    2ed8:	05ba0d03 	ldreq	r0, [sl, #3331]!	; 0xd03
    2edc:	0d032f01 	stceq	15, cr2, [r3, #-4]
    2ee0:	0a053c08 	beq	151f08 <__bss_end+0xa4c30>
    2ee4:	4d05059f 	cfstr32mi	mvfx0, [r5, #-636]	; 0xfffffd84
    2ee8:	02001005 	andeq	r1, r0, #5
    2eec:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2ef0:	0402000a 	streq	r0, [r2], #-10
    2ef4:	1b054a01 	blne	155700 <__bss_end+0xa8428>
    2ef8:	02040200 	andeq	r0, r4, #0, 4
    2efc:	001f054a 	andseq	r0, pc, sl, asr #10
    2f00:	4a020402 	bmi	83f10 <ramdisk+0x56c38>
    2f04:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    2f08:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
    2f0c:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
    2f10:	3a054a03 	bcc	155724 <__bss_end+0xa844c>
    2f14:	03040200 	movweq	r0, #16896	; 0x4200
    2f18:	003e054a 	eorseq	r0, lr, sl, asr #10
    2f1c:	4a030402 	bmi	c3f2c <__bss_end+0x16c54>
    2f20:	02002905 	andeq	r2, r0, #81920	; 0x14000
    2f24:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
    2f28:	4a0c0318 	bmi	303b90 <__bss_end+0x2568b8>
    2f2c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    2f30:	06058224 	streq	r8, [r5], -r4, lsr #4
    2f34:	4b08052e 	blmi	2043f4 <__bss_end+0x15711c>
    2f38:	004e2205 	subeq	r2, lr, r5, lsl #4
    2f3c:	06010402 	streq	r0, [r1], -r2, lsl #8
    2f40:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    2f44:	07056602 	streq	r6, [r5, -r2, lsl #12]
    2f48:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2f4c:	09052e06 	stmdbeq	r5, {r1, r2, r9, sl, fp, sp}
    2f50:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    2f54:	0001054b 	andeq	r0, r1, fp, asr #10
    2f58:	2f040402 	svccs	0x00040402
    2f5c:	05661603 	strbeq	r1, [r6, #-1539]!	; 0xfffff9fd
    2f60:	0805da0f 	stmdaeq	r5, {r0, r1, r2, r3, r9, fp, ip, lr, pc}
    2f64:	8305054e 	movwhi	r0, #21838	; 0x554e
    2f68:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    2f6c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    2f70:	05054b06 	streq	r4, [r5, #-2822]	; 0xfffff4fa
    2f74:	670e0584 	strvs	r0, [lr, -r4, lsl #11]
    2f78:	05891005 	streq	r1, [r9, #5]
    2f7c:	05056906 	streq	r6, [r5, #-2310]	; 0xfffff6fa
    2f80:	0e054b2e 	vmlaeq.f64	d4, d5, d30
    2f84:	4a0c052e 	bmi	304444 <__bss_end+0x25716c>
    2f88:	0e030505 	cfsh32eq	mvfx0, mvfx3, #5
    2f8c:	2e0f052e 	cfsh32cs	mvfx0, mvfx15, #30
    2f90:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    2f94:	17058505 	strne	r8, [r5, -r5, lsl #10]
    2f98:	01040200 	mrseq	r0, R12_usr
    2f9c:	4c080566 	cfstr32mi	mvfx0, [r8], {102}	; 0x66
    2fa0:	05d70205 	ldrbeq	r0, [r7, #517]	; 0x205
    2fa4:	04020001 	streq	r0, [r2], #-1
    2fa8:	0e032f01 	cdpeq	15, 0, cr2, cr3, cr1, {0}
    2fac:	03050582 	movweq	r0, #21890	; 0x5582
    2fb0:	1205d60c 	andne	sp, r5, #12, 12	; 0xc00000
    2fb4:	01040200 	mrseq	r0, R12_usr
    2fb8:	4d070566 	cfstr32mi	mvfx0, [r7, #-408]	; 0xfffffe68
    2fbc:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    2fc0:	0d05d705 	stceq	7, cr13, [r5, #-20]	; 0xffffffec
    2fc4:	4c090567 	cfstr32mi	mvfx0, [r9], {103}	; 0x67
    2fc8:	05d80605 	ldrbeq	r0, [r8, #1541]	; 0x605
    2fcc:	0805670d 	stmdaeq	r5, {r0, r2, r3, r8, r9, sl, sp, lr}
    2fd0:	2e07052e 	cfsh32cs	mvfx0, mvfx7, #30
    2fd4:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    2fd8:	4a09030c 	bmi	243c10 <__bss_end+0x196938>
    2fdc:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    2fe0:	08054b07 	stmdaeq	r5, {r0, r1, r2, r8, r9, fp, lr}
    2fe4:	6a0c0567 	bvs	304588 <__bss_end+0x2572b0>
    2fe8:	05a10a05 	streq	r0, [r1, #2565]!	; 0xa05
    2fec:	1505850f 	strne	r8, [r5, #-1295]	; 0xfffffaf1
    2ff0:	2e08052e 	cfsh32cs	mvfx0, mvfx8, #30
    2ff4:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    2ff8:	0905680f 	stmdbeq	r5, {r0, r1, r2, r3, fp, sp, lr}
    2ffc:	0024054a 	eoreq	r0, r4, sl, asr #10
    3000:	4a010402 	bmi	44010 <ramdisk+0x16d38>
    3004:	054d0705 	strbeq	r0, [sp, #-1797]	; 0xfffff8fb
    3008:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    300c:	15056601 	strne	r6, [r5, #-1537]	; 0xfffff9ff
    3010:	01040200 	mrseq	r0, R12_usr
    3014:	0309054a 	movweq	r0, #38218	; 0x954a
    3018:	11054a15 	tstne	r5, r5, lsl sl
    301c:	2e06054b 	cfsh32cs	mvfx0, mvfx6, #43
    3020:	05831105 	streq	r1, [r3, #261]	; 0x105
    3024:	0b052e06 	bleq	14e844 <__bss_end+0xa156c>
    3028:	2e1a0583 	cdpcs	5, 1, cr0, cr10, cr3, {4}
    302c:	052e0b05 	streq	r0, [lr, #-2821]!	; 0xfffff4fb
    3030:	0c058308 	stceq	3, cr8, [r5], {8}
    3034:	2e17052e 	cfmul64cs	mvdx0, mvdx7, mvdx14
    3038:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
    303c:	06059f11 			; <UNDEFINED> instruction: 0x06059f11
    3040:	8308052e 	movwhi	r0, #34094	; 0x852e
    3044:	052e1005 	streq	r1, [lr, #-5]!
    3048:	0e054b09 	vmlaeq.f64	d4, d5, d9
    304c:	2e0a0567 	cfsh32cs	mvfx0, mvfx10, #55
    3050:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    3054:	0e05d70a 	cdpeq	7, 0, cr13, cr5, cr10, {0}
    3058:	bb0a0567 	bllt	2845fc <__bss_end+0x1d7324>
    305c:	052e1b05 	streq	r1, [lr, #-2821]!	; 0xfffff4fb
    3060:	07054a16 	smladeq	r5, r6, sl, r4
    3064:	670f0551 	smlsdvs	pc, r1, r5, r0	; <UNPREDICTABLE>
    3068:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
    306c:	0a052e08 	beq	14e894 <__bss_end+0xa15bc>
    3070:	6810054b 	ldmdavs	r0, {r0, r1, r3, r6, r8, sl}
    3074:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    3078:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    307c:	2c054a01 			; <UNDEFINED> instruction: 0x2c054a01
    3080:	01040200 	mrseq	r0, R12_usr
    3084:	001c052e 	andseq	r0, ip, lr, lsr #10
    3088:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    308c:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    3090:	0d054f06 	stceq	15, cr4, [r5, #-24]	; 0xffffffe8
    3094:	4a070567 	bmi	1c4638 <__bss_end+0x117360>
    3098:	02002605 	andeq	r2, r0, #5242880	; 0x500000
    309c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    30a0:	11056715 	tstne	r5, r5, lsl r7
    30a4:	4b14054a 	blmi	5045d4 <__bss_end+0x4572fc>
    30a8:	052e1005 	streq	r1, [lr, #-5]!
    30ac:	4a120306 	bmi	483ccc <__bss_end+0x3d69f4>
    30b0:	0a031605 	beq	c88cc <__bss_end+0x1b5f4>
    30b4:	2e250566 	cfsh64cs	mvdx0, mvdx5, #54
    30b8:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    30bc:	22058214 	andcs	r8, r5, #20, 4	; 0x40000001
    30c0:	2e27054b 	cfsh64cs	mvdx0, mvdx7, #43
    30c4:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    30c8:	0f056615 	svceq	0x00056615
    30cc:	6713054f 	ldrvs	r0, [r3, -pc, asr #10]
    30d0:	054a0f05 	strbeq	r0, [sl, #-3845]	; 0xfffff0fb
    30d4:	0c054b0d 			; <UNDEFINED> instruction: 0x0c054b0d
    30d8:	670d0567 	strvs	r0, [sp, -r7, ror #10]
    30dc:	6b0e0567 	blvs	384680 <__bss_end+0x2d73a8>
    30e0:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    30e4:	04020026 	streq	r0, [r2], #-38	; 0xffffffda
    30e8:	1c054a01 			; <UNDEFINED> instruction: 0x1c054a01
    30ec:	01040200 	mrseq	r0, R12_usr
    30f0:	4b17054a 	blmi	5c4620 <__bss_end+0x517348>
    30f4:	054a0e05 	strbeq	r0, [sl, #-3589]	; 0xfffff1fb
    30f8:	09054b14 	stmdbeq	r5, {r2, r4, r8, r9, fp, lr}
    30fc:	4b0a054a 	blmi	28462c <__bss_end+0x1d7354>
    3100:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    3104:	0d056605 	stceq	6, cr6, [r5, #-20]	; 0xffffffec
    3108:	9f09052f 	svcls	0x0009052f
    310c:	02001905 	andeq	r1, r0, #81920	; 0x14000
    3110:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3114:	22054b09 	andcs	r4, r5, #9216	; 0x2400
    3118:	01040200 	mrseq	r0, R12_usr
    311c:	00400566 	subeq	r0, r0, r6, ror #10
    3120:	47020402 	strmi	r0, [r2, -r2, lsl #8]
    3124:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
    3128:	05820104 	streq	r0, [r2, #260]	; 0x104
    312c:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    3130:	0f056603 	svceq	0x00056603
    3134:	67080587 	strvs	r0, [r8, -r7, lsl #11]
    3138:	02001d05 	andeq	r1, r0, #320	; 0x140
    313c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3140:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    3144:	0b056601 	bleq	15c950 <__bss_end+0xaf678>
    3148:	9f09054b 	svcls	0x0009054b
    314c:	05670b05 	strbeq	r0, [r7, #-2821]!	; 0xfffff4fb
    3150:	15056817 	strne	r6, [r5, #-2071]	; 0xfffff7e9
    3154:	4a10054a 	bmi	404684 <__bss_end+0x3573ac>
    3158:	10030505 	andne	r0, r3, r5, lsl #10
    315c:	001f054a 	andseq	r0, pc, sl, asr #10
    3160:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3164:	05680205 	strbeq	r0, [r8, #-517]!	; 0xfffffdfb
    3168:	04020001 	streq	r0, [r2], #-1
    316c:	0f032f01 	svceq	0x00032f01
    3170:	dd080582 	cfstr32le	mvfx0, [r8, #-520]	; 0xfffffdf8
    3174:	054d0605 	strbeq	r0, [sp, #-1541]	; 0xfffff9fb
    3178:	05056708 	streq	r6, [r5, #-1800]	; 0xfffff8f8
    317c:	001b05d7 			; <UNDEFINED> instruction: 0x001b05d7
    3180:	66020402 	strvs	r0, [r2], -r2, lsl #8
    3184:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    3188:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    318c:	04020039 	streq	r0, [r2], #-57	; 0xffffffc7
    3190:	0a056603 	beq	15c9a4 <__bss_end+0xaf6cc>
    3194:	4a11054b 	bmi	4446c8 <__bss_end+0x3973f0>
    3198:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
    319c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    31a0:	12054a01 	andne	r4, r5, #4096	; 0x1000
    31a4:	4a1f054b 	bmi	7c46d8 <__bss_end+0x717400>
    31a8:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    31ac:	18054b05 	stmdane	r5, {r0, r2, r8, r9, fp, lr}
    31b0:	01040200 	mrseq	r0, R12_usr
    31b4:	00020582 	andeq	r0, r2, r2, lsl #11
    31b8:	4c010402 	cfstrsmi	mvf0, [r1], {2}
    31bc:	052f0905 	streq	r0, [pc, #-2309]!	; 28bf <_start-0xd741>
    31c0:	06054a10 			; <UNDEFINED> instruction: 0x06054a10
    31c4:	4b15054a 	blmi	5446f4 <__bss_end+0x49741c>
    31c8:	054a1c05 	strbeq	r1, [sl, #-3077]	; 0xfffff3fb
    31cc:	32052e2a 	andcc	r2, r5, #672	; 0x2a0
    31d0:	2e0a054a 	cfsh32cs	mvfx0, mvfx10, #42
    31d4:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    31d8:	0805670b 	stmdaeq	r5, {r0, r1, r3, r8, r9, sl, sp, lr}
    31dc:	4b0b054a 	blmi	2c470c <__bss_end+0x217434>
    31e0:	058a0e05 	streq	r0, [sl, #3589]	; 0xe05
    31e4:	1305d908 	movwne	sp, #22792	; 0x5908
    31e8:	01040200 	mrseq	r0, R12_usr
    31ec:	9f080566 	svcls	0x00080566
    31f0:	02001d05 	andeq	r1, r0, #320	; 0x140
    31f4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    31f8:	0b059f0f 	bleq	16ae3c <__bss_end+0xbdb64>
    31fc:	d7070568 	strle	r0, [r7, -r8, ror #10]
    3200:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    3204:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3208:	07059f09 	streq	r9, [r5, -r9, lsl #30]
    320c:	0f056783 	svceq	0x00056783
    3210:	66180567 	ldrvs	r0, [r8], -r7, ror #10
    3214:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    3218:	09054b0d 	stmdbeq	r5, {r0, r2, r3, r8, r9, fp, lr}
    321c:	68150566 	ldmdavs	r5, {r1, r2, r5, r6, r8, sl}
    3220:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    3224:	3905ba08 	stmdbcc	r5, {r3, r9, fp, ip, sp, pc}
    3228:	01040200 	mrseq	r0, R12_usr
    322c:	a10b054a 	tstge	fp, sl, asr #10
    3230:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    3234:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
    3238:	22054a01 	andcs	r4, r5, #4096	; 0x1000
    323c:	01040200 	mrseq	r0, R12_usr
    3240:	0013054a 	andseq	r0, r3, sl, asr #10
    3244:	4a010402 	bmi	44254 <ramdisk+0x16f7c>
    3248:	05671905 	strbeq	r1, [r7, #-2309]!	; 0xfffff6fb
    324c:	2b054a23 	blcs	155ae0 <__bss_end+0xa8808>
    3250:	2e13054a 	cfmac32cs	mvfx0, mvfx3, mvfx10
    3254:	054a3805 	strbeq	r3, [sl, #-2053]	; 0xfffff7fb
    3258:	0a054a06 	beq	155a78 <__bss_end+0xa87a0>
    325c:	6705056e 	strvs	r0, [r5, -lr, ror #10]
    3260:	0d030d05 	stceq	13, cr0, [r3, #-20]	; 0xffffffec
    3264:	681b052e 	ldmdavs	fp, {r1, r2, r3, r5, r8, sl}
    3268:	054a2205 	strbeq	r2, [sl, #-517]	; 0xfffffdfb
    326c:	06054a08 	streq	r4, [r5], -r8, lsl #20
    3270:	0018054b 	andseq	r0, r8, fp, asr #10
    3274:	82010402 	andhi	r0, r1, #33554432	; 0x2000000
    3278:	054c0705 	strbeq	r0, [ip, #-1797]	; 0xfffff8fb
    327c:	2b05d606 	blcs	178a9c <__bss_end+0xcb7c4>
    3280:	01040200 	mrseq	r0, R12_usr
    3284:	9f13054a 	svcls	0x0013054a
    3288:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
    328c:	24052e1d 	strcs	r2, [r5], #-3613	; 0xfffff1e3
    3290:	4a03054a 	bmi	c47c0 <__bss_end+0x174e8>
    3294:	44031705 	strmi	r1, [r3], #-1797	; 0xfffff8fb
    3298:	8224059e 	eorhi	r0, r4, #662700032	; 0x27800000
    329c:	05ba3305 	ldreq	r3, [sl, #773]!	; 0x305
    32a0:	02058245 	andeq	r8, r5, #1342177284	; 0x50000004
    32a4:	01040200 	mrseq	r0, R12_usr
    32a8:	00c203ba 	strheq	r0, [r2], #58	; 0x3a
    32ac:	00010566 	andeq	r0, r1, r6, ror #10
    32b0:	2f010402 	svccs	0x00010402
    32b4:	05661003 	strbeq	r1, [r6, #-3]!
    32b8:	0605dc0e 	streq	sp, [r5], -lr, lsl #24
    32bc:	6708054d 	strvs	r0, [r8, -sp, asr #10]
    32c0:	05d70505 	ldrbeq	r0, [r7, #1285]	; 0x505
    32c4:	0402001b 	streq	r0, [r2], #-27	; 0xffffffe5
    32c8:	13056602 	movwne	r6, #22018	; 0x5602
    32cc:	02040200 	andeq	r0, r4, #0, 4
    32d0:	00390566 	eorseq	r0, r9, r6, ror #10
    32d4:	66030402 	strvs	r0, [r3], -r2, lsl #8
    32d8:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    32dc:	05054a11 	streq	r4, [r5, #-2577]	; 0xfffff5ef
    32e0:	001e052e 	andseq	r0, lr, lr, lsr #10
    32e4:	4a010402 	bmi	442f4 <ramdisk+0x1701c>
    32e8:	054d3d05 	strbeq	r3, [sp, #-3333]	; 0xfffff2fb
    32ec:	56054a33 			; <UNDEFINED> instruction: 0x56054a33
    32f0:	4a05054a 	bmi	144820 <__bss_end+0x97548>
    32f4:	054b2605 	strbeq	r2, [fp, #-1541]	; 0xfffff9fb
    32f8:	02054a07 	andeq	r4, r5, #28672	; 0x7000
    32fc:	2f09054d 	svccs	0x0009054d
    3300:	054a1005 	strbeq	r1, [sl, #-5]
    3304:	15054a06 	strne	r4, [r5, #-2566]	; 0xfffff5fa
    3308:	4a1c054b 	bmi	70483c <__bss_end+0x657564>
    330c:	052e2b05 	streq	r2, [lr, #-2821]!	; 0xfffff4fb
    3310:	0a054a33 	beq	155be4 <__bss_end+0xa890c>
    3314:	4b07052e 	blmi	1c47d4 <__bss_end+0x1174fc>
    3318:	05670b05 	strbeq	r0, [r7, #-2821]!	; 0xfffff4fb
    331c:	0b054a08 	bleq	155b44 <__bss_end+0xa886c>
    3320:	6709054b 	strvs	r0, [r9, -fp, asr #10]
    3324:	03670e05 	cmneq	r7, #5, 28	; 0x50
    3328:	0805ba09 	stmdaeq	r5, {r0, r3, r9, fp, ip, sp, pc}
    332c:	140567d9 	strne	r6, [r5], #-2009	; 0xfffff827
    3330:	01040200 	mrseq	r0, R12_usr
    3334:	9f080566 	svcls	0x00080566
    3338:	02001d05 	andeq	r1, r0, #320	; 0x140
    333c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3340:	10059f0f 	andne	r9, r5, pc, lsl #30
    3344:	4a080567 	bmi	2048e8 <__bss_end+0x157610>
    3348:	02002d05 	andeq	r2, r0, #320	; 0x140
    334c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3350:	1905690a 	stmdbne	r5, {r1, r3, r8, fp, sp, lr}
    3354:	4a07054a 	bmi	1c4884 <__bss_end+0x1175ac>
    3358:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
    335c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3360:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    3364:	3d058201 	sfmcc	f0, 1, [r5, #-4]
    3368:	02040200 	andeq	r0, r4, #0, 4
    336c:	a50b054a 	strge	r0, [fp, #-1354]	; 0xfffffab6
    3370:	05d70705 	ldrbeq	r0, [r7, #1797]	; 0x705
    3374:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    3378:	09056601 	stmdbeq	r5, {r0, r9, sl, sp, lr}
    337c:	8307059f 	movwhi	r0, #30111	; 0x759f
    3380:	670f0567 	strvs	r0, [pc, -r7, ror #10]
    3384:	05661805 	strbeq	r1, [r6, #-2053]!	; 0xfffff7fb
    3388:	0d054a08 	vstreq	s8, [r5, #-32]	; 0xffffffe0
    338c:	6609054b 	strvs	r0, [r9], -fp, asr #10
    3390:	05681605 	strbeq	r1, [r8, #-1541]!	; 0xfffff9fb
    3394:	08052e09 	stmdaeq	r5, {r0, r3, r9, sl, fp, sp}
    3398:	003a05ba 	ldrhteq	r0, [sl], -sl
    339c:	4a010402 	bmi	443ac <ramdisk+0x170d4>
    33a0:	05a10b05 	streq	r0, [r1, #2821]!	; 0xb05
    33a4:	08054a15 	stmdaeq	r5, {r0, r2, r4, r9, fp, lr}
    33a8:	670f054a 	strvs	r0, [pc, -sl, asr #10]
    33ac:	054a2205 	strbeq	r2, [sl, #-517]	; 0xfffffdfb
    33b0:	34054a2c 	strcc	r4, [r5], #-2604	; 0xfffff5d4
    33b4:	2e1c054a 	cfmac32cs	mvfx0, mvfx12, mvfx10
    33b8:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    33bc:	10056708 	andne	r6, r5, r8, lsl #14
    33c0:	030a052e 	movweq	r0, #42286	; 0xa52e
    33c4:	05054a09 	streq	r4, [r5, #-2569]	; 0xfffff5f7
    33c8:	310a0567 	tstcc	sl, r7, ror #10
    33cc:	054a1b05 	strbeq	r1, [sl, #-2821]	; 0xfffff4fb
    33d0:	09054a07 	stmdbeq	r5, {r0, r1, r2, r9, fp, lr}
    33d4:	8208054b 	andhi	r0, r8, #314572800	; 0x12c00000
    33d8:	02002305 	andeq	r2, r0, #335544320	; 0x14000000
    33dc:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    33e0:	11059f07 	tstne	r5, r7, lsl #30
    33e4:	030d052e 	movweq	r0, #54574	; 0xd52e
    33e8:	1b054a09 	blne	155c14 <__bss_end+0xa893c>
    33ec:	4a220568 	bmi	884994 <__bss_end+0x7d76bc>
    33f0:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
    33f4:	18054b06 	stmdane	r5, {r1, r2, r8, r9, fp, lr}
    33f8:	01040200 	mrseq	r0, R12_usr
    33fc:	4c070582 	cfstr32mi	mvfx0, [r7], {130}	; 0x82
    3400:	05d60605 	ldrbeq	r0, [r6, #1541]	; 0x605
    3404:	0402002b 	streq	r0, [r2], #-43	; 0xffffffd5
    3408:	0c054a01 			; <UNDEFINED> instruction: 0x0c054a01
    340c:	2e0a059f 	mcrcs	5, 0, r0, cr10, cr15, {4}
    3410:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    3414:	03054a1d 	movweq	r4, #23069	; 0x5a1d
    3418:	9f05054a 	svcls	0x0005054a
    341c:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    3420:	7fb30317 	svcvc	0x00b30317
    3424:	8224054a 	eorhi	r0, r4, #310378496	; 0x12800000
    3428:	05ba3305 	ldreq	r3, [sl, #773]!	; 0x305
    342c:	73058245 	movwvc	r8, #21061	; 0x5245
    3430:	4a6305ba 	bmi	18c4b20 <__bss_end+0x1817848>
    3434:	4a018805 	bmi	65450 <ramdisk+0x38178>
    3438:	05665e05 	strbeq	r5, [r6, #-3589]!	; 0xfffff1fb
    343c:	04020002 	streq	r0, [r2], #-2
    3440:	05054a01 	streq	r4, [r5, #-2561]	; 0xfffff5ff
    3444:	05821303 	streq	r1, [r2, #771]	; 0x303
    3448:	00c1030b 	sbceq	r0, r1, fp, lsl #6
    344c:	bc02052e 	cfstr32lt	mvfx0, [r2], {46}	; 0x2e
    3450:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    3454:	032f0104 			; <UNDEFINED> instruction: 0x032f0104
    3458:	0805660c 	stmdaeq	r5, {r2, r3, r9, sl, sp, lr}
    345c:	d7050589 	strle	r0, [r5, -r9, lsl #11]
    3460:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    3464:	06054a10 			; <UNDEFINED> instruction: 0x06054a10
    3468:	5207052e 	andpl	r0, r7, #192937984	; 0xb800000
    346c:	21030b05 	tstcs	r3, r5, lsl #22
    3470:	f308054a 	vrshl.u8	q0, q5, q4
    3474:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
    3478:	06056714 			; <UNDEFINED> instruction: 0x06056714
    347c:	3105d7f3 	strdcc	sp, [r5, -r3]
    3480:	4a06054a 	bmi	1849b0 <__bss_end+0xd76d8>
    3484:	08059f67 	stmdaeq	r5, {r0, r1, r2, r5, r6, r8, r9, sl, fp, ip, pc}
    3488:	2e10059f 	cfcmp32cs	r0, mvfx0, mvfx15
    348c:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    3490:	02059f0f 	andeq	r9, r5, #15, 30	; 0x3c
    3494:	2f0105c0 	svccs	0x000105c0
    3498:	05820e03 	streq	r0, [r2, #3587]	; 0xe03
    349c:	05058708 	streq	r8, [r5, #-1800]	; 0xfffff8f8
    34a0:	69090583 	stmdbvs	r9, {r0, r1, r7, r8, sl}
    34a4:	05d70605 	ldrbeq	r0, [r7, #1541]	; 0x605
    34a8:	09056b0f 	stmdbeq	r5, {r0, r1, r2, r3, r8, r9, fp, sp, lr}
    34ac:	2f01056d 	svccs	0x0001056d
    34b0:	6601c303 	strvs	ip, [r1], -r3, lsl #6
    34b4:	0c030805 	stceq	8, cr0, [r3], {5}
    34b8:	d705059e 			; <UNDEFINED> instruction: 0xd705059e
    34bc:	02001805 	andeq	r1, r0, #327680	; 0x50000
    34c0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    34c4:	14056c05 	strne	r6, [r5], #-3077	; 0xfffff3fb
    34c8:	01040200 	mrseq	r0, R12_usr
    34cc:	4a3b0366 	bmi	ec426c <__bss_end+0xe16f94>
    34d0:	054a0605 	strbeq	r0, [sl, #-1541]	; 0xfffff9fb
    34d4:	04020037 	streq	r0, [r2], #-55	; 0xffffffc9
    34d8:	3e056601 	cfmadd32cc	mvax0, mvfx6, mvfx5, mvfx1
    34dc:	01040200 	mrseq	r0, R12_usr
    34e0:	001d054a 	andseq	r0, sp, sl, asr #10
    34e4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    34e8:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    34ec:	14056809 	strne	r6, [r5], #-2057	; 0xfffff7f7
    34f0:	4a0c0567 	bmi	304a94 <__bss_end+0x2577bc>
    34f4:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
    34f8:	08056713 	stmdaeq	r5, {r0, r1, r4, r8, r9, sl, sp, lr}
    34fc:	4b07054a 	blmi	1c4a2c <__bss_end+0x117754>
    3500:	02000a05 	andeq	r0, r0, #20480	; 0x5000
    3504:	05670104 	strbeq	r0, [r7, #-260]!	; 0xfffffefc
    3508:	0402000f 	streq	r0, [r2], #-15
    350c:	1f054a01 	svcne	0x00054a01
    3510:	01040200 	mrseq	r0, R12_usr
    3514:	0024059e 	mlaeq	r4, lr, r5, r0
    3518:	4a010402 	bmi	44528 <ramdisk+0x17250>
    351c:	02001205 	andeq	r1, r0, #1342177280	; 0x50000000
    3520:	05810104 	streq	r0, [r1, #260]	; 0x104
    3524:	1e054c17 	mcrne	12, 0, r4, cr5, cr7, {0}
    3528:	4a1c054a 	bmi	704a58 <__bss_end+0x657780>
    352c:	4b2e0e05 	blmi	b86d48 <__bss_end+0xad9a70>
    3530:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    3534:	0584670a 	streq	r6, [r4, #1802]	; 0x70a
    3538:	0d056808 	stceq	8, cr6, [r5, #-32]	; 0xffffffe0
    353c:	9f090567 	svcls	0x00090567
    3540:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    3544:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3548:	1e059f09 	cdpne	15, 0, cr9, cr5, cr9, {0}
    354c:	01040200 	mrseq	r0, R12_usr
    3550:	9f150566 	svcls	0x00150566
    3554:	05690f05 	strbeq	r0, [r9, #-3845]!	; 0xfffff0fb
    3558:	0b056807 	bleq	15d57c <__bss_end+0xb02a4>
    355c:	2f0a0567 	svccs	0x000a0567
    3560:	05821b05 	streq	r1, [r2, #2821]	; 0xb05
    3564:	1305bc0c 	movwne	fp, #23564	; 0x5c0c
    3568:	2e09054a 	cfsh32cs	mvfx0, mvfx9, #42
    356c:	054f0e05 	strbeq	r0, [pc, #-3589]	; 276f <_start-0xd891>
    3570:	0c059f0a 	stceq	15, cr9, [r5], {10}
    3574:	4a080567 	bmi	204b18 <__bss_end+0x157840>
    3578:	05330e05 	ldreq	r0, [r3, #-3589]!	; 0xfffff1fb
    357c:	1e05a009 	cdpne	0, 0, cr10, cr5, cr9, {0}
    3580:	01040200 	mrseq	r0, R12_usr
    3584:	9f090566 	svcls	0x00090566
    3588:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
    358c:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    3590:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    3594:	2d054a02 	vstrcs	s8, [r5, #-8]
    3598:	03040200 	movweq	r0, #16896	; 0x4200
    359c:	9f100566 	svcls	0x00100566
    35a0:	6d030b05 	vstrvs	d0, [r3, #-20]	; 0xffffffec
    35a4:	030e0566 	movweq	r0, #58726	; 0xe566
    35a8:	0d058215 	sfmeq	f0, 1, [r5, #-84]	; 0xffffffac
    35ac:	660805bb 			; <UNDEFINED> instruction: 0x660805bb
    35b0:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    35b4:	16059f09 	strne	r9, [r5], -r9, lsl #30
    35b8:	01040200 	mrseq	r0, R12_usr
    35bc:	9f0f0566 	svcls	0x000f0566
    35c0:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
    35c4:	2c056a1c 			; <UNDEFINED> instruction: 0x2c056a1c
    35c8:	4a06054a 	bmi	184af8 <__bss_end+0xd7820>
    35cc:	054b1805 	strbeq	r1, [fp, #-2053]	; 0xfffff7fb
    35d0:	0d054a14 	vstreq	s8, [r5, #-80]	; 0xffffffb0
    35d4:	bc09054b 	cfstr32lt	mvfx0, [r9], {75}	; 0x4b
    35d8:	054a1005 	strbeq	r1, [sl, #-5]
    35dc:	27054a06 	strcs	r4, [r5, -r6, lsl #20]
    35e0:	01040200 	mrseq	r0, R12_usr
    35e4:	0019054a 	andseq	r0, r9, sl, asr #10
    35e8:	4a010402 	bmi	445f8 <ramdisk+0x17320>
    35ec:	0a030d05 	beq	c6a08 <__bss_end+0x19730>
    35f0:	6a020566 	bvs	84b90 <ramdisk+0x578b8>
    35f4:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
    35f8:	032f0104 			; <UNDEFINED> instruction: 0x032f0104
    35fc:	0505660d 	streq	r6, [r5, #-1549]	; 0xfffff9f3
    3600:	001205a4 	andseq	r0, r2, r4, lsr #11
    3604:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3608:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
    360c:	0e05d705 	cdpeq	7, 0, cr13, cr5, cr5, {0}
    3610:	68090567 	stmdavs	r9, {r0, r1, r2, r5, r6, r8, sl}
    3614:	05bb0605 	ldreq	r0, [fp, #1541]!	; 0x605
    3618:	08056710 	stmdaeq	r5, {r4, r8, r9, sl, sp, lr}
    361c:	2e07054a 	cfsh32cs	mvfx0, mvfx7, #42
    3620:	054b1005 	strbeq	r1, [fp, #-5]
    3624:	08054a16 	stmdaeq	r5, {r1, r2, r4, r9, fp, lr}
    3628:	0318052e 	tsteq	r8, #192937984	; 0xb800000
    362c:	27054a0a 	strcs	r4, [r5, -sl, lsl #20]
    3630:	4a18052e 	bmi	604af0 <__bss_end+0x557818>
    3634:	05821605 	streq	r1, [r2, #1541]	; 0x605
    3638:	0705690a 	streq	r6, [r5, -sl, lsl #18]
    363c:	6714054d 	ldrvs	r0, [r4, -sp, asr #10]
    3640:	054a1005 	strbeq	r1, [sl, #-5]
    3644:	06054b0b 	streq	r4, [r5], -fp, lsl #22
    3648:	059e0e03 	ldreq	r0, [lr, #3587]	; 0xe03
    364c:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    3650:	05056601 	streq	r6, [r5, #-1537]	; 0xfffff9ff
    3654:	001f054c 	andseq	r0, pc, ip, asr #10
    3658:	66010402 	strvs	r0, [r1], -r2, lsl #8
    365c:	05680205 	strbeq	r0, [r8, #-517]!	; 0xfffffdfb
    3660:	04020001 	streq	r0, [r2], #-1
    3664:	0c032f01 	stceq	15, cr2, [r3], {1}
    3668:	87080566 	strhi	r0, [r8, -r6, ror #10]
    366c:	05d70505 	ldrbeq	r0, [r7, #1285]	; 0x505
    3670:	09056b0e 	stmdbeq	r5, {r1, r2, r3, r8, r9, fp, sp, lr}
    3674:	2f01056c 	svccs	0x0001056c
    3678:	05660d03 	strbeq	r0, [r6, #-3331]!	; 0xfffff2fd
    367c:	0505a408 	streq	sl, [r5, #-1032]	; 0xfffffbf8
    3680:	670605d7 			; <UNDEFINED> instruction: 0x670605d7
    3684:	bd670a05 	vstmdblt	r7!, {s1-s5}
    3688:	059f0705 	ldreq	r0, [pc, #1797]	; 3d95 <_start-0xc26b>
    368c:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    3690:	07056601 	streq	r6, [r5, -r1, lsl #12]
    3694:	6705054b 	strvs	r0, [r5, -fp, asr #10]
    3698:	05670b05 	strbeq	r0, [r7, #-2821]!	; 0xfffff4fb
    369c:	20059f08 	andcs	r9, r5, r8, lsl #30
    36a0:	01040200 	mrseq	r0, R12_usr
    36a4:	4f020566 	svcmi	0x00020566
    36a8:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    36ac:	056600c1 	strbeq	r0, [r6, #-193]!	; 0xffffff3f
    36b0:	0505a508 	streq	sl, [r5, #-1288]	; 0xfffffaf8
    36b4:	680905d7 	stmdavs	r9, {r0, r1, r2, r4, r6, r7, r8, sl}
    36b8:	05d70605 	ldrbeq	r0, [r7, #1541]	; 0x605
    36bc:	0805670d 	stmdaeq	r5, {r0, r2, r3, r8, r9, sl, sp, lr}
    36c0:	2e07052e 	cfsh32cs	mvfx0, mvfx7, #30
    36c4:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    36c8:	0e056808 	cdpeq	8, 0, cr6, cr5, cr8, {0}
    36cc:	01040200 	mrseq	r0, R12_usr
    36d0:	88020566 	stmdahi	r2, {r1, r2, r5, r6, r8, sl}
    36d4:	032f0105 			; <UNDEFINED> instruction: 0x032f0105
    36d8:	0805660e 	stmdaeq	r5, {r1, r2, r3, r9, sl, sp, lr}
    36dc:	05ba0a03 	ldreq	r0, [sl, #2563]!	; 0xa03
    36e0:	0a05d705 	beq	1792fc <__bss_end+0xcc024>
    36e4:	68090567 	stmdavs	r9, {r0, r1, r2, r5, r6, r8, sl}
    36e8:	054a1a05 	strbeq	r1, [sl, #-2565]	; 0xfffff5fb
    36ec:	06054a25 	streq	r4, [r5], -r5, lsr #20
    36f0:	4b0f052e 	blmi	3c4bb0 <__bss_end+0x3178d8>
    36f4:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    36f8:	054b690a 	strbeq	r6, [fp, #-2314]	; 0xfffff6f6
    36fc:	0a054a07 	beq	155f20 <__bss_end+0xa8c48>
    3700:	4a16054b 	bmi	584c34 <__bss_end+0x4d795c>
    3704:	054c0d05 	strbeq	r0, [ip, #-3333]	; 0xfffff2fb
    3708:	0b059f09 	bleq	16b334 <__bss_end+0xbe05c>
    370c:	4a070567 	bmi	1c4cb0 <__bss_end+0x1179d8>
    3710:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
    3714:	0705670b 	streq	r6, [r5, -fp, lsl #14]
    3718:	3009054a 	andcc	r0, r9, sl, asr #10
    371c:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    3720:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3724:	19056705 	stmdbne	r5, {r0, r2, r8, r9, sl, sp, lr}
    3728:	4a050566 	bmi	144cc8 <__bss_end+0x979f0>
    372c:	18030f05 	stmdane	r3, {r0, r2, r8, r9, sl, fp}
    3730:	2e0b0582 	cfsh32cs	mvfx0, mvfx11, #-62
    3734:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
    3738:	08052e0b 	stmdaeq	r5, {r0, r1, r3, r9, sl, fp, sp}
    373c:	4c0a054b 	cfstr32mi	mvfx0, [sl], {75}	; 0x4b
    3740:	05670e05 	strbeq	r0, [r7, #-3589]!	; 0xfffff1fb
    3744:	0d05f30b 	stceq	3, cr15, [r5, #-44]	; 0xffffffd4
    3748:	4a0a0568 	bmi	284cf0 <__bss_end+0x1d7a18>
    374c:	054b1605 	strbeq	r1, [fp, #-1541]	; 0xfffff9fb
    3750:	0c052e14 	stceq	14, cr2, [r5], {20}
    3754:	9e0b052e 	cfsh32ls	mvfx0, mvfx11, #30
    3758:	02002c05 	andeq	r2, r0, #1280	; 0x500
    375c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3760:	1805670a 	stmdane	r5, {r1, r3, r8, r9, sl, sp, lr}
    3764:	2e160584 	cdpcs	5, 1, cr0, cr6, cr4, {4}
    3768:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    376c:	0b059e23 	bleq	16b000 <__bss_end+0xbdd28>
    3770:	003c052e 	eorseq	r0, ip, lr, lsr #10
    3774:	4a010402 	bmi	44784 <ramdisk+0x174ac>
    3778:	05670a05 	strbeq	r0, [r7, #-2565]!	; 0xfffff5fb
    377c:	06056809 	streq	r6, [r5], -r9, lsl #16
    3780:	03080583 	movweq	r0, #34179	; 0x8583
    3784:	0705d676 	smlsdxeq	r5, r6, r6, sp
    3788:	052e0d03 	streq	r0, [lr, #-3331]!	; 0xfffff2fd
    378c:	0705670c 	streq	r6, [r5, -ip, lsl #14]
    3790:	2e130567 	cfmsc32cs	mvfx0, mvfx3, mvfx7
    3794:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
    3798:	0105bf02 	tsteq	r5, r2, lsl #30
    379c:	660c032f 	strvs	r0, [ip], -pc, lsr #6
    37a0:	05880805 	streq	r0, [r8, #2053]	; 0x805
    37a4:	1b05d705 	blne	1793c0 <__bss_end+0xcc0e8>
    37a8:	02040200 	andeq	r0, r4, #0, 4
    37ac:	00130566 	andseq	r0, r3, r6, ror #10
    37b0:	66020402 	strvs	r0, [r2], -r2, lsl #8
    37b4:	02003905 	andeq	r3, r0, #81920	; 0x14000
    37b8:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    37bc:	11054b0a 	tstne	r5, sl, lsl #22
    37c0:	2e05054a 	cfsh32cs	mvfx0, mvfx5, #42
    37c4:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
    37c8:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    37cc:	18054c08 	stmdane	r5, {r3, sl, fp, lr}
    37d0:	4a05054a 	bmi	144d00 <__bss_end+0x97a28>
    37d4:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
    37d8:	0a054a06 	beq	155ff8 <__bss_end+0xa8d20>
    37dc:	f313054b 	vrshl.u16	q0, <illegal reg q5.5>, <illegal reg q1.5>
    37e0:	05840a05 	streq	r0, [r4, #2565]	; 0xa05
    37e4:	0705d708 	streq	sp, [r5, -r8, lsl #14]
    37e8:	001f054b 	andseq	r0, pc, fp, asr #10
    37ec:	66010402 	strvs	r0, [r1], -r2, lsl #8
    37f0:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    37f4:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    37f8:	07056601 	streq	r6, [r5, -r1, lsl #12]
    37fc:	0020054b 	eoreq	r0, r0, fp, asr #10
    3800:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3804:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    3808:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    380c:	1705670b 	strne	r6, [r5, -fp, lsl #14]
    3810:	4a1305f5 	bmi	4c4fec <__bss_end+0x417d14>
    3814:	054b0c05 	strbeq	r0, [fp, #-3077]	; 0xfffff3fb
    3818:	ba0a0306 	blt	284438 <__bss_end+0x1d7160>
    381c:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    3820:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3824:	0105a102 	tsteq	r5, r2, lsl #2
    3828:	01040200 	mrseq	r0, R12_usr
    382c:	660c032f 	strvs	r0, [ip], -pc, lsr #6
    3830:	52860805 	addpl	r0, r6, #327680	; 0x50000
    3834:	05d70505 	ldrbeq	r0, [r7, #1285]	; 0x505
    3838:	0905670d 	stmdbeq	r5, {r0, r2, r3, r8, r9, sl, sp, lr}
    383c:	dd06054c 	cfstr32le	mvfx0, [r6, #-304]	; 0xfffffed0
    3840:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    3844:	07052e08 	streq	r2, [r5, -r8, lsl #28]
    3848:	4b09052e 	blmi	244d08 <__bss_end+0x197a30>
    384c:	05680f05 	strbeq	r0, [r8, #-3845]!	; 0xfffff0fb
    3850:	08052e15 	stmdaeq	r5, {r0, r2, r4, r9, sl, fp, sp}
    3854:	4b0a052e 	blmi	284d14 <__bss_end+0x1d7a3c>
    3858:	054d0705 	strbeq	r0, [sp, #-1797]	; 0xfffff8fb
    385c:	6609030e 	strvs	r0, [r9], -lr, lsl #6
    3860:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
    3864:	0f052e0e 	svceq	0x00052e0e
    3868:	2e150584 	cdpcs	5, 1, cr0, cr5, cr4, {4}
    386c:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
    3870:	16055112 			; <UNDEFINED> instruction: 0x16055112
    3874:	510d054b 	tstpl	sp, fp, asr #10
    3878:	05bb0a05 	ldreq	r0, [fp, #2565]!	; 0xa05
    387c:	0b05670e 	bleq	15d4bc <__bss_end+0xb01e4>
    3880:	001e05bb 			; <UNDEFINED> instruction: 0x001e05bb
    3884:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3888:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    388c:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    3890:	07056601 	streq	r6, [r5, -r1, lsl #12]
    3894:	670b054f 	strvs	r0, [fp, -pc, asr #10]
    3898:	059f0805 	ldreq	r0, [pc, #2053]	; 40a5 <_start-0xbf5b>
    389c:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    38a0:	0c056601 	stceq	6, cr6, [r5], {1}
    38a4:	d908056a 	stmdble	r8, {r1, r3, r5, r6, r8, sl}
    38a8:	02001d05 	andeq	r1, r0, #320	; 0x140
    38ac:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    38b0:	0105a402 	tsteq	r5, r2, lsl #8
    38b4:	660c032f 	strvs	r0, [ip], -pc, lsr #6
    38b8:	09030805 	stmdbeq	r3, {r0, r2, fp}
    38bc:	d7050582 	strle	r0, [r5, -r2, lsl #11]
    38c0:	05670d05 	strbeq	r0, [r7, #-3333]!	; 0xfffff2fb
    38c4:	06054c09 	streq	r4, [r5], -r9, lsl #24
    38c8:	001905d7 			; <UNDEFINED> instruction: 0x001905d7
    38cc:	66010402 	strvs	r0, [r1], -r2, lsl #8
    38d0:	054e0605 	strbeq	r0, [lr, #-1541]	; 0xfffff9fb
    38d4:	0a05670c 	beq	15d50c <__bss_end+0xb0234>
    38d8:	9f08054b 	svcls	0x0008054b
    38dc:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    38e0:	04020016 	streq	r0, [r2], #-22	; 0xffffffea
    38e4:	07056601 	streq	r6, [r5, -r1, lsl #12]
    38e8:	0016054b 	andseq	r0, r6, fp, asr #10
    38ec:	66010402 	strvs	r0, [r1], -r2, lsl #8
    38f0:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    38f4:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    38f8:	07056601 	streq	r6, [r5, -r1, lsl #12]
    38fc:	0b054b4b 	bleq	156630 <__bss_end+0xa9358>
    3900:	bb080567 	bllt	204ea4 <__bss_end+0x157bcc>
    3904:	05681005 	strbeq	r1, [r8, #-5]!
    3908:	07052e0e 	streq	r2, [r5, -lr, lsl #28]
    390c:	8309052e 	movwhi	r0, #38190	; 0x952e
    3910:	052e1905 	streq	r1, [lr, #-2309]!	; 0xfffff6fb
    3914:	19054b09 	stmdbne	r5, {r0, r3, r8, r9, fp, lr}
    3918:	4b12052e 	blmi	484dd8 <__bss_end+0x3d7b00>
    391c:	052e1005 	streq	r1, [lr, #-5]!
    3920:	05832e07 	streq	r2, [r3, #3591]	; 0xe07
    3924:	07052e16 	smladeq	r5, r6, lr, r2
    3928:	6710054a 	ldrvs	r0, [r0, -sl, asr #10]
    392c:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
    3930:	22052e07 	andcs	r2, r5, #7, 28	; 0x70
    3934:	4a07052e 	bmi	1c4df4 <__bss_end+0x117b1c>
    3938:	05670905 	strbeq	r0, [r7, #-2309]!	; 0xfffff6fb
    393c:	26052e1b 			; <UNDEFINED> instruction: 0x26052e1b
    3940:	4b07054a 	blmi	1c4e70 <__bss_end+0x117b98>
    3944:	052e1605 	streq	r1, [lr, #-1541]!	; 0xfffff9fb
    3948:	07052e14 	smladeq	r5, r4, lr, r2
    394c:	8309052e 	movwhi	r0, #38190	; 0x952e
    3950:	052e1105 	streq	r1, [lr, #-261]!	; 0xfffffefb
    3954:	07054c0c 	streq	r4, [r5, -ip, lsl #24]
    3958:	031105a1 	tsteq	r1, #675282944	; 0x28400000
    395c:	0605660d 	streq	r6, [r5], -sp, lsl #12
    3960:	0805832e 	stmdaeq	r5, {r1, r2, r3, r5, r8, r9, pc}
    3964:	2e0c059f 	mcrcs	5, 0, r0, cr12, cr15, {4}
    3968:	052e1705 	streq	r1, [lr, #-1797]!	; 0xfffff8fb
    396c:	10054b08 	andne	r4, r5, r8, lsl #22
    3970:	4c08052e 	cfstr32mi	mvfx0, [r8], {46}	; 0x2e
    3974:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
    3978:	0205bd05 	andeq	fp, r5, #320	; 0x140
    397c:	2f0105a4 	svccs	0x000105a4
    3980:	05820d03 	streq	r0, [r2, #3331]	; 0xd03
    3984:	9e090302 	cdpls	3, 0, cr0, cr9, cr2, {0}
    3988:	05670805 	strbeq	r0, [r7, #-2053]!	; 0xfffff7fb
    398c:	0e05d705 	cdpeq	7, 0, cr13, cr5, cr5, {0}
    3990:	4c090567 	cfstr32mi	mvfx0, [r9], {103}	; 0x67
    3994:	05d70605 	ldrbeq	r0, [r7, #1541]	; 0x605
    3998:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    399c:	27056601 	strcs	r6, [r5, -r1, lsl #12]
    39a0:	01040200 	mrseq	r0, R12_usr
    39a4:	0014052e 	andseq	r0, r4, lr, lsr #10
    39a8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    39ac:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
    39b0:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    39b4:	14055006 	strne	r5, [r5], #-6
    39b8:	05661c03 	strbeq	r1, [r6, #-3075]!	; 0xfffff3fd
    39bc:	75082e05 	strvc	r2, [r8, #-3589]	; 0xfffff1fb
    39c0:	05f30b05 	ldrbeq	r0, [r3, #2821]!	; 0xb05
    39c4:	1405d708 	strne	sp, [r5], #-1800	; 0xfffff8f8
    39c8:	2e260567 	cfsh64cs	mvdx0, mvdx6, #55
    39cc:	052e5405 	streq	r5, [lr, #-1029]!	; 0xfffffbfb
    39d0:	04020034 	streq	r0, [r2], #-52	; 0xffffffcc
    39d4:	40054a01 	andmi	r4, r5, r1, lsl #20
    39d8:	01040200 	mrseq	r0, R12_usr
    39dc:	002e052e 	eoreq	r0, lr, lr, lsr #10
    39e0:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    39e4:	02005405 	andeq	r5, r0, #83886080	; 0x5000000
    39e8:	004a0304 	subeq	r0, sl, r4, lsl #6
    39ec:	06040402 	streq	r0, [r4], -r2, lsl #8
    39f0:	000a054a 	andeq	r0, sl, sl, asr #10
    39f4:	06060402 	streq	r0, [r6], -r2, lsl #8
    39f8:	3008052e 	andcc	r0, r8, lr, lsr #10
    39fc:	05670c05 	strbeq	r0, [r7, #-3077]!	; 0xfffff3fb
    3a00:	0b059f09 	bleq	16b62c <__bss_end+0xbe354>
    3a04:	4b120567 	blmi	484fa8 <__bss_end+0x3d7cd0>
    3a08:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    3a0c:	1a059f0a 	bne	16b63c <__bss_end+0xbe364>
    3a10:	2e15054a 	cfmac32cs	mvfx0, mvfx5, mvfx10
    3a14:	052f1005 	streq	r1, [pc, #-5]!	; 3a17 <_start-0xc5e9>
    3a18:	0a05661b 	beq	15d28c <__bss_end+0xaffb4>
    3a1c:	0034052e 	eorseq	r0, r4, lr, lsr #10
    3a20:	4a010402 	bmi	44a30 <ramdisk+0x17758>
    3a24:	05f30905 	ldrbeq	r0, [r3, #2309]!	; 0x905
    3a28:	0f052e11 	svceq	0x00052e11
    3a2c:	661a054b 	ldrvs	r0, [sl], -fp, asr #10
    3a30:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    3a34:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    3a38:	40054a01 	andmi	r4, r5, r1, lsl #20
    3a3c:	01040200 	mrseq	r0, R12_usr
    3a40:	0024052e 	eoreq	r0, r4, lr, lsr #10
    3a44:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    3a48:	054b0f05 	strbeq	r0, [fp, #-3845]	; 0xfffff0fb
    3a4c:	053d080b 	ldreq	r0, [sp, #-2059]!	; 0xfffff7f5
    3a50:	0f05670d 	svceq	0x0005670d
    3a54:	bb110569 	bllt	445000 <__bss_end+0x397d28>
    3a58:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
    3a5c:	0c052e0d 	stceq	14, cr2, [r5], {13}
    3a60:	0020054b 	eoreq	r0, r0, fp, asr #10
    3a64:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3a68:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    3a6c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3a70:	0c054b0a 			; <UNDEFINED> instruction: 0x0c054b0a
    3a74:	2e14059f 	cfcmp32cs	r0, mvfx4, mvfx15
    3a78:	05510705 	ldrbeq	r0, [r1, #-1797]	; 0xfffff8fb
    3a7c:	0805670b 	stmdaeq	r5, {r0, r1, r3, r8, r9, sl, sp, lr}
    3a80:	670c059f 			; <UNDEFINED> instruction: 0x670c059f
    3a84:	05a60205 	streq	r0, [r6, #517]!	; 0x205
    3a88:	80032f01 	andhi	r2, r3, r1, lsl #30
    3a8c:	06056604 	streq	r6, [r5], -r4, lsl #12
    3a90:	05052808 	streq	r2, [r5, #-2056]	; 0xfffff7f8
    3a94:	004305ba 	strheq	r0, [r3], #-90	; 0xffffffa6
    3a98:	4a010402 	bmi	44aa8 <ramdisk+0x177d0>
    3a9c:	d6030c05 	strle	r0, [r3], -r5, lsl #24
    3aa0:	08054a00 	stmdaeq	r5, {r9, fp, lr}
    3aa4:	4b0d054b 	blmi	344fd8 <__bss_end+0x297d00>
    3aa8:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    3aac:	04020043 	streq	r0, [r2], #-67	; 0xffffffbd
    3ab0:	03052e04 	movweq	r2, #24068	; 0x5e04
    3ab4:	01040200 	mrseq	r0, R12_usr
    3ab8:	00280566 	eoreq	r0, r8, r6, ror #10
    3abc:	66030402 	strvs	r0, [r3], -r2, lsl #8
    3ac0:	02002f05 	andeq	r2, r0, #5, 30
    3ac4:	05ba0304 	ldreq	r0, [sl, #772]!	; 0x304
    3ac8:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    3acc:	06059e03 	streq	r9, [r5], -r3, lsl #28
    3ad0:	0017054b 	andseq	r0, r7, fp, asr #10
    3ad4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3ad8:	054c0305 	strbeq	r0, [ip, #-773]	; 0xfffffcfb
    3adc:	0a058307 	beq	164700 <__bss_end+0xb7428>
    3ae0:	4a1b0583 	bmi	6c50f4 <__bss_end+0x617e1c>
    3ae4:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    3ae8:	0e052f1b 	mcreq	15, 0, r2, cr5, cr11, {0}
    3aec:	4b070582 	blmi	1c50fc <__bss_end+0x117e24>
    3af0:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
    3af4:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    3af8:	0402004f 	streq	r0, [r2], #-79	; 0xffffffb1
    3afc:	44056602 	strmi	r6, [r5], #-1538	; 0xfffff9fe
    3b00:	02040200 	andeq	r0, r4, #0, 4
    3b04:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
    3b08:	05660603 	strbeq	r0, [r6, #-1539]!	; 0xfffff9fd
    3b0c:	04020024 	streq	r0, [r2], #-36	; 0xffffffdc
    3b10:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
    3b14:	07052f14 	smladeq	r5, r4, pc, r2	; <UNPREDICTABLE>
    3b18:	003a0566 	eorseq	r0, sl, r6, ror #10
    3b1c:	66020402 	strvs	r0, [r2], -r2, lsl #8
    3b20:	02002b05 	andeq	r2, r0, #5120	; 0x1400
    3b24:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    3b28:	0402005f 	streq	r0, [r2], #-95	; 0xffffffa1
    3b2c:	07056603 	streq	r6, [r5, -r3, lsl #12]
    3b30:	00040583 	andeq	r0, r4, r3, lsl #11
    3b34:	68020402 	stmdavs	r2, {r1, sl}
    3b38:	02040200 	andeq	r0, r4, #0, 4
    3b3c:	0007059f 	muleq	r7, pc, r5	; <UNPREDICTABLE>
    3b40:	9f020402 	svcls	0x00020402
    3b44:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
    3b48:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3b4c:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    3b50:	09054c02 	stmdbeq	r5, {r1, sl, fp, lr}
    3b54:	02040200 	andeq	r0, r4, #0, 4
    3b58:	000705ba 			; <UNDEFINED> instruction: 0x000705ba
    3b5c:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    3b60:	02001c05 	andeq	r1, r0, #1280	; 0x500
    3b64:	059f0204 	ldreq	r0, [pc, #516]	; 3d70 <_start-0xc290>
    3b68:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    3b6c:	0705ba02 	streq	fp, [r5, -r2, lsl #20]
    3b70:	02040200 	andeq	r0, r4, #0, 4
    3b74:	001c059e 	mulseq	ip, lr, r5
    3b78:	2f020402 	svccs	0x00020402
    3b7c:	02000905 	andeq	r0, r0, #81920	; 0x14000
    3b80:	05ba0204 	ldreq	r0, [sl, #516]!	; 0x204
    3b84:	04020007 	streq	r0, [r2], #-7
    3b88:	02002e02 	andeq	r2, r0, #2, 28
    3b8c:	054b0204 	strbeq	r0, [fp, #-516]	; 0xfffffdfc
    3b90:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
    3b94:	20054a02 	andcs	r4, r5, r2, lsl #20
    3b98:	02040200 	andeq	r0, r4, #0, 4
    3b9c:	0025054b 	eoreq	r0, r5, fp, asr #10
    3ba0:	4a020402 	bmi	84bb0 <ramdisk+0x578d8>
    3ba4:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    3ba8:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    3bac:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
    3bb0:	13054a02 	movwne	r4, #23042	; 0x5a02
    3bb4:	02040200 	andeq	r0, r4, #0, 4
    3bb8:	00070566 	andeq	r0, r7, r6, ror #10
    3bbc:	2f020402 	svccs	0x00020402
    3bc0:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    3bc4:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3bc8:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    3bcc:	1d054a02 	vstrne	s8, [r5, #-8]
    3bd0:	02040200 	andeq	r0, r4, #0, 4
    3bd4:	00290530 	eoreq	r0, r9, r0, lsr r5
    3bd8:	66020402 	strvs	r0, [r2], -r2, lsl #8
    3bdc:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
    3be0:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
    3be4:	04020009 	streq	r0, [r2], #-9
    3be8:	0705ba02 	streq	fp, [r5, -r2, lsl #20]
    3bec:	02040200 	andeq	r0, r4, #0, 4
    3bf0:	001d052e 	andseq	r0, sp, lr, lsr #10
    3bf4:	9f020402 	svcls	0x00020402
    3bf8:	02002905 	andeq	r2, r0, #81920	; 0x14000
    3bfc:	05660204 	strbeq	r0, [r6, #-516]!	; 0xfffffdfc
    3c00:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
    3c04:	35052e02 	strcc	r2, [r5, #-3586]	; 0xfffff1fe
    3c08:	02040200 	andeq	r0, r4, #0, 4
    3c0c:	000705ba 			; <UNDEFINED> instruction: 0x000705ba
    3c10:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    3c14:	02001d05 	andeq	r1, r0, #320	; 0x140
    3c18:	052f0204 	streq	r0, [pc, #-516]!	; 3a1c <_start-0xc5e4>
    3c1c:	04020029 	streq	r0, [r2], #-41	; 0xffffffd7
    3c20:	2e056602 	cfmadd32cs	mvax0, mvfx6, mvfx5, mvfx2
    3c24:	02040200 	andeq	r0, r4, #0, 4
    3c28:	0009052e 	andeq	r0, r9, lr, lsr #10
    3c2c:	9e020402 	cdpls	4, 0, cr0, cr2, cr2, {0}
    3c30:	02000705 	andeq	r0, r0, #1310720	; 0x140000
    3c34:	002e0204 	eoreq	r0, lr, r4, lsl #4
    3c38:	4b020402 	blmi	84c48 <ramdisk+0x57970>
    3c3c:	02001405 	andeq	r1, r0, #83886080	; 0x5000000
    3c40:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3c44:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    3c48:	25054b02 	strcs	r4, [r5, #-2818]	; 0xfffff4fe
    3c4c:	02040200 	andeq	r0, r4, #0, 4
    3c50:	0007054a 	andeq	r0, r7, sl, asr #10
    3c54:	66020402 	strvs	r0, [r2], -r2, lsl #8
    3c58:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    3c5c:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3c60:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    3c64:	07056602 	streq	r6, [r5, -r2, lsl #12]
    3c68:	02040200 	andeq	r0, r4, #0, 4
    3c6c:	0015052f 	andseq	r0, r5, pc, lsr #10
    3c70:	4a020402 	bmi	84c80 <ramdisk+0x579a8>
    3c74:	02001305 	andeq	r1, r0, #335544320	; 0x14000000
    3c78:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
    3c7c:	04020008 	streq	r0, [r2], #-8
    3c80:	59053002 	stmdbpl	r5, {r1, ip, sp}
    3c84:	02040200 	andeq	r0, r4, #0, 4
    3c88:	05666803 	strbeq	r6, [r6, #-2051]!	; 0xfffff7fd
    3c8c:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
    3c90:	03056602 	movweq	r6, #22018	; 0x5602
    3c94:	01040200 	mrseq	r0, R12_usr
    3c98:	00290582 	eoreq	r0, r9, r2, lsl #11
    3c9c:	66030402 	strvs	r0, [r3], -r2, lsl #8
    3ca0:	02003d05 	andeq	r3, r0, #320	; 0x140
    3ca4:	05660404 	strbeq	r0, [r6, #-1028]!	; 0xfffffbfc
    3ca8:	0305a204 	movweq	sl, #20996	; 0x5204
    3cac:	052e1703 	streq	r1, [lr, #-1795]!	; 0xfffff8fd
    3cb0:	0605bb07 	streq	fp, [r5], -r7, lsl #22
    3cb4:	003405ba 	ldrhteq	r0, [r4], -sl
    3cb8:	4a010402 	bmi	44cc8 <ramdisk+0x179f0>
    3cbc:	054d0905 	strbeq	r0, [sp, #-2309]	; 0xfffff6fb
    3cc0:	04020001 	streq	r0, [r2], #-1
    3cc4:	0a032f01 	beq	cf8d0 <__bss_end+0x225f8>
    3cc8:	0308059e 	movweq	r0, #34206	; 0x859e
    3ccc:	0505d613 	streq	sp, [r5, #-1555]	; 0xfffff9ed
    3cd0:	00160583 	andseq	r0, r6, r3, lsl #11
    3cd4:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3cd8:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    3cdc:	17056605 	strne	r6, [r5, -r5, lsl #12]
    3ce0:	01040200 	mrseq	r0, R12_usr
    3ce4:	0026054a 	eoreq	r0, r6, sl, asr #10
    3ce8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3cec:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    3cf0:	07054b08 	streq	r4, [r5, -r8, lsl #22]
    3cf4:	9f09054d 	svcls	0x0009054d
    3cf8:	054a0505 	strbeq	r0, [sl, #-1285]	; 0xfffffafb
    3cfc:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    3d00:	09054a01 	stmdbeq	r5, {r0, r9, fp, lr}
    3d04:	4a05054b 	bmi	145238 <__bss_end+0x97f60>
    3d08:	02001f05 	andeq	r1, r0, #5, 30
    3d0c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3d10:	10054d05 	andne	r4, r5, r5, lsl #26
    3d14:	01040200 	mrseq	r0, R12_usr
    3d18:	4b0e0566 	blmi	3852b8 <__bss_end+0x2d7fe0>
    3d1c:	054a0905 	strbeq	r0, [sl, #-2309]	; 0xfffff6fb
    3d20:	05052f0d 	streq	r2, [r5, #-3853]	; 0xfffff0f3
    3d24:	0013052e 	andseq	r0, r3, lr, lsr #10
    3d28:	4a010402 	bmi	44d38 <ramdisk+0x17a60>
    3d2c:	059f0e05 	ldreq	r0, [pc, #3589]	; 4b39 <_start-0xb4c7>
    3d30:	1d052e06 	stcne	14, cr2, [r5, #-24]	; 0xffffffe8
    3d34:	02040200 	andeq	r0, r4, #0, 4
    3d38:	0013054a 	andseq	r0, r3, sl, asr #10
    3d3c:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
    3d40:	02003b05 	andeq	r3, r0, #5120	; 0x1400
    3d44:	054a0404 	strbeq	r0, [sl, #-1028]	; 0xfffffbfc
    3d48:	04020031 	streq	r0, [r2], #-49	; 0xffffffcf
    3d4c:	26054a04 	strcs	r4, [r5], -r4, lsl #20
    3d50:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    3d54:	0049054a 	subeq	r0, r9, sl, asr #10
    3d58:	4a050402 	bmi	144d68 <__bss_end+0x97a90>
    3d5c:	054f0505 	strbeq	r0, [pc, #-1285]	; 385f <_start-0xc7a1>
    3d60:	08054e0d 	stmdaeq	r5, {r0, r2, r3, r9, sl, fp, lr}
    3d64:	4b0e054a 	blmi	385294 <__bss_end+0x2d7fbc>
    3d68:	054a3c05 	strbeq	r3, [sl, #-3077]	; 0xfffff3fb
    3d6c:	04020021 	streq	r0, [r2], #-33	; 0xffffffdf
    3d70:	1b054a01 	blne	15657c <__bss_end+0xa92a4>
    3d74:	01040200 	mrseq	r0, R12_usr
    3d78:	0034054a 	eorseq	r0, r4, sl, asr #10
    3d7c:	4a030402 	bmi	c4d8c <__bss_end+0x17ab4>
    3d80:	02003c05 	andeq	r3, r0, #1280	; 0x500
    3d84:	004a0304 	subeq	r0, sl, r4, lsl #6
    3d88:	06040402 	streq	r0, [r4], -r2, lsl #8
    3d8c:	0008052e 	andeq	r0, r8, lr, lsr #10
    3d90:	06060402 	streq	r0, [r6], -r2, lsl #8
    3d94:	000f052e 	andeq	r0, pc, lr, lsr #10
    3d98:	2f060402 	svccs	0x00060402
    3d9c:	02006a05 	andeq	r6, r0, #20480	; 0x5000
    3da0:	054a0604 	strbeq	r0, [sl, #-1540]	; 0xfffff9fc
    3da4:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    3da8:	1d054a01 	vstrne	s8, [r5, #-4]
    3dac:	01040200 	mrseq	r0, R12_usr
    3db0:	003c054a 	eorseq	r0, ip, sl, asr #10
    3db4:	4a030402 	bmi	c4dc4 <__bss_end+0x17aec>
    3db8:	02004b05 	andeq	r4, r0, #5120	; 0x1400
    3dbc:	054a0304 	strbeq	r0, [sl, #-772]	; 0xfffffcfc
    3dc0:	04020045 	streq	r0, [r2], #-69	; 0xffffffbb
    3dc4:	35056603 	strcc	r6, [r5, #-1539]	; 0xfffff9fd
    3dc8:	03040200 	movweq	r0, #16896	; 0x4200
    3dcc:	006a0582 	rsbeq	r0, sl, r2, lsl #11
    3dd0:	4a050402 	bmi	144de0 <__bss_end+0x97b08>
    3dd4:	06040200 	streq	r0, [r4], -r0, lsl #4
    3dd8:	09056606 	stmdbeq	r5, {r1, r2, r9, sl, sp, lr}
    3ddc:	08040200 	stmdaeq	r4, {r9}
    3de0:	0e052e06 	cdpeq	14, 0, cr2, cr5, cr6, {0}
    3de4:	08040200 	stmdaeq	r4, {r9}
    3de8:	0061052f 	rsbeq	r0, r1, pc, lsr #10
    3dec:	4a080402 	bmi	204dfc <__bss_end+0x157b24>
    3df0:	02002c05 	andeq	r2, r0, #1280	; 0x500
    3df4:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3df8:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
    3dfc:	46054a01 	strmi	r4, [r5], -r1, lsl #20
    3e00:	01040200 	mrseq	r0, R12_usr
    3e04:	0036054a 	eorseq	r0, r6, sl, asr #10
    3e08:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    3e0c:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
    3e10:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
    3e14:	04020061 	streq	r0, [r2], #-97	; 0xffffff9f
    3e18:	02004a03 	andeq	r4, r0, #12288	; 0x3000
    3e1c:	66060404 	strvs	r0, [r6], -r4, lsl #8
    3e20:	02000805 	andeq	r0, r0, #327680	; 0x50000
    3e24:	2e060604 	cfmadd32cs	mvax0, mvfx0, mvfx6, mvfx4
    3e28:	06040200 	streq	r0, [r4], -r0, lsl #4
    3e2c:	000f052f 	andeq	r0, pc, pc, lsr #10
    3e30:	bd060402 	cfstrslt	mvf0, [r6, #-8]
    3e34:	02000905 	andeq	r0, r0, #81920	; 0x14000
    3e38:	052e0604 	streq	r0, [lr, #-1540]!	; 0xfffff9fc
    3e3c:	04020005 	streq	r0, [r2], #-5
    3e40:	1a059f06 	bne	16ba60 <__bss_end+0xbe788>
    3e44:	01040200 	mrseq	r0, R12_usr
    3e48:	4b060566 	blmi	1853e8 <__bss_end+0xd8110>
    3e4c:	054e0505 	strbeq	r0, [lr, #-1285]	; 0xfffffafb
    3e50:	04020013 	streq	r0, [r2], #-19	; 0xffffffed
    3e54:	11056601 	tstne	r5, r1, lsl #12
    3e58:	4a08054d 	bmi	205394 <__bss_end+0x1580bc>
    3e5c:	24030705 	strcs	r0, [r3], #-1797	; 0xfffff8fb
    3e60:	ba06054a 	blt	185390 <__bss_end+0xd80b8>
    3e64:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
    3e68:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3e6c:	06054b0f 	streq	r4, [r5], -pc, lsl #22
    3e70:	0310054a 	tsteq	r0, #310378496	; 0x12800000
    3e74:	08054a09 	stmdaeq	r5, {r0, r3, r9, fp, lr}
    3e78:	4b0c052e 	blmi	305338 <__bss_end+0x258060>
    3e7c:	054a2205 	strbeq	r2, [sl, #-517]	; 0xfffffdfb
    3e80:	0505870d 	streq	r8, [r5, #-1805]	; 0xfffff8f3
    3e84:	0014052e 	andseq	r0, r4, lr, lsr #10
    3e88:	4a010402 	bmi	44e98 <ramdisk+0x17bc0>
    3e8c:	0d030605 	stceq	6, cr0, [r3, #-20]	; 0xffffffec
    3e90:	001a054a 	andseq	r0, sl, sl, asr #10
    3e94:	66010402 	strvs	r0, [r1], -r2, lsl #8
    3e98:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    3e9c:	10054a06 	andne	r4, r5, r6, lsl #20
    3ea0:	4a07054b 	bmi	1c53d4 <__bss_end+0x1180fc>
    3ea4:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
    3ea8:	0f054a05 	svceq	0x00054a05
    3eac:	4a060531 	bmi	185378 <__bss_end+0xd80a0>
    3eb0:	02001a05 	andeq	r1, r0, #20480	; 0x5000
    3eb4:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    3eb8:	054d4b08 	strbeq	r4, [sp, #-2824]	; 0xfffff4f8
    3ebc:	08052e06 	stmdaeq	r5, {r1, r2, r9, sl, fp, sp}
    3ec0:	6601a603 	strvs	sl, [r1], -r3, lsl #12
    3ec4:	054c0705 	strbeq	r0, [ip, #-1797]	; 0xfffff8fb
    3ec8:	0a056708 	beq	15daf0 <__bss_end+0xb0818>
    3ecc:	2e080567 	cfsh32cs	mvfx0, mvfx8, #55
    3ed0:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    3ed4:	06054a16 			; <UNDEFINED> instruction: 0x06054a16
    3ed8:	0037054a 	eorseq	r0, r7, sl, asr #10
    3edc:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
    3ee0:	02003f05 	andeq	r3, r0, #5, 30
    3ee4:	05660404 	strbeq	r0, [r6, #-1028]!	; 0xfffffbfc
    3ee8:	04020020 	streq	r0, [r2], #-32	; 0xffffffe0
    3eec:	06056601 	streq	r6, [r5], -r1, lsl #12
    3ef0:	01040200 	mrseq	r0, R12_usr
    3ef4:	002c059e 	mlaeq	ip, lr, r5, r0
    3ef8:	4a030402 	bmi	c4f08 <__bss_end+0x17c30>
    3efc:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
    3f00:	05ba0304 	ldreq	r0, [sl, #772]!	; 0x304
    3f04:	0c05680e 	stceq	8, cr6, [r5], {14}
    3f08:	9f1a052e 	svcls	0x001a052e
    3f0c:	05661e05 	strbeq	r1, [r6, #-3589]!	; 0xfffff1fb
    3f10:	28054a23 	stmdacs	r5, {r0, r1, r5, r9, fp, lr}
    3f14:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
    3f18:	08054b9f 	stmdaeq	r5, {r0, r1, r2, r3, r4, r7, r8, r9, fp, lr}
    3f1c:	001d054b 	andseq	r0, sp, fp, asr #10
    3f20:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
    3f24:	02003405 	andeq	r3, r0, #83886080	; 0x5000000
    3f28:	05660304 	strbeq	r0, [r6, #-772]!	; 0xfffffcfc
    3f2c:	0a054c08 	beq	156f54 <__bss_end+0xa9c7c>
    3f30:	2e080567 	cfsh32cs	mvfx0, mvfx8, #55
    3f34:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    3f38:	06054a16 			; <UNDEFINED> instruction: 0x06054a16
    3f3c:	0033054a 	eorseq	r0, r3, sl, asr #10
    3f40:	2e040402 	cdpcs	4, 0, cr0, cr4, cr2, {0}
    3f44:	02003b05 	andeq	r3, r0, #5120	; 0x1400
    3f48:	05660404 	strbeq	r0, [r6, #-1028]!	; 0xfffffbfc
    3f4c:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
    3f50:	06056601 	streq	r6, [r5], -r1, lsl #12
    3f54:	01040200 	mrseq	r0, R12_usr
    3f58:	0028059e 	mlaeq	r8, lr, r5, r0
    3f5c:	4a030402 	bmi	c4f6c <__bss_end+0x17c94>
    3f60:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
    3f64:	05ba0304 	ldreq	r0, [sl, #772]!	; 0x304
    3f68:	0c05680e 	stceq	8, cr6, [r5], {14}
    3f6c:	9f08052e 	svcls	0x0008052e
    3f70:	05831505 	streq	r1, [r3, #1285]	; 0x505
    3f74:	0b054a08 	bleq	15679c <__bss_end+0xa94c4>
    3f78:	4b120568 	blmi	485520 <__bss_end+0x3d8248>
    3f7c:	05821605 	streq	r1, [r2, #1541]	; 0x605
    3f80:	08052e1b 	stmdaeq	r5, {r0, r1, r3, r4, r9, sl, fp, sp}
    3f84:	4c11052e 	cfldr32mi	mvfx0, [r1], {46}	; 0x2e
    3f88:	05661605 	strbeq	r1, [r6, #-1541]!	; 0xfffff9fb
    3f8c:	0c052e1b 	stceq	14, cr2, [r5], {27}
    3f90:	1c059f2e 	stcne	15, cr9, [r5], {46}	; 0x2e
    3f94:	4a25054b 	bmi	9454c8 <__bss_end+0x8981f0>
    3f98:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
    3f9c:	1c05a00a 	stcne	0, cr10, [r5], {10}
    3fa0:	66130583 	ldrvs	r0, [r3], -r3, lsl #11
    3fa4:	054a0b05 	strbeq	r0, [sl, #-2821]	; 0xfffff4fb
    3fa8:	22056919 	andcs	r6, r5, #409600	; 0x64000
    3fac:	2e290566 	cfsh64cs	mvdx0, mvdx9, #54
    3fb0:	054a2705 	strbeq	r2, [sl, #-1797]	; 0xfffff8fb
    3fb4:	07052e06 	streq	r2, [r5, -r6, lsl #28]
    3fb8:	670c0567 	strvs	r0, [ip, -r7, ror #10]
    3fbc:	05821805 	streq	r1, [r2, #2053]	; 0x805
    3fc0:	0805a00b 	stmdaeq	r5, {r0, r1, r3, sp, pc}
    3fc4:	4b07059e 	blmi	1c5644 <__bss_end+0x11836c>
    3fc8:	05661105 	strbeq	r1, [r6, #-261]!	; 0xfffffefb
    3fcc:	1105661a 	tstne	r5, sl, lsl r6
    3fd0:	9e0c0568 	cfsh32ls	mvfx0, mvfx12, #56
    3fd4:	056a1e05 	strbeq	r1, [sl, #-3589]!	; 0xfffff1fb
    3fd8:	23054a18 	movwcs	r4, #23064	; 0x5a18
    3fdc:	4a0f054a 	bmi	3c550c <__bss_end+0x318234>
    3fe0:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
    3fe4:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
    3fe8:	0e054a01 	vmlaeq.f32	s8, s10, s2
    3fec:	2e1c054b 	cfmac32cs	mvfx0, mvfx12, mvfx11
    3ff0:	054a2e05 	strbeq	r2, [sl, #-3589]	; 0xfffff1fb
    3ff4:	36056625 	strcc	r6, [r5], -r5, lsr #12
    3ff8:	4a0b052e 	bmi	2c54b8 <__bss_end+0x2181e0>
    3ffc:	059f0705 	ldreq	r0, [pc, #1797]	; 4709 <_start-0xb8f7>
    4000:	09056708 	stmdbeq	r5, {r3, r8, r9, sl, sp, lr}
    4004:	001f0583 	andseq	r0, pc, r3, lsl #11
    4008:	66010402 	strvs	r0, [r1], -r2, lsl #8
    400c:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    4010:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    4014:	07056706 	streq	r6, [r5, -r6, lsl #14]
    4018:	6708054d 	strvs	r0, [r8, -sp, asr #10]
    401c:	05830905 	streq	r0, [r3, #2309]	; 0x905
    4020:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
    4024:	15056601 	strne	r6, [r5, #-1537]	; 0xfffff9ff
    4028:	01040200 	mrseq	r0, R12_usr
    402c:	4b0d054a 	blmi	34555c <__bss_end+0x298284>
    4030:	05660705 	strbeq	r0, [r6, #-1797]!	; 0xfffff8fb
    4034:	09053011 	stmdbeq	r5, {r0, r4, ip, sp}
    4038:	4b0c054a 	blmi	305568 <__bss_end+0x258290>
    403c:	054a0705 	strbeq	r0, [sl, #-1797]	; 0xfffff8fb
    4040:	1f053009 	svcne	0x00053009
    4044:	01040200 	mrseq	r0, R12_usr
    4048:	00150566 	andseq	r0, r5, r6, ror #10
    404c:	66010402 	strvs	r0, [r1], -r2, lsl #8
    4050:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
    4054:	05834c09 	streq	r4, [r3, #3081]	; 0xc09
    4058:	0402001f 	streq	r0, [r2], #-31	; 0xffffffe1
    405c:	15056601 	strne	r6, [r5, #-1537]	; 0xfffff9ff
    4060:	01040200 	mrseq	r0, R12_usr
    4064:	67060566 	strvs	r0, [r6, -r6, ror #10]
    4068:	054d0705 	strbeq	r0, [sp, #-1797]	; 0xfffff8fb
    406c:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
    4070:	30056601 	andcc	r6, r5, r1, lsl #12
    4074:	02040200 	andeq	r0, r4, #0, 4
    4078:	03060582 	movweq	r0, #25986	; 0x6582
    407c:	0c034a6c 			; <UNDEFINED> instruction: 0x0c034a6c
    4080:	08054e4a 	stmdaeq	r5, {r1, r3, r6, r9, sl, fp, lr}
    4084:	052e4103 	streq	r4, [lr, #-259]!	; 0xfffffefd
    4088:	00c60304 	sbceq	r0, r6, r4, lsl #6
    408c:	3603052e 	strcc	r0, [r3], -lr, lsr #10
    4090:	0605839f 			; <UNDEFINED> instruction: 0x0605839f
    4094:	4a1905bb 	bmi	645788 <__bss_end+0x5984b0>
    4098:	054a1705 	strbeq	r1, [sl, #-1797]	; 0xfffff8fb
    409c:	06052f03 	streq	r2, [r5], -r3, lsl #30
    40a0:	4a1605d7 	bmi	585804 <__bss_end+0x4d852c>
    40a4:	054a1405 	strbeq	r1, [sl, #-1029]	; 0xfffffbfb
    40a8:	02002f03 	andeq	r2, r0, #3, 30
    40ac:	9e060104 	adflss	f0, f6, f4
    40b0:	02040200 	andeq	r0, r4, #0, 4
    40b4:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
    40b8:	0e052e04 	cdpeq	14, 0, cr2, cr5, cr4, {0}
    40bc:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    40c0:	06056706 	streq	r6, [r5], -r6, lsl #14
    40c4:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    40c8:	4b04052e 	blmi	105588 <__bss_end+0x582b0>
    40cc:	bc0605f4 	cfstr32lt	mvfx0, [r6], {244}	; 0xf4
    40d0:	054a1205 	strbeq	r1, [sl, #-517]	; 0xfffffdfb
    40d4:	9f9f4b03 	svcls	0x009f4b03
    40d8:	059f0605 	ldreq	r0, [pc, #1541]	; 46e5 <_start-0xb91b>
    40dc:	9f9f6704 	svcls	0x009f6704
    40e0:	07059f9f 			; <UNDEFINED> instruction: 0x07059f9f
    40e4:	4a15059f 	bmi	545768 <__bss_end+0x498490>
    40e8:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    40ec:	0f054a16 	svceq	0x00054a16
    40f0:	4a04054b 	bmi	105624 <__bss_end+0x5834c>
    40f4:	07059fa0 	streq	r9, [r5, -r0, lsr #31]
    40f8:	4a1305d7 	bmi	4c585c <__bss_end+0x418584>
    40fc:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
    4100:	0f054a14 	svceq	0x00054a14
    4104:	4a04054b 	bmi	105638 <__bss_end+0x58360>
    4108:	05840305 	streq	r0, [r4, #773]	; 0x305
    410c:	0605bb07 	streq	fp, [r5], -r7, lsl #22
    4110:	003205ba 	ldrhteq	r0, [r2], -sl
    4114:	4a010402 	bmi	45124 <ramdisk+0x17e4c>
    4118:	054d0605 	strbeq	r0, [sp, #-1541]	; 0xfffff9fb
    411c:	9fbb6704 	svcls	0x00bb6704
    4120:	9fd79f67 	svcls	0x00d79f67
    4124:	0305bbbb 	movweq	fp, #23483	; 0x5bbb
    4128:	2e1905be 	cfcmp64cs	r0, mvdx9, mvdx14
    412c:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
    4130:	0a058308 	beq	164d58 <__bss_end+0xb7a80>
    4134:	4a03054b 	bmi	c5668 <__bss_end+0x18390>
    4138:	052f0705 	streq	r0, [pc, #-1797]!	; 3a3b <_start-0xc5c5>
    413c:	9f676705 	svcls	0x00676705
    4140:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
    4144:	00660601 	rsbeq	r0, r6, r1, lsl #12
    4148:	4a020402 	bmi	85158 <ramdisk+0x57e80>
    414c:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
    4150:	060a052e 	streq	r0, [sl], -lr, lsr #10
    4154:	4c070568 	cfstr32mi	mvfx0, [r7], {104}	; 0x68
    4158:	05bb0905 	ldreq	r0, [fp, #2309]!	; 0x905
    415c:	3905ba08 	stmdbcc	r5, {r3, r9, fp, ip, sp, pc}
    4160:	01040200 	mrseq	r0, R12_usr
    4164:	4b05054a 	blmi	145694 <__bss_end+0x983bc>
    4168:	059f0a05 	ldreq	r0, [pc, #2565]	; 4b75 <_start-0xb48b>
    416c:	04058216 	streq	r8, [r5], #-534	; 0xfffffdea
    4170:	001b0583 	andseq	r0, fp, r3, lsl #11
    4174:	03020402 	movweq	r0, #9218	; 0x2402
    4178:	03056672 	movweq	r6, #22130	; 0x5672
    417c:	01040200 	mrseq	r0, R12_usr
    4180:	03240566 			; <UNDEFINED> instruction: 0x03240566
    4184:	02008212 	andeq	r8, r0, #536870913	; 0x20000001
    4188:	66060104 	strvs	r0, [r6], -r4, lsl #2
    418c:	02040200 	andeq	r0, r4, #0, 4
    4190:	0009054a 	andeq	r0, r9, sl, asr #10
    4194:	06040402 	streq	r0, [r4], -r2, lsl #8
    4198:	3006052e 	andcc	r0, r6, lr, lsr #10
    419c:	05bb0805 	ldreq	r0, [fp, #2053]!	; 0x805
    41a0:	3805ba07 	stmdacc	r5, {r0, r1, r2, r9, fp, ip, sp, pc}
    41a4:	01040200 	mrseq	r0, R12_usr
    41a8:	4b09054a 	blmi	2456d8 <__bss_end+0x198400>
    41ac:	05821505 	streq	r1, [r2, #1285]	; 0x505
    41b0:	0c058303 	stceq	3, cr8, [r5], {3}
    41b4:	6707056e 	strvs	r0, [r7, -lr, ror #10]
    41b8:	05671405 	strbeq	r1, [r7, #-1029]!	; 0xfffffbfb
    41bc:	07052e0c 	streq	r2, [r5, -ip, lsl #28]
    41c0:	670c054b 	strvs	r0, [ip, -fp, asr #10]
    41c4:	68670705 	stmdavs	r7!, {r0, r2, r8, r9, sl}^
    41c8:	0c030f05 	stceq	15, cr0, [r3], {5}
    41cc:	4a06054a 	bmi	1856fc <__bss_end+0xd8424>
    41d0:	054b0b05 	strbeq	r0, [fp, #-2821]	; 0xfffff4fb
    41d4:	0a054a1c 	beq	156a4c <__bss_end+0xa9774>
    41d8:	d707054b 	strle	r0, [r7, -fp, asr #10]
    41dc:	02001605 	andeq	r1, r0, #5242880	; 0x500000
    41e0:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    41e4:	05054e06 	streq	r4, [r5, #-3590]	; 0xfffff1fa
    41e8:	003005ba 	ldrhteq	r0, [r0], -sl
    41ec:	4a010402 	bmi	451fc <ramdisk+0x17f24>
    41f0:	054c0205 	strbeq	r0, [ip, #-517]	; 0xfffffdfb
    41f4:	04020001 	streq	r0, [r2], #-1
    41f8:	20022f01 	andcs	r2, r2, r1, lsl #30
    41fc:	ab010100 	blge	44604 <ramdisk+0x1732c>
    4200:	03000001 	movweq	r0, #1
    4204:	0000aa00 	andeq	sl, r0, r0, lsl #20
    4208:	fb010200 	blx	44a12 <ramdisk+0x1773a>
    420c:	01000d0e 	tsteq	r0, lr, lsl #26
    4210:	00010101 	andeq	r0, r1, r1, lsl #2
    4214:	00010000 	andeq	r0, r1, r0
    4218:	682f0100 	stmdavs	pc!, {r8}	; <UNPREDICTABLE>
    421c:	2f656d6f 	svccs	0x00656d6f
    4220:	616e756c 	cmnvs	lr, ip, ror #10
    4224:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
    4228:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
    422c:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
    4230:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
    4234:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    4238:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    423c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    4240:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    4244:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    4248:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    424c:	61462f53 	cmpvs	r6, r3, asr pc
    4250:	2f534674 	svccs	0x00534674
    4254:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    4258:	2f006563 	svccs	0x00006563
    425c:	2f727375 	svccs	0x00727375
    4260:	2f62696c 	svccs	0x0062696c
    4264:	2f636367 	svccs	0x00636367
    4268:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    426c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4270:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4274:	30312f69 	eorscc	r2, r1, r9, ror #30
    4278:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    427c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4280:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4284:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
    4288:	6f696b73 	svcvs	0x00696b73
    428c:	0100632e 	tsteq	r0, lr, lsr #6
    4290:	74730000 	ldrbtvc	r0, [r3], #-0
    4294:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
    4298:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    429c:	66660000 	strbtvs	r0, [r6], -r0
    42a0:	0100682e 	tsteq	r0, lr, lsr #16
    42a4:	69640000 	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
    42a8:	6f696b73 	svcvs	0x00696b73
    42ac:	0100682e 	tsteq	r0, lr, lsr #16
    42b0:	05000000 	streq	r0, [r0, #-0]
    42b4:	02050020 	andeq	r0, r5, #32
    42b8:	0002ae64 	andeq	sl, r2, r4, ror #28
    42bc:	05012003 	streq	r2, [r1, #-3]
    42c0:	21059f08 	tstcs	r5, r8, lsl #30
    42c4:	01040200 	mrseq	r0, R12_usr
    42c8:	4b0c0566 	blmi	305868 <__bss_end+0x258590>
    42cc:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
    42d0:	0805a424 	stmdaeq	r5, {r2, r5, sl, sp, pc}
    42d4:	0021059f 	mlaeq	r1, pc, r5, r0	; <UNPREDICTABLE>
    42d8:	66010402 	strvs	r0, [r1], -r2, lsl #8
    42dc:	054d0505 	strbeq	r0, [sp, #-1285]	; 0xfffffafb
    42e0:	0c05850a 	cfstr32eq	mvfx8, [r5], {10}
    42e4:	4b010568 	blmi	4588c <ramdisk+0x185b4>
    42e8:	05a44405 	streq	r4, [r4, #1029]!	; 0x405
    42ec:	2105f308 	tstcs	r5, r8, lsl #6	; <UNPREDICTABLE>
    42f0:	01040200 	mrseq	r0, R12_usr
    42f4:	4b0e0566 	blmi	385894 <__bss_end+0x2d85bc>
    42f8:	05660805 	strbeq	r0, [r6, #-2053]!	; 0xfffff7fb
    42fc:	04020023 	streq	r0, [r2], #-35	; 0xffffffdd
    4300:	08054a01 	stmdaeq	r5, {r0, r9, fp, lr}
    4304:	002a054b 	eoreq	r0, sl, fp, asr #10
    4308:	66010402 	strvs	r0, [r1], -r2, lsl #8
    430c:	02002005 	andeq	r2, r0, #5
    4310:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    4314:	23054b10 	movwcs	r4, #23312	; 0x5b10
    4318:	4a05054e 	bmi	145858 <__bss_end+0x98580>
    431c:	05d80c05 	ldrbeq	r0, [r8, #3077]	; 0xc05
    4320:	4b052f01 	blmi	14ff2c <__bss_end+0xa2c54>
    4324:	f30805a4 	vrshl.u8	d0, d20, d24
    4328:	02002105 	andeq	r2, r0, #1073741825	; 0x40000001
    432c:	05660104 	strbeq	r0, [r6, #-260]!	; 0xfffffefc
    4330:	08054b0e 	stmdaeq	r5, {r1, r2, r3, r8, r9, fp, lr}
    4334:	00230566 	eoreq	r0, r3, r6, ror #10
    4338:	4a010402 	bmi	45348 <ramdisk+0x18070>
    433c:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
    4340:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
    4344:	20056601 	andcs	r6, r5, r1, lsl #12
    4348:	01040200 	mrseq	r0, R12_usr
    434c:	4b100566 	blmi	4058ec <__bss_end+0x358614>
    4350:	054e1d05 	strbeq	r1, [lr, #-3333]	; 0xfffff2fb
    4354:	0c054a05 			; <UNDEFINED> instruction: 0x0c054a05
    4358:	2f0105d8 	svccs	0x000105d8
    435c:	05a43505 	streq	r3, [r4, #1285]!	; 0x505
    4360:	0805f30d 	stmdaeq	r5, {r0, r2, r3, r8, r9, ip, sp, lr, pc}
    4364:	0021054c 	eoreq	r0, r1, ip, asr #10
    4368:	66010402 	strvs	r0, [r1], -r2, lsl #8
    436c:	054b0e05 	strbeq	r0, [fp, #-3589]	; 0xfffff1fb
    4370:	23056608 	movwcs	r6, #22024	; 0x5608
    4374:	01040200 	mrseq	r0, R12_usr
    4378:	4c05054a 	cfstr32mi	mvfx0, [r5], {74}	; 0x4a
    437c:	05f41105 	ldrbeq	r1, [r4, #261]!	; 0x105
    4380:	1b054b0d 	blne	156fbc <__bss_end+0xa9ce4>
    4384:	67110531 			; <UNDEFINED> instruction: 0x67110531
    4388:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    438c:	1105311a 	tstne	r5, sl, lsl r1
    4390:	4b0d0567 	blmi	345934 <__bss_end+0x29865c>
    4394:	05311b05 	ldreq	r1, [r1, #-2821]!	; 0xfffff4fb
    4398:	0d056711 	stceq	7, cr6, [r5, #-68]	; 0xffffffbc
    439c:	3111054b 	tstcc	r1, fp, asr #10
    43a0:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
    43a4:	0105310c 	tsteq	r5, ip, lsl #2
    43a8:	000a022f 	andeq	r0, sl, pc, lsr #4
    43ac:	00bb0101 	adcseq	r0, fp, r1, lsl #2
    43b0:	00030000 	andeq	r0, r3, r0
    43b4:	000000a0 	andeq	r0, r0, r0, lsr #1
    43b8:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    43bc:	0101000d 	tsteq	r1, sp
    43c0:	00000101 	andeq	r0, r0, r1, lsl #2
    43c4:	00000100 	andeq	r0, r0, r0, lsl #2
    43c8:	6f682f01 	svcvs	0x00682f01
    43cc:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 4220 <_start-0xbde0>
    43d0:	63616e75 	cmnvs	r1, #1872	; 0x750
    43d4:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    43d8:	63726178 	cmnvs	r2, #120, 2
    43dc:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    43e0:	61522f63 	cmpvs	r2, r3, ror #30
    43e4:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    43e8:	50797272 	rsbspl	r7, r9, r2, ror r2
    43ec:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    43f0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    43f4:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    43f8:	53467461 	movtpl	r7, #25697	; 0x6461
    43fc:	7461462f 	strbtvc	r4, [r1], #-1583	; 0xfffff9d1
    4400:	532f5346 			; <UNDEFINED> instruction: 0x532f5346
    4404:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    4408:	752f0065 	strvc	r0, [pc, #-101]!	; 43ab <_start-0xbc55>
    440c:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 4248 <_start-0xbdb8>
    4410:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    4414:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    4418:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    441c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    4420:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    4424:	2e30312f 	rsfcssp	f3, f0, #10.0
    4428:	2f312e33 	svccs	0x00312e33
    442c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4430:	00656475 	rsbeq	r6, r5, r5, ror r4
    4434:	73666600 	cmnvc	r6, #0, 12
    4438:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0xfffffc87
    443c:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    4440:	73000001 	movwvc	r0, #1
    4444:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
    4448:	00682e74 	rsbeq	r2, r8, r4, ror lr
    444c:	66000002 	strvs	r0, [r0], -r2
    4450:	00682e66 	rsbeq	r2, r8, r6, ror #28
    4454:	00000001 	andeq	r0, r0, r1
    4458:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
    445c:	02b16002 	adcseq	r6, r1, #2
    4460:	0c051900 			; <UNDEFINED> instruction: 0x0c051900
    4464:	2f01054b 	svccs	0x0001054b
    4468:	01000a02 	tsteq	r0, r2, lsl #20
    446c:	00001901 	andeq	r1, r0, r1, lsl #18
    4470:	13000300 	movwne	r0, #768	; 0x300
    4474:	02000000 	andeq	r0, r0, #0
    4478:	0d0efb01 	vstreq	d15, [lr, #-4]
    447c:	01010100 	mrseq	r0, (UNDEF: 17)
    4480:	00000001 	andeq	r0, r0, r1
    4484:	01000001 	tsteq	r0, r1
    4488:	00700000 	rsbseq	r0, r0, r0
    448c:	00030000 	andeq	r0, r3, r0
    4490:	0000003d 	andeq	r0, r0, sp, lsr r0
    4494:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4498:	0101000d 	tsteq	r1, sp
    449c:	00000101 	andeq	r0, r0, r1, lsl #2
    44a0:	00000100 	andeq	r0, r0, r0, lsl #2
    44a4:	2f2e2e01 	svccs	0x002e2e01
    44a8:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    44ac:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    44b0:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    44b4:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    44b8:	2f676966 	svccs	0x00676966
    44bc:	006d7261 	rsbeq	r7, sp, r1, ror #4
    44c0:	62696c00 	rsbvs	r6, r9, #0, 24
    44c4:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
    44c8:	532e7363 			; <UNDEFINED> instruction: 0x532e7363
    44cc:	00000100 	andeq	r0, r0, r0, lsl #2
    44d0:	02050000 	andeq	r0, r5, #0
    44d4:	0002b180 	andeq	fp, r2, r0, lsl #3
    44d8:	0108cf03 	tsteq	r8, r3, lsl #30
    44dc:	2f2f2f30 	svccs	0x002f2f30
    44e0:	02302f2f 	eorseq	r2, r0, #47, 30	; 0xbc
    44e4:	312f143e 			; <UNDEFINED> instruction: 0x312f143e
    44e8:	08302f2f 	ldmdaeq	r0!, {r0, r1, r2, r3, r5, r8, r9, sl, fp, sp}
    44ec:	03322f92 	teqeq	r2, #584	; 0x248
    44f0:	2f2f661f 	svccs	0x002f661f
    44f4:	2f2f2f2f 	svccs	0x002f2f2f
    44f8:	0002022f 	andeq	r0, r2, pc, lsr #4
    44fc:	00530101 	subseq	r0, r3, r1, lsl #2
    4500:	00030000 	andeq	r0, r3, r0
    4504:	0000003d 	andeq	r0, r0, sp, lsr r0
    4508:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    450c:	0101000d 	tsteq	r1, sp
    4510:	00000101 	andeq	r0, r0, r1, lsl #2
    4514:	00000100 	andeq	r0, r0, r0, lsl #2
    4518:	2f2e2e01 	svccs	0x002e2e01
    451c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4520:	696c2f2e 	stmdbvs	ip!, {r1, r2, r3, r5, r8, r9, sl, fp, sp}^
    4524:	63636762 	cmnvs	r3, #25690112	; 0x1880000
    4528:	6e6f632f 	cdpvs	3, 6, cr6, cr15, cr15, {1}
    452c:	2f676966 	svccs	0x00676966
    4530:	006d7261 	rsbeq	r7, sp, r1, ror #4
    4534:	62696c00 	rsbvs	r6, r9, #0, 24
    4538:	6e756631 	mrcvs	6, 3, r6, cr5, cr1, {1}
    453c:	532e7363 			; <UNDEFINED> instruction: 0x532e7363
    4540:	00000100 	andeq	r0, r0, r0, lsl #2
    4544:	02050000 	andeq	r0, r5, #0
    4548:	0002b294 	muleq	r2, r4, r2
    454c:	010bb903 	tsteq	fp, r3, lsl #18
    4550:	01000202 	tsteq	r0, r2, lsl #4
    4554:	00016d01 	andeq	r6, r1, r1, lsl #26
    4558:	b9000300 	stmdblt	r0, {r8, r9}
    455c:	02000000 	andeq	r0, r0, #0
    4560:	0d0efb01 	vstreq	d15, [lr, #-4]
    4564:	01010100 	mrseq	r0, (UNDEF: 17)
    4568:	00000001 	andeq	r0, r0, r1
    456c:	01000001 	tsteq	r0, r1
    4570:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4574:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4578:	2f2e2e2f 	svccs	0x002e2e2f
    457c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4580:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4584:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4588:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    458c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    4590:	752f0067 	strvc	r0, [pc, #-103]!	; 4531 <_start-0xbacf>
    4594:	6c2f7273 	sfmvs	f7, 4, [pc], #-460	; 43d0 <_start-0xbc30>
    4598:	672f6269 	strvs	r6, [pc, -r9, ror #4]!
    459c:	612f6363 			; <UNDEFINED> instruction: 0x612f6363
    45a0:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    45a4:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    45a8:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    45ac:	2e30312f 	rsfcssp	f3, f0, #10.0
    45b0:	2f312e33 	svccs	0x00312e33
    45b4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    45b8:	00656475 	rsbeq	r6, r5, r5, ror r4
    45bc:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    45c0:	6e2f646c 	cdpvs	4, 2, cr6, cr15, cr12, {3}
    45c4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    45c8:	42702d62 	rsbsmi	r2, r0, #6272	; 0x1880
    45cc:	65643033 	strbvs	r3, [r4, #-51]!	; 0xffffffcd
    45d0:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    45d4:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    45d8:	2e332e33 	mrccs	14, 1, r2, cr3, cr3, {1}
    45dc:	656e2f30 	strbvs	r2, [lr, #-3888]!	; 0xfffff0d0
    45e0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    45e4:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    45e8:	6e692f63 	cdpvs	15, 6, cr2, cr9, cr3, {3}
    45ec:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    45f0:	6d000065 	stcvs	0, cr0, [r0, #-404]	; 0xfffffe6c
    45f4:	6d636d65 	stclvs	13, cr6, [r3, #-404]!	; 0xfffffe6c
    45f8:	00632e70 	rsbeq	r2, r3, r0, ror lr
    45fc:	73000001 	movwvc	r0, #1
    4600:	65646474 	strbvs	r6, [r4, #-1140]!	; 0xfffffb8c
    4604:	00682e66 	rsbeq	r2, r8, r6, ror #28
    4608:	73000002 	movwvc	r0, #2
    460c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    4610:	00682e67 	rsbeq	r2, r8, r7, ror #28
    4614:	00000003 	andeq	r0, r0, r3
    4618:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
    461c:	02b29802 	adcseq	r9, r2, #131072	; 0x20000
    4620:	01300300 	teqeq	r0, r0, lsl #6
    4624:	10030305 	andne	r0, r3, r5, lsl #6
    4628:	13131301 	tstne	r3, #67108864	; 0x4000000
    462c:	06060517 			; <UNDEFINED> instruction: 0x06060517
    4630:	03010501 	movweq	r0, #5377	; 0x1501
    4634:	06052e68 	streq	r2, [r5], -r8, ror #28
    4638:	052e1803 	streq	r1, [lr, #-2051]!	; 0xfffff7fd
    463c:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
    4640:	15052e01 	strne	r2, [r5, #-3585]	; 0xfffff1ff
    4644:	01040200 	mrseq	r0, R12_usr
    4648:	0019052e 	andseq	r0, r9, lr, lsr #10
    464c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    4650:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
    4654:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    4658:	0a03060b 	beq	c5e8c <__bss_end+0x18bb4>
    465c:	0e05482e 	cdpeq	8, 0, cr4, cr5, cr14, {1}
    4660:	05820106 	streq	r0, [r2, #262]	; 0x106
    4664:	7a034e0d 	bvc	d7ea0 <__bss_end+0x2abc8>
    4668:	0b05322e 	bleq	150f28 <__bss_end+0xa3c50>
    466c:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    4670:	0b050106 	bleq	144a90 <__bss_end+0x977b8>
    4674:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    4678:	05017a03 	streq	r7, [r1, #-2563]	; 0xfffff5fd
    467c:	2e0f0309 	cdpcs	3, 0, cr0, cr15, cr9, {0}
    4680:	36060a05 	strcc	r0, [r6], -r5, lsl #20
    4684:	78030b05 	stmdavc	r3, {r0, r2, r8, r9, fp}
    4688:	2e09052e 	cfsh32cs	mvfx0, mvfx9, #30
    468c:	0705662e 	streq	r6, [r5, -lr, lsr #12]
    4690:	05144c06 	ldreq	r4, [r4, #-3078]	; 0xfffff3fa
    4694:	0510060b 	ldreq	r0, [r0, #-1547]	; 0xfffff9f5
    4698:	05310607 	ldreq	r0, [r1, #-1543]!	; 0xfffff9f9
    469c:	12050d09 	andne	r0, r5, #576	; 0x240
    46a0:	0a051406 	beq	1496c0 <__bss_end+0x9c3e8>
    46a4:	0602052e 	streq	r0, [r2], -lr, lsr #10
    46a8:	060d0567 	streq	r0, [sp], -r7, ror #10
    46ac:	35010501 	strcc	r0, [r1, #-1281]	; 0xfffffaff
    46b0:	03060905 	movweq	r0, #26885	; 0x6905
    46b4:	0b054a76 	bleq	157094 <__bss_end+0xa9dbc>
    46b8:	052e0106 	streq	r0, [lr, #-262]!	; 0xfffffefa
    46bc:	0105360a 	tsteq	r5, sl, lsl #12
    46c0:	00040230 	andeq	r0, r4, r0, lsr r2
    46c4:	01b60101 			; <UNDEFINED> instruction: 0x01b60101
    46c8:	00030000 	andeq	r0, r3, r0
    46cc:	000000ce 	andeq	r0, r0, lr, asr #1
    46d0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    46d4:	0101000d 	tsteq	r1, sp
    46d8:	00000101 	andeq	r0, r0, r1, lsl #2
    46dc:	00000100 	andeq	r0, r0, r0, lsl #2
    46e0:	2f2e2e01 	svccs	0x002e2e01
    46e4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    46e8:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    46ec:	2f2e2e2f 	svccs	0x002e2e2f
    46f0:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    46f4:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    46f8:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    46fc:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 457c <_start-0xba84>
    4700:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    4704:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    4708:	2e2f6d72 	mcrcs	13, 1, r6, cr15, cr2, {3}
    470c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4710:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    4714:	00676e69 	rsbeq	r6, r7, r9, ror #28
    4718:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    471c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4720:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4724:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4728:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    472c:	61652d65 	cmnvs	r5, r5, ror #26
    4730:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    4734:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    4738:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    473c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4740:	622f0065 	eorvs	r0, pc, #101	; 0x65
    4744:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4748:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    474c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4750:	30334270 	eorscc	r4, r3, r0, ror r2
    4754:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4758:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    475c:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    4760:	2f302e33 	svccs	0x00302e33
    4764:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4768:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 45cc <_start-0xba34>
    476c:	2f636269 	svccs	0x00636269
    4770:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4774:	00656475 	rsbeq	r6, r5, r5, ror r4
    4778:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    477c:	2e797063 	cdpcs	0, 7, cr7, cr9, cr3, {3}
    4780:	00010063 	andeq	r0, r1, r3, rrx
    4784:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4788:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    478c:	00020068 	andeq	r0, r2, r8, rrx
    4790:	72747300 	rsbsvc	r7, r4, #0, 6
    4794:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    4798:	00030068 	andeq	r0, r3, r8, rrx
    479c:	01050000 	mrseq	r0, (UNDEF: 5)
    47a0:	44020500 	strmi	r0, [r2], #-1280	; 0xfffffb00
    47a4:	030002b3 	movweq	r0, #691	; 0x2b3
    47a8:	03050133 	movweq	r0, #20787	; 0x5133
    47ac:	13010e03 	movwne	r0, #7683	; 0x1e03
    47b0:	05161313 	ldreq	r1, [r6, #-787]	; 0xfffffced
    47b4:	05010606 	streq	r0, [r1, #-1542]	; 0xfffff9fa
    47b8:	0402001c 	streq	r0, [r2], #-28	; 0xffffffe4
    47bc:	18054a01 	stmdane	r5, {r0, r9, fp, lr}
    47c0:	01040200 	mrseq	r0, R12_usr
    47c4:	0301052e 	movweq	r0, #5422	; 0x152e
    47c8:	0b05666b 	bleq	15e17c <__bss_end+0xb0ea4>
    47cc:	d61d0306 	ldrle	r0, [sp], -r6, lsl #6
    47d0:	13061a05 	movwne	r1, #27141	; 0x6a05
    47d4:	052f2c2f 	streq	r2, [pc, #-3119]!	; 3bad <_start-0xc453>
    47d8:	1a052b0d 	bne	14f414 <__bss_end+0xa213c>
    47dc:	290d0533 	stmdbcs	sp, {r0, r1, r4, r5, r8, sl}
    47e0:	2b331a05 	blcs	ccaffc <__bss_end+0xc1dd24>
    47e4:	2f060b05 	svccs	0x00060b05
    47e8:	0d051413 	cfstrseq	mvf1, [r5, #-76]	; 0xffffffb4
    47ec:	06017a03 	streq	r7, [r1], -r3, lsl #20
    47f0:	05660a03 	strbeq	r0, [r6, #-2563]!	; 0xfffff5fd
    47f4:	28052a10 	stmdacs	r5, {r4, r9, fp, sp}
    47f8:	330d052d 	movwcc	r0, #54573	; 0xd52d
    47fc:	05291705 	streq	r1, [r9, #-1797]!	; 0xfffff8fb
    4800:	0533060d 	ldreq	r0, [r3, #-1549]!	; 0xfffff9f3
    4804:	05290628 	streq	r0, [r9, #-1576]!	; 0xfffff9d8
    4808:	05c1060b 	strbeq	r0, [r1, #1547]	; 0x60b
    480c:	2e01061a 	mcrcs	6, 0, r0, cr1, cr10, {0}
    4810:	2f060b05 	svccs	0x00060b05
    4814:	050f0d05 	streq	r0, [pc, #-3333]	; 3b17 <_start-0xc4e9>
    4818:	05690610 	strbeq	r0, [r9, #-1552]!	; 0xfffff9f0
    481c:	28052d17 	stmdacs	r5, {r0, r1, r2, r4, r8, sl, fp, sp}
    4820:	0609052e 	streq	r0, [r9], -lr, lsr #10
    4824:	052e0903 	streq	r0, [lr, #-2307]!	; 0xfffff6fd
    4828:	2e2e060e 	cfmadda32cs	mvax0, mvax0, mvfx14, mvfx14
    482c:	09052e2e 	stmdbeq	r5, {r1, r2, r3, r5, r9, sl, fp, sp}
    4830:	0605052e 	streq	r0, [r5], -lr, lsr #10
    4834:	060c052f 	streq	r0, [ip], -pc, lsr #10
    4838:	2d090501 	cfstr32cs	mvfx0, [r9, #-4]
    483c:	052f0c05 	streq	r0, [pc, #-3077]!	; 3c3f <_start-0xc3c1>
    4840:	062d0609 	strteq	r0, [sp], -r9, lsl #12
    4844:	33010501 	movwcc	r0, #5377	; 0x1501
    4848:	03450905 	movteq	r0, #22789	; 0x5905
    484c:	03062e5e 	movweq	r2, #28254	; 0x6e5e
    4850:	0e052e22 	cdpeq	14, 0, cr2, cr5, cr2, {1}
    4854:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4858:	052e2e2e 	streq	r2, [lr, #-3630]!	; 0xfffff1d2
    485c:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
    4860:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4864:	0c052d09 	stceq	13, cr2, [r5], {9}
    4868:	0609052f 	streq	r0, [r9], -pc, lsr #10
    486c:	0601062d 	streq	r0, [r1], -sp, lsr #12
    4870:	5e03064a 	cfmadd32pl	mvax2, mvfx0, mvfx3, mvfx10
    4874:	030e0501 	movweq	r0, #58625	; 0xe501
    4878:	022e2e22 	eoreq	r2, lr, #544	; 0x220
    487c:	01010002 	tsteq	r1, r2
    4880:	000001d1 	ldrdeq	r0, [r0], -r1
    4884:	00b90003 	adcseq	r0, r9, r3
    4888:	01020000 	mrseq	r0, (UNDEF: 2)
    488c:	000d0efb 	strdeq	r0, [sp], -fp
    4890:	01010101 	tsteq	r1, r1, lsl #2
    4894:	01000000 	mrseq	r0, (UNDEF: 0)
    4898:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
    489c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    48a0:	2f2e2e2f 	svccs	0x002e2e2f
    48a4:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    48a8:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    48ac:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    48b0:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    48b4:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    48b8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    48bc:	73752f00 	cmnvc	r5, #0, 30
    48c0:	696c2f72 	stmdbvs	ip!, {r1, r4, r5, r6, r8, r9, sl, fp, sp}^
    48c4:	63672f62 	cmnvs	r7, #392	; 0x188
    48c8:	72612f63 	rsbvc	r2, r1, #396	; 0x18c
    48cc:	6f6e2d6d 	svcvs	0x006e2d6d
    48d0:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    48d4:	2f696261 	svccs	0x00696261
    48d8:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
    48dc:	692f312e 	stmdbvs	pc!, {r1, r2, r3, r5, r8, ip, sp}	; <UNPREDICTABLE>
    48e0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    48e4:	2f006564 	svccs	0x00006564
    48e8:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    48ec:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    48f0:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    48f4:	3342702d 	movtcc	r7, #8237	; 0x202d
    48f8:	2f656430 	svccs	0x00656430
    48fc:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4900:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    4904:	302e332e 	eorcc	r3, lr, lr, lsr #6
    4908:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    490c:	2f62696c 	svccs	0x0062696c
    4910:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    4914:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4918:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    491c:	656d0000 	strbvs	r0, [sp, #-0]!
    4920:	7465736d 	strbtvc	r7, [r5], #-877	; 0xfffffc93
    4924:	0100632e 	tsteq	r0, lr, lsr #6
    4928:	74730000 	ldrbtvc	r0, [r3], #-0
    492c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    4930:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4934:	74730000 	ldrbtvc	r0, [r3], #-0
    4938:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    493c:	0300682e 	movweq	r6, #2094	; 0x82e
    4940:	05000000 	streq	r0, [r0, #-0]
    4944:	02050001 	andeq	r0, r5, #1
    4948:	0002b464 	andeq	fp, r2, r4, ror #8
    494c:	05012803 	streq	r2, [r1, #-2051]	; 0xfffff7fd
    4950:	13151303 	tstne	r5, #201326592	; 0xc000000
    4954:	05151313 	ldreq	r1, [r5, #-787]	; 0xfffffced
    4958:	07050109 	streq	r0, [r5, -r9, lsl #2]
    495c:	060a054c 	streq	r0, [sl], -ip, asr #10
    4960:	2e0c0501 	cfsh32cs	mvfx0, mvfx12, #1
    4964:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    4968:	2e750309 	cdpcs	3, 7, cr0, cr5, cr9, {0}
    496c:	0c031005 	stceq	0, cr1, [r3], {5}
    4970:	490c052e 	stmdbmi	ip, {r1, r2, r3, r5, r8, sl}
    4974:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    4978:	054a0607 	strbeq	r0, [sl, #-1543]	; 0xfffff9f9
    497c:	0e051309 	cdpeq	3, 0, cr1, cr5, cr9, {0}
    4980:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4984:	03052b06 	movweq	r2, #23302	; 0x5b06
    4988:	06060552 			; <UNDEFINED> instruction: 0x06060552
    498c:	03010501 	movweq	r0, #5377	; 0x1501
    4990:	10054a6e 	andne	r4, r5, lr, ror #20
    4994:	06070535 			; <UNDEFINED> instruction: 0x06070535
    4998:	162e0e03 	strtne	r0, [lr], -r3, lsl #28
    499c:	01060e05 	tsteq	r6, r5, lsl #28
    49a0:	2f060705 	svccs	0x00060705
    49a4:	17060d05 	strne	r0, [r6, -r5, lsl #26]
    49a8:	05290e05 	streq	r0, [r9, #-3589]!	; 0xfffff1fb
    49ac:	052f0607 	streq	r0, [pc, #-1543]!	; 43ad <_start-0xbc53>
    49b0:	0d050114 	stfeqs	f0, [r5, #-80]	; 0xffffffb0
    49b4:	052e0616 	streq	r0, [lr, #-1558]!	; 0xfffff9ea
    49b8:	05bc060b 	ldreq	r0, [ip, #1547]!	; 0x60b
    49bc:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    49c0:	052f060b 	streq	r0, [pc, #-1547]!	; 43bd <_start-0xbc43>
    49c4:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    49c8:	052f060b 	streq	r0, [pc, #-1547]!	; 43c5 <_start-0xbc3b>
    49cc:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    49d0:	052f060b 	streq	r0, [pc, #-1547]!	; 43cd <_start-0xbc33>
    49d4:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    49d8:	052f060b 	streq	r0, [pc, #-1547]!	; 43d5 <_start-0xbc2b>
    49dc:	017a030d 	cmneq	sl, sp, lsl #6
    49e0:	18052e06 	stmdane	r5, {r1, r2, r9, sl, fp, sp}
    49e4:	320d054f 	andcc	r0, sp, #331350016	; 0x13c00000
    49e8:	052a1805 	streq	r1, [sl, #-2053]!	; 0xfffff7fb
    49ec:	31062f0d 	tstcc	r6, sp, lsl #30
    49f0:	052e2e06 	streq	r2, [lr, #-3590]!	; 0xfffff1fa
    49f4:	0568060b 	strbeq	r0, [r8, #-1547]!	; 0xfffff9f5
    49f8:	0501061b 	streq	r0, [r1, #-1563]	; 0xfffff9e5
    49fc:	052f060b 	streq	r0, [pc, #-1547]!	; 43f9 <_start-0xbc07>
    4a00:	4d060f0d 	stcmi	15, cr0, [r6, #-52]	; 0xffffffcc
    4a04:	36060905 	strcc	r0, [r6], -r5, lsl #18
    4a08:	10050106 	andne	r0, r5, r6, lsl #2
    4a0c:	2e4a5a03 	vmlacs.f32	s11, s20, s6
    4a10:	03060505 	movweq	r0, #25861	; 0x6505
    4a14:	0a052e27 	beq	1502b8 <__bss_end+0xa2fe0>
    4a18:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4a1c:	01062d06 	tsteq	r6, r6, lsl #26
    4a20:	2e4e0105 	dvfcse	f0, f6, f5
    4a24:	2a060905 	bcs	186e40 <__bss_end+0xd9b68>
    4a28:	10050106 	andne	r0, r5, r6, lsl #2
    4a2c:	2e4a5a03 	vmlacs.f32	s11, s20, s6
    4a30:	03060505 	movweq	r0, #25861	; 0x6505
    4a34:	0a052e27 	beq	1502d8 <__bss_end+0xa3000>
    4a38:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4a3c:	01062d06 	tsteq	r6, r6, lsl #26
    4a40:	71031805 	tstvc	r3, r5, lsl #16
    4a44:	09052e66 	stmdbeq	r5, {r1, r2, r5, r6, r9, sl, fp, sp}
    4a48:	052e5d03 	streq	r5, [lr, #-3331]!	; 0xfffff2fd
    4a4c:	4a1e030d 	bmi	785688 <__bss_end+0x6d83b0>
    4a50:	01000402 	tsteq	r0, r2, lsl #8
    4a54:	0001ba01 	andeq	fp, r1, r1, lsl #20
    4a58:	83000300 	movwhi	r0, #768	; 0x300
    4a5c:	02000000 	andeq	r0, r0, #0
    4a60:	0d0efb01 	vstreq	d15, [lr, #-4]
    4a64:	01010100 	mrseq	r0, (UNDEF: 17)
    4a68:	00000001 	andeq	r0, r0, r1
    4a6c:	01000001 	tsteq	r0, r1
    4a70:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4a74:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4a78:	2f2e2e2f 	svccs	0x002e2e2f
    4a7c:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    4a80:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4a84:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4a88:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    4a8c:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    4a90:	622f0067 	eorvs	r0, pc, #103	; 0x67
    4a94:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4a98:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4a9c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4aa0:	30334270 	eorscc	r4, r3, r0, ror r2
    4aa4:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4aa8:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4aac:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    4ab0:	2f302e33 	svccs	0x00302e33
    4ab4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4ab8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 491c <_start-0xb6e4>
    4abc:	2f636269 	svccs	0x00636269
    4ac0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4ac4:	00656475 	rsbeq	r6, r5, r5, ror r4
    4ac8:	72747300 	rsbsvc	r7, r4, #0, 6
    4acc:	2e726863 	cdpcs	8, 7, cr6, cr2, cr3, {3}
    4ad0:	00010063 	andeq	r0, r1, r3, rrx
    4ad4:	72747300 	rsbsvc	r7, r4, #0, 6
    4ad8:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    4adc:	00020068 	andeq	r0, r2, r8, rrx
    4ae0:	01050000 	mrseq	r0, (UNDEF: 5)
    4ae4:	80020500 	andhi	r0, r2, r0, lsl #10
    4ae8:	030002b5 	movweq	r0, #693	; 0x2b5
    4aec:	03050138 	movweq	r0, #20792	; 0x5138
    4af0:	06060513 			; <UNDEFINED> instruction: 0x06060513
    4af4:	0603051a 			; <UNDEFINED> instruction: 0x0603051a
    4af8:	152e7903 	strne	r7, [lr, #-2307]!	; 0xfffff6fd
    4afc:	06051513 			; <UNDEFINED> instruction: 0x06051513
    4b00:	09050106 	stmdbeq	r5, {r1, r2, r8}
    4b04:	2e140306 	cdpcs	3, 1, cr0, cr4, cr6, {0}
    4b08:	2e060a05 	vmlacs.f32	s0, s12, s10
    4b0c:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
    4b10:	09030603 	stmdbeq	r3, {r0, r1, r9, sl}
    4b14:	0f05132e 	svceq	0x0005132e
    4b18:	13050501 	movwne	r0, #21761	; 0x5501
    4b1c:	03060105 	movweq	r0, #24837	; 0x6105
    4b20:	0b050158 	bleq	145088 <__bss_end+0x97db0>
    4b24:	052e2b03 	streq	r2, [lr, #-2819]!	; 0xfffff4fd
    4b28:	23052b0a 	movwcs	r2, #23306	; 0x5b0a
    4b2c:	0f052d06 	svceq	0x00052d06
    4b30:	13050501 	movwne	r0, #21761	; 0x5501
    4b34:	15062a05 	strne	r2, [r6, #-2565]	; 0xfffff5fb
    4b38:	052b0a05 	streq	r0, [fp, #-2565]!	; 0xfffff5fb
    4b3c:	052d0623 	streq	r0, [sp, #-1571]!	; 0xfffff9dd
    4b40:	0905010f 	stmdbeq	r5, {r0, r1, r2, r3, r8}
    4b44:	062a0516 			; <UNDEFINED> instruction: 0x062a0516
    4b48:	660b0501 	strvs	r0, [fp], -r1, lsl #10
    4b4c:	052e2605 	streq	r2, [lr, #-1541]!	; 0xfffff9fb
    4b50:	26052e0b 	strcs	r2, [r5], -fp, lsl #28
    4b54:	0605052e 	streq	r0, [r5], -lr, lsr #10
    4b58:	11090567 	tstne	r9, r7, ror #10
    4b5c:	01060b05 	tsteq	r6, r5, lsl #22
    4b60:	052e2a05 	streq	r2, [lr, #-2565]!	; 0xfffff5fb
    4b64:	2a052e0b 	bcs	150398 <__bss_end+0xa30c0>
    4b68:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
    4b6c:	052e2a05 	streq	r2, [lr, #-2565]!	; 0xfffff5fb
    4b70:	09052e26 	stmdbeq	r5, {r1, r2, r5, r9, sl, fp, sp}
    4b74:	660b0306 	strvs	r0, [fp], -r6, lsl #6
    4b78:	01060a05 	tsteq	r6, r5, lsl #20
    4b7c:	4a2e0905 	bmi	b86f98 <__bss_end+0xad9cc0>
    4b80:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
    4b84:	05052e09 	streq	r2, [r5, #-3593]	; 0xfffff1f7
    4b88:	01040200 	mrseq	r0, R12_usr
    4b8c:	09054b06 	stmdbeq	r5, {r1, r2, r8, r9, fp, lr}
    4b90:	01040200 	mrseq	r0, R12_usr
    4b94:	000d0511 	andeq	r0, sp, r1, lsl r5
    4b98:	06010402 	streq	r0, [r1], -r2, lsl #8
    4b9c:	030a0501 	movweq	r0, #42241	; 0xa501
    4ba0:	0905666b 	stmdbeq	r5, {r0, r1, r3, r5, r6, r9, sl, sp, lr}
    4ba4:	34080546 	strcc	r0, [r8], #-1350	; 0xfffffaba
    4ba8:	03060905 	movweq	r0, #26885	; 0x6905
    4bac:	07052e7a 	smlsdxeq	r5, sl, lr, r2
    4bb0:	052a1432 	streq	r1, [sl, #-1074]!	; 0xfffffbce
    4bb4:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4bb8:	10052e0a 	andne	r2, r5, sl, lsl #28
    4bbc:	0301054b 	movweq	r0, #5451	; 0x154b
    4bc0:	0d052e1b 	stceq	14, cr2, [r5, #-108]	; 0xffffff94
    4bc4:	2e500306 	cdpcs	3, 5, cr0, cr0, cr6, {0}
    4bc8:	2e060e05 	cdpcs	14, 0, cr0, cr6, cr5, {0}
    4bcc:	052e0d05 	streq	r0, [lr, #-3333]!	; 0xfffff2fb
    4bd0:	2c32060b 	ldccs	6, cr0, [r2], #-44	; 0xffffffd4
    4bd4:	01060e05 	tsteq	r6, r5, lsl #28
    4bd8:	05800d05 	streq	r0, [r0, #3333]	; 0xd05
    4bdc:	0d05320c 	sfmeq	f3, 4, [r5, #-48]	; 0xffffffd0
    4be0:	05362a06 	ldreq	r2, [r6, #-2566]!	; 0xfffff5fa
    4be4:	0501060f 	streq	r0, [r1, #-1551]	; 0xfffff9f1
    4be8:	09059e0d 	stmdbeq	r5, {r0, r2, r3, r9, sl, fp, ip, pc}
    4bec:	0d054b06 	vstreq	d4, [r5, #-24]	; 0xffffffe8
    4bf0:	060f0511 			; <UNDEFINED> instruction: 0x060f0511
    4bf4:	0d052e01 	stceq	14, cr2, [r5, #-4]
    4bf8:	054e064a 	strbeq	r0, [lr, #-1610]	; 0xfffff9b6
    4bfc:	0d056709 	stceq	7, cr6, [r5, #-36]	; 0xffffffdc
    4c00:	052e0611 	streq	r0, [lr, #-1553]!	; 0xfffff9ef
    4c04:	66090310 			; <UNDEFINED> instruction: 0x66090310
    4c08:	1b030105 	blne	c5024 <__bss_end+0x17d4c>
    4c0c:	06022e2e 	streq	r2, [r2], -lr, lsr #28
    4c10:	e7010100 	str	r0, [r1, -r0, lsl #2]
    4c14:	03000000 	movweq	r0, #0
    4c18:	0000c600 	andeq	ip, r0, r0, lsl #12
    4c1c:	fb010200 	blx	45426 <ramdisk+0x1814e>
    4c20:	01000d0e 	tsteq	r0, lr, lsl #26
    4c24:	00010101 	andeq	r0, r1, r1, lsl #2
    4c28:	00010000 	andeq	r0, r1, r0
    4c2c:	2e2e0100 	sufcse	f0, f6, f0
    4c30:	2f2e2e2f 	svccs	0x002e2e2f
    4c34:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4c38:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4c3c:	2f2e2e2f 	svccs	0x002e2e2f
    4c40:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4c44:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4aa8 <_start-0xb558>
    4c48:	2f636269 	svccs	0x00636269
    4c4c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    4c50:	2f656e69 	svccs	0x00656e69
    4c54:	006d7261 	rsbeq	r7, sp, r1, ror #4
    4c58:	7273752f 	rsbsvc	r7, r3, #197132288	; 0xbc00000
    4c5c:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    4c60:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    4c64:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    4c68:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    4c6c:	61652d65 	cmnvs	r5, r5, ror #26
    4c70:	312f6962 			; <UNDEFINED> instruction: 0x312f6962
    4c74:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    4c78:	6e692f31 	mcrvs	15, 3, r2, cr9, cr1, {1}
    4c7c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
    4c80:	622f0065 	eorvs	r0, pc, #101	; 0x65
    4c84:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    4c88:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    4c8c:	2d62696c 			; <UNDEFINED> instruction: 0x2d62696c
    4c90:	30334270 	eorscc	r4, r3, r0, ror r2
    4c94:	6e2f6564 	cfsh64vs	mvdx6, mvdx15, #52
    4c98:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4c9c:	2e332d62 	cdpcs	13, 3, cr2, cr3, cr2, {3}
    4ca0:	2f302e33 	svccs	0x00302e33
    4ca4:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4ca8:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4b0c <_start-0xb4f4>
    4cac:	2f636269 	svccs	0x00636269
    4cb0:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
    4cb4:	00656475 	rsbeq	r6, r5, r5, ror r4
    4cb8:	72747300 	rsbsvc	r7, r4, #0, 6
    4cbc:	2d6e656c 	cfstr64cs	mvdx6, [lr, #-432]!	; 0xfffffe50
    4cc0:	62757473 	rsbsvs	r7, r5, #1929379840	; 0x73000000
    4cc4:	0100632e 	tsteq	r0, lr, lsr #6
    4cc8:	74730000 	ldrbtvc	r0, [r3], #-0
    4ccc:	66656464 	strbtvs	r6, [r5], -r4, ror #8
    4cd0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
    4cd4:	74730000 	ldrbtvc	r0, [r3], #-0
    4cd8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    4cdc:	0300682e 	movweq	r6, #2094	; 0x82e
    4ce0:	05000000 	streq	r0, [r0, #-0]
    4ce4:	02050001 	andeq	r0, r5, #1
    4ce8:	0002b6d0 	ldrdeq	fp, [r2], -r0
    4cec:	05013703 	streq	r3, [r1, #-1795]	; 0xfffff8fd
    4cf0:	01051303 	tsteq	r5, r3, lsl #6
    4cf4:	00f30306 	rscseq	r0, r3, r6, lsl #6
    4cf8:	00013002 	andeq	r3, r1, r2
    4cfc:	017b0101 	cmneq	fp, r1, lsl #2
    4d00:	00030000 	andeq	r0, r3, r0
    4d04:	000000ba 	strheq	r0, [r0], -sl
    4d08:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    4d0c:	0101000d 	tsteq	r1, sp
    4d10:	00000101 	andeq	r0, r0, r1, lsl #2
    4d14:	00000100 	andeq	r0, r0, r0, lsl #2
    4d18:	2f2e2e01 	svccs	0x002e2e01
    4d1c:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    4d20:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    4d24:	2f2e2e2f 	svccs	0x002e2e2f
    4d28:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4d2c:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 4b90 <_start-0xb470>
    4d30:	2f636269 	svccs	0x00636269
    4d34:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    4d38:	2f00676e 	svccs	0x0000676e
    4d3c:	2f727375 	svccs	0x00727375
    4d40:	2f62696c 	svccs	0x0062696c
    4d44:	2f636367 	svccs	0x00636367
    4d48:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
    4d4c:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
    4d50:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
    4d54:	30312f69 	eorscc	r2, r1, r9, ror #30
    4d58:	312e332e 			; <UNDEFINED> instruction: 0x312e332e
    4d5c:	636e692f 	cmnvs	lr, #770048	; 0xbc000
    4d60:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
    4d64:	75622f00 	strbvc	r2, [r2, #-3840]!	; 0xfffff100
    4d68:	2f646c69 	svccs	0x00646c69
    4d6c:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    4d70:	702d6269 	eorvc	r6, sp, r9, ror #4
    4d74:	64303342 	ldrtvs	r3, [r0], #-834	; 0xfffffcbe
    4d78:	656e2f65 	strbvs	r2, [lr, #-3941]!	; 0xfffff09b
    4d7c:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    4d80:	332e332d 			; <UNDEFINED> instruction: 0x332e332d
    4d84:	6e2f302e 	cdpvs	0, 2, cr3, cr15, cr14, {1}
    4d88:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    4d8c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    4d90:	692f6362 	stmdbvs	pc!, {r1, r5, r6, r8, r9, sp, lr}	; <UNPREDICTABLE>
    4d94:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
    4d98:	00006564 	andeq	r6, r0, r4, ror #10
    4d9c:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
    4da0:	2e797063 	cdpcs	0, 7, cr7, cr9, cr3, {3}
    4da4:	00010063 	andeq	r0, r1, r3, rrx
    4da8:	64747300 	ldrbtvs	r7, [r4], #-768	; 0xfffffd00
    4dac:	2e666564 	cdpcs	5, 6, cr6, cr6, cr4, {3}
    4db0:	00020068 	andeq	r0, r2, r8, rrx
    4db4:	72747300 	rsbsvc	r7, r4, #0, 6
    4db8:	2e676e69 	cdpcs	14, 6, cr6, cr7, cr9, {3}
    4dbc:	00030068 	andeq	r0, r3, r8, rrx
    4dc0:	01050000 	mrseq	r0, (UNDEF: 5)
    4dc4:	30020500 	andcc	r0, r2, r0, lsl #10
    4dc8:	030002b7 	movweq	r0, #695	; 0x2b7
    4dcc:	050100c0 	streq	r0, [r1, #-192]	; 0xffffff40
    4dd0:	01120303 	tsteq	r2, r3, lsl #6
    4dd4:	15131313 	ldrne	r1, [r3, #-787]	; 0xfffffced
    4dd8:	01060805 	tsteq	r6, r5, lsl #16
    4ddc:	052e1d05 	streq	r1, [lr, #-3333]!	; 0xfffff2fb
    4de0:	1d052e06 	stcne	14, cr2, [r5, #-24]	; 0xffffffe8
    4de4:	0309052e 	movweq	r0, #38190	; 0x952e
    4de8:	01059e7a 	tsteq	r5, sl, ror lr
    4dec:	052e6e03 	streq	r6, [lr, #-3587]!	; 0xfffff1fd
    4df0:	2e18031d 	mrccs	3, 0, r0, cr8, cr13, {0}
    4df4:	0310052e 	tsteq	r0, #192937984	; 0xb800000
    4df8:	15054a14 	strne	r4, [r5, #-2580]	; 0xfffff5ec
    4dfc:	2e0a052e 	cfsh32cs	mvfx0, mvfx10, #30
    4e00:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
    4e04:	2f062d07 	svccs	0x00062d07
    4e08:	01060a05 	tsteq	r6, r5, lsl #20
    4e0c:	06490705 	strbeq	r0, [r9], -r5, lsl #14
    4e10:	1009052e 	andne	r0, r9, lr, lsr #10
    4e14:	0a030305 	beq	c5a30 <__bss_end+0x18758>
    4e18:	0601054a 	streq	r0, [r1], -sl, asr #10
    4e1c:	06090514 			; <UNDEFINED> instruction: 0x06090514
    4e20:	05010645 	streq	r0, [r1, #-1605]	; 0xfffff9bb
    4e24:	05670605 	strbeq	r0, [r7, #-1541]!	; 0xfffff9fb
    4e28:	0501060c 	streq	r0, [r1, #-1548]	; 0xfffff9f4
    4e2c:	062d0609 	strteq	r0, [sp], -r9, lsl #12
    4e30:	06030501 	streq	r0, [r3], -r1, lsl #10
    4e34:	0601054d 	streq	r0, [r1], -sp, asr #10
    4e38:	13054a14 	movwne	r4, #23060	; 0x5a14
    4e3c:	052e6503 	streq	r6, [lr, #-1283]!	; 0xfffffafd
    4e40:	0405332d 	streq	r3, [r5], #-813	; 0xfffffcd3
    4e44:	01040200 	mrseq	r0, R12_usr
    4e48:	02004c06 	andeq	r4, r0, #1536	; 0x600
    4e4c:	01060104 	tsteq	r6, r4, lsl #2
    4e50:	02002d05 	andeq	r2, r0, #320	; 0x140
    4e54:	002c0104 	eoreq	r0, ip, r4, lsl #2
    4e58:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
    4e5c:	02002905 	andeq	r2, r0, #81920	; 0x14000
    4e60:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
    4e64:	04054c0a 	streq	r4, [r5], #-3082	; 0xfffff3f6
    4e68:	0d052f06 	stceq	15, cr2, [r5, #-24]	; 0xffffffe8
    4e6c:	21050f06 	tstcs	r5, r6, lsl #30
    4e70:	2e130531 	mrccs	5, 0, r0, cr3, cr1, {1}
    4e74:	2b060d05 	blcs	188290 <__bss_end+0xdafb8>
    4e78:	01000802 	tsteq	r0, r2, lsl #16
    4e7c:	Address 0x0000000000004e7c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	5152496e 	cmppl	r2, lr, ror #18
       4:	43787000 	cmnmi	r8, #0
       8:	0065646f 	rsbeq	r6, r5, pc, ror #8
       c:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
      10:	6b636954 	blvs	18da568 <__bss_end+0x182d290>
      14:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
      18:	76727000 	ldrbtvc	r7, [r2], -r0
      1c:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0xfffffaad
      20:	6d695470 	cfstrdvs	mvd5, [r9, #-448]!	; 0xfffffe40
      24:	6e497265 	cdpvs	2, 4, cr7, cr9, cr5, {3}
      28:	72726574 	rsbsvc	r6, r2, #116, 10	; 0x1d000000
      2c:	00747075 	rsbseq	r7, r4, r5, ror r0
      30:	72615070 	rsbvc	r5, r1, #112	; 0x70
      34:	47006d61 	strmi	r6, [r0, -r1, ror #26]
      38:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
      3c:	31203731 			; <UNDEFINED> instruction: 0x31203731
      40:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
      44:	30322031 	eorscc	r2, r2, r1, lsr r0
      48:	36303132 			; <UNDEFINED> instruction: 0x36303132
      4c:	28203132 	stmdacs	r0!, {r1, r4, r5, r8, ip, sp}
      50:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
      54:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
      58:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
      5c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
      60:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
      64:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
      68:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
      6c:	206d7261 	rsbcs	r7, sp, r1, ror #4
      70:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
      74:	613d6863 	teqvs	sp, r3, ror #16
      78:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
      7c:	672d207a 			; <UNDEFINED> instruction: 0x672d207a
      80:	20672d20 	rsbcs	r2, r7, r0, lsr #26
      84:	5f00672d 	svcpl	0x0000672d
      88:	324d4342 	subcc	r4, sp, #134217729	; 0x8000001
      8c:	5f353338 	svcpl	0x00353338
      90:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
      94:	45525f52 	ldrbmi	r5, [r2, #-3922]	; 0xfffff0ae
      98:	73005347 	movwvc	r5, #839	; 0x347
      9c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
      a0:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
      a4:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
      a8:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
      ac:	682f0074 	stmdavs	pc!, {r2, r4, r5, r6}	; <UNPREDICTABLE>
      b0:	2f656d6f 	svccs	0x00656d6f
      b4:	616e756c 	cmnvs	lr, ip, ror #10
      b8:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
      bc:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
      c0:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
      c4:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
      c8:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
      cc:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
      d0:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
      d4:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
      d8:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
      dc:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
      e0:	64700053 	ldrbtvs	r0, [r0], #-83	; 0xffffffad
      e4:	4b534154 	blmi	14d063c <__bss_end+0x1423364>
      e8:	444f435f 	strbmi	r4, [pc], #-863	; f0 <_start-0xff10>
      ec:	682f0045 	stmdavs	pc!, {r0, r2, r6}	; <UNPREDICTABLE>
      f0:	2f656d6f 	svccs	0x00656d6f
      f4:	616e756c 	cmnvs	lr, ip, ror #10
      f8:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
      fc:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
     100:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
     104:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
     108:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     10c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     110:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
     114:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     118:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
     11c:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
     120:	72462f53 	subvc	r2, r6, #332	; 0x14c
     124:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     128:	532f534f 			; <UNDEFINED> instruction: 0x532f534f
     12c:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
     130:	6f702f65 	svcvs	0x00702f65
     134:	62617472 	rsbvs	r7, r1, #1912602624	; 0x72000000
     138:	472f656c 	strmi	r6, [pc, -ip, ror #10]!
     13c:	522f4343 	eorpl	r4, pc, #201326593	; 0xc000001
     140:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
     144:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     148:	702f6950 	eorvc	r6, pc, r0, asr r9	; <UNPREDICTABLE>
     14c:	2e74726f 	cdpcs	2, 7, cr7, cr4, cr15, {3}
     150:	50760063 	rsbspl	r0, r6, r3, rrx
     154:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     158:	6353646e 	cmpvs	r3, #1845493760	; 0x6e000000
     15c:	75646568 	strbvc	r6, [r4, #-1384]!	; 0xfffffa98
     160:	0072656c 	rsbseq	r6, r2, ip, ror #10
     164:	724f7870 	subvc	r7, pc, #112, 16	; 0x700000
     168:	6e696769 	cdpvs	7, 6, cr6, cr9, cr9, {3}
     16c:	4f546c61 	svcmi	0x00546c61
     170:	54760053 	ldrbtpl	r0, [r6], #-83	; 0xffffffad
     174:	496b6369 	stmdbmi	fp!, {r0, r3, r5, r6, r8, r9, sp, lr}^
     178:	6c005253 	sfmvs	f5, 4, [r0], {83}	; 0x53
     17c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     180:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     184:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
     188:	50767000 	rsbspl	r7, r6, r0
     18c:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
     190:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
     194:	52700073 	rsbspl	r0, r0, #115	; 0x73
     198:	00736765 	rsbseq	r6, r3, r5, ror #14
     19c:	6f547870 	svcvs	0x00547870
     1a0:	53664f70 	cmnpl	r6, #112, 30	; 0x1c0
     1a4:	6b636174 	blvs	18d877c <__bss_end+0x182b4a4>
     1a8:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
     1ac:	6f642067 	svcvs	0x00642067
     1b0:	656c6275 	strbvs	r6, [ip, #-629]!	; 0xfffffd8b
     1b4:	6f507800 	svcvs	0x00507800
     1b8:	74537472 	ldrbvc	r7, [r3], #-1138	; 0xfffffb8e
     1bc:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     1c0:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     1c4:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     1c8:	50787000 	rsbspl	r7, r8, r0
     1cc:	4974726f 	ldmdbmi	r4!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
     1d0:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     1d4:	73696c61 	cmnvc	r9, #24832	; 0x6100
     1d8:	61745365 	cmnvs	r4, r5, ror #6
     1dc:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
     1e0:	6d6f436c 	stclvs	3, cr4, [pc, #-432]!	; 38 <_start-0xffc8>
     1e4:	65726170 	ldrbvs	r6, [r2, #-368]!	; 0xfffffe90
     1e8:	6374614d 	cmnvs	r4, #1073741843	; 0x40000013
     1ec:	50760068 	rsbspl	r0, r6, r8, rrx
     1f0:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     1f4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     1f8:	74697243 	strbtvc	r7, [r9], #-579	; 0xfffffdbd
     1fc:	6c616369 	stclvs	3, cr6, [r1], #-420	; 0xfffffe5c
     200:	6f682f00 	svcvs	0x00682f00
     204:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 58 <_start-0xffa8>
     208:	63616e75 	cmnvs	r1, #1872	; 0x750
     20c:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
     210:	63726178 	cmnvs	r2, #120, 2
     214:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
     218:	61522f63 	cmpvs	r2, r3, ror #30
     21c:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     220:	50797272 	rsbspl	r7, r9, r2, ror r2
     224:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     228:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     22c:	462d534f 	strtmi	r5, [sp], -pc, asr #6
     230:	53467461 	movtpl	r7, #25697	; 0x6461
     234:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     238:	4f545265 	svcmi	0x00545265
     23c:	6f532f53 	svcvs	0x00532f53
     240:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     244:	726f702f 	rsbvc	r7, pc, #47	; 0x2f
     248:	6c626174 	stfvse	f6, [r2], #-464	; 0xfffffe30
     24c:	43472f65 	movtmi	r2, #32613	; 0x7f65
     250:	61522f43 	cmpvs	r2, r3, asr #30
     254:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     258:	50797272 	rsbspl	r7, r9, r2, ror r2
     25c:	6f702f69 	svcvs	0x00702f69
     260:	73697472 	cmnvc	r9, #1912602624	; 0x72000000
     264:	00632e72 	rsbeq	r2, r3, r2, ror lr
     268:	72436c75 	subvc	r6, r3, #29952	; 0x7500
     26c:	63697469 	cmnvs	r9, #1761607680	; 0x69000000
     270:	654e6c61 	strbvs	r6, [lr, #-3169]	; 0xfffff39f
     274:	6e697473 	mcrvs	4, 3, r7, cr9, cr3, {3}
     278:	50760067 	rsbspl	r0, r6, r7, rrx
     27c:	4574726f 	ldrbmi	r7, [r4, #-623]!	; 0xfffffd91
     280:	43746978 	cmnmi	r4, #120, 18	; 0x1e0000
     284:	69746972 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     288:	006c6163 	rsbeq	r6, ip, r3, ror #2
     28c:	726f5076 	rsbvc	r5, pc, #118	; 0x76
     290:	52534974 	subspl	r4, r3, #116, 18	; 0x1d0000
     294:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     298:	72694674 	rsbvc	r4, r9, #116, 12	; 0x7400000
     29c:	61547473 	cmpvs	r4, r3, ror r4
     2a0:	76006b73 			; <UNDEFINED> instruction: 0x76006b73
     2a4:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
     2a8:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
     2ac:	6f725064 	svcvs	0x00725064
     2b0:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
     2b4:	7600726f 	strvc	r7, [r0], -pc, ror #4
     2b8:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     2bc:	534f5452 	movtpl	r5, #62546	; 0xf452
     2c0:	5253495f 	subspl	r4, r3, #1556480	; 0x17c000
     2c4:	625f6700 	subsvs	r6, pc, #0, 14
     2c8:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
     2cc:	00646574 	rsbeq	r6, r4, r4, ror r5
     2d0:	75437870 	strbvc	r7, [r3, #-2160]	; 0xfffff790
     2d4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     2d8:	42435474 	submi	r5, r3, #116, 8	; 0x74000000
     2dc:	55787000 	ldrbpl	r7, [r8, #-0]!
     2e0:	6f6c626e 	svcvs	0x006c626e
     2e4:	64656b63 	strbtvs	r6, [r5], #-2915	; 0xfffff49d
     2e8:	42435243 	submi	r5, r3, #805306372	; 0x30000004
     2ec:	54787000 	ldrbtpl	r7, [r8], #-0
     2f0:	00706d65 	rsbseq	r6, r0, r5, ror #26
     2f4:	526f4376 	rsbpl	r4, pc, #-671088639	; 0xd8000001
     2f8:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     2fc:	6441656e 	strbvs	r6, [r1], #-1390	; 0xfffffa92
     300:	446f5464 	strbtmi	r5, [pc], #-1124	; 308 <_start-0xfcf8>
     304:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     308:	694c6465 	stmdbvs	ip, {r0, r2, r5, r6, sl, sp, lr}^
     30c:	70007473 	andvc	r7, r0, r3, ror r4
     310:	6e6f4376 	mcrvs	3, 3, r4, cr15, cr6, {3}
     314:	6e696174 	mcrvs	1, 3, r6, cr9, cr4, {3}
     318:	70007265 	andvc	r7, r0, r5, ror #4
     31c:	526f4378 	rsbpl	r4, pc, #120, 6	; 0xe0000001
     320:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     324:	7546656e 	strbvc	r6, [r6, #-1390]	; 0xfffffa92
     328:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
     32c:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     330:	73736150 	cmnvc	r3, #80, 2
     334:	69546465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, sp, lr}^
     338:	00736b63 	rsbseq	r6, r3, r3, ror #22
     33c:	6e497870 	mcrvs	8, 2, r7, cr9, cr0, {3}
     340:	00786564 	rsbseq	r6, r8, r4, ror #10
     344:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     348:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
     34c:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     350:	6b636954 	blvs	18da8a8 <__bss_end+0x182d5d0>
     354:	446f5473 	strbtmi	r5, [pc], #-1139	; 35c <_start-0xfca4>
     358:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     35c:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     360:	6e457473 	mcrvs	4, 2, r7, cr5, cr3, {3}
     364:	76700064 	ldrbtvc	r0, [r0], -r4, rrx
     368:	656e774f 	strbvs	r7, [lr, #-1871]!	; 0xfffff8b1
     36c:	4c780072 	ldclmi	0, cr0, [r8], #-456	; 0xfffffe38
     370:	54747361 	ldrbtpl	r7, [r4], #-865	; 0xfffffc9f
     374:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     378:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     37c:	6f437800 	svcvs	0x00437800
     380:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     384:	54656e69 	strbtpl	r6, [r5], #-3689	; 0xfffff197
     388:	436b6369 	cmnmi	fp, #-1543503871	; 0xa4000001
     38c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
     390:	494c7800 	stmdbmi	ip, {fp, ip, sp, lr}^
     394:	495f5453 	ldmdbmi	pc, {r0, r1, r4, r6, sl, ip, lr}^	; <UNPREDICTABLE>
     398:	004d4554 	subeq	r4, sp, r4, asr r5
     39c:	6f437870 	svcvs	0x00437870
     3a0:	4c74736e 	ldclmi	3, cr7, [r4], #-440	; 0xfffffe48
     3a4:	00747369 	rsbseq	r7, r4, r9, ror #6
     3a8:	6f547875 	svcvs	0x00547875
     3ac:	526f4370 	rsbpl	r4, pc, #112, 6	; 0xc0000001
     3b0:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     3b4:	6552656e 	ldrbvs	r6, [r2, #-1390]	; 0xfffffa92
     3b8:	50796461 	rsbspl	r6, r9, r1, ror #8
     3bc:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     3c0:	00797469 	rsbseq	r7, r9, r9, ror #8
     3c4:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     3c8:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     3cc:	6f526f43 	svcvs	0x00526f43
     3d0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     3d4:	73694c65 	cmnvc	r9, #25856	; 0x6500
     3d8:	78003174 	stmdavc	r0, {r2, r4, r5, r6, r8, ip, sp}
     3dc:	616c6544 	cmnvs	ip, r4, asr #10
     3e0:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     3e4:	756f526f 	strbvc	r5, [pc, #-623]!	; 17d <_start-0xfe83>
     3e8:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     3ec:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     3f0:	78700032 	ldmdavc	r0!, {r1, r4, r5}^
     3f4:	42435243 	submi	r5, r3, #805306372	; 0x30000004
     3f8:	43787000 	cmnmi	r8, #0
     3fc:	756f526f 	strbvc	r5, [pc, #-623]!	; 195 <_start-0xfe6b>
     400:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     404:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
     408:	50787000 	rsbspl	r7, r8, r0
     40c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     410:	0073756f 	rsbseq	r7, r3, pc, ror #10
     414:	43726f63 	cmnmi	r2, #396	; 0x18c
     418:	756f526f 	strbvc	r5, [pc, #-623]!	; 1b1 <_start-0xfe4f>
     41c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     420:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     424:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
     428:	6b636f6c 	blvs	18dc1e0 <__bss_end+0x182ef08>
     42c:	6f437800 	svcvs	0x00437800
     430:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     434:	52656e69 	rsbpl	r6, r5, #1680	; 0x690
     438:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     43c:	6f724665 	svcvs	0x00724665
     440:	6576456d 	ldrbvs	r4, [r6, #-1389]!	; 0xfffffa93
     444:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     448:	70007473 	andvc	r7, r0, r3, ror r4
     44c:	61655278 	smcvs	21800	; 0x5528
     450:	6f437964 	svcvs	0x00437964
     454:	74756f52 	ldrbtvc	r6, [r5], #-3922	; 0xfffff0ae
     458:	4c656e69 	stclmi	14, cr6, [r5], #-420	; 0xfffffe5c
     45c:	73747369 	cmnvc	r4, #-1543503871	; 0xa4000001
     460:	49787500 	ldmdbmi	r8!, {r8, sl, ip, sp, lr}^
     464:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
     468:	694d7800 	stmdbvs	sp, {fp, ip, sp, lr}^
     46c:	694c696e 	stmdbvs	ip, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     470:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     474:	78006d65 	stmdavc	r0, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
     478:	6f526f43 	svcvs	0x00526f43
     47c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     480:	65724365 	ldrbvs	r4, [r2, #-869]!	; 0xfffffc9b
     484:	00657461 	rsbeq	r7, r5, r1, ror #8
     488:	43726f63 	cmnmi	r2, #396	; 0x18c
     48c:	00424352 	subeq	r4, r2, r2, asr r3
     490:	754e7875 	strbvc	r7, [lr, #-2165]	; 0xfffff78b
     494:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     498:	7449664f 	strbvc	r6, [r9], #-1615	; 0xfffff9b1
     49c:	00736d65 	rsbseq	r6, r3, r5, ror #26
     4a0:	75437870 	strbvc	r7, [r3, #-2160]	; 0xfffff790
     4a4:	6e657272 	mcrvs	2, 3, r7, cr5, cr2, {3}
     4a8:	526f4374 	rsbpl	r4, pc, #116, 6	; 0xd0000001
     4ac:	6974756f 	ldmdbvs	r4!, {r0, r1, r2, r3, r5, r6, r8, sl, ip, sp, lr}^
     4b0:	7500656e 	strvc	r6, [r0, #-1390]	; 0xfffffa92
     4b4:	69725078 	ldmdbvs	r2!, {r3, r4, r5, r6, ip, lr}^
     4b8:	7469726f 	strbtvc	r7, [r9], #-623	; 0xfffffd91
     4bc:	43780079 	cmnmi	r8, #121	; 0x79
     4c0:	756f526f 	strbvc	r5, [pc, #-623]!	; 259 <_start-0xfda7>
     4c4:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     4c8:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     4cc:	7800656c 	stmdavc	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
     4d0:	646e6550 	strbtvs	r6, [lr], #-1360	; 0xfffffab0
     4d4:	52676e69 	rsbpl	r6, r7, #1680	; 0x690
     4d8:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     4dc:	6f526f43 	svcvs	0x00526f43
     4e0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     4e4:	73694c65 	cmnvc	r9, #25856	; 0x6500
     4e8:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     4ec:	7478654e 	ldrbtvc	r6, [r8], #-1358	; 0xfffffab2
     4f0:	45787000 	ldrbmi	r7, [r8, #-0]!
     4f4:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     4f8:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     4fc:	694c7800 	stmdbvs	ip, {fp, ip, sp, lr}^
     500:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     504:	76006d65 	strvc	r6, [r0], -r5, ror #26
     508:	6f526f43 	svcvs	0x00526f43
     50c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     510:	68635365 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, ip, lr}^
     514:	6c756465 	cfldrdvs	mvd6, [r5], #-404	; 0xfffffe6c
     518:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
     51c:	54656d69 	strbtpl	r6, [r5], #-3433	; 0xfffff297
     520:	6b61576f 	blvs	18562e4 <__bss_end+0x17a900c>
     524:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     528:	6f526f43 	svcvs	0x00526f43
     52c:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     530:	78750065 	ldmdavc	r5!, {r0, r2, r5, r6}^
     534:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     538:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     53c:	7265764f 	rsbvc	r7, r5, #82837504	; 0x4f00000
     540:	776f6c66 	strbvc	r6, [pc, -r6, ror #24]!
     544:	616c6544 	cmnvs	ip, r4, asr #10
     548:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     54c:	756f526f 	strbvc	r5, [pc, #-623]!	; 2e5 <_start-0xfd1b>
     550:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     554:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     558:	494d7800 	stmdbmi	sp, {fp, ip, sp, lr}^
     55c:	4c5f494e 	mrrcmi	9, 4, r4, pc, cr14	; <UNPREDICTABLE>
     560:	5f545349 	svcpl	0x00545349
     564:	4d455449 	cfstrdmi	mvd5, [r5, #-292]	; 0xfffffedc
     568:	6f682f00 	svcvs	0x00682f00
     56c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 3c0 <_start-0xfc40>
     570:	63616e75 	cmnvs	r1, #1872	; 0x750
     574:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
     578:	63726178 	cmnvs	r2, #120, 2
     57c:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
     580:	61522f63 	cmpvs	r2, r3, ror #30
     584:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
     588:	50797272 	rsbspl	r7, r9, r2, ror r2
     58c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
     590:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
     594:	462d534f 	strtmi	r5, [sp], -pc, asr #6
     598:	53467461 	movtpl	r7, #25697	; 0x6461
     59c:	6572462f 	ldrbvs	r4, [r2, #-1583]!	; 0xfffff9d1
     5a0:	4f545265 	svcmi	0x00545265
     5a4:	6f532f53 	svcvs	0x00532f53
     5a8:	65637275 	strbvs	r7, [r3, #-629]!	; 0xfffffd8b
     5ac:	6f72632f 	svcvs	0x0072632f
     5b0:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     5b4:	00632e65 	rsbeq	r2, r3, r5, ror #28
     5b8:	53494c78 	movtpl	r4, #40056	; 0x9c78
     5bc:	78700054 	ldmdavc	r0!, {r2, r4, r6}^
     5c0:	616c6544 	cmnvs	ip, r4, asr #10
     5c4:	43646579 	cmnmi	r4, #507510784	; 0x1e400000
     5c8:	756f526f 	strbvc	r5, [pc, #-623]!	; 361 <_start-0xfc9f>
     5cc:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0xfffff68c
     5d0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     5d4:	76727000 	ldrbtvc	r7, [r2], -r0
     5d8:	63656843 	cmnvs	r5, #4390912	; 0x430000
     5dc:	6e65506b 	cdpvs	0, 6, cr5, cr5, cr11, {3}
     5e0:	676e6964 	strbvs	r6, [lr, -r4, ror #18]!
     5e4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
     5e8:	73694c79 	cmnvc	r9, #30976	; 0x7900
     5ec:	47780074 			; <UNDEFINED> instruction: 0x47780074
     5f0:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     5f4:	694c6369 	stmdbvs	ip, {r0, r3, r5, r6, r8, r9, sp, lr}^
     5f8:	74497473 	strbvc	r7, [r9], #-1139	; 0xfffffb8d
     5fc:	70006d65 	andvc	r6, r0, r5, ror #26
     600:	6e497672 	mcrvs	6, 2, r7, cr9, cr2, {3}
     604:	61697469 	cmnvs	r9, r9, ror #8
     608:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
     60c:	6f526f43 	svcvs	0x00526f43
     610:	6e697475 	mcrvs	4, 3, r7, cr9, cr5, {3}
     614:	73694c65 	cmnvc	r9, #25856	; 0x6500
     618:	78007374 	stmdavc	r0, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
     61c:	6e657645 	cdpvs	6, 6, cr7, cr5, cr5, {2}
     620:	73694c74 	cmnvc	r9, #116, 24	; 0x7400
     624:	65744974 	ldrbvs	r4, [r4, #-2420]!	; 0xfffff68c
     628:	7270006d 	rsbsvc	r0, r0, #109	; 0x6d
     62c:	65684376 	strbvs	r4, [r8, #-886]!	; 0xfffffc8a
     630:	65446b63 	strbvs	r6, [r4, #-2915]	; 0xfffff49d
     634:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
     638:	73694c64 	cmnvc	r9, #100, 24	; 0x6400
     63c:	72630074 	rsbvc	r0, r3, #116	; 0x74
     640:	4f524f43 	svcmi	0x00524f43
     644:	4e495455 	mcrmi	4, 2, r5, cr9, cr5, {2}
     648:	4f435f45 	svcmi	0x00435f45
     64c:	6c004544 	cfstr32vs	mvfx4, [r0], {68}	; 0x44
     650:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     654:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
     658:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     65c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
     660:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     664:	6e750074 	mrcvs	0, 3, r0, cr5, cr4, {3}
     668:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
     66c:	63206465 			; <UNDEFINED> instruction: 0x63206465
     670:	00726168 	rsbseq	r6, r2, r8, ror #2
     674:	74497870 	strbvc	r7, [r9], #-2160	; 0xfffff790
     678:	6f546d65 	svcvs	0x00546d65
     67c:	6f6d6552 	svcvs	0x006d6552
     680:	76006576 			; <UNDEFINED> instruction: 0x76006576
     684:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     688:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
     68c:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
     690:	74496573 	strbvc	r6, [r9], #-1395	; 0xfffffa8d
     694:	76006d65 	strvc	r6, [r0], -r5, ror #26
     698:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     69c:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
     6a0:	6e457472 	mcrvs	4, 2, r7, cr5, cr2, {3}
     6a4:	4c760064 	ldclmi	0, cr0, [r6], #-400	; 0xfffffe70
     6a8:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     6ac:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     6b0:	73696c61 	cmnvc	r9, #24832	; 0x6100
     6b4:	56780065 	ldrbtpl	r0, [r8], -r5, rrx
     6b8:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
     6bc:	6e49664f 	cdpvs	6, 4, cr6, cr9, cr15, {2}
     6c0:	74726573 	ldrbtvc	r6, [r2], #-1395	; 0xfffffa8d
     6c4:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     6c8:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 614 <_start-0xf9ec>
     6cc:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     6d0:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     6d4:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     6d8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     6dc:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     6e0:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     6e4:	72656270 	rsbvc	r6, r5, #112, 4
     6e8:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     6ec:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     6f0:	4f545265 	svcmi	0x00545265
     6f4:	61462d53 	cmpvs	r6, r3, asr sp
     6f8:	2f534674 	svccs	0x00534674
     6fc:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     700:	534f5452 	movtpl	r5, #62546	; 0xf452
     704:	756f532f 	strbvc	r5, [pc, #-815]!	; 3dd <_start-0xfc23>
     708:	2f656372 	svccs	0x00656372
     70c:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
     710:	7000632e 	andvc	r6, r0, lr, lsr #6
     714:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     718:	4c76006d 	ldclmi	0, cr0, [r6], #-436	; 0xfffffe4c
     71c:	52747369 	rsbspl	r7, r4, #-1543503871	; 0xa4000001
     720:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
     724:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     728:	72657449 	rsbvc	r7, r5, #1224736768	; 0x49000000
     72c:	726f7461 	rsbvc	r7, pc, #1627389952	; 0x61000000
     730:	6f687300 	svcvs	0x00687300
     734:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     738:	7000746e 	andvc	r7, r0, lr, ror #8
     73c:	73694c78 	cmnvc	r9, #120, 24	; 0x7800
     740:	78700074 	ldmdavc	r0!, {r2, r4, r5, r6}^
     744:	4c77654e 	cfldr64mi	mvdx6, [r7], #-312	; 0xfffffec8
     748:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     74c:	006d6574 	rsbeq	r6, sp, r4, ror r5
     750:	73694c76 	cmnvc	r9, #30208	; 0x7600
     754:	736e4974 	cmnvc	lr, #116, 18	; 0x1d0000
     758:	00747265 	rsbseq	r7, r4, r5, ror #4
     75c:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     760:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     764:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     768:	6e655363 	cdpvs	3, 6, cr5, cr5, cr3, {3}
     76c:	6f724664 	svcvs	0x00724664
     770:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     774:	51637500 	cmnpl	r3, r0, lsl #10
     778:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     77c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0xfffff6ac
     780:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     784:	49657565 	stmdbmi	r5!, {r0, r2, r5, r6, r8, sl, ip, sp, lr}^
     788:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     78c:	75466575 	strbvc	r6, [r6, #-1397]	; 0xfffffa8b
     790:	72466c6c 	subvc	r6, r6, #108, 24	; 0x6c00
     794:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     798:	78750052 	ldmdavc	r5!, {r1, r4, r6}^
     79c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     7a0:	73654d65 	cmnvc	r5, #6464	; 0x1940
     7a4:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     7a8:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     7ac:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     7b0:	7a697300 	bvc	1a5d3b8 <__bss_end+0x19b00e0>
     7b4:	00745f65 	rsbseq	r5, r4, r5, ror #30
     7b8:	69487870 	stmdbvs	r8, {r4, r5, r6, fp, ip, sp, lr}^
     7bc:	72656867 	rsbvc	r6, r5, #6750208	; 0x670000
     7c0:	6f697250 	svcvs	0x00697250
     7c4:	79746972 	ldmdbvc	r4!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     7c8:	6b736154 	blvs	1cd8d20 <__bss_end+0x1c2ba48>
     7cc:	656b6f57 	strbvs	r6, [fp, #-3927]!	; 0xfffff0a9
     7d0:	5178006e 	cmnpl	r8, lr, rrx
     7d4:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     7d8:	75517349 	ldrbvc	r7, [r1, #-841]	; 0xfffffcb7
     7dc:	45657565 	strbmi	r7, [r5, #-1381]!	; 0xfffffa9b
     7e0:	7974706d 	ldmdbvc	r4!, {r0, r2, r3, r5, r6, ip, sp, lr}^
     7e4:	6d6f7246 	sfmvs	f7, 2, [pc, #-280]!	; 6d4 <_start-0xf92c>
     7e8:	00525349 	subseq	r5, r2, r9, asr #6
     7ec:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     7f0:	65755173 	ldrbvs	r5, [r5, #-371]!	; 0xfffffe8d
     7f4:	6d456575 	cfstr64vs	mvdx6, [r5, #-468]	; 0xfffffe2c
     7f8:	00797470 	rsbseq	r7, r9, r0, ror r4
     7fc:	43767270 	cmnmi	r6, #112, 4
     800:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0xffffff91
     804:	46617461 	strbtmi	r7, [r1], -r1, ror #8
     808:	516d6f72 	smcpl	55026	; 0xd6f2
     80c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     810:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
     814:	75517765 	ldrbvc	r7, [r1, #-1893]	; 0xfffff89b
     818:	00657565 	rsbeq	r7, r5, r5, ror #10
     81c:	43767270 	cmnmi	r6, #112, 4
     820:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0xffffff91
     824:	54617461 	strbtpl	r7, [r1], #-1121	; 0xfffffb9f
     828:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0xfffffe91
     82c:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     830:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
     834:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xfffff0a1
     838:	52637000 	rsbpl	r7, r3, #0
     83c:	46646165 	strbtmi	r6, [r4], -r5, ror #2
     840:	006d6f72 	rsbeq	r6, sp, r2, ror pc
     844:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     848:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     84c:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     850:	63655263 	cmnvs	r5, #805306374	; 0x30000006
     854:	65766965 	ldrbvs	r6, [r6, #-2405]!	; 0xfffff69b
     858:	4f637000 	svcmi	0x00637000
     85c:	69676972 	stmdbvs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
     860:	526c616e 	rsbpl	r6, ip, #-2147483621	; 0x8000001b
     864:	50646165 	rsbpl	r6, r4, r5, ror #2
     868:	7469736f 	strbtvc	r7, [r9], #-879	; 0xfffffc91
     86c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     870:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 7bc <_start-0xf844>
     874:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
     878:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
     87c:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
     880:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
     884:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
     888:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
     88c:	72656270 	rsbvc	r6, r5, #112, 4
     890:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
     894:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
     898:	4f545265 	svcmi	0x00545265
     89c:	61462d53 	cmpvs	r6, r3, asr sp
     8a0:	2f534674 	svccs	0x00534674
     8a4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     8a8:	534f5452 	movtpl	r5, #62546	; 0xf452
     8ac:	756f532f 	strbvc	r5, [pc, #-815]!	; 585 <_start-0xfa7b>
     8b0:	2f656372 	svccs	0x00656372
     8b4:	75657571 	strbvc	r7, [r5, #-1393]!	; 0xfffffa8f
     8b8:	00632e65 	rsbeq	r2, r3, r5, ror #28
     8bc:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xfffff088
     8c0:	6f6c6672 	svcvs	0x006c6672
     8c4:	756f4377 	strbvc	r4, [pc, #-887]!	; 555 <_start-0xfaab>
     8c8:	7600746e 	strvc	r7, [r0], -lr, ror #8
     8cc:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     8d0:	6c654465 	cfstrdvs	mvd4, [r5], #-404	; 0xfffffe6c
     8d4:	00657465 	rsbeq	r7, r5, r5, ror #8
     8d8:	65486370 	strbvs	r6, [r8, #-880]	; 0xfffffc90
     8dc:	78006461 	stmdavc	r0, {r0, r5, r6, sl, sp, lr}
     8e0:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     8e4:	6e456e4f 	cdpvs	14, 4, cr6, cr5, cr15, {2}
     8e8:	69726574 	ldmdbvs	r2!, {r2, r4, r5, r6, r8, sl, sp, lr}^
     8ec:	7800676e 	stmdavc	r0, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     8f0:	7473754a 	ldrbtvc	r7, [r3], #-1354	; 0xfffffab6
     8f4:	6b656550 	blvs	1959e3c <__bss_end+0x18acb64>
     8f8:	00676e69 	rsbeq	r6, r7, r9, ror #28
     8fc:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     900:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     904:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     908:	6e655363 	cdpvs	3, 6, cr5, cr5, cr3, {3}
     90c:	54780064 	ldrbtpl	r0, [r8], #-100	; 0xffffff9c
     910:	4f656d69 	svcmi	0x00656d69
     914:	79547475 	ldmdbvc	r4, {r0, r2, r4, r5, r6, sl, ip, sp, lr}^
     918:	75006570 	strvc	r6, [r0, #-1392]	; 0xfffffa90
     91c:	74655278 	strbtvc	r5, [r5], #-632	; 0xfffffd88
     920:	006e7275 	rsbeq	r7, lr, r5, ror r2
     924:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     928:	61486575 	hvcvs	34389	; 0x8655
     92c:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
     930:	75517800 	ldrbvc	r7, [r1, #-2048]	; 0xfffff800
     934:	52657565 	rsbpl	r7, r5, #423624704	; 0x19400000
     938:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     93c:	72466576 	subvc	r6, r6, #494927872	; 0x1d800000
     940:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     944:	72700052 	rsbsvc	r0, r0, #82	; 0x52
     948:	51734976 	cmnpl	r3, r6, ror r9
     94c:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     950:	6c6c7546 	cfstr64vs	mvdx7, [ip], #-280	; 0xfffffee8
     954:	4c787500 	cfldr64mi	mvdx7, [r8], #-0
     958:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     95c:	78750068 	ldmdavc	r5!, {r3, r5, r6}^
     960:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     964:	6e654c65 	cdpvs	12, 6, cr4, cr5, cr5, {3}
     968:	00687467 	rsbeq	r7, r8, r7, ror #8
     96c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     970:	6157736b 	cmpvs	r7, fp, ror #6
     974:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     978:	526f5467 	rsbpl	r5, pc, #1728053248	; 0x67000000
     97c:	69656365 	stmdbvs	r5!, {r0, r2, r5, r6, r8, r9, sp, lr}^
     980:	75006576 	strvc	r6, [r0, #-1398]	; 0xfffffa8a
     984:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     988:	654d6575 	strbvs	r6, [sp, #-1397]	; 0xfffffa8b
     98c:	67617373 			; <UNDEFINED> instruction: 0x67617373
     990:	61577365 	cmpvs	r7, r5, ror #6
     994:	6e697469 	cdpvs	4, 6, cr7, cr9, cr9, {3}
     998:	6f724667 	svcvs	0x00724667
     99c:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     9a0:	49767000 	ldmdbmi	r6!, {ip, sp, lr}^
     9a4:	546d6574 	strbtpl	r6, [sp], #-1396	; 0xfffffa8c
     9a8:	6575516f 	ldrbvs	r5, [r5, #-367]!	; 0xfffffe91
     9ac:	78006575 	stmdavc	r0, {r0, r2, r4, r5, r6, r8, sl, sp, lr}
     9b0:	55455551 	strbpl	r5, [r5, #-1361]	; 0xfffffaaf
     9b4:	45780045 	ldrbmi	r0, [r8, #-69]!	; 0xffffffbb
     9b8:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     9bc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     9c0:	00746553 	rsbseq	r6, r4, r3, asr r5
     9c4:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     9c8:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     9cc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
     9d0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     9d4:	4c785478 	cfldrdmi	mvd5, [r8], #-480	; 0xfffffe20
     9d8:	006b636f 	rsbeq	r6, fp, pc, ror #6
     9dc:	65755178 	ldrbvs	r5, [r5, #-376]!	; 0xfffffe88
     9e0:	65476575 	strbvs	r6, [r7, #-1397]	; 0xfffffa8b
     9e4:	6972656e 	ldmdbvs	r2!, {r1, r2, r3, r5, r6, r8, sl, sp, lr}^
     9e8:	65724363 	ldrbvs	r4, [r2, #-867]!	; 0xfffffc9d
     9ec:	00657461 	rsbeq	r7, r5, r1, ror #8
     9f0:	61537875 	cmpvs	r3, r5, ror r8
     9f4:	49646576 	stmdbmi	r4!, {r1, r2, r4, r5, r6, r8, sl, sp, lr}^
     9f8:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     9fc:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0xfffffa8e
     a00:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
     a04:	75007375 	strvc	r7, [r0, #-885]	; 0xfffffc8b
     a08:	73654d78 	cmnvc	r5, #120, 26	; 0x1e00
     a0c:	65676173 	strbvs	r6, [r7, #-371]!	; 0xfffffe8d
     a10:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     a14:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     a18:	42767000 	rsbsmi	r7, r6, #0
     a1c:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
     a20:	51780072 	cmnpl	r8, r2, ror r0
     a24:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     a28:	656e6547 	strbvs	r6, [lr, #-1351]!	; 0xfffffab9
     a2c:	52636972 	rsbpl	r6, r3, #1867776	; 0x1c8000
     a30:	74657365 	strbtvc	r7, [r5], #-869	; 0xfffffc9b
     a34:	6f437800 	svcvs	0x00437800
     a38:	6f507970 	svcvs	0x00507970
     a3c:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     a40:	70006e6f 	andvc	r6, r0, pc, ror #28
     a44:	6e557672 	mrcvs	6, 2, r7, cr5, cr2, {3}
     a48:	6b636f6c 	blvs	18dc800 <__bss_end+0x182f528>
     a4c:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     a50:	52780065 	rsbspl	r0, r8, #101	; 0x65
     a54:	636f4c78 	cmnvs	pc, #120, 24	; 0x7800
     a58:	6370006b 	cmnvs	r0, #107	; 0x6b
     a5c:	6c696154 	stfvse	f6, [r9], #-336	; 0xfffffeb0
     a60:	6f507800 	svcvs	0x00507800
     a64:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
     a68:	78006e6f 	stmdavc	r0, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}
     a6c:	6b736154 	blvs	1cd8fc4 <__bss_end+0x1c2bcec>
     a70:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     a74:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     a78:	65536f54 	ldrbvs	r6, [r3, #-3924]	; 0xfffff0ac
     a7c:	7800646e 	stmdavc	r0, {r1, r2, r3, r5, r6, sl, sp, lr}
     a80:	75657551 	strbvc	r7, [r5, #-1361]!	; 0xfffffaaf
     a84:	7a695365 	bvc	1a55820 <__bss_end+0x19a8548>
     a88:	426e4965 	rsbmi	r4, lr, #1654784	; 0x194000
     a8c:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     a90:	51787000 	cmnpl	r8, r0
     a94:	65756575 	ldrbvs	r6, [r5, #-1397]!	; 0xfffffa8b
     a98:	57637000 	strbpl	r7, [r3, -r0]!
     a9c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
     aa0:	75006f54 	strvc	r6, [r0, #-3924]	; 0xfffff0ac
     aa4:	65744978 	ldrbvs	r4, [r4, #-2424]!	; 0xfffff688
     aa8:	7a69536d 	bvc	1a55864 <__bss_end+0x19a858c>
     aac:	63700065 	cmnvs	r0, #101	; 0x65
     ab0:	6b736154 	blvs	1cd9008 <__bss_end+0x1c2bd30>
     ab4:	656d614e 	strbvs	r6, [sp, #-334]!	; 0xfffffeb2
     ab8:	6b737400 	blvs	1cddac0 <__bss_end+0x1c307e8>
     abc:	6b736154 	blvs	1cd9014 <__bss_end+0x1c2bd3c>
     ac0:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     ac4:	426c6f72 	rsbmi	r6, ip, #456	; 0x1c8
     ac8:	6b636f6c 	blvs	18dc880 <__bss_end+0x182f5a8>
     acc:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     ad0:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     ad4:	754e7465 	strbvc	r7, [lr, #-1125]	; 0xfffffb9b
     ad8:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     adc:	6154664f 	cmpvs	r4, pc, asr #12
     ae0:	00736b73 	rsbseq	r6, r3, r3, ror fp
     ae4:	6f547875 	svcvs	0x00547875
     ae8:	61655270 	smcvs	21792	; 0x5520
     aec:	72507964 	subsvc	r7, r0, #100, 18	; 0x190000
     af0:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     af4:	78007974 	stmdavc	r0, {r2, r4, r5, r6, r8, fp, ip, sp, lr}
     af8:	65686353 	strbvs	r6, [r8, #-851]!	; 0xfffffcad
     afc:	656c7564 	strbvs	r7, [ip, #-1380]!	; 0xfffffa9c
     b00:	6e755272 	mrcvs	2, 3, r5, cr5, cr2, {3}
     b04:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
     b08:	52787000 	rsbspl	r7, r8, #0
     b0c:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
     b10:	6b736154 	blvs	1cd9068 <__bss_end+0x1c2bd90>
     b14:	73694c73 	cmnvc	r9, #29440	; 0x7300
     b18:	76007374 			; <UNDEFINED> instruction: 0x76007374
     b1c:	6b736154 	blvs	1cd9074 <__bss_end+0x1c2bd9c>
     b20:	54746553 	ldrbtpl	r6, [r4], #-1363	; 0xfffffaad
     b24:	4f656d69 	svcmi	0x00656d69
     b28:	74537475 	ldrbvc	r7, [r3], #-1141	; 0xfffffb8b
     b2c:	00657461 	rsbeq	r7, r5, r1, ror #8
     b30:	6c654478 	cfstrdvs	mvd4, [r5], #-480	; 0xfffffe20
     b34:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     b38:	6b736154 	blvs	1cd9090 <__bss_end+0x1c2bdb8>
     b3c:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     b40:	44780031 	ldrbtmi	r0, [r8], #-49	; 0xffffffcf
     b44:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     b48:	61546465 	cmpvs	r4, r5, ror #8
     b4c:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     b50:	00327473 	eorseq	r7, r2, r3, ror r4
     b54:	61506c75 	cmpvs	r0, r5, ror ip
     b58:	656d6172 	strbvs	r6, [sp, #-370]!	; 0xfffffe8e
     b5c:	73726574 	cmnvc	r2, #116, 10	; 0x1d000000
     b60:	76727000 	ldrbtvc	r7, [r2], -r0
     b64:	6f6c6c41 	svcvs	0x006c6c41
     b68:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
     b6c:	41424354 	cmpmi	r2, r4, asr r3
     b70:	7453646e 	ldrbvc	r6, [r3], #-1134	; 0xfffffb92
     b74:	006b6361 	rsbeq	r6, fp, r1, ror #6
     b78:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
     b7c:	7465536b 	strbtvc	r5, [r5], #-875	; 0xfffffc95
     b80:	6c707041 	ldclvs	0, cr7, [r0], #-260	; 0xfffffefc
     b84:	74616369 	strbtvc	r6, [r1], #-873	; 0xfffffc97
     b88:	546e6f69 	strbtpl	r6, [lr], #-3945	; 0xfffff097
     b8c:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
     b90:	75006761 	strvc	r6, [r0, #-1889]	; 0xfffff89f
     b94:	73694d78 	cmnvc	r9, #120, 26	; 0x1e00
     b98:	54646573 	strbtpl	r6, [r4], #-1395	; 0xfffffa8d
     b9c:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     ba0:	6b737400 	blvs	1cddba8 <__bss_end+0x1c308d0>
     ba4:	00424354 	subeq	r4, r2, r4, asr r3
     ba8:	61547870 	cmpvs	r4, r0, ror r8
     bac:	6f546b73 	svcvs	0x00546b73
     bb0:	75736552 	ldrbvc	r6, [r3, #-1362]!	; 0xfffffaae
     bb4:	7800656d 	stmdavc	r0, {r0, r2, r3, r5, r6, r8, sl, sp, lr}
     bb8:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
     bbc:	71655264 	cmnvc	r5, r4, ror #4
     bc0:	65726975 	ldrbvs	r6, [r2, #-2421]!	; 0xfffff68b
     bc4:	78700064 	ldmdavc	r0!, {r2, r5, r6}^
     bc8:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
     bcc:	656b636f 	strbvs	r6, [fp, #-879]!	; 0xfffffc91
     bd0:	42435464 	submi	r5, r3, #100, 8	; 0x64000000
     bd4:	53737500 	cmnpl	r3, #0, 10
     bd8:	6b636174 	blvs	18d91b0 <__bss_end+0x182bed8>
     bdc:	74706544 	ldrbtvc	r6, [r0], #-1348	; 0xfffffabc
     be0:	53780068 	cmnpl	r8, #104	; 0x68
     be4:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     be8:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     bec:	6b736154 	blvs	1cd9144 <__bss_end+0x1c2be6c>
     bf0:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     bf4:	61547800 	cmpvs	r4, r0, lsl #16
     bf8:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
     bfc:	63695474 	cmnvs	r9, #116, 8	; 0x74000000
     c00:	756f436b 	strbvc	r4, [pc, #-875]!	; 89d <_start-0xf763>
     c04:	7246746e 	subvc	r7, r6, #1845493760	; 0x6e000000
     c08:	53496d6f 	movtpl	r6, #40303	; 0x9d6f
     c0c:	50780052 	rsbspl	r0, r8, r2, asr r0
     c10:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
     c14:	6552676e 	ldrbvs	r6, [r2, #-1902]	; 0xfffff892
     c18:	4c796461 	cfldrdmi	mvd6, [r9], #-388	; 0xfffffe7c
     c1c:	00747369 	rsbseq	r7, r4, r9, ror #6
     c20:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     c24:	5473496b 	ldrbtpl	r4, [r3], #-2411	; 0xfffff695
     c28:	536b7361 	cmnpl	fp, #-2080374783	; 0x84000001
     c2c:	65707375 	ldrbvs	r7, [r0, #-885]!	; 0xfffffc8b
     c30:	6465646e 	strbtvs	r6, [r5], #-1134	; 0xfffffb92
     c34:	61547800 	cmpvs	r4, r0, lsl #16
     c38:	65476b73 	strbvs	r6, [r7, #-2931]	; 0xfffff48d
     c3c:	70704174 	rsbsvc	r4, r0, r4, ror r1
     c40:	6163696c 	cmnvs	r3, ip, ror #18
     c44:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
     c48:	6b736154 	blvs	1cd91a0 <__bss_end+0x1c2bec8>
     c4c:	00676154 	rsbeq	r6, r7, r4, asr r1
     c50:	73694d78 	cmnvc	r9, #120, 26	; 0x1e00
     c54:	59646573 	stmdbpl	r4!, {r0, r1, r4, r5, r6, r8, sl, sp, lr}^
     c58:	646c6569 	strbtvs	r6, [ip], #-1385	; 0xfffffa97
     c5c:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     c60:	7355706f 	cmpvc	r5, #111	; 0x6f
     c64:	72506465 	subsvc	r6, r0, #1694498816	; 0x65000000
     c68:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     c6c:	76007974 			; <UNDEFINED> instruction: 0x76007974
     c70:	6b736154 	blvs	1cd91c8 <__bss_end+0x1c2bef0>
     c74:	70737553 	rsbsvc	r7, r3, r3, asr r5
     c78:	41646e65 	cmnmi	r4, r5, ror #28
     c7c:	78006c6c 	stmdavc	r0, {r2, r3, r5, r6, sl, fp, sp, lr}
     c80:	6b736154 	blvs	1cd91d8 <__bss_end+0x1c2bf00>
     c84:	646e6148 	strbtvs	r6, [lr], #-328	; 0xfffffeb8
     c88:	7000656c 	andvc	r6, r0, ip, ror #10
     c8c:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
     c90:	6f54736b 	svcvs	0x0054736b
     c94:	74696157 	strbtvc	r6, [r9], #-343	; 0xfffffea9
     c98:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     c9c:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     ca0:	656c6544 	strbvs	r6, [ip, #-1348]!	; 0xfffffabc
     ca4:	00646574 	rsbeq	r6, r4, r4, ror r5
     ca8:	63695478 	cmnvs	r9, #120, 8	; 0x78000000
     cac:	756f436b 	strbvc	r4, [pc, #-875]!	; 949 <_start-0xf6b7>
     cb0:	7600746e 	strvc	r7, [r0], -lr, ror #8
     cb4:	6b736154 	blvs	1cd920c <__bss_end+0x1c2bf34>
     cb8:	53646e45 	cmnpl	r4, #1104	; 0x450
     cbc:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     cc0:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     cc4:	54787500 	ldrbtpl	r7, [r8], #-1280	; 0xfffffb00
     cc8:	506b7361 	rsbpl	r7, fp, r1, ror #6
     ccc:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     cd0:	47797469 	ldrbmi	r7, [r9, -r9, ror #8]!
     cd4:	70007465 	andvc	r7, r0, r5, ror #8
     cd8:	65764f78 	ldrbvs	r4, [r6, #-3960]!	; 0xfffff088
     cdc:	6f6c6672 	svcvs	0x006c6672
     ce0:	6c654477 	cfstrdvs	mvd4, [r5], #-476	; 0xfffffe24
     ce4:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
     ce8:	6b736154 	blvs	1cd9240 <__bss_end+0x1c2bf68>
     cec:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     cf0:	61547600 	cmpvs	r4, r0, lsl #12
     cf4:	6c506b73 	mrrcvs	11, 7, r6, r0, cr3
     cf8:	4f656361 	svcmi	0x00656361
     cfc:	6576456e 	ldrbvs	r4, [r6, #-1390]!	; 0xfffffa92
     d00:	694c746e 	stmdbvs	ip, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     d04:	76007473 			; <UNDEFINED> instruction: 0x76007473
     d08:	6b736154 	blvs	1cd9260 <__bss_end+0x1c2bf88>
     d0c:	616c6544 	cmnvs	ip, r4, asr #10
     d10:	78750079 	ldmdavc	r5!, {r0, r3, r4, r5, r6}^
     d14:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     d18:	50746e65 	rsbspl	r6, r4, r5, ror #28
     d1c:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     d20:	00797469 	rsbseq	r7, r9, r9, ror #8
     d24:	61547870 	cmpvs	r4, r0, ror r8
     d28:	78006b73 	stmdavc	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
     d2c:	6b736154 	blvs	1cd9284 <__bss_end+0x1c2bfac>
     d30:	69615773 	stmdbvs	r1!, {r0, r1, r4, r5, r6, r8, r9, sl, ip, lr}^
     d34:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
     d38:	6d726554 	cfldr64vs	mvdx6, [r2, #-336]!	; 0xfffffeb0
     d3c:	74616e69 	strbtvc	r6, [r1], #-3689	; 0xfffff197
     d40:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     d44:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     d48:	6d65526b 	sfmvs	f5, 2, [r5, #-428]!	; 0xfffffe54
     d4c:	4665766f 	strbtmi	r7, [r5], -pc, ror #12
     d50:	456d6f72 	strbmi	r6, [sp, #-3954]!	; 0xfffff08e
     d54:	746e6576 	strbtvc	r6, [lr], #-1398	; 0xfffffa8a
     d58:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
     d5c:	76727000 	ldrbtvc	r7, [r2], -r0
     d60:	656c6449 	strbvs	r6, [ip, #-1097]!	; 0xfffffbb7
     d64:	6b736154 	blvs	1cd92bc <__bss_end+0x1c2bfe4>
     d68:	54647000 	strbtpl	r7, [r4], #-0
     d6c:	5f4b5341 	svcpl	0x004b5341
     d70:	4b4f4f48 	blmi	13d4a98 <__bss_end+0x13277c0>
     d74:	444f435f 	strbmi	r4, [pc], #-863	; d7c <_start-0xf284>
     d78:	4c780045 	ldclmi	0, cr0, [r8], #-276	; 0xfffffeec
     d7c:	49747369 	ldmdbmi	r4!, {r0, r3, r5, r6, r8, r9, ip, sp, lr}^
     d80:	706d4573 	rsbvc	r4, sp, r3, ror r5
     d84:	70007974 	andvc	r7, r0, r4, ror r9
     d88:	6f6f4878 	svcvs	0x006f4878
     d8c:	6e75466b 	cdpvs	6, 7, cr4, cr5, cr11, {3}
     d90:	6f697463 	svcvs	0x00697463
     d94:	7870006e 	ldmdavc	r0!, {r1, r2, r3, r5, r6}^
     d98:	5477654e 	ldrbtpl	r6, [r7], #-1358	; 0xfffffab2
     d9c:	70004243 	andvc	r4, r0, r3, asr #4
     da0:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     da4:	646f436b 	strbtvs	r4, [pc], #-875	; dac <_start-0xf254>
     da8:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
     dac:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     db0:	69547465 	ldmdbvs	r4, {r0, r2, r5, r6, sl, ip, sp, lr}^
     db4:	6f436b63 	svcvs	0x00436b63
     db8:	00746e75 	rsbseq	r6, r4, r5, ror lr
     dbc:	78654e78 	stmdavc	r5!, {r3, r4, r5, r6, r9, sl, fp, lr}^
     dc0:	73615474 	cmnvc	r1, #116, 8	; 0x74000000
     dc4:	626e556b 	rsbvs	r5, lr, #448790528	; 0x1ac00000
     dc8:	6b636f6c 	blvs	18dcb80 <__bss_end+0x182f8a8>
     dcc:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     dd0:	4c6c7500 	cfstr64mi	mvdx7, [ip], #-0
     dd4:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xfffff19b
     dd8:	426e4968 	rsbmi	r4, lr, #104, 18	; 0x1a0000
     ddc:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
     de0:	4e787500 	cdpmi	5, 7, cr7, cr8, cr0, {0}
     de4:	72507765 	subsvc	r7, r0, #26476544	; 0x1940000
     de8:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     dec:	70007974 	andvc	r7, r0, r4, ror r9
     df0:	6d614e63 	stclvs	14, cr4, [r1, #-396]!	; 0xfffffe74
     df4:	78700065 	ldmdavc	r0!, {r0, r2, r5, r6}^
     df8:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     dfc:	0074754f 	rsbseq	r7, r4, pc, asr #10
     e00:	61547875 	cmpvs	r4, r5, ror r8
     e04:	754e6b73 	strbvc	r6, [lr, #-2931]	; 0xfffff48d
     e08:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
     e0c:	61547600 	cmpvs	r4, r0, lsl #12
     e10:	72506b73 	subsvc	r6, r0, #117760	; 0x1cc00
     e14:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     e18:	65537974 	ldrbvs	r7, [r3, #-2420]	; 0xfffff68c
     e1c:	4d780074 	ldclmi	0, cr0, [r8, #-464]!	; 0xfffffe30
     e20:	726f6d65 	rsbvc	r6, pc, #6464	; 0x1940
     e24:	67655279 			; <UNDEFINED> instruction: 0x67655279
     e28:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     e2c:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
     e30:	636e496b 	cmnvs	lr, #1753088	; 0x1ac000
     e34:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0xfffffa8e
     e38:	6954746e 	ldmdbvs	r4, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
     e3c:	78006b63 	stmdavc	r0, {r0, r1, r5, r6, r8, r9, fp, sp, lr}
     e40:	756f6853 	strbvc	r6, [pc, #-2131]!	; 5f5 <_start-0xfa0b>
     e44:	6544646c 	strbvs	r6, [r4, #-1132]	; 0xfffffb94
     e48:	0079616c 	rsbseq	r6, r9, ip, ror #2
     e4c:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
     e50:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     e54:	73696c61 	cmnvc	r9, #24832	; 0x6100
     e58:	42435465 	submi	r5, r3, #1694498816	; 0x65000000
     e5c:	69726156 	ldmdbvs	r2!, {r1, r2, r4, r6, r8, sp, lr}^
     e60:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
     e64:	4d780073 	ldclmi	0, cr0, [r8, #-460]!	; 0xfffffe34
     e68:	524f4d45 	subpl	r4, pc, #4416	; 0x1140
     e6c:	45525f59 	ldrbmi	r5, [r2, #-3929]	; 0xfffff0a7
     e70:	4e4f4947 	vmlsmi.f16	s9, s30, s14	; <UNPREDICTABLE>
     e74:	61547600 	cmpvs	r4, r0, lsl #12
     e78:	65446b73 	strbvs	r6, [r4, #-2931]	; 0xfffff48d
     e7c:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
     e80:	61547800 	cmpvs	r4, r0, lsl #16
     e84:	61436b73 	hvcvs	14003	; 0x36b3
     e88:	70416c6c 	subvc	r6, r1, ip, ror #24
     e8c:	63696c70 	cmnvs	r9, #112, 24	; 0x7000
     e90:	6f697461 	svcvs	0x00697461
     e94:	7361546e 	cmnvc	r1, #1845493760	; 0x6e000000
     e98:	6f6f486b 	svcvs	0x006f486b
     e9c:	5478006b 	ldrbtpl	r0, [r8], #-107	; 0xffffff95
     ea0:	476b7361 	strbmi	r7, [fp, -r1, ror #6]!
     ea4:	72656e65 	rsbvc	r6, r5, #1616	; 0x650
     ea8:	72436369 	subvc	r6, r3, #-1543503871	; 0xa4000001
     eac:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
     eb0:	61547600 	cmpvs	r4, r0, lsl #12
     eb4:	77536b73 			; <UNDEFINED> instruction: 0x77536b73
     eb8:	68637469 	stmdavs	r3!, {r0, r3, r5, r6, sl, ip, sp, lr}^
     ebc:	746e6f43 	strbtvc	r6, [lr], #-3907	; 0xfffff0bd
     ec0:	00747865 	rsbseq	r7, r4, r5, ror #16
     ec4:	6d754e78 	ldclvs	14, cr4, [r5, #-480]!	; 0xfffffe20
     ec8:	764f664f 	strbvc	r6, [pc], -pc, asr #12
     ecc:	6c667265 	sfmvs	f7, 2, [r6], #-404	; 0xfffffe6c
     ed0:	0073776f 	rsbseq	r7, r3, pc, ror #14
     ed4:	61547870 	cmpvs	r4, r0, ror r8
     ed8:	61546b73 	cmpvs	r4, r3, ror fp
     edc:	54780067 	ldrbtpl	r0, [r8], #-103	; 0xffffff99
     ee0:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
     ee4:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     ee8:	6c6c4165 	stfvse	f4, [ip], #-404	; 0xfffffe6c
     eec:	44787000 	ldrbtmi	r7, [r8], #-0
     ef0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     ef4:	61546465 	cmpvs	r4, r5, ror #8
     ef8:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     efc:	70007473 	andvc	r7, r0, r3, ror r4
     f00:	61745378 	cmnvs	r4, r8, ror r3
     f04:	2f006b63 	svccs	0x00006b63
     f08:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
     f0c:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
     f10:	2f796361 	svccs	0x00796361
     f14:	61786548 	cmnvs	r8, r8, asr #10
     f18:	2f686372 	svccs	0x00686372
     f1c:	2f637273 	svccs	0x00637273
     f20:	70736152 	rsbsvc	r6, r3, r2, asr r1
     f24:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
     f28:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
     f2c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
     f30:	534f5452 	movtpl	r5, #62546	; 0xf452
     f34:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
     f38:	462f5346 	strtmi	r5, [pc], -r6, asr #6
     f3c:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
     f40:	2f534f54 	svccs	0x00534f54
     f44:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
     f48:	742f6563 	strtvc	r6, [pc], #-1379	; f50 <_start-0xf0b0>
     f4c:	736b7361 	cmnvc	fp, #-2080374783	; 0x84000001
     f50:	7800632e 	stmdavc	r0, {r1, r2, r3, r5, r8, r9, sp, lr}
     f54:	6b736154 	blvs	1cd94ac <__bss_end+0x1c2c1d4>
     f58:	63656843 	cmnvs	r5, #4390912	; 0x430000
     f5c:	726f466b 	rsbvc	r4, pc, #112197632	; 0x6b00000
     f60:	656d6954 	strbvs	r6, [sp, #-2388]!	; 0xfffff6ac
     f64:	0074754f 	rsbseq	r7, r4, pc, asr #10
     f68:	61547870 	cmpvs	r4, r0, ror r8
     f6c:	6f546b73 	svcvs	0x00546b73
     f70:	70737553 	rsbsvc	r7, r3, r3, asr r5
     f74:	00646e65 	rsbeq	r6, r4, r5, ror #28
     f78:	72507870 	subsvc	r7, r0, #112, 16	; 0x700000
     f7c:	6f697665 	svcvs	0x00697665
     f80:	61577375 	cmpvs	r7, r5, ror r3
     f84:	6954656b 	ldmdbvs	r4, {r0, r1, r3, r5, r6, r8, sl, sp, lr}^
     f88:	7000656d 	andvc	r6, r0, sp, ror #10
     f8c:	73615478 	cmnvc	r1, #120, 8	; 0x78000000
     f90:	446f546b 	strbtmi	r5, [pc], #-1131	; f98 <_start-0xf068>
     f94:	74656c65 	strbtvc	r6, [r5], #-3173	; 0xfffff39b
     f98:	54780065 	ldrbtpl	r0, [r8], #-101	; 0xffffff9b
     f9c:	526b7361 	rsbpl	r7, fp, #-2080374783	; 0x84000001
     fa0:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     fa4:	6f724665 	svcvs	0x00724665
     fa8:	5253496d 	subspl	r4, r3, #1785856	; 0x1b4000
     fac:	61547600 	cmpvs	r4, r0, lsl #12
     fb0:	694d6b73 	stmdbvs	sp, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
     fb4:	64657373 	strbtvs	r7, [r5], #-883	; 0xfffffc8d
     fb8:	6c656959 			; <UNDEFINED> instruction: 0x6c656959
     fbc:	54780064 	ldrbtpl	r0, [r8], #-100	; 0xffffff9c
     fc0:	736b6369 	cmnvc	fp, #-1543503871	; 0xa4000001
     fc4:	61547600 	cmpvs	r4, r0, lsl #12
     fc8:	74536b73 	ldrbvc	r6, [r3], #-2931	; 0xfffff48d
     fcc:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     fd0:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
     fd4:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
     fd8:	42767000 	rsbsmi	r7, r6, #0
     fdc:	41657361 	cmnmi	r5, r1, ror #6
     fe0:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
     fe4:	76007373 			; <UNDEFINED> instruction: 0x76007373
     fe8:	6b736154 	blvs	1cd9540 <__bss_end+0x1c2c268>
     fec:	616c6544 	cmnvs	ip, r4, asr #10
     ff0:	746e5579 	strbtvc	r5, [lr], #-1401	; 0xfffffa87
     ff4:	70006c69 	andvc	r6, r0, r9, ror #24
     ff8:	65447672 	strbvs	r7, [r4, #-1650]	; 0xfffff98e
     ffc:	6574656c 	ldrbvs	r6, [r4, #-1388]!	; 0xfffffa94
    1000:	00424354 	subeq	r4, r2, r4, asr r3
    1004:	73615476 	cmnvc	r1, #1979711488	; 0x76000000
    1008:	7375536b 	cmnvc	r5, #-1409286143	; 0xac000001
    100c:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    1010:	6c417800 	mcrrvs	8, 0, r7, r1, cr0
    1014:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
    1018:	65695979 	strbvs	r5, [r9, #-2425]!	; 0xfffff687
    101c:	6465646c 	strbtvs	r6, [r5], #-1132	; 0xfffffb94
    1020:	50767000 	rsbspl	r7, r6, r0
    1024:	6d617261 	sfmvs	f7, 2, [r1, #-388]!	; 0xfffffe7c
    1028:	72657465 	rsbvc	r7, r5, #1694498816	; 0x65000000
    102c:	65527800 	ldrbvs	r7, [r2, #-2048]	; 0xfffff800
    1030:	6e6f6967 	vnmulvs.f16	s13, s30, s15	; <UNPREDICTABLE>
    1034:	72700073 	rsbsvc	r0, r0, #115	; 0x73
    1038:	64644176 	strbtvs	r4, [r4], #-374	; 0xfffffe8a
    103c:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
    1040:	54746e65 	ldrbtpl	r6, [r4], #-3685	; 0xfffff19b
    1044:	546b7361 	strbtpl	r7, [fp], #-865	; 0xfffffc9f
    1048:	6c65446f 	cfstrdvs	mvd4, [r5], #-444	; 0xfffffe44
    104c:	64657961 	strbtvs	r7, [r5], #-2401	; 0xfffff69f
    1050:	7473694c 	ldrbtvc	r6, [r3], #-2380	; 0xfffff6b4
    1054:	43787500 	cmnmi	r8, #0, 10
    1058:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0xfffffd8b
    105c:	754e746e 	strbvc	r7, [lr, #-1134]	; 0xfffffb92
    1060:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
    1064:	6154664f 	cmpvs	r4, pc, asr #12
    1068:	00736b73 	rsbseq	r6, r3, r3, ror fp
    106c:	6d695478 	cfstrdvs	mvd5, [r9, #-480]!	; 0xfffffe20
    1070:	636e4965 	cmnvs	lr, #1654784	; 0x194000
    1074:	656d6572 	strbvs	r6, [sp, #-1394]!	; 0xfffffa8e
    1078:	7000746e 	andvc	r7, r0, lr, ror #8
    107c:	42435478 	submi	r5, r3, #120, 8	; 0x78000000
    1080:	53787500 	cmnpl	r8, #0, 10
    1084:	64656863 	strbtvs	r6, [r5], #-2147	; 0xfffff79d
    1088:	72656c75 	rsbvc	r6, r5, #29952	; 0x7500
    108c:	70737553 	rsbsvc	r7, r3, r3, asr r5
    1090:	65646e65 	strbvs	r6, [r4, #-3685]!	; 0xfffff19b
    1094:	75700064 	ldrbvc	r0, [r0, #-100]!	; 0xffffff9c
    1098:	61745378 	cmnvs	r4, r8, ror r3
    109c:	75426b63 	strbvc	r6, [r2, #-2915]	; 0xfffff49d
    10a0:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    10a4:	61547600 	cmpvs	r4, r0, lsl #12
    10a8:	65526b73 	ldrbvs	r6, [r2, #-2931]	; 0xfffff48d
    10ac:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0xfffffa8d
    10b0:	76727000 	ldrbtvc	r7, [r2], -r0
    10b4:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    10b8:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
    10bc:	61546573 	cmpvs	r4, r3, ror r5
    10c0:	694c6b73 	stmdbvs	ip, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}^
    10c4:	00737473 	rsbseq	r7, r3, r3, ror r4
    10c8:	72437870 	subvc	r7, r3, #112, 16	; 0x700000
    10cc:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    10d0:	73615464 	cmnvc	r1, #100, 8	; 0x64000000
    10d4:	7270006b 	rsbsvc	r0, r0, #107	; 0x6b
    10d8:	65684376 	strbvs	r4, [r8, #-886]!	; 0xfffffc8a
    10dc:	61546b63 	cmpvs	r4, r3, ror #22
    10e0:	57736b73 			; <UNDEFINED> instruction: 0x57736b73
    10e4:	69746961 	ldmdbvs	r4!, {r0, r5, r6, r8, fp, sp, lr}^
    10e8:	6554676e 	ldrbvs	r6, [r4, #-1902]	; 0xfffff892
    10ec:	6e696d72 	mcrvs	13, 3, r6, cr9, cr2, {3}
    10f0:	6f697461 	svcvs	0x00697461
    10f4:	6550006e 	ldrbvs	r0, [r0, #-110]	; 0xffffff92
    10f8:	6e69646e 	cdpvs	4, 6, cr6, cr9, cr14, {3}
    10fc:	44003167 	strmi	r3, [r0], #-359	; 0xfffffe99
    1100:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    1104:	6142656c 	cmpvs	r2, ip, ror #10
    1108:	00636973 	rsbeq	r6, r3, r3, ror r9
    110c:	324d4342 	subcc	r4, sp, #134217729	; 0x8000001
    1110:	5f353338 	svcpl	0x00353338
    1114:	43544e49 	cmpmi	r4, #1168	; 0x490
    1118:	4745525f 	smlsldmi	r5, r5, pc, r2	; <UNPREDICTABLE>
    111c:	49460053 	stmdbmi	r6, {r0, r1, r4, r6}^
    1120:	72744351 	rsbsvc	r4, r4, #1140850689	; 0x44000001
    1124:	7269006c 	rsbvc	r0, r9, #108	; 0x6c
    1128:	67655271 			; <UNDEFINED> instruction: 0x67655271
    112c:	65747369 	ldrbvs	r7, [r4, #-873]!	; 0xfffffc97
    1130:	72690072 	rsbvc	r0, r9, #114	; 0x72
    1134:	6f6c4271 	svcvs	0x006c4271
    1138:	75006b63 	strvc	r6, [r0, #-2915]	; 0xfffff49d
    113c:	73614d6c 	cmnvc	r1, #108, 26	; 0x1b00
    1140:	5364656b 	cmnpl	r4, #448790528	; 0x1ac00000
    1144:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0xfffffe8c
    1148:	6e650073 	mcrvs	0, 3, r0, cr5, cr3, {3}
    114c:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1150:	61680064 	cmnvs	r8, r4, rrx
    1154:	656c646e 	strbvs	r6, [ip, #-1134]!	; 0xfffffb92
    1158:	676e6152 			; <UNDEFINED> instruction: 0x676e6152
    115c:	616d0065 	cmnvs	sp, r5, rrx
    1160:	69006b73 	stmdbvs	r0, {r0, r1, r4, r5, r6, r8, r9, fp, sp, lr}
    1164:	69447172 	stmdbvs	r4, {r1, r4, r5, r6, r8, ip, sp, lr}^
    1168:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
    116c:	66700065 	ldrbtvs	r0, [r0], -r5, rrx
    1170:	6e61486e 	cdpvs	8, 6, cr4, cr1, cr14, {3}
    1174:	72656c64 	rsbvc	r6, r5, #100, 24	; 0x6400
    1178:	6f682f00 	svcvs	0x00682f00
    117c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; fd0 <_start-0xf030>
    1180:	63616e75 	cmnvs	r1, #1872	; 0x750
    1184:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    1188:	63726178 	cmnvs	r2, #120, 2
    118c:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    1190:	61522f63 	cmpvs	r2, r3, ror #30
    1194:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1198:	50797272 	rsbspl	r7, r9, r2, ror r2
    119c:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    11a0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    11a4:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    11a8:	53467461 	movtpl	r7, #25697	; 0x6461
    11ac:	6d65442f 	cfstrdvs	mvd4, [r5, #-188]!	; 0xffffff44
    11b0:	72442f6f 	subvc	r2, r4, #444	; 0x1bc
    11b4:	72657669 	rsbvc	r7, r5, #110100480	; 0x6900000
    11b8:	72692f73 	rsbvc	r2, r9, #460	; 0x1cc
    11bc:	00632e71 	rsbeq	r2, r3, r1, ror lr
    11c0:	48717269 	ldmdami	r1!, {r0, r3, r5, r6, r9, ip, sp, lr}^
    11c4:	6c646e61 	stclvs	14, cr6, [r4], #-388	; 0xfffffe7c
    11c8:	45007265 	strmi	r7, [r0, #-613]	; 0xfffffd9b
    11cc:	6c62616e 	stfvse	f6, [r2], #-440	; 0xfffffe48
    11d0:	44003265 	strmi	r3, [r0], #-613	; 0xfffffd9b
    11d4:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    11d8:	0031656c 	eorseq	r6, r1, ip, ror #10
    11dc:	61736944 	cmnvs	r3, r4, asr #18
    11e0:	32656c62 	rsbcc	r6, r5, #25088	; 0x6200
    11e4:	565f6700 	ldrbpl	r6, [pc], -r0, lsl #14
    11e8:	6f746365 	svcvs	0x00746365
    11ec:	62615472 	rsbvs	r5, r1, #1912602624	; 0x72000000
    11f0:	6900656c 	stmdbvs	r0, {r2, r3, r5, r6, r8, sl, sp, lr}
    11f4:	6e457172 	mcrvs	1, 2, r7, cr5, cr2, {3}
    11f8:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    11fc:	5f4e4600 	svcpl	0x004e4600
    1200:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xfffff1b7
    1204:	50555252 	subspl	r5, r5, r2, asr r2
    1208:	41485f54 	cmpmi	r8, r4, asr pc
    120c:	454c444e 	strbmi	r4, [ip, #-1102]	; 0xfffffbb2
    1210:	4e490052 	mcrmi	0, 2, r0, cr9, cr2, {2}
    1214:	52524554 	subspl	r4, r2, #84, 10	; 0x15000000
    1218:	5f545055 	svcpl	0x00545055
    121c:	54434556 	strbpl	r4, [r3], #-1366	; 0xfffffaaa
    1220:	7000524f 	andvc	r5, r0, pc, asr #4
    1224:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1228:	5000676e 	andpl	r6, r0, lr, ror #14
    122c:	69646e65 	stmdbvs	r4!, {r0, r2, r5, r6, r9, sl, fp, sp, lr}^
    1230:	0032676e 	eorseq	r6, r2, lr, ror #14
    1234:	42515249 	subsmi	r5, r1, #-1879048188	; 0x90000004
    1238:	63697361 	cmnvs	r9, #-2080374783	; 0x84000001
    123c:	71726900 	cmnvc	r2, r0, lsl #18
    1240:	6c626e55 	stclvs	14, cr6, [r2], #-340	; 0xfffffeac
    1244:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1248:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    124c:	6142656c 	cmpvs	r2, ip, ror #10
    1250:	00636973 	rsbeq	r6, r3, r3, ror r9
    1254:	62616e45 	rsbvs	r6, r1, #1104	; 0x450
    1258:	0031656c 	eorseq	r6, r1, ip, ror #10
    125c:	45535047 	ldrbmi	r5, [r3, #-71]	; 0xffffffb9
    1260:	43420054 	movtmi	r0, #8276	; 0x2054
    1264:	3338324d 	teqcc	r8, #-805306364	; 0xd0000004
    1268:	50475f35 	subpl	r5, r7, r5, lsr pc
    126c:	525f4f49 	subspl	r4, pc, #292	; 0x124
    1270:	00534745 	subseq	r4, r3, r5, asr #14
    1274:	6d657469 	cfstrdvs	mvd7, [r5, #-420]!	; 0xfffffe5c
    1278:	6e697000 	cdpvs	0, 6, cr7, cr9, cr0, {0}
    127c:	006d754e 	rsbeq	r7, sp, lr, asr #10
    1280:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
    1284:	6f697047 	svcvs	0x00697047
    1288:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    128c:	6f697047 	svcvs	0x00697047
    1290:	65726944 	ldrbvs	r6, [r2, #-2372]!	; 0xfffff6bc
    1294:	6f697463 	svcvs	0x00697463
    1298:	5047006e 	subpl	r0, r7, lr, rrx
    129c:	00524c43 	subseq	r4, r2, r3, asr #24
    12a0:	45485047 	strbmi	r5, [r8, #-71]	; 0xffffffb9
    12a4:	4544004e 	strbmi	r0, [r4, #-78]	; 0xffffffb2
    12a8:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    12ac:	5349525f 	movtpl	r5, #37471	; 0x925f
    12b0:	5f474e49 	svcpl	0x00474e49
    12b4:	4e595341 	cdpmi	3, 5, cr5, cr9, cr1, {2}
    12b8:	45440043 	strbmi	r0, [r4, #-67]	; 0xffffffbd
    12bc:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    12c0:	4c41465f 	mcrrmi	6, 5, r4, r1, cr15
    12c4:	474e494c 	strbmi	r4, [lr, -ip, asr #18]
    12c8:	5953415f 	ldmdbpl	r3, {r0, r1, r2, r3, r4, r6, r8, lr}^
    12cc:	4300434e 	movwmi	r4, #846	; 0x34e
    12d0:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    12d4:	6f697047 	svcvs	0x00697047
    12d8:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xfffff1b7
    12dc:	70757272 	rsbsvc	r7, r5, r2, ror r2
    12e0:	50470074 	subpl	r0, r7, r4, ror r0
    12e4:	4e454641 	cdpmi	6, 4, cr4, cr5, cr1, {2}
    12e8:	616e4500 	cmnvs	lr, r0, lsl #10
    12ec:	47656c62 	strbmi	r6, [r5, -r2, ror #24]!
    12f0:	446f6970 	strbtmi	r6, [pc], #-2416	; 12f8 <_start-0xed08>
    12f4:	63657465 	cmnvs	r5, #1694498816	; 0x65000000
    12f8:	50470074 	subpl	r0, r7, r4, ror r0
    12fc:	00445550 	subeq	r5, r4, r0, asr r5
    1300:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    1304:	545f5443 	ldrbpl	r5, [pc], #-1091	; 130c <_start-0xecf4>
    1308:	00455059 	subeq	r5, r5, r9, asr r0
    130c:	566e6970 			; <UNDEFINED> instruction: 0x566e6970
    1310:	47006c61 	strmi	r6, [r0, -r1, ror #24]
    1314:	45524150 	ldrbmi	r4, [r2, #-336]	; 0xfffffeb0
    1318:	682f004e 	stmdavs	pc!, {r1, r2, r3, r6}	; <UNPREDICTABLE>
    131c:	2f656d6f 	svccs	0x00656d6f
    1320:	616e756c 	cmnvs	lr, ip, ror #10
    1324:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1328:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
    132c:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
    1330:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
    1334:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1338:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    133c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1340:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1344:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1348:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    134c:	65442f53 	strbvs	r2, [r4, #-3923]	; 0xfffff0ad
    1350:	442f6f6d 	strtmi	r6, [pc], #-3949	; 1358 <_start-0xeca8>
    1354:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
    1358:	672f7372 			; <UNDEFINED> instruction: 0x672f7372
    135c:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
    1360:	50470063 	subpl	r0, r7, r3, rrx
    1364:	445f4f49 	ldrbmi	r4, [pc], #-3913	; 136c <_start-0xec94>
    1368:	47005249 	strmi	r5, [r0, -r9, asr #4]
    136c:	4e454650 	mcrmi	6, 2, r4, cr5, cr0, {2}
    1370:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
    1374:	4e495f4f 	cdpmi	15, 4, cr5, cr9, cr15, {2}
    1378:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    137c:	5f544345 	svcpl	0x00544345
    1380:	48474948 	stmdami	r7, {r3, r6, r8, fp, lr}^
    1384:	54454400 	strbpl	r4, [r5], #-1024	; 0xfffffc00
    1388:	5f544345 	svcpl	0x00544345
    138c:	454e4f4e 	strbmi	r4, [lr, #-3918]	; 0xfffff0b2
    1390:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
    1394:	53004e45 	movwpl	r4, #3653	; 0xe45
    1398:	70477465 	subvc	r7, r7, r5, ror #8
    139c:	75466f69 	strbvc	r6, [r6, #-3945]	; 0xfffff097
    13a0:	6974636e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    13a4:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
    13a8:	44555050 	ldrbmi	r5, [r5], #-80	; 0xffffffb0
    13ac:	004b4c43 	subeq	r4, fp, r3, asr #24
    13b0:	45544544 	ldrbmi	r4, [r4, #-1348]	; 0xfffffabc
    13b4:	525f5443 	subspl	r5, pc, #1124073472	; 0x43000000
    13b8:	4e495349 	cdpmi	3, 4, cr5, cr9, cr9, {2}
    13bc:	45440047 	strbmi	r0, [r4, #-71]	; 0xffffffb9
    13c0:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    13c4:	574f4c5f 	smlsldpl	r4, pc, pc, ip	; <UNPREDICTABLE>
    13c8:	4c504700 	mrrcmi	7, 0, r4, r0, cr0
    13cc:	66005645 	strvs	r5, [r0], -r5, asr #12
    13d0:	4e636e75 	mcrmi	14, 3, r6, cr3, cr5, {3}
    13d4:	47006d75 	smlsdxmi	r0, r5, sp, r6
    13d8:	4e455250 	mcrmi	2, 2, r5, cr5, cr0, {2}
    13dc:	45504700 	ldrbmi	r4, [r0, #-1792]	; 0xfffff900
    13e0:	44005344 	strmi	r5, [r0], #-836	; 0xfffffcbc
    13e4:	62617369 	rsbvs	r7, r1, #-1543503871	; 0xa4000001
    13e8:	7047656c 	subvc	r6, r7, ip, ror #10
    13ec:	65446f69 	strbvs	r6, [r4, #-3945]	; 0xfffff097
    13f0:	74636574 	strbtvc	r6, [r3], #-1396	; 0xfffffa8c
    13f4:	66666f00 	strbtvs	r6, [r6], -r0, lsl #30
    13f8:	00746573 	rsbseq	r6, r4, r3, ror r5
    13fc:	53465047 	movtpl	r5, #24647	; 0x6047
    1400:	52004c45 	andpl	r4, r0, #17664	; 0x4500
    1404:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1408:	5f646576 	svcpl	0x00646576
    140c:	65520031 	ldrbvs	r0, [r2, #-49]	; 0xffffffcf
    1410:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1414:	325f6465 	subscc	r6, pc, #1694498816	; 0x65000000
    1418:	73655200 	cmnvc	r5, #0, 4
    141c:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1420:	00335f64 	eorseq	r5, r3, r4, ror #30
    1424:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1428:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    142c:	5200345f 	andpl	r3, r0, #1593835520	; 0x5f000000
    1430:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1434:	5f646576 	svcpl	0x00646576
    1438:	65520035 	ldrbvs	r0, [r2, #-53]	; 0xffffffcb
    143c:	76726573 			; <UNDEFINED> instruction: 0x76726573
    1440:	365f6465 	ldrbcc	r6, [pc], -r5, ror #8
    1444:	73655200 	cmnvc	r5, #0, 4
    1448:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    144c:	00375f64 	eorseq	r5, r7, r4, ror #30
    1450:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    1454:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1458:	5200385f 	andpl	r3, r0, #6225920	; 0x5f0000
    145c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
    1460:	5f646576 	svcpl	0x00646576
    1464:	45440039 	strbmi	r0, [r4, #-57]	; 0xffffffc7
    1468:	54434554 	strbpl	r4, [r3], #-1364	; 0xfffffaac
    146c:	4c41465f 	mcrrmi	6, 5, r4, r1, cr15
    1470:	474e494c 	strbmi	r4, [lr, -ip, asr #18]
    1474:	74655300 	strbtvc	r5, [r5], #-768	; 0xfffffd00
    1478:	6f697047 	svcvs	0x00697047
    147c:	73655200 	cmnvc	r5, #0, 4
    1480:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
    1484:	00415f64 	subeq	r5, r1, r4, ror #30
    1488:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
    148c:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
    1490:	4700425f 	smlsdmi	r0, pc, r2, r4	; <UNPREDICTABLE>
    1494:	5f4f4950 	svcpl	0x004f4950
    1498:	0054554f 	subseq	r5, r4, pc, asr #10
    149c:	49767270 	ldmdbmi	r6!, {r4, r5, r6, r9, ip, sp, lr}^
    14a0:	7265736e 	rsbvc	r7, r5, #-1207959551	; 0xb8000001
    14a4:	6f6c4274 	svcvs	0x006c4274
    14a8:	6e496b63 	vmlsvs.f64	d22, d9, d19
    14ac:	72466f74 	subvc	r6, r6, #116, 30	; 0x1d0
    14b0:	694c6565 	stmdbvs	ip, {r0, r2, r5, r6, r8, sl, sp, lr}^
    14b4:	78007473 	stmdavc	r0, {r0, r1, r4, r5, r6, sl, ip, sp, lr}
    14b8:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    14bc:	46746547 	ldrbtmi	r6, [r4], -r7, asr #10
    14c0:	48656572 	stmdami	r5!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    14c4:	53706165 	cmnpl	r0, #1073741849	; 0x40000019
    14c8:	00657a69 	rsbeq	r7, r5, r9, ror #20
    14cc:	4c425f41 	mcrrmi	15, 4, r5, r2, cr1
    14d0:	5f4b434f 	svcpl	0x004b434f
    14d4:	4b4e494c 	blmi	1393a0c <__bss_end+0x12e6734>
    14d8:	76727000 	ldrbtvc	r7, [r2], -r0
    14dc:	70616548 	rsbvc	r6, r1, r8, asr #10
    14e0:	74696e49 	strbtvc	r6, [r9], #-3657	; 0xfffff1b7
    14e4:	42787000 	rsbsmi	r7, r8, #0
    14e8:	6b636f6c 	blvs	18dd2a0 <__bss_end+0x182ffc8>
    14ec:	4c787000 	ldclmi	0, cr7, [r8], #-0
    14f0:	006b6e69 	rsbeq	r6, fp, r9, ror #28
    14f4:	6f507670 	svcvs	0x00507670
    14f8:	614d7472 	hvcvs	55106	; 0xd742
    14fc:	636f6c6c 	cmnvs	pc, #108, 24	; 0x6c00
    1500:	46787000 	ldrbtmi	r7, [r8], -r0
    1504:	74737269 	ldrbtvc	r7, [r3], #-617	; 0xfffffd97
    1508:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    150c:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    1510:	5278006b 	rsbspl	r0, r8, #107	; 0x6b
    1514:	5f534f54 	svcpl	0x00534f54
    1518:	50414548 	subpl	r4, r1, r8, asr #10
    151c:	48637500 	stmdami	r3!, {r8, sl, ip, sp, lr}^
    1520:	00706165 	rsbseq	r6, r0, r5, ror #2
    1524:	6d754464 	cfldrdvs	mvd4, [r5, #-400]!	; 0xfffffe70
    1528:	2f00796d 	svccs	0x0000796d
    152c:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1530:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
    1534:	2f796361 	svccs	0x00796361
    1538:	61786548 	cmnvs	r8, r8, asr #10
    153c:	2f686372 	svccs	0x00686372
    1540:	2f637273 	svccs	0x00637273
    1544:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1548:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    154c:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    1550:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1554:	534f5452 	movtpl	r5, #62546	; 0xf452
    1558:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
    155c:	2f2f5346 	svccs	0x002f5346
    1560:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1564:	534f5452 	movtpl	r5, #62546	; 0xf452
    1568:	756f532f 	strbvc	r5, [pc, #-815]!	; 1241 <_start-0xedbf>
    156c:	2f656372 	svccs	0x00656372
    1570:	74726f70 	ldrbtvc	r6, [r2], #-3952	; 0xfffff090
    1574:	656c6261 	strbvs	r6, [ip, #-609]!	; 0xfffffd9f
    1578:	6d654d2f 	stclvs	13, cr4, [r5, #-188]!	; 0xffffff44
    157c:	676e614d 	strbvs	r6, [lr, -sp, asr #2]!
    1580:	6165682f 	cmnvs	r5, pc, lsr #16
    1584:	2e345f70 	mrccs	15, 1, r5, cr4, cr0, {3}
    1588:	42780063 	rsbsmi	r0, r8, #99	; 0x63
    158c:	6b636f6c 	blvs	18dd344 <__bss_end+0x183006c>
    1590:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0xfffff6ad
    1594:	65487800 	strbvs	r7, [r8, #-2048]	; 0xfffff800
    1598:	70007061 	andvc	r7, r0, r1, rrx
    159c:	646e4578 	strbtvs	r4, [lr], #-1400	; 0xfffffa88
    15a0:	50787000 	rsbspl	r7, r8, r0
    15a4:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    15a8:	4273756f 	rsbsmi	r7, r3, #465567744	; 0x1bc00000
    15ac:	6b636f6c 	blvs	18dd364 <__bss_end+0x183008c>
    15b0:	6f547800 	svcvs	0x00547800
    15b4:	486c6174 	stmdami	ip!, {r2, r4, r5, r6, r8, sp, lr}^
    15b8:	53706165 	cmnpl	r0, #1073741849	; 0x40000019
    15bc:	00657a69 	rsbeq	r7, r5, r9, ror #20
    15c0:	65527670 	ldrbvs	r7, [r2, #-1648]	; 0xfffff990
    15c4:	6e727574 	mrcvs	5, 3, r7, cr2, cr4, {3}
    15c8:	6f507600 	svcvs	0x00507600
    15cc:	6e497472 	mcrvs	4, 2, r7, cr9, cr2, {3}
    15d0:	61697469 	cmnvs	r9, r9, ror #8
    15d4:	6573696c 	ldrbvs	r6, [r3, #-2412]!	; 0xfffff694
    15d8:	636f6c42 	cmnvs	pc, #16896	; 0x4200
    15dc:	6800736b 	stmdavs	r0, {r0, r1, r3, r5, r6, r8, r9, ip, sp, lr}
    15e0:	53706165 	cmnpl	r0, #1073741849	; 0x40000019
    15e4:	43555254 	cmpmi	r5, #84, 4	; 0x40000005
    15e8:	49535f54 	ldmdbmi	r3, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
    15ec:	7800455a 	stmdavc	r0, {r1, r3, r4, r6, r8, sl, lr}
    15f0:	72617453 	rsbvc	r7, r1, #1392508928	; 0x53000000
    15f4:	42780074 	rsbsmi	r0, r8, #116	; 0x74
    15f8:	6b636f6c 	blvs	18dd3b0 <__bss_end+0x18300d8>
    15fc:	6b6e694c 	blvs	1b9bb34 <__bss_end+0x1aee85c>
    1600:	6c6c6100 	stfvse	f6, [ip], #-0
    1604:	7461636f 	strbtvc	r6, [r1], #-879	; 0xfffffc91
    1608:	78006465 	stmdavc	r0, {r0, r2, r5, r6, sl, sp, lr}
    160c:	746e6157 	strbtvc	r6, [lr], #-343	; 0xfffffea9
    1610:	69536465 	ldmdbvs	r3, {r0, r2, r5, r6, sl, sp, lr}^
    1614:	7600657a 			; <UNDEFINED> instruction: 0x7600657a
    1618:	74726f50 	ldrbtvc	r6, [r2], #-3920	; 0xfffff0b0
    161c:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1620:	72467800 	subvc	r7, r6, #0, 16
    1624:	79426565 	stmdbvc	r2, {r0, r2, r5, r6, r8, sl, sp, lr}^
    1628:	52736574 	rsbspl	r6, r3, #116, 10	; 0x1d000000
    162c:	69616d65 	stmdbvs	r1!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}^
    1630:	676e696e 	strbvs	r6, [lr, -lr, ror #18]!
    1634:	4e787000 	cdpmi	0, 7, cr7, cr8, cr0, {0}
    1638:	6c427765 	mcrrvs	7, 6, r7, r2, cr5
    163c:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
    1640:	006b6e69 	rsbeq	r6, fp, r9, ror #28
    1644:	654e7870 	strbvs	r7, [lr, #-2160]	; 0xfffff790
    1648:	72467478 	subvc	r7, r6, #120, 8	; 0x78000000
    164c:	6c426565 	cfstr64vs	mvdx6, [r2], {101}	; 0x65
    1650:	006b636f 	rsbeq	r6, fp, pc, ror #6
    1654:	48637570 	stmdami	r3!, {r4, r5, r6, r8, sl, ip, sp, lr}^
    1658:	45706165 	ldrbmi	r6, [r0, #-357]!	; 0xfffffe9b
    165c:	7000646e 	andvc	r6, r0, lr, ror #8
    1660:	6f6c4278 	svcvs	0x006c4278
    1664:	6f546b63 	svcvs	0x00546b63
    1668:	65736e49 	ldrbvs	r6, [r3, #-3657]!	; 0xfffff1b7
    166c:	46007472 			; <UNDEFINED> instruction: 0x46007472
    1670:	4f545f52 	svcmi	0x00545f52
    1674:	414d5f4f 	cmpmi	sp, pc, asr #30
    1678:	4f5f594e 	svcmi	0x005f594e
    167c:	5f4e4550 	svcpl	0x004e4550
    1680:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
    1684:	4b4d0053 	blmi	13417d8 <__bss_end+0x1294500>
    1688:	505f5346 	subspl	r5, pc, r6, asr #6
    168c:	004d5241 	subeq	r5, sp, r1, asr #4
    1690:	745f7366 	ldrbvc	r7, [pc], #-870	; 1698 <_start-0xe968>
    1694:	00657079 	rsbeq	r7, r5, r9, ror r0
    1698:	66746166 	ldrbtvs	r6, [r4], -r6, ror #2
    169c:	61745f73 	cmnvs	r4, r3, ror pc
    16a0:	6e006b73 	vmovvs.16	d0[1], r6
    16a4:	6f6f725f 	svcvs	0x006f725f
    16a8:	72696474 	rsbvc	r6, r9, #116, 8	; 0x74000000
    16ac:	72617500 	rsbvc	r7, r1, #0, 10
    16b0:	6e695f74 	mcrvs	15, 3, r5, cr9, cr4, {3}
    16b4:	61007469 	tstvs	r0, r9, ror #8
    16b8:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    16bc:	72696400 	rsbvc	r6, r9, #0, 8
    16c0:	6365735f 	cmnvs	r5, #2080374785	; 0x7c000001
    16c4:	69640074 	stmdbvs	r4!, {r2, r4, r5, r6}^
    16c8:	73616272 	cmnvc	r1, #536870919	; 0x20000007
    16cc:	52460065 	subpl	r0, r6, #101	; 0x65
    16d0:	564e495f 			; <UNDEFINED> instruction: 0x564e495f
    16d4:	44494c41 	strbmi	r4, [r9], #-3137	; 0xfffff3bf
    16d8:	5241505f 	subpl	r5, r1, #95	; 0x5f
    16dc:	54454d41 	strbpl	r4, [r5], #-3393	; 0xfffff2bf
    16e0:	66005245 	strvs	r5, [r0], -r5, asr #4
    16e4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    16e8:	665f6e00 	ldrbvs	r6, [pc], -r0, lsl #28
    16ec:	6e657461 	cdpvs	4, 6, cr7, cr5, cr1, {3}
    16f0:	52460074 	subpl	r0, r6, #116	; 0x74
    16f4:	564e495f 			; <UNDEFINED> instruction: 0x564e495f
    16f8:	44494c41 	strbmi	r4, [r9], #-3137	; 0xfffff3bf
    16fc:	4a424f5f 	bmi	1095480 <__bss_end+0xfe81a8>
    1700:	00544345 	subseq	r4, r4, r5, asr #6
    1704:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    1708:	6972705f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
    170c:	6e5f746e 	cdpvs	4, 5, cr7, cr15, cr14, {3}
    1710:	6e006d75 	mcrvs	13, 0, r6, cr0, cr5, {3}
    1714:	7461665f 	strbtvc	r6, [r1], #-1631	; 0xfffff9a1
    1718:	52460073 	subpl	r0, r6, #115	; 0x73
    171c:	5f4f4e5f 	svcpl	0x004f4e5f
    1720:	454c4946 	strbmi	r4, [ip, #-2374]	; 0xfffff6ba
    1724:	54535953 	ldrbpl	r5, [r3], #-2387	; 0xfffff6ad
    1728:	75004d45 	strvc	r4, [r0, #-3397]	; 0xfffff2bb
    172c:	31746e69 	cmncc	r4, r9, ror #28
    1730:	00745f36 	rsbseq	r5, r4, r6, lsr pc
    1734:	4e5f5246 	cdpmi	2, 5, cr5, cr15, cr6, {2}
    1738:	455f544f 	ldrbmi	r5, [pc, #-1103]	; 12f1 <_start-0xed0f>
    173c:	47554f4e 	ldrbmi	r4, [r5, -lr, asr #30]
    1740:	4f435f48 	svcmi	0x00435f48
    1744:	46004552 			; <UNDEFINED> instruction: 0x46004552
    1748:	58455f52 	stmdapl	r5, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    174c:	00545349 	subseq	r5, r4, r9, asr #6
    1750:	62746166 	rsbsvs	r6, r4, #-2147483623	; 0x80000019
    1754:	00657361 	rsbeq	r7, r5, r1, ror #6
    1758:	524f5744 	subpl	r5, pc, #68, 14	; 0x1100000
    175c:	53460044 	movtpl	r0, #24644	; 0x6044
    1760:	5f455a49 	svcpl	0x00455a49
    1764:	73630074 	cmnvc	r3, #116	; 0x74
    1768:	00657a69 	rsbeq	r7, r5, r9, ror #20
    176c:	6b736964 	blvs	1cdbd04 <__bss_end+0x1c2ea2c>
    1770:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    1774:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
    1778:	00657a69 	rsbeq	r7, r5, r9, ror #20
    177c:	76726470 			; <UNDEFINED> instruction: 0x76726470
    1780:	65726600 	ldrbvs	r6, [r2, #-1536]!	; 0xfffffa00
    1784:	6c635f65 	stclvs	15, cr5, [r3], #-404	; 0xfffffe6c
    1788:	42007473 	andmi	r7, r0, #1929379840	; 0x73000000
    178c:	00455459 	subeq	r5, r5, r9, asr r4
    1790:	5f726964 	svcpl	0x00726964
    1794:	00727470 	rsbseq	r7, r2, r0, ror r4
    1798:	72747461 	rsbsvc	r7, r4, #1627389952	; 0x61000000
    179c:	5f756100 	svcpl	0x00756100
    17a0:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    17a4:	4e495500 	cdpmi	5, 4, cr5, cr9, cr0, {0}
    17a8:	74660054 	strbtvc	r0, [r6], #-84	; 0xffffffac
    17ac:	00656d69 	rsbeq	r6, r5, r9, ror #26
    17b0:	4d5f5246 	lfmmi	f5, 2, [pc, #-280]	; 16a0 <_start-0xe960>
    17b4:	5f53464b 	svcpl	0x0053464b
    17b8:	524f4241 	subpl	r4, pc, #268435460	; 0x10000004
    17bc:	00444554 	subeq	r4, r4, r4, asr r5
    17c0:	6b736174 	blvs	1cd9d98 <__bss_end+0x1c2cac0>
    17c4:	61740031 	cmnvs	r4, r1, lsr r0
    17c8:	00326b73 	eorseq	r6, r2, r3, ror fp
    17cc:	61746164 	cmnvs	r4, r4, ror #2
    17d0:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
    17d4:	5f524600 	svcpl	0x00524600
    17d8:	5f544e49 	svcpl	0x00544e49
    17dc:	00525245 	subseq	r5, r2, r5, asr #4
    17e0:	445f5246 	ldrbmi	r5, [pc], #-582	; 17e8 <_start-0xe818>
    17e4:	5f4b5349 	svcpl	0x004b5349
    17e8:	00525245 	subseq	r5, r2, r5, asr #4
    17ec:	736e6977 	cmnvc	lr, #1949696	; 0x1dc000
    17f0:	00746365 	rsbseq	r6, r4, r5, ror #6
    17f4:	5f746d66 	svcpl	0x00746d66
    17f8:	0074706f 	rsbseq	r7, r4, pc, rrx
    17fc:	6d616e66 	stclvs	14, cr6, [r1, #-408]!	; 0xfffffe68
    1800:	52460065 	subpl	r0, r6, #101	; 0x65
    1804:	4952575f 	ldmdbmi	r2, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, lr}^
    1808:	505f4554 	subspl	r4, pc, r4, asr r5	; <UNPREDICTABLE>
    180c:	45544f52 	ldrbmi	r4, [r4, #-3922]	; 0xfffff0ae
    1810:	44455443 	strbmi	r5, [r5], #-1091	; 0xfffffbbd
    1814:	54414600 	strbpl	r4, [r1], #-1536	; 0xfffffa00
    1818:	66005346 	strvs	r5, [r0], -r6, asr #6
    181c:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
    1820:	5f524600 	svcpl	0x00524600
    1824:	454d4954 	strbmi	r4, [sp, #-2388]	; 0xfffff6ac
    1828:	0054554f 	subseq	r5, r4, pc, asr #10
    182c:	756c6373 	strbvc	r6, [ip, #-883]!	; 0xfffffc8d
    1830:	46007473 			; <UNDEFINED> instruction: 0x46007473
    1834:	4f4e5f52 	svcmi	0x004e5f52
    1838:	4c49465f 	mcrrmi	6, 5, r4, r9, cr15
    183c:	656d0045 	strbvs	r0, [sp, #-69]!	; 0xffffffbb
    1840:	67617373 			; <UNDEFINED> instruction: 0x67617373
    1844:	43540065 	cmpmi	r4, #101	; 0x65
    1848:	00524148 	subseq	r4, r2, r8, asr #2
    184c:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; 1798 <_start-0xe868>
    1850:	756c2f65 	strbvc	r2, [ip, #-3941]!	; 0xfffff09b
    1854:	7963616e 	stmdbvc	r3!, {r1, r2, r3, r5, r6, r8, sp, lr}^
    1858:	7865482f 	stmdavc	r5!, {r0, r1, r2, r3, r5, fp, lr}^
    185c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
    1860:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
    1864:	7361522f 	cmnvc	r1, #-268435454	; 0xf0000002
    1868:	72656270 	rsbvc	r6, r5, #112, 4
    186c:	69507972 	ldmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}^
    1870:	6572462d 	ldrbvs	r4, [r2, #-1581]!	; 0xfffff9d3
    1874:	4f545265 	svcmi	0x00545265
    1878:	61462d53 	cmpvs	r6, r3, asr sp
    187c:	2f534674 	svccs	0x00534674
    1880:	6f6d6544 	svcvs	0x006d6544
    1884:	69616d2f 	stmdbvs	r1!, {r0, r1, r2, r3, r5, r8, sl, fp, sp, lr}^
    1888:	00632e6e 	rsbeq	r2, r3, lr, ror #28
    188c:	4e5f5246 	cdpmi	2, 5, cr5, cr15, cr6, {2}
    1890:	455f544f 	ldrbmi	r5, [pc, #-1103]	; 1449 <_start-0xebb7>
    1894:	4c42414e 	stfmie	f4, [r2], {78}	; 0x4e
    1898:	6c004445 	cfstrsvs	mvf4, [r0], {69}	; 0x45
    189c:	5f747361 	svcpl	0x00747361
    18a0:	74736c63 	ldrbtvc	r6, [r3], #-3171	; 0xfffff39d
    18a4:	6a626f00 	bvs	189d4ac <__bss_end+0x17f01d4>
    18a8:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
    18ac:	665f6e00 	ldrbvs	r6, [pc], -r0, lsl #28
    18b0:	46007461 	strmi	r7, [r0], -r1, ror #8
    18b4:	4e495f52 	mcrmi	15, 2, r5, cr9, cr2, {2}
    18b8:	494c4156 	stmdbmi	ip, {r1, r2, r4, r6, r8, lr}^
    18bc:	52445f44 	subpl	r5, r4, #68, 30	; 0x110
    18c0:	00455649 	subeq	r5, r5, r9, asr #12
    18c4:	445f5246 	ldrbmi	r5, [pc], #-582	; 18cc <_start-0xe734>
    18c8:	45494e45 	strbmi	r4, [r9, #-3653]	; 0xfffff1bb
    18cc:	70640044 	rsbvc	r0, r4, r4, asr #32
    18d0:	6e007274 	mcrvs	2, 0, r7, cr0, cr4, {3}
    18d4:	6f6f725f 	svcvs	0x006f725f
    18d8:	52460074 	subpl	r0, r6, #116	; 0x74
    18dc:	434f4c5f 	movtmi	r4, #64607	; 0xfc5f
    18e0:	0044454b 	subeq	r4, r4, fp, asr #10
    18e4:	616c6677 	smcvs	50791	; 0xc667
    18e8:	69750067 	ldmdbvs	r5!, {r0, r1, r2, r5, r6}^
    18ec:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
    18f0:	6c00745f 	cfstrsvs	mvf7, [r0], {95}	; 0x5f
    18f4:	00767264 	rsbseq	r7, r6, r4, ror #4
    18f8:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
    18fc:	7475705f 	ldrbtvc	r7, [r5], #-95	; 0xffffffa1
    1900:	72700063 	rsbsvc	r0, r0, #99	; 0x63
    1904:	5f746e69 	svcpl	0x00746e69
    1908:	66746166 	ldrbtvs	r6, [r4], -r6, ror #2
    190c:	72655f73 	rsbvc	r5, r5, #460	; 0x1cc
    1910:	00726f72 	rsbseq	r6, r2, r2, ror pc
    1914:	4f5f5246 	svcmi	0x005f5246
    1918:	7562004b 	strbvc	r0, [r2, #-75]!	; 0xffffffb5
    191c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
    1920:	72617500 	rsbvc	r7, r1, #0, 10
    1924:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
    1928:	76007374 			; <UNDEFINED> instruction: 0x76007374
    192c:	61626c6f 	cmnvs	r2, pc, ror #24
    1930:	77006573 	smlsdxvc	r0, r3, r5, r6
    1934:	006b726f 	rsbeq	r7, fp, pc, ror #4
    1938:	495f5246 	ldmdbmi	pc, {r1, r2, r6, r9, ip, lr}^	; <UNPREDICTABLE>
    193c:	4c41564e 	mcrrmi	6, 4, r5, r1, cr14
    1940:	4e5f4449 	cdpmi	4, 5, cr4, cr15, cr9, {2}
    1944:	00454d41 	subeq	r4, r5, r1, asr #26
    1948:	5f697366 	svcpl	0x00697366
    194c:	67616c66 	strbvs	r6, [r1, -r6, ror #24]!
    1950:	74616600 	strbtvc	r6, [r1], #-1536	; 0xfffffa00
    1954:	62697274 	rsbvs	r7, r9, #116, 4	; 0x40000007
    1958:	4c494600 	mcrrmi	6, 0, r4, r9, cr0
    195c:	4f464e49 	svcmi	0x00464e49
    1960:	41424c00 	cmpmi	r2, r0, lsl #24
    1964:	4600745f 			; <UNDEFINED> instruction: 0x4600745f
    1968:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0xfffffaae
    196c:	4600544c 	strmi	r5, [r0], -ip, asr #8
    1970:	4f4e5f52 	svcmi	0x004e5f52
    1974:	5441505f 	strbpl	r5, [r1], #-95	; 0xffffffa1
    1978:	52460048 	subpl	r0, r6, #72	; 0x48
    197c:	544f4e5f 	strbpl	r4, [pc], #-3679	; 1984 <_start-0xe67c>
    1980:	4145525f 	cmpmi	r5, pc, asr r2
    1984:	46005944 	strmi	r5, [r0], -r4, asr #18
    1988:	4a424f46 	bmi	10956a8 <__bss_end+0xfe83d0>
    198c:	64004449 	strvs	r4, [r0], #-1097	; 0xfffffbb7
    1990:	665f7269 	ldrbvs	r7, [pc], -r9, ror #4
    1994:	00646e69 	rsbeq	r6, r4, r9, ror #28
    1998:	5f726964 	svcpl	0x00726964
    199c:	6f6d6572 	svcvs	0x006d6572
    19a0:	72006576 	andvc	r6, r0, #494927872	; 0x1d800000
    19a4:	766f6d65 	strbtvc	r6, [pc], -r5, ror #26
    19a8:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
    19ac:	006e6961 	rsbeq	r6, lr, r1, ror #18
    19b0:	72617069 	rsbvc	r7, r1, #105	; 0x69
    19b4:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
    19b8:	726f775f 	rsbvc	r7, pc, #24903680	; 0x17c0000
    19bc:	7a730064 	bvc	1cc1b54 <__bss_end+0x1c1487c>
    19c0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
    19c4:	5f7a7300 	svcpl	0x007a7300
    19c8:	00726964 	rsbseq	r6, r2, r4, ror #18
    19cc:	6c635f66 	stclvs	15, cr5, [r3], #-408	; 0xfffffe68
    19d0:	0065736f 	rsbeq	r7, r5, pc, ror #6
    19d4:	66756277 			; <UNDEFINED> instruction: 0x66756277
    19d8:	6f6d0066 	svcvs	0x006d0066
    19dc:	62006564 	andvs	r6, r0, #100, 10	; 0x19000000
    19e0:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
    19e4:	5f660061 	svcpl	0x00660061
    19e8:	6e757274 	mrcvs	2, 3, r7, cr5, cr4, {3}
    19ec:	65746163 	ldrbvs	r6, [r4, #-355]!	; 0xfffffe9d
    19f0:	756f6d00 	strbvc	r6, [pc, #-3328]!	; cf8 <_start-0xf308>
    19f4:	765f746e 	ldrbvc	r7, [pc], -lr, ror #8
    19f8:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
    19fc:	61660065 	cmnvs	r6, r5, rrx
    1a00:	00736674 	rsbseq	r6, r3, r4, ror r6
    1a04:	33747363 	cmncc	r4, #-1946157055	; 0x8c000001
    1a08:	65640032 	strbvs	r0, [r4, #-50]!	; 0xffffffce
    1a0c:	74706f66 	ldrbtvc	r6, [r0], #-3942	; 0xfffff09a
    1a10:	75626900 	strbvc	r6, [r2, #-2304]!	; 0xfffff700
    1a14:	636e0066 	cmnvs	lr, #102	; 0x66
    1a18:	0074736c 	rsbseq	r7, r4, ip, ror #6
    1a1c:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    1a20:	61700073 	cmnvs	r0, r3, ror r0
    1a24:	6f5f6874 	svcvs	0x005f6874
    1a28:	6300646c 	movwvs	r6, #1132	; 0x46c
    1a2c:	74616572 	strbtvc	r6, [r1], #-1394	; 0xfffffa8e
    1a30:	61705f65 	cmnvs	r0, r5, ror #30
    1a34:	74697472 	strbtvc	r7, [r9], #-1138	; 0xfffffb8e
    1a38:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1a3c:	5f72626d 	svcpl	0x0072626d
    1a40:	64007470 	strvs	r7, [r0], #-1136	; 0xfffffb90
    1a44:	635f7269 	cmpvs	pc, #-1879048186	; 0x90000006
    1a48:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1a4c:	6d5f6600 	ldclvs	6, cr6, [pc, #-0]	; 1a54 <_start-0xe5ac>
    1a50:	0073666b 	rsbseq	r6, r3, fp, ror #12
    1a54:	6e755f66 	cdpvs	15, 7, cr5, cr5, cr6, {3}
    1a58:	6b6e696c 	blvs	1b9c010 <__bss_end+0x1aeed38>
    1a5c:	5f7a7300 	svcpl	0x007a7300
    1a60:	00767372 	rsbseq	r7, r6, r2, ror r3
    1a64:	6e655f6e 	cdpvs	15, 6, cr5, cr5, cr14, {3}
    1a68:	5f660074 	svcpl	0x00660074
    1a6c:	69646b6d 	stmdbvs	r4!, {r0, r2, r3, r5, r6, r8, r9, fp, sp, lr}^
    1a70:	74730072 	ldrbtvc	r0, [r3], #-114	; 0xffffff8e
    1a74:	756c635f 	strbvc	r6, [ip, #-863]!	; 0xfffffca1
    1a78:	73007473 	movwvc	r7, #1139	; 0x473
    1a7c:	75615f7a 	strbvc	r5, [r1, #-3962]!	; 0xfffff086
    1a80:	74656700 	strbtvc	r6, [r5], #-1792	; 0xfffff900
    1a84:	7461665f 	strbtvc	r6, [r1], #-1631	; 0xfffff9a1
    1a88:	6f5f6600 	svcvs	0x005f6600
    1a8c:	006e6570 	rsbeq	r6, lr, r0, ror r5
    1a90:	665f7a73 			; <UNDEFINED> instruction: 0x665f7a73
    1a94:	66007461 	strvs	r7, [r0], -r1, ror #8
    1a98:	6f6c6c6f 	svcvs	0x006c6c6f
    1a9c:	61705f77 	cmnvs	r0, r7, ror pc
    1aa0:	6d006874 	stcvs	8, cr6, [r0, #-464]	; 0xfffffe30
    1aa4:	5f65766f 	svcpl	0x0065766f
    1aa8:	646e6977 	strbtvs	r6, [lr], #-2423	; 0xfffff689
    1aac:	6900776f 	stmdbvs	r0, {r0, r1, r2, r3, r5, r6, r8, r9, sl, ip, sp, lr}
    1ab0:	72747066 	rsbsvc	r7, r4, #102	; 0x66
    1ab4:	735f6e00 	cmpvc	pc, #0, 28
    1ab8:	6f730063 	svcvs	0x00730063
    1abc:	67006a62 	strvs	r6, [r0, -r2, ror #20]
    1ac0:	665f7465 	ldrbvs	r7, [pc], -r5, ror #8
    1ac4:	69656c69 	stmdbvs	r5!, {r0, r3, r5, r6, sl, fp, sp, lr}^
    1ac8:	006f666e 	rsbeq	r6, pc, lr, ror #12
    1acc:	5f747570 	svcpl	0x00747570
    1ad0:	00746166 	rsbseq	r6, r4, r6, ror #2
    1ad4:	63656863 	cmnvs	r5, #6488064	; 0x630000
    1ad8:	73665f6b 	cmnvc	r6, #428	; 0x1ac
    1adc:	6c5f6600 	mrrcvs	6, 0, r6, pc, cr0	; <UNPREDICTABLE>
    1ae0:	6b656573 	blvs	195b0b4 <__bss_end+0x18adddc>
    1ae4:	5f646c00 	svcpl	0x00646c00
    1ae8:	726f7764 	rsbvc	r7, pc, #100, 14	; 0x1900000
    1aec:	61700064 	cmnvs	r0, r4, rrx
    1af0:	6e5f6874 	mrcvs	8, 2, r6, cr15, cr4, {3}
    1af4:	6e007765 	cdpvs	7, 0, cr7, cr0, cr5, {3}
    1af8:	65657266 	strbvs	r7, [r5, #-614]!	; 0xfffffd9a
    1afc:	6f5f6600 	svcvs	0x005f6600
    1b00:	646e6570 	strbtvs	r6, [lr], #-1392	; 0xfffffa90
    1b04:	66007269 	strvs	r7, [r0], -r9, ror #4
    1b08:	6165725f 	cmnvs	r5, pc, asr r2
    1b0c:	73740064 	cmnvc	r4, #100	; 0x64
    1b10:	00746365 	rsbseq	r6, r4, r5, ror #6
    1b14:	5f534552 	svcpl	0x00534552
    1b18:	4f525245 	svcmi	0x00525245
    1b1c:	73630052 	cmnvc	r3, #82	; 0x52
    1b20:	00746365 	rsbseq	r6, r4, r5, ror #6
    1b24:	625f7a73 	subsvs	r7, pc, #471040	; 0x73000
    1b28:	64006b6c 	strvs	r6, [r0], #-2924	; 0xfffff494
    1b2c:	725f7269 	subsvc	r7, pc, #-1879048186	; 0x90000006
    1b30:	00646165 	rsbeq	r6, r4, r5, ror #2
    1b34:	69736166 	ldmdbvs	r3!, {r1, r2, r5, r6, r8, sp, lr}^
    1b38:	6600657a 			; <UNDEFINED> instruction: 0x6600657a
    1b3c:	6e65725f 	mcrvs	2, 3, r7, cr5, cr15, {2}
    1b40:	00656d61 	rsbeq	r6, r5, r1, ror #26
    1b44:	736c6370 	cmnvc	ip, #112, 6	; 0xc0000001
    1b48:	5f660074 	svcpl	0x00660074
    1b4c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
    1b50:	786e0065 	stmdavc	lr!, {r0, r2, r5, r6}^
    1b54:	6c615f74 	stclvs	15, cr5, [r1], #-464	; 0xfffffe30
    1b58:	33636f6c 	cmncc	r3, #108, 30	; 0x1b0
    1b5c:	7a730032 	bvc	1cc1c2c <__bss_end+0x1c14954>
    1b60:	74616662 	strbtvc	r6, [r1], #-1634	; 0xfffff99e
    1b64:	69734600 	ldmdbvs	r3!, {r9, sl, lr}^
    1b68:	45520064 	ldrbmi	r0, [r2, #-100]	; 0xffffff9c
    1b6c:	41505f53 	cmpmi	r0, r3, asr pc
    1b70:	52524552 	subspl	r4, r2, #343932928	; 0x14800000
    1b74:	43784500 	cmnmi	r8, #0, 10
    1b78:	6c007476 	cfstrsvs	mvf7, [r0], {118}	; 0x76
    1b7c:	6f775f64 	svcvs	0x00775f64
    1b80:	66006472 			; <UNDEFINED> instruction: 0x66006472
    1b84:	5f646e69 	svcpl	0x00646e69
    1b88:	756c6f76 	strbvc	r6, [ip, #-3958]!	; 0xfffff08a
    1b8c:	5200656d 	andpl	r6, r0, #457179136	; 0x1b400000
    1b90:	575f5345 	ldrbpl	r5, [pc, -r5, asr #6]
    1b94:	54525052 	ldrbpl	r5, [r2], #-82	; 0xffffffae
    1b98:	6f682f00 	svcvs	0x00682f00
    1b9c:	6c2f656d 	cfstr32vs	mvfx6, [pc], #-436	; 19f0 <_start-0xe610>
    1ba0:	63616e75 	cmnvs	r1, #1872	; 0x750
    1ba4:	65482f79 	strbvs	r2, [r8, #-3961]	; 0xfffff087
    1ba8:	63726178 	cmnvs	r2, #120, 2
    1bac:	72732f68 	rsbsvc	r2, r3, #104, 30	; 0x1a0
    1bb0:	61522f63 	cmpvs	r2, r3, ror #30
    1bb4:	65627073 	strbvs	r7, [r2, #-115]!	; 0xffffff8d
    1bb8:	50797272 	rsbspl	r7, r9, r2, ror r2
    1bbc:	72462d69 	subvc	r2, r6, #6720	; 0x1a40
    1bc0:	54526565 	ldrbpl	r6, [r2], #-1381	; 0xfffffa9b
    1bc4:	462d534f 	strtmi	r5, [sp], -pc, asr #6
    1bc8:	53467461 	movtpl	r7, #25697	; 0x6461
    1bcc:	7461462f 	strbtvc	r4, [r1], #-1583	; 0xfffff9d1
    1bd0:	532f5346 			; <UNDEFINED> instruction: 0x532f5346
    1bd4:	6372756f 	cmnvs	r2, #465567744	; 0x1bc00000
    1bd8:	66662f65 	strbtvs	r2, [r6], -r5, ror #30
    1bdc:	6300632e 	movwvs	r6, #814	; 0x32e
    1be0:	3274736c 	rsbscc	r7, r4, #108, 6	; 0xb0000001
    1be4:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
    1be8:	5f7a7300 	svcpl	0x007a7300
    1bec:	74726170 	ldrbtvc	r6, [r2], #-368	; 0xfffffe90
    1bf0:	73003233 	movwvc	r3, #563	; 0x233
    1bf4:	6f765f7a 	svcvs	0x00765f7a
    1bf8:	5f6e006c 	svcpl	0x006e006c
    1bfc:	66006468 	strvs	r6, [r0], -r8, ror #8
    1c00:	6165725f 	cmnvs	r5, pc, asr r2
    1c04:	72696464 	rsbvc	r6, r9, #100, 8	; 0x64000000
    1c08:	6d657200 	sfmvs	f7, 2, [r5, #-0]
    1c0c:	006e6961 	rsbeq	r6, lr, r1, ror #18
    1c10:	5f726964 	svcpl	0x00726964
    1c14:	6f6c6c61 	svcvs	0x006c6c61
    1c18:	5f6e0063 	svcpl	0x006e0063
    1c1c:	74736c63 	ldrbtvc	r6, [r3], #-3171	; 0xfffff39d
    1c20:	5f7a7300 	svcpl	0x007a7300
    1c24:	00767264 	rsbseq	r7, r6, r4, ror #4
    1c28:	6f6d5f66 	svcvs	0x006d5f66
    1c2c:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1c30:	74736c70 	ldrbtvc	r6, [r3], #-3184	; 0xfffff390
    1c34:	72696400 	rsbvc	r6, r9, #0, 8
    1c38:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
    1c3c:	63640074 	cmnvs	r4, #116	; 0x74
    1c40:	0074736c 	rsbseq	r7, r4, ip, ror #6
    1c44:	746e6377 	strbtvc	r6, [lr], #-887	; 0xfffffc89
    1c48:	67697300 	strbvs	r7, [r9, -r0, lsl #6]!
    1c4c:	5f66006e 	svcpl	0x0066006e
    1c50:	66746567 	ldrbtvs	r6, [r4], -r7, ror #10
    1c54:	00656572 	rsbeq	r6, r5, r2, ror r5
    1c58:	79747366 	ldmdbvc	r4!, {r1, r2, r5, r6, r8, r9, ip, sp, lr}^
    1c5c:	65726300 	ldrbvs	r6, [r2, #-768]!	; 0xfffffd00
    1c60:	5f657461 	svcpl	0x00657461
    1c64:	656d616e 	strbvs	r6, [sp, #-366]!	; 0xfffffe92
    1c68:	735f6600 	cmpvc	pc, #0, 12
    1c6c:	00636e79 	rsbeq	r6, r3, r9, ror lr
    1c70:	6f765f62 	svcvs	0x00765f62
    1c74:	6272006c 	rsbsvs	r0, r2, #108	; 0x6c
    1c78:	00666675 	rsbeq	r6, r6, r5, ror r6
    1c7c:	63657362 	cmnvs	r5, #-2013265919	; 0x88000001
    1c80:	72630074 	rsbvc	r0, r3, #116	; 0x74
    1c84:	65746165 	ldrbvs	r6, [r4, #-357]!	; 0xfffffe9b
    1c88:	6168635f 	cmnvs	r8, pc, asr r3
    1c8c:	73006e69 	movwvc	r6, #3689	; 0xe69
    1c90:	72645f7a 	rsbvc	r5, r4, #488	; 0x1e8
    1c94:	00323376 	eorseq	r3, r2, r6, ror r3
    1c98:	746e6372 	strbtvc	r6, [lr], #-882	; 0xfffffc8e
    1c9c:	5f747300 	svcpl	0x00747300
    1ca0:	726f7764 	rsbvc	r7, pc, #100, 14	; 0x1900000
    1ca4:	79730064 	ldmdbvc	r3!, {r2, r5, r6}^
    1ca8:	665f636e 	ldrbvs	r6, [pc], -lr, ror #6
    1cac:	646c0073 	strbtvs	r0, [ip], #-115	; 0xffffff8d
    1cb0:	756c635f 	strbvc	r6, [ip, #-863]!	; 0xfffffca1
    1cb4:	64007473 	strvs	r7, [r0], #-1139	; 0xfffffb8d
    1cb8:	735f7269 	cmpvc	pc, #-1879048186	; 0x90000006
    1cbc:	44006964 	strmi	r6, [r0], #-2404	; 0xfffff69c
    1cc0:	54415453 	strbpl	r5, [r1], #-1107	; 0xfffffbad
    1cc4:	67005355 	smlsdvs	r0, r5, r3, r5
    1cc8:	6c5f7465 	cfldrdvs	mvd7, [pc], {101}	; 0x65
    1ccc:	6d756e64 	ldclvs	14, cr6, [r5, #-400]!	; 0xfffffe70
    1cd0:	00726562 	rsbseq	r6, r2, r2, ror #10
    1cd4:	5f534552 	svcpl	0x00534552
    1cd8:	66004b4f 	strvs	r4, [r0], -pc, asr #22
    1cdc:	74706f73 	ldrbtvc	r6, [r0], #-3955	; 0xfffff08d
    1ce0:	635f6600 	cmpvs	pc, #0, 12
    1ce4:	65736f6c 	ldrbvs	r6, [r3, #-3948]!	; 0xfffff094
    1ce8:	00726964 	rsbseq	r6, r2, r4, ror #18
    1cec:	5f636264 	svcpl	0x00636264
    1cf0:	00646e32 	rsbeq	r6, r4, r2, lsr lr
    1cf4:	5f534552 	svcpl	0x00534552
    1cf8:	52544f4e 	subspl	r4, r4, #312	; 0x138
    1cfc:	62005944 	andvs	r5, r0, #68, 18	; 0x110000
    1d00:	7461665f 	strbtvc	r6, [r1], #-1631	; 0xfffff9a1
    1d04:	73726e00 	cmnvc	r2, #0, 28
    1d08:	74730076 	ldrbtvc	r0, [r3], #-118	; 0xffffff8a
    1d0c:	63746572 	cmnvs	r4, #478150656	; 0x1c800000
    1d10:	79730068 	ldmdbvc	r3!, {r3, r5, r6}^
    1d14:	74636573 	strbtvc	r6, [r3], #-1395	; 0xfffffa8d
    1d18:	63626400 	cmnvs	r2, #0, 8
    1d1c:	7473315f 	ldrbtvc	r3, [r3], #-351	; 0xfffffea1
    1d20:	735f6600 	cmpvc	pc, #0, 12
    1d24:	00746174 	rsbseq	r6, r4, r4, ror r1
    1d28:	5f726964 	svcpl	0x00726964
    1d2c:	69676572 	stmdbvs	r7!, {r1, r4, r5, r6, r8, sl, sp, lr}^
    1d30:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
    1d34:	6e797300 	cdpvs	3, 7, cr7, cr9, cr0, {0}
    1d38:	69775f63 	ldmdbvs	r7!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1d3c:	776f646e 	strbvc	r6, [pc, -lr, ror #8]!
    1d40:	6c617600 	stclvs	6, cr7, [r1], #-0
    1d44:	74616469 	strbtvc	r6, [r1], #-1129	; 0xfffffb97
    1d48:	6f630065 	svcvs	0x00630065
    1d4c:	00746e75 	rsbseq	r6, r4, r5, ror lr
    1d50:	6b736964 	blvs	1cdc2e8 <__bss_end+0x1c2f010>
    1d54:	6174735f 	cmnvs	r4, pc, asr r3
    1d58:	00737574 	rsbseq	r7, r3, r4, ror r5
    1d5c:	74617453 	strbtvc	r7, [r1], #-1107	; 0xfffffbad
    1d60:	73696400 	cmnvc	r9, #0, 8
    1d64:	6f695f6b 	svcvs	0x00695f6b
    1d68:	006c7463 	rsbeq	r7, ip, r3, ror #8
    1d6c:	646d6172 	strbtvs	r6, [sp], #-370	; 0xfffffe8e
    1d70:	006b7369 	rsbeq	r7, fp, r9, ror #6
    1d74:	6b736964 	blvs	1cdc30c <__bss_end+0x1c2f034>
    1d78:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
    1d7c:	2f006574 	svccs	0x00006574
    1d80:	656d6f68 	strbvs	r6, [sp, #-3944]!	; 0xfffff098
    1d84:	6e756c2f 	cdpvs	12, 7, cr6, cr5, cr15, {1}
    1d88:	2f796361 	svccs	0x00796361
    1d8c:	61786548 	cmnvs	r8, r8, asr #10
    1d90:	2f686372 	svccs	0x00686372
    1d94:	2f637273 	svccs	0x00637273
    1d98:	70736152 	rsbsvc	r6, r3, r2, asr r1
    1d9c:	72726562 	rsbsvc	r6, r2, #411041792	; 0x18800000
    1da0:	2d695079 	stclcs	0, cr5, [r9, #-484]!	; 0xfffffe1c
    1da4:	65657246 	strbvs	r7, [r5, #-582]!	; 0xfffffdba
    1da8:	534f5452 	movtpl	r5, #62546	; 0xf452
    1dac:	7461462d 	strbtvc	r4, [r1], #-1581	; 0xfffff9d3
    1db0:	462f5346 	strtmi	r5, [pc], -r6, asr #6
    1db4:	53467461 	movtpl	r7, #25697	; 0x6461
    1db8:	756f532f 	strbvc	r5, [pc, #-815]!	; 1a91 <_start-0xe56f>
    1dbc:	2f656372 	svccs	0x00656372
    1dc0:	6b736964 	blvs	1cdc358 <__bss_end+0x1c2f080>
    1dc4:	632e6f69 			; <UNDEFINED> instruction: 0x632e6f69
    1dc8:	63657300 	cmnvs	r5, #0, 6
    1dcc:	00726f74 	rsbseq	r6, r2, r4, ror pc
    1dd0:	53455244 	movtpl	r5, #21060	; 0x5244
    1dd4:	00544c55 	subseq	r4, r4, r5, asr ip
    1dd8:	6b736964 	blvs	1cdc370 <__bss_end+0x1c2f098>
    1ddc:	6165725f 	cmnvs	r5, pc, asr r2
    1de0:	65670064 	strbvs	r0, [r7, #-100]!	; 0xffffff9c
    1de4:	61665f74 	smcvs	26100	; 0x65f4
    1de8:	6d697474 	cfstrdvs	mvd7, [r9, #-464]!	; 0xfffffe30
    1dec:	682f0065 	stmdavs	pc!, {r0, r2, r5, r6}	; <UNPREDICTABLE>
    1df0:	2f656d6f 	svccs	0x00656d6f
    1df4:	616e756c 	cmnvs	lr, ip, ror #10
    1df8:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1dfc:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
    1e00:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
    1e04:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
    1e08:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1e0c:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1e10:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1e14:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1e18:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1e1c:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    1e20:	61462f53 	cmpvs	r6, r3, asr pc
    1e24:	2f534674 	svccs	0x00534674
    1e28:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1e2c:	662f6563 	strtvs	r6, [pc], -r3, ror #10
    1e30:	73797366 	cmnvc	r9, #-1744830463	; 0x98000001
    1e34:	2e6d6574 	mcrcs	5, 3, r6, cr13, cr4, {3}
    1e38:	682f0063 	stmdavs	pc!, {r0, r1, r5, r6}	; <UNPREDICTABLE>
    1e3c:	2f656d6f 	svccs	0x00656d6f
    1e40:	616e756c 	cmnvs	lr, ip, ror #10
    1e44:	482f7963 	stmdami	pc!, {r0, r1, r5, r6, r8, fp, ip, sp, lr}	; <UNPREDICTABLE>
    1e48:	72617865 	rsbvc	r7, r1, #6619136	; 0x650000
    1e4c:	732f6863 			; <UNDEFINED> instruction: 0x732f6863
    1e50:	522f6372 	eorpl	r6, pc, #-939524095	; 0xc8000001
    1e54:	62707361 	rsbsvs	r7, r0, #-2080374783	; 0x84000001
    1e58:	79727265 	ldmdbvc	r2!, {r0, r2, r5, r6, r9, ip, sp, lr}^
    1e5c:	462d6950 			; <UNDEFINED> instruction: 0x462d6950
    1e60:	52656572 	rsbpl	r6, r5, #478150656	; 0x1c800000
    1e64:	2d534f54 	ldclcs	15, cr4, [r3, #-336]	; 0xfffffeb0
    1e68:	46746146 	ldrbtmi	r6, [r4], -r6, asr #2
    1e6c:	61462f53 	cmpvs	r6, r3, asr pc
    1e70:	2f534674 	svccs	0x00534674
    1e74:	72756f53 	rsbsvc	r6, r5, #332	; 0x14c
    1e78:	662f6563 	strtvs	r6, [pc], -r3, ror #10
    1e7c:	696e7566 	stmdbvs	lr!, {r1, r2, r5, r6, r8, sl, ip, sp, lr}^
    1e80:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
    1e84:	2e00632e 	cdpcs	3, 0, cr6, cr0, cr14, {1}
    1e88:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1e8c:	2f2e2e2f 	svccs	0x002e2e2f
    1e90:	6762696c 	strbvs	r6, [r2, -ip, ror #18]!
    1e94:	632f6363 			; <UNDEFINED> instruction: 0x632f6363
    1e98:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    1e9c:	72612f67 	rsbvc	r2, r1, #412	; 0x19c
    1ea0:	696c2f6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, r8, r9, sl, fp, sp}^
    1ea4:	75663162 	strbvc	r3, [r6, #-354]!	; 0xfffffe9e
    1ea8:	2e73636e 	cdpcs	3, 7, cr6, cr3, cr14, {3}
    1eac:	622f0053 	eorvs	r0, pc, #83	; 0x53
    1eb0:	646c6975 	strbtvs	r6, [ip], #-2421	; 0xfffff68b
    1eb4:	6363672f 	cmnvs	r3, #12320768	; 0xbc0000
    1eb8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
    1ebc:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
    1ec0:	61652d65 	cmnvs	r5, r5, ror #26
    1ec4:	682d6962 	stmdavs	sp!, {r1, r5, r6, r8, fp, sp, lr}
    1ec8:	4b676659 	blmi	19db834 <__bss_end+0x192e55c>
    1ecc:	63672f34 	cmnvs	r7, #52, 30	; 0xd0
    1ed0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
    1ed4:	6f6e2d6d 	svcvs	0x006e2d6d
    1ed8:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
    1edc:	2d696261 	sfmcs	f6, 2, [r9, #-388]!	; 0xfffffe7c
    1ee0:	332e3031 			; <UNDEFINED> instruction: 0x332e3031
    1ee4:	3230322d 	eorscc	r3, r0, #-805306366	; 0xd0000002
    1ee8:	37302e31 			; <UNDEFINED> instruction: 0x37302e31
    1eec:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1ef0:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    1ef4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1ef8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1efc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1f00:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    1f04:	00636367 	rsbeq	r6, r3, r7, ror #6
    1f08:	20554e47 	subscs	r4, r5, r7, asr #28
    1f0c:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
    1f10:	0037332e 	eorseq	r3, r7, lr, lsr #6
    1f14:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    1f18:	2f00706d 	svccs	0x0000706d
    1f1c:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    1f20:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    1f24:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    1f28:	3342702d 	movtcc	r7, #8237	; 0x202d
    1f2c:	2f656430 	svccs	0x00656430
    1f30:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    1f34:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    1f38:	302e332e 	eorcc	r3, lr, lr, lsr #6
    1f3c:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    1f40:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    1f44:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    1f48:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    1f4c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    1f50:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    1f54:	2f62696c 	svccs	0x0062696c
    1f58:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    1f5c:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    1f60:	00676e69 	rsbeq	r6, r7, r9, ror #28
    1f64:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    1f68:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    1f6c:	2f2e2e2f 	svccs	0x002e2e2f
    1f70:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    1f74:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    1f78:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    1f7c:	732f6362 			; <UNDEFINED> instruction: 0x732f6362
    1f80:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
    1f84:	656d2f67 	strbvs	r2, [sp, #-3943]!	; 0xfffff099
    1f88:	706d636d 	rsbvc	r6, sp, sp, ror #6
    1f8c:	4700632e 	strmi	r6, [r0, -lr, lsr #6]
    1f90:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
    1f94:	31203731 			; <UNDEFINED> instruction: 0x31203731
    1f98:	2e332e30 	mrccs	14, 1, r2, cr3, cr0, {1}
    1f9c:	30322031 	eorscc	r2, r2, r1, lsr r0
    1fa0:	36303132 			; <UNDEFINED> instruction: 0x36303132
    1fa4:	28203132 	stmdacs	r0!, {r1, r4, r5, r8, ip, sp}
    1fa8:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
    1fac:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
    1fb0:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
    1fb4:	613d7570 	teqvs	sp, r0, ror r5
    1fb8:	74376d72 	ldrtvc	r6, [r7], #-3442	; 0xfffff28e
    1fbc:	20696d64 	rsbcs	r6, r9, r4, ror #26
    1fc0:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
    1fc4:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
    1fc8:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
    1fcc:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
    1fd0:	616d2d20 	cmnvs	sp, r0, lsr #26
    1fd4:	2d206d72 	stccs	13, cr6, [r0, #-456]!	; 0xfffffe38
    1fd8:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
    1fdc:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
    1fe0:	7434766d 	ldrtvc	r7, [r4], #-1645	; 0xfffff993
    1fe4:	20672d20 	rsbcs	r2, r7, r0, lsr #26
    1fe8:	20324f2d 	eorscs	r4, r2, sp, lsr #30
    1fec:	6f6e662d 	svcvs	0x006e662d
    1ff0:	6975622d 	ldmdbvs	r5!, {r0, r2, r3, r5, r9, sp, lr}^
    1ff4:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
    1ff8:	63727300 	cmnvs	r2, #0, 6
    1ffc:	2e2e0030 	mcrcs	0, 1, r0, cr14, cr0, {1}
    2000:	2f2e2e2f 	svccs	0x002e2e2f
    2004:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2008:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    200c:	2f2e2e2f 	svccs	0x002e2e2f
    2010:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2014:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1e78 <_start-0xe188>
    2018:	2f636269 	svccs	0x00636269
    201c:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
    2020:	2f656e69 	svccs	0x00656e69
    2024:	2f6d7261 	svccs	0x006d7261
    2028:	636d656d 	cmnvs	sp, #457179136	; 0x1b400000
    202c:	732d7970 			; <UNDEFINED> instruction: 0x732d7970
    2030:	2e627574 	mcrcs	5, 3, r7, cr2, cr4, {3}
    2034:	73640063 	cmnvc	r4, #99	; 0x63
    2038:	61003074 	tstvs	r0, r4, ror r0
    203c:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    2040:	645f6465 	ldrbvs	r6, [pc], #-1125	; 2048 <_start-0xdfb8>
    2044:	61007473 	tstvs	r0, r3, ror r4
    2048:	6e67696c 	vnmulvs.f16	s13, s14, s25	; <UNPREDICTABLE>
    204c:	735f6465 	cmpvc	pc, #1694498816	; 0x65000000
    2050:	6d006372 	stcvs	3, cr6, [r0, #-456]	; 0xfffffe38
    2054:	70636d65 	rsbvc	r6, r3, r5, ror #26
    2058:	656c0079 	strbvs	r0, [ip, #-121]!	; 0xffffff87
    205c:	2f00306e 	svccs	0x0000306e
    2060:	6c697562 	cfstr64vs	mvdx7, [r9], #-392	; 0xfffffe78
    2064:	656e2f64 	strbvs	r2, [lr, #-3940]!	; 0xfffff09c
    2068:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    206c:	3342702d 	movtcc	r7, #8237	; 0x202d
    2070:	2f656430 	svccs	0x00656430
    2074:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2078:	332d6269 			; <UNDEFINED> instruction: 0x332d6269
    207c:	302e332e 	eorcc	r3, lr, lr, lsr #6
    2080:	6975622f 	ldmdbvs	r5!, {r0, r1, r2, r3, r5, r9, sp, lr}^
    2084:	612f646c 			; <UNDEFINED> instruction: 0x612f646c
    2088:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
    208c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
    2090:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
    2094:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    2098:	2f62696c 	svccs	0x0062696c
    209c:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    20a0:	63616d2f 	cmnvs	r1, #3008	; 0xbc0
    20a4:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
    20a8:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
    20ac:	696c6100 	stmdbvs	ip!, {r8, sp, lr}^
    20b0:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
    20b4:	6464615f 	strbtvs	r6, [r4], #-351	; 0xfffffea1
    20b8:	2e2e0072 	mcrcs	0, 1, r0, cr14, cr2, {3}
    20bc:	2f2e2e2f 	svccs	0x002e2e2f
    20c0:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    20c4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    20c8:	77656e2f 	strbvc	r6, [r5, -pc, lsr #28]!
    20cc:	2f62696c 	svccs	0x0062696c
    20d0:	6362696c 	cmnvs	r2, #108, 18	; 0x1b0000
    20d4:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    20d8:	2f676e69 	svccs	0x00676e69
    20dc:	736d656d 	cmnvc	sp, #457179136	; 0x1b400000
    20e0:	632e7465 			; <UNDEFINED> instruction: 0x632e7465
    20e4:	6d656d00 	stclvs	13, cr6, [r5, #-0]
    20e8:	00746573 	rsbseq	r6, r4, r3, ror r5
    20ec:	63727473 	cmnvs	r2, #1929379840	; 0x73000000
    20f0:	2e007268 	cdpcs	2, 0, cr7, cr0, cr8, {3}
    20f4:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    20f8:	2f2e2e2f 	svccs	0x002e2e2f
    20fc:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    2100:	656e2f2e 	strbvs	r2, [lr, #-3886]!	; 0xfffff0d2
    2104:	62696c77 	rsbvs	r6, r9, #30464	; 0x7700
    2108:	62696c2f 	rsbvs	r6, r9, #12032	; 0x2f00
    210c:	74732f63 	ldrbtvc	r2, [r3], #-3939	; 0xfffff09d
    2110:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
    2114:	7274732f 	rsbsvc	r7, r4, #-1140850688	; 0xbc000000
    2118:	2e726863 	cdpcs	8, 7, cr6, cr2, cr3, {3}
    211c:	74730063 	ldrbtvc	r0, [r3], #-99	; 0xffffff9d
    2120:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
    2124:	2f2e2e00 	svccs	0x002e2e00
    2128:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    212c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2130:	2f2e2e2f 	svccs	0x002e2e2f
    2134:	6e2f2e2e 	cdpvs	14, 2, cr2, cr15, cr14, {1}
    2138:	696c7765 	stmdbvs	ip!, {r0, r2, r5, r6, r8, r9, sl, ip, sp, lr}^
    213c:	696c2f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, sp}^
    2140:	6d2f6362 	stcvs	3, cr6, [pc, #-392]!	; 1fc0 <_start-0xe040>
    2144:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
    2148:	612f656e 			; <UNDEFINED> instruction: 0x612f656e
    214c:	732f6d72 			; <UNDEFINED> instruction: 0x732f6d72
    2150:	656c7274 	strbvs	r7, [ip, #-628]!	; 0xfffffd8c
    2154:	74732d6e 	ldrbtvc	r2, [r3], #-3438	; 0xfffff292
    2158:	632e6275 			; <UNDEFINED> instruction: 0x632e6275
    215c:	72747300 	rsbsvc	r7, r4, #0, 6
    2160:	7970636e 	ldmdbvc	r0!, {r1, r2, r3, r5, r6, r8, r9, sp, lr}^
    2164:	2f2e2e00 	svccs	0x002e2e00
    2168:	2e2f2e2e 	cdpcs	14, 2, cr2, cr15, cr14, {1}
    216c:	2e2e2f2e 	cdpcs	15, 2, cr2, cr14, cr14, {1}
    2170:	2f2e2e2f 	svccs	0x002e2e2f
    2174:	6c77656e 	cfldr64vs	mvdx6, [r7], #-440	; 0xfffffe48
    2178:	6c2f6269 	sfmvs	f6, 4, [pc], #-420	; 1fdc <_start-0xe024>
    217c:	2f636269 	svccs	0x00636269
    2180:	69727473 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
    2184:	732f676e 			; <UNDEFINED> instruction: 0x732f676e
    2188:	636e7274 	cmnvs	lr, #116, 4	; 0x40000007
    218c:	632e7970 			; <UNDEFINED> instruction: 0x632e7970
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end+0x1023a4c>
   4:	35312820 	ldrcc	r2, [r1, #-2080]!	; 0xfffff7e0
   8:	2e30313a 	mrccs	1, 1, r3, cr0, cr10, {1}
   c:	30322d33 	eorscc	r2, r2, r3, lsr sp
  10:	302e3132 	eorcc	r3, lr, r2, lsr r1
  14:	29342d37 	ldmdbcs	r4!, {r0, r1, r2, r4, r5, r8, sl, fp, sp}
  18:	2e303120 	rsfcssp	f3, f0, f0
  1c:	20312e33 	eorscs	r2, r1, r3, lsr lr
  20:	31323032 	teqcc	r2, r2, lsr r0
  24:	31323630 	teqcc	r2, r0, lsr r6
  28:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  2c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  30:	Address 0x0000000000000030 is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	005a3605 	subseq	r3, sl, r5, lsl #12
  14:	01080706 	tsteq	r8, r6, lsl #14
  18:	04120109 	ldreq	r0, [r2], #-265	; 0xfffffef7
  1c:	01150114 	tsteq	r5, r4, lsl r1
  20:	01180317 	tsteq	r8, r7, lsl r3
  24:	061e011a 			; <UNDEFINED> instruction: 0x061e011a
  28:	01440122 	cmpeq	r4, r2, lsr #2

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
       0:	0000000c 	andeq	r0, r0, ip
       4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
       8:	7c020001 	stcvc	0, cr0, [r2], {1}
       c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      10:	0000001c 	andeq	r0, r0, ip, lsl r0
      14:	00000000 	andeq	r0, r0, r0
      18:	00020000 	andeq	r0, r2, r0
      1c:	00000240 	andeq	r0, r0, r0, asr #4
      20:	8b040e42 	blhi	103930 <__bss_end+0x56658>
      24:	0b0d4201 	bleq	350830 <__bss_end+0x2a3558>
      28:	0d0dfe02 	stceq	14, cr15, [sp, #-8]
      2c:	000ecb42 	andeq	ip, lr, r2, asr #22
      30:	00000018 	andeq	r0, r0, r8, lsl r0
      34:	00000000 	andeq	r0, r0, r0
      38:	00020240 	andeq	r0, r2, r0, asr #4
      3c:	0000001c 	andeq	r0, r0, ip, lsl r0
      40:	8b080e42 	blhi	203950 <__bss_end+0x156678>
      44:	42018e02 	andmi	r8, r1, #2, 28
      48:	00040b0c 	andeq	r0, r4, ip, lsl #22
      4c:	0000001c 	andeq	r0, r0, ip, lsl r0
      50:	00000000 	andeq	r0, r0, r0
      54:	0002025c 	andeq	r0, r2, ip, asr r2
      58:	00000018 	andeq	r0, r0, r8, lsl r0
      5c:	8b040e42 	blhi	10396c <__bss_end+0x56694>
      60:	0b0d4201 	bleq	35086c <__bss_end+0x2a3594>
      64:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
      68:	00000ecb 	andeq	r0, r0, fp, asr #29
      6c:	0000001c 	andeq	r0, r0, ip, lsl r0
      70:	00000000 	andeq	r0, r0, r0
      74:	00020274 	andeq	r0, r2, r4, ror r2
      78:	00000038 	andeq	r0, r0, r8, lsr r0
      7c:	8b080e42 	blhi	20398c <__bss_end+0x1566b4>
      80:	42018e02 	andmi	r8, r1, #2, 28
      84:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
      88:	00080d0c 	andeq	r0, r8, ip, lsl #26
      8c:	0000001c 	andeq	r0, r0, ip, lsl r0
      90:	00000000 	andeq	r0, r0, r0
      94:	000202ac 	andeq	r0, r2, ip, lsr #5
      98:	00000098 	muleq	r0, r8, r0
      9c:	8b080e42 	blhi	2039ac <__bss_end+0x1566d4>
      a0:	42018e02 	andmi	r8, r1, #2, 28
      a4:	7e040b0c 	vmlavc.f64	d0, d4, d12
      a8:	00080d0c 	andeq	r0, r8, ip, lsl #26
      ac:	0000000c 	andeq	r0, r0, ip
      b0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
      b4:	7c020001 	stcvc	0, cr0, [r2], {1}
      b8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
      bc:	0000001c 	andeq	r0, r0, ip, lsl r0
      c0:	000000ac 	andeq	r0, r0, ip, lsr #1
      c4:	00020344 	andeq	r0, r2, r4, asr #6
      c8:	00000098 	muleq	r0, r8, r0
      cc:	8b040e42 	blhi	1039dc <__bss_end+0x56704>
      d0:	0b0d4201 	bleq	3508dc <__bss_end+0x2a3604>
      d4:	420d0d7e 	andmi	r0, sp, #8064	; 0x1f80
      d8:	00000ecb 	andeq	r0, r0, fp, asr #29
      dc:	0000000c 	andeq	r0, r0, ip
      e0:	000000ac 	andeq	r0, r0, ip, lsr #1
      e4:	000203dc 	ldrdeq	r0, [r2], -ip
      e8:	000000b4 	strheq	r0, [r0], -r4
      ec:	0000000c 	andeq	r0, r0, ip
      f0:	000000ac 	andeq	r0, r0, ip, lsr #1
      f4:	00020490 	muleq	r2, r0, r4
      f8:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
      fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     100:	000000ac 	andeq	r0, r0, ip, lsr #1
     104:	00020540 	andeq	r0, r2, r0, asr #10
     108:	00000044 	andeq	r0, r0, r4, asr #32
     10c:	8b040e42 	blhi	103a1c <__bss_end+0x56744>
     110:	0b0d4201 	bleq	35091c <__bss_end+0x2a3644>
     114:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
     118:	00000ecb 	andeq	r0, r0, fp, asr #29
     11c:	0000001c 	andeq	r0, r0, ip, lsl r0
     120:	000000ac 	andeq	r0, r0, ip, lsr #1
     124:	00020584 	andeq	r0, r2, r4, lsl #11
     128:	00000064 	andeq	r0, r0, r4, rrx
     12c:	8b040e42 	blhi	103a3c <__bss_end+0x56764>
     130:	0b0d4201 	bleq	35093c <__bss_end+0x2a3664>
     134:	420d0d68 	andmi	r0, sp, #104, 26	; 0x1a00
     138:	00000ecb 	andeq	r0, r0, fp, asr #29
     13c:	0000000c 	andeq	r0, r0, ip
     140:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     144:	7c020001 	stcvc	0, cr0, [r2], {1}
     148:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     14c:	0000001c 	andeq	r0, r0, ip, lsl r0
     150:	0000013c 	andeq	r0, r0, ip, lsr r1
     154:	000205f0 	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
     158:	00000168 	andeq	r0, r0, r8, ror #2
     15c:	8b080e42 	blhi	203a6c <__bss_end+0x156794>
     160:	42018e02 	andmi	r8, r1, #2, 28
     164:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     168:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
     16c:	0000001c 	andeq	r0, r0, ip, lsl r0
     170:	0000013c 	andeq	r0, r0, ip, lsr r1
     174:	00020758 	andeq	r0, r2, r8, asr r7
     178:	000000e4 	andeq	r0, r0, r4, ror #1
     17c:	8b080e42 	blhi	203a8c <__bss_end+0x1567b4>
     180:	42018e02 	andmi	r8, r1, #2, 28
     184:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     188:	080d0c64 	stmdaeq	sp, {r2, r5, r6, sl, fp}
     18c:	0000001c 	andeq	r0, r0, ip, lsl r0
     190:	0000013c 	andeq	r0, r0, ip, lsr r1
     194:	0002083c 	andeq	r0, r2, ip, lsr r8
     198:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     19c:	8b080e42 	blhi	203aac <__bss_end+0x1567d4>
     1a0:	42018e02 	andmi	r8, r1, #2, 28
     1a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     1a8:	080d0c6c 	stmdaeq	sp, {r2, r3, r5, r6, sl, fp}
     1ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     1b0:	0000013c 	andeq	r0, r0, ip, lsr r1
     1b4:	0002092c 	andeq	r0, r2, ip, lsr #18
     1b8:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     1bc:	8b080e42 	blhi	203acc <__bss_end+0x1567f4>
     1c0:	42018e02 	andmi	r8, r1, #2, 28
     1c4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     1c8:	080d0cd4 	stmdaeq	sp, {r2, r4, r6, r7, sl, fp}
     1cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     1d0:	0000013c 	andeq	r0, r0, ip, lsr r1
     1d4:	00020afc 	strdeq	r0, [r2], -ip
     1d8:	00000124 	andeq	r0, r0, r4, lsr #2
     1dc:	8b080e42 	blhi	203aec <__bss_end+0x156814>
     1e0:	42018e02 	andmi	r8, r1, #2, 28
     1e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     1e8:	080d0c86 	stmdaeq	sp, {r1, r2, r7, sl, fp}
     1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     1f0:	0000013c 	andeq	r0, r0, ip, lsr r1
     1f4:	00020c20 	andeq	r0, r2, r0, lsr #24
     1f8:	000000a8 	andeq	r0, r0, r8, lsr #1
     1fc:	8b080e42 	blhi	203b0c <__bss_end+0x156834>
     200:	42018e02 	andmi	r8, r1, #2, 28
     204:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     208:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     20c:	0000001c 	andeq	r0, r0, ip, lsl r0
     210:	0000013c 	andeq	r0, r0, ip, lsr r1
     214:	00020cc8 	andeq	r0, r2, r8, asr #25
     218:	0000008c 	andeq	r0, r0, ip, lsl #1
     21c:	8b080e42 	blhi	203b2c <__bss_end+0x156854>
     220:	42018e02 	andmi	r8, r1, #2, 28
     224:	7c040b0c 			; <UNDEFINED> instruction: 0x7c040b0c
     228:	00080d0c 	andeq	r0, r8, ip, lsl #26
     22c:	0000000c 	andeq	r0, r0, ip
     230:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     234:	7c020001 	stcvc	0, cr0, [r2], {1}
     238:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     23c:	0000001c 	andeq	r0, r0, ip, lsl r0
     240:	0000022c 	andeq	r0, r0, ip, lsr #4
     244:	00020d54 	andeq	r0, r2, r4, asr sp
     248:	00000068 	andeq	r0, r0, r8, rrx
     24c:	8b040e42 	blhi	103b5c <__bss_end+0x56884>
     250:	0b0d4201 	bleq	350a5c <__bss_end+0x2a3784>
     254:	420d0d6c 	andmi	r0, sp, #108, 26	; 0x1b00
     258:	00000ecb 	andeq	r0, r0, fp, asr #29
     25c:	0000001c 	andeq	r0, r0, ip, lsl r0
     260:	0000022c 	andeq	r0, r0, ip, lsr #4
     264:	00020dbc 			; <UNDEFINED> instruction: 0x00020dbc
     268:	0000002c 	andeq	r0, r0, ip, lsr #32
     26c:	8b040e42 	blhi	103b7c <__bss_end+0x568a4>
     270:	0b0d4201 	bleq	350a7c <__bss_end+0x2a37a4>
     274:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
     278:	00000ecb 	andeq	r0, r0, fp, asr #29
     27c:	0000001c 	andeq	r0, r0, ip, lsl r0
     280:	0000022c 	andeq	r0, r0, ip, lsr #4
     284:	00020de8 	andeq	r0, r2, r8, ror #27
     288:	00000098 	muleq	r0, r8, r0
     28c:	8b040e42 	blhi	103b9c <__bss_end+0x568c4>
     290:	0b0d4201 	bleq	350a9c <__bss_end+0x2a37c4>
     294:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
     298:	000ecb42 	andeq	ip, lr, r2, asr #22
     29c:	0000001c 	andeq	r0, r0, ip, lsl r0
     2a0:	0000022c 	andeq	r0, r0, ip, lsr #4
     2a4:	00020e80 	andeq	r0, r2, r0, lsl #29
     2a8:	000000d8 	ldrdeq	r0, [r0], -r8
     2ac:	8b040e42 	blhi	103bbc <__bss_end+0x568e4>
     2b0:	0b0d4201 	bleq	350abc <__bss_end+0x2a37e4>
     2b4:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
     2b8:	000ecb42 	andeq	ip, lr, r2, asr #22
     2bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     2c0:	0000022c 	andeq	r0, r0, ip, lsr #4
     2c4:	00020f58 	andeq	r0, r2, r8, asr pc
     2c8:	00000098 	muleq	r0, r8, r0
     2cc:	8b040e42 	blhi	103bdc <__bss_end+0x56904>
     2d0:	0b0d4201 	bleq	350adc <__bss_end+0x2a3804>
     2d4:	0d0d4402 	cfstrseq	mvf4, [sp, #-8]
     2d8:	000ecb42 	andeq	ip, lr, r2, asr #22
     2dc:	0000000c 	andeq	r0, r0, ip
     2e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     2e4:	7c020001 	stcvc	0, cr0, [r2], {1}
     2e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     2f0:	000002dc 	ldrdeq	r0, [r0], -ip
     2f4:	00020ff0 	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
     2f8:	00000114 	andeq	r0, r0, r4, lsl r1
     2fc:	8b080e42 	blhi	203c0c <__bss_end+0x156934>
     300:	42018e02 	andmi	r8, r1, #2, 28
     304:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     308:	080d0c84 	stmdaeq	sp, {r2, r7, sl, fp}
     30c:	0000001c 	andeq	r0, r0, ip, lsl r0
     310:	000002dc 	ldrdeq	r0, [r0], -ip
     314:	00021104 	andeq	r1, r2, r4, lsl #2
     318:	000000c8 	andeq	r0, r0, r8, asr #1
     31c:	8b080e42 	blhi	203c2c <__bss_end+0x156954>
     320:	42018e02 	andmi	r8, r1, #2, 28
     324:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     328:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
     32c:	0000001c 	andeq	r0, r0, ip, lsl r0
     330:	000002dc 	ldrdeq	r0, [r0], -ip
     334:	000211cc 	andeq	r1, r2, ip, asr #3
     338:	000001a4 	andeq	r0, r0, r4, lsr #3
     33c:	8b080e42 	blhi	203c4c <__bss_end+0x156974>
     340:	42018e02 	andmi	r8, r1, #2, 28
     344:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     348:	080d0ccc 	stmdaeq	sp, {r2, r3, r6, r7, sl, fp}
     34c:	0000001c 	andeq	r0, r0, ip, lsl r0
     350:	000002dc 	ldrdeq	r0, [r0], -ip
     354:	00021370 	andeq	r1, r2, r0, ror r3
     358:	000000dc 	ldrdeq	r0, [r0], -ip
     35c:	8b080e42 	blhi	203c6c <__bss_end+0x156994>
     360:	42018e02 	andmi	r8, r1, #2, 28
     364:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     368:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
     36c:	0000001c 	andeq	r0, r0, ip, lsl r0
     370:	000002dc 	ldrdeq	r0, [r0], -ip
     374:	0002144c 	andeq	r1, r2, ip, asr #8
     378:	00000204 	andeq	r0, r0, r4, lsl #4
     37c:	8b080e42 	blhi	203c8c <__bss_end+0x1569b4>
     380:	42018e02 	andmi	r8, r1, #2, 28
     384:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     388:	080d0cfc 	stmdaeq	sp, {r2, r3, r4, r5, r6, r7, sl, fp}
     38c:	0000001c 	andeq	r0, r0, ip, lsl r0
     390:	000002dc 	ldrdeq	r0, [r0], -ip
     394:	00021650 	andeq	r1, r2, r0, asr r6
     398:	000000e0 	andeq	r0, r0, r0, ror #1
     39c:	8b080e42 	blhi	203cac <__bss_end+0x1569d4>
     3a0:	42018e02 	andmi	r8, r1, #2, 28
     3a4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     3a8:	080d0c6a 	stmdaeq	sp, {r1, r3, r5, r6, sl, fp}
     3ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     3b0:	000002dc 	ldrdeq	r0, [r0], -ip
     3b4:	00021730 	andeq	r1, r2, r0, lsr r7
     3b8:	00000034 	andeq	r0, r0, r4, lsr r0
     3bc:	8b080e42 	blhi	203ccc <__bss_end+0x1569f4>
     3c0:	42018e02 	andmi	r8, r1, #2, 28
     3c4:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     3c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     3cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     3d0:	000002dc 	ldrdeq	r0, [r0], -ip
     3d4:	00021764 	andeq	r1, r2, r4, ror #14
     3d8:	00000030 	andeq	r0, r0, r0, lsr r0
     3dc:	8b040e42 	blhi	103cec <__bss_end+0x56a14>
     3e0:	0b0d4201 	bleq	350bec <__bss_end+0x2a3914>
     3e4:	420d0d50 	andmi	r0, sp, #80, 26	; 0x1400
     3e8:	00000ecb 	andeq	r0, r0, fp, asr #29
     3ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     3f0:	000002dc 	ldrdeq	r0, [r0], -ip
     3f4:	00021794 	muleq	r2, r4, r7
     3f8:	00000034 	andeq	r0, r0, r4, lsr r0
     3fc:	8b080e42 	blhi	203d0c <__bss_end+0x156a34>
     400:	42018e02 	andmi	r8, r1, #2, 28
     404:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     408:	00080d0c 	andeq	r0, r8, ip, lsl #26
     40c:	0000001c 	andeq	r0, r0, ip, lsl r0
     410:	000002dc 	ldrdeq	r0, [r0], -ip
     414:	000217c8 	andeq	r1, r2, r8, asr #15
     418:	0000012c 	andeq	r0, r0, ip, lsr #2
     41c:	8b080e42 	blhi	203d2c <__bss_end+0x156a54>
     420:	42018e02 	andmi	r8, r1, #2, 28
     424:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     428:	080d0c90 	stmdaeq	sp, {r4, r7, sl, fp}
     42c:	0000001c 	andeq	r0, r0, ip, lsl r0
     430:	000002dc 	ldrdeq	r0, [r0], -ip
     434:	000218f4 	strdeq	r1, [r2], -r4
     438:	00000090 	muleq	r0, r0, r0
     43c:	8b080e42 	blhi	203d4c <__bss_end+0x156a74>
     440:	42018e02 	andmi	r8, r1, #2, 28
     444:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     448:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     44c:	0000001c 	andeq	r0, r0, ip, lsl r0
     450:	000002dc 	ldrdeq	r0, [r0], -ip
     454:	00021984 	andeq	r1, r2, r4, lsl #19
     458:	00000104 	andeq	r0, r0, r4, lsl #2
     45c:	8b080e42 	blhi	203d6c <__bss_end+0x156a94>
     460:	42018e02 	andmi	r8, r1, #2, 28
     464:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     468:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
     46c:	0000001c 	andeq	r0, r0, ip, lsl r0
     470:	000002dc 	ldrdeq	r0, [r0], -ip
     474:	00021a88 	andeq	r1, r2, r8, lsl #21
     478:	00000044 	andeq	r0, r0, r4, asr #32
     47c:	8b080e42 	blhi	203d8c <__bss_end+0x156ab4>
     480:	42018e02 	andmi	r8, r1, #2, 28
     484:	5c040b0c 			; <UNDEFINED> instruction: 0x5c040b0c
     488:	00080d0c 	andeq	r0, r8, ip, lsl #26
     48c:	0000001c 	andeq	r0, r0, ip, lsl r0
     490:	000002dc 	ldrdeq	r0, [r0], -ip
     494:	00021acc 	andeq	r1, r2, ip, asr #21
     498:	00000040 	andeq	r0, r0, r0, asr #32
     49c:	8b040e42 	blhi	103dac <__bss_end+0x56ad4>
     4a0:	0b0d4201 	bleq	350cac <__bss_end+0x2a39d4>
     4a4:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
     4a8:	00000ecb 	andeq	r0, r0, fp, asr #29
     4ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     4b0:	000002dc 	ldrdeq	r0, [r0], -ip
     4b4:	00021b0c 	andeq	r1, r2, ip, lsl #22
     4b8:	0000004c 	andeq	r0, r0, ip, asr #32
     4bc:	8b080e42 	blhi	203dcc <__bss_end+0x156af4>
     4c0:	42018e02 	andmi	r8, r1, #2, 28
     4c4:	60040b0c 	andvs	r0, r4, ip, lsl #22
     4c8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     4cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     4d0:	000002dc 	ldrdeq	r0, [r0], -ip
     4d4:	00021b58 	andeq	r1, r2, r8, asr fp
     4d8:	00000048 	andeq	r0, r0, r8, asr #32
     4dc:	8b040e42 	blhi	103dec <__bss_end+0x56b14>
     4e0:	0b0d4201 	bleq	350cec <__bss_end+0x2a3a14>
     4e4:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     4e8:	00000ecb 	andeq	r0, r0, fp, asr #29
     4ec:	0000000c 	andeq	r0, r0, ip
     4f0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     4f4:	7c020001 	stcvc	0, cr0, [r2], {1}
     4f8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     4fc:	00000020 	andeq	r0, r0, r0, lsr #32
     500:	000004ec 	andeq	r0, r0, ip, ror #9
     504:	00021ba0 	andeq	r1, r2, r0, lsr #23
     508:	0000024c 	andeq	r0, r0, ip, asr #4
     50c:	8b080e42 	blhi	203e1c <__bss_end+0x156b44>
     510:	42018e02 	andmi	r8, r1, #2, 28
     514:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     518:	0d0c0112 	stfeqs	f0, [ip, #-72]	; 0xffffffb8
     51c:	00000008 	andeq	r0, r0, r8
     520:	0000001c 	andeq	r0, r0, ip, lsl r0
     524:	000004ec 	andeq	r0, r0, ip, ror #9
     528:	00021dec 	andeq	r1, r2, ip, ror #27
     52c:	00000100 	andeq	r0, r0, r0, lsl #2
     530:	8b080e42 	blhi	203e40 <__bss_end+0x156b68>
     534:	42018e02 	andmi	r8, r1, #2, 28
     538:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     53c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
     540:	0000001c 	andeq	r0, r0, ip, lsl r0
     544:	000004ec 	andeq	r0, r0, ip, ror #9
     548:	00021eec 	andeq	r1, r2, ip, ror #29
     54c:	00000110 	andeq	r0, r0, r0, lsl r1
     550:	8b080e42 	blhi	203e60 <__bss_end+0x156b88>
     554:	42018e02 	andmi	r8, r1, #2, 28
     558:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     55c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
     560:	0000001c 	andeq	r0, r0, ip, lsl r0
     564:	000004ec 	andeq	r0, r0, ip, ror #9
     568:	00021ffc 	strdeq	r1, [r2], -ip
     56c:	00000084 	andeq	r0, r0, r4, lsl #1
     570:	8b080e42 	blhi	203e80 <__bss_end+0x156ba8>
     574:	42018e02 	andmi	r8, r1, #2, 28
     578:	78040b0c 	stmdavc	r4, {r2, r3, r8, r9, fp}
     57c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     580:	0000001c 	andeq	r0, r0, ip, lsl r0
     584:	000004ec 	andeq	r0, r0, ip, ror #9
     588:	00022080 	andeq	r2, r2, r0, lsl #1
     58c:	00000058 	andeq	r0, r0, r8, asr r0
     590:	8b080e42 	blhi	203ea0 <__bss_end+0x156bc8>
     594:	42018e02 	andmi	r8, r1, #2, 28
     598:	64040b0c 	strvs	r0, [r4], #-2828	; 0xfffff4f4
     59c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     5a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5a4:	000004ec 	andeq	r0, r0, ip, ror #9
     5a8:	000220d8 	ldrdeq	r2, [r2], -r8
     5ac:	000001a8 	andeq	r0, r0, r8, lsr #3
     5b0:	8b080e42 	blhi	203ec0 <__bss_end+0x156be8>
     5b4:	42018e02 	andmi	r8, r1, #2, 28
     5b8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5bc:	080d0cc8 	stmdaeq	sp, {r3, r6, r7, sl, fp}
     5c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5c4:	000004ec 	andeq	r0, r0, ip, ror #9
     5c8:	00022280 	andeq	r2, r2, r0, lsl #5
     5cc:	00000104 	andeq	r0, r0, r4, lsl #2
     5d0:	8b080e42 	blhi	203ee0 <__bss_end+0x156c08>
     5d4:	42018e02 	andmi	r8, r1, #2, 28
     5d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     5dc:	080d0c74 	stmdaeq	sp, {r2, r4, r5, r6, sl, fp}
     5e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     5e4:	000004ec 	andeq	r0, r0, ip, ror #9
     5e8:	00022384 	andeq	r2, r2, r4, lsl #7
     5ec:	0000007c 	andeq	r0, r0, ip, ror r0
     5f0:	8b040e42 	blhi	103f00 <__bss_end+0x56c28>
     5f4:	0b0d4201 	bleq	350e00 <__bss_end+0x2a3b28>
     5f8:	420d0d72 	andmi	r0, sp, #7296	; 0x1c80
     5fc:	00000ecb 	andeq	r0, r0, fp, asr #29
     600:	0000001c 	andeq	r0, r0, ip, lsl r0
     604:	000004ec 	andeq	r0, r0, ip, ror #9
     608:	00022400 	andeq	r2, r2, r0, lsl #8
     60c:	000000f8 	strdeq	r0, [r0], -r8
     610:	8b080e42 	blhi	203f20 <__bss_end+0x156c48>
     614:	42018e02 	andmi	r8, r1, #2, 28
     618:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     61c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
     620:	0000001c 	andeq	r0, r0, ip, lsl r0
     624:	000004ec 	andeq	r0, r0, ip, ror #9
     628:	000224f8 	strdeq	r2, [r2], -r8
     62c:	0000011c 	andeq	r0, r0, ip, lsl r1
     630:	8b080e42 	blhi	203f40 <__bss_end+0x156c68>
     634:	42018e02 	andmi	r8, r1, #2, 28
     638:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     63c:	080d0c7e 	stmdaeq	sp, {r1, r2, r3, r4, r5, r6, sl, fp}
     640:	0000001c 	andeq	r0, r0, ip, lsl r0
     644:	000004ec 	andeq	r0, r0, ip, ror #9
     648:	00022614 	andeq	r2, r2, r4, lsl r6
     64c:	0000009c 	muleq	r0, ip, r0
     650:	8b080e42 	blhi	203f60 <__bss_end+0x156c88>
     654:	42018e02 	andmi	r8, r1, #2, 28
     658:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     65c:	080d0c40 	stmdaeq	sp, {r6, sl, fp}
     660:	00000018 	andeq	r0, r0, r8, lsl r0
     664:	000004ec 	andeq	r0, r0, ip, ror #9
     668:	000226b0 			; <UNDEFINED> instruction: 0x000226b0
     66c:	00000038 	andeq	r0, r0, r8, lsr r0
     670:	8b080e42 	blhi	203f80 <__bss_end+0x156ca8>
     674:	42018e02 	andmi	r8, r1, #2, 28
     678:	00040b0c 	andeq	r0, r4, ip, lsl #22
     67c:	0000001c 	andeq	r0, r0, ip, lsl r0
     680:	000004ec 	andeq	r0, r0, ip, ror #9
     684:	000226e8 	andeq	r2, r2, r8, ror #13
     688:	00000030 	andeq	r0, r0, r0, lsr r0
     68c:	8b040e42 	blhi	103f9c <__bss_end+0x56cc4>
     690:	0b0d4201 	bleq	350e9c <__bss_end+0x2a3bc4>
     694:	420d0d4e 	andmi	r0, sp, #4992	; 0x1380
     698:	00000ecb 	andeq	r0, r0, fp, asr #29
     69c:	00000020 	andeq	r0, r0, r0, lsr #32
     6a0:	000004ec 	andeq	r0, r0, ip, ror #9
     6a4:	00022718 	andeq	r2, r2, r8, lsl r7
     6a8:	000001a4 	andeq	r0, r0, r4, lsr #3
     6ac:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     6b0:	8e028b03 	vmlahi.f64	d8, d2, d3
     6b4:	0b0c4201 	bleq	310ec0 <__bss_end+0x263be8>
     6b8:	0cbc0204 	lfmeq	f0, 4, [ip], #16
     6bc:	00000c0d 	andeq	r0, r0, sp, lsl #24
     6c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6c4:	000004ec 	andeq	r0, r0, ip, ror #9
     6c8:	000228bc 			; <UNDEFINED> instruction: 0x000228bc
     6cc:	00000034 	andeq	r0, r0, r4, lsr r0
     6d0:	8b080e42 	blhi	203fe0 <__bss_end+0x156d08>
     6d4:	42018e02 	andmi	r8, r1, #2, 28
     6d8:	52040b0c 	andpl	r0, r4, #12, 22	; 0x3000
     6dc:	00080d0c 	andeq	r0, r8, ip, lsl #26
     6e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     6e4:	000004ec 	andeq	r0, r0, ip, ror #9
     6e8:	000228f0 	strdeq	r2, [r2], -r0
     6ec:	00000038 	andeq	r0, r0, r8, lsr r0
     6f0:	8b040e42 	blhi	104000 <__bss_end+0x56d28>
     6f4:	0b0d4201 	bleq	350f00 <__bss_end+0x2a3c28>
     6f8:	420d0d52 	andmi	r0, sp, #5248	; 0x1480
     6fc:	00000ecb 	andeq	r0, r0, fp, asr #29
     700:	0000001c 	andeq	r0, r0, ip, lsl r0
     704:	000004ec 	andeq	r0, r0, ip, ror #9
     708:	00022928 	andeq	r2, r2, r8, lsr #18
     70c:	00000024 	andeq	r0, r0, r4, lsr #32
     710:	8b040e42 	blhi	104020 <__bss_end+0x56d48>
     714:	0b0d4201 	bleq	350f20 <__bss_end+0x2a3c48>
     718:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
     71c:	00000ecb 	andeq	r0, r0, fp, asr #29
     720:	0000001c 	andeq	r0, r0, ip, lsl r0
     724:	000004ec 	andeq	r0, r0, ip, ror #9
     728:	0002294c 	andeq	r2, r2, ip, asr #18
     72c:	0000021c 	andeq	r0, r0, ip, lsl r2
     730:	8b080e42 	blhi	204040 <__bss_end+0x156d68>
     734:	42018e02 	andmi	r8, r1, #2, 28
     738:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     73c:	080d0cf6 	stmdaeq	sp, {r1, r2, r4, r5, r6, r7, sl, fp}
     740:	0000001c 	andeq	r0, r0, ip, lsl r0
     744:	000004ec 	andeq	r0, r0, ip, ror #9
     748:	00022b68 	andeq	r2, r2, r8, ror #22
     74c:	0000005c 	andeq	r0, r0, ip, asr r0
     750:	8b080e42 	blhi	204060 <__bss_end+0x156d88>
     754:	42018e02 	andmi	r8, r1, #2, 28
     758:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
     75c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     760:	0000001c 	andeq	r0, r0, ip, lsl r0
     764:	000004ec 	andeq	r0, r0, ip, ror #9
     768:	00022bc4 	andeq	r2, r2, r4, asr #23
     76c:	0000005c 	andeq	r0, r0, ip, asr r0
     770:	8b080e42 	blhi	204080 <__bss_end+0x156da8>
     774:	42018e02 	andmi	r8, r1, #2, 28
     778:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
     77c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     780:	0000001c 	andeq	r0, r0, ip, lsl r0
     784:	000004ec 	andeq	r0, r0, ip, ror #9
     788:	00022c20 	andeq	r2, r2, r0, lsr #24
     78c:	0000007c 	andeq	r0, r0, ip, ror r0
     790:	8b080e42 	blhi	2040a0 <__bss_end+0x156dc8>
     794:	42018e02 	andmi	r8, r1, #2, 28
     798:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
     79c:	00080d0c 	andeq	r0, r8, ip, lsl #26
     7a0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7a4:	000004ec 	andeq	r0, r0, ip, ror #9
     7a8:	00022c9c 	muleq	r2, ip, ip
     7ac:	00000108 	andeq	r0, r0, r8, lsl #2
     7b0:	8b040e42 	blhi	1040c0 <__bss_end+0x56de8>
     7b4:	0b0d4201 	bleq	350fc0 <__bss_end+0x2a3ce8>
     7b8:	0d0d7202 	sfmeq	f7, 4, [sp, #-8]
     7bc:	000ecb42 	andeq	ip, lr, r2, asr #22
     7c0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7c4:	000004ec 	andeq	r0, r0, ip, ror #9
     7c8:	00022da4 	andeq	r2, r2, r4, lsr #27
     7cc:	0000009c 	muleq	r0, ip, r0
     7d0:	8b080e42 	blhi	2040e0 <__bss_end+0x156e08>
     7d4:	42018e02 	andmi	r8, r1, #2, 28
     7d8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     7dc:	080d0c42 	stmdaeq	sp, {r1, r6, sl, fp}
     7e0:	0000001c 	andeq	r0, r0, ip, lsl r0
     7e4:	000004ec 	andeq	r0, r0, ip, ror #9
     7e8:	00022e40 	andeq	r2, r2, r0, asr #28
     7ec:	00000118 	andeq	r0, r0, r8, lsl r1
     7f0:	8b080e42 	blhi	204100 <__bss_end+0x156e28>
     7f4:	42018e02 	andmi	r8, r1, #2, 28
     7f8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     7fc:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
     800:	0000001c 	andeq	r0, r0, ip, lsl r0
     804:	000004ec 	andeq	r0, r0, ip, ror #9
     808:	00022f58 	andeq	r2, r2, r8, asr pc
     80c:	00000048 	andeq	r0, r0, r8, asr #32
     810:	8b040e42 	blhi	104120 <__bss_end+0x56e48>
     814:	0b0d4201 	bleq	351020 <__bss_end+0x2a3d48>
     818:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
     81c:	00000ecb 	andeq	r0, r0, fp, asr #29
     820:	0000001c 	andeq	r0, r0, ip, lsl r0
     824:	000004ec 	andeq	r0, r0, ip, ror #9
     828:	00022fa0 	andeq	r2, r2, r0, lsr #31
     82c:	000000f4 	strdeq	r0, [r0], -r4
     830:	8b080e42 	blhi	204140 <__bss_end+0x156e68>
     834:	42018e02 	andmi	r8, r1, #2, 28
     838:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     83c:	080d0c70 	stmdaeq	sp, {r4, r5, r6, sl, fp}
     840:	0000001c 	andeq	r0, r0, ip, lsl r0
     844:	000004ec 	andeq	r0, r0, ip, ror #9
     848:	00023094 	muleq	r2, r4, r0
     84c:	00000028 	andeq	r0, r0, r8, lsr #32
     850:	8b040e42 	blhi	104160 <__bss_end+0x56e88>
     854:	0b0d4201 	bleq	351060 <__bss_end+0x2a3d88>
     858:	420d0d4a 	andmi	r0, sp, #4736	; 0x1280
     85c:	00000ecb 	andeq	r0, r0, fp, asr #29
     860:	00000018 	andeq	r0, r0, r8, lsl r0
     864:	000004ec 	andeq	r0, r0, ip, ror #9
     868:	000230bc 	strheq	r3, [r2], -ip
     86c:	00000030 	andeq	r0, r0, r0, lsr r0
     870:	8b080e42 	blhi	204180 <__bss_end+0x156ea8>
     874:	42018e02 	andmi	r8, r1, #2, 28
     878:	00040b0c 	andeq	r0, r4, ip, lsl #22
     87c:	0000001c 	andeq	r0, r0, ip, lsl r0
     880:	000004ec 	andeq	r0, r0, ip, ror #9
     884:	000230ec 	andeq	r3, r2, ip, ror #1
     888:	000000c0 	andeq	r0, r0, r0, asr #1
     88c:	8b080e42 	blhi	20419c <__bss_end+0x156ec4>
     890:	42018e02 	andmi	r8, r1, #2, 28
     894:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     898:	080d0c5a 	stmdaeq	sp, {r1, r3, r4, r6, sl, fp}
     89c:	0000001c 	andeq	r0, r0, ip, lsl r0
     8a0:	000004ec 	andeq	r0, r0, ip, ror #9
     8a4:	000231ac 	andeq	r3, r2, ip, lsr #3
     8a8:	000000c0 	andeq	r0, r0, r0, asr #1
     8ac:	8b080e42 	blhi	2041bc <__bss_end+0x156ee4>
     8b0:	42018e02 	andmi	r8, r1, #2, 28
     8b4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     8b8:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
     8bc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8c0:	000004ec 	andeq	r0, r0, ip, ror #9
     8c4:	0002326c 	andeq	r3, r2, ip, ror #4
     8c8:	000000bc 	strheq	r0, [r0], -ip
     8cc:	8b080e42 	blhi	2041dc <__bss_end+0x156f04>
     8d0:	42018e02 	andmi	r8, r1, #2, 28
     8d4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     8d8:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
     8dc:	0000001c 	andeq	r0, r0, ip, lsl r0
     8e0:	000004ec 	andeq	r0, r0, ip, ror #9
     8e4:	00023328 	andeq	r3, r2, r8, lsr #6
     8e8:	000000b8 	strheq	r0, [r0], -r8
     8ec:	8b080e42 	blhi	2041fc <__bss_end+0x156f24>
     8f0:	42018e02 	andmi	r8, r1, #2, 28
     8f4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     8f8:	080d0c4c 	stmdaeq	sp, {r2, r3, r6, sl, fp}
     8fc:	0000001c 	andeq	r0, r0, ip, lsl r0
     900:	000004ec 	andeq	r0, r0, ip, ror #9
     904:	000233e0 	andeq	r3, r2, r0, ror #7
     908:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
     90c:	8b080e42 	blhi	20421c <__bss_end+0x156f44>
     910:	42018e02 	andmi	r8, r1, #2, 28
     914:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     918:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
     91c:	0000001c 	andeq	r0, r0, ip, lsl r0
     920:	000004ec 	andeq	r0, r0, ip, ror #9
     924:	00023490 	muleq	r2, r0, r4
     928:	00000034 	andeq	r0, r0, r4, lsr r0
     92c:	8b080e42 	blhi	20423c <__bss_end+0x156f64>
     930:	42018e02 	andmi	r8, r1, #2, 28
     934:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     938:	00080d0c 	andeq	r0, r8, ip, lsl #26
     93c:	0000000c 	andeq	r0, r0, ip
     940:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     944:	7c020001 	stcvc	0, cr0, [r2], {1}
     948:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     94c:	0000001c 	andeq	r0, r0, ip, lsl r0
     950:	0000093c 	andeq	r0, r0, ip, lsr r9
     954:	000234c4 	andeq	r3, r2, r4, asr #9
     958:	000000b4 	strheq	r0, [r0], -r4
     95c:	8b080e42 	blhi	20426c <__bss_end+0x156f94>
     960:	42018e02 	andmi	r8, r1, #2, 28
     964:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     968:	080d0c52 	stmdaeq	sp, {r1, r4, r6, sl, fp}
     96c:	0000001c 	andeq	r0, r0, ip, lsl r0
     970:	0000093c 	andeq	r0, r0, ip, lsr r9
     974:	00023578 	andeq	r3, r2, r8, ror r5
     978:	000000a0 	andeq	r0, r0, r0, lsr #1
     97c:	84100e42 	ldrhi	r0, [r0], #-3650	; 0xfffff1be
     980:	8b038504 	blhi	e1d98 <__bss_end+0x34ac0>
     984:	42018e02 	andmi	r8, r1, #2, 28
     988:	00040b0c 	andeq	r0, r4, ip, lsl #22
     98c:	0000001c 	andeq	r0, r0, ip, lsl r0
     990:	0000093c 	andeq	r0, r0, ip, lsr r9
     994:	00023618 	andeq	r3, r2, r8, lsl r6
     998:	0000001c 	andeq	r0, r0, ip, lsl r0
     99c:	8b040e42 	blhi	1042ac <__bss_end+0x56fd4>
     9a0:	0b0d4201 	bleq	3511ac <__bss_end+0x2a3ed4>
     9a4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     9a8:	00000ecb 	andeq	r0, r0, fp, asr #29
     9ac:	0000001c 	andeq	r0, r0, ip, lsl r0
     9b0:	0000093c 	andeq	r0, r0, ip, lsr r9
     9b4:	00023634 	andeq	r3, r2, r4, lsr r6
     9b8:	0000001c 	andeq	r0, r0, ip, lsl r0
     9bc:	8b040e42 	blhi	1042cc <__bss_end+0x56ff4>
     9c0:	0b0d4201 	bleq	3511cc <__bss_end+0x2a3ef4>
     9c4:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
     9c8:	00000ecb 	andeq	r0, r0, fp, asr #29
     9cc:	0000001c 	andeq	r0, r0, ip, lsl r0
     9d0:	0000093c 	andeq	r0, r0, ip, lsr r9
     9d4:	00023650 	andeq	r3, r2, r0, asr r6
     9d8:	00000064 	andeq	r0, r0, r4, rrx
     9dc:	8b080e42 	blhi	2042ec <__bss_end+0x157014>
     9e0:	42018e02 	andmi	r8, r1, #2, 28
     9e4:	6a040b0c 	bvs	10361c <__bss_end+0x56344>
     9e8:	00080d0c 	andeq	r0, r8, ip, lsl #26
     9ec:	0000001c 	andeq	r0, r0, ip, lsl r0
     9f0:	0000093c 	andeq	r0, r0, ip, lsr r9
     9f4:	000236b4 			; <UNDEFINED> instruction: 0x000236b4
     9f8:	000000d4 	ldrdeq	r0, [r0], -r4
     9fc:	8b040e42 	blhi	10430c <__bss_end+0x57034>
     a00:	0b0d4201 	bleq	35120c <__bss_end+0x2a3f34>
     a04:	0d0d5e02 	stceq	14, cr5, [sp, #-8]
     a08:	000ecb42 	andeq	ip, lr, r2, asr #22
     a0c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a10:	0000093c 	andeq	r0, r0, ip, lsr r9
     a14:	00023788 	andeq	r3, r2, r8, lsl #15
     a18:	000000e0 	andeq	r0, r0, r0, ror #1
     a1c:	8b040e42 	blhi	10432c <__bss_end+0x57054>
     a20:	0b0d4201 	bleq	35122c <__bss_end+0x2a3f54>
     a24:	0d0d6402 	cfstrseq	mvf6, [sp, #-8]
     a28:	000ecb42 	andeq	ip, lr, r2, asr #22
     a2c:	0000000c 	andeq	r0, r0, ip
     a30:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     a34:	7c020001 	stcvc	0, cr0, [r2], {1}
     a38:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     a3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a40:	00000a2c 	andeq	r0, r0, ip, lsr #20
     a44:	00023868 	andeq	r3, r2, r8, ror #16
     a48:	000000dc 	ldrdeq	r0, [r0], -ip
     a4c:	8b040e42 	blhi	10435c <__bss_end+0x57084>
     a50:	0b0d4201 	bleq	35125c <__bss_end+0x2a3f84>
     a54:	0d0d6202 	sfmeq	f6, 4, [sp, #-8]
     a58:	000ecb42 	andeq	ip, lr, r2, asr #22
     a5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a60:	00000a2c 	andeq	r0, r0, ip, lsr #20
     a64:	00023944 	andeq	r3, r2, r4, asr #18
     a68:	00000034 	andeq	r0, r0, r4, lsr r0
     a6c:	8b080e42 	blhi	20437c <__bss_end+0x1570a4>
     a70:	42018e02 	andmi	r8, r1, #2, 28
     a74:	54040b0c 	strpl	r0, [r4], #-2828	; 0xfffff4f4
     a78:	00080d0c 	andeq	r0, r8, ip, lsl #26
     a7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     a80:	00000a2c 	andeq	r0, r0, ip, lsr #20
     a84:	00023978 	andeq	r3, r2, r8, ror r9
     a88:	000000b8 	strheq	r0, [r0], -r8
     a8c:	8b040e42 	blhi	10439c <__bss_end+0x570c4>
     a90:	0b0d4201 	bleq	35129c <__bss_end+0x2a3fc4>
     a94:	0d0d5202 	sfmeq	f5, 4, [sp, #-8]
     a98:	000ecb42 	andeq	ip, lr, r2, asr #22
     a9c:	0000001c 	andeq	r0, r0, ip, lsl r0
     aa0:	00000a2c 	andeq	r0, r0, ip, lsr #20
     aa4:	00023a30 	andeq	r3, r2, r0, lsr sl
     aa8:	00000050 	andeq	r0, r0, r0, asr r0
     aac:	8b040e42 	blhi	1043bc <__bss_end+0x570e4>
     ab0:	0b0d4201 	bleq	3512bc <__bss_end+0x2a3fe4>
     ab4:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
     ab8:	00000ecb 	andeq	r0, r0, fp, asr #29
     abc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ac0:	00000a2c 	andeq	r0, r0, ip, lsr #20
     ac4:	00023a80 	andeq	r3, r2, r0, lsl #21
     ac8:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
     acc:	8b040e42 	blhi	1043dc <__bss_end+0x57104>
     ad0:	0b0d4201 	bleq	3512dc <__bss_end+0x2a4004>
     ad4:	0d0dce02 	stceq	14, cr12, [sp, #-8]
     ad8:	000ecb42 	andeq	ip, lr, r2, asr #22
     adc:	0000001c 	andeq	r0, r0, ip, lsl r0
     ae0:	00000a2c 	andeq	r0, r0, ip, lsr #20
     ae4:	00023c30 	andeq	r3, r2, r0, lsr ip
     ae8:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
     aec:	8b040e42 	blhi	1043fc <__bss_end+0x57124>
     af0:	0b0d4201 	bleq	3512fc <__bss_end+0x2a4024>
     af4:	0d0dd202 	sfmeq	f5, 1, [sp, #-8]
     af8:	000ecb42 	andeq	ip, lr, r2, asr #22
     afc:	0000001c 	andeq	r0, r0, ip, lsl r0
     b00:	00000a2c 	andeq	r0, r0, ip, lsr #20
     b04:	00023de8 	andeq	r3, r2, r8, ror #27
     b08:	00000058 	andeq	r0, r0, r8, asr r0
     b0c:	8b040e42 	blhi	10441c <__bss_end+0x57144>
     b10:	0b0d4201 	bleq	35131c <__bss_end+0x2a4044>
     b14:	420d0d62 	andmi	r0, sp, #6272	; 0x1880
     b18:	00000ecb 	andeq	r0, r0, fp, asr #29
     b1c:	0000000c 	andeq	r0, r0, ip
     b20:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     b24:	7c020001 	stcvc	0, cr0, [r2], {1}
     b28:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     b2c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b30:	00000b1c 	andeq	r0, r0, ip, lsl fp
     b34:	00023e40 	andeq	r3, r2, r0, asr #28
     b38:	000001c8 	andeq	r0, r0, r8, asr #3
     b3c:	8b080e42 	blhi	20444c <__bss_end+0x157174>
     b40:	42018e02 	andmi	r8, r1, #2, 28
     b44:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     b48:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
     b4c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b50:	00000b1c 	andeq	r0, r0, ip, lsl fp
     b54:	00024008 	andeq	r4, r2, r8
     b58:	0000007c 	andeq	r0, r0, ip, ror r0
     b5c:	8b080e42 	blhi	20446c <__bss_end+0x157194>
     b60:	42018e02 	andmi	r8, r1, #2, 28
     b64:	76040b0c 	strvc	r0, [r4], -ip, lsl #22
     b68:	00080d0c 	andeq	r0, r8, ip, lsl #26
     b6c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b70:	00000b1c 	andeq	r0, r0, ip, lsl fp
     b74:	00024084 	andeq	r4, r2, r4, lsl #1
     b78:	00000024 	andeq	r0, r0, r4, lsr #32
     b7c:	8b040e42 	blhi	10448c <__bss_end+0x571b4>
     b80:	0b0d4201 	bleq	35138c <__bss_end+0x2a40b4>
     b84:	420d0d48 	andmi	r0, sp, #72, 26	; 0x1200
     b88:	00000ecb 	andeq	r0, r0, fp, asr #29
     b8c:	0000001c 	andeq	r0, r0, ip, lsl r0
     b90:	00000b1c 	andeq	r0, r0, ip, lsl fp
     b94:	000240a8 	andeq	r4, r2, r8, lsr #1
     b98:	00000018 	andeq	r0, r0, r8, lsl r0
     b9c:	8b040e42 	blhi	1044ac <__bss_end+0x571d4>
     ba0:	0b0d4201 	bleq	3513ac <__bss_end+0x2a40d4>
     ba4:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
     ba8:	00000ecb 	andeq	r0, r0, fp, asr #29
     bac:	0000001c 	andeq	r0, r0, ip, lsl r0
     bb0:	00000b1c 	andeq	r0, r0, ip, lsl fp
     bb4:	000240c0 	andeq	r4, r2, r0, asr #1
     bb8:	000000d8 	ldrdeq	r0, [r0], -r8
     bbc:	8b040e42 	blhi	1044cc <__bss_end+0x571f4>
     bc0:	0b0d4201 	bleq	3513cc <__bss_end+0x2a40f4>
     bc4:	0d0d5c02 	stceq	12, cr5, [sp, #-8]
     bc8:	000ecb42 	andeq	ip, lr, r2, asr #22
     bcc:	0000001c 	andeq	r0, r0, ip, lsl r0
     bd0:	00000b1c 	andeq	r0, r0, ip, lsl fp
     bd4:	00024198 	muleq	r2, r8, r1
     bd8:	00000154 	andeq	r0, r0, r4, asr r1
     bdc:	8b040e42 	blhi	1044ec <__bss_end+0x57214>
     be0:	0b0d4201 	bleq	3513ec <__bss_end+0x2a4114>
     be4:	0d0d9e02 	stceq	14, cr9, [sp, #-8]
     be8:	000ecb42 	andeq	ip, lr, r2, asr #22
     bec:	0000000c 	andeq	r0, r0, ip
     bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
     bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     bfc:	0000001c 	andeq	r0, r0, ip, lsl r0
     c00:	00000bec 	andeq	r0, r0, ip, ror #23
     c04:	00024304 	andeq	r4, r2, r4, lsl #6
     c08:	00000050 	andeq	r0, r0, r0, asr r0
     c0c:	8b040e42 	blhi	10451c <__bss_end+0x57244>
     c10:	0b0d4201 	bleq	35141c <__bss_end+0x2a4144>
     c14:	420d0d5c 	andmi	r0, sp, #92, 26	; 0x1700
     c18:	00000ecb 	andeq	r0, r0, fp, asr #29
     c1c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c20:	00000bec 	andeq	r0, r0, ip, ror #23
     c24:	00024354 	andeq	r4, r2, r4, asr r3
     c28:	0000004c 	andeq	r0, r0, ip, asr #32
     c2c:	8b080e42 	blhi	20453c <__bss_end+0x157264>
     c30:	42018e02 	andmi	r8, r1, #2, 28
     c34:	60040b0c 	andvs	r0, r4, ip, lsl #22
     c38:	00080d0c 	andeq	r0, r8, ip, lsl #26
     c3c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c40:	00000bec 	andeq	r0, r0, ip, ror #23
     c44:	000243a0 	andeq	r4, r2, r0, lsr #7
     c48:	000000dc 	ldrdeq	r0, [r0], -ip
     c4c:	8b080e42 	blhi	20455c <__bss_end+0x157284>
     c50:	42018e02 	andmi	r8, r1, #2, 28
     c54:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     c58:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
     c5c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c60:	00000bec 	andeq	r0, r0, ip, ror #23
     c64:	0002447c 	andeq	r4, r2, ip, ror r4
     c68:	000001e8 	andeq	r0, r0, r8, ror #3
     c6c:	8b080e42 	blhi	20457c <__bss_end+0x1572a4>
     c70:	42018e02 	andmi	r8, r1, #2, 28
     c74:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     c78:	080d0cc0 	stmdaeq	sp, {r6, r7, sl, fp}
     c7c:	0000001c 	andeq	r0, r0, ip, lsl r0
     c80:	00000bec 	andeq	r0, r0, ip, ror #23
     c84:	00024664 	andeq	r4, r2, r4, ror #12
     c88:	00000018 	andeq	r0, r0, r8, lsl r0
     c8c:	8b040e42 	blhi	10459c <__bss_end+0x572c4>
     c90:	0b0d4201 	bleq	35149c <__bss_end+0x2a41c4>
     c94:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
     c98:	00000ecb 	andeq	r0, r0, fp, asr #29
     c9c:	00000018 	andeq	r0, r0, r8, lsl r0
     ca0:	00000bec 	andeq	r0, r0, ip, ror #23
     ca4:	0002467c 	andeq	r4, r2, ip, ror r6
     ca8:	0000003c 	andeq	r0, r0, ip, lsr r0
     cac:	8b080e42 	blhi	2045bc <__bss_end+0x1572e4>
     cb0:	42018e02 	andmi	r8, r1, #2, 28
     cb4:	00040b0c 	andeq	r0, r4, ip, lsl #22
     cb8:	00000018 	andeq	r0, r0, r8, lsl r0
     cbc:	00000bec 	andeq	r0, r0, ip, ror #23
     cc0:	000246b8 			; <UNDEFINED> instruction: 0x000246b8
     cc4:	00000044 	andeq	r0, r0, r4, asr #32
     cc8:	8b080e42 	blhi	2045d8 <__bss_end+0x157300>
     ccc:	42018e02 	andmi	r8, r1, #2, 28
     cd0:	00040b0c 	andeq	r0, r4, ip, lsl #22
     cd4:	00000020 	andeq	r0, r0, r0, lsr #32
     cd8:	00000bec 	andeq	r0, r0, ip, ror #23
     cdc:	000246fc 	strdeq	r4, [r2], -ip
     ce0:	0000036c 	andeq	r0, r0, ip, ror #6
     ce4:	8b080e42 	blhi	2045f4 <__bss_end+0x15731c>
     ce8:	42018e02 	andmi	r8, r1, #2, 28
     cec:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     cf0:	0d0c0182 	stfeqs	f0, [ip, #-520]	; 0xfffffdf8
     cf4:	00000008 	andeq	r0, r0, r8
     cf8:	00000018 	andeq	r0, r0, r8, lsl r0
     cfc:	00000bec 	andeq	r0, r0, ip, ror #23
     d00:	00024a68 	andeq	r4, r2, r8, ror #20
     d04:	000000e4 	andeq	r0, r0, r4, ror #1
     d08:	8b080e42 	blhi	204618 <__bss_end+0x157340>
     d0c:	42018e02 	andmi	r8, r1, #2, 28
     d10:	00040b0c 	andeq	r0, r4, ip, lsl #22
     d14:	0000000c 	andeq	r0, r0, ip
     d18:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
     d1c:	7c020001 	stcvc	0, cr0, [r2], {1}
     d20:	000d0c0e 	andeq	r0, sp, lr, lsl #24
     d24:	0000001c 	andeq	r0, r0, ip, lsl r0
     d28:	00000d14 	andeq	r0, r0, r4, lsl sp
     d2c:	00024b4c 	andeq	r4, r2, ip, asr #22
     d30:	00000058 	andeq	r0, r0, r8, asr r0
     d34:	8b040e42 	blhi	104644 <__bss_end+0x5736c>
     d38:	0b0d4201 	bleq	351544 <__bss_end+0x2a426c>
     d3c:	420d0d64 	andmi	r0, sp, #100, 26	; 0x1900
     d40:	00000ecb 	andeq	r0, r0, fp, asr #29
     d44:	0000001c 	andeq	r0, r0, ip, lsl r0
     d48:	00000d14 	andeq	r0, r0, r4, lsl sp
     d4c:	00024ba4 	andeq	r4, r2, r4, lsr #23
     d50:	00000084 	andeq	r0, r0, r4, lsl #1
     d54:	8b040e42 	blhi	104664 <__bss_end+0x5738c>
     d58:	0b0d4201 	bleq	351564 <__bss_end+0x2a428c>
     d5c:	420d0d7a 	andmi	r0, sp, #7808	; 0x1e80
     d60:	00000ecb 	andeq	r0, r0, fp, asr #29
     d64:	0000001c 	andeq	r0, r0, ip, lsl r0
     d68:	00000d14 	andeq	r0, r0, r4, lsl sp
     d6c:	00024c28 	andeq	r4, r2, r8, lsr #24
     d70:	00000064 	andeq	r0, r0, r4, rrx
     d74:	8b040e42 	blhi	104684 <__bss_end+0x573ac>
     d78:	0b0d4201 	bleq	351584 <__bss_end+0x2a42ac>
     d7c:	420d0d6a 	andmi	r0, sp, #6784	; 0x1a80
     d80:	00000ecb 	andeq	r0, r0, fp, asr #29
     d84:	0000001c 	andeq	r0, r0, ip, lsl r0
     d88:	00000d14 	andeq	r0, r0, r4, lsl sp
     d8c:	00024c8c 	andeq	r4, r2, ip, lsl #25
     d90:	000000a8 	andeq	r0, r0, r8, lsr #1
     d94:	8b040e42 	blhi	1046a4 <__bss_end+0x573cc>
     d98:	0b0d4201 	bleq	3515a4 <__bss_end+0x2a42cc>
     d9c:	0d0d4c02 	stceq	12, cr4, [sp, #-8]
     da0:	000ecb42 	andeq	ip, lr, r2, asr #22
     da4:	0000001c 	andeq	r0, r0, ip, lsl r0
     da8:	00000d14 	andeq	r0, r0, r4, lsl sp
     dac:	00024d34 	andeq	r4, r2, r4, lsr sp
     db0:	0000003c 	andeq	r0, r0, ip, lsr r0
     db4:	8b040e42 	blhi	1046c4 <__bss_end+0x573ec>
     db8:	0b0d4201 	bleq	3515c4 <__bss_end+0x2a42ec>
     dbc:	420d0d56 	andmi	r0, sp, #5504	; 0x1580
     dc0:	00000ecb 	andeq	r0, r0, fp, asr #29
     dc4:	0000001c 	andeq	r0, r0, ip, lsl r0
     dc8:	00000d14 	andeq	r0, r0, r4, lsl sp
     dcc:	00024d70 	andeq	r4, r2, r0, ror sp
     dd0:	0000003c 	andeq	r0, r0, ip, lsr r0
     dd4:	8b040e42 	blhi	1046e4 <__bss_end+0x5740c>
     dd8:	0b0d4201 	bleq	3515e4 <__bss_end+0x2a430c>
     ddc:	420d0d56 	andmi	r0, sp, #5504	; 0x1580
     de0:	00000ecb 	andeq	r0, r0, fp, asr #29
     de4:	0000001c 	andeq	r0, r0, ip, lsl r0
     de8:	00000d14 	andeq	r0, r0, r4, lsl sp
     dec:	00024dac 	andeq	r4, r2, ip, lsr #27
     df0:	000000dc 	ldrdeq	r0, [r0], -ip
     df4:	8b080e42 	blhi	204704 <__bss_end+0x15742c>
     df8:	42018e02 	andmi	r8, r1, #2, 28
     dfc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     e00:	080d0c68 	stmdaeq	sp, {r3, r5, r6, sl, fp}
     e04:	0000001c 	andeq	r0, r0, ip, lsl r0
     e08:	00000d14 	andeq	r0, r0, r4, lsl sp
     e0c:	00024e88 	andeq	r4, r2, r8, lsl #29
     e10:	000000a0 	andeq	r0, r0, r0, lsr #1
     e14:	8b080e42 	blhi	204724 <__bss_end+0x15744c>
     e18:	42018e02 	andmi	r8, r1, #2, 28
     e1c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     e20:	080d0c4a 	stmdaeq	sp, {r1, r3, r6, sl, fp}
     e24:	0000001c 	andeq	r0, r0, ip, lsl r0
     e28:	00000d14 	andeq	r0, r0, r4, lsl sp
     e2c:	00024f28 	andeq	r4, r2, r8, lsr #30
     e30:	00000174 	andeq	r0, r0, r4, ror r1
     e34:	8b080e42 	blhi	204744 <__bss_end+0x15746c>
     e38:	42018e02 	andmi	r8, r1, #2, 28
     e3c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     e40:	080d0cae 	stmdaeq	sp, {r1, r2, r3, r5, r7, sl, fp}
     e44:	0000001c 	andeq	r0, r0, ip, lsl r0
     e48:	00000d14 	andeq	r0, r0, r4, lsl sp
     e4c:	0002509c 	muleq	r2, ip, r0
     e50:	00000070 	andeq	r0, r0, r0, ror r0
     e54:	8b040e42 	blhi	104764 <__bss_end+0x5748c>
     e58:	0b0d4201 	bleq	351664 <__bss_end+0x2a438c>
     e5c:	420d0d70 	andmi	r0, sp, #112, 26	; 0x1c00
     e60:	00000ecb 	andeq	r0, r0, fp, asr #29
     e64:	00000020 	andeq	r0, r0, r0, lsr #32
     e68:	00000d14 	andeq	r0, r0, r4, lsl sp
     e6c:	0002510c 	andeq	r5, r2, ip, lsl #2
     e70:	00000268 	andeq	r0, r0, r8, ror #4
     e74:	8b080e42 	blhi	204784 <__bss_end+0x1574ac>
     e78:	42018e02 	andmi	r8, r1, #2, 28
     e7c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     e80:	0d0c012c 	stfeqs	f0, [ip, #-176]	; 0xffffff50
     e84:	00000008 	andeq	r0, r0, r8
     e88:	00000020 	andeq	r0, r0, r0, lsr #32
     e8c:	00000d14 	andeq	r0, r0, r4, lsl sp
     e90:	00025374 	andeq	r5, r2, r4, ror r3
     e94:	00000348 	andeq	r0, r0, r8, asr #6
     e98:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
     e9c:	8e028b03 	vmlahi.f64	d8, d2, d3
     ea0:	0b0c4201 	bleq	3116ac <__bss_end+0x2643d4>
     ea4:	019c0304 	orrseq	r0, ip, r4, lsl #6
     ea8:	000c0d0c 	andeq	r0, ip, ip, lsl #26
     eac:	0000001c 	andeq	r0, r0, ip, lsl r0
     eb0:	00000d14 	andeq	r0, r0, r4, lsl sp
     eb4:	000256bc 			; <UNDEFINED> instruction: 0x000256bc
     eb8:	00000178 	andeq	r0, r0, r8, ror r1
     ebc:	8b080e42 	blhi	2047cc <__bss_end+0x1574f4>
     ec0:	42018e02 	andmi	r8, r1, #2, 28
     ec4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     ec8:	080d0cb6 	stmdaeq	sp, {r1, r2, r4, r5, r7, sl, fp}
     ecc:	00000020 	andeq	r0, r0, r0, lsr #32
     ed0:	00000d14 	andeq	r0, r0, r4, lsl sp
     ed4:	00025834 	andeq	r5, r2, r4, lsr r8
     ed8:	00000324 	andeq	r0, r0, r4, lsr #6
     edc:	8b080e42 	blhi	2047ec <__bss_end+0x157514>
     ee0:	42018e02 	andmi	r8, r1, #2, 28
     ee4:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     ee8:	0d0c018c 	stfeqs	f0, [ip, #-560]	; 0xfffffdd0
     eec:	00000008 	andeq	r0, r0, r8
     ef0:	0000001c 	andeq	r0, r0, ip, lsl r0
     ef4:	00000d14 	andeq	r0, r0, r4, lsl sp
     ef8:	00025b58 	andeq	r5, r2, r8, asr fp
     efc:	00000104 	andeq	r0, r0, r4, lsl #2
     f00:	8b080e42 	blhi	204810 <__bss_end+0x157538>
     f04:	42018e02 	andmi	r8, r1, #2, 28
     f08:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     f0c:	080d0c7c 	stmdaeq	sp, {r2, r3, r4, r5, r6, sl, fp}
     f10:	0000001c 	andeq	r0, r0, ip, lsl r0
     f14:	00000d14 	andeq	r0, r0, r4, lsl sp
     f18:	00025c5c 	andeq	r5, r2, ip, asr ip
     f1c:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f20:	8b080e42 	blhi	204830 <__bss_end+0x157558>
     f24:	42018e02 	andmi	r8, r1, #2, 28
     f28:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     f2c:	080d0ce2 	stmdaeq	sp, {r1, r5, r6, r7, sl, fp}
     f30:	00000020 	andeq	r0, r0, r0, lsr #32
     f34:	00000d14 	andeq	r0, r0, r4, lsl sp
     f38:	00025e2c 	andeq	r5, r2, ip, lsr #28
     f3c:	00000234 	andeq	r0, r0, r4, lsr r2
     f40:	8b080e42 	blhi	204850 <__bss_end+0x157578>
     f44:	42018e02 	andmi	r8, r1, #2, 28
     f48:	03040b0c 	movweq	r0, #19212	; 0x4b0c
     f4c:	0d0c0114 	stfeqs	f0, [ip, #-80]	; 0xffffffb0
     f50:	00000008 	andeq	r0, r0, r8
     f54:	0000001c 	andeq	r0, r0, ip, lsl r0
     f58:	00000d14 	andeq	r0, r0, r4, lsl sp
     f5c:	00026060 	andeq	r6, r2, r0, rrx
     f60:	0000010c 	andeq	r0, r0, ip, lsl #2
     f64:	8b080e42 	blhi	204874 <__bss_end+0x15759c>
     f68:	42018e02 	andmi	r8, r1, #2, 28
     f6c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     f70:	080d0c80 	stmdaeq	sp, {r7, sl, fp}
     f74:	0000001c 	andeq	r0, r0, ip, lsl r0
     f78:	00000d14 	andeq	r0, r0, r4, lsl sp
     f7c:	0002616c 	andeq	r6, r2, ip, ror #2
     f80:	00000070 	andeq	r0, r0, r0, ror r0
     f84:	8b080e42 	blhi	204894 <__bss_end+0x1575bc>
     f88:	42018e02 	andmi	r8, r1, #2, 28
     f8c:	72040b0c 	andvc	r0, r4, #12, 22	; 0x3000
     f90:	00080d0c 	andeq	r0, r8, ip, lsl #26
     f94:	0000001c 	andeq	r0, r0, ip, lsl r0
     f98:	00000d14 	andeq	r0, r0, r4, lsl sp
     f9c:	000261dc 	ldrdeq	r6, [r2], -ip
     fa0:	00000070 	andeq	r0, r0, r0, ror r0
     fa4:	8b080e42 	blhi	2048b4 <__bss_end+0x1575dc>
     fa8:	42018e02 	andmi	r8, r1, #2, 28
     fac:	72040b0c 	andvc	r0, r4, #12, 22	; 0x3000
     fb0:	00080d0c 	andeq	r0, r8, ip, lsl #26
     fb4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fb8:	00000d14 	andeq	r0, r0, r4, lsl sp
     fbc:	0002624c 	andeq	r6, r2, ip, asr #4
     fc0:	0000015c 	andeq	r0, r0, ip, asr r1
     fc4:	8b080e42 	blhi	2048d4 <__bss_end+0x1575fc>
     fc8:	42018e02 	andmi	r8, r1, #2, 28
     fcc:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     fd0:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
     fd4:	0000001c 	andeq	r0, r0, ip, lsl r0
     fd8:	00000d14 	andeq	r0, r0, r4, lsl sp
     fdc:	000263a8 	andeq	r6, r2, r8, lsr #7
     fe0:	00000138 	andeq	r0, r0, r8, lsr r1
     fe4:	8b080e42 	blhi	2048f4 <__bss_end+0x15761c>
     fe8:	42018e02 	andmi	r8, r1, #2, 28
     fec:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
     ff0:	080d0c96 	stmdaeq	sp, {r1, r2, r4, r7, sl, fp}
     ff4:	0000001c 	andeq	r0, r0, ip, lsl r0
     ff8:	00000d14 	andeq	r0, r0, r4, lsl sp
     ffc:	000264e0 	andeq	r6, r2, r0, ror #9
    1000:	000000b4 	strheq	r0, [r0], -r4
    1004:	8b080e42 	blhi	204914 <__bss_end+0x15763c>
    1008:	42018e02 	andmi	r8, r1, #2, 28
    100c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1010:	080d0c54 	stmdaeq	sp, {r2, r4, r6, sl, fp}
    1014:	0000001c 	andeq	r0, r0, ip, lsl r0
    1018:	00000d14 	andeq	r0, r0, r4, lsl sp
    101c:	00026594 	muleq	r2, r4, r5
    1020:	00000070 	andeq	r0, r0, r0, ror r0
    1024:	8b080e42 	blhi	204934 <__bss_end+0x15765c>
    1028:	42018e02 	andmi	r8, r1, #2, 28
    102c:	72040b0c 	andvc	r0, r4, #12, 22	; 0x3000
    1030:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1034:	0000001c 	andeq	r0, r0, ip, lsl r0
    1038:	00000d14 	andeq	r0, r0, r4, lsl sp
    103c:	00026604 	andeq	r6, r2, r4, lsl #12
    1040:	00000188 	andeq	r0, r0, r8, lsl #3
    1044:	8b080e42 	blhi	204954 <__bss_end+0x15767c>
    1048:	42018e02 	andmi	r8, r1, #2, 28
    104c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1050:	080d0cbe 	stmdaeq	sp, {r1, r2, r3, r4, r5, r7, sl, fp}
    1054:	00000020 	andeq	r0, r0, r0, lsr #32
    1058:	00000d14 	andeq	r0, r0, r4, lsl sp
    105c:	0002678c 	andeq	r6, r2, ip, lsl #15
    1060:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1064:	8b080e42 	blhi	204974 <__bss_end+0x15769c>
    1068:	42018e02 	andmi	r8, r1, #2, 28
    106c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1070:	0d0c016e 	stfeqs	f0, [ip, #-440]	; 0xfffffe48
    1074:	00000008 	andeq	r0, r0, r8
    1078:	0000001c 	andeq	r0, r0, ip, lsl r0
    107c:	00000d14 	andeq	r0, r0, r4, lsl sp
    1080:	00026a7c 	andeq	r6, r2, ip, ror sl
    1084:	00000190 	muleq	r0, r0, r1
    1088:	8b080e42 	blhi	204998 <__bss_end+0x1576c0>
    108c:	42018e02 	andmi	r8, r1, #2, 28
    1090:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1094:	080d0cc2 	stmdaeq	sp, {r1, r6, r7, sl, fp}
    1098:	0000001c 	andeq	r0, r0, ip, lsl r0
    109c:	00000d14 	andeq	r0, r0, r4, lsl sp
    10a0:	00026c0c 	andeq	r6, r2, ip, lsl #24
    10a4:	000000f8 	strdeq	r0, [r0], -r8
    10a8:	8b040e42 	blhi	1049b8 <__bss_end+0x576e0>
    10ac:	0b0d4201 	bleq	3518b8 <__bss_end+0x2a45e0>
    10b0:	0d0d7402 	cfstrseq	mvf7, [sp, #-8]
    10b4:	000ecb42 	andeq	ip, lr, r2, asr #22
    10b8:	00000020 	andeq	r0, r0, r0, lsr #32
    10bc:	00000d14 	andeq	r0, r0, r4, lsl sp
    10c0:	00026d04 	andeq	r6, r2, r4, lsl #26
    10c4:	00000244 	andeq	r0, r0, r4, asr #4
    10c8:	8b080e42 	blhi	2049d8 <__bss_end+0x157700>
    10cc:	42018e02 	andmi	r8, r1, #2, 28
    10d0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    10d4:	0d0c0118 	stfeqs	f0, [ip, #-96]	; 0xffffffa0
    10d8:	00000008 	andeq	r0, r0, r8
    10dc:	0000001c 	andeq	r0, r0, ip, lsl r0
    10e0:	00000d14 	andeq	r0, r0, r4, lsl sp
    10e4:	00026f48 	andeq	r6, r2, r8, asr #30
    10e8:	0000015c 	andeq	r0, r0, ip, asr r1
    10ec:	8b080e42 	blhi	2049fc <__bss_end+0x157724>
    10f0:	42018e02 	andmi	r8, r1, #2, 28
    10f4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    10f8:	080d0ca8 	stmdaeq	sp, {r3, r5, r7, sl, fp}
    10fc:	00000020 	andeq	r0, r0, r0, lsr #32
    1100:	00000d14 	andeq	r0, r0, r4, lsl sp
    1104:	000270a4 	andeq	r7, r2, r4, lsr #1
    1108:	00000720 	andeq	r0, r0, r0, lsr #14
    110c:	8b080e42 	blhi	204a1c <__bss_end+0x157744>
    1110:	42018e02 	andmi	r8, r1, #2, 28
    1114:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1118:	0d0c037c 	stceq	3, cr0, [ip, #-496]	; 0xfffffe10
    111c:	00000008 	andeq	r0, r0, r8
    1120:	0000001c 	andeq	r0, r0, ip, lsl r0
    1124:	00000d14 	andeq	r0, r0, r4, lsl sp
    1128:	000277c4 	andeq	r7, r2, r4, asr #15
    112c:	000000c8 	andeq	r0, r0, r8, asr #1
    1130:	8b080e42 	blhi	204a40 <__bss_end+0x157768>
    1134:	42018e02 	andmi	r8, r1, #2, 28
    1138:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    113c:	080d0c5e 	stmdaeq	sp, {r1, r2, r3, r4, r6, sl, fp}
    1140:	0000001c 	andeq	r0, r0, ip, lsl r0
    1144:	00000d14 	andeq	r0, r0, r4, lsl sp
    1148:	0002788c 	andeq	r7, r2, ip, lsl #17
    114c:	000000fc 	strdeq	r0, [r0], -ip
    1150:	8b080e42 	blhi	204a60 <__bss_end+0x157788>
    1154:	42018e02 	andmi	r8, r1, #2, 28
    1158:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    115c:	080d0c76 	stmdaeq	sp, {r1, r2, r4, r5, r6, sl, fp}
    1160:	00000020 	andeq	r0, r0, r0, lsr #32
    1164:	00000d14 	andeq	r0, r0, r4, lsl sp
    1168:	00027988 	andeq	r7, r2, r8, lsl #19
    116c:	000004c8 	andeq	r0, r0, r8, asr #9
    1170:	8b080e42 	blhi	204a80 <__bss_end+0x1577a8>
    1174:	42018e02 	andmi	r8, r1, #2, 28
    1178:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    117c:	0d0c025c 	sfmeq	f0, 4, [ip, #-368]	; 0xfffffe90
    1180:	00000008 	andeq	r0, r0, r8
    1184:	00000020 	andeq	r0, r0, r0, lsr #32
    1188:	00000d14 	andeq	r0, r0, r4, lsl sp
    118c:	00027e50 	andeq	r7, r2, r0, asr lr
    1190:	000003dc 	ldrdeq	r0, [r0], -ip
    1194:	8b080e42 	blhi	204aa4 <__bss_end+0x1577cc>
    1198:	42018e02 	andmi	r8, r1, #2, 28
    119c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    11a0:	0d0c01e8 	stfeqs	f0, [ip, #-928]	; 0xfffffc60
    11a4:	00000008 	andeq	r0, r0, r8
    11a8:	00000020 	andeq	r0, r0, r0, lsr #32
    11ac:	00000d14 	andeq	r0, r0, r4, lsl sp
    11b0:	0002822c 	andeq	r8, r2, ip, lsr #4
    11b4:	00000504 	andeq	r0, r0, r4, lsl #10
    11b8:	8b080e42 	blhi	204ac8 <__bss_end+0x1577f0>
    11bc:	42018e02 	andmi	r8, r1, #2, 28
    11c0:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    11c4:	0d0c027c 	sfmeq	f0, 4, [ip, #-496]	; 0xfffffe10
    11c8:	00000008 	andeq	r0, r0, r8
    11cc:	0000001c 	andeq	r0, r0, ip, lsl r0
    11d0:	00000d14 	andeq	r0, r0, r4, lsl sp
    11d4:	00028730 	andeq	r8, r2, r0, lsr r7
    11d8:	00000158 	andeq	r0, r0, r8, asr r1
    11dc:	8b080e42 	blhi	204aec <__bss_end+0x157814>
    11e0:	42018e02 	andmi	r8, r1, #2, 28
    11e4:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    11e8:	080d0ca4 	stmdaeq	sp, {r2, r5, r7, sl, fp}
    11ec:	0000001c 	andeq	r0, r0, ip, lsl r0
    11f0:	00000d14 	andeq	r0, r0, r4, lsl sp
    11f4:	00028888 	andeq	r8, r2, r8, lsl #17
    11f8:	00000070 	andeq	r0, r0, r0, ror r0
    11fc:	8b080e42 	blhi	204b0c <__bss_end+0x157834>
    1200:	42018e02 	andmi	r8, r1, #2, 28
    1204:	72040b0c 	andvc	r0, r4, #12, 22	; 0x3000
    1208:	00080d0c 	andeq	r0, r8, ip, lsl #26
    120c:	00000020 	andeq	r0, r0, r0, lsr #32
    1210:	00000d14 	andeq	r0, r0, r4, lsl sp
    1214:	000288f8 	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
    1218:	000003d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    121c:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    1220:	8e028b03 	vmlahi.f64	d8, d2, d3
    1224:	0b0c4201 	bleq	311a30 <__bss_end+0x264758>
    1228:	01e20304 	mvneq	r0, r4, lsl #6
    122c:	000c0d0c 	andeq	r0, ip, ip, lsl #26
    1230:	0000001c 	andeq	r0, r0, ip, lsl r0
    1234:	00000d14 	andeq	r0, r0, r4, lsl sp
    1238:	00028cc8 	andeq	r8, r2, r8, asr #25
    123c:	00000144 	andeq	r0, r0, r4, asr #2
    1240:	8b080e42 	blhi	204b50 <__bss_end+0x157878>
    1244:	42018e02 	andmi	r8, r1, #2, 28
    1248:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    124c:	080d0c9c 	stmdaeq	sp, {r2, r3, r4, r7, sl, fp}
    1250:	0000001c 	andeq	r0, r0, ip, lsl r0
    1254:	00000d14 	andeq	r0, r0, r4, lsl sp
    1258:	00028e0c 	andeq	r8, r2, ip, lsl #28
    125c:	00000054 	andeq	r0, r0, r4, asr r0
    1260:	8b080e42 	blhi	204b70 <__bss_end+0x157898>
    1264:	42018e02 	andmi	r8, r1, #2, 28
    1268:	64040b0c 	strvs	r0, [r4], #-2828	; 0xfffff4f4
    126c:	00080d0c 	andeq	r0, r8, ip, lsl #26
    1270:	0000001c 	andeq	r0, r0, ip, lsl r0
    1274:	00000d14 	andeq	r0, r0, r4, lsl sp
    1278:	00028e60 	andeq	r8, r2, r0, ror #28
    127c:	000000d8 	ldrdeq	r0, [r0], -r8
    1280:	8b080e42 	blhi	204b90 <__bss_end+0x1578b8>
    1284:	42018e02 	andmi	r8, r1, #2, 28
    1288:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    128c:	080d0c66 	stmdaeq	sp, {r1, r2, r5, r6, sl, fp}
    1290:	0000001c 	andeq	r0, r0, ip, lsl r0
    1294:	00000d14 	andeq	r0, r0, r4, lsl sp
    1298:	00028f38 	andeq	r8, r2, r8, lsr pc
    129c:	000000ac 	andeq	r0, r0, ip, lsr #1
    12a0:	8b080e42 	blhi	204bb0 <__bss_end+0x1578d8>
    12a4:	42018e02 	andmi	r8, r1, #2, 28
    12a8:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    12ac:	080d0c50 	stmdaeq	sp, {r4, r6, sl, fp}
    12b0:	00000020 	andeq	r0, r0, r0, lsr #32
    12b4:	00000d14 	andeq	r0, r0, r4, lsl sp
    12b8:	00028fe4 	andeq	r8, r2, r4, ror #31
    12bc:	00000288 	andeq	r0, r0, r8, lsl #5
    12c0:	8b080e42 	blhi	204bd0 <__bss_end+0x1578f8>
    12c4:	42018e02 	andmi	r8, r1, #2, 28
    12c8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    12cc:	0d0c013e 	stfeqs	f0, [ip, #-248]	; 0xffffff08
    12d0:	00000008 	andeq	r0, r0, r8
    12d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    12d8:	00000d14 	andeq	r0, r0, r4, lsl sp
    12dc:	0002926c 	andeq	r9, r2, ip, ror #4
    12e0:	000001b0 			; <UNDEFINED> instruction: 0x000001b0
    12e4:	8b080e42 	blhi	204bf4 <__bss_end+0x15791c>
    12e8:	42018e02 	andmi	r8, r1, #2, 28
    12ec:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    12f0:	080d0cd2 	stmdaeq	sp, {r1, r4, r6, r7, sl, fp}
    12f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    12f8:	00000d14 	andeq	r0, r0, r4, lsl sp
    12fc:	0002941c 	andeq	r9, r2, ip, lsl r4
    1300:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1304:	8b080e42 	blhi	204c14 <__bss_end+0x15793c>
    1308:	42018e02 	andmi	r8, r1, #2, 28
    130c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1310:	080d0ce2 	stmdaeq	sp, {r1, r5, r6, r7, sl, fp}
    1314:	00000020 	andeq	r0, r0, r0, lsr #32
    1318:	00000d14 	andeq	r0, r0, r4, lsl sp
    131c:	000295ec 	andeq	r9, r2, ip, ror #11
    1320:	00000280 	andeq	r0, r0, r0, lsl #5
    1324:	8b080e42 	blhi	204c34 <__bss_end+0x15795c>
    1328:	42018e02 	andmi	r8, r1, #2, 28
    132c:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1330:	0d0c0138 	stfeqs	f0, [ip, #-224]	; 0xffffff20
    1334:	00000008 	andeq	r0, r0, r8
    1338:	00000020 	andeq	r0, r0, r0, lsr #32
    133c:	00000d14 	andeq	r0, r0, r4, lsl sp
    1340:	0002986c 	andeq	r9, r2, ip, ror #16
    1344:	0000030c 	andeq	r0, r0, ip, lsl #6
    1348:	840c0e42 	strhi	r0, [ip], #-3650	; 0xfffff1be
    134c:	8e028b03 	vmlahi.f64	d8, d2, d3
    1350:	0b0c4201 	bleq	311b5c <__bss_end+0x264884>
    1354:	01800304 	orreq	r0, r0, r4, lsl #6
    1358:	000c0d0c 	andeq	r0, ip, ip, lsl #26
    135c:	00000020 	andeq	r0, r0, r0, lsr #32
    1360:	00000d14 	andeq	r0, r0, r4, lsl sp
    1364:	00029b78 	andeq	r9, r2, r8, ror fp
    1368:	00000458 	andeq	r0, r0, r8, asr r4
    136c:	8b080e42 	blhi	204c7c <__bss_end+0x1579a4>
    1370:	42018e02 	andmi	r8, r1, #2, 28
    1374:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    1378:	0d0c0222 	sfmeq	f0, 4, [ip, #-136]	; 0xffffff78
    137c:	00000008 	andeq	r0, r0, r8
    1380:	00000020 	andeq	r0, r0, r0, lsr #32
    1384:	00000d14 	andeq	r0, r0, r4, lsl sp
    1388:	00029fd0 	ldrdeq	r9, [r2], -r0
    138c:	00000e94 	muleq	r0, r4, lr
    1390:	8b080e42 	blhi	204ca0 <__bss_end+0x1579c8>
    1394:	42018e02 	andmi	r8, r1, #2, 28
    1398:	03040b0c 	movweq	r0, #19212	; 0x4b0c
    139c:	0d0c072a 	stceq	7, cr0, [ip, #-168]	; 0xffffff58
    13a0:	00000008 	andeq	r0, r0, r8
    13a4:	0000000c 	andeq	r0, r0, ip
    13a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    13ac:	7c020001 	stcvc	0, cr0, [r2], {1}
    13b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    13b4:	0000001c 	andeq	r0, r0, ip, lsl r0
    13b8:	000013a4 	andeq	r1, r0, r4, lsr #7
    13bc:	0002ae64 	andeq	sl, r2, r4, ror #28
    13c0:	00000044 	andeq	r0, r0, r4, asr #32
    13c4:	8b040e42 	blhi	104cd4 <__bss_end+0x579fc>
    13c8:	0b0d4201 	bleq	351bd4 <__bss_end+0x2a48fc>
    13cc:	420d0d58 	andmi	r0, sp, #88, 26	; 0x1600
    13d0:	00000ecb 	andeq	r0, r0, fp, asr #29
    13d4:	0000001c 	andeq	r0, r0, ip, lsl r0
    13d8:	000013a4 	andeq	r1, r0, r4, lsr #7
    13dc:	0002aea8 	andeq	sl, r2, r8, lsr #29
    13e0:	00000060 	andeq	r0, r0, r0, rrx
    13e4:	8b080e42 	blhi	204cf4 <__bss_end+0x157a1c>
    13e8:	42018e02 	andmi	r8, r1, #2, 28
    13ec:	66040b0c 	strvs	r0, [r4], -ip, lsl #22
    13f0:	00080d0c 	andeq	r0, r8, ip, lsl #26
    13f4:	0000001c 	andeq	r0, r0, ip, lsl r0
    13f8:	000013a4 	andeq	r1, r0, r4, lsr #7
    13fc:	0002af08 	andeq	sl, r2, r8, lsl #30
    1400:	000000b4 	strheq	r0, [r0], -r4
    1404:	8b080e42 	blhi	204d14 <__bss_end+0x157a3c>
    1408:	42018e02 	andmi	r8, r1, #2, 28
    140c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1410:	080d0c50 	stmdaeq	sp, {r4, r6, sl, fp}
    1414:	0000001c 	andeq	r0, r0, ip, lsl r0
    1418:	000013a4 	andeq	r1, r0, r4, lsr #7
    141c:	0002afbc 			; <UNDEFINED> instruction: 0x0002afbc
    1420:	000000b4 	strheq	r0, [r0], -r4
    1424:	8b080e42 	blhi	204d34 <__bss_end+0x157a5c>
    1428:	42018e02 	andmi	r8, r1, #2, 28
    142c:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
    1430:	080d0c50 	stmdaeq	sp, {r4, r6, sl, fp}
    1434:	0000001c 	andeq	r0, r0, ip, lsl r0
    1438:	000013a4 	andeq	r1, r0, r4, lsr #7
    143c:	0002b070 	andeq	fp, r2, r0, ror r0
    1440:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1444:	8b040e42 	blhi	104d54 <__bss_end+0x57a7c>
    1448:	0b0d4201 	bleq	351c54 <__bss_end+0x2a497c>
    144c:	0d0d6e02 	stceq	14, cr6, [sp, #-8]
    1450:	000ecb42 	andeq	ip, lr, r2, asr #22
    1454:	0000000c 	andeq	r0, r0, ip
    1458:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    145c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1460:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1464:	0000001c 	andeq	r0, r0, ip, lsl r0
    1468:	00001454 	andeq	r1, r0, r4, asr r4
    146c:	0002b160 	andeq	fp, r2, r0, ror #2
    1470:	00000020 	andeq	r0, r0, r0, lsr #32
    1474:	8b040e42 	blhi	104d84 <__bss_end+0x57aac>
    1478:	0b0d4201 	bleq	351c84 <__bss_end+0x2a49ac>
    147c:	420d0d46 	andmi	r0, sp, #4480	; 0x1180
    1480:	00000ecb 	andeq	r0, r0, fp, asr #29
    1484:	0000000c 	andeq	r0, r0, ip
    1488:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    148c:	7c010001 	stcvc	0, cr0, [r1], {1}
    1490:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1494:	0000000c 	andeq	r0, r0, ip
    1498:	00001484 	andeq	r1, r0, r4, lsl #9
    149c:	0002b180 	andeq	fp, r2, r0, lsl #3
    14a0:	000000f4 	strdeq	r0, [r0], -r4
    14a4:	0000000c 	andeq	r0, r0, ip
    14a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14ac:	7c020001 	stcvc	0, cr0, [r2], {1}
    14b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14b4:	00000024 	andeq	r0, r0, r4, lsr #32
    14b8:	000014a4 	andeq	r1, r0, r4, lsr #9
    14bc:	0002b298 	muleq	r2, r8, r2
    14c0:	000000ac 	andeq	r0, r0, ip, lsr #1
    14c4:	84080e44 	strhi	r0, [r8], #-3652	; 0xfffff1bc
    14c8:	02018e02 	andeq	r8, r1, #2, 28
    14cc:	c4ce0a46 	strbgt	r0, [lr], #2630	; 0xa46
    14d0:	0b42000e 	bleq	1081510 <__bss_end+0xfd4238>
    14d4:	0ec4ce48 	cdpeq	14, 12, cr12, cr4, cr8, {2}
    14d8:	00000000 	andeq	r0, r0, r0
    14dc:	0000000c 	andeq	r0, r0, ip
    14e0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    14e4:	7c020001 	stcvc	0, cr0, [r2], {1}
    14e8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    14ec:	00000024 	andeq	r0, r0, r4, lsr #32
    14f0:	000014dc 	ldrdeq	r1, [r0], -ip
    14f4:	0002b344 	andeq	fp, r2, r4, asr #6
    14f8:	00000120 	andeq	r0, r0, r0, lsr #2
    14fc:	84140e4e 	ldrhi	r0, [r4], #-3662	; 0xfffff1b2
    1500:	86048505 	strhi	r8, [r4], -r5, lsl #10
    1504:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
    1508:	ce620201 	cdpgt	2, 6, cr0, cr2, cr1, {0}
    150c:	c4c5c6c7 	strbgt	ip, [r5], #1735	; 0x6c7
    1510:	0000000e 	andeq	r0, r0, lr
    1514:	0000000c 	andeq	r0, r0, ip
    1518:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    151c:	7c020001 	stcvc	0, cr0, [r2], {1}
    1520:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    1524:	00000034 	andeq	r0, r0, r4, lsr r0
    1528:	00001514 	andeq	r1, r0, r4, lsl r5
    152c:	0002b464 	andeq	fp, r2, r4, ror #8
    1530:	0000011c 	andeq	r0, r0, ip, lsl r1
    1534:	840c0e62 	strhi	r0, [ip], #-3682	; 0xfffff19e
    1538:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    153c:	ce4e0201 	cdpgt	2, 4, cr0, cr14, cr1, {0}
    1540:	000ec4c5 	andeq	ip, lr, r5, asr #9
    1544:	840c0e52 	strhi	r0, [ip], #-3666	; 0xfffff1ae
    1548:	8e028503 	cfsh32hi	mvfx8, mvfx2, #3
    154c:	000e4401 	andeq	r4, lr, r1, lsl #8
    1550:	44cec5c4 	strbmi	ip, [lr], #1476	; 0x5c4
    1554:	03840c0e 	orreq	r0, r4, #3584	; 0xe00
    1558:	018e0285 	orreq	r0, lr, r5, lsl #5
    155c:	0000000c 	andeq	r0, r0, ip
    1560:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    1564:	7c020001 	stcvc	0, cr0, [r2], {1}
    1568:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    156c:	00000034 	andeq	r0, r0, r4, lsr r0
    1570:	0000155c 	andeq	r1, r0, ip, asr r5
    1574:	0002b580 	andeq	fp, r2, r0, lsl #11
    1578:	00000150 	andeq	r0, r0, r0, asr r1
    157c:	84100e4c 	ldrhi	r0, [r0], #-3660	; 0xfffff1b4
    1580:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1584:	02018e02 	andeq	r8, r1, #2, 28
    1588:	c4000e40 	strgt	r0, [r0], #-3648	; 0xfffff1c0
    158c:	02cec6c5 	sbceq	ip, lr, #206569472	; 0xc500000
    1590:	84100e52 	ldrhi	r0, [r0], #-3666	; 0xfffff1ae
    1594:	86038504 	strhi	r8, [r3], -r4, lsl #10
    1598:	44018e02 	strmi	r8, [r1], #-3586	; 0xfffff1fe
    159c:	c4c5c6ce 	strbgt	ip, [r5], #1742	; 0x6ce
    15a0:	0000000e 	andeq	r0, r0, lr
    15a4:	0000000c 	andeq	r0, r0, ip
    15a8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15ac:	7c020001 	stcvc	0, cr0, [r2], {1}
    15b0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15b4:	0000000c 	andeq	r0, r0, ip
    15b8:	000015a4 	andeq	r1, r0, r4, lsr #11
    15bc:	0002b6d0 	ldrdeq	fp, [r2], -r0
    15c0:	00000060 	andeq	r0, r0, r0, rrx
    15c4:	0000000c 	andeq	r0, r0, ip
    15c8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    15cc:	7c020001 	stcvc	0, cr0, [r2], {1}
    15d0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
    15d4:	0000002c 	andeq	r0, r0, ip, lsr #32
    15d8:	000015c4 	andeq	r1, r0, r4, asr #11
    15dc:	0002b730 	andeq	fp, r2, r0, lsr r7
    15e0:	000000cc 	andeq	r0, r0, ip, asr #1
    15e4:	84100e54 	ldrhi	r0, [r0], #-3668	; 0xfffff1ac
    15e8:	86038504 	strhi	r8, [r3], -r4, lsl #10
    15ec:	5c018e02 	stcpl	14, cr8, [r1], {2}
    15f0:	c5c6ce0a 	strbgt	ip, [r6, #3594]	; 0xe0a
    15f4:	42000ec4 	andmi	r0, r0, #196, 28	; 0xc40
    15f8:	ce0a4e0b 	cdpgt	14, 0, cr4, cr10, cr11, {0}
    15fc:	0ec4c5c6 	cdpeq	5, 12, cr12, cr4, cr6, {6}
    1600:	000b4200 	andeq	r4, fp, r0, lsl #4

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
	...
   8:	00000020 	andeq	r0, r0, r0, lsr #32
   c:	20500001 	subscs	r0, r0, r1
  10:	ac000000 	stcge	0, cr0, [r0], {-0}
  14:	04000000 	streq	r0, [r0], #-0
  18:	5001f300 	andpl	pc, r1, r0, lsl #6
  1c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
  2c:	00002000 	andeq	r2, r0, r0
  30:	51000100 	mrspl	r0, (UNDEF: 16)
  34:	00000020 	andeq	r0, r0, r0, lsr #32
  38:	000000ac 	andeq	r0, r0, ip, lsr #1
  3c:	01f30004 	mvnseq	r0, r4
  40:	00009f51 	andeq	r9, r0, r1, asr pc
	...
  4c:	00010100 	andeq	r0, r1, r0, lsl #2
  50:	00000000 	andeq	r0, r0, r0
  54:	00000002 	andeq	r0, r0, r2
	...
  60:	00000044 	andeq	r0, r0, r4, asr #32
  64:	44520001 	ldrbmi	r0, [r2], #-1
  68:	50000000 	andpl	r0, r0, r0
  6c:	03000000 	movweq	r0, #0
  70:	9f047200 	svcls	0x00047200
  74:	00000050 	andeq	r0, r0, r0, asr r0
  78:	00000060 	andeq	r0, r0, r0, rrx
  7c:	60520001 	subsvs	r0, r2, r1
  80:	70000000 	andvc	r0, r0, r0
  84:	01000000 	mrseq	r0, (UNDEF: 0)
  88:	00705400 	rsbseq	r5, r0, r0, lsl #8
  8c:	00780000 	rsbseq	r0, r8, r0
  90:	000a0000 	andeq	r0, sl, r0
  94:	7020007c 	eorvc	r0, r0, ip, ror r0
  98:	00742200 	rsbseq	r2, r4, r0, lsl #4
  9c:	007c9f22 	rsbseq	r9, ip, r2, lsr #30
  a0:	00900000 	addseq	r0, r0, r0
  a4:	000a0000 	andeq	r0, sl, r0
  a8:	7020007c 	eorvc	r0, r0, ip, ror r0
  ac:	00742200 	rsbseq	r2, r4, r0, lsl #4
  b0:	00989f22 	addseq	r9, r8, r2, lsr #30
  b4:	009c0000 	addseq	r0, ip, r0
  b8:	00010000 	andeq	r0, r1, r0
  bc:	00009c52 	andeq	r9, r0, r2, asr ip
  c0:	0000a000 	andeq	sl, r0, r0
  c4:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
  c8:	000000a0 	andeq	r0, r0, r0, lsr #1
  cc:	000000a4 	andeq	r0, r0, r4, lsr #1
  d0:	007c000a 	rsbseq	r0, ip, sl
  d4:	22007020 	andcs	r7, r0, #32
  d8:	9f220074 	svcls	0x00220074
	...
  e4:	00000002 	andeq	r0, r0, r2
	...
  f4:	00000020 	andeq	r0, r0, r0, lsr #32
  f8:	20500001 	subscs	r0, r0, r1
  fc:	54000000 	strpl	r0, [r0], #-0
 100:	04000000 	streq	r0, [r0], #-0
 104:	5001f300 	andpl	pc, r1, r0, lsl #6
 108:	0000549f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 10c:	00005c00 	andeq	r5, r0, r0, lsl #24
 110:	50000100 	andpl	r0, r0, r0, lsl #2
 114:	00000070 	andeq	r0, r0, r0, ror r0
 118:	00000090 	muleq	r0, r0, r0
 11c:	017c0003 	cmneq	ip, r3
 120:	0000989f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 124:	0000a000 	andeq	sl, r0, r0
 128:	50000100 	andpl	r0, r0, r0, lsl #2
 12c:	000000a0 	andeq	r0, r0, r0, lsr #1
 130:	000000ac 	andeq	r0, r0, ip, lsr #1
 134:	017c0003 	cmneq	ip, r3
 138:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 13c:	00000000 	andeq	r0, r0, r0
 140:	00000300 	andeq	r0, r0, r0, lsl #6
 144:	01010000 	mrseq	r0, (UNDEF: 1)
 148:	00000000 	andeq	r0, r0, r0
 14c:	00002000 	andeq	r2, r0, r0
 150:	51000100 	mrspl	r0, (UNDEF: 16)
 154:	00000020 	andeq	r0, r0, r0, lsr #32
 158:	00000038 	andeq	r0, r0, r8, lsr r0
 15c:	38530001 	ldmdacc	r3, {r0}^
 160:	4c000000 	stcmi	0, cr0, [r0], {-0}
 164:	01000000 	mrseq	r0, (UNDEF: 0)
 168:	004c5100 	subeq	r5, ip, r0, lsl #2
 16c:	00540000 	subseq	r0, r4, r0
 170:	00010000 	andeq	r0, r1, r0
 174:	00000053 	andeq	r0, r0, r3, asr r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
 180:	54000000 	strpl	r0, [r0], #-0
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	00005000 	andeq	r5, r0, r0
	...
 194:	00010100 	andeq	r0, r1, r0, lsl #2
 198:	00000028 	andeq	r0, r0, r8, lsr #32
 19c:	00000038 	andeq	r0, r0, r8, lsr r0
 1a0:	38530001 	ldmdacc	r3, {r0}^
 1a4:	4c000000 	stcmi	0, cr0, [r0], {-0}
 1a8:	01000000 	mrseq	r0, (UNDEF: 0)
 1ac:	004c5100 	subeq	r5, ip, r0, lsl #2
 1b0:	00540000 	subseq	r0, r4, r0
 1b4:	00010000 	andeq	r0, r1, r0
 1b8:	00000053 	andeq	r0, r0, r3, asr r0
	...
 1cc:	70000000 	andvc	r0, r0, r0
 1d0:	01000000 	mrseq	r0, (UNDEF: 0)
 1d4:	00705100 	rsbseq	r5, r0, r0, lsl #2
 1d8:	00e40000 	rsceq	r0, r4, r0
 1dc:	00040000 	andeq	r0, r4, r0
 1e0:	9f5101f3 	svcls	0x005101f3
 1e4:	000000e4 	andeq	r0, r0, r4, ror #1
 1e8:	00000100 	andeq	r0, r0, r0, lsl #2
 1ec:	00510001 	subseq	r0, r1, r1
 1f0:	14000001 	strne	r0, [r0], #-1
 1f4:	04000001 	streq	r0, [r0], #-1
 1f8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 1fc:	0001149f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 200:	00012000 	andeq	r2, r1, r0
 204:	51000100 	mrspl	r0, (UNDEF: 16)
	...
 224:	00340000 	eorseq	r0, r4, r0
 228:	00010000 	andeq	r0, r1, r0
 22c:	0000b452 	andeq	fp, r0, r2, asr r4
 230:	0000bc00 	andeq	fp, r0, r0, lsl #24
 234:	52000100 	andpl	r0, r0, #0, 2
 238:	000000bc 	strheq	r0, [r0], -ip
 23c:	000000c0 	andeq	r0, r0, r0, asr #1
 240:	c0530001 	subsgt	r0, r3, r1
 244:	c4000000 	strgt	r0, [r0], #-0
 248:	03000000 	movweq	r0, #0
 24c:	9f7f7200 	svcls	0x007f7200
 250:	000000e4 	andeq	r0, r0, r4, ror #1
 254:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 258:	f0520001 			; <UNDEFINED> instruction: 0xf0520001
 25c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 260:	01000000 	mrseq	r0, (UNDEF: 0)
 264:	00f85300 	rscseq	r5, r8, r0, lsl #6
 268:	01000000 	mrseq	r0, (UNDEF: 0)
 26c:	00030000 	andeq	r0, r3, r0
 270:	149f7f73 	ldrne	r7, [pc], #3955	; 278 <_start-0xfd88>
 274:	1c000001 	stcne	0, cr0, [r0], {1}
 278:	01000001 	tsteq	r0, r1
 27c:	011c5200 	tsteq	ip, r0, lsl #4
 280:	01200000 			; <UNDEFINED> instruction: 0x01200000
 284:	00010000 	andeq	r0, r1, r0
 288:	00000053 	andeq	r0, r0, r3, asr r0
 28c:	00000000 	andeq	r0, r0, r0
 290:	00000200 	andeq	r0, r0, r0, lsl #4
	...
 29c:	b4000000 	strlt	r0, [r0], #-0
 2a0:	01000000 	mrseq	r0, (UNDEF: 0)
 2a4:	00b45000 	adcseq	r5, r4, r0
 2a8:	00cc0000 	sbceq	r0, ip, r0
 2ac:	00010000 	andeq	r0, r1, r0
 2b0:	0000e45c 	andeq	lr, r0, ip, asr r4
 2b4:	0000ec00 	andeq	lr, r0, r0, lsl #24
 2b8:	50000100 	andpl	r0, r0, r0, lsl #2
 2bc:	000000ec 	andeq	r0, r0, ip, ror #1
 2c0:	000000f4 	strdeq	r0, [r0], -r4
 2c4:	005c0001 	subseq	r0, ip, r1
 2c8:	20000001 	andcs	r0, r0, r1
 2cc:	01000001 	tsteq	r0, r1
 2d0:	00005000 	andeq	r5, r0, r0
 2d4:	00000000 	andeq	r0, r0, r0
 2d8:	00030000 	andeq	r0, r3, r0
 2dc:	01000000 	mrseq	r0, (UNDEF: 0)
 2e0:	01000001 	tsteq	r0, r1
 2e4:	00000001 	andeq	r0, r0, r1
 2e8:	00000000 	andeq	r0, r0, r0
 2ec:	00000070 	andeq	r0, r0, r0, ror r0
 2f0:	70510001 	subsvc	r0, r1, r1
 2f4:	b4000000 	strlt	r0, [r0], #-0
 2f8:	04000000 	streq	r0, [r0], #-0
 2fc:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 300:	0000b49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 304:	0000cc00 	andeq	ip, r0, r0, lsl #24
 308:	51000100 	mrspl	r0, (UNDEF: 16)
 30c:	000000cc 	andeq	r0, r0, ip, asr #1
 310:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 314:	01710003 	cmneq	r1, r3
 318:	0000d09f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 31c:	00010000 	andeq	r0, r1, r0
 320:	51000100 	mrspl	r0, (UNDEF: 16)
 324:	00000100 	andeq	r0, r0, r0, lsl #2
 328:	00000104 	andeq	r0, r0, r4, lsl #2
 32c:	01710003 	cmneq	r1, r3
 330:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 334:	00012000 	andeq	r2, r1, r0
 338:	51000100 	mrspl	r0, (UNDEF: 16)
	...
 344:	00780000 	rsbseq	r0, r8, r0
 348:	00940000 	addseq	r0, r4, r0
 34c:	00010000 	andeq	r0, r1, r0
 350:	0000005c 	andeq	r0, r0, ip, asr r0
 354:	00000000 	andeq	r0, r0, r0
 358:	01010000 	mrseq	r0, (UNDEF: 1)
 35c:	01010000 	mrseq	r0, (UNDEF: 1)
 360:	00030202 	andeq	r0, r3, r2, lsl #4
 364:	01010000 	mrseq	r0, (UNDEF: 1)
 368:	34000000 	strcc	r0, [r0], #-0
 36c:	34000000 	strcc	r0, [r0], #-0
 370:	03000000 	movweq	r0, #0
 374:	9f707300 	svcls	0x00707300
 378:	00000034 	andeq	r0, r0, r4, lsr r0
 37c:	00000048 	andeq	r0, r0, r8, asr #32
 380:	74730003 	ldrbtvc	r0, [r3], #-3
 384:	0000489f 	muleq	r0, pc, r8	; <UNPREDICTABLE>
 388:	00005800 	andeq	r5, r0, r0, lsl #16
 38c:	73000300 	movwvc	r0, #768	; 0x300
 390:	00589f64 	subseq	r9, r8, r4, ror #30
 394:	00580000 	subseq	r0, r8, r0
 398:	00030000 	andeq	r0, r3, r0
 39c:	589f6873 	ldmpl	pc, {r0, r1, r4, r5, r6, fp, sp, lr}	; <UNPREDICTABLE>
 3a0:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
 3a4:	03000000 	movweq	r0, #0
 3a8:	9f6c7300 	svcls	0x006c7300
 3ac:	00000078 	andeq	r0, r0, r8, ror r0
 3b0:	00000094 	muleq	r0, r4, r0
 3b4:	94510001 	ldrbls	r0, [r1], #-1
 3b8:	94000000 	strls	r0, [r0], #-0
 3bc:	01000000 	mrseq	r0, (UNDEF: 0)
 3c0:	00945400 	addseq	r5, r4, r0, lsl #8
 3c4:	00980000 	addseq	r0, r8, r0
 3c8:	00030000 	andeq	r0, r3, r0
 3cc:	989f0474 	ldmls	pc, {r2, r4, r5, r6, sl}	; <UNPREDICTABLE>
 3d0:	b4000000 	strlt	r0, [r0], #-0
 3d4:	01000000 	mrseq	r0, (UNDEF: 0)
 3d8:	00005400 	andeq	r5, r0, r0, lsl #8
	...
 3f0:	000000cc 	andeq	r0, r0, ip, asr #1
 3f4:	cc510001 	mrrcgt	0, 0, r0, r1, cr1
 3f8:	e4000000 	str	r0, [r0], #-0
 3fc:	04000000 	streq	r0, [r0], #-0
 400:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 404:	0000e49f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 408:	0000f000 	andeq	pc, r0, r0
 40c:	51000100 	mrspl	r0, (UNDEF: 16)
 410:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 414:	00000104 	andeq	r0, r0, r4, lsl #2
 418:	01f30004 	mvnseq	r0, r4
 41c:	01049f51 	tsteq	r4, r1, asr pc
 420:	011c0000 	tsteq	ip, r0
 424:	00010000 	andeq	r0, r1, r0
 428:	00000051 	andeq	r0, r0, r1, asr r0
	...
 438:	00000100 	andeq	r0, r0, r0, lsl #2
 43c:	01010000 	mrseq	r0, (UNDEF: 1)
 440:	00000000 	andeq	r0, r0, r0
 444:	10000000 	andne	r0, r0, r0
 448:	01000000 	mrseq	r0, (UNDEF: 0)
 44c:	00105200 	andseq	r5, r0, r0, lsl #4
 450:	00200000 	eoreq	r0, r0, r0
 454:	00010000 	andeq	r0, r1, r0
 458:	00002052 	andeq	r2, r0, r2, asr r0
 45c:	00002400 	andeq	r2, r0, r0, lsl #8
 460:	72000300 	andvc	r0, r0, #0, 6
 464:	00249f7f 	eoreq	r9, r4, pc, ror pc
 468:	002c0000 	eoreq	r0, ip, r0
 46c:	00010000 	andeq	r0, r1, r0
 470:	00002c52 	andeq	r2, r0, r2, asr ip
 474:	00003800 	andeq	r3, r0, r0, lsl #16
 478:	72000300 	andvc	r0, r0, #0, 6
 47c:	009c9f7f 	addseq	r9, ip, pc, ror pc
 480:	00a00000 	adceq	r0, r0, r0
 484:	00010000 	andeq	r0, r1, r0
 488:	0000c052 	andeq	ip, r0, r2, asr r0
 48c:	0000c000 	andeq	ip, r0, r0
 490:	52000100 	andpl	r0, r0, #0, 2
 494:	000000c0 	andeq	r0, r0, r0, asr #1
 498:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 49c:	7f720003 	svcvc	0x00720003
 4a0:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 4a4:	00011400 	andeq	r1, r1, r0, lsl #8
 4a8:	52000100 	andpl	r0, r0, #0, 2
	...
 4b4:	02000002 	andeq	r0, r0, #2
 4b8:	00000002 	andeq	r0, r0, r2
 4bc:	00010100 	andeq	r0, r1, r0, lsl #2
 4c0:	00010100 	andeq	r0, r1, r0, lsl #2
	...
 4cc:	00200000 	eoreq	r0, r0, r0
 4d0:	00010000 	andeq	r0, r1, r0
 4d4:	00002050 	andeq	r2, r0, r0, asr r0
 4d8:	00002c00 	andeq	r2, r0, r0, lsl #24
 4dc:	53000100 	movwpl	r0, #256	; 0x100
 4e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 4e4:	00000030 	andeq	r0, r0, r0, lsr r0
 4e8:	01730003 	cmneq	r3, r3
 4ec:	0000309f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 4f0:	0000a400 	andeq	sl, r0, r0, lsl #8
 4f4:	53000100 	movwpl	r0, #256	; 0x100
 4f8:	000000c0 	andeq	r0, r0, r0, asr #1
 4fc:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 500:	d0530001 	subsle	r0, r3, r1
 504:	d4000000 	strle	r0, [r0], #-0
 508:	03000000 	movweq	r0, #0
 50c:	9f017300 	svcls	0x00017300
 510:	000000d4 	ldrdeq	r0, [r0], -r4
 514:	000000f4 	strdeq	r0, [r0], -r4
 518:	f4530001 			; <UNDEFINED> instruction: 0xf4530001
 51c:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
 520:	03000000 	movweq	r0, #0
 524:	9f017300 	svcls	0x00017300
 528:	000000f8 	strdeq	r0, [r0], -r8
 52c:	00000108 	andeq	r0, r0, r8, lsl #2
 530:	0c530001 	mrrceq	0, 0, r0, r3, cr1
 534:	14000001 	strne	r0, [r0], #-1
 538:	01000001 	tsteq	r0, r1
 53c:	01145000 	tsteq	r4, r0
 540:	011c0000 	tsteq	ip, r0
 544:	00010000 	andeq	r0, r1, r0
 548:	00000053 	andeq	r0, r0, r3, asr r0
 54c:	00000000 	andeq	r0, r0, r0
 550:	00000100 	andeq	r0, r0, r0, lsl #2
 554:	54000000 	strpl	r0, [r0], #-0
 558:	e4000000 	str	r0, [r0], #-0
 55c:	03000000 	movweq	r0, #0
 560:	9f200800 	svcls	0x00200800
 564:	00000104 	andeq	r0, r0, r4, lsl #2
 568:	0000010c 	andeq	r0, r0, ip, lsl #2
 56c:	20080003 	andcs	r0, r8, r3
 570:	0001149f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 574:	00011c00 	andeq	r1, r1, r0, lsl #24
 578:	08000300 	stmdaeq	r0, {r8, r9}
 57c:	00009f20 	andeq	r9, r0, r0, lsr #30
	...
 58c:	004c0000 	subeq	r0, ip, r0
 590:	00e00000 	rsceq	r0, r0, r0
 594:	00010000 	andeq	r0, r1, r0
 598:	0000e05e 	andeq	lr, r0, lr, asr r0
 59c:	0000e400 	andeq	lr, r0, r0, lsl #8
 5a0:	f3002200 	vhsub.u8	d2, d0, d0
 5a4:	ff085101 			; <UNDEFINED> instruction: 0xff085101
 5a8:	5101f31a 	tstpl	r1, sl, lsl r3	; <UNPREDICTABLE>
 5ac:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
 5b0:	01f32124 	mvnseq	r2, r4, lsr #2
 5b4:	1aff0851 	bne	fffc2700 <_estack+0xf7fa2700>
 5b8:	085101f3 	ldmdaeq	r1, {r0, r1, r4, r5, r6, r7, r8}^
 5bc:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xfffff501
 5c0:	21244021 			; <UNDEFINED> instruction: 0x21244021
 5c4:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 5c8:	00010c00 	andeq	r0, r1, r0, lsl #24
 5cc:	5e000100 	adfpls	f0, f0, f0
 5d0:	00000114 	andeq	r0, r0, r4, lsl r1
 5d4:	0000011c 	andeq	r0, r0, ip, lsl r1
 5d8:	005e0001 	subseq	r0, lr, r1
 5dc:	00000000 	andeq	r0, r0, r0
 5e0:	01000000 	mrseq	r0, (UNDEF: 0)
 5e4:	01010100 	mrseq	r0, (UNDEF: 17)
 5e8:	01010101 	tsteq	r1, r1, lsl #2
 5ec:	00000000 	andeq	r0, r0, r0
 5f0:	01010000 	mrseq	r0, (UNDEF: 1)
 5f4:	00000000 	andeq	r0, r0, r0
 5f8:	48000000 	stmdami	r0, {}	; <UNPREDICTABLE>
 5fc:	70000000 	andvc	r0, r0, r0
 600:	01000000 	mrseq	r0, (UNDEF: 0)
 604:	00705300 	rsbseq	r5, r0, r0, lsl #6
 608:	00740000 	rsbseq	r0, r4, r0
 60c:	00030000 	andeq	r0, r3, r0
 610:	749f747c 	ldrvc	r7, [pc], #1148	; 618 <_start-0xf9e8>
 614:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 618:	03000000 	movweq	r0, #0
 61c:	9f787c00 	svcls	0x00787c00
 620:	00000078 	andeq	r0, r0, r8, ror r0
 624:	0000007c 	andeq	r0, r0, ip, ror r0
 628:	7c7c0003 	ldclvc	0, cr0, [ip], #-12
 62c:	00007c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 630:	00008400 	andeq	r8, r0, r0, lsl #8
 634:	5c000100 	stfpls	f0, [r0], {-0}
 638:	00000084 	andeq	r0, r0, r4, lsl #1
 63c:	00000090 	muleq	r0, r0, r0
 640:	707c0003 	rsbsvc	r0, ip, r3
 644:	00009c9f 	muleq	r0, pc, ip	; <UNPREDICTABLE>
 648:	0000a000 	andeq	sl, r0, r0
 64c:	5c000100 	stfpls	f0, [r0], {-0}
 650:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 654:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 658:	b05c0001 	subslt	r0, ip, r1
 65c:	b4000000 	strlt	r0, [r0], #-0
 660:	03000000 	movweq	r0, #0
 664:	9f047c00 	svcls	0x00047c00
 668:	000000b4 	strheq	r0, [r0], -r4
 66c:	000000e4 	andeq	r0, r0, r4, ror #1
 670:	045c0001 	ldrbeq	r0, [ip], #-1
 674:	0c000001 	stceq	0, cr0, [r0], {1}
 678:	01000001 	tsteq	r0, r1
 67c:	01145c00 	tsteq	r4, r0, lsl #24
 680:	011c0000 	tsteq	ip, r0
 684:	00010000 	andeq	r0, r1, r0
 688:	00000053 	andeq	r0, r0, r3, asr r0
 68c:	00000000 	andeq	r0, r0, r0
 690:	00000600 	andeq	r0, r0, r0, lsl #12
	...
 69c:	cc000000 	stcgt	0, cr0, [r0], {-0}
 6a0:	06000000 	streq	r0, [r0], -r0
 6a4:	08007100 	stmdaeq	r0, {r8, ip, sp, lr}
 6a8:	cc9f1aff 	vldmiagt	pc, {s2-s256}
 6ac:	e4000000 	str	r0, [r0], #-0
 6b0:	07000000 	streq	r0, [r0, -r0]
 6b4:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 6b8:	9f1aff08 	svcls	0x001aff08
 6bc:	000000e4 	andeq	r0, r0, r4, ror #1
 6c0:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 6c4:	00710006 	rsbseq	r0, r1, r6
 6c8:	9f1aff08 	svcls	0x001aff08
 6cc:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 6d0:	00000104 	andeq	r0, r0, r4, lsl #2
 6d4:	01f30007 	mvnseq	r0, r7
 6d8:	1aff0851 	bne	fffc2824 <_estack+0xf7fa2824>
 6dc:	0001049f 	muleq	r1, pc, r4	; <UNPREDICTABLE>
 6e0:	00011c00 	andeq	r1, r1, r0, lsl #24
 6e4:	71000600 	tstvc	r0, r0, lsl #12
 6e8:	1aff0800 	bne	fffc26f0 <_estack+0xf7fa26f0>
 6ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
 700:	00001400 	andeq	r1, r0, r0, lsl #8
 704:	50000100 	andpl	r0, r0, r0, lsl #2
 708:	00000014 	andeq	r0, r0, r4, lsl r0
 70c:	000000c4 	andeq	r0, r0, r4, asr #1
 710:	01f30004 	mvnseq	r0, r4
 714:	00c49f50 	sbceq	r9, r4, r0, asr pc
 718:	00d00000 	sbcseq	r0, r0, r0
 71c:	00010000 	andeq	r0, r1, r0
 720:	0000d050 	andeq	sp, r0, r0, asr r0
 724:	00015000 	andeq	r5, r1, r0
 728:	f3000400 	vshl.u8	d0, d0, d0
 72c:	009f5001 	addseq	r5, pc, r1
	...
 73c:	04000000 	streq	r0, [r0], #-0
 740:	01000000 	mrseq	r0, (UNDEF: 0)
 744:	00045100 	andeq	r5, r4, r0, lsl #2
 748:	01500000 	cmpeq	r0, r0
 74c:	00040000 	andeq	r0, r4, r0
 750:	9f5101f3 	svcls	0x005101f3
	...
 760:	02010000 	andeq	r0, r1, #0
 764:	00000002 	andeq	r0, r0, r2
 768:	01000000 	mrseq	r0, (UNDEF: 0)
 76c:	00000001 	andeq	r0, r0, r1
 770:	00000004 	andeq	r0, r0, r4
 774:	0000004c 	andeq	r0, r0, ip, asr #32
 778:	70500001 	subsvc	r0, r0, r1
 77c:	84000000 	strhi	r0, [r0], #-0
 780:	01000000 	mrseq	r0, (UNDEF: 0)
 784:	00845000 	addeq	r5, r4, r0
 788:	008c0000 	addeq	r0, ip, r0
 78c:	00030000 	andeq	r0, r3, r0
 790:	8c9f7f70 	ldchi	15, cr7, [pc], {112}	; 0x70
 794:	8c000000 	stchi	0, cr0, [r0], {-0}
 798:	03000000 	movweq	r0, #0
 79c:	9f017000 	svcls	0x00017000
 7a0:	0000008c 	andeq	r0, r0, ip, lsl #1
 7a4:	000000c0 	andeq	r0, r0, r0, asr #1
 7a8:	c0500001 	subsgt	r0, r0, r1
 7ac:	c4000000 	strgt	r0, [r0], #-0
 7b0:	03000000 	movweq	r0, #0
 7b4:	9f7f7300 	svcls	0x007f7300
 7b8:	000000c4 	andeq	r0, r0, r4, asr #1
 7bc:	0000010c 	andeq	r0, r0, ip, lsl #2
 7c0:	20500001 	subscs	r0, r0, r1
 7c4:	2c000001 	stccs	0, cr0, [r0], {1}
 7c8:	01000001 	tsteq	r0, r1
 7cc:	012c5000 			; <UNDEFINED> instruction: 0x012c5000
 7d0:	01300000 	teqeq	r0, r0
 7d4:	00030000 	andeq	r0, r3, r0
 7d8:	309f0170 	addscc	r0, pc, r0, ror r1	; <UNPREDICTABLE>
 7dc:	3c000001 	stccc	0, cr0, [r0], {1}
 7e0:	01000001 	tsteq	r0, r1
 7e4:	00005000 	andeq	r5, r0, r0
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	00010000 	andeq	r0, r1, r0
 7f0:	00000004 	andeq	r0, r0, r4
 7f4:	00000150 	andeq	r0, r0, r0, asr r1
 7f8:	01f30004 	mvnseq	r0, r4
 7fc:	00009f51 	andeq	r9, r0, r1, asr pc
 800:	00000000 	andeq	r0, r0, r0
 804:	00010000 	andeq	r0, r1, r0
 808:	00000000 	andeq	r0, r0, r0
 80c:	00140000 	andseq	r0, r4, r0
 810:	00200000 	eoreq	r0, r0, r0
 814:	00010000 	andeq	r0, r1, r0
 818:	00002051 	andeq	r2, r0, r1, asr r0
 81c:	00009800 	andeq	r9, r0, r0, lsl #16
 820:	55000100 	strpl	r0, [r0, #-256]	; 0xffffff00
 824:	0000013c 	andeq	r0, r0, ip, lsr r1
 828:	00000144 	andeq	r0, r0, r4, asr #2
 82c:	44550001 	ldrbmi	r0, [r5], #-1
 830:	50000001 	andpl	r0, r0, r1
 834:	12000001 	andne	r0, r0, #1
 838:	38007100 	stmdacc	r0, {r8, ip, sp, lr}
 83c:	38007124 	stmdacc	r0, {r2, r5, r8, ip, sp, lr}
 840:	21007124 	tstcs	r0, r4, lsr #2
 844:	71212440 			; <UNDEFINED> instruction: 0x71212440
 848:	009f2100 	addseq	r2, pc, r0, lsl #2
 84c:	00000000 	andeq	r0, r0, r0
 850:	02000000 	andeq	r0, r0, #0
 854:	01010101 	tsteq	r1, r1, lsl #2
 858:	14000000 	strne	r0, [r0], #-0
 85c:	20000000 	andcs	r0, r0, r0
 860:	02000000 	andeq	r0, r0, #0
 864:	209f3800 	addscs	r3, pc, r0, lsl #16
 868:	28000000 	stmdacs	r0, {}	; <UNPREDICTABLE>
 86c:	02000000 	andeq	r0, r0, #0
 870:	289f4000 	ldmcs	pc, {lr}	; <UNPREDICTABLE>
 874:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
 878:	03000000 	movweq	r0, #0
 87c:	9f200800 	svcls	0x00200800
 880:	0000013c 	andeq	r0, r0, ip, lsr r1
 884:	00000150 	andeq	r0, r0, r0, asr r1
 888:	20080003 	andcs	r0, r8, r3
 88c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 890:	00000000 	andeq	r0, r0, r0
 894:	01010200 	mrseq	r0, R9_usr
 898:	00000000 	andeq	r0, r0, r0
 89c:	00000101 	andeq	r0, r0, r1, lsl #2
 8a0:	00002800 	andeq	r2, r0, r0, lsl #16
 8a4:	00004c00 	andeq	r4, r0, r0, lsl #24
 8a8:	50000100 	andpl	r0, r0, r0, lsl #2
 8ac:	0000004c 	andeq	r0, r0, ip, asr #32
 8b0:	00000050 	andeq	r0, r0, r0, asr r0
 8b4:	04700003 	ldrbteq	r0, [r0], #-3
 8b8:	0000509f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
 8bc:	00008000 	andeq	r8, r0, r0
 8c0:	50000100 	andpl	r0, r0, r0, lsl #2
 8c4:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 8c8:	0000010c 	andeq	r0, r0, ip, lsl #2
 8cc:	0c500001 	mrrceq	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
 8d0:	10000001 	andne	r0, r0, r1
 8d4:	03000001 	movweq	r0, #1
 8d8:	9f047000 	svcls	0x00047000
 8dc:	00000110 	andeq	r0, r0, r0, lsl r1
 8e0:	0000012c 	andeq	r0, r0, ip, lsr #2
 8e4:	00500001 	subseq	r0, r0, r1
	...
 8f0:	d0000000 	andle	r0, r0, r0
 8f4:	300002b6 			; <UNDEFINED> instruction: 0x300002b6
 8f8:	010002b7 			; <UNDEFINED> instruction: 0x010002b7
 8fc:	b7305000 	ldrlt	r5, [r0, -r0]!
 900:	b7300002 	ldrlt	r0, [r0, -r2]!
 904:	00040002 	andeq	r0, r4, r2
 908:	9f5001f3 	svcls	0x005001f3
	...
 920:	0000002c 	andeq	r0, r0, ip, lsr #32
 924:	2c510001 	mrrccs	0, 0, r0, r1, cr1
 928:	84000000 	strhi	r0, [r0], #-0
 92c:	04000000 	streq	r0, [r0], #-0
 930:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
 934:	0000849f 	muleq	r0, pc, r4	; <UNPREDICTABLE>
 938:	00009400 	andeq	r9, r0, r0, lsl #8
 93c:	51000100 	mrspl	r0, (UNDEF: 16)
 940:	00000094 	muleq	r0, r4, r0
 944:	000000cc 	andeq	r0, r0, ip, asr #1
 948:	01f30004 	mvnseq	r0, r4
 94c:	00009f51 	andeq	r9, r0, r1, asr pc
	...
 958:	01000000 	mrseq	r0, (UNDEF: 0)
	...
 964:	002c0000 	eoreq	r0, ip, r0
 968:	00010000 	andeq	r0, r1, r0
 96c:	00004852 	andeq	r4, r0, r2, asr r8
 970:	00005400 	andeq	r5, r0, r0, lsl #8
 974:	54000100 	strpl	r0, [r0], #-256	; 0xffffff00
 978:	00000064 	andeq	r0, r0, r4, rrx
 97c:	00000064 	andeq	r0, r0, r4, rrx
 980:	84540001 	ldrbhi	r0, [r4], #-1
 984:	94000000 	strls	r0, [r0], #-0
 988:	01000000 	mrseq	r0, (UNDEF: 0)
 98c:	00985200 	addseq	r5, r8, r0, lsl #4
 990:	00b00000 	adcseq	r0, r0, r0
 994:	00030000 	andeq	r0, r3, r0
 998:	b09f7c72 	addslt	r7, pc, r2, ror ip	; <UNPREDICTABLE>
 99c:	cc000000 	stcgt	0, cr0, [r0], {-0}
 9a0:	01000000 	mrseq	r0, (UNDEF: 0)
 9a4:	00005200 	andeq	r5, r0, r0, lsl #4
 9a8:	00000000 	andeq	r0, r0, r0
 9ac:	00020000 	andeq	r0, r2, r0
 9b0:	00010100 	andeq	r0, r1, r0, lsl #2
 9b4:	01000001 	tsteq	r0, r1
 9b8:	00000001 	andeq	r0, r0, r1
 9bc:	00000000 	andeq	r0, r0, r0
 9c0:	00340000 	eorseq	r0, r4, r0
 9c4:	00010000 	andeq	r0, r1, r0
 9c8:	00003450 	andeq	r3, r0, r0, asr r4
 9cc:	00004800 	andeq	r4, r0, r0, lsl #16
 9d0:	5c000100 	stfpls	f0, [r0], {-0}
 9d4:	00000048 	andeq	r0, r0, r8, asr #32
 9d8:	00000054 	andeq	r0, r0, r4, asr r0
 9dc:	54530001 	ldrbpl	r0, [r3], #-1
 9e0:	5c000000 	stcpl	0, cr0, [r0], {-0}
 9e4:	01000000 	mrseq	r0, (UNDEF: 0)
 9e8:	00645c00 	rsbeq	r5, r4, r0, lsl #24
 9ec:	00700000 	rsbseq	r0, r0, r0
 9f0:	00010000 	andeq	r0, r1, r0
 9f4:	00007053 	andeq	r7, r0, r3, asr r0
 9f8:	00007400 	andeq	r7, r0, r0, lsl #8
 9fc:	73000300 	movwvc	r0, #768	; 0x300
 a00:	00749f01 	rsbseq	r9, r4, r1, lsl #30
 a04:	007c0000 	rsbseq	r0, ip, r0
 a08:	00010000 	andeq	r0, r1, r0
 a0c:	00008453 	andeq	r8, r0, r3, asr r4
 a10:	0000cc00 	andeq	ip, r0, r0, lsl #24
 a14:	50000100 	andpl	r0, r0, r0, lsl #2
	...
 a20:	00000003 	andeq	r0, r0, r3
 a24:	01000001 	tsteq	r0, r1
 a28:	00000001 	andeq	r0, r0, r1
 a2c:	002c0000 	eoreq	r0, ip, r0
 a30:	00010000 	andeq	r0, r1, r0
 a34:	00008451 	andeq	r8, r0, r1, asr r4
 a38:	00009400 	andeq	r9, r0, r0, lsl #8
 a3c:	51000100 	mrspl	r0, (UNDEF: 16)
 a40:	00000094 	muleq	r0, r4, r0
 a44:	0000009c 	muleq	r0, ip, r0
 a48:	9c530001 	mrrcls	0, 0, r0, r3, cr1
 a4c:	b0000000 	andlt	r0, r0, r0
 a50:	01000000 	mrseq	r0, (UNDEF: 0)
 a54:	00b05100 	adcseq	r5, r0, r0, lsl #2
 a58:	00cc0000 	sbceq	r0, ip, r0
 a5c:	00010000 	andeq	r0, r1, r0
 a60:	00000053 	andeq	r0, r0, r3, asr r0
	...
 a6c:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
 a70:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
 a74:	01000000 	mrseq	r0, (UNDEF: 0)
 a78:	00b85c00 	adcseq	r5, r8, r0, lsl #24
 a7c:	00bc0000 	adcseq	r0, ip, r0
 a80:	00030000 	andeq	r0, r3, r0
 a84:	bc9f047c 	cfldrslt	mvf0, [pc], {124}	; 0x7c
 a88:	cc000000 	stcgt	0, cr0, [r0], {-0}
 a8c:	01000000 	mrseq	r0, (UNDEF: 0)
 a90:	00005c00 	andeq	r5, r0, r0, lsl #24
	...
 a9c:	00010100 	andeq	r0, r1, r0, lsl #2
 aa0:	00000098 	muleq	r0, r8, r0
 aa4:	0000009c 	muleq	r0, ip, r0
 aa8:	9c530001 	mrrcls	0, 0, r0, r3, cr1
 aac:	b0000000 	andlt	r0, r0, r0
 ab0:	01000000 	mrseq	r0, (UNDEF: 0)
 ab4:	00b05100 	adcseq	r5, r0, r0, lsl #2
 ab8:	00cc0000 	sbceq	r0, ip, r0
 abc:	00010000 	andeq	r0, r1, r0
 ac0:	00000053 	andeq	r0, r0, r3, asr r0
 ac4:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	0002b6d0 	ldrdeq	fp, [r2], -r0
   4:	0002b730 	andeq	fp, r2, r0, lsr r7
	...
